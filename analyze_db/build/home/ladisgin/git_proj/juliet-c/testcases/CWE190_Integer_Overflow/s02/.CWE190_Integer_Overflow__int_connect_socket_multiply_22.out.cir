!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc143 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":289:10)
#loc144 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":289:14)
#loc145 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":289:20)
#loc146 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":289:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc423 = loc(fused[#loc143, #loc144])
#loc424 = loc(fused[#loc145, #loc146])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global external dsolocal @CWE190_Integer_Overflow__int_connect_socket_multiply_22_badGlobal = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc367)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc368)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc369)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc7)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc370)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc371)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc372)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc373)
  cir.func private @close(!s32i) -> !s32i loc(#loc374)
  cir.func private @CWE190_Integer_Overflow__int_connect_socket_multiply_22_badSink(!s32i) loc(#loc375)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_multiply_22_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc377)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc24)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc378)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc380)
      %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc381)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc382)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc383)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc33)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc33)
      cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc382)
      cir.scope {
        cir.do {
          %11 = cir.const #cir.int<2> : !s32i loc(#loc38)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc39)
          %13 = cir.const #cir.int<6> : !s32i loc(#loc40)
          %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc41)
          cir.store %14, %7 : !s32i, !cir.ptr<!s32i> loc(#loc385)
          cir.scope {
            %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc46)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc47)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc47)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc387)
            cir.if %56 {
              cir.break loc(#loc49)
            } loc(#loc388)
          } loc(#loc386)
          %15 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc389)
          %16 = cir.const #cir.int<0> : !s32i loc(#loc52)
          %17 = cir.const #cir.int<16> : !u64i loc(#loc390)
          cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc391)
          %18 = cir.const #cir.int<2> : !s32i loc(#loc57)
          %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc57)
          %20 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc58)
          cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc392)
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc7)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc7)
          %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc60)
          %24 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc61)
          %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc62)
          cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc393)
          %26 = cir.const #cir.int<27015> : !s32i loc(#loc65)
          %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc65)
          %28 = cir.call @htons(%27) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc66)
          %29 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
          cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc394)
          cir.scope {
            %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc72)
            %54 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc396)
            %55 = cir.const #cir.int<16> : !u64i loc(#loc397)
            %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc397)
            %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc77)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc78)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc78)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc398)
            cir.if %60 {
              cir.break loc(#loc80)
            } loc(#loc399)
          } loc(#loc395)
          %30 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc81)
          %31 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc82)
          %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc82)
          %33 = cir.const #cir.int<3> : !s32i loc(#loc83)
          %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc83)
          %35 = cir.const #cir.int<4> : !u64i loc(#loc83)
          %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc83)
          %37 = cir.const #cir.int<2> : !s32i loc(#loc83)
          %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc83)
          %39 = cir.binop(add, %36, %38) : !u64i loc(#loc83)
          %40 = cir.const #cir.int<1> : !s32i loc(#loc84)
          %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc84)
          %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc400)
          %43 = cir.const #cir.int<0> : !s32i loc(#loc85)
          %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc86)
          %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc86)
          cir.store %45, %5 : !s32i, !cir.ptr<!s32i> loc(#loc401)
          cir.scope {
            %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc91)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc92)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc92)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc403)
            %57 = cir.ternary(%56, true {
              %58 = cir.const #true loc(#loc93)
              cir.yield %58 : !cir.bool loc(#loc93)
            }, false {
              %58 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc94)
              %59 = cir.const #cir.int<0> : !s32i loc(#loc95)
              %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc404)
              %61 = cir.ternary(%60, true {
                %62 = cir.const #true loc(#loc93)
                cir.yield %62 : !cir.bool loc(#loc93)
              }, false {
                %62 = cir.const #false loc(#loc93)
                cir.yield %62 : !cir.bool loc(#loc93)
              }) : (!cir.bool) -> !cir.bool loc(#loc93)
              cir.yield %61 : !cir.bool loc(#loc93)
            }) : (!cir.bool) -> !cir.bool loc(#loc93)
            cir.if %57 {
              cir.break loc(#loc97)
            } loc(#loc405)
          } loc(#loc402)
          %46 = cir.const #cir.int<0> : !s32i loc(#loc98)
          %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc98)
          %48 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc99)
          %49 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc100)
          %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc100)
          cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc406)
          %51 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc101)
          %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc102)
          cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc407)
          cir.yield loc(#loc37)
        } while {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc105)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc105)
          cir.condition(%12) loc(#loc105)
        } loc(#loc384)
      } loc(#loc384)
      cir.scope {
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc108)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc109)
        %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc109)
        %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc409)
        cir.if %14 {
          %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc111)
          %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc112)
        } loc(#loc410)
      } loc(#loc408)
    } loc(#loc379)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc113)
    %3 = cir.get_global @CWE190_Integer_Overflow__int_connect_socket_multiply_22_badGlobal : !cir.ptr<!s32i> loc(#loc367)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc411)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    cir.call @CWE190_Integer_Overflow__int_connect_socket_multiply_22_badSink(%4) : (!s32i) -> () loc(#loc116)
    cir.return loc(#loc21)
  } loc(#loc376)
  cir.global external dsolocal @CWE190_Integer_Overflow__int_connect_socket_multiply_22_goodB2G1Global = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc412)
  cir.global external dsolocal @CWE190_Integer_Overflow__int_connect_socket_multiply_22_goodB2G2Global = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc413)
  cir.global external dsolocal @CWE190_Integer_Overflow__int_connect_socket_multiply_22_goodG2BGlobal = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc414)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_multiply_22_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc416)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc125)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc417)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc127)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc418)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc129)
    cir.return loc(#loc124)
  } loc(#loc415)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc419)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc420)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc421)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc137)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc138)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc139)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc140)
  cir.func @main(%arg0: !s32i loc(fused[#loc143, #loc144]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc145, #loc146])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc423)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc424)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc142)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc147)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc148)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc149)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc149)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc150)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc137)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc137)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc151)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_connect_socket_multiply_22_good : !cir.ptr<!cir.func<!void ()>> loc(#loc425)
    cir.call @CWE190_Integer_Overflow__int_connect_socket_multiply_22_good() : () -> () loc(#loc152)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc138)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc138)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc154)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc139)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc139)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc155)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_connect_socket_multiply_22_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc426)
    cir.call @CWE190_Integer_Overflow__int_connect_socket_multiply_22_bad() : () -> () loc(#loc156)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc140)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc140)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc158)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc159)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc427)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc427)
    cir.return %17 : !s32i loc(#loc427)
  } loc(#loc422)
  cir.func private @CWE190_Integer_Overflow__int_connect_socket_multiply_22_goodB2G1Sink(!s32i) loc(#loc428)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc430)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc167)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc431)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc433)
      %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc434)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc435)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc436)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc176)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc176)
      cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc435)
      cir.scope {
        cir.do {
          %11 = cir.const #cir.int<2> : !s32i loc(#loc181)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc182)
          %13 = cir.const #cir.int<6> : !s32i loc(#loc183)
          %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc184)
          cir.store %14, %7 : !s32i, !cir.ptr<!s32i> loc(#loc438)
          cir.scope {
            %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc189)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc190)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc190)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc440)
            cir.if %56 {
              cir.break loc(#loc192)
            } loc(#loc441)
          } loc(#loc439)
          %15 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc442)
          %16 = cir.const #cir.int<0> : !s32i loc(#loc195)
          %17 = cir.const #cir.int<16> : !u64i loc(#loc443)
          cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc444)
          %18 = cir.const #cir.int<2> : !s32i loc(#loc200)
          %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc200)
          %20 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc58)
          cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc445)
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc202)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc202)
          %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc203)
          %24 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc61)
          %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc62)
          cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc446)
          %26 = cir.const #cir.int<27015> : !s32i loc(#loc206)
          %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc206)
          %28 = cir.call @htons(%27) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc207)
          %29 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
          cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc447)
          cir.scope {
            %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc212)
            %54 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc449)
            %55 = cir.const #cir.int<16> : !u64i loc(#loc450)
            %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc450)
            %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc217)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc218)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc218)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc451)
            cir.if %60 {
              cir.break loc(#loc220)
            } loc(#loc452)
          } loc(#loc448)
          %30 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc221)
          %31 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc222)
          %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc222)
          %33 = cir.const #cir.int<3> : !s32i loc(#loc223)
          %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc223)
          %35 = cir.const #cir.int<4> : !u64i loc(#loc223)
          %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc223)
          %37 = cir.const #cir.int<2> : !s32i loc(#loc223)
          %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc223)
          %39 = cir.binop(add, %36, %38) : !u64i loc(#loc223)
          %40 = cir.const #cir.int<1> : !s32i loc(#loc224)
          %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc224)
          %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc453)
          %43 = cir.const #cir.int<0> : !s32i loc(#loc225)
          %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc226)
          %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc226)
          cir.store %45, %5 : !s32i, !cir.ptr<!s32i> loc(#loc454)
          cir.scope {
            %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc231)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc232)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc232)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc456)
            %57 = cir.ternary(%56, true {
              %58 = cir.const #true loc(#loc233)
              cir.yield %58 : !cir.bool loc(#loc233)
            }, false {
              %58 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc234)
              %59 = cir.const #cir.int<0> : !s32i loc(#loc235)
              %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc457)
              %61 = cir.ternary(%60, true {
                %62 = cir.const #true loc(#loc233)
                cir.yield %62 : !cir.bool loc(#loc233)
              }, false {
                %62 = cir.const #false loc(#loc233)
                cir.yield %62 : !cir.bool loc(#loc233)
              }) : (!cir.bool) -> !cir.bool loc(#loc233)
              cir.yield %61 : !cir.bool loc(#loc233)
            }) : (!cir.bool) -> !cir.bool loc(#loc233)
            cir.if %57 {
              cir.break loc(#loc237)
            } loc(#loc458)
          } loc(#loc455)
          %46 = cir.const #cir.int<0> : !s32i loc(#loc238)
          %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc238)
          %48 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc239)
          %49 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc240)
          %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc240)
          cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc459)
          %51 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc241)
          %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc242)
          cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc460)
          cir.yield loc(#loc180)
        } while {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc245)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc245)
          cir.condition(%12) loc(#loc245)
        } loc(#loc437)
      } loc(#loc437)
      cir.scope {
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc248)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc249)
        %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc249)
        %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc462)
        cir.if %14 {
          %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc251)
          %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc252)
        } loc(#loc463)
      } loc(#loc461)
    } loc(#loc432)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc253)
    %3 = cir.get_global @CWE190_Integer_Overflow__int_connect_socket_multiply_22_goodB2G1Global : !cir.ptr<!s32i> loc(#loc412)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc464)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc255)
    cir.call @CWE190_Integer_Overflow__int_connect_socket_multiply_22_goodB2G1Sink(%4) : (!s32i) -> () loc(#loc256)
    cir.return loc(#loc164)
  } loc(#loc429)
  cir.func private @CWE190_Integer_Overflow__int_connect_socket_multiply_22_goodB2G2Sink(!s32i) loc(#loc465)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc467)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc263)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc468)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc470)
      %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc471)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc472)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc473)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc272)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc272)
      cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc472)
      cir.scope {
        cir.do {
          %11 = cir.const #cir.int<2> : !s32i loc(#loc277)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc278)
          %13 = cir.const #cir.int<6> : !s32i loc(#loc279)
          %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc280)
          cir.store %14, %7 : !s32i, !cir.ptr<!s32i> loc(#loc475)
          cir.scope {
            %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc285)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc286)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc286)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc477)
            cir.if %56 {
              cir.break loc(#loc288)
            } loc(#loc478)
          } loc(#loc476)
          %15 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc479)
          %16 = cir.const #cir.int<0> : !s32i loc(#loc291)
          %17 = cir.const #cir.int<16> : !u64i loc(#loc480)
          cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc481)
          %18 = cir.const #cir.int<2> : !s32i loc(#loc296)
          %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc296)
          %20 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc58)
          cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc482)
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc298)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc298)
          %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc299)
          %24 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc61)
          %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc62)
          cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc483)
          %26 = cir.const #cir.int<27015> : !s32i loc(#loc302)
          %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc302)
          %28 = cir.call @htons(%27) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc303)
          %29 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
          cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc484)
          cir.scope {
            %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc308)
            %54 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc486)
            %55 = cir.const #cir.int<16> : !u64i loc(#loc487)
            %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc487)
            %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc313)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc314)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc314)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc488)
            cir.if %60 {
              cir.break loc(#loc316)
            } loc(#loc489)
          } loc(#loc485)
          %30 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc317)
          %31 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc318)
          %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc318)
          %33 = cir.const #cir.int<3> : !s32i loc(#loc319)
          %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc319)
          %35 = cir.const #cir.int<4> : !u64i loc(#loc319)
          %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc319)
          %37 = cir.const #cir.int<2> : !s32i loc(#loc319)
          %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc319)
          %39 = cir.binop(add, %36, %38) : !u64i loc(#loc319)
          %40 = cir.const #cir.int<1> : !s32i loc(#loc320)
          %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc320)
          %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc490)
          %43 = cir.const #cir.int<0> : !s32i loc(#loc321)
          %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc322)
          %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc322)
          cir.store %45, %5 : !s32i, !cir.ptr<!s32i> loc(#loc491)
          cir.scope {
            %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc327)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc328)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc328)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc493)
            %57 = cir.ternary(%56, true {
              %58 = cir.const #true loc(#loc329)
              cir.yield %58 : !cir.bool loc(#loc329)
            }, false {
              %58 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc330)
              %59 = cir.const #cir.int<0> : !s32i loc(#loc331)
              %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc494)
              %61 = cir.ternary(%60, true {
                %62 = cir.const #true loc(#loc329)
                cir.yield %62 : !cir.bool loc(#loc329)
              }, false {
                %62 = cir.const #false loc(#loc329)
                cir.yield %62 : !cir.bool loc(#loc329)
              }) : (!cir.bool) -> !cir.bool loc(#loc329)
              cir.yield %61 : !cir.bool loc(#loc329)
            }) : (!cir.bool) -> !cir.bool loc(#loc329)
            cir.if %57 {
              cir.break loc(#loc333)
            } loc(#loc495)
          } loc(#loc492)
          %46 = cir.const #cir.int<0> : !s32i loc(#loc334)
          %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc334)
          %48 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc335)
          %49 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc336)
          %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc336)
          cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc496)
          %51 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc337)
          %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc338)
          cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc497)
          cir.yield loc(#loc276)
        } while {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc341)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc341)
          cir.condition(%12) loc(#loc341)
        } loc(#loc474)
      } loc(#loc474)
      cir.scope {
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc344)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc345)
        %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc345)
        %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc499)
        cir.if %14 {
          %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc347)
          %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc348)
        } loc(#loc500)
      } loc(#loc498)
    } loc(#loc469)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc349)
    %3 = cir.get_global @CWE190_Integer_Overflow__int_connect_socket_multiply_22_goodB2G2Global : !cir.ptr<!s32i> loc(#loc413)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc501)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc351)
    cir.call @CWE190_Integer_Overflow__int_connect_socket_multiply_22_goodB2G2Sink(%4) : (!s32i) -> () loc(#loc352)
    cir.return loc(#loc260)
  } loc(#loc466)
  cir.func private @CWE190_Integer_Overflow__int_connect_socket_multiply_22_goodG2BSink(!s32i) loc(#loc502)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc504)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc359)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc505)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc361)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc506)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc363)
    %4 = cir.get_global @CWE190_Integer_Overflow__int_connect_socket_multiply_22_goodG2BGlobal : !cir.ptr<!s32i> loc(#loc414)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc507)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc365)
    cir.call @CWE190_Integer_Overflow__int_connect_socket_multiply_22_goodG2BSink(%5) : (!s32i) -> () loc(#loc366)
    cir.return loc(#loc356)
  } loc(#loc503)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":45:1)
#loc2 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":45:73)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/arpa/inet.h":34:1)
#loc6 = loc("/usr/include/arpa/inet.h":34:47)
#loc7 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":80:49)
#loc8 = loc("/usr/include/netinet/in.h":404:1)
#loc9 = loc("/usr/include/netinet/in.h":405:40)
#loc10 = loc("/usr/include/sys/socket.h":126:1)
#loc11 = loc("/usr/include/sys/socket.h":126:75)
#loc12 = loc("/usr/include/sys/socket.h":145:1)
#loc13 = loc("/usr/include/sys/socket.h":145:68)
#loc14 = loc("/usr/include/stdlib.h":105:1)
#loc15 = loc("/usr/include/stdlib.h":106:33)
#loc16 = loc("/usr/include/unistd.h":358:1)
#loc17 = loc("/usr/include/unistd.h":358:27)
#loc18 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":47:1)
#loc19 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":47:78)
#loc20 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":49:1)
#loc21 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":112:1)
#loc22 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":51:5)
#loc23 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":51:9)
#loc24 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":53:12)
#loc25 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":53:5)
#loc26 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":54:5)
#loc27 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":109:5)
#loc28 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":59:9)
#loc29 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":59:13)
#loc30 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":60:9)
#loc31 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":60:28)
#loc32 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":61:9)
#loc33 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":61:32)
#loc34 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":62:9)
#loc35 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":62:41)
#loc36 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":63:9)
#loc37 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":98:17)
#loc38 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":73:36)
#loc39 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":73:45)
#loc40 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":73:58)
#loc41 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":73:29)
#loc42 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":73:13)
#loc43 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":73:69)
#loc44 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":74:13)
#loc45 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":77:13)
#loc46 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":74:17)
#loc47 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":74:34)
#loc48 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":75:13)
#loc49 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":76:17)
#loc50 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":78:20)
#loc51 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":78:21)
#loc52 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":78:30)
#loc53 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":78:33)
#loc54 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":78:47)
#loc55 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":78:13)
#loc56 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":78:48)
#loc57 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":79:34)
#loc58 = loc("/usr/include/netinet/in.h":249:5)
#loc59 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":79:13)
#loc60 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":80:39)
#loc61 = loc("/usr/include/netinet/in.h":251:20)
#loc62 = loc("/usr/include/netinet/in.h":33:15)
#loc63 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":80:13)
#loc64 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":80:59)
#loc65 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":81:38)
#loc66 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":81:32)
#loc67 = loc("/usr/include/netinet/in.h":250:15)
#loc68 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":81:13)
#loc69 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":81:46)
#loc70 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":82:13)
#loc71 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":85:13)
#loc72 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":82:25)
#loc73 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":82:58)
#loc74 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":82:59)
#loc75 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":82:68)
#loc76 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":82:82)
#loc77 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":82:17)
#loc78 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":82:88)
#loc79 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":83:13)
#loc80 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":84:17)
#loc81 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":88:31)
#loc82 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":88:46)
#loc83 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":88:59)
#loc84 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":88:77)
#loc85 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":88:80)
#loc86 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":88:26)
#loc87 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":88:13)
#loc88 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":88:81)
#loc89 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":89:13)
#loc90 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":92:13)
#loc91 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":89:17)
#loc92 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":89:31)
#loc93 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":89:44)
#loc94 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":89:47)
#loc95 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":89:61)
#loc96 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":90:13)
#loc97 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":91:17)
#loc98 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":94:39)
#loc99 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":94:25)
#loc100 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":94:13)
#loc101 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":96:25)
#loc102 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":96:20)
#loc103 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":96:13)
#loc104 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":96:36)
#loc105 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":98:16)
#loc106 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":99:9)
#loc107 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":102:9)
#loc108 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":99:13)
#loc109 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":99:30)
#loc110 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":100:9)
#loc111 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":101:26)
#loc112 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":101:13)
#loc113 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":110:73)
#loc114 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":110:5)
#loc115 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":111:69)
#loc116 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":111:5)
#loc117 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":119:1)
#loc118 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":119:78)
#loc119 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":120:1)
#loc120 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":120:78)
#loc121 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":121:1)
#loc122 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":121:77)
#loc123 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":273:1)
#loc124 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":278:1)
#loc125 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":275:5)
#loc126 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":275:14)
#loc127 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":276:5)
#loc128 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":276:14)
#loc129 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":277:5)
#loc130 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":277:13)
#loc131 = loc("/usr/include/stdlib.h":575:1)
#loc132 = loc("/usr/include/stdlib.h":575:41)
#loc133 = loc("/usr/include/time.h":76:1)
#loc134 = loc("/usr/include/time.h":76:38)
#loc135 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc136 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc137 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":294:15)
#loc138 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":296:15)
#loc139 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":299:15)
#loc140 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":301:15)
#loc141 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":289:1)
#loc142 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":304:1)
#loc147 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":290:1)
#loc148 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":292:27)
#loc149 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":292:22)
#loc150 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":292:5)
#loc151 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":294:5)
#loc152 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":295:5)
#loc153 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":295:66)
#loc154 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":296:5)
#loc155 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":299:5)
#loc156 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":300:5)
#loc157 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":300:65)
#loc158 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":301:5)
#loc159 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":303:12)
#loc160 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":303:5)
#loc161 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":124:1)
#loc162 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":124:83)
#loc163 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":126:1)
#loc164 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":189:1)
#loc165 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":128:5)
#loc166 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":128:9)
#loc167 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":130:12)
#loc168 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":130:5)
#loc169 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":131:5)
#loc170 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":186:5)
#loc171 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":136:9)
#loc172 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":136:13)
#loc173 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":137:9)
#loc174 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":137:28)
#loc175 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":138:9)
#loc176 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":138:32)
#loc177 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":139:9)
#loc178 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":139:41)
#loc179 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":140:9)
#loc180 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":175:17)
#loc181 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":150:36)
#loc182 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":150:45)
#loc183 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":150:58)
#loc184 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":150:29)
#loc185 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":150:13)
#loc186 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":150:69)
#loc187 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":151:13)
#loc188 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":154:13)
#loc189 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":151:17)
#loc190 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":151:34)
#loc191 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":152:13)
#loc192 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":153:17)
#loc193 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":155:20)
#loc194 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":155:21)
#loc195 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":155:30)
#loc196 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":155:33)
#loc197 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":155:47)
#loc198 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":155:13)
#loc199 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":155:48)
#loc200 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":156:34)
#loc201 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":156:13)
#loc202 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":157:49)
#loc203 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":157:39)
#loc204 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":157:13)
#loc205 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":157:59)
#loc206 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":158:38)
#loc207 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":158:32)
#loc208 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":158:13)
#loc209 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":158:46)
#loc210 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":159:13)
#loc211 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":162:13)
#loc212 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":159:25)
#loc213 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":159:58)
#loc214 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":159:59)
#loc215 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":159:68)
#loc216 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":159:82)
#loc217 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":159:17)
#loc218 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":159:88)
#loc219 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":160:13)
#loc220 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":161:17)
#loc221 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":165:31)
#loc222 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":165:46)
#loc223 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":165:59)
#loc224 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":165:77)
#loc225 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":165:80)
#loc226 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":165:26)
#loc227 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":165:13)
#loc228 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":165:81)
#loc229 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":166:13)
#loc230 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":169:13)
#loc231 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":166:17)
#loc232 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":166:31)
#loc233 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":166:44)
#loc234 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":166:47)
#loc235 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":166:61)
#loc236 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":167:13)
#loc237 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":168:17)
#loc238 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":171:39)
#loc239 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":171:25)
#loc240 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":171:13)
#loc241 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":173:25)
#loc242 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":173:20)
#loc243 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":173:13)
#loc244 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":173:36)
#loc245 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":175:16)
#loc246 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":176:9)
#loc247 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":179:9)
#loc248 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":176:13)
#loc249 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":176:30)
#loc250 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":177:9)
#loc251 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":178:26)
#loc252 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":178:13)
#loc253 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":187:78)
#loc254 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":187:5)
#loc255 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":188:74)
#loc256 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":188:5)
#loc257 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":192:1)
#loc258 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":192:83)
#loc259 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":194:1)
#loc260 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":257:1)
#loc261 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":196:5)
#loc262 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":196:9)
#loc263 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":198:12)
#loc264 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":198:5)
#loc265 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":199:5)
#loc266 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":254:5)
#loc267 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":204:9)
#loc268 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":204:13)
#loc269 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":205:9)
#loc270 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":205:28)
#loc271 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":206:9)
#loc272 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":206:32)
#loc273 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":207:9)
#loc274 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":207:41)
#loc275 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":208:9)
#loc276 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":243:17)
#loc277 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":218:36)
#loc278 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":218:45)
#loc279 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":218:58)
#loc280 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":218:29)
#loc281 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":218:13)
#loc282 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":218:69)
#loc283 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":219:13)
#loc284 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":222:13)
#loc285 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":219:17)
#loc286 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":219:34)
#loc287 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":220:13)
#loc288 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":221:17)
#loc289 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":223:20)
#loc290 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":223:21)
#loc291 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":223:30)
#loc292 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":223:33)
#loc293 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":223:47)
#loc294 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":223:13)
#loc295 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":223:48)
#loc296 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":224:34)
#loc297 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":224:13)
#loc298 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":225:49)
#loc299 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":225:39)
#loc300 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":225:13)
#loc301 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":225:59)
#loc302 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":226:38)
#loc303 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":226:32)
#loc304 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":226:13)
#loc305 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":226:46)
#loc306 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":227:13)
#loc307 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":230:13)
#loc308 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":227:25)
#loc309 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":227:58)
#loc310 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":227:59)
#loc311 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":227:68)
#loc312 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":227:82)
#loc313 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":227:17)
#loc314 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":227:88)
#loc315 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":228:13)
#loc316 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":229:17)
#loc317 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":233:31)
#loc318 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":233:46)
#loc319 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":233:59)
#loc320 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":233:77)
#loc321 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":233:80)
#loc322 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":233:26)
#loc323 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":233:13)
#loc324 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":233:81)
#loc325 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":234:13)
#loc326 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":237:13)
#loc327 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":234:17)
#loc328 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":234:31)
#loc329 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":234:44)
#loc330 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":234:47)
#loc331 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":234:61)
#loc332 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":235:13)
#loc333 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":236:17)
#loc334 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":239:39)
#loc335 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":239:25)
#loc336 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":239:13)
#loc337 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":241:25)
#loc338 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":241:20)
#loc339 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":241:13)
#loc340 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":241:36)
#loc341 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":243:16)
#loc342 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":244:9)
#loc343 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":247:9)
#loc344 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":244:13)
#loc345 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":244:30)
#loc346 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":245:9)
#loc347 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":246:26)
#loc348 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":246:13)
#loc349 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":255:78)
#loc350 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":255:5)
#loc351 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":256:74)
#loc352 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":256:5)
#loc353 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":260:1)
#loc354 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":260:82)
#loc355 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":262:1)
#loc356 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":271:1)
#loc357 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":264:5)
#loc358 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":264:9)
#loc359 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":266:12)
#loc360 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":266:5)
#loc361 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":268:12)
#loc362 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":268:5)
#loc363 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":269:77)
#loc364 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":269:5)
#loc365 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":270:73)
#loc366 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_22a.c":270:5)
#loc367 = loc(fused[#loc1, #loc2])
#loc368 = loc(fused[#loc3, #loc4])
#loc369 = loc(fused[#loc5, #loc6])
#loc370 = loc(fused[#loc8, #loc9])
#loc371 = loc(fused[#loc10, #loc11])
#loc372 = loc(fused[#loc12, #loc13])
#loc373 = loc(fused[#loc14, #loc15])
#loc374 = loc(fused[#loc16, #loc17])
#loc375 = loc(fused[#loc18, #loc19])
#loc376 = loc(fused[#loc20, #loc21])
#loc377 = loc(fused[#loc22, #loc23])
#loc378 = loc(fused[#loc25, #loc24])
#loc379 = loc(fused[#loc26, #loc27])
#loc380 = loc(fused[#loc28, #loc29])
#loc381 = loc(fused[#loc30, #loc31])
#loc382 = loc(fused[#loc32, #loc33])
#loc383 = loc(fused[#loc34, #loc35])
#loc384 = loc(fused[#loc36, #loc37])
#loc385 = loc(fused[#loc42, #loc43])
#loc386 = loc(fused[#loc44, #loc45])
#loc387 = loc(fused[#loc46, #loc47])
#loc388 = loc(fused[#loc48, #loc45])
#loc389 = loc(fused[#loc50, #loc51])
#loc390 = loc(fused[#loc53, #loc54])
#loc391 = loc(fused[#loc55, #loc56])
#loc392 = loc(fused[#loc59, #loc57])
#loc393 = loc(fused[#loc63, #loc64])
#loc394 = loc(fused[#loc68, #loc69])
#loc395 = loc(fused[#loc70, #loc71])
#loc396 = loc(fused[#loc73, #loc74])
#loc397 = loc(fused[#loc75, #loc76])
#loc398 = loc(fused[#loc77, #loc78])
#loc399 = loc(fused[#loc79, #loc71])
#loc400 = loc(fused[#loc83, #loc84])
#loc401 = loc(fused[#loc87, #loc88])
#loc402 = loc(fused[#loc89, #loc90])
#loc403 = loc(fused[#loc91, #loc92])
#loc404 = loc(fused[#loc94, #loc95])
#loc405 = loc(fused[#loc96, #loc90])
#loc406 = loc(fused[#loc100, #loc98])
#loc407 = loc(fused[#loc103, #loc104])
#loc408 = loc(fused[#loc106, #loc107])
#loc409 = loc(fused[#loc108, #loc109])
#loc410 = loc(fused[#loc110, #loc107])
#loc411 = loc(fused[#loc114, #loc113])
#loc412 = loc(fused[#loc117, #loc118])
#loc413 = loc(fused[#loc119, #loc120])
#loc414 = loc(fused[#loc121, #loc122])
#loc415 = loc(fused[#loc123, #loc124])
#loc416 = loc(fused[#loc125, #loc126])
#loc417 = loc(fused[#loc127, #loc128])
#loc418 = loc(fused[#loc129, #loc130])
#loc419 = loc(fused[#loc131, #loc132])
#loc420 = loc(fused[#loc133, #loc134])
#loc421 = loc(fused[#loc135, #loc136])
#loc422 = loc(fused[#loc141, #loc142])
#loc425 = loc(fused[#loc152, #loc153])
#loc426 = loc(fused[#loc156, #loc157])
#loc427 = loc(fused[#loc160, #loc159])
#loc428 = loc(fused[#loc161, #loc162])
#loc429 = loc(fused[#loc163, #loc164])
#loc430 = loc(fused[#loc165, #loc166])
#loc431 = loc(fused[#loc168, #loc167])
#loc432 = loc(fused[#loc169, #loc170])
#loc433 = loc(fused[#loc171, #loc172])
#loc434 = loc(fused[#loc173, #loc174])
#loc435 = loc(fused[#loc175, #loc176])
#loc436 = loc(fused[#loc177, #loc178])
#loc437 = loc(fused[#loc179, #loc180])
#loc438 = loc(fused[#loc185, #loc186])
#loc439 = loc(fused[#loc187, #loc188])
#loc440 = loc(fused[#loc189, #loc190])
#loc441 = loc(fused[#loc191, #loc188])
#loc442 = loc(fused[#loc193, #loc194])
#loc443 = loc(fused[#loc196, #loc197])
#loc444 = loc(fused[#loc198, #loc199])
#loc445 = loc(fused[#loc201, #loc200])
#loc446 = loc(fused[#loc204, #loc205])
#loc447 = loc(fused[#loc208, #loc209])
#loc448 = loc(fused[#loc210, #loc211])
#loc449 = loc(fused[#loc213, #loc214])
#loc450 = loc(fused[#loc215, #loc216])
#loc451 = loc(fused[#loc217, #loc218])
#loc452 = loc(fused[#loc219, #loc211])
#loc453 = loc(fused[#loc223, #loc224])
#loc454 = loc(fused[#loc227, #loc228])
#loc455 = loc(fused[#loc229, #loc230])
#loc456 = loc(fused[#loc231, #loc232])
#loc457 = loc(fused[#loc234, #loc235])
#loc458 = loc(fused[#loc236, #loc230])
#loc459 = loc(fused[#loc240, #loc238])
#loc460 = loc(fused[#loc243, #loc244])
#loc461 = loc(fused[#loc246, #loc247])
#loc462 = loc(fused[#loc248, #loc249])
#loc463 = loc(fused[#loc250, #loc247])
#loc464 = loc(fused[#loc254, #loc253])
#loc465 = loc(fused[#loc257, #loc258])
#loc466 = loc(fused[#loc259, #loc260])
#loc467 = loc(fused[#loc261, #loc262])
#loc468 = loc(fused[#loc264, #loc263])
#loc469 = loc(fused[#loc265, #loc266])
#loc470 = loc(fused[#loc267, #loc268])
#loc471 = loc(fused[#loc269, #loc270])
#loc472 = loc(fused[#loc271, #loc272])
#loc473 = loc(fused[#loc273, #loc274])
#loc474 = loc(fused[#loc275, #loc276])
#loc475 = loc(fused[#loc281, #loc282])
#loc476 = loc(fused[#loc283, #loc284])
#loc477 = loc(fused[#loc285, #loc286])
#loc478 = loc(fused[#loc287, #loc284])
#loc479 = loc(fused[#loc289, #loc290])
#loc480 = loc(fused[#loc292, #loc293])
#loc481 = loc(fused[#loc294, #loc295])
#loc482 = loc(fused[#loc297, #loc296])
#loc483 = loc(fused[#loc300, #loc301])
#loc484 = loc(fused[#loc304, #loc305])
#loc485 = loc(fused[#loc306, #loc307])
#loc486 = loc(fused[#loc309, #loc310])
#loc487 = loc(fused[#loc311, #loc312])
#loc488 = loc(fused[#loc313, #loc314])
#loc489 = loc(fused[#loc315, #loc307])
#loc490 = loc(fused[#loc319, #loc320])
#loc491 = loc(fused[#loc323, #loc324])
#loc492 = loc(fused[#loc325, #loc326])
#loc493 = loc(fused[#loc327, #loc328])
#loc494 = loc(fused[#loc330, #loc331])
#loc495 = loc(fused[#loc332, #loc326])
#loc496 = loc(fused[#loc336, #loc334])
#loc497 = loc(fused[#loc339, #loc340])
#loc498 = loc(fused[#loc342, #loc343])
#loc499 = loc(fused[#loc344, #loc345])
#loc500 = loc(fused[#loc346, #loc343])
#loc501 = loc(fused[#loc350, #loc349])
#loc502 = loc(fused[#loc353, #loc354])
#loc503 = loc(fused[#loc355, #loc356])
#loc504 = loc(fused[#loc357, #loc358])
#loc505 = loc(fused[#loc360, #loc359])
#loc506 = loc(fused[#loc362, #loc361])
#loc507 = loc(fused[#loc364, #loc363])
