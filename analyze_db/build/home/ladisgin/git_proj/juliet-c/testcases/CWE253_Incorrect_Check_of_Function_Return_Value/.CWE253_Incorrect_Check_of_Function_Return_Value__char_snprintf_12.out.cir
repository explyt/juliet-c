!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc70 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":116:10)
#loc71 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":116:14)
#loc72 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":116:20)
#loc73 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":116:32)
#loc167 = loc(fused[#loc70, #loc71])
#loc168 = loc(fused[#loc72, #loc73])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc137)
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc138)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc6)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc139)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"snprintf failed!\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc141)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc142)
    %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc143)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc144)
    cir.br ^bb1 loc(#loc145)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc146)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc146)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc22)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %7 ^bb2, ^bb9 loc(#loc147)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc148)
  ^bb3:  // pred: ^bb2
    %8 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc141)
    cir.store %8, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc141)
    %9 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc15)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc142)
    cir.br ^bb4 loc(#loc149)
  ^bb4:  // pred: ^bb3
    %10 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc31)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc33)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc33)
    %14 = cir.const #cir.int<6> : !u64i loc(#loc150)
    %15 = cir.binop(sub, %13, %14) : !u64i loc(#loc151)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc36)
    %18 = cir.binop(sub, %15, %17) : !u64i loc(#loc152)
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc5)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc5)
    %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc6)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc6)
    %23 = cir.call @snprintf(%11, %18, %20, %22) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc31)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc37)
    %25 = cir.cmp(eq, %23, %24) : !s32i, !cir.bool loc(#loc153)
    cir.brcond %25 ^bb5, ^bb6 loc(#loc154)
  ^bb5:  // pred: ^bb4
    %26 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc9)
    %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc39)
    cir.br ^bb6 loc(#loc30)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc30)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc28)
  ^bb8:  // pred: ^bb7
    cir.br ^bb16 loc(#loc25)
  ^bb9:  // pred: ^bb1
    cir.br ^bb10 loc(#loc155)
  ^bb10:  // pred: ^bb9
    %28 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc143)
    cir.store %28, %2 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc143)
    %29 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc19)
    cir.store %29, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc144)
    cir.br ^bb11 loc(#loc156)
  ^bb11:  // pred: ^bb10
    %30 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc44)
    %31 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
    %32 = cir.const #cir.int<100> : !s32i loc(#loc46)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc46)
    %34 = cir.const #cir.int<6> : !u64i loc(#loc157)
    %35 = cir.binop(sub, %33, %34) : !u64i loc(#loc158)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc49)
    %38 = cir.binop(sub, %35, %37) : !u64i loc(#loc159)
    %39 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc50)
    %40 = cir.cast(array_to_ptrdecay, %39 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc50)
    %41 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc51)
    %42 = cir.cast(array_to_ptrdecay, %41 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc51)
    %43 = cir.call @snprintf(%31, %38, %40, %42) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc44)
    %44 = cir.const #cir.int<0> : !s32i loc(#loc52)
    %45 = cir.cmp(lt, %43, %44) : !s32i, !cir.bool loc(#loc160)
    cir.brcond %45 ^bb12, ^bb13 loc(#loc161)
  ^bb12:  // pred: ^bb11
    %46 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc54)
    %47 = cir.cast(array_to_ptrdecay, %46 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    cir.br ^bb13 loc(#loc43)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc43)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc41)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc21)
  ^bb16:  // 2 preds: ^bb8, ^bb15
    cir.br ^bb17 loc(#loc21)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc11)
  } loc(#loc140)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc163)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    cir.return loc(#loc57)
  } loc(#loc162)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc164)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc165)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc67)
  cir.func @main(%arg0: !s32i loc(fused[#loc70, #loc71]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc72, #loc73])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc167)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc168)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc69)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc74)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc74)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc75)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc76)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc76)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc77)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc64)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %8 = cir.get_global @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12_good() : () -> () loc(#loc79)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc65)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc66)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %13 = cir.get_global @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc170)
    cir.call @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12_bad() : () -> () loc(#loc83)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc67)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc86)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc171)
    cir.return %17 : !s32i loc(#loc171)
  } loc(#loc166)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc173)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc174)
    %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc175)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc176)
    cir.br ^bb1 loc(#loc177)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc178)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc178)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc100)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc100)
    cir.brcond %7 ^bb2, ^bb9 loc(#loc179)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc180)
  ^bb3:  // pred: ^bb2
    %8 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc173)
    cir.store %8, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc173)
    %9 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc93)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc174)
    cir.br ^bb4 loc(#loc181)
  ^bb4:  // pred: ^bb3
    %10 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc109)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc110)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc111)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc111)
    %14 = cir.const #cir.int<6> : !u64i loc(#loc182)
    %15 = cir.binop(sub, %13, %14) : !u64i loc(#loc183)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc114)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc114)
    %18 = cir.binop(sub, %15, %17) : !u64i loc(#loc184)
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc115)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc115)
    %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc116)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc116)
    %23 = cir.call @snprintf(%11, %18, %20, %22) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc109)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc117)
    %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc185)
    cir.brcond %25 ^bb5, ^bb6 loc(#loc186)
  ^bb5:  // pred: ^bb4
    %26 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc119)
    %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc119)
    cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    cir.br ^bb6 loc(#loc108)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc108)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc106)
  ^bb8:  // pred: ^bb7
    cir.br ^bb16 loc(#loc103)
  ^bb9:  // pred: ^bb1
    cir.br ^bb10 loc(#loc187)
  ^bb10:  // pred: ^bb9
    %28 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc175)
    cir.store %28, %2 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc175)
    %29 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc97)
    cir.store %29, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc176)
    cir.br ^bb11 loc(#loc188)
  ^bb11:  // pred: ^bb10
    %30 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc125)
    %31 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
    %32 = cir.const #cir.int<100> : !s32i loc(#loc127)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc127)
    %34 = cir.const #cir.int<6> : !u64i loc(#loc189)
    %35 = cir.binop(sub, %33, %34) : !u64i loc(#loc190)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc130)
    %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc130)
    %38 = cir.binop(sub, %35, %37) : !u64i loc(#loc191)
    %39 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc131)
    %40 = cir.cast(array_to_ptrdecay, %39 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc131)
    %41 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc132)
    %42 = cir.cast(array_to_ptrdecay, %41 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc132)
    %43 = cir.call @snprintf(%31, %38, %40, %42) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc125)
    %44 = cir.const #cir.int<0> : !s32i loc(#loc133)
    %45 = cir.cmp(lt, %43, %44) : !s32i, !cir.bool loc(#loc192)
    cir.brcond %45 ^bb12, ^bb13 loc(#loc193)
  ^bb12:  // pred: ^bb11
    %46 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc135)
    %47 = cir.cast(array_to_ptrdecay, %46 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc135)
    cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc136)
    cir.br ^bb13 loc(#loc124)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc124)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc122)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc99)
  ^bb16:  // 2 preds: ^bb8, ^bb15
    cir.br ^bb17 loc(#loc99)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc89)
  } loc(#loc172)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":385:1)
#loc4 = loc("/usr/include/stdio.h":387:62)
#loc5 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":43:57)
#loc6 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":43:65)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":45:27)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":32:1)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":63:1)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":39:13)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":39:36)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":40:13)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":40:27)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":54:13)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":54:36)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":55:13)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":55:27)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":34:5)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":62:5)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":34:8)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":34:33)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":35:5)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":48:5)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":50:5)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":36:9)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":47:9)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":43:13)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":46:13)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":43:17)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":43:26)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":43:31)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":43:35)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":43:52)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":43:54)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":43:80)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":44:13)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":45:17)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":51:9)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":61:9)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":57:13)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":60:13)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":57:17)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":57:26)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":57:31)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":57:35)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":57:52)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":57:54)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":57:57)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":57:65)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":57:79)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":58:13)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":59:27)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":59:17)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":102:1)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":105:1)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":104:5)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":104:11)
#loc60 = loc("/usr/include/stdlib.h":575:1)
#loc61 = loc("/usr/include/stdlib.h":575:41)
#loc62 = loc("/usr/include/time.h":76:1)
#loc63 = loc("/usr/include/time.h":76:38)
#loc64 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":121:15)
#loc65 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":123:15)
#loc66 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":126:15)
#loc67 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":128:15)
#loc68 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":116:1)
#loc69 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":131:1)
#loc74 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":117:1)
#loc75 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":119:27)
#loc76 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":119:22)
#loc77 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":119:5)
#loc78 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":121:5)
#loc79 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":122:5)
#loc80 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":122:76)
#loc81 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":123:5)
#loc82 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":126:5)
#loc83 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":127:5)
#loc84 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":127:75)
#loc85 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":128:5)
#loc86 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":130:12)
#loc87 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":130:5)
#loc88 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":70:1)
#loc89 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":100:1)
#loc90 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":77:13)
#loc91 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":77:36)
#loc92 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":78:13)
#loc93 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":78:27)
#loc94 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":91:13)
#loc95 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":91:36)
#loc96 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":92:13)
#loc97 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":92:27)
#loc98 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":72:5)
#loc99 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":99:5)
#loc100 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":72:8)
#loc101 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":72:33)
#loc102 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":73:5)
#loc103 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":85:5)
#loc104 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":87:5)
#loc105 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":74:9)
#loc106 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":84:9)
#loc107 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":80:13)
#loc108 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":83:13)
#loc109 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":80:17)
#loc110 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":80:26)
#loc111 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":80:31)
#loc112 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":80:35)
#loc113 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":80:52)
#loc114 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":80:54)
#loc115 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":80:57)
#loc116 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":80:65)
#loc117 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":80:79)
#loc118 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":81:13)
#loc119 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":82:27)
#loc120 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":82:17)
#loc121 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":88:9)
#loc122 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":98:9)
#loc123 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":94:13)
#loc124 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":97:13)
#loc125 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":94:17)
#loc126 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":94:26)
#loc127 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":94:31)
#loc128 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":94:35)
#loc129 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":94:52)
#loc130 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":94:54)
#loc131 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":94:57)
#loc132 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":94:65)
#loc133 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":94:79)
#loc134 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":95:13)
#loc135 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":96:27)
#loc136 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":96:17)
#loc137 = loc(fused[#loc1, #loc2])
#loc138 = loc(fused[#loc3, #loc4])
#loc139 = loc(fused[#loc7, #loc8])
#loc140 = loc(fused[#loc10, #loc11])
#loc141 = loc(fused[#loc12, #loc13])
#loc142 = loc(fused[#loc14, #loc15])
#loc143 = loc(fused[#loc16, #loc17])
#loc144 = loc(fused[#loc18, #loc19])
#loc145 = loc(fused[#loc20, #loc21])
#loc146 = loc(fused[#loc22, #loc23])
#loc147 = loc(fused[#loc24, #loc25, #loc26, #loc21])
#loc148 = loc(fused[#loc27, #loc28])
#loc149 = loc(fused[#loc29, #loc30])
#loc150 = loc(fused[#loc34, #loc35])
#loc151 = loc(fused[#loc33, #loc35])
#loc152 = loc(fused[#loc33, #loc36])
#loc153 = loc(fused[#loc31, #loc37])
#loc154 = loc(fused[#loc38, #loc30])
#loc155 = loc(fused[#loc40, #loc41])
#loc156 = loc(fused[#loc42, #loc43])
#loc157 = loc(fused[#loc47, #loc48])
#loc158 = loc(fused[#loc46, #loc48])
#loc159 = loc(fused[#loc46, #loc49])
#loc160 = loc(fused[#loc44, #loc52])
#loc161 = loc(fused[#loc53, #loc43])
#loc162 = loc(fused[#loc56, #loc57])
#loc163 = loc(fused[#loc58, #loc59])
#loc164 = loc(fused[#loc60, #loc61])
#loc165 = loc(fused[#loc62, #loc63])
#loc166 = loc(fused[#loc68, #loc69])
#loc169 = loc(fused[#loc79, #loc80])
#loc170 = loc(fused[#loc83, #loc84])
#loc171 = loc(fused[#loc87, #loc86])
#loc172 = loc(fused[#loc88, #loc89])
#loc173 = loc(fused[#loc90, #loc91])
#loc174 = loc(fused[#loc92, #loc93])
#loc175 = loc(fused[#loc94, #loc95])
#loc176 = loc(fused[#loc96, #loc97])
#loc177 = loc(fused[#loc98, #loc99])
#loc178 = loc(fused[#loc100, #loc101])
#loc179 = loc(fused[#loc102, #loc103, #loc104, #loc99])
#loc180 = loc(fused[#loc105, #loc106])
#loc181 = loc(fused[#loc107, #loc108])
#loc182 = loc(fused[#loc112, #loc113])
#loc183 = loc(fused[#loc111, #loc113])
#loc184 = loc(fused[#loc111, #loc114])
#loc185 = loc(fused[#loc109, #loc117])
#loc186 = loc(fused[#loc118, #loc108])
#loc187 = loc(fused[#loc121, #loc122])
#loc188 = loc(fused[#loc123, #loc124])
#loc189 = loc(fused[#loc128, #loc129])
#loc190 = loc(fused[#loc127, #loc129])
#loc191 = loc(fused[#loc127, #loc130])
#loc192 = loc(fused[#loc125, #loc133])
#loc193 = loc(fused[#loc134, #loc124])
