!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":44:21)
#loc6 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":44:25)
#loc171 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":258:10)
#loc172 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":258:14)
#loc173 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":258:20)
#loc174 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":258:32)
#loc191 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":135:25)
#loc192 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":135:29)
#loc213 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":153:25)
#loc214 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":153:29)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc351 = loc(fused[#loc5, #loc6])
#loc415 = loc(fused[#loc171, #loc172])
#loc416 = loc(fused[#loc173, #loc174])
#loc421 = loc(fused[#loc191, #loc192])
#loc429 = loc(fused[#loc213, #loc214])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc349)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc351)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc8)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc9)
    %3 = cir.binop(rem, %1, %2) : !s32i loc(#loc352)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc10)
    cir.return loc(#loc4)
  } loc(#loc350)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc353)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr1) loc(#loc354)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr1) loc(#loc355)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc356)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc357)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc358)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc359)
  cir.func private @close(!s32i) -> !s32i loc(#loc360)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_modulo_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc362)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc363)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc363)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc34)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc364)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc366)
      %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc367)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc368)
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc369)
      %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc370)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc43)
      %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc43)
      cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc368)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc45)
      %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc45)
      cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc369)
      cir.scope {
        cir.do {
          %16 = cir.const #cir.int<2> : !s32i loc(#loc50)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc51)
          %18 = cir.const #cir.int<6> : !s32i loc(#loc52)
          %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc53)
          cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc372)
          cir.scope {
            %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc58)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc59)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc59)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc374)
            cir.if %64 {
              cir.break loc(#loc61)
            } loc(#loc375)
          } loc(#loc373)
          %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc376)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc64)
          %22 = cir.const #cir.int<16> : !u64i loc(#loc377)
          cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc378)
          %23 = cir.const #cir.int<2> : !s32i loc(#loc69)
          %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc69)
          %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
          cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc379)
          %26 = cir.const #cir.int<0> : !s32i loc(#loc72)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc72)
          %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
          %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
          cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc380)
          %30 = cir.const #cir.int<27015> : !s32i loc(#loc76)
          %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc76)
          %32 = cir.call @htons(%31) : (!u16i) -> !u16i extra(#fn_attr1) loc(#loc77)
          %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
          cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc381)
          cir.scope {
            %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc83)
            %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc383)
            %63 = cir.const #cir.int<16> : !u64i loc(#loc384)
            %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc384)
            %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr1) loc(#loc88)
            %66 = cir.const #cir.int<1> : !s32i loc(#loc89)
            %67 = cir.unary(minus, %66) : !s32i, !s32i loc(#loc89)
            %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc385)
            cir.if %68 {
              cir.break loc(#loc91)
            } loc(#loc386)
          } loc(#loc382)
          cir.scope {
            %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc94)
            %62 = cir.const #cir.int<5> : !s32i loc(#loc95)
            %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc96)
            %64 = cir.const #cir.int<1> : !s32i loc(#loc97)
            %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc97)
            %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc388)
            cir.if %66 {
              cir.break loc(#loc99)
            } loc(#loc389)
          } loc(#loc387)
          %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc100)
          %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc101)
          %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc102)
          %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc103)
          cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc390)
          cir.scope {
            %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc108)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc109)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc109)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc392)
            cir.if %64 {
              cir.break loc(#loc111)
            } loc(#loc393)
          } loc(#loc391)
          %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc112)
          %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc113)
          %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc113)
          %41 = cir.const #cir.int<3> : !s32i loc(#loc114)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc114)
          %43 = cir.const #cir.int<4> : !u64i loc(#loc114)
          %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc114)
          %45 = cir.const #cir.int<2> : !s32i loc(#loc114)
          %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc114)
          %47 = cir.binop(add, %44, %46) : !u64i loc(#loc114)
          %48 = cir.const #cir.int<1> : !s32i loc(#loc115)
          %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc115)
          %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc394)
          %51 = cir.const #cir.int<0> : !s32i loc(#loc116)
          %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc117)
          %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc117)
          cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc395)
          cir.scope {
            %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc122)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc123)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc123)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc397)
            %65 = cir.ternary(%64, true {
              %66 = cir.const #true loc(#loc124)
              cir.yield %66 : !cir.bool loc(#loc124)
            }, false {
              %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc125)
              %67 = cir.const #cir.int<0> : !s32i loc(#loc126)
              %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc398)
              %69 = cir.ternary(%68, true {
                %70 = cir.const #true loc(#loc124)
                cir.yield %70 : !cir.bool loc(#loc124)
              }, false {
                %70 = cir.const #false loc(#loc124)
                cir.yield %70 : !cir.bool loc(#loc124)
              }) : (!cir.bool) -> !cir.bool loc(#loc124)
              cir.yield %69 : !cir.bool loc(#loc124)
            }) : (!cir.bool) -> !cir.bool loc(#loc124)
            cir.if %65 {
              cir.break loc(#loc128)
            } loc(#loc399)
          } loc(#loc396)
          %54 = cir.const #cir.int<0> : !s32i loc(#loc129)
          %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc129)
          %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc130)
          %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc131)
          %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc131)
          cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc400)
          %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc132)
          %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc133)
          cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc401)
          cir.yield loc(#loc49)
        } while {
          %16 = cir.const #cir.int<0> : !s32i loc(#loc136)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc136)
          cir.condition(%17) loc(#loc136)
        } loc(#loc371)
      } loc(#loc371)
      cir.scope {
        %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc139)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc140)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc140)
        %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc403)
        cir.if %19 {
          %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc142)
          %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc143)
        } loc(#loc404)
      } loc(#loc402)
      cir.scope {
        %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc146)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc147)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc147)
        %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc406)
        cir.if %19 {
          %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc149)
          %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc150)
        } loc(#loc407)
      } loc(#loc405)
    } loc(#loc365)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc151)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc151)
    cir.return loc(#loc28)
  } loc(#loc361)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_modulo_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc409)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc155)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc410)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc157)
    cir.return loc(#loc154)
  } loc(#loc408)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc411)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc412)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc413)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc165)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc166)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc167)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc168)
  cir.func @main(%arg0: !s32i loc(fused[#loc171, #loc172]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc173, #loc174])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc415)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc416)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc170)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc175)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc176)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc177)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc177)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc178)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc165)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc165)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc179)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_modulo_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc417)
    cir.call @CWE369_Divide_by_Zero__int_listen_socket_modulo_44_good() : () -> () loc(#loc180)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc166)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc166)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc182)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc167)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc167)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc183)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_modulo_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc418)
    cir.call @CWE369_Divide_by_Zero__int_listen_socket_modulo_44_bad() : () -> () loc(#loc184)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc168)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc168)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc186)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc187)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc419)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc419)
    cir.return %17 : !s32i loc(#loc419)
  } loc(#loc414)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc191, #loc192])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc421)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc194)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc195)
    %3 = cir.binop(rem, %1, %2) : !s32i loc(#loc422)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc196)
    cir.return loc(#loc190)
  } loc(#loc420)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc424)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc425)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc202)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc425)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc203)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc204)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc426)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc206)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc427)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc208)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc209)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc208)
    cir.return loc(#loc198)
  } loc(#loc423)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc210)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc213, #loc214])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc429)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc218)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc219)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc431)
      cir.if %3 {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc223)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc224)
        %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc433)
        cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc225)
      } else {
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc210)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc210)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc226)
      } loc(#loc432)
    } loc(#loc430)
    cir.return loc(#loc212)
  } loc(#loc428)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc435)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc436)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc232)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc436)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc233)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc234)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc437)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc439)
      %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc440)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc441)
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc442)
      %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc443)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc243)
      %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc243)
      cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc441)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc245)
      %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc245)
      cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc442)
      cir.scope {
        cir.do {
          %16 = cir.const #cir.int<2> : !s32i loc(#loc250)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc251)
          %18 = cir.const #cir.int<6> : !s32i loc(#loc252)
          %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc253)
          cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc445)
          cir.scope {
            %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc258)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc259)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc259)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc447)
            cir.if %64 {
              cir.break loc(#loc261)
            } loc(#loc448)
          } loc(#loc446)
          %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc449)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc264)
          %22 = cir.const #cir.int<16> : !u64i loc(#loc450)
          cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc451)
          %23 = cir.const #cir.int<2> : !s32i loc(#loc269)
          %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc269)
          %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
          cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc452)
          %26 = cir.const #cir.int<0> : !s32i loc(#loc271)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc271)
          %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
          %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
          cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc453)
          %30 = cir.const #cir.int<27015> : !s32i loc(#loc273)
          %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc273)
          %32 = cir.call @htons(%31) : (!u16i) -> !u16i extra(#fn_attr1) loc(#loc274)
          %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
          cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc454)
          cir.scope {
            %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc279)
            %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc456)
            %63 = cir.const #cir.int<16> : !u64i loc(#loc457)
            %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc457)
            %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr1) loc(#loc284)
            %66 = cir.const #cir.int<1> : !s32i loc(#loc285)
            %67 = cir.unary(minus, %66) : !s32i, !s32i loc(#loc285)
            %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc458)
            cir.if %68 {
              cir.break loc(#loc287)
            } loc(#loc459)
          } loc(#loc455)
          cir.scope {
            %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc290)
            %62 = cir.const #cir.int<5> : !s32i loc(#loc291)
            %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc292)
            %64 = cir.const #cir.int<1> : !s32i loc(#loc293)
            %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc293)
            %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc461)
            cir.if %66 {
              cir.break loc(#loc295)
            } loc(#loc462)
          } loc(#loc460)
          %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc296)
          %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc297)
          %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc298)
          %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc299)
          cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc463)
          cir.scope {
            %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc304)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc305)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc305)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc465)
            cir.if %64 {
              cir.break loc(#loc307)
            } loc(#loc466)
          } loc(#loc464)
          %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc308)
          %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc309)
          %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc309)
          %41 = cir.const #cir.int<3> : !s32i loc(#loc310)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc310)
          %43 = cir.const #cir.int<4> : !u64i loc(#loc310)
          %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc310)
          %45 = cir.const #cir.int<2> : !s32i loc(#loc310)
          %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc310)
          %47 = cir.binop(add, %44, %46) : !u64i loc(#loc310)
          %48 = cir.const #cir.int<1> : !s32i loc(#loc311)
          %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc311)
          %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc467)
          %51 = cir.const #cir.int<0> : !s32i loc(#loc312)
          %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc313)
          %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc313)
          cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc468)
          cir.scope {
            %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc318)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc319)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc319)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc470)
            %65 = cir.ternary(%64, true {
              %66 = cir.const #true loc(#loc320)
              cir.yield %66 : !cir.bool loc(#loc320)
            }, false {
              %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc321)
              %67 = cir.const #cir.int<0> : !s32i loc(#loc322)
              %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc471)
              %69 = cir.ternary(%68, true {
                %70 = cir.const #true loc(#loc320)
                cir.yield %70 : !cir.bool loc(#loc320)
              }, false {
                %70 = cir.const #false loc(#loc320)
                cir.yield %70 : !cir.bool loc(#loc320)
              }) : (!cir.bool) -> !cir.bool loc(#loc320)
              cir.yield %69 : !cir.bool loc(#loc320)
            }) : (!cir.bool) -> !cir.bool loc(#loc320)
            cir.if %65 {
              cir.break loc(#loc324)
            } loc(#loc472)
          } loc(#loc469)
          %54 = cir.const #cir.int<0> : !s32i loc(#loc325)
          %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc325)
          %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc326)
          %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc327)
          %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc327)
          cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc473)
          %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc328)
          %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc329)
          cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc474)
          cir.yield loc(#loc249)
        } while {
          %16 = cir.const #cir.int<0> : !s32i loc(#loc332)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc332)
          cir.condition(%17) loc(#loc332)
        } loc(#loc444)
      } loc(#loc444)
      cir.scope {
        %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc335)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc336)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc336)
        %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc476)
        cir.if %19 {
          %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc338)
          %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc339)
        } loc(#loc477)
      } loc(#loc475)
      cir.scope {
        %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc342)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc343)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc343)
        %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc479)
        cir.if %19 {
          %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc345)
          %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc346)
        } loc(#loc480)
      } loc(#loc478)
    } loc(#loc438)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc347)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc348)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc347)
    cir.return loc(#loc228)
  } loc(#loc434)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":44:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":48:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":45:1)
#loc8 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":47:18)
#loc9 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":47:24)
#loc10 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":47:5)
#loc11 = loc("/usr/include/sys/socket.h":102:1)
#loc12 = loc("/usr/include/sys/socket.h":102:62)
#loc13 = loc("/usr/include/netinet/in.h":404:1)
#loc14 = loc("/usr/include/netinet/in.h":405:40)
#loc15 = loc("/usr/include/sys/socket.h":112:1)
#loc16 = loc("/usr/include/sys/socket.h":113:6)
#loc17 = loc("/usr/include/sys/socket.h":296:1)
#loc18 = loc("/usr/include/sys/socket.h":296:39)
#loc19 = loc("/usr/include/sys/socket.h":306:1)
#loc20 = loc("/usr/include/sys/socket.h":307:38)
#loc21 = loc("/usr/include/sys/socket.h":145:1)
#loc22 = loc("/usr/include/sys/socket.h":145:68)
#loc23 = loc("/usr/include/stdlib.h":105:1)
#loc24 = loc("/usr/include/stdlib.h":106:33)
#loc25 = loc("/usr/include/unistd.h":358:1)
#loc26 = loc("/usr/include/unistd.h":358:27)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":50:1)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":128:1)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":52:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":52:9)
#loc31 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":54:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":54:29)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":56:13)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":56:12)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":56:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":57:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":125:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":62:9)
#loc39 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":62:13)
#loc40 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":63:9)
#loc41 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":63:28)
#loc42 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":64:9)
#loc43 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":64:31)
#loc44 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":65:9)
#loc45 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":65:31)
#loc46 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":66:9)
#loc47 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":66:41)
#loc48 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":67:9)
#loc49 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":110:17)
#loc50 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":77:35)
#loc51 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":77:44)
#loc52 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":77:57)
#loc53 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":77:28)
#loc54 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":77:13)
#loc55 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":77:68)
#loc56 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":78:13)
#loc57 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":81:13)
#loc58 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":78:17)
#loc59 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":78:33)
#loc60 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":79:13)
#loc61 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":80:17)
#loc62 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":82:20)
#loc63 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":82:21)
#loc64 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":82:30)
#loc65 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":82:33)
#loc66 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":82:47)
#loc67 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":82:13)
#loc68 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":82:48)
#loc69 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":83:34)
#loc70 = loc("/usr/include/netinet/in.h":249:5)
#loc71 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":83:13)
#loc72 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":84:39)
#loc73 = loc("/usr/include/netinet/in.h":251:20)
#loc74 = loc("/usr/include/netinet/in.h":33:15)
#loc75 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":84:13)
#loc76 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":85:38)
#loc77 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":85:32)
#loc78 = loc("/usr/include/netinet/in.h":250:15)
#loc79 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":85:13)
#loc80 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":85:46)
#loc81 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":86:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":89:13)
#loc83 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":86:22)
#loc84 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":86:54)
#loc85 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":86:55)
#loc86 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":86:64)
#loc87 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":86:78)
#loc88 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":86:17)
#loc89 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":86:84)
#loc90 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":87:13)
#loc91 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":88:17)
#loc92 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":90:13)
#loc93 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":93:13)
#loc94 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":90:24)
#loc95 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":90:38)
#loc96 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":90:17)
#loc97 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":90:57)
#loc98 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":91:13)
#loc99 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":92:17)
#loc100 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":94:35)
#loc101 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":94:49)
#loc102 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":94:55)
#loc103 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":94:28)
#loc104 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":94:13)
#loc105 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":94:59)
#loc106 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":95:13)
#loc107 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":98:13)
#loc108 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":95:17)
#loc109 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":95:33)
#loc110 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":96:13)
#loc111 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":97:17)
#loc112 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":100:31)
#loc113 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":100:45)
#loc114 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":100:58)
#loc115 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":100:76)
#loc116 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":100:79)
#loc117 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":100:26)
#loc118 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":100:13)
#loc119 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":100:80)
#loc120 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":101:13)
#loc121 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":104:13)
#loc122 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":101:17)
#loc123 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":101:31)
#loc124 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":101:44)
#loc125 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":101:47)
#loc126 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":101:61)
#loc127 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":102:13)
#loc128 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":103:17)
#loc129 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":106:39)
#loc130 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":106:25)
#loc131 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":106:13)
#loc132 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":108:25)
#loc133 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":108:20)
#loc134 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":108:13)
#loc135 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":108:36)
#loc136 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":110:16)
#loc137 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":111:9)
#loc138 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":114:9)
#loc139 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":111:13)
#loc140 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":111:29)
#loc141 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":112:9)
#loc142 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":113:26)
#loc143 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":113:13)
#loc144 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":115:9)
#loc145 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":118:9)
#loc146 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":115:13)
#loc147 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":115:29)
#loc148 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":116:9)
#loc149 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":117:26)
#loc150 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":117:13)
#loc151 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":127:5)
#loc152 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":127:13)
#loc153 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":244:1)
#loc154 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":248:1)
#loc155 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":246:5)
#loc156 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":246:13)
#loc157 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":247:5)
#loc158 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":247:13)
#loc159 = loc("/usr/include/stdlib.h":575:1)
#loc160 = loc("/usr/include/stdlib.h":575:41)
#loc161 = loc("/usr/include/time.h":76:1)
#loc162 = loc("/usr/include/time.h":76:38)
#loc163 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc164 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc165 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":263:15)
#loc166 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":265:15)
#loc167 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":268:15)
#loc168 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":270:15)
#loc169 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":258:1)
#loc170 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":273:1)
#loc175 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":259:1)
#loc176 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":261:27)
#loc177 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":261:22)
#loc178 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":261:5)
#loc179 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":263:5)
#loc180 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":264:5)
#loc181 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":264:61)
#loc182 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":265:5)
#loc183 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":268:5)
#loc184 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":269:5)
#loc185 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":269:60)
#loc186 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":270:5)
#loc187 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":272:12)
#loc188 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":272:5)
#loc189 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":135:1)
#loc190 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":139:1)
#loc193 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":136:1)
#loc194 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":138:18)
#loc195 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":138:24)
#loc196 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":138:5)
#loc197 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":141:1)
#loc198 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":150:1)
#loc199 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":143:5)
#loc200 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":143:9)
#loc201 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":144:5)
#loc202 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":144:29)
#loc203 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":146:13)
#loc204 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":146:12)
#loc205 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":146:5)
#loc206 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":148:12)
#loc207 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":148:5)
#loc208 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":149:5)
#loc209 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":149:13)
#loc210 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":162:19)
#loc211 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":153:1)
#loc212 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":164:1)
#loc215 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":154:1)
#loc216 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":156:5)
#loc217 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":163:5)
#loc218 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":156:9)
#loc219 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":156:17)
#loc220 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":157:5)
#loc221 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":159:5)
#loc222 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":161:5)
#loc223 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":158:22)
#loc224 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":158:28)
#loc225 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":158:9)
#loc226 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":162:9)
#loc227 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":166:1)
#loc228 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":242:1)
#loc229 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":168:5)
#loc230 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":168:9)
#loc231 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":169:5)
#loc232 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":169:29)
#loc233 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":171:13)
#loc234 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":171:12)
#loc235 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":171:5)
#loc236 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":172:5)
#loc237 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":240:5)
#loc238 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":177:9)
#loc239 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":177:13)
#loc240 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":178:9)
#loc241 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":178:28)
#loc242 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":179:9)
#loc243 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":179:31)
#loc244 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":180:9)
#loc245 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":180:31)
#loc246 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":181:9)
#loc247 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":181:41)
#loc248 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":182:9)
#loc249 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":225:17)
#loc250 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":192:35)
#loc251 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":192:44)
#loc252 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":192:57)
#loc253 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":192:28)
#loc254 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":192:13)
#loc255 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":192:68)
#loc256 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":193:13)
#loc257 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":196:13)
#loc258 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":193:17)
#loc259 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":193:33)
#loc260 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":194:13)
#loc261 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":195:17)
#loc262 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":197:20)
#loc263 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":197:21)
#loc264 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":197:30)
#loc265 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":197:33)
#loc266 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":197:47)
#loc267 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":197:13)
#loc268 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":197:48)
#loc269 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":198:34)
#loc270 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":198:13)
#loc271 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":199:39)
#loc272 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":199:13)
#loc273 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":200:38)
#loc274 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":200:32)
#loc275 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":200:13)
#loc276 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":200:46)
#loc277 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":201:13)
#loc278 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":204:13)
#loc279 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":201:22)
#loc280 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":201:54)
#loc281 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":201:55)
#loc282 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":201:64)
#loc283 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":201:78)
#loc284 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":201:17)
#loc285 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":201:84)
#loc286 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":202:13)
#loc287 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":203:17)
#loc288 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":205:13)
#loc289 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":208:13)
#loc290 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":205:24)
#loc291 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":205:38)
#loc292 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":205:17)
#loc293 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":205:57)
#loc294 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":206:13)
#loc295 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":207:17)
#loc296 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":209:35)
#loc297 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":209:49)
#loc298 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":209:55)
#loc299 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":209:28)
#loc300 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":209:13)
#loc301 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":209:59)
#loc302 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":210:13)
#loc303 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":213:13)
#loc304 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":210:17)
#loc305 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":210:33)
#loc306 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":211:13)
#loc307 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":212:17)
#loc308 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":215:31)
#loc309 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":215:45)
#loc310 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":215:58)
#loc311 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":215:76)
#loc312 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":215:79)
#loc313 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":215:26)
#loc314 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":215:13)
#loc315 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":215:80)
#loc316 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":216:13)
#loc317 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":219:13)
#loc318 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":216:17)
#loc319 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":216:31)
#loc320 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":216:44)
#loc321 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":216:47)
#loc322 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":216:61)
#loc323 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":217:13)
#loc324 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":218:17)
#loc325 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":221:39)
#loc326 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":221:25)
#loc327 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":221:13)
#loc328 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":223:25)
#loc329 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":223:20)
#loc330 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":223:13)
#loc331 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":223:36)
#loc332 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":225:16)
#loc333 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":226:9)
#loc334 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":229:9)
#loc335 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":226:13)
#loc336 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":226:29)
#loc337 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":227:9)
#loc338 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":228:26)
#loc339 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":228:13)
#loc340 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":230:9)
#loc341 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":233:9)
#loc342 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":230:13)
#loc343 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":230:29)
#loc344 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":231:9)
#loc345 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":232:26)
#loc346 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":232:13)
#loc347 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":241:5)
#loc348 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_44.c":241:13)
#loc349 = loc(fused[#loc1, #loc2])
#loc350 = loc(fused[#loc3, #loc4])
#loc352 = loc(fused[#loc8, #loc9])
#loc353 = loc(fused[#loc11, #loc12])
#loc354 = loc(fused[#loc13, #loc14])
#loc355 = loc(fused[#loc15, #loc16])
#loc356 = loc(fused[#loc17, #loc18])
#loc357 = loc(fused[#loc19, #loc20])
#loc358 = loc(fused[#loc21, #loc22])
#loc359 = loc(fused[#loc23, #loc24])
#loc360 = loc(fused[#loc25, #loc26])
#loc361 = loc(fused[#loc27, #loc28])
#loc362 = loc(fused[#loc29, #loc30])
#loc363 = loc(fused[#loc31, #loc32])
#loc364 = loc(fused[#loc35, #loc33])
#loc365 = loc(fused[#loc36, #loc37])
#loc366 = loc(fused[#loc38, #loc39])
#loc367 = loc(fused[#loc40, #loc41])
#loc368 = loc(fused[#loc42, #loc43])
#loc369 = loc(fused[#loc44, #loc45])
#loc370 = loc(fused[#loc46, #loc47])
#loc371 = loc(fused[#loc48, #loc49])
#loc372 = loc(fused[#loc54, #loc55])
#loc373 = loc(fused[#loc56, #loc57])
#loc374 = loc(fused[#loc58, #loc59])
#loc375 = loc(fused[#loc60, #loc57])
#loc376 = loc(fused[#loc62, #loc63])
#loc377 = loc(fused[#loc65, #loc66])
#loc378 = loc(fused[#loc67, #loc68])
#loc379 = loc(fused[#loc71, #loc69])
#loc380 = loc(fused[#loc75, #loc72])
#loc381 = loc(fused[#loc79, #loc80])
#loc382 = loc(fused[#loc81, #loc82])
#loc383 = loc(fused[#loc84, #loc85])
#loc384 = loc(fused[#loc86, #loc87])
#loc385 = loc(fused[#loc88, #loc89])
#loc386 = loc(fused[#loc90, #loc82])
#loc387 = loc(fused[#loc92, #loc93])
#loc388 = loc(fused[#loc96, #loc97])
#loc389 = loc(fused[#loc98, #loc93])
#loc390 = loc(fused[#loc104, #loc105])
#loc391 = loc(fused[#loc106, #loc107])
#loc392 = loc(fused[#loc108, #loc109])
#loc393 = loc(fused[#loc110, #loc107])
#loc394 = loc(fused[#loc114, #loc115])
#loc395 = loc(fused[#loc118, #loc119])
#loc396 = loc(fused[#loc120, #loc121])
#loc397 = loc(fused[#loc122, #loc123])
#loc398 = loc(fused[#loc125, #loc126])
#loc399 = loc(fused[#loc127, #loc121])
#loc400 = loc(fused[#loc131, #loc129])
#loc401 = loc(fused[#loc134, #loc135])
#loc402 = loc(fused[#loc137, #loc138])
#loc403 = loc(fused[#loc139, #loc140])
#loc404 = loc(fused[#loc141, #loc138])
#loc405 = loc(fused[#loc144, #loc145])
#loc406 = loc(fused[#loc146, #loc147])
#loc407 = loc(fused[#loc148, #loc145])
#loc408 = loc(fused[#loc153, #loc154])
#loc409 = loc(fused[#loc155, #loc156])
#loc410 = loc(fused[#loc157, #loc158])
#loc411 = loc(fused[#loc159, #loc160])
#loc412 = loc(fused[#loc161, #loc162])
#loc413 = loc(fused[#loc163, #loc164])
#loc414 = loc(fused[#loc169, #loc170])
#loc417 = loc(fused[#loc180, #loc181])
#loc418 = loc(fused[#loc184, #loc185])
#loc419 = loc(fused[#loc188, #loc187])
#loc420 = loc(fused[#loc189, #loc190])
#loc422 = loc(fused[#loc194, #loc195])
#loc423 = loc(fused[#loc197, #loc198])
#loc424 = loc(fused[#loc199, #loc200])
#loc425 = loc(fused[#loc201, #loc202])
#loc426 = loc(fused[#loc205, #loc203])
#loc427 = loc(fused[#loc207, #loc206])
#loc428 = loc(fused[#loc211, #loc212])
#loc430 = loc(fused[#loc216, #loc217])
#loc431 = loc(fused[#loc218, #loc219])
#loc432 = loc(fused[#loc220, #loc221, #loc222, #loc217])
#loc433 = loc(fused[#loc223, #loc224])
#loc434 = loc(fused[#loc227, #loc228])
#loc435 = loc(fused[#loc229, #loc230])
#loc436 = loc(fused[#loc231, #loc232])
#loc437 = loc(fused[#loc235, #loc233])
#loc438 = loc(fused[#loc236, #loc237])
#loc439 = loc(fused[#loc238, #loc239])
#loc440 = loc(fused[#loc240, #loc241])
#loc441 = loc(fused[#loc242, #loc243])
#loc442 = loc(fused[#loc244, #loc245])
#loc443 = loc(fused[#loc246, #loc247])
#loc444 = loc(fused[#loc248, #loc249])
#loc445 = loc(fused[#loc254, #loc255])
#loc446 = loc(fused[#loc256, #loc257])
#loc447 = loc(fused[#loc258, #loc259])
#loc448 = loc(fused[#loc260, #loc257])
#loc449 = loc(fused[#loc262, #loc263])
#loc450 = loc(fused[#loc265, #loc266])
#loc451 = loc(fused[#loc267, #loc268])
#loc452 = loc(fused[#loc270, #loc269])
#loc453 = loc(fused[#loc272, #loc271])
#loc454 = loc(fused[#loc275, #loc276])
#loc455 = loc(fused[#loc277, #loc278])
#loc456 = loc(fused[#loc280, #loc281])
#loc457 = loc(fused[#loc282, #loc283])
#loc458 = loc(fused[#loc284, #loc285])
#loc459 = loc(fused[#loc286, #loc278])
#loc460 = loc(fused[#loc288, #loc289])
#loc461 = loc(fused[#loc292, #loc293])
#loc462 = loc(fused[#loc294, #loc289])
#loc463 = loc(fused[#loc300, #loc301])
#loc464 = loc(fused[#loc302, #loc303])
#loc465 = loc(fused[#loc304, #loc305])
#loc466 = loc(fused[#loc306, #loc303])
#loc467 = loc(fused[#loc310, #loc311])
#loc468 = loc(fused[#loc314, #loc315])
#loc469 = loc(fused[#loc316, #loc317])
#loc470 = loc(fused[#loc318, #loc319])
#loc471 = loc(fused[#loc321, #loc322])
#loc472 = loc(fused[#loc323, #loc317])
#loc473 = loc(fused[#loc327, #loc325])
#loc474 = loc(fused[#loc330, #loc331])
#loc475 = loc(fused[#loc333, #loc334])
#loc476 = loc(fused[#loc335, #loc336])
#loc477 = loc(fused[#loc337, #loc334])
#loc478 = loc(fused[#loc340, #loc341])
#loc479 = loc(fused[#loc342, #loc343])
#loc480 = loc(fused[#loc344, #loc341])
