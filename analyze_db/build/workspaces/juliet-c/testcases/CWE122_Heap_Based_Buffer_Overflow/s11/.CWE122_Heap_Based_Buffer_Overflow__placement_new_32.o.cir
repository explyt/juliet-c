!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc140 = loc("../../../testcasesupport/std_testcase.h":68:7)
!ty_OneIntClass = !cir.record<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.record<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc208)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc209)
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc5)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc5)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc5)
    cir.return loc(#loc5)
  } loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc210)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc211)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_323badEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc213)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc214)
    %2 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc215)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc216)
    %4 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc217)
    %5 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc218)
    %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc219)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc220)
    cir.store %3, %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc217)
    cir.store %3, %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc218)
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc28)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc221)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc28)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc222)
    cir.store %11, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc219)
    cir.br ^bb1 loc(#loc223)
  ^bb1:  // pred: ^bb0
    %12 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc34)
    %14 = cir.cmp(eq, %12, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc224)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc225)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc36)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc38)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc36)
    cir.br ^bb3 loc(#loc32)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc32)
  ^bb4:  // pred: ^bb3
    %18 = cir.const #cir.int<8> : !u64i loc(#loc226)
    %19 = cir.call @malloc(%18) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc41)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc227)
    cir.store %20, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc220)
    cir.br ^bb5 loc(#loc228)
  ^bb5:  // pred: ^bb4
    %21 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc44)
    %22 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc45)
    %23 = cir.cmp(eq, %21, %22) : !cir.ptr<!s8i>, !cir.bool loc(#loc229)
    cir.brcond %23 ^bb6, ^bb7 loc(#loc230)
  ^bb6:  // pred: ^bb5
    %24 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc47)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %26 = cir.unary(minus, %25) nsw : !s32i, !s32i loc(#loc49)
    cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc47)
    cir.br ^bb7 loc(#loc43)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc43)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc231)
  ^bb9:  // pred: ^bb8
    %27 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc13)
    %28 = cir.load %27 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
    cir.store %28, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc213)
    %29 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
    cir.store %29, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc232)
    %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
    %31 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc56)
    cir.store %30, %31 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc233)
    cir.br ^bb10 loc(#loc51)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc234)
  ^bb11:  // pred: ^bb10
    %32 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc15)
    %33 = cir.load %32 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
    cir.store %33, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc214)
    cir.br ^bb12 loc(#loc235)
  ^bb12:  // pred: ^bb11
    %34 = cir.const #cir.int<8> : !u64i loc(#loc236)
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc64)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc236)
    cir.call @_ZN12TwoIntsClassC2Ev(%37) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc17)
    cir.store %37, %2 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc215)
    %38 = cir.const #cir.int<5> : !s32i loc(#loc65)
    %39 = cir.load %2 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc66)
    %40 = cir.get_member %39[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc67)
    cir.store %38, %40 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    %41 = cir.const #cir.int<10> : !s32i loc(#loc68)
    %42 = cir.load %2 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc69)
    %43 = cir.get_member %42[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc70)
    cir.store %41, %43 : !s32i, !cir.ptr<!s32i> loc(#loc238)
    %44 = cir.load %2 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc71)
    %45 = cir.get_member %44[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc67)
    %46 = cir.load %45 : !cir.ptr<!s32i>, !s32i loc(#loc72)
    cir.call @printIntLine(%46) : (!s32i) -> () loc(#loc73)
    %47 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc74)
    %48 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
    %49 = cir.cast(bitcast, %48 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc75)
    cir.call @free(%49) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc74)
    cir.br ^bb13 loc(#loc62)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc59)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc11)
  } loc(#loc212)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_32L7goodG2BEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc240)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc241)
    %2 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc242)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc243)
    %4 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc244)
    %5 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc245)
    %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc246)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc247)
    cir.store %3, %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc244)
    cir.store %3, %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc245)
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc94)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc248)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc94)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc249)
    cir.store %11, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc246)
    cir.br ^bb1 loc(#loc250)
  ^bb1:  // pred: ^bb0
    %12 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc100)
    %14 = cir.cmp(eq, %12, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc251)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc252)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc102)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc103)
    %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc104)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc102)
    cir.br ^bb3 loc(#loc98)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc98)
  ^bb4:  // pred: ^bb3
    %18 = cir.const #cir.int<8> : !u64i loc(#loc253)
    %19 = cir.call @malloc(%18) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc107)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc254)
    cir.store %20, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc247)
    cir.br ^bb5 loc(#loc255)
  ^bb5:  // pred: ^bb4
    %21 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc110)
    %22 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc111)
    %23 = cir.cmp(eq, %21, %22) : !cir.ptr<!s8i>, !cir.bool loc(#loc256)
    cir.brcond %23 ^bb6, ^bb7 loc(#loc257)
  ^bb6:  // pred: ^bb5
    %24 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc113)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc114)
    %26 = cir.unary(minus, %25) nsw : !s32i, !s32i loc(#loc115)
    cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc113)
    cir.br ^bb7 loc(#loc109)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc109)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc258)
  ^bb9:  // pred: ^bb8
    %27 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc79)
    %28 = cir.load %27 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
    cir.store %28, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc240)
    %29 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
    cir.store %29, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc259)
    %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc121)
    %31 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc122)
    cir.store %30, %31 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc260)
    cir.br ^bb10 loc(#loc117)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc261)
  ^bb11:  // pred: ^bb10
    %32 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc81)
    %33 = cir.load %32 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
    cir.store %33, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc241)
    cir.br ^bb12 loc(#loc262)
  ^bb12:  // pred: ^bb11
    %34 = cir.const #cir.int<8> : !u64i loc(#loc263)
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc130)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc263)
    cir.call @_ZN12TwoIntsClassC2Ev(%37) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc83)
    cir.store %37, %2 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc242)
    %38 = cir.const #cir.int<5> : !s32i loc(#loc131)
    %39 = cir.load %2 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc132)
    %40 = cir.get_member %39[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc67)
    cir.store %38, %40 : !s32i, !cir.ptr<!s32i> loc(#loc264)
    %41 = cir.const #cir.int<10> : !s32i loc(#loc133)
    %42 = cir.load %2 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc134)
    %43 = cir.get_member %42[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc70)
    cir.store %41, %43 : !s32i, !cir.ptr<!s32i> loc(#loc265)
    %44 = cir.load %2 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc135)
    %45 = cir.get_member %44[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc67)
    %46 = cir.load %45 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    cir.call @printIntLine(%46) : (!s32i) -> () loc(#loc137)
    %47 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc138)
    %48 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
    %49 = cir.cast(bitcast, %48 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc139)
    cir.call @free(%49) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc138)
    cir.br ^bb13 loc(#loc128)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc125)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc77)
  } loc(#loc239)
  cir.func linkonce_odr @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc140)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc140)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc140)
    cir.return loc(#loc140)
  } loc(#loc140)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_32L7goodB2GEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc267)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc268)
    %2 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc269)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc270)
    %4 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc271)
    %5 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc272)
    %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc273)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc274)
    cir.store %3, %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc271)
    cir.store %3, %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc272)
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc159)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc275)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc159)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc276)
    cir.store %11, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc273)
    cir.br ^bb1 loc(#loc277)
  ^bb1:  // pred: ^bb0
    %12 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc164)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc165)
    %14 = cir.cmp(eq, %12, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc278)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc279)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc167)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc168)
    %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc169)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc167)
    cir.br ^bb3 loc(#loc163)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc163)
  ^bb4:  // pred: ^bb3
    %18 = cir.const #cir.int<8> : !u64i loc(#loc280)
    %19 = cir.call @malloc(%18) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc172)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc281)
    cir.store %20, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc274)
    cir.br ^bb5 loc(#loc282)
  ^bb5:  // pred: ^bb4
    %21 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc175)
    %22 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc176)
    %23 = cir.cmp(eq, %21, %22) : !cir.ptr<!s8i>, !cir.bool loc(#loc283)
    cir.brcond %23 ^bb6, ^bb7 loc(#loc284)
  ^bb6:  // pred: ^bb5
    %24 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc178)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc179)
    %26 = cir.unary(minus, %25) nsw : !s32i, !s32i loc(#loc180)
    cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc178)
    cir.br ^bb7 loc(#loc174)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc174)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc285)
  ^bb9:  // pred: ^bb8
    %27 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc144)
    %28 = cir.load %27 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc183)
    cir.store %28, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc267)
    %29 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc184)
    cir.store %29, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc286)
    %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc186)
    %31 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc187)
    cir.store %30, %31 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc287)
    cir.br ^bb10 loc(#loc182)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc288)
  ^bb11:  // pred: ^bb10
    %32 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc146)
    %33 = cir.load %32 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc191)
    cir.store %33, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc268)
    cir.br ^bb12 loc(#loc289)
  ^bb12:  // pred: ^bb11
    %34 = cir.const #cir.int<4> : !u64i loc(#loc290)
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc195)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc195)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc290)
    cir.call @_ZN11OneIntClassC2Ev(%37) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc148)
    cir.store %37, %2 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc269)
    %38 = cir.const #cir.int<5> : !s32i loc(#loc196)
    %39 = cir.load %2 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc197)
    %40 = cir.get_member %39[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc198)
    cir.store %38, %40 : !s32i, !cir.ptr<!s32i> loc(#loc291)
    %41 = cir.load %2 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc199)
    %42 = cir.get_member %41[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc198)
    %43 = cir.load %42 : !cir.ptr<!s32i>, !s32i loc(#loc200)
    cir.call @printIntLine(%43) : (!s32i) -> () loc(#loc201)
    %44 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc202)
    %45 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc203)
    %46 = cir.cast(bitcast, %45 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc203)
    cir.call @free(%46) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc202)
    cir.br ^bb13 loc(#loc193)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc190)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc142)
  } loc(#loc266)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_324goodEv() extra(#fn_attr2) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_32L7goodG2BEv() : () -> () loc(#loc206)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_32L7goodB2GEv() : () -> () loc(#loc207)
    cir.return loc(#loc205)
  } loc(#loc292)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("/usr/include/stdlib.h":687:1)
#loc9 = loc("/usr/include/stdlib.h":687:32)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":25:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":57:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":35:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":35:24)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":41:9)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":41:24)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":48:13)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":48:49)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":27:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":27:12)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":28:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":28:25)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":29:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":29:25)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":30:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":30:62)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":32:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":32:64)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":30:36)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":30:43)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":30:61)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":31:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":31:42)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":31:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":31:26)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":31:32)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":31:33)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":31:39)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":31:38)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":32:44)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":32:63)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":32:37)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":33:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":33:43)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":33:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":33:27)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":33:33)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":33:34)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":33:40)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":33:39)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":34:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":39:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":35:23)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":37:16)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":37:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":38:21)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":38:10)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":38:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":40:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":56:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":41:23)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":42:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":55:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":48:39)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":48:43)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":50:32)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":50:13)
#loc67 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":51:32)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":51:13)
#loc70 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":52:26)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":52:36)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":52:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":54:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":54:18)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":64:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":96:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":74:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":74:24)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":80:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":80:24)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":87:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":87:49)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":66:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":66:12)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":67:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":67:25)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":68:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":68:25)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":69:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":69:62)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":71:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":71:64)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":69:36)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":69:43)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":69:61)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":70:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":70:42)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":70:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":70:26)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":70:32)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":70:33)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":70:39)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":70:38)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":71:44)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":71:63)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":71:37)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":72:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":72:43)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":72:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":72:27)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":72:33)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":72:34)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":72:40)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":72:39)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":73:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":78:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":74:23)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":76:16)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":76:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":77:21)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":77:10)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":77:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":79:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":95:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":80:23)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":81:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":94:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":87:39)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":87:43)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":89:32)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":89:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":90:32)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":90:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":91:26)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":91:36)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":91:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":93:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":93:18)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":99:1)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":129:1)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":109:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":109:24)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":115:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":115:24)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":122:13)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":122:48)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":101:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":101:12)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":102:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":102:25)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":103:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":103:25)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":104:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":104:62)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":106:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":106:64)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":104:36)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":104:43)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":104:61)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":105:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":105:42)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":105:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":105:26)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":105:32)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":105:33)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":105:39)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":105:38)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":106:44)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":106:63)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":106:37)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":107:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":107:43)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":107:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":107:27)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":107:33)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":107:34)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":107:40)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":107:39)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":108:5)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":113:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":109:23)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":111:16)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":111:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":112:21)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":112:10)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":112:9)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":114:5)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":128:5)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":115:23)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":116:9)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":127:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":122:38)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":122:42)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":124:32)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":124:13)
#loc198 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":125:26)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":125:36)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":125:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":126:13)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":126:18)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":131:1)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":135:1)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":133:5)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":134:5)
#loc208 = loc(fused[#loc1, #loc2])
#loc209 = loc(fused[#loc3, #loc4])
#loc210 = loc(fused[#loc6, #loc7])
#loc211 = loc(fused[#loc8, #loc9])
#loc212 = loc(fused[#loc10, #loc11])
#loc213 = loc(fused[#loc12, #loc13])
#loc214 = loc(fused[#loc14, #loc15])
#loc215 = loc(fused[#loc16, #loc17])
#loc216 = loc(fused[#loc18, #loc19])
#loc217 = loc(fused[#loc20, #loc21])
#loc218 = loc(fused[#loc22, #loc23])
#loc219 = loc(fused[#loc24, #loc25])
#loc220 = loc(fused[#loc26, #loc27])
#loc221 = loc(fused[#loc29, #loc30])
#loc222 = loc(fused[#loc28, #loc25])
#loc223 = loc(fused[#loc31, #loc32])
#loc224 = loc(fused[#loc33, #loc34])
#loc225 = loc(fused[#loc35, #loc32])
#loc226 = loc(fused[#loc39, #loc40])
#loc227 = loc(fused[#loc41, #loc27])
#loc228 = loc(fused[#loc42, #loc43])
#loc229 = loc(fused[#loc44, #loc45])
#loc230 = loc(fused[#loc46, #loc43])
#loc231 = loc(fused[#loc50, #loc51])
#loc232 = loc(fused[#loc54, #loc53])
#loc233 = loc(fused[#loc57, #loc55])
#loc234 = loc(fused[#loc58, #loc59])
#loc235 = loc(fused[#loc61, #loc62])
#loc236 = loc(fused[#loc63, #loc17])
#loc237 = loc(fused[#loc66, #loc65])
#loc238 = loc(fused[#loc69, #loc68])
#loc239 = loc(fused[#loc76, #loc77])
#loc240 = loc(fused[#loc78, #loc79])
#loc241 = loc(fused[#loc80, #loc81])
#loc242 = loc(fused[#loc82, #loc83])
#loc243 = loc(fused[#loc84, #loc85])
#loc244 = loc(fused[#loc86, #loc87])
#loc245 = loc(fused[#loc88, #loc89])
#loc246 = loc(fused[#loc90, #loc91])
#loc247 = loc(fused[#loc92, #loc93])
#loc248 = loc(fused[#loc95, #loc96])
#loc249 = loc(fused[#loc94, #loc91])
#loc250 = loc(fused[#loc97, #loc98])
#loc251 = loc(fused[#loc99, #loc100])
#loc252 = loc(fused[#loc101, #loc98])
#loc253 = loc(fused[#loc105, #loc106])
#loc254 = loc(fused[#loc107, #loc93])
#loc255 = loc(fused[#loc108, #loc109])
#loc256 = loc(fused[#loc110, #loc111])
#loc257 = loc(fused[#loc112, #loc109])
#loc258 = loc(fused[#loc116, #loc117])
#loc259 = loc(fused[#loc120, #loc119])
#loc260 = loc(fused[#loc123, #loc121])
#loc261 = loc(fused[#loc124, #loc125])
#loc262 = loc(fused[#loc127, #loc128])
#loc263 = loc(fused[#loc129, #loc83])
#loc264 = loc(fused[#loc132, #loc131])
#loc265 = loc(fused[#loc134, #loc133])
#loc266 = loc(fused[#loc141, #loc142])
#loc267 = loc(fused[#loc143, #loc144])
#loc268 = loc(fused[#loc145, #loc146])
#loc269 = loc(fused[#loc147, #loc148])
#loc270 = loc(fused[#loc149, #loc150])
#loc271 = loc(fused[#loc151, #loc152])
#loc272 = loc(fused[#loc153, #loc154])
#loc273 = loc(fused[#loc155, #loc156])
#loc274 = loc(fused[#loc157, #loc158])
#loc275 = loc(fused[#loc160, #loc161])
#loc276 = loc(fused[#loc159, #loc156])
#loc277 = loc(fused[#loc162, #loc163])
#loc278 = loc(fused[#loc164, #loc165])
#loc279 = loc(fused[#loc166, #loc163])
#loc280 = loc(fused[#loc170, #loc171])
#loc281 = loc(fused[#loc172, #loc158])
#loc282 = loc(fused[#loc173, #loc174])
#loc283 = loc(fused[#loc175, #loc176])
#loc284 = loc(fused[#loc177, #loc174])
#loc285 = loc(fused[#loc181, #loc182])
#loc286 = loc(fused[#loc185, #loc184])
#loc287 = loc(fused[#loc188, #loc186])
#loc288 = loc(fused[#loc189, #loc190])
#loc289 = loc(fused[#loc192, #loc193])
#loc290 = loc(fused[#loc194, #loc148])
#loc291 = loc(fused[#loc197, #loc196])
#loc292 = loc(fused[#loc204, #loc205])
