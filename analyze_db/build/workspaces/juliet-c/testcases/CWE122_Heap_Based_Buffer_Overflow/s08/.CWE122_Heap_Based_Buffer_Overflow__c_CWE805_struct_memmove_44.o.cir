!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":21:21)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":21:37)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":59:25)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":59:41)
!ty__twoIntsStruct = !cir.record<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc150 = loc(fused[#loc7, #loc8])
#loc181 = loc(fused[#loc83, #loc84])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc147)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc148)
  cir.func internal private @badSink(%arg0: !cir.ptr<!ty__twoIntsStruct> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc150)
    cir.store %arg0, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc9)
    cir.scope {
      %1 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc152)
      cir.scope {
        %16 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc154)
        cir.scope {
          %17 = cir.const #cir.int<0> : !s32i loc(#loc20)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc20)
          cir.store %18, %16 : !u64i, !cir.ptr<!u64i> loc(#loc156)
          cir.for : cond {
            %19 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc22)
            %20 = cir.const #cir.int<100> : !s32i loc(#loc23)
            %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc23)
            %22 = cir.cmp(lt, %19, %21) : !u64i, !cir.bool loc(#loc157)
            cir.condition(%22) loc(#loc24)
          } body {
            cir.scope {
              %19 = cir.const #cir.int<0> : !s32i loc(#loc26)
              %20 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc27)
              %21 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc28)
              %22 = cir.ptr_stride(%21 : !cir.ptr<!ty__twoIntsStruct>, %20 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc28)
              %23 = cir.get_member %22[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc29)
              cir.store %19, %23 : !s32i, !cir.ptr<!s32i> loc(#loc159)
              %24 = cir.const #cir.int<0> : !s32i loc(#loc30)
              %25 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc31)
              %26 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc32)
              %27 = cir.ptr_stride(%26 : !cir.ptr<!ty__twoIntsStruct>, %25 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc32)
              %28 = cir.get_member %27[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc33)
              cir.store %24, %28 : !s32i, !cir.ptr<!s32i> loc(#loc160)
            } loc(#loc158)
            cir.yield loc(#loc19)
          } step {
            %19 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc34)
            %20 = cir.unary(inc, %19) : !u64i, !u64i loc(#loc35)
            cir.store %20, %16 : !u64i, !cir.ptr<!u64i> loc(#loc161)
            cir.yield loc(#loc155)
          } loc(#loc155)
        } loc(#loc155)
      } loc(#loc153)
      %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc36)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc36)
      %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc37)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc37)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc38)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc38)
      %8 = cir.const #cir.int<8> : !u64i loc(#loc162)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc163)
      cir.libc.memmove %9 bytes from %5 to %3 : !cir.ptr<!void>, !u64i loc(#loc164)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc43)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc44)
      %12 = cir.ptr_stride(%10 : !cir.ptr<!ty__twoIntsStruct>, %11 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc45)
      cir.call @printStructLine(%12) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc46)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc47)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc48)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc48)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc47)
    } loc(#loc151)
    cir.return loc(#loc6)
  } loc(#loc149)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc165)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc166)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc168)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!ty__twoIntsStruct>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc169)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!cir.ptr<!ty__twoIntsStruct>)>> loc(#loc58)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!ty__twoIntsStruct>)>>> loc(#loc169)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc59)
    cir.store %3, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc170)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc61)
    %5 = cir.const #cir.int<50> : !s32i loc(#loc62)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc62)
    %7 = cir.const #cir.int<8> : !u64i loc(#loc171)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc172)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc61)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc173)
    cir.store %10, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc174)
    cir.scope {
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc69)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc70)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc70)
      %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc176)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc72)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc73)
        %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc74)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc72)
      } loc(#loc177)
    } loc(#loc175)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!ty__twoIntsStruct>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!ty__twoIntsStruct>)>> loc(#loc75)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc76)
    cir.call %11(%12) : (!cir.ptr<!cir.func<(!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc75)
    cir.return loc(#loc54)
  } loc(#loc167)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc179)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc79)
    cir.return loc(#loc78)
  } loc(#loc178)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!ty__twoIntsStruct> loc(fused[#loc83, #loc84])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc181)
    cir.store %arg0, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc85)
    cir.scope {
      %1 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc183)
      cir.scope {
        %16 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc185)
        cir.scope {
          %17 = cir.const #cir.int<0> : !s32i loc(#loc96)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc96)
          cir.store %18, %16 : !u64i, !cir.ptr<!u64i> loc(#loc187)
          cir.for : cond {
            %19 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc98)
            %20 = cir.const #cir.int<100> : !s32i loc(#loc99)
            %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc99)
            %22 = cir.cmp(lt, %19, %21) : !u64i, !cir.bool loc(#loc188)
            cir.condition(%22) loc(#loc100)
          } body {
            cir.scope {
              %19 = cir.const #cir.int<0> : !s32i loc(#loc102)
              %20 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc103)
              %21 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc104)
              %22 = cir.ptr_stride(%21 : !cir.ptr<!ty__twoIntsStruct>, %20 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc104)
              %23 = cir.get_member %22[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc29)
              cir.store %19, %23 : !s32i, !cir.ptr<!s32i> loc(#loc190)
              %24 = cir.const #cir.int<0> : !s32i loc(#loc105)
              %25 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc106)
              %26 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc107)
              %27 = cir.ptr_stride(%26 : !cir.ptr<!ty__twoIntsStruct>, %25 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc107)
              %28 = cir.get_member %27[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc33)
              cir.store %24, %28 : !s32i, !cir.ptr<!s32i> loc(#loc191)
            } loc(#loc189)
            cir.yield loc(#loc95)
          } step {
            %19 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc108)
            %20 = cir.unary(inc, %19) : !u64i, !u64i loc(#loc109)
            cir.store %20, %16 : !u64i, !cir.ptr<!u64i> loc(#loc192)
            cir.yield loc(#loc186)
          } loc(#loc186)
        } loc(#loc186)
      } loc(#loc184)
      %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc110)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc110)
      %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc111)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc111)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc112)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc112)
      %8 = cir.const #cir.int<8> : !u64i loc(#loc193)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc194)
      cir.libc.memmove %9 bytes from %5 to %3 : !cir.ptr<!void>, !u64i loc(#loc195)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc117)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc118)
      %12 = cir.ptr_stride(%10 : !cir.ptr<!ty__twoIntsStruct>, %11 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc119)
      cir.call @printStructLine(%12) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc120)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc121)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc122)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc122)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc121)
    } loc(#loc182)
    cir.return loc(#loc82)
  } loc(#loc180)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc197)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!ty__twoIntsStruct>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc198)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!cir.ptr<!ty__twoIntsStruct>)>> loc(#loc128)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!ty__twoIntsStruct>)>>> loc(#loc198)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc129)
    cir.store %3, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc199)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc131)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc132)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc132)
    %7 = cir.const #cir.int<8> : !u64i loc(#loc200)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc201)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc131)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc202)
    cir.store %10, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc203)
    cir.scope {
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc139)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc140)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc140)
      %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc205)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc142)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc143)
        %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc144)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc142)
      } loc(#loc206)
    } loc(#loc204)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!ty__twoIntsStruct>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!ty__twoIntsStruct>)>> loc(#loc145)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc146)
    cir.call %11(%12) : (!cir.ptr<!cir.func<(!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc145)
    cir.return loc(#loc124)
  } loc(#loc196)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":39:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":22:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":23:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":38:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":24:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":24:33)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":25:9)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":33:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":26:13)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":26:20)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":28:13)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":32:13)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":28:22)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":28:18)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":28:25)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":28:29)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":28:27)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":29:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":30:36)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":30:24)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":30:17)
#loc29 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":31:36)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":31:24)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":31:17)
#loc33 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":28:35)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":28:34)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":35:17)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":35:23)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":35:31)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":35:35)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":35:55)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":35:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":35:56)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":36:26)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":36:31)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":36:32)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":36:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":37:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":37:14)
#loc49 = loc("/usr/include/stdlib.h":672:1)
#loc50 = loc("/usr/include/stdlib.h":672:45)
#loc51 = loc("/usr/include/stdlib.h":756:1)
#loc52 = loc("/usr/include/stdlib.h":756:70)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":41:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":52:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":43:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":43:21)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":45:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":45:41)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":46:12)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":46:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":48:29)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":48:36)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":48:39)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":48:59)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":48:60)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":48:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":49:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":49:33)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":49:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":49:17)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":49:23)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":49:24)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":49:30)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":49:29)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":51:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":51:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":90:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":93:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":92:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":92:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":59:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":77:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":60:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":61:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":76:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":62:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":62:33)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":63:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":71:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":64:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":64:20)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":66:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":70:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":66:22)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":66:18)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":66:25)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":66:29)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":66:27)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":67:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":68:36)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":68:24)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":68:17)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":69:36)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":69:24)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":69:17)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":66:35)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":66:34)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":73:17)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":73:23)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":73:31)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":73:35)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":73:55)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":73:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":73:56)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":74:26)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":74:31)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":74:32)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":74:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":75:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":75:14)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":79:1)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":88:1)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":81:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":81:21)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":82:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":82:41)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":83:12)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":83:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":85:29)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":85:36)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":85:40)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":85:60)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":85:61)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":85:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":86:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":86:33)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":86:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":86:17)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":86:23)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":86:24)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":86:30)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":86:29)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":87:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c":87:13)
#loc147 = loc(fused[#loc1, #loc2])
#loc148 = loc(fused[#loc3, #loc4])
#loc149 = loc(fused[#loc5, #loc6])
#loc151 = loc(fused[#loc10, #loc11])
#loc152 = loc(fused[#loc12, #loc13])
#loc153 = loc(fused[#loc14, #loc15])
#loc154 = loc(fused[#loc16, #loc17])
#loc155 = loc(fused[#loc18, #loc19])
#loc156 = loc(fused[#loc21, #loc20])
#loc157 = loc(fused[#loc22, #loc23])
#loc158 = loc(fused[#loc25, #loc19])
#loc159 = loc(fused[#loc28, #loc26])
#loc160 = loc(fused[#loc32, #loc30])
#loc161 = loc(fused[#loc35, #loc34])
#loc162 = loc(fused[#loc39, #loc40])
#loc163 = loc(fused[#loc38, #loc40])
#loc164 = loc(fused[#loc41, #loc42])
#loc165 = loc(fused[#loc49, #loc50])
#loc166 = loc(fused[#loc51, #loc52])
#loc167 = loc(fused[#loc53, #loc54])
#loc168 = loc(fused[#loc55, #loc56])
#loc169 = loc(fused[#loc57, #loc58])
#loc170 = loc(fused[#loc60, #loc59])
#loc171 = loc(fused[#loc63, #loc64])
#loc172 = loc(fused[#loc62, #loc64])
#loc173 = loc(fused[#loc61, #loc65])
#loc174 = loc(fused[#loc66, #loc65])
#loc175 = loc(fused[#loc67, #loc68])
#loc176 = loc(fused[#loc69, #loc70])
#loc177 = loc(fused[#loc71, #loc68])
#loc178 = loc(fused[#loc77, #loc78])
#loc179 = loc(fused[#loc79, #loc80])
#loc180 = loc(fused[#loc81, #loc82])
#loc182 = loc(fused[#loc86, #loc87])
#loc183 = loc(fused[#loc88, #loc89])
#loc184 = loc(fused[#loc90, #loc91])
#loc185 = loc(fused[#loc92, #loc93])
#loc186 = loc(fused[#loc94, #loc95])
#loc187 = loc(fused[#loc97, #loc96])
#loc188 = loc(fused[#loc98, #loc99])
#loc189 = loc(fused[#loc101, #loc95])
#loc190 = loc(fused[#loc104, #loc102])
#loc191 = loc(fused[#loc107, #loc105])
#loc192 = loc(fused[#loc109, #loc108])
#loc193 = loc(fused[#loc113, #loc114])
#loc194 = loc(fused[#loc112, #loc114])
#loc195 = loc(fused[#loc115, #loc116])
#loc196 = loc(fused[#loc123, #loc124])
#loc197 = loc(fused[#loc125, #loc126])
#loc198 = loc(fused[#loc127, #loc128])
#loc199 = loc(fused[#loc130, #loc129])
#loc200 = loc(fused[#loc133, #loc134])
#loc201 = loc(fused[#loc132, #loc134])
#loc202 = loc(fused[#loc131, #loc135])
#loc203 = loc(fused[#loc136, #loc135])
#loc204 = loc(fused[#loc137, #loc138])
#loc205 = loc(fused[#loc139, #loc140])
#loc206 = loc(fused[#loc141, #loc138])
