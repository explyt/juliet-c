!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc6 = loc("CWE617_Reachable_Assertion__rand_41.c":25:50)
#loc7 = loc("CWE617_Reachable_Assertion__rand_41.c":25:54)
#loc18 = loc("CWE617_Reachable_Assertion__rand_41.c":37:12)
#loc25 = loc("CWE617_Reachable_Assertion__rand_41.c":45:54)
#loc26 = loc("CWE617_Reachable_Assertion__rand_41.c":45:58)
#loc46 = loc(fused[#loc6, #loc7])
#loc53 = loc(fused[#loc25, #loc26])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__rand_41.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__rand_41_badSink(int)\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc3)
  cir.func @CWE617_Reachable_Assertion__rand_41_badSink(%arg0: !s32i loc(fused[#loc6, #loc7])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc46)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc8)
    %1 = cir.const #cir.int<4> : !u64i loc(#loc3)
    cir.br ^bb1 loc(#loc3)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc3)
  ^bb2:  // pred: ^bb1
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc3)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc3)
    %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc3)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc3)
  ^bb3:  // pred: ^bb2
    cir.br ^bb5 loc(#loc3)
  ^bb4:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc3)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc3)
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc3)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc3)
    %9 = cir.const #cir.int<28> : !s32i loc(#loc3)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc3)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc3)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc3)
    cir.call @__assert_fail(%6, %8, %10, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc3)
    cir.br ^bb5 loc(#loc3)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc3)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc3)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc5)
  } loc(#loc45)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc47)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc49)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc16)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc50)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc18)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc18)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc18)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc18)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc18)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc18)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc18)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc18)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc18)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc18)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc18)
    cir.br ^bb3(%18 : !u32i) loc(#loc18)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc18)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc18)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc18)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc18)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc18)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc18)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc18)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc18)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc18)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc18)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc18)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc18)
    cir.br ^bb3(%34 : !u32i) loc(#loc18)
  ^bb3(%35: !u32i loc("CWE617_Reachable_Assertion__rand_41.c":37:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc18)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc18)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    %37 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    cir.call @CWE617_Reachable_Assertion__rand_41_badSink(%37) : (!s32i) -> () loc(#loc21)
    cir.return loc(#loc12)
  } loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void CWE617_Reachable_Assertion__rand_41_goodG2BSink(int)\00" : !cir.array<!s8i x 58>> : !cir.array<!s8i x 58> {alignment = 1 : i64} loc(#loc22)
  cir.func @CWE617_Reachable_Assertion__rand_41_goodG2BSink(%arg0: !s32i loc(fused[#loc25, #loc26])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc53)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc27)
    %1 = cir.const #cir.int<4> : !u64i loc(#loc22)
    cir.br ^bb1 loc(#loc22)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc22)
  ^bb2:  // pred: ^bb1
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc22)
    %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc22)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc22)
  ^bb3:  // pred: ^bb2
    cir.br ^bb5 loc(#loc22)
  ^bb4:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc22)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc22)
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc22)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc22)
    %9 = cir.const #cir.int<48> : !s32i loc(#loc22)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc22)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 58>> loc(#loc22)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 58>>), !cir.ptr<!s8i> loc(#loc22)
    cir.call @__assert_fail(%6, %8, %10, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc22)
    cir.br ^bb5 loc(#loc22)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc22)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc22)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc24)
  } loc(#loc52)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc55)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc29)
  } loc(#loc54)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc57)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc37)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc58)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc39)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc40)
    %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc39)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    cir.call @CWE617_Reachable_Assertion__rand_41_goodG2BSink(%6) : (!s32i) -> () loc(#loc43)
    cir.return loc(#loc33)
  } loc(#loc56)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_41.c":0:0)
#loc1 = loc("/usr/include/assert.h":67:1)
#loc2 = loc("/usr/include/assert.h":69:43)
#loc3 = loc("CWE617_Reachable_Assertion__rand_41.c":28:5)
#loc4 = loc("CWE617_Reachable_Assertion__rand_41.c":25:1)
#loc5 = loc("CWE617_Reachable_Assertion__rand_41.c":29:1)
#loc8 = loc("CWE617_Reachable_Assertion__rand_41.c":26:1)
#loc9 = loc("/usr/include/stdlib.h":573:1)
#loc10 = loc("/usr/include/stdlib.h":573:24)
#loc11 = loc("CWE617_Reachable_Assertion__rand_41.c":31:1)
#loc12 = loc("CWE617_Reachable_Assertion__rand_41.c":39:1)
#loc13 = loc("CWE617_Reachable_Assertion__rand_41.c":33:5)
#loc14 = loc("CWE617_Reachable_Assertion__rand_41.c":33:9)
#loc15 = loc("CWE617_Reachable_Assertion__rand_41.c":35:13)
#loc16 = loc("CWE617_Reachable_Assertion__rand_41.c":35:12)
#loc17 = loc("CWE617_Reachable_Assertion__rand_41.c":35:5)
#loc19 = loc("CWE617_Reachable_Assertion__rand_41.c":37:5)
#loc20 = loc("CWE617_Reachable_Assertion__rand_41.c":38:49)
#loc21 = loc("CWE617_Reachable_Assertion__rand_41.c":38:5)
#loc22 = loc("CWE617_Reachable_Assertion__rand_41.c":48:5)
#loc23 = loc("CWE617_Reachable_Assertion__rand_41.c":45:1)
#loc24 = loc("CWE617_Reachable_Assertion__rand_41.c":49:1)
#loc27 = loc("CWE617_Reachable_Assertion__rand_41.c":46:1)
#loc28 = loc("CWE617_Reachable_Assertion__rand_41.c":62:1)
#loc29 = loc("CWE617_Reachable_Assertion__rand_41.c":65:1)
#loc30 = loc("CWE617_Reachable_Assertion__rand_41.c":64:5)
#loc31 = loc("CWE617_Reachable_Assertion__rand_41.c":64:13)
#loc32 = loc("CWE617_Reachable_Assertion__rand_41.c":52:1)
#loc33 = loc("CWE617_Reachable_Assertion__rand_41.c":60:1)
#loc34 = loc("CWE617_Reachable_Assertion__rand_41.c":54:5)
#loc35 = loc("CWE617_Reachable_Assertion__rand_41.c":54:9)
#loc36 = loc("CWE617_Reachable_Assertion__rand_41.c":56:13)
#loc37 = loc("CWE617_Reachable_Assertion__rand_41.c":56:12)
#loc38 = loc("CWE617_Reachable_Assertion__rand_41.c":56:5)
#loc39 = loc("CWE617_Reachable_Assertion__rand_41.c":58:12)
#loc40 = loc("CWE617_Reachable_Assertion__rand_41.c":58:25)
#loc41 = loc("CWE617_Reachable_Assertion__rand_41.c":58:5)
#loc42 = loc("CWE617_Reachable_Assertion__rand_41.c":59:53)
#loc43 = loc("CWE617_Reachable_Assertion__rand_41.c":59:5)
#loc44 = loc(fused[#loc1, #loc2])
#loc45 = loc(fused[#loc4, #loc5])
#loc47 = loc(fused[#loc9, #loc10])
#loc48 = loc(fused[#loc11, #loc12])
#loc49 = loc(fused[#loc13, #loc14])
#loc50 = loc(fused[#loc17, #loc15])
#loc51 = loc(fused[#loc19, #loc18])
#loc52 = loc(fused[#loc23, #loc24])
#loc54 = loc(fused[#loc28, #loc29])
#loc55 = loc(fused[#loc30, #loc31])
#loc56 = loc(fused[#loc32, #loc33])
#loc57 = loc(fused[#loc34, #loc35])
#loc58 = loc(fused[#loc38, #loc36])
#loc59 = loc(fused[#loc41, #loc40])
