!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":22:57)
#loc6 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":22:61)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":36:61)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":36:65)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":46:61)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":46:65)
#loc50 = loc(fused[#loc5, #loc6])
#loc54 = loc(fused[#loc17, #loc18])
#loc59 = loc(fused[#loc32, #loc33])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_sub_52c.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc48)
  cir.func @CWE191_Integer_Underflow__int_rand_sub_52c_badSink(%arg0: !s32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc51)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc50)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc9)
    cir.br ^bb1 loc(#loc52)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(sub, %2, %3) nsw : !s32i loc(#loc12)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc14)
    cir.br ^bb2 loc(#loc11)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc4)
  } loc(#loc49)
  cir.func @CWE191_Integer_Underflow__int_rand_sub_52c_goodG2BSink(%arg0: !s32i loc(fused[#loc17, #loc18])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc55)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc54)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc21)
    cir.br ^bb1 loc(#loc56)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %4 = cir.binop(sub, %2, %3) nsw : !s32i loc(#loc24)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc55)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc26)
    cir.br ^bb2 loc(#loc23)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc16)
  } loc(#loc53)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc29)
  cir.func @CWE191_Integer_Underflow__int_rand_sub_52c_goodB2GSink(%arg0: !s32i loc(fused[#loc32, #loc33])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc60)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc59)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc36)
    cir.br ^bb1 loc(#loc61)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc40)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc40)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc40)
    %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc40)
    %7 = cir.cmp(gt, %2, %6) : !s32i, !cir.bool loc(#loc62)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc63)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc44)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc60)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc46)
    cir.br ^bb4 loc(#loc42)
  ^bb3:  // pred: ^bb1
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc29)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc47)
    cir.br ^bb4 loc(#loc38)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc38)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc31)
  } loc(#loc58)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_sub_52c.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":29:1)
#loc7 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":26:9)
#loc8 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":26:29)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":23:1)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":24:5)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":28:5)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":26:22)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":27:22)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":27:9)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":36:1)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":43:1)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":40:9)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":40:29)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":37:1)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":38:5)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":42:5)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":40:22)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":41:22)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":41:9)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":56:19)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":46:1)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":58:1)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":51:9)
#loc35 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":51:29)
#loc36 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":47:1)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":49:5)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":57:5)
#loc39 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":49:9)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":49:16)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":50:5)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":53:5)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":55:5)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":51:22)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":52:22)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":52:9)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_sub_52c.c":56:9)
#loc48 = loc(fused[#loc1, #loc2])
#loc49 = loc(fused[#loc3, #loc4])
#loc51 = loc(fused[#loc7, #loc8])
#loc52 = loc(fused[#loc10, #loc11])
#loc53 = loc(fused[#loc15, #loc16])
#loc55 = loc(fused[#loc19, #loc20])
#loc56 = loc(fused[#loc22, #loc23])
#loc57 = loc(fused[#loc27, #loc28])
#loc58 = loc(fused[#loc30, #loc31])
#loc60 = loc(fused[#loc34, #loc35])
#loc61 = loc(fused[#loc37, #loc38])
#loc62 = loc(fused[#loc39, #loc40])
#loc63 = loc(fused[#loc41, #loc42, #loc43, #loc38])
