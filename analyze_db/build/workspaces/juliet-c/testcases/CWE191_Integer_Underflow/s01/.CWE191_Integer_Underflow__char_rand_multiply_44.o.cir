!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":22:21)
#loc6 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":22:26)
#loc40 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":49:25)
#loc41 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":49:30)
#loc71 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":70:25)
#loc72 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":70:30)
#loc108 = loc(fused[#loc5, #loc6])
#loc123 = loc(fused[#loc40, #loc41])
#loc135 = loc(fused[#loc71, #loc72])
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_multiply_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printHexCharLine(!s8i) loc(#loc106)
  cir.func internal private @badSink(%arg0: !s8i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc108)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc7)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc10)
      %2 = cir.cast(integral, %1 : !s8i), !s32i loc(#loc10)
      %3 = cir.const #cir.int<0> : !s32i loc(#loc11)
      %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc110)
      cir.if %4 {
        %5 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc112)
        %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc15)
        %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc15)
        %8 = cir.const #cir.int<2> : !s32i loc(#loc14)
        %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc15)
        %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc15)
        cir.store %10, %5 : !s8i, !cir.ptr<!s8i> loc(#loc112)
        %11 = cir.load %5 : !cir.ptr<!s8i>, !s8i loc(#loc16)
        cir.call @printHexCharLine(%11) : (!s8i) -> () loc(#loc17)
      } loc(#loc111)
    } loc(#loc109)
    cir.return loc(#loc4)
  } loc(#loc107)
  cir.func private @rand() -> !s32i extra(#fn_attr1) loc(#loc113)
  cir.func no_proto @CWE191_Integer_Underflow__char_rand_multiply_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc115)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s8i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc116)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!s8i)>> loc(#loc25)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s8i)>>> loc(#loc116)
    %3 = cir.const #cir.int<32> : !s32i loc(#loc26)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc26)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc117)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc28)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc28)
    %9 = cir.ternary(%8, true {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc28)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc28)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc28)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc28)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc28)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc28)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc28)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc28)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc28)
      cir.yield %25 : !u32i loc(#loc28)
    }, false {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc28)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc28)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc28)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc28)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc28)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc28)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc28)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc28)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc28)
      %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc28)
      %27 = cir.const #cir.int<1> : !s32i loc(#loc28)
      %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc28)
      %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc28)
      cir.yield %29 : !u32i loc(#loc28)
    }) : (!cir.bool) -> !u32i loc(#loc28)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc28)
    %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc28)
    cir.store %11, %0 : !s8i, !cir.ptr<!s8i> loc(#loc118)
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s8i)>>>, !cir.ptr<!cir.func<(!s8i)>> loc(#loc30)
    %13 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc31)
    cir.call %12(%13) : (!cir.ptr<!cir.func<(!s8i)>>, !s8i) -> () loc(#loc30)
    cir.return loc(#loc21)
  } loc(#loc114)
  cir.func no_proto @CWE191_Integer_Underflow__char_rand_multiply_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc120)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc121)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc119)
  cir.func internal private @goodG2BSink(%arg0: !s8i loc(fused[#loc40, #loc41])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc123)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc42)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc45)
      %2 = cir.cast(integral, %1 : !s8i), !s32i loc(#loc45)
      %3 = cir.const #cir.int<0> : !s32i loc(#loc46)
      %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc125)
      cir.if %4 {
        %5 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc127)
        %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc50)
        %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc50)
        %8 = cir.const #cir.int<2> : !s32i loc(#loc49)
        %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc50)
        %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc50)
        cir.store %10, %5 : !s8i, !cir.ptr<!s8i> loc(#loc127)
        %11 = cir.load %5 : !cir.ptr<!s8i>, !s8i loc(#loc51)
        cir.call @printHexCharLine(%11) : (!s8i) -> () loc(#loc52)
      } loc(#loc126)
    } loc(#loc124)
    cir.return loc(#loc39)
  } loc(#loc122)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc129)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s8i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc130)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!s8i)>> loc(#loc58)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s8i)>>> loc(#loc130)
    %3 = cir.const #cir.int<32> : !s32i loc(#loc59)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc59)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc131)
    %5 = cir.const #cir.int<2> : !s32i loc(#loc61)
    %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc62)
    %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc62)
    cir.store %7, %0 : !s8i, !cir.ptr<!s8i> loc(#loc132)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s8i)>>>, !cir.ptr<!cir.func<(!s8i)>> loc(#loc64)
    %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc65)
    cir.call %8(%9) : (!cir.ptr<!cir.func<(!s8i)>>, !s8i) -> () loc(#loc64)
    cir.return loc(#loc54)
  } loc(#loc128)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc133)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc68)
  cir.func internal private @goodB2GSink(%arg0: !s8i loc(fused[#loc71, #loc72])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc135)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc73)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc76)
      %2 = cir.cast(integral, %1 : !s8i), !s32i loc(#loc76)
      %3 = cir.const #cir.int<0> : !s32i loc(#loc77)
      %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc137)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc81)
          %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc81)
          %7 = cir.const #cir.int<127> : !s32i loc(#loc82)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc82)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc82)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc82)
          %11 = cir.const #cir.int<2> : !s32i loc(#loc83)
          %12 = cir.binop(div, %10, %11) : !s32i loc(#loc140)
          %13 = cir.cmp(gt, %6, %12) : !s32i, !cir.bool loc(#loc141)
          cir.if %13 {
            %14 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc143)
            %15 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc90)
            %16 = cir.cast(integral, %15 : !s8i), !s32i loc(#loc90)
            %17 = cir.const #cir.int<2> : !s32i loc(#loc89)
            %18 = cir.binop(mul, %16, %17) nsw : !s32i loc(#loc90)
            %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc90)
            cir.store %19, %14 : !s8i, !cir.ptr<!s8i> loc(#loc143)
            %20 = cir.load %14 : !cir.ptr<!s8i>, !s8i loc(#loc91)
            cir.call @printHexCharLine(%20) : (!s8i) -> () loc(#loc92)
          } else {
            %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc68)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc68)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc93)
          } loc(#loc142)
        } loc(#loc139)
      } loc(#loc138)
    } loc(#loc136)
    cir.return loc(#loc70)
  } loc(#loc134)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc145)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s8i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc146)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<(!s8i)>> loc(#loc99)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s8i)>>> loc(#loc146)
    %3 = cir.const #cir.int<32> : !s32i loc(#loc100)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc100)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc147)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc102)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc102)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc102)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc102)
    %9 = cir.ternary(%8, true {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc102)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc102)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc102)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc102)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc102)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc102)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc102)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc102)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc102)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc102)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc102)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc102)
      cir.yield %25 : !u32i loc(#loc102)
    }, false {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc102)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc102)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc102)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc102)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc102)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc102)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc102)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc102)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc102)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc102)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc102)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc102)
      %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc102)
      %27 = cir.const #cir.int<1> : !s32i loc(#loc102)
      %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc102)
      %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc102)
      cir.yield %29 : !u32i loc(#loc102)
    }) : (!cir.bool) -> !u32i loc(#loc102)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc102)
    %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc102)
    cir.store %11, %0 : !s8i, !cir.ptr<!s8i> loc(#loc148)
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s8i)>>>, !cir.ptr<!cir.func<(!s8i)>> loc(#loc104)
    %13 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc105)
    cir.call %12(%13) : (!cir.ptr<!cir.func<(!s8i)>>, !s8i) -> () loc(#loc104)
    cir.return loc(#loc95)
  } loc(#loc144)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_multiply_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc3 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":30:1)
#loc7 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":23:1)
#loc8 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":24:5)
#loc9 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":29:5)
#loc10 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":24:8)
#loc11 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":24:15)
#loc12 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":25:5)
#loc13 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":27:9)
#loc14 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":27:30)
#loc15 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":27:23)
#loc16 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":28:26)
#loc17 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":28:9)
#loc18 = loc("/usr/include/stdlib.h":573:1)
#loc19 = loc("/usr/include/stdlib.h":573:24)
#loc20 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":32:1)
#loc21 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":42:1)
#loc22 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":34:5)
#loc23 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":34:10)
#loc24 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":36:5)
#loc25 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":36:30)
#loc26 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":37:12)
#loc27 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":37:5)
#loc28 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":39:18)
#loc29 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":39:5)
#loc30 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":41:5)
#loc31 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":41:13)
#loc32 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":97:1)
#loc33 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":101:1)
#loc34 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":99:5)
#loc35 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":99:13)
#loc36 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":100:5)
#loc37 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":100:13)
#loc38 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":49:1)
#loc39 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":57:1)
#loc42 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":50:1)
#loc43 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":51:5)
#loc44 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":56:5)
#loc45 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":51:8)
#loc46 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":51:15)
#loc47 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":52:5)
#loc48 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":54:9)
#loc49 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":54:30)
#loc50 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":54:23)
#loc51 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":55:26)
#loc52 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":55:9)
#loc53 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":59:1)
#loc54 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":67:1)
#loc55 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":61:5)
#loc56 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":61:10)
#loc57 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":62:5)
#loc58 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":62:30)
#loc59 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":63:12)
#loc60 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":63:5)
#loc61 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":65:13)
#loc62 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":65:12)
#loc63 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":65:5)
#loc64 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":66:5)
#loc65 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":66:13)
#loc66 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc67 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc68 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":82:23)
#loc69 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":70:1)
#loc70 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":85:1)
#loc73 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":71:1)
#loc74 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":72:5)
#loc75 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":84:5)
#loc76 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":72:8)
#loc77 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":72:15)
#loc78 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":73:5)
#loc79 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":75:9)
#loc80 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":83:9)
#loc81 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":75:13)
#loc82 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":75:21)
#loc83 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":75:30)
#loc84 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":75:31)
#loc85 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":76:9)
#loc86 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":79:9)
#loc87 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":81:9)
#loc88 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":77:13)
#loc89 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":77:34)
#loc90 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":77:27)
#loc91 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":78:30)
#loc92 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":78:13)
#loc93 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":82:13)
#loc94 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":87:1)
#loc95 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":95:1)
#loc96 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":89:5)
#loc97 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":89:10)
#loc98 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":90:5)
#loc99 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":90:30)
#loc100 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":91:12)
#loc101 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":91:5)
#loc102 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":93:18)
#loc103 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":93:5)
#loc104 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":94:5)
#loc105 = loc("CWE191_Integer_Underflow__char_rand_multiply_44.c":94:13)
#loc106 = loc(fused[#loc1, #loc2])
#loc107 = loc(fused[#loc3, #loc4])
#loc109 = loc(fused[#loc8, #loc9])
#loc110 = loc(fused[#loc10, #loc11])
#loc111 = loc(fused[#loc12, #loc9])
#loc112 = loc(fused[#loc13, #loc14])
#loc113 = loc(fused[#loc18, #loc19])
#loc114 = loc(fused[#loc20, #loc21])
#loc115 = loc(fused[#loc22, #loc23])
#loc116 = loc(fused[#loc24, #loc25])
#loc117 = loc(fused[#loc27, #loc26])
#loc118 = loc(fused[#loc29, #loc28])
#loc119 = loc(fused[#loc32, #loc33])
#loc120 = loc(fused[#loc34, #loc35])
#loc121 = loc(fused[#loc36, #loc37])
#loc122 = loc(fused[#loc38, #loc39])
#loc124 = loc(fused[#loc43, #loc44])
#loc125 = loc(fused[#loc45, #loc46])
#loc126 = loc(fused[#loc47, #loc44])
#loc127 = loc(fused[#loc48, #loc49])
#loc128 = loc(fused[#loc53, #loc54])
#loc129 = loc(fused[#loc55, #loc56])
#loc130 = loc(fused[#loc57, #loc58])
#loc131 = loc(fused[#loc60, #loc59])
#loc132 = loc(fused[#loc63, #loc61])
#loc133 = loc(fused[#loc66, #loc67])
#loc134 = loc(fused[#loc69, #loc70])
#loc136 = loc(fused[#loc74, #loc75])
#loc137 = loc(fused[#loc76, #loc77])
#loc138 = loc(fused[#loc78, #loc75])
#loc139 = loc(fused[#loc79, #loc80])
#loc140 = loc(fused[#loc82, #loc83])
#loc141 = loc(fused[#loc81, #loc84])
#loc142 = loc(fused[#loc85, #loc86, #loc87, #loc80])
#loc143 = loc(fused[#loc88, #loc89])
#loc144 = loc(fused[#loc94, #loc95])
#loc145 = loc(fused[#loc96, #loc97])
#loc146 = loc(fused[#loc98, #loc99])
#loc147 = loc(fused[#loc101, #loc100])
#loc148 = loc(fused[#loc103, #loc102])
