!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":94:10)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":94:14)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":94:20)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":94:32)
#loc150 = loc(fused[#loc64, #loc65])
#loc151 = loc(fused[#loc66, #loc67])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc125)
  cir.func private @printIntLine(!s32i) loc(#loc126)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc128)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc9)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc129)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc131)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc131)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc13)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
      cir.if %5 {
        %6 = cir.const #cir.int<10> : !s32i loc(#loc18)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc18)
        %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc18)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc18)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc18)
        cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc133)
      } else {
        %6 = cir.const #cir.int<10> : !s32i loc(#loc20)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc20)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc20)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc20)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc20)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc20)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc20)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc134)
      } loc(#loc132)
    } loc(#loc130)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc136)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc137)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc136)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc136)
      cir.scope {
        %9 = cir.const #cir.int<0> : !s32i loc(#loc30)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc30)
        cir.store %10, %3 : !u64i, !cir.ptr<!u64i> loc(#loc139)
        cir.for : cond {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc32)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc33)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc33)
          %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc140)
          cir.condition(%14) loc(#loc34)
        } body {
          cir.scope {
            %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc36)
            %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc37)
            %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !u64i), !cir.ptr<!s32i> loc(#loc37)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc37)
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
            %16 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc39)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc40)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc142)
          } loc(#loc141)
          cir.yield loc(#loc29)
        } step {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc42)
          %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc43)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc143)
          cir.yield loc(#loc138)
        } loc(#loc138)
      } loc(#loc138)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc45)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc46)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc44)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc47)
    } loc(#loc135)
    cir.return loc(#loc6)
  } loc(#loc127)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc145)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc49)
  } loc(#loc144)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc146)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc147)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc148)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc61)
  cir.func @main(%arg0: !s32i loc(fused[#loc64, #loc65]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc66, #loc67])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc150)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc151)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc63)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc68)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc69)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc70)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc70)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc71)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc58)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc152)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12_good() : () -> () loc(#loc73)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc59)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc60)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc153)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12_bad() : () -> () loc(#loc77)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc61)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc80)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc154)
    cir.return %17 : !s32i loc(#loc154)
  } loc(#loc149)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc156)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc86)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc157)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc159)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc159)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc90)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc90)
      cir.if %5 {
        %6 = cir.const #cir.int<10> : !s32i loc(#loc95)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc95)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc95)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc95)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc95)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc95)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc95)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc161)
      } else {
        %6 = cir.const #cir.int<10> : !s32i loc(#loc97)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc97)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc97)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc97)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc97)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc97)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc97)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc162)
      } loc(#loc160)
    } loc(#loc158)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc164)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc165)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc164)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc164)
      cir.scope {
        %9 = cir.const #cir.int<0> : !s32i loc(#loc107)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc107)
        cir.store %10, %3 : !u64i, !cir.ptr<!u64i> loc(#loc167)
        cir.for : cond {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc109)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc110)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc110)
          %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc168)
          cir.condition(%14) loc(#loc111)
        } body {
          cir.scope {
            %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc113)
            %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc114)
            %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !u64i), !cir.ptr<!s32i> loc(#loc114)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc114)
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc115)
            %16 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc116)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc117)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc170)
          } loc(#loc169)
          cir.yield loc(#loc106)
        } step {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc119)
          %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc120)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc171)
          cir.yield loc(#loc166)
        } loc(#loc166)
      } loc(#loc166)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc121)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc122)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc123)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc121)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc124)
    } loc(#loc163)
    cir.return loc(#loc83)
  } loc(#loc155)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":21:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":45:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":23:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":23:11)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":24:12)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":24:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":25:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":34:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":25:8)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":25:33)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":26:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":29:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":31:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":28:23)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":28:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":33:23)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":33:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":35:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":44:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":36:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":36:28)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":37:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":37:16)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":39:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":42:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":39:18)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":39:14)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":39:21)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":39:25)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":39:23)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":40:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":41:30)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":41:23)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":41:13)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":41:18)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":41:19)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":41:31)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":39:30)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":39:29)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":43:22)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":43:27)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":43:28)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":43:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":79:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":82:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":81:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":81:13)
#loc52 = loc("/usr/include/stdlib.h":575:1)
#loc53 = loc("/usr/include/stdlib.h":575:41)
#loc54 = loc("/usr/include/time.h":76:1)
#loc55 = loc("/usr/include/time.h":76:38)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":99:15)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":101:15)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":104:15)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":106:15)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":94:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":109:1)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":95:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":97:27)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":97:22)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":97:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":99:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":100:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":100:61)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":101:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":104:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":105:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":105:60)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":106:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":108:12)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":108:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":53:1)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":77:1)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":55:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":55:11)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":56:12)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":56:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":57:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":66:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":57:8)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":57:33)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":58:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":61:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":63:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":60:23)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":60:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":65:23)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":65:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":67:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":76:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":68:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":68:28)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":69:9)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":69:16)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":71:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":74:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":71:18)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":71:14)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":71:21)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":71:25)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":71:23)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":72:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":73:30)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":73:23)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":73:13)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":73:18)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":73:19)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":73:31)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":71:30)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":71:29)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":75:22)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":75:27)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":75:28)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":75:9)
#loc125 = loc(fused[#loc1, #loc2])
#loc126 = loc(fused[#loc3, #loc4])
#loc127 = loc(fused[#loc5, #loc6])
#loc128 = loc(fused[#loc7, #loc8])
#loc129 = loc(fused[#loc10, #loc9])
#loc130 = loc(fused[#loc11, #loc12])
#loc131 = loc(fused[#loc13, #loc14])
#loc132 = loc(fused[#loc15, #loc16, #loc17, #loc12])
#loc133 = loc(fused[#loc19, #loc18])
#loc134 = loc(fused[#loc21, #loc20])
#loc135 = loc(fused[#loc22, #loc23])
#loc136 = loc(fused[#loc24, #loc25])
#loc137 = loc(fused[#loc26, #loc27])
#loc138 = loc(fused[#loc28, #loc29])
#loc139 = loc(fused[#loc31, #loc30])
#loc140 = loc(fused[#loc32, #loc33])
#loc141 = loc(fused[#loc35, #loc29])
#loc142 = loc(fused[#loc38, #loc41])
#loc143 = loc(fused[#loc43, #loc42])
#loc144 = loc(fused[#loc48, #loc49])
#loc145 = loc(fused[#loc50, #loc51])
#loc146 = loc(fused[#loc52, #loc53])
#loc147 = loc(fused[#loc54, #loc55])
#loc148 = loc(fused[#loc56, #loc57])
#loc149 = loc(fused[#loc62, #loc63])
#loc152 = loc(fused[#loc73, #loc74])
#loc153 = loc(fused[#loc77, #loc78])
#loc154 = loc(fused[#loc81, #loc80])
#loc155 = loc(fused[#loc82, #loc83])
#loc156 = loc(fused[#loc84, #loc85])
#loc157 = loc(fused[#loc87, #loc86])
#loc158 = loc(fused[#loc88, #loc89])
#loc159 = loc(fused[#loc90, #loc91])
#loc160 = loc(fused[#loc92, #loc93, #loc94, #loc89])
#loc161 = loc(fused[#loc96, #loc95])
#loc162 = loc(fused[#loc98, #loc97])
#loc163 = loc(fused[#loc99, #loc100])
#loc164 = loc(fused[#loc101, #loc102])
#loc165 = loc(fused[#loc103, #loc104])
#loc166 = loc(fused[#loc105, #loc106])
#loc167 = loc(fused[#loc108, #loc107])
#loc168 = loc(fused[#loc109, #loc110])
#loc169 = loc(fused[#loc112, #loc106])
#loc170 = loc(fused[#loc115, #loc118])
#loc171 = loc(fused[#loc120, #loc119])
