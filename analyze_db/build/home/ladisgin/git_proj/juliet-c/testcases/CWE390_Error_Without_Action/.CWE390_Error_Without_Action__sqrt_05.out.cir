!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc50 = loc("CWE390_Error_Without_Action__sqrt_05.c":111:10)
#loc51 = loc("CWE390_Error_Without_Action__sqrt_05.c":111:14)
#loc52 = loc("CWE390_Error_Without_Action__sqrt_05.c":111:20)
#loc53 = loc("CWE390_Error_Without_Action__sqrt_05.c":111:32)
#loc152 = loc(fused[#loc50, #loc51])
#loc153 = loc(fused[#loc52, #loc53])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc132)
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc133)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc5)
  cir.func private @printDoubleLine(!cir.double) loc(#loc134)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc136)
    cir.br ^bb1 loc(#loc137)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc132)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %3 ^bb2, ^bb9 loc(#loc138)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc139)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<0> : !s32i loc(#loc18)
    %5 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc19)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    %6 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc20)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc22)
    %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc22)
    %10 = cir.call @sqrt(%9) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc20)
    cir.store %10, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc141)
    cir.br ^bb4 loc(#loc142)
  ^bb4:  // pred: ^bb3
    %11 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc27)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %13 = cir.const #cir.int<33> : !s32i loc(#loc28)
    %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc143)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc144)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc26)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc26)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc30)
    cir.call @printDoubleLine(%15) : (!cir.double) -> () loc(#loc31)
    cir.br ^bb8 loc(#loc17)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc13)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc13)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc9)
  } loc(#loc135)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc146)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc147)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc145)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc148)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc149)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc150)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc47)
  cir.func @main(%arg0: !s32i loc(fused[#loc50, #loc51]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc52, #loc53])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc152)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc153)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc49)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc54)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc55)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc56)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc56)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc57)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc44)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %8 = cir.get_global @CWE390_Error_Without_Action__sqrt_05_good : !cir.ptr<!cir.func<!void ()>> loc(#loc154)
    cir.call @CWE390_Error_Without_Action__sqrt_05_good() : () -> () loc(#loc59)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc45)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc46)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %13 = cir.get_global @CWE390_Error_Without_Action__sqrt_05_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc155)
    cir.call @CWE390_Error_Without_Action__sqrt_05_bad() : () -> () loc(#loc63)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc47)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc156)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc156)
    cir.return %17 : !s32i loc(#loc156)
  } loc(#loc151)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc157)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc71)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc158)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc160)
    cir.br ^bb1 loc(#loc161)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc157)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc80)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc162)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc70)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    cir.br ^bb10 loc(#loc82)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc163)
  ^bb4:  // pred: ^bb3
    %6 = cir.const #cir.int<0> : !s32i loc(#loc87)
    %7 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc88)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    %8 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc89)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc91)
    %11 = cir.cast(int_to_float, %10 : !s32i), !cir.double loc(#loc91)
    %12 = cir.call @sqrt(%11) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc89)
    cir.store %12, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc165)
    cir.br ^bb5 loc(#loc166)
  ^bb5:  // pred: ^bb4
    %13 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc96)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    %15 = cir.const #cir.int<33> : !s32i loc(#loc97)
    %16 = cir.cmp(eq, %14, %15) : !s32i, !cir.bool loc(#loc167)
    cir.brcond %16 ^bb6, ^bb7 loc(#loc168)
  ^bb6:  // pred: ^bb5
    %17 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc71)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc100)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc101)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc100)
    cir.br ^bb7 loc(#loc95)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc95)
  ^bb8:  // pred: ^bb7
    %21 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc102)
    cir.call @printDoubleLine(%21) : (!cir.double) -> () loc(#loc103)
    cir.br ^bb9 loc(#loc86)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc79)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc79)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc75)
  } loc(#loc159)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc170)
    cir.br ^bb1 loc(#loc171)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc132)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc110)
    cir.brcond %3 ^bb2, ^bb9 loc(#loc172)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc173)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<0> : !s32i loc(#loc114)
    %5 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc115)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    %6 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc116)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc118)
    %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc118)
    %10 = cir.call @sqrt(%9) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc116)
    cir.store %10, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc175)
    cir.br ^bb4 loc(#loc176)
  ^bb4:  // pred: ^bb3
    %11 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc123)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc123)
    %13 = cir.const #cir.int<33> : !s32i loc(#loc124)
    %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc177)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc178)
  ^bb5:  // pred: ^bb4
    %15 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc126)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc126)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc127)
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc128)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc129)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc128)
    cir.br ^bb6 loc(#loc122)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc122)
  ^bb7:  // pred: ^bb6
    %19 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc130)
    cir.call @printDoubleLine(%19) : (!cir.double) -> () loc(#loc131)
    cir.br ^bb8 loc(#loc113)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc109)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc109)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc105)
  } loc(#loc169)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_05.c":0:0)
#loc1 = loc("CWE390_Error_Without_Action__sqrt_05.c":24:1)
#loc2 = loc("CWE390_Error_Without_Action__sqrt_05.c":24:25)
#loc3 = loc("/usr/include/errno.h":37:1)
#loc4 = loc("/usr/include/errno.h":37:45)
#loc5 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc8 = loc("CWE390_Error_Without_Action__sqrt_05.c":29:1)
#loc9 = loc("CWE390_Error_Without_Action__sqrt_05.c":45:1)
#loc10 = loc("CWE390_Error_Without_Action__sqrt_05.c":34:13)
#loc11 = loc("CWE390_Error_Without_Action__sqrt_05.c":34:20)
#loc12 = loc("CWE390_Error_Without_Action__sqrt_05.c":31:5)
#loc13 = loc("CWE390_Error_Without_Action__sqrt_05.c":44:5)
#loc14 = loc("CWE390_Error_Without_Action__sqrt_05.c":31:8)
#loc15 = loc("CWE390_Error_Without_Action__sqrt_05.c":32:5)
#loc16 = loc("CWE390_Error_Without_Action__sqrt_05.c":33:9)
#loc17 = loc("CWE390_Error_Without_Action__sqrt_05.c":43:9)
#loc18 = loc("CWE390_Error_Without_Action__sqrt_05.c":35:21)
#loc19 = loc("CWE390_Error_Without_Action__sqrt_05.c":35:13)
#loc20 = loc("CWE390_Error_Without_Action__sqrt_05.c":36:36)
#loc21 = loc("CWE390_Error_Without_Action__sqrt_05.c":36:50)
#loc22 = loc("CWE390_Error_Without_Action__sqrt_05.c":36:49)
#loc23 = loc("CWE390_Error_Without_Action__sqrt_05.c":36:13)
#loc24 = loc("CWE390_Error_Without_Action__sqrt_05.c":36:51)
#loc25 = loc("CWE390_Error_Without_Action__sqrt_05.c":38:13)
#loc26 = loc("CWE390_Error_Without_Action__sqrt_05.c":41:13)
#loc27 = loc("CWE390_Error_Without_Action__sqrt_05.c":38:17)
#loc28 = loc("CWE390_Error_Without_Action__sqrt_05.c":38:26)
#loc29 = loc("CWE390_Error_Without_Action__sqrt_05.c":39:13)
#loc30 = loc("CWE390_Error_Without_Action__sqrt_05.c":42:29)
#loc31 = loc("CWE390_Error_Without_Action__sqrt_05.c":42:13)
#loc32 = loc("CWE390_Error_Without_Action__sqrt_05.c":96:1)
#loc33 = loc("CWE390_Error_Without_Action__sqrt_05.c":100:1)
#loc34 = loc("CWE390_Error_Without_Action__sqrt_05.c":98:5)
#loc35 = loc("CWE390_Error_Without_Action__sqrt_05.c":98:11)
#loc36 = loc("CWE390_Error_Without_Action__sqrt_05.c":99:5)
#loc37 = loc("CWE390_Error_Without_Action__sqrt_05.c":99:11)
#loc38 = loc("/usr/include/stdlib.h":575:1)
#loc39 = loc("/usr/include/stdlib.h":575:41)
#loc40 = loc("/usr/include/time.h":76:1)
#loc41 = loc("/usr/include/time.h":76:38)
#loc42 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE390_Error_Without_Action__sqrt_05.c":116:15)
#loc45 = loc("CWE390_Error_Without_Action__sqrt_05.c":118:15)
#loc46 = loc("CWE390_Error_Without_Action__sqrt_05.c":121:15)
#loc47 = loc("CWE390_Error_Without_Action__sqrt_05.c":123:15)
#loc48 = loc("CWE390_Error_Without_Action__sqrt_05.c":111:1)
#loc49 = loc("CWE390_Error_Without_Action__sqrt_05.c":126:1)
#loc54 = loc("CWE390_Error_Without_Action__sqrt_05.c":112:1)
#loc55 = loc("CWE390_Error_Without_Action__sqrt_05.c":114:27)
#loc56 = loc("CWE390_Error_Without_Action__sqrt_05.c":114:22)
#loc57 = loc("CWE390_Error_Without_Action__sqrt_05.c":114:5)
#loc58 = loc("CWE390_Error_Without_Action__sqrt_05.c":116:5)
#loc59 = loc("CWE390_Error_Without_Action__sqrt_05.c":117:5)
#loc60 = loc("CWE390_Error_Without_Action__sqrt_05.c":117:47)
#loc61 = loc("CWE390_Error_Without_Action__sqrt_05.c":118:5)
#loc62 = loc("CWE390_Error_Without_Action__sqrt_05.c":121:5)
#loc63 = loc("CWE390_Error_Without_Action__sqrt_05.c":122:5)
#loc64 = loc("CWE390_Error_Without_Action__sqrt_05.c":122:46)
#loc65 = loc("CWE390_Error_Without_Action__sqrt_05.c":123:5)
#loc66 = loc("CWE390_Error_Without_Action__sqrt_05.c":125:12)
#loc67 = loc("CWE390_Error_Without_Action__sqrt_05.c":125:5)
#loc68 = loc("CWE390_Error_Without_Action__sqrt_05.c":25:1)
#loc69 = loc("CWE390_Error_Without_Action__sqrt_05.c":25:26)
#loc70 = loc("CWE390_Error_Without_Action__sqrt_05.c":57:19)
#loc71 = loc("CWE390_Error_Without_Action__sqrt_05.c":68:27)
#loc72 = loc("/usr/include/stdlib.h":756:1)
#loc73 = loc("/usr/include/stdlib.h":756:70)
#loc74 = loc("CWE390_Error_Without_Action__sqrt_05.c":52:1)
#loc75 = loc("CWE390_Error_Without_Action__sqrt_05.c":74:1)
#loc76 = loc("CWE390_Error_Without_Action__sqrt_05.c":62:13)
#loc77 = loc("CWE390_Error_Without_Action__sqrt_05.c":62:20)
#loc78 = loc("CWE390_Error_Without_Action__sqrt_05.c":54:5)
#loc79 = loc("CWE390_Error_Without_Action__sqrt_05.c":73:5)
#loc80 = loc("CWE390_Error_Without_Action__sqrt_05.c":54:8)
#loc81 = loc("CWE390_Error_Without_Action__sqrt_05.c":55:5)
#loc82 = loc("CWE390_Error_Without_Action__sqrt_05.c":58:5)
#loc83 = loc("CWE390_Error_Without_Action__sqrt_05.c":60:5)
#loc84 = loc("CWE390_Error_Without_Action__sqrt_05.c":57:9)
#loc85 = loc("CWE390_Error_Without_Action__sqrt_05.c":61:9)
#loc86 = loc("CWE390_Error_Without_Action__sqrt_05.c":72:9)
#loc87 = loc("CWE390_Error_Without_Action__sqrt_05.c":63:21)
#loc88 = loc("CWE390_Error_Without_Action__sqrt_05.c":63:13)
#loc89 = loc("CWE390_Error_Without_Action__sqrt_05.c":64:36)
#loc90 = loc("CWE390_Error_Without_Action__sqrt_05.c":64:50)
#loc91 = loc("CWE390_Error_Without_Action__sqrt_05.c":64:49)
#loc92 = loc("CWE390_Error_Without_Action__sqrt_05.c":64:13)
#loc93 = loc("CWE390_Error_Without_Action__sqrt_05.c":64:51)
#loc94 = loc("CWE390_Error_Without_Action__sqrt_05.c":66:13)
#loc95 = loc("CWE390_Error_Without_Action__sqrt_05.c":70:13)
#loc96 = loc("CWE390_Error_Without_Action__sqrt_05.c":66:17)
#loc97 = loc("CWE390_Error_Without_Action__sqrt_05.c":66:26)
#loc98 = loc("CWE390_Error_Without_Action__sqrt_05.c":67:13)
#loc99 = loc("CWE390_Error_Without_Action__sqrt_05.c":68:17)
#loc100 = loc("CWE390_Error_Without_Action__sqrt_05.c":69:17)
#loc101 = loc("CWE390_Error_Without_Action__sqrt_05.c":69:22)
#loc102 = loc("CWE390_Error_Without_Action__sqrt_05.c":71:29)
#loc103 = loc("CWE390_Error_Without_Action__sqrt_05.c":71:13)
#loc104 = loc("CWE390_Error_Without_Action__sqrt_05.c":77:1)
#loc105 = loc("CWE390_Error_Without_Action__sqrt_05.c":94:1)
#loc106 = loc("CWE390_Error_Without_Action__sqrt_05.c":82:13)
#loc107 = loc("CWE390_Error_Without_Action__sqrt_05.c":82:20)
#loc108 = loc("CWE390_Error_Without_Action__sqrt_05.c":79:5)
#loc109 = loc("CWE390_Error_Without_Action__sqrt_05.c":93:5)
#loc110 = loc("CWE390_Error_Without_Action__sqrt_05.c":79:8)
#loc111 = loc("CWE390_Error_Without_Action__sqrt_05.c":80:5)
#loc112 = loc("CWE390_Error_Without_Action__sqrt_05.c":81:9)
#loc113 = loc("CWE390_Error_Without_Action__sqrt_05.c":92:9)
#loc114 = loc("CWE390_Error_Without_Action__sqrt_05.c":83:21)
#loc115 = loc("CWE390_Error_Without_Action__sqrt_05.c":83:13)
#loc116 = loc("CWE390_Error_Without_Action__sqrt_05.c":84:36)
#loc117 = loc("CWE390_Error_Without_Action__sqrt_05.c":84:50)
#loc118 = loc("CWE390_Error_Without_Action__sqrt_05.c":84:49)
#loc119 = loc("CWE390_Error_Without_Action__sqrt_05.c":84:13)
#loc120 = loc("CWE390_Error_Without_Action__sqrt_05.c":84:51)
#loc121 = loc("CWE390_Error_Without_Action__sqrt_05.c":86:13)
#loc122 = loc("CWE390_Error_Without_Action__sqrt_05.c":90:13)
#loc123 = loc("CWE390_Error_Without_Action__sqrt_05.c":86:17)
#loc124 = loc("CWE390_Error_Without_Action__sqrt_05.c":86:26)
#loc125 = loc("CWE390_Error_Without_Action__sqrt_05.c":87:13)
#loc126 = loc("CWE390_Error_Without_Action__sqrt_05.c":88:27)
#loc127 = loc("CWE390_Error_Without_Action__sqrt_05.c":88:17)
#loc128 = loc("CWE390_Error_Without_Action__sqrt_05.c":89:17)
#loc129 = loc("CWE390_Error_Without_Action__sqrt_05.c":89:22)
#loc130 = loc("CWE390_Error_Without_Action__sqrt_05.c":91:29)
#loc131 = loc("CWE390_Error_Without_Action__sqrt_05.c":91:13)
#loc132 = loc(fused[#loc1, #loc2])
#loc133 = loc(fused[#loc3, #loc4])
#loc134 = loc(fused[#loc6, #loc7])
#loc135 = loc(fused[#loc8, #loc9])
#loc136 = loc(fused[#loc10, #loc11])
#loc137 = loc(fused[#loc12, #loc13])
#loc138 = loc(fused[#loc15, #loc13])
#loc139 = loc(fused[#loc16, #loc17])
#loc140 = loc(fused[#loc19, #loc18])
#loc141 = loc(fused[#loc23, #loc24])
#loc142 = loc(fused[#loc25, #loc26])
#loc143 = loc(fused[#loc27, #loc28])
#loc144 = loc(fused[#loc29, #loc26])
#loc145 = loc(fused[#loc32, #loc33])
#loc146 = loc(fused[#loc34, #loc35])
#loc147 = loc(fused[#loc36, #loc37])
#loc148 = loc(fused[#loc38, #loc39])
#loc149 = loc(fused[#loc40, #loc41])
#loc150 = loc(fused[#loc42, #loc43])
#loc151 = loc(fused[#loc48, #loc49])
#loc154 = loc(fused[#loc59, #loc60])
#loc155 = loc(fused[#loc63, #loc64])
#loc156 = loc(fused[#loc67, #loc66])
#loc157 = loc(fused[#loc68, #loc69])
#loc158 = loc(fused[#loc72, #loc73])
#loc159 = loc(fused[#loc74, #loc75])
#loc160 = loc(fused[#loc76, #loc77])
#loc161 = loc(fused[#loc78, #loc79])
#loc162 = loc(fused[#loc81, #loc82, #loc83, #loc79])
#loc163 = loc(fused[#loc85, #loc86])
#loc164 = loc(fused[#loc88, #loc87])
#loc165 = loc(fused[#loc92, #loc93])
#loc166 = loc(fused[#loc94, #loc95])
#loc167 = loc(fused[#loc96, #loc97])
#loc168 = loc(fused[#loc98, #loc95])
#loc169 = loc(fused[#loc104, #loc105])
#loc170 = loc(fused[#loc106, #loc107])
#loc171 = loc(fused[#loc108, #loc109])
#loc172 = loc(fused[#loc111, #loc109])
#loc173 = loc(fused[#loc112, #loc113])
#loc174 = loc(fused[#loc115, #loc114])
#loc175 = loc(fused[#loc119, #loc120])
#loc176 = loc(fused[#loc121, #loc122])
#loc177 = loc(fused[#loc123, #loc124])
#loc178 = loc(fused[#loc125, #loc122])
