!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":135:10)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":135:14)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":135:20)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":135:32)
#loc286 = loc(fused[#loc94, #loc95])
#loc287 = loc(fused[#loc96, #loc97])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc250)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc251)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc252)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc253)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc254)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc256)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc15)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc16)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc16)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc257)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc258)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc259)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc260)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc24)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc24)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc262)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc26)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc28)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
      } loc(#loc263)
    } loc(#loc261)
    cir.scope {
      %8 = cir.const #cir.int<1> : !s32i loc(#loc31)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc31)
      cir.if %9 {
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc33)
        %12 = cir.const #cir.int<65> : !s32i loc(#loc34)
        %13 = cir.const #cir.int<100> : !s32i loc(#loc35)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc36)
        %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc35)
        %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc35)
        cir.libc.memset %16 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc266)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc39)
        %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc39)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
        %20 = cir.const #cir.int<100> : !s32i loc(#loc41)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc42)
        %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc41)
        %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc43)
        cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc267)
      } loc(#loc265)
    } loc(#loc264)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc269)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc270)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc271)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc269)
      cir.store %11, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc269)
      %12 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc51)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
      %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc51)
      cir.store %14, %10 : !u64i, !cir.ptr<!u64i> loc(#loc272)
      cir.scope {
        %26 = cir.const #cir.int<0> : !s32i loc(#loc57)
        %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc57)
        cir.store %27, %9 : !u64i, !cir.ptr<!u64i> loc(#loc274)
        cir.for : cond {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc59)
          %29 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc60)
          %30 = cir.cmp(lt, %28, %29) : !u64i, !cir.bool loc(#loc275)
          cir.condition(%30) loc(#loc61)
        } body {
          cir.scope {
            %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
            %29 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc64)
            %30 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc65)
            %31 = cir.load %30 : !cir.ptr<!s8i>, !s8i loc(#loc63)
            %32 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc66)
            %33 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc67)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc67)
            cir.store %31, %34 : !s8i, !cir.ptr<!s8i> loc(#loc277)
          } loc(#loc276)
          cir.yield loc(#loc56)
        } step {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc68)
          %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc69)
          cir.store %29, %9 : !u64i, !cir.ptr<!u64i> loc(#loc278)
          cir.yield loc(#loc273)
        } loc(#loc273)
      } loc(#loc273)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc70)
      %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc70)
      %17 = cir.const #cir.int<50> : !s32i loc(#loc71)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc72)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc71)
      %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc73)
      %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc73)
      cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc279)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc75)
      %23 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc76)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc77)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc76)
    } loc(#loc268)
    cir.return loc(#loc12)
  } loc(#loc255)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc281)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc80)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc282)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc82)
    cir.return loc(#loc79)
  } loc(#loc280)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc283)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc284)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc88)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc91)
  cir.func @main(%arg0: !s32i loc(fused[#loc94, #loc95]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc96, #loc97])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc286)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc287)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc93)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc98)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc99)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc100)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc100)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc101)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc88)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc88)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc288)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04_good() : () -> () loc(#loc103)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc89)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc90)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc90)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc289)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04_bad() : () -> () loc(#loc107)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc91)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc109)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc110)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc290)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc290)
    cir.return %17 : !s32i loc(#loc290)
  } loc(#loc285)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc112)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc292)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc117)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc118)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc118)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc293)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc294)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc117)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc295)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc296)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc126)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc126)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc298)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc128)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc129)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc130)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc128)
      } loc(#loc299)
    } loc(#loc297)
    cir.scope {
      %8 = cir.const #cir.int<0> : !s32i loc(#loc133)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc133)
      cir.if %9 {
        %10 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc112)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc112)
        cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc137)
      } else {
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc138)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc138)
        %12 = cir.const #cir.int<65> : !s32i loc(#loc139)
        %13 = cir.const #cir.int<50> : !s32i loc(#loc140)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc141)
        %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc140)
        %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc140)
        cir.libc.memset %16 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc302)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc144)
        %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc144)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
        %20 = cir.const #cir.int<50> : !s32i loc(#loc146)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc147)
        %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc146)
        %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc148)
        cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc303)
      } loc(#loc301)
    } loc(#loc300)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc305)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc306)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc307)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc305)
      cir.store %11, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc305)
      %12 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc156)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
      %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc156)
      cir.store %14, %10 : !u64i, !cir.ptr<!u64i> loc(#loc308)
      cir.scope {
        %26 = cir.const #cir.int<0> : !s32i loc(#loc162)
        %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc162)
        cir.store %27, %9 : !u64i, !cir.ptr<!u64i> loc(#loc310)
        cir.for : cond {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc164)
          %29 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc165)
          %30 = cir.cmp(lt, %28, %29) : !u64i, !cir.bool loc(#loc311)
          cir.condition(%30) loc(#loc166)
        } body {
          cir.scope {
            %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc168)
            %29 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc169)
            %30 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc170)
            %31 = cir.load %30 : !cir.ptr<!s8i>, !s8i loc(#loc168)
            %32 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc171)
            %33 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc172)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc172)
            cir.store %31, %34 : !s8i, !cir.ptr<!s8i> loc(#loc313)
          } loc(#loc312)
          cir.yield loc(#loc161)
        } step {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc173)
          %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc174)
          cir.store %29, %9 : !u64i, !cir.ptr<!u64i> loc(#loc314)
          cir.yield loc(#loc309)
        } loc(#loc309)
      } loc(#loc309)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc175)
      %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc175)
      %17 = cir.const #cir.int<50> : !s32i loc(#loc176)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc177)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc176)
      %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc178)
      %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc178)
      cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc315)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc179)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc180)
      %23 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc181)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc182)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc182)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc181)
    } loc(#loc304)
    cir.return loc(#loc114)
  } loc(#loc291)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc317)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc187)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc188)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc188)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc318)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc319)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc187)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc320)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc321)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc195)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc196)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc196)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc323)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc198)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc199)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc200)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc198)
      } loc(#loc324)
    } loc(#loc322)
    cir.scope {
      %8 = cir.const #cir.int<1> : !s32i loc(#loc203)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc203)
      cir.if %9 {
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc205)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc205)
        %12 = cir.const #cir.int<65> : !s32i loc(#loc206)
        %13 = cir.const #cir.int<50> : !s32i loc(#loc207)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc208)
        %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc207)
        %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc207)
        cir.libc.memset %16 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc327)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc211)
        %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc211)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc212)
        %20 = cir.const #cir.int<50> : !s32i loc(#loc213)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc214)
        %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc213)
        %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc215)
        cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc328)
      } loc(#loc326)
    } loc(#loc325)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc330)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc331)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc332)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc330)
      cir.store %11, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc330)
      %12 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc223)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc224)
      %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc223)
      cir.store %14, %10 : !u64i, !cir.ptr<!u64i> loc(#loc333)
      cir.scope {
        %26 = cir.const #cir.int<0> : !s32i loc(#loc229)
        %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc229)
        cir.store %27, %9 : !u64i, !cir.ptr<!u64i> loc(#loc335)
        cir.for : cond {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc231)
          %29 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc232)
          %30 = cir.cmp(lt, %28, %29) : !u64i, !cir.bool loc(#loc336)
          cir.condition(%30) loc(#loc233)
        } body {
          cir.scope {
            %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc235)
            %29 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc236)
            %30 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc237)
            %31 = cir.load %30 : !cir.ptr<!s8i>, !s8i loc(#loc235)
            %32 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc238)
            %33 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc239)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc239)
            cir.store %31, %34 : !s8i, !cir.ptr<!s8i> loc(#loc338)
          } loc(#loc337)
          cir.yield loc(#loc228)
        } step {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc240)
          %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc241)
          cir.store %29, %9 : !u64i, !cir.ptr<!u64i> loc(#loc339)
          cir.yield loc(#loc334)
        } loc(#loc334)
      } loc(#loc334)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc242)
      %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc242)
      %17 = cir.const #cir.int<50> : !s32i loc(#loc243)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc244)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc243)
      %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc245)
      %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc245)
      cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc340)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc246)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc247)
      %23 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc248)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc249)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc249)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc248)
    } loc(#loc329)
    cir.return loc(#loc184)
  } loc(#loc316)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":30:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":54:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":32:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":32:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":33:20)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":33:27)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":33:31)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":33:42)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":33:43)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":33:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":34:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":34:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":34:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":34:17)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":34:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":34:24)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":34:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":34:29)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":35:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":40:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":35:8)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":36:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":38:16)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":38:22)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":38:27)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":38:31)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":38:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":38:32)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":39:23)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":39:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":39:14)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":39:18)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":39:19)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":41:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":53:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":42:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":42:25)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":43:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":43:16)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":43:19)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":44:19)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":44:26)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":44:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":44:30)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":46:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":49:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":46:18)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":46:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":46:21)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":46:25)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":46:23)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":47:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":48:23)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":48:28)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":48:29)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":48:18)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":48:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":46:35)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":46:34)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":50:22)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":50:14)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":50:17)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":50:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":51:19)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":51:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":52:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":52:14)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":119:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":123:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":121:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":121:14)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":122:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":122:14)
#loc84 = loc("/usr/include/stdlib.h":575:1)
#loc85 = loc("/usr/include/stdlib.h":575:41)
#loc86 = loc("/usr/include/time.h":76:1)
#loc87 = loc("/usr/include/time.h":76:38)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":140:15)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":142:15)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":145:15)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":147:15)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":135:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":150:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":136:1)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":138:27)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":138:22)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":138:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":140:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":141:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":141:67)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":142:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":145:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":146:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":146:66)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":147:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":149:12)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":149:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":69:19)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":61:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":90:1)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":63:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":63:12)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":64:20)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":64:27)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":64:31)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":64:42)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":64:43)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":64:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":65:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":65:33)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":65:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":65:17)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":65:23)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":65:24)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":65:30)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":65:29)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":66:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":76:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":66:8)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":67:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":70:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":72:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":69:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":74:16)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":74:22)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":74:27)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":74:30)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":74:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":74:31)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":75:22)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":75:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":75:14)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":75:17)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":75:18)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":77:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":89:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":78:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":78:25)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":79:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":79:16)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":79:19)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":80:19)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":80:26)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":80:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":80:30)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":82:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":85:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":82:18)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":82:14)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":82:21)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":82:25)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":82:23)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":83:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":84:23)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":84:28)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":84:29)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":84:18)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":84:13)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":82:35)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":82:34)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":86:22)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":86:14)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":86:17)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":86:9)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":87:19)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":87:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":88:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":88:14)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":93:1)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":117:1)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":95:5)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":95:12)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":96:20)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":96:27)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":96:31)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":96:42)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":96:43)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":96:5)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":97:5)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":97:33)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":97:9)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":97:17)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":97:23)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":97:24)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":97:30)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":97:29)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":98:5)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":103:5)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":98:8)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":99:5)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":101:16)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":101:22)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":101:27)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":101:30)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":101:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":101:31)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":102:22)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":102:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":102:14)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":102:17)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":102:18)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":104:5)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":116:5)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":105:9)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":105:25)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":106:9)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":106:16)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":106:19)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":107:19)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":107:26)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":107:9)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":107:30)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":109:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":112:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":109:18)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":109:14)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":109:21)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":109:25)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":109:23)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":110:9)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":111:23)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":111:28)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":111:29)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":111:18)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":111:13)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":109:35)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":109:34)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":113:22)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":113:14)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":113:17)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":113:9)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":114:19)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":114:9)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":115:9)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":115:14)
#loc250 = loc(fused[#loc1, #loc2])
#loc251 = loc(fused[#loc3, #loc4])
#loc252 = loc(fused[#loc5, #loc6])
#loc253 = loc(fused[#loc7, #loc8])
#loc254 = loc(fused[#loc9, #loc10])
#loc255 = loc(fused[#loc11, #loc12])
#loc256 = loc(fused[#loc13, #loc14])
#loc257 = loc(fused[#loc17, #loc18])
#loc258 = loc(fused[#loc16, #loc18])
#loc259 = loc(fused[#loc15, #loc19])
#loc260 = loc(fused[#loc20, #loc19])
#loc261 = loc(fused[#loc21, #loc22])
#loc262 = loc(fused[#loc23, #loc24])
#loc263 = loc(fused[#loc25, #loc22])
#loc264 = loc(fused[#loc29, #loc30])
#loc265 = loc(fused[#loc32, #loc30])
#loc266 = loc(fused[#loc37, #loc38])
#loc267 = loc(fused[#loc40, #loc39])
#loc268 = loc(fused[#loc44, #loc45])
#loc269 = loc(fused[#loc46, #loc47])
#loc270 = loc(fused[#loc48, #loc49])
#loc271 = loc(fused[#loc48, #loc50])
#loc272 = loc(fused[#loc53, #loc54])
#loc273 = loc(fused[#loc55, #loc56])
#loc274 = loc(fused[#loc58, #loc57])
#loc275 = loc(fused[#loc59, #loc60])
#loc276 = loc(fused[#loc62, #loc56])
#loc277 = loc(fused[#loc67, #loc65])
#loc278 = loc(fused[#loc69, #loc68])
#loc279 = loc(fused[#loc73, #loc70])
#loc280 = loc(fused[#loc78, #loc79])
#loc281 = loc(fused[#loc80, #loc81])
#loc282 = loc(fused[#loc82, #loc83])
#loc283 = loc(fused[#loc84, #loc85])
#loc284 = loc(fused[#loc86, #loc87])
#loc285 = loc(fused[#loc92, #loc93])
#loc288 = loc(fused[#loc103, #loc104])
#loc289 = loc(fused[#loc107, #loc108])
#loc290 = loc(fused[#loc111, #loc110])
#loc291 = loc(fused[#loc113, #loc114])
#loc292 = loc(fused[#loc115, #loc116])
#loc293 = loc(fused[#loc119, #loc120])
#loc294 = loc(fused[#loc118, #loc120])
#loc295 = loc(fused[#loc117, #loc121])
#loc296 = loc(fused[#loc122, #loc121])
#loc297 = loc(fused[#loc123, #loc124])
#loc298 = loc(fused[#loc125, #loc126])
#loc299 = loc(fused[#loc127, #loc124])
#loc300 = loc(fused[#loc131, #loc132])
#loc301 = loc(fused[#loc134, #loc135, #loc136, #loc132])
#loc302 = loc(fused[#loc142, #loc143])
#loc303 = loc(fused[#loc145, #loc144])
#loc304 = loc(fused[#loc149, #loc150])
#loc305 = loc(fused[#loc151, #loc152])
#loc306 = loc(fused[#loc153, #loc154])
#loc307 = loc(fused[#loc153, #loc155])
#loc308 = loc(fused[#loc158, #loc159])
#loc309 = loc(fused[#loc160, #loc161])
#loc310 = loc(fused[#loc163, #loc162])
#loc311 = loc(fused[#loc164, #loc165])
#loc312 = loc(fused[#loc167, #loc161])
#loc313 = loc(fused[#loc172, #loc170])
#loc314 = loc(fused[#loc174, #loc173])
#loc315 = loc(fused[#loc178, #loc175])
#loc316 = loc(fused[#loc183, #loc184])
#loc317 = loc(fused[#loc185, #loc186])
#loc318 = loc(fused[#loc189, #loc190])
#loc319 = loc(fused[#loc188, #loc190])
#loc320 = loc(fused[#loc187, #loc191])
#loc321 = loc(fused[#loc192, #loc191])
#loc322 = loc(fused[#loc193, #loc194])
#loc323 = loc(fused[#loc195, #loc196])
#loc324 = loc(fused[#loc197, #loc194])
#loc325 = loc(fused[#loc201, #loc202])
#loc326 = loc(fused[#loc204, #loc202])
#loc327 = loc(fused[#loc209, #loc210])
#loc328 = loc(fused[#loc212, #loc211])
#loc329 = loc(fused[#loc216, #loc217])
#loc330 = loc(fused[#loc218, #loc219])
#loc331 = loc(fused[#loc220, #loc221])
#loc332 = loc(fused[#loc220, #loc222])
#loc333 = loc(fused[#loc225, #loc226])
#loc334 = loc(fused[#loc227, #loc228])
#loc335 = loc(fused[#loc230, #loc229])
#loc336 = loc(fused[#loc231, #loc232])
#loc337 = loc(fused[#loc234, #loc228])
#loc338 = loc(fused[#loc239, #loc237])
#loc339 = loc(fused[#loc241, #loc240])
#loc340 = loc(fused[#loc245, #loc242])
