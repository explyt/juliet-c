!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_realloc_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @realloc(!cir.ptr<!void>, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc114)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc115)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc116)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"A String\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc117)
  cir.func no_proto @CWE401_Memory_Leak__char_realloc_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc119)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc14)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc120)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc18)
        cir.condition(%3) loc(#loc18)
      } do {
        cir.scope {
          %2 = cir.get_global @realloc : !cir.ptr<!cir.func<(!cir.ptr<!void>, !u64i) -> !cir.ptr<!void>>> loc(#loc20)
          %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc21)
          %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc21)
          %5 = cir.const #cir.int<100> : !s32i loc(#loc22)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc22)
          %7 = cir.const #cir.int<1> : !u64i loc(#loc123)
          %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc124)
          %9 = cir.call @realloc(%4, %8) : (!cir.ptr<!void>, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc125)
          cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc126)
          cir.scope {
            %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
            %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc30)
            %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc128)
            cir.if %20 {
              %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc32)
              %22 = cir.const #cir.int<1> : !s32i loc(#loc33)
              %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc34)
              cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
            } loc(#loc129)
          } loc(#loc127)
          %11 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc35)
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
          %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc7)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc7)
          %15 = cir.call @strcpy(%12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc35)
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
          cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc38)
          cir.break loc(#loc39)
        } loc(#loc122)
        cir.yield loc(#loc17)
      } loc(#loc121)
    } loc(#loc121)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc42)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc42)
        cir.condition(%3) loc(#loc42)
      } do {
        cir.scope {
          cir.break loc(#loc44)
        } loc(#loc131)
        cir.yield loc(#loc41)
      } loc(#loc130)
    } loc(#loc130)
    cir.return loc(#loc11)
  } loc(#loc118)
  cir.func no_proto @CWE401_Memory_Leak__char_realloc_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc133)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc134)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc49)
    cir.return loc(#loc46)
  } loc(#loc132)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc135)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc137)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc57)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc138)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc61)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc61)
        cir.condition(%3) loc(#loc61)
      } do {
        cir.scope {
          %2 = cir.get_global @realloc : !cir.ptr<!cir.func<(!cir.ptr<!void>, !u64i) -> !cir.ptr<!void>>> loc(#loc63)
          %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
          %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc64)
          %5 = cir.const #cir.int<100> : !s32i loc(#loc65)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc65)
          %7 = cir.const #cir.int<1> : !u64i loc(#loc141)
          %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc142)
          %9 = cir.call @realloc(%4, %8) : (!cir.ptr<!void>, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc63)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc143)
          cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc144)
          cir.scope {
            %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
            %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc73)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc73)
            %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc146)
            cir.if %20 {
              %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc75)
              %22 = cir.const #cir.int<1> : !s32i loc(#loc76)
              %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc77)
              cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc75)
            } loc(#loc147)
          } loc(#loc145)
          %11 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc78)
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
          %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc80)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc80)
          %15 = cir.call @strcpy(%12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc78)
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc81)
          cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc82)
          cir.break loc(#loc83)
        } loc(#loc140)
        cir.yield loc(#loc60)
      } loc(#loc139)
    } loc(#loc139)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc86)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc86)
        cir.condition(%3) loc(#loc86)
      } do {
        cir.scope {
          %2 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc88)
          %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
          %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc89)
          cir.call @free(%4) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc88)
          cir.break loc(#loc90)
        } loc(#loc149)
        cir.yield loc(#loc85)
      } loc(#loc148)
    } loc(#loc148)
    cir.return loc(#loc54)
  } loc(#loc136)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc151)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc95)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc152)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc99)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc99)
        cir.condition(%3) loc(#loc99)
      } do {
        cir.scope {
          %2 = cir.const #cir.int<100> : !s32i loc(#loc101)
          %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc101)
          %4 = cir.const #cir.int<1> : !u64i loc(#loc101)
          %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc101)
          %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc101)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc101)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc101)
          cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc155)
          %9 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc103)
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc104)
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc105)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc105)
          %13 = cir.call @strcpy(%10, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc103)
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc106)
          cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc107)
          cir.break loc(#loc108)
        } loc(#loc154)
        cir.yield loc(#loc98)
      } loc(#loc153)
    } loc(#loc153)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc111)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc111)
        cir.condition(%3) loc(#loc111)
      } do {
        cir.scope {
          cir.break loc(#loc113)
        } loc(#loc157)
        cir.yield loc(#loc110)
      } loc(#loc156)
    } loc(#loc156)
    cir.return loc(#loc92)
  } loc(#loc150)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_realloc_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":683:1)
#loc2 = loc("/usr/include/stdlib.h":684:14)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":141:1)
#loc6 = loc("/usr/include/string.h":142:14)
#loc7 = loc("CWE401_Memory_Leak__char_realloc_16.c":34:22)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE401_Memory_Leak__char_realloc_16.c":24:1)
#loc11 = loc("CWE401_Memory_Leak__char_realloc_16.c":44:1)
#loc12 = loc("CWE401_Memory_Leak__char_realloc_16.c":26:5)
#loc13 = loc("CWE401_Memory_Leak__char_realloc_16.c":26:12)
#loc14 = loc("CWE401_Memory_Leak__char_realloc_16.c":27:12)
#loc15 = loc("CWE401_Memory_Leak__char_realloc_16.c":27:5)
#loc16 = loc("CWE401_Memory_Leak__char_realloc_16.c":28:5)
#loc17 = loc("CWE401_Memory_Leak__char_realloc_16.c":37:5)
#loc18 = loc("CWE401_Memory_Leak__char_realloc_16.c":28:11)
#loc19 = loc("CWE401_Memory_Leak__char_realloc_16.c":29:5)
#loc20 = loc("CWE401_Memory_Leak__char_realloc_16.c":31:24)
#loc21 = loc("CWE401_Memory_Leak__char_realloc_16.c":31:32)
#loc22 = loc("CWE401_Memory_Leak__char_realloc_16.c":31:38)
#loc23 = loc("CWE401_Memory_Leak__char_realloc_16.c":31:42)
#loc24 = loc("CWE401_Memory_Leak__char_realloc_16.c":31:53)
#loc25 = loc("CWE401_Memory_Leak__char_realloc_16.c":31:54)
#loc26 = loc("CWE401_Memory_Leak__char_realloc_16.c":31:9)
#loc27 = loc("CWE401_Memory_Leak__char_realloc_16.c":32:9)
#loc28 = loc("CWE401_Memory_Leak__char_realloc_16.c":32:37)
#loc29 = loc("CWE401_Memory_Leak__char_realloc_16.c":32:13)
#loc30 = loc("CWE401_Memory_Leak__char_realloc_16.c":32:21)
#loc31 = loc("CWE401_Memory_Leak__char_realloc_16.c":32:27)
#loc32 = loc("CWE401_Memory_Leak__char_realloc_16.c":32:28)
#loc33 = loc("CWE401_Memory_Leak__char_realloc_16.c":32:34)
#loc34 = loc("CWE401_Memory_Leak__char_realloc_16.c":32:33)
#loc35 = loc("CWE401_Memory_Leak__char_realloc_16.c":34:9)
#loc36 = loc("CWE401_Memory_Leak__char_realloc_16.c":34:16)
#loc37 = loc("CWE401_Memory_Leak__char_realloc_16.c":35:19)
#loc38 = loc("CWE401_Memory_Leak__char_realloc_16.c":35:9)
#loc39 = loc("CWE401_Memory_Leak__char_realloc_16.c":36:9)
#loc40 = loc("CWE401_Memory_Leak__char_realloc_16.c":38:5)
#loc41 = loc("CWE401_Memory_Leak__char_realloc_16.c":43:5)
#loc42 = loc("CWE401_Memory_Leak__char_realloc_16.c":38:11)
#loc43 = loc("CWE401_Memory_Leak__char_realloc_16.c":39:5)
#loc44 = loc("CWE401_Memory_Leak__char_realloc_16.c":42:9)
#loc45 = loc("CWE401_Memory_Leak__char_realloc_16.c":95:1)
#loc46 = loc("CWE401_Memory_Leak__char_realloc_16.c":99:1)
#loc47 = loc("CWE401_Memory_Leak__char_realloc_16.c":97:5)
#loc48 = loc("CWE401_Memory_Leak__char_realloc_16.c":97:13)
#loc49 = loc("CWE401_Memory_Leak__char_realloc_16.c":98:5)
#loc50 = loc("CWE401_Memory_Leak__char_realloc_16.c":98:13)
#loc51 = loc("/usr/include/stdlib.h":687:1)
#loc52 = loc("/usr/include/stdlib.h":687:32)
#loc53 = loc("CWE401_Memory_Leak__char_realloc_16.c":51:1)
#loc54 = loc("CWE401_Memory_Leak__char_realloc_16.c":71:1)
#loc55 = loc("CWE401_Memory_Leak__char_realloc_16.c":53:5)
#loc56 = loc("CWE401_Memory_Leak__char_realloc_16.c":53:12)
#loc57 = loc("CWE401_Memory_Leak__char_realloc_16.c":54:12)
#loc58 = loc("CWE401_Memory_Leak__char_realloc_16.c":54:5)
#loc59 = loc("CWE401_Memory_Leak__char_realloc_16.c":55:5)
#loc60 = loc("CWE401_Memory_Leak__char_realloc_16.c":64:5)
#loc61 = loc("CWE401_Memory_Leak__char_realloc_16.c":55:11)
#loc62 = loc("CWE401_Memory_Leak__char_realloc_16.c":56:5)
#loc63 = loc("CWE401_Memory_Leak__char_realloc_16.c":58:24)
#loc64 = loc("CWE401_Memory_Leak__char_realloc_16.c":58:32)
#loc65 = loc("CWE401_Memory_Leak__char_realloc_16.c":58:38)
#loc66 = loc("CWE401_Memory_Leak__char_realloc_16.c":58:42)
#loc67 = loc("CWE401_Memory_Leak__char_realloc_16.c":58:53)
#loc68 = loc("CWE401_Memory_Leak__char_realloc_16.c":58:54)
#loc69 = loc("CWE401_Memory_Leak__char_realloc_16.c":58:9)
#loc70 = loc("CWE401_Memory_Leak__char_realloc_16.c":59:9)
#loc71 = loc("CWE401_Memory_Leak__char_realloc_16.c":59:37)
#loc72 = loc("CWE401_Memory_Leak__char_realloc_16.c":59:13)
#loc73 = loc("CWE401_Memory_Leak__char_realloc_16.c":59:21)
#loc74 = loc("CWE401_Memory_Leak__char_realloc_16.c":59:27)
#loc75 = loc("CWE401_Memory_Leak__char_realloc_16.c":59:28)
#loc76 = loc("CWE401_Memory_Leak__char_realloc_16.c":59:34)
#loc77 = loc("CWE401_Memory_Leak__char_realloc_16.c":59:33)
#loc78 = loc("CWE401_Memory_Leak__char_realloc_16.c":61:9)
#loc79 = loc("CWE401_Memory_Leak__char_realloc_16.c":61:16)
#loc80 = loc("CWE401_Memory_Leak__char_realloc_16.c":61:22)
#loc81 = loc("CWE401_Memory_Leak__char_realloc_16.c":62:19)
#loc82 = loc("CWE401_Memory_Leak__char_realloc_16.c":62:9)
#loc83 = loc("CWE401_Memory_Leak__char_realloc_16.c":63:9)
#loc84 = loc("CWE401_Memory_Leak__char_realloc_16.c":65:5)
#loc85 = loc("CWE401_Memory_Leak__char_realloc_16.c":70:5)
#loc86 = loc("CWE401_Memory_Leak__char_realloc_16.c":65:11)
#loc87 = loc("CWE401_Memory_Leak__char_realloc_16.c":66:5)
#loc88 = loc("CWE401_Memory_Leak__char_realloc_16.c":68:9)
#loc89 = loc("CWE401_Memory_Leak__char_realloc_16.c":68:14)
#loc90 = loc("CWE401_Memory_Leak__char_realloc_16.c":69:9)
#loc91 = loc("CWE401_Memory_Leak__char_realloc_16.c":74:1)
#loc92 = loc("CWE401_Memory_Leak__char_realloc_16.c":93:1)
#loc93 = loc("CWE401_Memory_Leak__char_realloc_16.c":76:5)
#loc94 = loc("CWE401_Memory_Leak__char_realloc_16.c":76:12)
#loc95 = loc("CWE401_Memory_Leak__char_realloc_16.c":77:12)
#loc96 = loc("CWE401_Memory_Leak__char_realloc_16.c":77:5)
#loc97 = loc("CWE401_Memory_Leak__char_realloc_16.c":78:5)
#loc98 = loc("CWE401_Memory_Leak__char_realloc_16.c":86:5)
#loc99 = loc("CWE401_Memory_Leak__char_realloc_16.c":78:11)
#loc100 = loc("CWE401_Memory_Leak__char_realloc_16.c":79:5)
#loc101 = loc("CWE401_Memory_Leak__char_realloc_16.c":81:24)
#loc102 = loc("CWE401_Memory_Leak__char_realloc_16.c":81:9)
#loc103 = loc("CWE401_Memory_Leak__char_realloc_16.c":83:9)
#loc104 = loc("CWE401_Memory_Leak__char_realloc_16.c":83:16)
#loc105 = loc("CWE401_Memory_Leak__char_realloc_16.c":83:22)
#loc106 = loc("CWE401_Memory_Leak__char_realloc_16.c":84:19)
#loc107 = loc("CWE401_Memory_Leak__char_realloc_16.c":84:9)
#loc108 = loc("CWE401_Memory_Leak__char_realloc_16.c":85:9)
#loc109 = loc("CWE401_Memory_Leak__char_realloc_16.c":87:5)
#loc110 = loc("CWE401_Memory_Leak__char_realloc_16.c":92:5)
#loc111 = loc("CWE401_Memory_Leak__char_realloc_16.c":87:11)
#loc112 = loc("CWE401_Memory_Leak__char_realloc_16.c":88:5)
#loc113 = loc("CWE401_Memory_Leak__char_realloc_16.c":91:9)
#loc114 = loc(fused[#loc1, #loc2])
#loc115 = loc(fused[#loc3, #loc4])
#loc116 = loc(fused[#loc5, #loc6])
#loc117 = loc(fused[#loc8, #loc9])
#loc118 = loc(fused[#loc10, #loc11])
#loc119 = loc(fused[#loc12, #loc13])
#loc120 = loc(fused[#loc15, #loc14])
#loc121 = loc(fused[#loc16, #loc17])
#loc122 = loc(fused[#loc19, #loc17])
#loc123 = loc(fused[#loc23, #loc24])
#loc124 = loc(fused[#loc22, #loc24])
#loc125 = loc(fused[#loc20, #loc25])
#loc126 = loc(fused[#loc26, #loc25])
#loc127 = loc(fused[#loc27, #loc28])
#loc128 = loc(fused[#loc29, #loc30])
#loc129 = loc(fused[#loc31, #loc28])
#loc130 = loc(fused[#loc40, #loc41])
#loc131 = loc(fused[#loc43, #loc41])
#loc132 = loc(fused[#loc45, #loc46])
#loc133 = loc(fused[#loc47, #loc48])
#loc134 = loc(fused[#loc49, #loc50])
#loc135 = loc(fused[#loc51, #loc52])
#loc136 = loc(fused[#loc53, #loc54])
#loc137 = loc(fused[#loc55, #loc56])
#loc138 = loc(fused[#loc58, #loc57])
#loc139 = loc(fused[#loc59, #loc60])
#loc140 = loc(fused[#loc62, #loc60])
#loc141 = loc(fused[#loc66, #loc67])
#loc142 = loc(fused[#loc65, #loc67])
#loc143 = loc(fused[#loc63, #loc68])
#loc144 = loc(fused[#loc69, #loc68])
#loc145 = loc(fused[#loc70, #loc71])
#loc146 = loc(fused[#loc72, #loc73])
#loc147 = loc(fused[#loc74, #loc71])
#loc148 = loc(fused[#loc84, #loc85])
#loc149 = loc(fused[#loc87, #loc85])
#loc150 = loc(fused[#loc91, #loc92])
#loc151 = loc(fused[#loc93, #loc94])
#loc152 = loc(fused[#loc96, #loc95])
#loc153 = loc(fused[#loc97, #loc98])
#loc154 = loc(fused[#loc100, #loc98])
#loc155 = loc(fused[#loc102, #loc101])
#loc156 = loc(fused[#loc109, #loc110])
#loc157 = loc(fused[#loc112, #loc110])
