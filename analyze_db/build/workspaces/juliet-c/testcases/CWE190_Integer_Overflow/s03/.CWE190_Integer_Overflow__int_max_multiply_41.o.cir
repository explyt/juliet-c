!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":22:21)
#loc6 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":22:25)
#loc39 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":68:25)
#loc40 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":68:29)
#loc74 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":47:25)
#loc75 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":47:29)
#loc99 = loc(fused[#loc5, #loc6])
#loc113 = loc(fused[#loc39, #loc40])
#loc127 = loc(fused[#loc74, #loc75])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc97)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc99)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
      %3 = cir.cmp(gt, %1, %2) : !s32i, !cir.bool loc(#loc101)
      cir.if %3 {
        %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc103)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc15)
        %6 = cir.const #cir.int<2> : !s32i loc(#loc14)
        %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc15)
        cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc103)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc17)
      } loc(#loc102)
    } loc(#loc100)
    cir.return loc(#loc4)
  } loc(#loc98)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_multiply_41_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc105)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc22)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc107)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    cir.call @badSink(%3) : (!s32i) -> () loc(#loc27)
    cir.return loc(#loc19)
  } loc(#loc104)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_multiply_41_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc109)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc110)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc108)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc111)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc36)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc39, #loc40])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc113)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc41)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc44)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc45)
      %3 = cir.cmp(gt, %1, %2) : !s32i, !cir.bool loc(#loc115)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc50)
          %6 = cir.const #cir.int<2> : !s32i loc(#loc51)
          %7 = cir.binop(div, %5, %6) : !s32i loc(#loc118)
          %8 = cir.cmp(lt, %4, %7) : !s32i, !cir.bool loc(#loc119)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc121)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc58)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc57)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc58)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc121)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc59)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc60)
          } else {
            %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc36)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc36)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc61)
          } loc(#loc120)
        } loc(#loc117)
      } loc(#loc116)
    } loc(#loc114)
    cir.return loc(#loc38)
  } loc(#loc112)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc123)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc68)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    cir.call @goodB2GSink(%3) : (!s32i) -> () loc(#loc71)
    cir.return loc(#loc63)
  } loc(#loc122)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc74, #loc75])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc127)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc76)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc80)
      %3 = cir.cmp(gt, %1, %2) : !s32i, !cir.bool loc(#loc129)
      cir.if %3 {
        %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc131)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc84)
        %6 = cir.const #cir.int<2> : !s32i loc(#loc83)
        %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc84)
        cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc131)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc85)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc86)
      } loc(#loc130)
    } loc(#loc128)
    cir.return loc(#loc73)
  } loc(#loc126)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc133)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc91)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc93)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    cir.call @goodG2BSink(%3) : (!s32i) -> () loc(#loc96)
    cir.return loc(#loc88)
  } loc(#loc132)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_41.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":30:1)
#loc7 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":23:1)
#loc8 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":24:5)
#loc9 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":29:5)
#loc10 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":24:8)
#loc11 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":24:15)
#loc12 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":25:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":27:9)
#loc14 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":27:29)
#loc15 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":27:22)
#loc16 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":28:22)
#loc17 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":28:9)
#loc18 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":32:1)
#loc19 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":40:1)
#loc20 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":34:5)
#loc21 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":34:9)
#loc22 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":36:12)
#loc23 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":36:5)
#loc24 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":38:12)
#loc25 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":38:5)
#loc26 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":39:13)
#loc27 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":39:5)
#loc28 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":95:1)
#loc29 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":99:1)
#loc30 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":97:5)
#loc31 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":97:13)
#loc32 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":98:5)
#loc33 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":98:13)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":80:23)
#loc37 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":68:1)
#loc38 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":83:1)
#loc41 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":69:1)
#loc42 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":70:5)
#loc43 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":82:5)
#loc44 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":70:8)
#loc45 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":70:15)
#loc46 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":71:5)
#loc47 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":73:9)
#loc48 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":81:9)
#loc49 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":73:13)
#loc50 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":73:21)
#loc51 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":73:29)
#loc52 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":73:30)
#loc53 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":74:9)
#loc54 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":77:9)
#loc55 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":79:9)
#loc56 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":75:13)
#loc57 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":75:33)
#loc58 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":75:26)
#loc59 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":76:26)
#loc60 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":76:13)
#loc61 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":80:13)
#loc62 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":85:1)
#loc63 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":93:1)
#loc64 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":87:5)
#loc65 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":87:9)
#loc66 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":89:12)
#loc67 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":89:5)
#loc68 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":91:12)
#loc69 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":91:5)
#loc70 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":92:17)
#loc71 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":92:5)
#loc72 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":47:1)
#loc73 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":55:1)
#loc76 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":48:1)
#loc77 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":49:5)
#loc78 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":54:5)
#loc79 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":49:8)
#loc80 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":49:15)
#loc81 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":50:5)
#loc82 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":52:9)
#loc83 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":52:29)
#loc84 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":52:22)
#loc85 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":53:22)
#loc86 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":53:9)
#loc87 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":57:1)
#loc88 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":65:1)
#loc89 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":59:5)
#loc90 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":59:9)
#loc91 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":61:12)
#loc92 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":61:5)
#loc93 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":63:12)
#loc94 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":63:5)
#loc95 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":64:17)
#loc96 = loc("CWE190_Integer_Overflow__int_max_multiply_41.c":64:5)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc3, #loc4])
#loc100 = loc(fused[#loc8, #loc9])
#loc101 = loc(fused[#loc10, #loc11])
#loc102 = loc(fused[#loc12, #loc9])
#loc103 = loc(fused[#loc13, #loc14])
#loc104 = loc(fused[#loc18, #loc19])
#loc105 = loc(fused[#loc20, #loc21])
#loc106 = loc(fused[#loc23, #loc22])
#loc107 = loc(fused[#loc25, #loc24])
#loc108 = loc(fused[#loc28, #loc29])
#loc109 = loc(fused[#loc30, #loc31])
#loc110 = loc(fused[#loc32, #loc33])
#loc111 = loc(fused[#loc34, #loc35])
#loc112 = loc(fused[#loc37, #loc38])
#loc114 = loc(fused[#loc42, #loc43])
#loc115 = loc(fused[#loc44, #loc45])
#loc116 = loc(fused[#loc46, #loc43])
#loc117 = loc(fused[#loc47, #loc48])
#loc118 = loc(fused[#loc50, #loc51])
#loc119 = loc(fused[#loc49, #loc52])
#loc120 = loc(fused[#loc53, #loc54, #loc55, #loc48])
#loc121 = loc(fused[#loc56, #loc57])
#loc122 = loc(fused[#loc62, #loc63])
#loc123 = loc(fused[#loc64, #loc65])
#loc124 = loc(fused[#loc67, #loc66])
#loc125 = loc(fused[#loc69, #loc68])
#loc126 = loc(fused[#loc72, #loc73])
#loc128 = loc(fused[#loc77, #loc78])
#loc129 = loc(fused[#loc79, #loc80])
#loc130 = loc(fused[#loc81, #loc78])
#loc131 = loc(fused[#loc82, #loc83])
#loc132 = loc(fused[#loc87, #loc88])
#loc133 = loc(fused[#loc89, #loc90])
#loc134 = loc(fused[#loc92, #loc91])
#loc135 = loc(fused[#loc94, #loc93])
