!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":119:10)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":119:14)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":119:20)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":119:32)
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc224 = loc(fused[#loc47, #loc48])
#loc225 = loc(fused[#loc49, #loc50])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc203)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc204)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45_badData = #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> {alignment = 8 : i64} loc(#loc205)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc207)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc208)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc13)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc14)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc14)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc209)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc210)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc13)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc211)
    cir.store %8, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc212)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc21)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc22)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc22)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc214)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc24)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc25)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc26)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc24)
      } loc(#loc215)
    } loc(#loc213)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc27)
    %10 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45_badData : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc205)
    cir.store %9, %10 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc216)
    %11 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc217)
    cir.call %11() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc8)
  } loc(#loc206)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc32)
  } loc(#loc218)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc220)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc221)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc222)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc44)
  cir.func @main(%arg0: !s32i loc(fused[#loc47, #loc48]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc49, #loc50])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc224)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc225)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc46)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc51)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc52)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc53)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc53)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc54)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc41)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45_good : !cir.ptr<!cir.func<!void ()>> loc(#loc226)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45_good() : () -> () loc(#loc56)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc43)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc227)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45_bad() : () -> () loc(#loc60)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc44)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc63)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc228)
    cir.return %17 : !s32i loc(#loc228)
  } loc(#loc223)
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc229)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc230)
  cir.func no_proto internal private @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc232)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45_badData : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc205)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc72)
    cir.store %2, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc232)
    cir.scope {
      %3 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc234)
      cir.scope {
        %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc236)
        cir.scope {
          %5 = cir.const #cir.int<0> : !s32i loc(#loc83)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc83)
          cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc238)
          cir.for : cond {
            %7 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc85)
            %8 = cir.const #cir.int<100> : !s32i loc(#loc86)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc86)
            %10 = cir.cmp(lt, %7, %9) : !u64i, !cir.bool loc(#loc239)
            cir.condition(%10) loc(#loc87)
          } body {
            cir.scope {
              %7 = cir.const #cir.int<0> : !s32i loc(#loc89)
              %8 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc90)
              %9 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc91)
              %10 = cir.ptr_stride(%9 : !cir.ptr<!ty__twoIntsStruct>, %8 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc91)
              %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc92)
              cir.store %7, %11 : !s32i, !cir.ptr<!s32i> loc(#loc241)
              %12 = cir.const #cir.int<0> : !s32i loc(#loc93)
              %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc94)
              %14 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc95)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!ty__twoIntsStruct>, %13 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc95)
              %16 = cir.get_member %15[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc96)
              cir.store %12, %16 : !s32i, !cir.ptr<!s32i> loc(#loc242)
            } loc(#loc240)
            cir.yield loc(#loc82)
          } step {
            %7 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc97)
            %8 = cir.unary(inc, %7) : !u64i, !u64i loc(#loc98)
            cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc243)
            cir.yield loc(#loc237)
          } loc(#loc237)
        } loc(#loc237)
      } loc(#loc235)
      cir.scope {
        %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc245)
        cir.scope {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc105)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc105)
          cir.store %12, %4 : !u64i, !cir.ptr<!u64i> loc(#loc247)
          cir.for : cond {
            %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc107)
            %14 = cir.const #cir.int<100> : !s32i loc(#loc108)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc108)
            %16 = cir.cmp(lt, %13, %15) : !u64i, !cir.bool loc(#loc248)
            cir.condition(%16) loc(#loc109)
          } body {
            cir.scope {
              %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc111)
              %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc112)
              %15 = cir.ptr_stride(%13 : !cir.ptr<!ty__twoIntsStruct>, %14 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc113)
              %16 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc114)
              %17 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc115)
              %18 = cir.ptr_stride(%17 : !cir.ptr<!ty__twoIntsStruct>, %16 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc115)
              cir.copy %18 to %15 : !cir.ptr<!ty__twoIntsStruct> loc(#loc113)
            } loc(#loc249)
            cir.yield loc(#loc104)
          } step {
            %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc116)
            %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc117)
            cir.store %14, %4 : !u64i, !cir.ptr<!u64i> loc(#loc250)
            cir.yield loc(#loc246)
          } loc(#loc246)
        } loc(#loc246)
        %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc118)
        %6 = cir.const #cir.int<0> : !s32i loc(#loc119)
        %7 = cir.ptr_stride(%5 : !cir.ptr<!ty__twoIntsStruct>, %6 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc120)
        cir.call @printStructLine(%7) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc121)
        %8 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc122)
        %9 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc123)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc123)
        cir.call @free(%10) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc122)
      } loc(#loc244)
    } loc(#loc233)
    cir.return loc(#loc70)
  } loc(#loc231)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45_goodG2BData = #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> {alignment = 8 : i64} loc(#loc251)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc253)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc130)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc254)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc132)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc133)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc133)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc255)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc256)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc132)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc257)
    cir.store %8, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc258)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc140)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc141)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc141)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc260)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc143)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc144)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc145)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc143)
      } loc(#loc261)
    } loc(#loc259)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc146)
    %10 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45_goodG2BData : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc251)
    cir.store %9, %10 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc262)
    %11 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc263)
    cir.call %11() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc148)
    cir.return loc(#loc127)
  } loc(#loc252)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc265)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45_goodG2BData : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc251)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc153)
    cir.store %2, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc265)
    cir.scope {
      %3 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc267)
      cir.scope {
        %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc269)
        cir.scope {
          %5 = cir.const #cir.int<0> : !s32i loc(#loc164)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc164)
          cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc271)
          cir.for : cond {
            %7 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc166)
            %8 = cir.const #cir.int<100> : !s32i loc(#loc167)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc167)
            %10 = cir.cmp(lt, %7, %9) : !u64i, !cir.bool loc(#loc272)
            cir.condition(%10) loc(#loc168)
          } body {
            cir.scope {
              %7 = cir.const #cir.int<0> : !s32i loc(#loc170)
              %8 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc171)
              %9 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc172)
              %10 = cir.ptr_stride(%9 : !cir.ptr<!ty__twoIntsStruct>, %8 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc172)
              %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc92)
              cir.store %7, %11 : !s32i, !cir.ptr<!s32i> loc(#loc274)
              %12 = cir.const #cir.int<0> : !s32i loc(#loc173)
              %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc174)
              %14 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc175)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!ty__twoIntsStruct>, %13 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc175)
              %16 = cir.get_member %15[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc96)
              cir.store %12, %16 : !s32i, !cir.ptr<!s32i> loc(#loc275)
            } loc(#loc273)
            cir.yield loc(#loc163)
          } step {
            %7 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc176)
            %8 = cir.unary(inc, %7) : !u64i, !u64i loc(#loc177)
            cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc276)
            cir.yield loc(#loc270)
          } loc(#loc270)
        } loc(#loc270)
      } loc(#loc268)
      cir.scope {
        %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc278)
        cir.scope {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc184)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc184)
          cir.store %12, %4 : !u64i, !cir.ptr<!u64i> loc(#loc280)
          cir.for : cond {
            %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc186)
            %14 = cir.const #cir.int<100> : !s32i loc(#loc187)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc187)
            %16 = cir.cmp(lt, %13, %15) : !u64i, !cir.bool loc(#loc281)
            cir.condition(%16) loc(#loc188)
          } body {
            cir.scope {
              %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc190)
              %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc191)
              %15 = cir.ptr_stride(%13 : !cir.ptr<!ty__twoIntsStruct>, %14 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc192)
              %16 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc193)
              %17 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc194)
              %18 = cir.ptr_stride(%17 : !cir.ptr<!ty__twoIntsStruct>, %16 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc194)
              cir.copy %18 to %15 : !cir.ptr<!ty__twoIntsStruct> loc(#loc192)
            } loc(#loc282)
            cir.yield loc(#loc183)
          } step {
            %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc195)
            %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc196)
            cir.store %14, %4 : !u64i, !cir.ptr<!u64i> loc(#loc283)
            cir.yield loc(#loc279)
          } loc(#loc279)
        } loc(#loc279)
        %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc197)
        %6 = cir.const #cir.int<0> : !s32i loc(#loc198)
        %7 = cir.ptr_stride(%5 : !cir.ptr<!ty__twoIntsStruct>, %6 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc199)
        cir.call @printStructLine(%7) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc200)
        %8 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc201)
        %9 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc202)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc202)
        cir.call @free(%10) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc201)
      } loc(#loc277)
    } loc(#loc266)
    cir.return loc(#loc151)
  } loc(#loc264)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":19:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":19:24)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":51:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":60:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":53:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":53:21)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":54:12)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":54:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":56:29)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":56:36)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":56:39)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":56:59)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":56:60)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":56:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":57:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":57:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":57:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":57:17)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":57:23)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":57:24)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":57:30)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":57:29)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":58:74)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":58:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":59:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":59:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":105:1)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":108:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":107:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":107:13)
#loc35 = loc("/usr/include/stdlib.h":575:1)
#loc36 = loc("/usr/include/stdlib.h":575:41)
#loc37 = loc("/usr/include/time.h":76:1)
#loc38 = loc("/usr/include/time.h":76:38)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":124:15)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":126:15)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":129:15)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":131:15)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":119:1)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":134:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":120:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":122:27)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":122:22)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":122:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":124:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":125:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":125:69)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":126:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":129:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":130:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":130:68)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":131:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":133:12)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":133:5)
#loc65 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc66 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc67 = loc("/usr/include/stdlib.h":687:1)
#loc68 = loc("/usr/include/stdlib.h":687:32)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":24:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":49:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":26:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":26:28)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":27:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":48:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":28:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":28:33)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":29:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":37:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":30:13)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":30:20)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":32:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":36:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":32:22)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":32:18)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":32:25)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":32:29)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":32:27)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":33:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":34:36)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":34:24)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":34:17)
#loc92 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":35:36)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":35:24)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":35:17)
#loc96 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":32:35)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":32:34)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":38:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":47:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":39:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":39:20)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":41:13)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":44:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":41:22)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":41:18)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":41:25)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":41:29)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":41:27)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":42:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":43:17)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":43:22)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":43:23)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":43:34)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":43:27)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":41:35)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":41:34)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":45:30)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":45:35)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":45:36)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":45:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":46:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":46:18)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":20:1)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":20:24)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":94:1)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":103:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":96:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":96:21)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":97:12)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":97:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":99:29)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":99:36)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":99:40)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":99:60)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":99:61)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":99:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":100:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":100:33)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":100:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":100:17)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":100:23)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":100:24)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":100:30)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":100:29)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":101:78)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":101:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":102:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":102:17)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":67:1)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":92:1)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":69:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":69:28)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":70:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":91:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":71:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":71:33)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":72:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":80:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":73:13)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":73:20)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":75:13)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":79:13)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":75:22)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":75:18)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":75:25)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":75:29)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":75:27)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":76:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":77:36)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":77:24)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":77:17)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":78:36)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":78:24)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":78:17)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":75:35)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":75:34)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":81:9)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":90:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":82:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":82:20)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":84:13)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":87:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":84:22)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":84:18)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":84:25)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":84:29)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":84:27)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":85:13)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":86:17)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":86:22)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":86:23)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":86:34)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":86:27)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":84:35)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":84:34)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":88:30)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":88:35)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":88:36)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":88:13)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":89:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c":89:18)
#loc203 = loc(fused[#loc1, #loc2])
#loc204 = loc(fused[#loc3, #loc4])
#loc205 = loc(fused[#loc5, #loc6])
#loc206 = loc(fused[#loc7, #loc8])
#loc207 = loc(fused[#loc9, #loc10])
#loc208 = loc(fused[#loc12, #loc11])
#loc209 = loc(fused[#loc15, #loc16])
#loc210 = loc(fused[#loc14, #loc16])
#loc211 = loc(fused[#loc13, #loc17])
#loc212 = loc(fused[#loc18, #loc17])
#loc213 = loc(fused[#loc19, #loc20])
#loc214 = loc(fused[#loc21, #loc22])
#loc215 = loc(fused[#loc23, #loc20])
#loc216 = loc(fused[#loc28, #loc27])
#loc217 = loc(fused[#loc29, #loc30])
#loc218 = loc(fused[#loc31, #loc32])
#loc219 = loc(fused[#loc33, #loc34])
#loc220 = loc(fused[#loc35, #loc36])
#loc221 = loc(fused[#loc37, #loc38])
#loc222 = loc(fused[#loc39, #loc40])
#loc223 = loc(fused[#loc45, #loc46])
#loc226 = loc(fused[#loc56, #loc57])
#loc227 = loc(fused[#loc60, #loc61])
#loc228 = loc(fused[#loc64, #loc63])
#loc229 = loc(fused[#loc65, #loc66])
#loc230 = loc(fused[#loc67, #loc68])
#loc231 = loc(fused[#loc69, #loc70])
#loc232 = loc(fused[#loc71, #loc72])
#loc233 = loc(fused[#loc73, #loc74])
#loc234 = loc(fused[#loc75, #loc76])
#loc235 = loc(fused[#loc77, #loc78])
#loc236 = loc(fused[#loc79, #loc80])
#loc237 = loc(fused[#loc81, #loc82])
#loc238 = loc(fused[#loc84, #loc83])
#loc239 = loc(fused[#loc85, #loc86])
#loc240 = loc(fused[#loc88, #loc82])
#loc241 = loc(fused[#loc91, #loc89])
#loc242 = loc(fused[#loc95, #loc93])
#loc243 = loc(fused[#loc98, #loc97])
#loc244 = loc(fused[#loc99, #loc100])
#loc245 = loc(fused[#loc101, #loc102])
#loc246 = loc(fused[#loc103, #loc104])
#loc247 = loc(fused[#loc106, #loc105])
#loc248 = loc(fused[#loc107, #loc108])
#loc249 = loc(fused[#loc110, #loc104])
#loc250 = loc(fused[#loc117, #loc116])
#loc251 = loc(fused[#loc124, #loc125])
#loc252 = loc(fused[#loc126, #loc127])
#loc253 = loc(fused[#loc128, #loc129])
#loc254 = loc(fused[#loc131, #loc130])
#loc255 = loc(fused[#loc134, #loc135])
#loc256 = loc(fused[#loc133, #loc135])
#loc257 = loc(fused[#loc132, #loc136])
#loc258 = loc(fused[#loc137, #loc136])
#loc259 = loc(fused[#loc138, #loc139])
#loc260 = loc(fused[#loc140, #loc141])
#loc261 = loc(fused[#loc142, #loc139])
#loc262 = loc(fused[#loc147, #loc146])
#loc263 = loc(fused[#loc148, #loc149])
#loc264 = loc(fused[#loc150, #loc151])
#loc265 = loc(fused[#loc152, #loc153])
#loc266 = loc(fused[#loc154, #loc155])
#loc267 = loc(fused[#loc156, #loc157])
#loc268 = loc(fused[#loc158, #loc159])
#loc269 = loc(fused[#loc160, #loc161])
#loc270 = loc(fused[#loc162, #loc163])
#loc271 = loc(fused[#loc165, #loc164])
#loc272 = loc(fused[#loc166, #loc167])
#loc273 = loc(fused[#loc169, #loc163])
#loc274 = loc(fused[#loc172, #loc170])
#loc275 = loc(fused[#loc175, #loc173])
#loc276 = loc(fused[#loc177, #loc176])
#loc277 = loc(fused[#loc178, #loc179])
#loc278 = loc(fused[#loc180, #loc181])
#loc279 = loc(fused[#loc182, #loc183])
#loc280 = loc(fused[#loc185, #loc184])
#loc281 = loc(fused[#loc186, #loc187])
#loc282 = loc(fused[#loc189, #loc183])
#loc283 = loc(fused[#loc196, #loc195])
