!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":135:10)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":135:14)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":135:20)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":135:32)
#loc359 = loc(fused[#loc118, #loc119])
#loc360 = loc(fused[#loc120, #loc121])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc312)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc313)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc314)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc315)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc316)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc317)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc318)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc319)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc321)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc322)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc323)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc324)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc325)
    %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc326)
    %6 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
    cir.store %6, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc327)
    cir.br ^bb1 loc(#loc328)
  ^bb1:  // pred: ^bb0
    %7 = cir.const #cir.int<0> : !s32i loc(#loc34)
    cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc329)
    cir.br ^bb2 loc(#loc328)
  ^bb2:  // 2 preds: ^bb1, ^bb12
    %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc330)
    cir.brcond %10 ^bb3, ^bb13 loc(#loc38)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc331)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc332)
  ^bb5:  // pred: ^bb4
    %11 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc42)
    %12 = cir.const #cir.int<50> : !s32i loc(#loc43)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc43)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc333)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc334)
    %16 = cir.call @malloc(%15) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc42)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc335)
    cir.store %17, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc321)
    cir.br ^bb6 loc(#loc336)
  ^bb6:  // pred: ^bb5
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc48)
    %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc49)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc49)
    %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc337)
    cir.brcond %21 ^bb7, ^bb8 loc(#loc338)
  ^bb7:  // pred: ^bb6
    %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc51)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc53)
    cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc51)
    cir.br ^bb8 loc(#loc47)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc47)
  ^bb9:  // pred: ^bb8
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
    %26 = cir.const #cir.int<65> : !s32i loc(#loc55)
    %27 = cir.const #cir.int<50> : !s32i loc(#loc56)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc56)
    %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc56)
    %31 = cir.call @wmemset(%25, %26, %30) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc58)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc59)
    %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
    %34 = cir.const #cir.int<50> : !s32i loc(#loc61)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %36 = cir.binop(sub, %34, %35) nsw : !s32i loc(#loc61)
    %37 = cir.ptr_stride(%33 : !cir.ptr<!s32i>, %36 : !s32i), !cir.ptr<!s32i> loc(#loc63)
    cir.store %32, %37 : !s32i, !cir.ptr<!s32i> loc(#loc339)
    %38 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
    %39 = cir.cast(bitcast, %38 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc64)
    cir.store %39, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc340)
    cir.br ^bb10 loc(#loc41)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc33)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc33)
  ^bb12:  // pred: ^bb11
    %40 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %41 = cir.unary(inc, %40) : !s32i, !s32i loc(#loc67)
    cir.store %41, %3 : !s32i, !cir.ptr<!s32i> loc(#loc341)
    cir.br ^bb2 loc(#loc328)
  ^bb13:  // pred: ^bb2
    cir.br ^bb14 loc(#loc33)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc342)
  ^bb15:  // pred: ^bb14
    %42 = cir.const #cir.int<0> : !s32i loc(#loc70)
    cir.store %42, %4 : !s32i, !cir.ptr<!s32i> loc(#loc343)
    cir.br ^bb16 loc(#loc342)
  ^bb16:  // 2 preds: ^bb15, ^bb26
    %43 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc72)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc73)
    %45 = cir.cmp(lt, %43, %44) : !s32i, !cir.bool loc(#loc344)
    cir.brcond %45 ^bb17, ^bb27 loc(#loc74)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc345)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc346)
  ^bb19:  // pred: ^bb18
    %46 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc78)
    %47 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc79)
    %48 = cir.cast(bitcast, %47 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc79)
    %49 = cir.call @strlen(%48) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc78)
    cir.store %49, %1 : !u64i, !cir.ptr<!u64i> loc(#loc322)
    %50 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc80)
    %51 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc81)
    %52 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %53 = cir.cast(integral, %52 : !s32i), !u64i loc(#loc82)
    %54 = cir.binop(add, %51, %53) : !u64i loc(#loc347)
    %55 = cir.const #cir.int<4> : !u64i loc(#loc348)
    %56 = cir.call @calloc(%54, %55) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc80)
    cir.store %56, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc323)
    cir.br ^bb20 loc(#loc349)
  ^bb20:  // pred: ^bb19
    %57 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc87)
    %58 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc88)
    %59 = cir.cmp(eq, %57, %58) : !cir.ptr<!void>, !cir.bool loc(#loc350)
    cir.brcond %59 ^bb21, ^bb22 loc(#loc351)
  ^bb21:  // pred: ^bb20
    %60 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc90)
    %61 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc92)
    cir.call @exit(%62) : (!s32i) -> () extra(#fn_attr) loc(#loc90)
    cir.br ^bb22 loc(#loc86)
  ^bb22:  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc86)
  ^bb23:  // pred: ^bb22
    %63 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc93)
    %64 = cir.cast(bitcast, %63 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc93)
    %65 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc94)
    %66 = cir.cast(bitcast, %65 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc94)
    %67 = cir.call @wcscpy(%64, %66) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc95)
    %68 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc96)
    %69 = cir.cast(bitcast, %68 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc96)
    cir.call @printLine(%69) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    %70 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc98)
    cir.call @free(%70) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc99)
    cir.br ^bb24 loc(#loc77)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc69)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc69)
  ^bb26:  // pred: ^bb25
    %71 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc100)
    %72 = cir.unary(inc, %71) : !s32i, !s32i loc(#loc101)
    cir.store %72, %4 : !s32i, !cir.ptr<!s32i> loc(#loc352)
    cir.br ^bb16 loc(#loc342)
  ^bb27:  // pred: ^bb16
    cir.br ^bb28 loc(#loc69)
  ^bb28:  // pred: ^bb27
    cir.return loc(#loc18)
  } loc(#loc320)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc354)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc104)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc355)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc106)
    cir.return loc(#loc103)
  } loc(#loc353)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc356)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc357)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc112)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc113)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc114)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc115)
  cir.func @main(%arg0: !s32i loc(fused[#loc118, #loc119]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc120, #loc121])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc359)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc360)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc117)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc122)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc122)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc123)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc124)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc124)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc125)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc112)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc112)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc126)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc361)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_17_good() : () -> () loc(#loc127)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc113)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc113)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc129)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc114)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc114)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc130)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc362)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_17_bad() : () -> () loc(#loc131)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc115)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc115)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc133)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc134)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc363)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc363)
    cir.return %17 : !s32i loc(#loc363)
  } loc(#loc358)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc364)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc365)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc367)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc368)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc369)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc370)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc371)
    %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc372)
    %6 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc153)
    cir.store %6, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc373)
    cir.br ^bb1 loc(#loc374)
  ^bb1:  // pred: ^bb0
    %7 = cir.const #cir.int<0> : !s32i loc(#loc157)
    cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc375)
    cir.br ^bb2 loc(#loc374)
  ^bb2:  // 2 preds: ^bb1, ^bb12
    %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc159)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc160)
    %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc376)
    cir.brcond %10 ^bb3, ^bb13 loc(#loc161)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc377)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc378)
  ^bb5:  // pred: ^bb4
    %11 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc165)
    %12 = cir.const #cir.int<50> : !s32i loc(#loc166)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc166)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc379)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc380)
    %16 = cir.call @malloc(%15) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc165)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc381)
    cir.store %17, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc367)
    cir.br ^bb6 loc(#loc382)
  ^bb6:  // pred: ^bb5
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc171)
    %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc172)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc172)
    %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc383)
    cir.brcond %21 ^bb7, ^bb8 loc(#loc384)
  ^bb7:  // pred: ^bb6
    %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc174)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc175)
    %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc176)
    cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc174)
    cir.br ^bb8 loc(#loc170)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc170)
  ^bb9:  // pred: ^bb8
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc177)
    %26 = cir.const #cir.int<65> : !s32i loc(#loc178)
    %27 = cir.const #cir.int<50> : !s32i loc(#loc179)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc180)
    %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc179)
    %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc179)
    %31 = cir.call @wmemset(%25, %26, %30) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc181)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc182)
    %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc183)
    %34 = cir.const #cir.int<50> : !s32i loc(#loc184)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc185)
    %36 = cir.binop(sub, %34, %35) nsw : !s32i loc(#loc184)
    %37 = cir.ptr_stride(%33 : !cir.ptr<!s32i>, %36 : !s32i), !cir.ptr<!s32i> loc(#loc186)
    cir.store %32, %37 : !s32i, !cir.ptr<!s32i> loc(#loc385)
    %38 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc187)
    %39 = cir.cast(bitcast, %38 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc187)
    cir.store %39, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc386)
    cir.br ^bb10 loc(#loc164)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc156)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc156)
  ^bb12:  // pred: ^bb11
    %40 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc189)
    %41 = cir.unary(inc, %40) : !s32i, !s32i loc(#loc190)
    cir.store %41, %3 : !s32i, !cir.ptr<!s32i> loc(#loc387)
    cir.br ^bb2 loc(#loc374)
  ^bb13:  // pred: ^bb2
    cir.br ^bb14 loc(#loc156)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc388)
  ^bb15:  // pred: ^bb14
    %42 = cir.const #cir.int<0> : !s32i loc(#loc193)
    cir.store %42, %4 : !s32i, !cir.ptr<!s32i> loc(#loc389)
    cir.br ^bb16 loc(#loc388)
  ^bb16:  // 2 preds: ^bb15, ^bb26
    %43 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc195)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc196)
    %45 = cir.cmp(lt, %43, %44) : !s32i, !cir.bool loc(#loc390)
    cir.brcond %45 ^bb17, ^bb27 loc(#loc197)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc391)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc392)
  ^bb19:  // pred: ^bb18
    %46 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc201)
    %47 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc202)
    %48 = cir.cast(bitcast, %47 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc202)
    %49 = cir.call @wcslen(%48) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc201)
    cir.store %49, %1 : !u64i, !cir.ptr<!u64i> loc(#loc368)
    %50 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc203)
    %51 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc204)
    %52 = cir.const #cir.int<1> : !s32i loc(#loc205)
    %53 = cir.cast(integral, %52 : !s32i), !u64i loc(#loc205)
    %54 = cir.binop(add, %51, %53) : !u64i loc(#loc393)
    %55 = cir.const #cir.int<4> : !u64i loc(#loc394)
    %56 = cir.call @calloc(%54, %55) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc203)
    cir.store %56, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc369)
    cir.br ^bb20 loc(#loc395)
  ^bb20:  // pred: ^bb19
    %57 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc210)
    %58 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc211)
    %59 = cir.cmp(eq, %57, %58) : !cir.ptr<!void>, !cir.bool loc(#loc396)
    cir.brcond %59 ^bb21, ^bb22 loc(#loc397)
  ^bb21:  // pred: ^bb20
    %60 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc213)
    %61 = cir.const #cir.int<1> : !s32i loc(#loc214)
    %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc215)
    cir.call @exit(%62) : (!s32i) -> () extra(#fn_attr) loc(#loc213)
    cir.br ^bb22 loc(#loc209)
  ^bb22:  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc209)
  ^bb23:  // pred: ^bb22
    %63 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc216)
    %64 = cir.cast(bitcast, %63 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc216)
    %65 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc217)
    %66 = cir.cast(bitcast, %65 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc217)
    %67 = cir.call @wcscpy(%64, %66) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc218)
    %68 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc219)
    %69 = cir.cast(bitcast, %68 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc219)
    cir.call @printWLine(%69) : (!cir.ptr<!s32i>) -> () loc(#loc220)
    %70 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc221)
    cir.call @free(%70) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc222)
    cir.br ^bb24 loc(#loc200)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc192)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc192)
  ^bb26:  // pred: ^bb25
    %71 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc223)
    %72 = cir.unary(inc, %71) : !s32i, !s32i loc(#loc224)
    cir.store %72, %4 : !s32i, !cir.ptr<!s32i> loc(#loc398)
    cir.br ^bb16 loc(#loc388)
  ^bb27:  // pred: ^bb16
    cir.br ^bb28 loc(#loc192)
  ^bb28:  // pred: ^bb27
    cir.return loc(#loc141)
  } loc(#loc366)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc399)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc401)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc402)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc403)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc404)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc405)
    %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc406)
    %6 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc240)
    cir.store %6, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc407)
    cir.br ^bb1 loc(#loc408)
  ^bb1:  // pred: ^bb0
    %7 = cir.const #cir.int<0> : !s32i loc(#loc244)
    cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc409)
    cir.br ^bb2 loc(#loc408)
  ^bb2:  // 2 preds: ^bb1, ^bb12
    %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc246)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc247)
    %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc410)
    cir.brcond %10 ^bb3, ^bb13 loc(#loc248)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc411)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc412)
  ^bb5:  // pred: ^bb4
    %11 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc252)
    %12 = cir.const #cir.int<50> : !s32i loc(#loc253)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc253)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc413)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc414)
    %16 = cir.call @malloc(%15) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc252)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc415)
    cir.store %17, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc401)
    cir.br ^bb6 loc(#loc416)
  ^bb6:  // pred: ^bb5
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc258)
    %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc259)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc259)
    %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc417)
    cir.brcond %21 ^bb7, ^bb8 loc(#loc418)
  ^bb7:  // pred: ^bb6
    %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc261)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc262)
    %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc263)
    cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc261)
    cir.br ^bb8 loc(#loc257)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc257)
  ^bb9:  // pred: ^bb8
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc264)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc264)
    %27 = cir.const #cir.int<65> : !s32i loc(#loc265)
    %28 = cir.const #cir.int<50> : !s32i loc(#loc266)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc267)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc266)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc266)
    cir.libc.memset %31 bytes from %26 set to %27 : !cir.ptr<!void>, !s32i, !u64i loc(#loc419)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc270)
    %33 = cir.cast(integral, %32 : !s32i), !s8i loc(#loc270)
    %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc271)
    %35 = cir.const #cir.int<50> : !s32i loc(#loc272)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc273)
    %37 = cir.binop(sub, %35, %36) nsw : !s32i loc(#loc272)
    %38 = cir.ptr_stride(%34 : !cir.ptr<!s8i>, %37 : !s32i), !cir.ptr<!s8i> loc(#loc274)
    cir.store %33, %38 : !s8i, !cir.ptr<!s8i> loc(#loc420)
    %39 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc275)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc275)
    cir.store %40, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc421)
    cir.br ^bb10 loc(#loc251)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc243)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc243)
  ^bb12:  // pred: ^bb11
    %41 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc277)
    %42 = cir.unary(inc, %41) : !s32i, !s32i loc(#loc278)
    cir.store %42, %3 : !s32i, !cir.ptr<!s32i> loc(#loc422)
    cir.br ^bb2 loc(#loc408)
  ^bb13:  // pred: ^bb2
    cir.br ^bb14 loc(#loc243)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc423)
  ^bb15:  // pred: ^bb14
    %43 = cir.const #cir.int<0> : !s32i loc(#loc281)
    cir.store %43, %4 : !s32i, !cir.ptr<!s32i> loc(#loc424)
    cir.br ^bb16 loc(#loc423)
  ^bb16:  // 2 preds: ^bb15, ^bb26
    %44 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc283)
    %45 = cir.const #cir.int<1> : !s32i loc(#loc284)
    %46 = cir.cmp(lt, %44, %45) : !s32i, !cir.bool loc(#loc425)
    cir.brcond %46 ^bb17, ^bb27 loc(#loc285)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc426)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc427)
  ^bb19:  // pred: ^bb18
    %47 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc289)
    %48 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc290)
    %49 = cir.cast(bitcast, %48 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc290)
    %50 = cir.call @strlen(%49) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc289)
    cir.store %50, %1 : !u64i, !cir.ptr<!u64i> loc(#loc402)
    %51 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc291)
    %52 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc292)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc293)
    %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc293)
    %55 = cir.binop(add, %52, %54) : !u64i loc(#loc428)
    %56 = cir.const #cir.int<1> : !s32i loc(#loc294)
    %57 = cir.cast(integral, %56 : !s32i), !u64i loc(#loc294)
    %58 = cir.call @calloc(%55, %57) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc291)
    cir.store %58, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc403)
    cir.br ^bb20 loc(#loc429)
  ^bb20:  // pred: ^bb19
    %59 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc297)
    %60 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc298)
    %61 = cir.cmp(eq, %59, %60) : !cir.ptr<!void>, !cir.bool loc(#loc430)
    cir.brcond %61 ^bb21, ^bb22 loc(#loc431)
  ^bb21:  // pred: ^bb20
    %62 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc300)
    %63 = cir.const #cir.int<1> : !s32i loc(#loc301)
    %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc302)
    cir.call @exit(%64) : (!s32i) -> () extra(#fn_attr) loc(#loc300)
    cir.br ^bb22 loc(#loc296)
  ^bb22:  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc296)
  ^bb23:  // pred: ^bb22
    %65 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc303)
    %66 = cir.cast(bitcast, %65 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc303)
    %67 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc304)
    %68 = cir.cast(bitcast, %67 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc304)
    %69 = cir.call @strcpy(%66, %68) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc305)
    %70 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc306)
    %71 = cir.cast(bitcast, %70 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc306)
    cir.call @printLine(%71) : (!cir.ptr<!s8i>) -> () loc(#loc307)
    %72 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc308)
    cir.call @free(%72) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc309)
    cir.br ^bb24 loc(#loc288)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc280)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc280)
  ^bb26:  // pred: ^bb25
    %73 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc310)
    %74 = cir.unary(inc, %73) : !s32i, !s32i loc(#loc311)
    cir.store %74, %4 : !s32i, !cir.ptr<!s32i> loc(#loc432)
    cir.br ^bb16 loc(#loc423)
  ^bb27:  // pred: ^bb16
    cir.br ^bb28 loc(#loc280)
  ^bb28:  // pred: ^bb27
    cir.return loc(#loc228)
  } loc(#loc400)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/stdlib.h":675:1)
#loc10 = loc("/usr/include/stdlib.h":676:14)
#loc11 = loc("/usr/include/wchar.h":98:1)
#loc12 = loc("/usr/include/wchar.h":100:14)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":24:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":52:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":32:13)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":32:75)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":44:13)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":44:49)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":45:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":45:68)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":26:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":26:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":26:11)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":27:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":27:12)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":28:12)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":28:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":29:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":39:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":29:13)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":29:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":29:16)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":29:20)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":29:18)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":30:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":31:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":38:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":32:50)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":32:57)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":32:60)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":32:74)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":33:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":33:50)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":33:17)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":33:34)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":33:40)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":33:41)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":33:47)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":33:46)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":34:21)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":34:36)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":34:42)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":34:45)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":34:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":35:35)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":35:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":35:27)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":35:30)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":35:31)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":37:28)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":37:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":29:24)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":29:23)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":40:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":51:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":40:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":40:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":40:16)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":40:20)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":40:18)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":41:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":42:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":50:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":44:30)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":44:45)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":45:35)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":45:42)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":45:50)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":45:53)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":45:67)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":46:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":46:41)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":46:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":46:25)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":46:31)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":46:32)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":46:38)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":46:37)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":47:26)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":47:32)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":47:19)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":48:31)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":48:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":49:18)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":49:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":40:24)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":40:23)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":120:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":124:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":122:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":122:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":123:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":123:13)
#loc108 = loc("/usr/include/stdlib.h":575:1)
#loc109 = loc("/usr/include/stdlib.h":575:41)
#loc110 = loc("/usr/include/time.h":76:1)
#loc111 = loc("/usr/include/time.h":76:38)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":140:15)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":142:15)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":145:15)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":147:15)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":135:1)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":150:1)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":136:1)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":138:27)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":138:22)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":138:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":140:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":141:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":141:55)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":142:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":145:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":146:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":146:54)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":147:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":149:12)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":149:5)
#loc136 = loc("/usr/include/wchar.h":247:1)
#loc137 = loc("/usr/include/wchar.h":247:51)
#loc138 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc139 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":59:1)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":87:1)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":67:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":67:75)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":79:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":79:52)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":80:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":80:68)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":61:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":61:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":61:11)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":62:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":62:12)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":63:12)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":63:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":64:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":74:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":64:13)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":64:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":64:16)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":64:20)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":64:18)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":65:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":66:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":73:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":67:50)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":67:57)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":67:60)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":67:74)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":68:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":68:50)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":68:17)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":68:34)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":68:40)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":68:41)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":68:47)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":68:46)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":69:21)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":69:36)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":69:42)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":69:45)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":69:13)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":70:35)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":70:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":70:27)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":70:30)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":70:31)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":72:28)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":72:13)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":64:24)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":64:23)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":75:5)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":86:5)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":75:13)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":75:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":75:16)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":75:20)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":75:18)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":76:5)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":77:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":85:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":79:30)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":79:48)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":80:35)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":80:42)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":80:50)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":80:53)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":80:67)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":81:13)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":81:41)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":81:17)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":81:25)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":81:31)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":81:32)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":81:38)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":81:37)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":82:26)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":82:32)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":82:19)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":83:35)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":83:13)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":84:18)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":84:13)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":75:24)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":75:23)
#loc225 = loc("/usr/include/string.h":141:1)
#loc226 = loc("/usr/include/string.h":142:14)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":90:1)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":118:1)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":98:13)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":98:67)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":110:13)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":110:49)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":111:13)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":111:54)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":92:5)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":92:9)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":92:11)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":93:5)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":93:12)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":94:12)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":94:5)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":95:5)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":105:5)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":95:13)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":95:9)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":95:16)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":95:20)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":95:18)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":96:5)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":97:9)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":104:9)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":98:45)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":98:52)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":98:55)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":98:66)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":99:13)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":99:51)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":99:17)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":99:35)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":99:41)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":99:42)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":99:48)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":99:47)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":100:20)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":100:36)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":100:41)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":100:44)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":100:13)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":100:45)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":101:36)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":101:13)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":101:28)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":101:31)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":101:32)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":103:28)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":103:13)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":95:24)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":95:23)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":106:5)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":117:5)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":106:13)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":106:9)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":106:16)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":106:20)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":106:18)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":107:5)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":108:9)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":116:9)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":110:30)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":110:45)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":111:35)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":111:42)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":111:50)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":111:53)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":112:13)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":112:41)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":112:17)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":112:25)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":112:31)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":112:32)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":112:38)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":112:37)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":113:26)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":113:32)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":113:19)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":114:31)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":114:13)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":115:18)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":115:13)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":106:24)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":106:23)
#loc312 = loc(fused[#loc1, #loc2])
#loc313 = loc(fused[#loc3, #loc4])
#loc314 = loc(fused[#loc5, #loc6])
#loc315 = loc(fused[#loc7, #loc8])
#loc316 = loc(fused[#loc9, #loc10])
#loc317 = loc(fused[#loc11, #loc12])
#loc318 = loc(fused[#loc13, #loc14])
#loc319 = loc(fused[#loc15, #loc16])
#loc320 = loc(fused[#loc17, #loc18])
#loc321 = loc(fused[#loc19, #loc20])
#loc322 = loc(fused[#loc21, #loc22])
#loc323 = loc(fused[#loc23, #loc24])
#loc324 = loc(fused[#loc25, #loc26])
#loc325 = loc(fused[#loc25, #loc27])
#loc326 = loc(fused[#loc28, #loc29])
#loc327 = loc(fused[#loc31, #loc30])
#loc328 = loc(fused[#loc32, #loc33])
#loc329 = loc(fused[#loc35, #loc34])
#loc330 = loc(fused[#loc36, #loc37])
#loc331 = loc(fused[#loc39, #loc33])
#loc332 = loc(fused[#loc40, #loc41])
#loc333 = loc(fused[#loc44, #loc45])
#loc334 = loc(fused[#loc43, #loc45])
#loc335 = loc(fused[#loc42, #loc20])
#loc336 = loc(fused[#loc46, #loc47])
#loc337 = loc(fused[#loc48, #loc49])
#loc338 = loc(fused[#loc50, #loc47])
#loc339 = loc(fused[#loc60, #loc59])
#loc340 = loc(fused[#loc65, #loc64])
#loc341 = loc(fused[#loc67, #loc66])
#loc342 = loc(fused[#loc68, #loc69])
#loc343 = loc(fused[#loc71, #loc70])
#loc344 = loc(fused[#loc72, #loc73])
#loc345 = loc(fused[#loc75, #loc69])
#loc346 = loc(fused[#loc76, #loc77])
#loc347 = loc(fused[#loc81, #loc82])
#loc348 = loc(fused[#loc83, #loc84])
#loc349 = loc(fused[#loc85, #loc86])
#loc350 = loc(fused[#loc87, #loc88])
#loc351 = loc(fused[#loc89, #loc86])
#loc352 = loc(fused[#loc101, #loc100])
#loc353 = loc(fused[#loc102, #loc103])
#loc354 = loc(fused[#loc104, #loc105])
#loc355 = loc(fused[#loc106, #loc107])
#loc356 = loc(fused[#loc108, #loc109])
#loc357 = loc(fused[#loc110, #loc111])
#loc358 = loc(fused[#loc116, #loc117])
#loc361 = loc(fused[#loc127, #loc128])
#loc362 = loc(fused[#loc131, #loc132])
#loc363 = loc(fused[#loc135, #loc134])
#loc364 = loc(fused[#loc136, #loc137])
#loc365 = loc(fused[#loc138, #loc139])
#loc366 = loc(fused[#loc140, #loc141])
#loc367 = loc(fused[#loc142, #loc143])
#loc368 = loc(fused[#loc144, #loc145])
#loc369 = loc(fused[#loc146, #loc147])
#loc370 = loc(fused[#loc148, #loc149])
#loc371 = loc(fused[#loc148, #loc150])
#loc372 = loc(fused[#loc151, #loc152])
#loc373 = loc(fused[#loc154, #loc153])
#loc374 = loc(fused[#loc155, #loc156])
#loc375 = loc(fused[#loc158, #loc157])
#loc376 = loc(fused[#loc159, #loc160])
#loc377 = loc(fused[#loc162, #loc156])
#loc378 = loc(fused[#loc163, #loc164])
#loc379 = loc(fused[#loc167, #loc168])
#loc380 = loc(fused[#loc166, #loc168])
#loc381 = loc(fused[#loc165, #loc143])
#loc382 = loc(fused[#loc169, #loc170])
#loc383 = loc(fused[#loc171, #loc172])
#loc384 = loc(fused[#loc173, #loc170])
#loc385 = loc(fused[#loc183, #loc182])
#loc386 = loc(fused[#loc188, #loc187])
#loc387 = loc(fused[#loc190, #loc189])
#loc388 = loc(fused[#loc191, #loc192])
#loc389 = loc(fused[#loc194, #loc193])
#loc390 = loc(fused[#loc195, #loc196])
#loc391 = loc(fused[#loc198, #loc192])
#loc392 = loc(fused[#loc199, #loc200])
#loc393 = loc(fused[#loc204, #loc205])
#loc394 = loc(fused[#loc206, #loc207])
#loc395 = loc(fused[#loc208, #loc209])
#loc396 = loc(fused[#loc210, #loc211])
#loc397 = loc(fused[#loc212, #loc209])
#loc398 = loc(fused[#loc224, #loc223])
#loc399 = loc(fused[#loc225, #loc226])
#loc400 = loc(fused[#loc227, #loc228])
#loc401 = loc(fused[#loc229, #loc230])
#loc402 = loc(fused[#loc231, #loc232])
#loc403 = loc(fused[#loc233, #loc234])
#loc404 = loc(fused[#loc235, #loc236])
#loc405 = loc(fused[#loc235, #loc237])
#loc406 = loc(fused[#loc238, #loc239])
#loc407 = loc(fused[#loc241, #loc240])
#loc408 = loc(fused[#loc242, #loc243])
#loc409 = loc(fused[#loc245, #loc244])
#loc410 = loc(fused[#loc246, #loc247])
#loc411 = loc(fused[#loc249, #loc243])
#loc412 = loc(fused[#loc250, #loc251])
#loc413 = loc(fused[#loc254, #loc255])
#loc414 = loc(fused[#loc253, #loc255])
#loc415 = loc(fused[#loc252, #loc230])
#loc416 = loc(fused[#loc256, #loc257])
#loc417 = loc(fused[#loc258, #loc259])
#loc418 = loc(fused[#loc260, #loc257])
#loc419 = loc(fused[#loc268, #loc269])
#loc420 = loc(fused[#loc271, #loc270])
#loc421 = loc(fused[#loc276, #loc275])
#loc422 = loc(fused[#loc278, #loc277])
#loc423 = loc(fused[#loc279, #loc280])
#loc424 = loc(fused[#loc282, #loc281])
#loc425 = loc(fused[#loc283, #loc284])
#loc426 = loc(fused[#loc286, #loc280])
#loc427 = loc(fused[#loc287, #loc288])
#loc428 = loc(fused[#loc292, #loc293])
#loc429 = loc(fused[#loc295, #loc296])
#loc430 = loc(fused[#loc297, #loc298])
#loc431 = loc(fused[#loc299, #loc296])
#loc432 = loc(fused[#loc311, #loc310])
