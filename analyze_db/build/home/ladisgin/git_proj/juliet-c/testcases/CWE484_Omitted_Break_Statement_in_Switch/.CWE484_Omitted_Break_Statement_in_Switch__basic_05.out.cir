!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc53 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":131:10)
#loc54 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":131:14)
#loc55 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":131:20)
#loc56 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":131:32)
#loc155 = loc(fused[#loc53, #loc54])
#loc156 = loc(fused[#loc55, #loc56])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE484_Omitted_Break_Statement_in_Switch/CWE484_Omitted_Break_Statement_in_Switch__basic_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc139)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc140)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc141)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc8)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"2\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc9)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Invalid Number\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc10)
  cir.func no_proto @CWE484_Omitted_Break_Statement_in_Switch__basic_05_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc139)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc15)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc146)
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %5 = cir.const #cir.int<3> : !s32i loc(#loc22)
          %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc147)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc146)
          cir.scope {
            %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc25)
            cir.switch (%7 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc7)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc7)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc27)
                cir.yield loc(#loc26)
              } loc(#loc26)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc8)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc8)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc29)
                cir.break loc(#loc30)
              } loc(#loc28)
              cir.case(equal, [#cir.int<2> : !s32i]) {
                %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc9)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc32)
                cir.break loc(#loc33)
              } loc(#loc31)
              cir.case(default, []) {
                %8 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc10)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc10)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc35)
                cir.break loc(#loc36)
              } loc(#loc34)
              cir.yield loc(#loc23)
            } loc(#loc23)
          } loc(#loc148)
        } loc(#loc145)
      } loc(#loc144)
    } loc(#loc143)
    cir.return loc(#loc12)
  } loc(#loc142)
  cir.func no_proto @CWE484_Omitted_Break_Statement_in_Switch__basic_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc150)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc151)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc38)
  } loc(#loc149)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc152)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc153)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc50)
  cir.func @main(%arg0: !s32i loc(fused[#loc53, #loc54]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc55, #loc56])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc155)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc156)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc52)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc57)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc58)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc59)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc59)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc60)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc47)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %8 = cir.get_global @CWE484_Omitted_Break_Statement_in_Switch__basic_05_good : !cir.ptr<!cir.func<!void ()>> loc(#loc157)
    cir.call @CWE484_Omitted_Break_Statement_in_Switch__basic_05_good() : () -> () loc(#loc62)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc48)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc49)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %13 = cir.get_global @CWE484_Omitted_Break_Statement_in_Switch__basic_05_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc158)
    cir.call @CWE484_Omitted_Break_Statement_in_Switch__basic_05_bad() : () -> () loc(#loc66)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc50)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc159)
    cir.return %17 : !s32i loc(#loc159)
  } loc(#loc154)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc160)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc73)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc160)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc78)
      cir.if %2 {
        %3 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc82)
      } else {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc165)
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
          %5 = cir.const #cir.int<3> : !s32i loc(#loc88)
          %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc166)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc165)
          cir.scope {
            %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc91)
            cir.switch (%7 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc93)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc93)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc94)
                cir.break loc(#loc95)
              } loc(#loc92)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc97)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc97)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc98)
                cir.break loc(#loc99)
              } loc(#loc96)
              cir.case(equal, [#cir.int<2> : !s32i]) {
                %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc101)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc101)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc102)
                cir.break loc(#loc103)
              } loc(#loc100)
              cir.case(default, []) {
                %8 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc105)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc105)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc106)
                cir.break loc(#loc107)
              } loc(#loc104)
              cir.yield loc(#loc89)
            } loc(#loc89)
          } loc(#loc167)
        } loc(#loc164)
      } loc(#loc163)
    } loc(#loc162)
    cir.return loc(#loc75)
  } loc(#loc161)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc139)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc112)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc112)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc172)
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
          %5 = cir.const #cir.int<3> : !s32i loc(#loc119)
          %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc173)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc172)
          cir.scope {
            %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc122)
            cir.switch (%7 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc124)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc124)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc125)
                cir.break loc(#loc126)
              } loc(#loc123)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc128)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc128)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc129)
                cir.break loc(#loc130)
              } loc(#loc127)
              cir.case(equal, [#cir.int<2> : !s32i]) {
                %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc132)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc132)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc133)
                cir.break loc(#loc134)
              } loc(#loc131)
              cir.case(default, []) {
                %8 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc136)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc136)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc137)
                cir.break loc(#loc138)
              } loc(#loc135)
              cir.yield loc(#loc120)
            } loc(#loc120)
          } loc(#loc174)
        } loc(#loc171)
      } loc(#loc170)
    } loc(#loc169)
    cir.return loc(#loc109)
  } loc(#loc168)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE484_Omitted_Break_Statement_in_Switch/CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":0:0)
#loc1 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":21:1)
#loc2 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":21:25)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":36:27)
#loc8 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":38:27)
#loc9 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":41:27)
#loc10 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":44:27)
#loc11 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":26:1)
#loc12 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":49:1)
#loc13 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":28:5)
#loc14 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":48:5)
#loc15 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":28:8)
#loc16 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":29:5)
#loc17 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":30:9)
#loc18 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":47:9)
#loc19 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":31:13)
#loc20 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":31:32)
#loc21 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":31:22)
#loc22 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":31:31)
#loc23 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":33:13)
#loc24 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":46:13)
#loc25 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":33:21)
#loc26 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":35:13)
#loc27 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":36:17)
#loc28 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":37:13)
#loc29 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":38:17)
#loc30 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":39:17)
#loc31 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":40:13)
#loc32 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":41:17)
#loc33 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":42:17)
#loc34 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":43:13)
#loc35 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":44:17)
#loc36 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":45:17)
#loc37 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":116:1)
#loc38 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":120:1)
#loc39 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":118:5)
#loc40 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":118:11)
#loc41 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":119:5)
#loc42 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":119:11)
#loc43 = loc("/usr/include/stdlib.h":575:1)
#loc44 = loc("/usr/include/stdlib.h":575:41)
#loc45 = loc("/usr/include/time.h":76:1)
#loc46 = loc("/usr/include/time.h":76:38)
#loc47 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":136:15)
#loc48 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":138:15)
#loc49 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":141:15)
#loc50 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":143:15)
#loc51 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":131:1)
#loc52 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":146:1)
#loc57 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":132:1)
#loc58 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":134:27)
#loc59 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":134:22)
#loc60 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":134:5)
#loc61 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":136:5)
#loc62 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":137:5)
#loc63 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":137:61)
#loc64 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":138:5)
#loc65 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":141:5)
#loc66 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":142:5)
#loc67 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":142:60)
#loc68 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":143:5)
#loc69 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":145:12)
#loc70 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":145:5)
#loc71 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":22:1)
#loc72 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":22:26)
#loc73 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":61:19)
#loc74 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":56:1)
#loc75 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":86:1)
#loc76 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":58:5)
#loc77 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":85:5)
#loc78 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":58:8)
#loc79 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":59:5)
#loc80 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":62:5)
#loc81 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":64:5)
#loc82 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":61:9)
#loc83 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":65:9)
#loc84 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":84:9)
#loc85 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":66:13)
#loc86 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":66:32)
#loc87 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":66:22)
#loc88 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":66:31)
#loc89 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":69:13)
#loc90 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":83:13)
#loc91 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":69:21)
#loc92 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":71:13)
#loc93 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":72:27)
#loc94 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":72:17)
#loc95 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":73:17)
#loc96 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":74:13)
#loc97 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":75:27)
#loc98 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":75:17)
#loc99 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":76:17)
#loc100 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":77:13)
#loc101 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":78:27)
#loc102 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":78:17)
#loc103 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":79:17)
#loc104 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":80:13)
#loc105 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":81:27)
#loc106 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":81:17)
#loc107 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":82:17)
#loc108 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":89:1)
#loc109 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":114:1)
#loc110 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":91:5)
#loc111 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":113:5)
#loc112 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":91:8)
#loc113 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":92:5)
#loc114 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":93:9)
#loc115 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":112:9)
#loc116 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":94:13)
#loc117 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":94:32)
#loc118 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":94:22)
#loc119 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":94:31)
#loc120 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":97:13)
#loc121 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":111:13)
#loc122 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":97:21)
#loc123 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":99:13)
#loc124 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":100:27)
#loc125 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":100:17)
#loc126 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":101:17)
#loc127 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":102:13)
#loc128 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":103:27)
#loc129 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":103:17)
#loc130 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":104:17)
#loc131 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":105:13)
#loc132 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":106:27)
#loc133 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":106:17)
#loc134 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":107:17)
#loc135 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":108:13)
#loc136 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":109:27)
#loc137 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":109:17)
#loc138 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_05.c":110:17)
#loc139 = loc(fused[#loc1, #loc2])
#loc140 = loc(fused[#loc3, #loc4])
#loc141 = loc(fused[#loc5, #loc6])
#loc142 = loc(fused[#loc11, #loc12])
#loc143 = loc(fused[#loc13, #loc14])
#loc144 = loc(fused[#loc16, #loc14])
#loc145 = loc(fused[#loc17, #loc18])
#loc146 = loc(fused[#loc19, #loc20])
#loc147 = loc(fused[#loc21, #loc22])
#loc148 = loc(fused[#loc23, #loc24])
#loc149 = loc(fused[#loc37, #loc38])
#loc150 = loc(fused[#loc39, #loc40])
#loc151 = loc(fused[#loc41, #loc42])
#loc152 = loc(fused[#loc43, #loc44])
#loc153 = loc(fused[#loc45, #loc46])
#loc154 = loc(fused[#loc51, #loc52])
#loc157 = loc(fused[#loc62, #loc63])
#loc158 = loc(fused[#loc66, #loc67])
#loc159 = loc(fused[#loc70, #loc69])
#loc160 = loc(fused[#loc71, #loc72])
#loc161 = loc(fused[#loc74, #loc75])
#loc162 = loc(fused[#loc76, #loc77])
#loc163 = loc(fused[#loc79, #loc80, #loc81, #loc77])
#loc164 = loc(fused[#loc83, #loc84])
#loc165 = loc(fused[#loc85, #loc86])
#loc166 = loc(fused[#loc87, #loc88])
#loc167 = loc(fused[#loc89, #loc90])
#loc168 = loc(fused[#loc108, #loc109])
#loc169 = loc(fused[#loc110, #loc111])
#loc170 = loc(fused[#loc113, #loc111])
#loc171 = loc(fused[#loc114, #loc115])
#loc172 = loc(fused[#loc116, #loc117])
#loc173 = loc(fused[#loc118, #loc119])
#loc174 = loc(fused[#loc120, #loc121])
