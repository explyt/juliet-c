!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_scanf_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_scanf(!cir.ptr<!s8i>, ...) -> !s32i loc(#loc79)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%99s" : !cir.array<!s8i x 4>, trailing_zeros> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc3)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc80)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_scanf_15_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc11)
      cir.switch (%0 : !s32i) [
      case (equal, 6) {
        cir.scope {
          %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc84)
          %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc85)
          %3 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc84)
          cir.store %3, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc84)
          %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc17)
          cir.store %4, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc85)
          %5 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc18)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc3)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc3)
          %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
          %9 = cir.call @__isoc99_scanf(%7, %8) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc18)
        } loc(#loc83)
        cir.break loc(#loc20)
      },
      case (default) {
        %1 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc6)
        %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc6)
        cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc21)
        cir.break loc(#loc22)
      }
      ] loc(#loc9)
    } loc(#loc82)
    cir.return loc(#loc8)
  } loc(#loc81)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_scanf_15_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc87)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc25)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc88)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    cir.return loc(#loc24)
  } loc(#loc86)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"scanf failed!\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc29)
  cir.func no_proto internal private  @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc34)
      cir.switch (%0 : !s32i) [
      case (equal, 6) {
        %1 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc35)
        %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc35)
        cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc36)
        cir.break loc(#loc37)
      },
      case (default) {
        cir.scope {
          %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc92)
          %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc93)
          %3 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc92)
          cir.store %3, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc92)
          %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc43)
          cir.store %4, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc93)
          cir.scope {
            %5 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc46)
            %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc47)
            %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc47)
            %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
            %9 = cir.call @__isoc99_scanf(%7, %8) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc46)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc49)
            %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc49)
            %12 = cir.cmp(eq, %9, %11) : !s32i, !s32i loc(#loc95)
            %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc50)
            cir.if %13 {
              %14 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc29)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc29)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc52)
            } loc(#loc96)
          } loc(#loc94)
        } loc(#loc91)
        cir.break loc(#loc53)
      }
      ] loc(#loc32)
    } loc(#loc90)
    cir.return loc(#loc31)
  } loc(#loc89)
  cir.func no_proto internal private  @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc58)
      cir.switch (%0 : !s32i) [
      case (equal, 6) {
        cir.scope {
          %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc100)
          %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc101)
          %3 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc100)
          cir.store %3, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc100)
          %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc64)
          cir.store %4, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc101)
          cir.scope {
            %5 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc67)
            %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc68)
            %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc68)
            %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc69)
            %9 = cir.call @__isoc99_scanf(%7, %8) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc67)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc70)
            %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc70)
            %12 = cir.cmp(eq, %9, %11) : !s32i, !s32i loc(#loc103)
            %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc71)
            cir.if %13 {
              %14 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc73)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc73)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc74)
            } loc(#loc104)
          } loc(#loc102)
        } loc(#loc99)
        cir.break loc(#loc75)
      },
      case (default) {
        %1 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc76)
        %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc76)
        cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc77)
        cir.break loc(#loc78)
      }
      ] loc(#loc56)
    } loc(#loc98)
    cir.return loc(#loc55)
  } loc(#loc97)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_scanf_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":466:1)
#loc2 = loc("/usr/include/stdio.h":466:12)
#loc3 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":35:15)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":40:19)
#loc7 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":24:1)
#loc8 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":43:1)
#loc9 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":26:5)
#loc10 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":42:5)
#loc11 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":26:12)
#loc12 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":29:5)
#loc13 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":36:5)
#loc14 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":32:9)
#loc15 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":32:32)
#loc16 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":33:9)
#loc17 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":33:23)
#loc18 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":35:9)
#loc19 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":35:25)
#loc20 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":37:5)
#loc21 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":40:9)
#loc22 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":41:9)
#loc23 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":99:1)
#loc24 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":103:1)
#loc25 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":101:5)
#loc26 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":101:11)
#loc27 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":102:5)
#loc28 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":102:11)
#loc29 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":67:23)
#loc30 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":50:1)
#loc31 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":72:1)
#loc32 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":52:5)
#loc33 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":71:5)
#loc34 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":52:12)
#loc35 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":56:19)
#loc36 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":56:9)
#loc37 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":57:9)
#loc38 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":59:5)
#loc39 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":69:5)
#loc40 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":62:9)
#loc41 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":62:32)
#loc42 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":63:9)
#loc43 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":63:23)
#loc44 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":65:9)
#loc45 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":68:9)
#loc46 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":65:13)
#loc47 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":65:19)
#loc48 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":65:29)
#loc49 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":65:38)
#loc50 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":65:35)
#loc51 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":66:9)
#loc52 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":67:13)
#loc53 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":70:5)
#loc54 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":75:1)
#loc55 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":97:1)
#loc56 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":77:5)
#loc57 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":96:5)
#loc58 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":77:12)
#loc59 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":80:5)
#loc60 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":90:5)
#loc61 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":83:9)
#loc62 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":83:32)
#loc63 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":84:9)
#loc64 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":84:23)
#loc65 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":86:9)
#loc66 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":89:9)
#loc67 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":86:13)
#loc68 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":86:19)
#loc69 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":86:29)
#loc70 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":86:38)
#loc71 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":86:35)
#loc72 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":87:9)
#loc73 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":88:23)
#loc74 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":88:13)
#loc75 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":91:5)
#loc76 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":94:19)
#loc77 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":94:9)
#loc78 = loc("CWE252_Unchecked_Return_Value__char_scanf_15.c":95:9)
#loc79 = loc(fused[#loc1, #loc2])
#loc80 = loc(fused[#loc4, #loc5])
#loc81 = loc(fused[#loc7, #loc8])
#loc82 = loc(fused[#loc9, #loc10])
#loc83 = loc(fused[#loc12, #loc13])
#loc84 = loc(fused[#loc14, #loc15])
#loc85 = loc(fused[#loc16, #loc17])
#loc86 = loc(fused[#loc23, #loc24])
#loc87 = loc(fused[#loc25, #loc26])
#loc88 = loc(fused[#loc27, #loc28])
#loc89 = loc(fused[#loc30, #loc31])
#loc90 = loc(fused[#loc32, #loc33])
#loc91 = loc(fused[#loc38, #loc39])
#loc92 = loc(fused[#loc40, #loc41])
#loc93 = loc(fused[#loc42, #loc43])
#loc94 = loc(fused[#loc44, #loc45])
#loc95 = loc(fused[#loc46, #loc49])
#loc96 = loc(fused[#loc51, #loc45])
#loc97 = loc(fused[#loc54, #loc55])
#loc98 = loc(fused[#loc56, #loc57])
#loc99 = loc(fused[#loc59, #loc60])
#loc100 = loc(fused[#loc61, #loc62])
#loc101 = loc(fused[#loc63, #loc64])
#loc102 = loc(fused[#loc65, #loc66])
#loc103 = loc(fused[#loc67, #loc70])
#loc104 = loc(fused[#loc72, #loc66])
