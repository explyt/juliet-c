!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc147)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc149)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc150)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc151)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc152)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc150)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc151)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc12)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc12)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc12)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc12)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %9 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc153)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc12)
    cir.store %11, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc152)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc14)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc14)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc14)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc14)
    cir.store %18, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc153)
    cir.scope {
      %19 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc155)
      %20 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc18)
      %21 = cir.load %20 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
      cir.store %21, %19 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc155)
      %22 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
      cir.store %22, %19 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc156)
      %23 = cir.const #cir.int<0> : !s32i loc(#loc22)
      %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc22)
      %25 = cir.load %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
      %26 = cir.const #cir.int<0> : !s32i loc(#loc24)
      %27 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc25)
      cir.store %24, %27 : !s8i, !cir.ptr<!s8i> loc(#loc157)
      %28 = cir.load %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
      %29 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc27)
      cir.store %28, %29 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc158)
    } loc(#loc154)
    cir.scope {
      %19 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc160)
      %20 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc32)
      %21 = cir.load %20 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
      cir.store %21, %19 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc160)
      cir.scope {
        %22 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc162)
        %23 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc163)
        %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc40)
        %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc40)
        %26 = cir.const #cir.int<67> : !s32i loc(#loc41)
        %27 = cir.const #cir.int<100> : !s32i loc(#loc42)
        %28 = cir.const #cir.int<1> : !s32i loc(#loc43)
        %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc42)
        %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc42)
        cir.libc.memset %30 bytes from %25 set to %26 : !cir.ptr<!void>, !s32i, !u64i loc(#loc164)
        %31 = cir.const #cir.int<0> : !s32i loc(#loc46)
        %32 = cir.cast(integral, %31 : !s32i), !s8i loc(#loc46)
        %33 = cir.const #cir.int<100> : !s32i loc(#loc47)
        %34 = cir.const #cir.int<1> : !s32i loc(#loc48)
        %35 = cir.binop(sub, %33, %34) nsw : !s32i loc(#loc47)
        %36 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc49)
        %37 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %35 : !s32i), !cir.ptr<!s8i> loc(#loc49)
        cir.store %32, %37 : !s8i, !cir.ptr<!s8i> loc(#loc165)
        cir.scope {
          %46 = cir.const #cir.int<0> : !s32i loc(#loc52)
          %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc52)
          cir.store %47, %22 : !u64i, !cir.ptr<!u64i> loc(#loc167)
          cir.for : cond {
            %48 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc54)
            %49 = cir.const #cir.int<100> : !s32i loc(#loc55)
            %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc55)
            %51 = cir.cmp(lt, %48, %50) : !u64i, !cir.bool loc(#loc168)
            cir.condition(%51) loc(#loc56)
          } body {
            cir.scope {
              %48 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc58)
              %49 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc59)
              %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc59)
              %51 = cir.load %50 : !cir.ptr<!s8i>, !s8i loc(#loc59)
              %52 = cir.load %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
              %53 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc61)
              %54 = cir.ptr_stride(%52 : !cir.ptr<!s8i>, %53 : !u64i), !cir.ptr<!s8i> loc(#loc62)
              cir.store %51, %54 : !s8i, !cir.ptr<!s8i> loc(#loc170)
            } loc(#loc169)
            cir.yield loc(#loc51)
          } step {
            %48 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc64)
            %49 = cir.unary(inc, %48) : !u64i, !u64i loc(#loc65)
            cir.store %49, %22 : !u64i, !cir.ptr<!u64i> loc(#loc171)
            cir.yield loc(#loc166)
          } loc(#loc166)
        } loc(#loc166)
        %38 = cir.const #cir.int<0> : !s32i loc(#loc66)
        %39 = cir.cast(integral, %38 : !s32i), !s8i loc(#loc66)
        %40 = cir.load %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
        %41 = cir.const #cir.int<100> : !s32i loc(#loc68)
        %42 = cir.const #cir.int<1> : !s32i loc(#loc69)
        %43 = cir.binop(sub, %41, %42) nsw : !s32i loc(#loc68)
        %44 = cir.ptr_stride(%40 : !cir.ptr<!s8i>, %43 : !s32i), !cir.ptr<!s8i> loc(#loc70)
        cir.store %39, %44 : !s8i, !cir.ptr<!s8i> loc(#loc172)
        %45 = cir.load %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
        cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc72)
      } loc(#loc161)
    } loc(#loc159)
    cir.return loc(#loc4)
  } loc(#loc148)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc174)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc75)
    cir.return loc(#loc74)
  } loc(#loc173)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc176)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc177)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc178)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc179)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc177)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc178)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc86)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc86)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc86)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc86)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc86)
    %9 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc180)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc86)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc86)
    cir.store %11, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc179)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc88)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc88)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc88)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc88)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc88)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc88)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc88)
    cir.store %18, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc180)
    cir.scope {
      %19 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc182)
      %20 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc92)
      %21 = cir.load %20 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
      cir.store %21, %19 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc182)
      %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
      cir.store %22, %19 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc183)
      %23 = cir.const #cir.int<0> : !s32i loc(#loc96)
      %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc96)
      %25 = cir.load %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
      %26 = cir.const #cir.int<0> : !s32i loc(#loc98)
      %27 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc99)
      cir.store %24, %27 : !s8i, !cir.ptr<!s8i> loc(#loc184)
      %28 = cir.load %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
      %29 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc101)
      cir.store %28, %29 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc185)
    } loc(#loc181)
    cir.scope {
      %19 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc187)
      %20 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc106)
      %21 = cir.load %20 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
      cir.store %21, %19 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc187)
      cir.scope {
        %22 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc189)
        %23 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc190)
        %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc114)
        %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc114)
        %26 = cir.const #cir.int<67> : !s32i loc(#loc115)
        %27 = cir.const #cir.int<100> : !s32i loc(#loc116)
        %28 = cir.const #cir.int<1> : !s32i loc(#loc117)
        %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc116)
        %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc116)
        cir.libc.memset %30 bytes from %25 set to %26 : !cir.ptr<!void>, !s32i, !u64i loc(#loc191)
        %31 = cir.const #cir.int<0> : !s32i loc(#loc120)
        %32 = cir.cast(integral, %31 : !s32i), !s8i loc(#loc120)
        %33 = cir.const #cir.int<100> : !s32i loc(#loc121)
        %34 = cir.const #cir.int<1> : !s32i loc(#loc122)
        %35 = cir.binop(sub, %33, %34) nsw : !s32i loc(#loc121)
        %36 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc123)
        %37 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %35 : !s32i), !cir.ptr<!s8i> loc(#loc123)
        cir.store %32, %37 : !s8i, !cir.ptr<!s8i> loc(#loc192)
        cir.scope {
          %46 = cir.const #cir.int<0> : !s32i loc(#loc126)
          %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc126)
          cir.store %47, %22 : !u64i, !cir.ptr<!u64i> loc(#loc194)
          cir.for : cond {
            %48 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc128)
            %49 = cir.const #cir.int<100> : !s32i loc(#loc129)
            %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc129)
            %51 = cir.cmp(lt, %48, %50) : !u64i, !cir.bool loc(#loc195)
            cir.condition(%51) loc(#loc130)
          } body {
            cir.scope {
              %48 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc132)
              %49 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc133)
              %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc133)
              %51 = cir.load %50 : !cir.ptr<!s8i>, !s8i loc(#loc133)
              %52 = cir.load %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
              %53 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc135)
              %54 = cir.ptr_stride(%52 : !cir.ptr<!s8i>, %53 : !u64i), !cir.ptr<!s8i> loc(#loc136)
              cir.store %51, %54 : !s8i, !cir.ptr<!s8i> loc(#loc197)
            } loc(#loc196)
            cir.yield loc(#loc125)
          } step {
            %48 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc138)
            %49 = cir.unary(inc, %48) : !u64i, !u64i loc(#loc139)
            cir.store %49, %22 : !u64i, !cir.ptr<!u64i> loc(#loc198)
            cir.yield loc(#loc193)
          } loc(#loc193)
        } loc(#loc193)
        %38 = cir.const #cir.int<0> : !s32i loc(#loc140)
        %39 = cir.cast(integral, %38 : !s32i), !s8i loc(#loc140)
        %40 = cir.load %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
        %41 = cir.const #cir.int<100> : !s32i loc(#loc142)
        %42 = cir.const #cir.int<1> : !s32i loc(#loc143)
        %43 = cir.binop(sub, %41, %42) nsw : !s32i loc(#loc142)
        %44 = cir.ptr_stride(%40 : !cir.ptr<!s8i>, %43 : !s32i), !cir.ptr<!s8i> loc(#loc144)
        cir.store %39, %44 : !s8i, !cir.ptr<!s8i> loc(#loc199)
        %45 = cir.load %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
        cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc146)
      } loc(#loc188)
    } loc(#loc186)
    cir.return loc(#loc78)
  } loc(#loc175)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":23:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":54:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":25:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":25:12)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":26:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":26:25)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":27:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":27:25)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":28:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":28:36)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":29:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":29:37)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":30:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":37:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":31:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":31:24)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":31:23)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":34:16)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":34:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":35:19)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":35:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":35:14)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":35:15)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":36:21)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":36:10)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":36:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":38:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":53:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":39:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":39:24)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":39:23)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":40:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":52:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":41:13)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":41:20)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":42:13)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":42:28)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":43:20)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":43:28)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":43:33)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":43:37)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":43:13)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":43:38)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":44:29)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":44:20)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":44:24)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":44:13)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":46:13)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":49:13)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":46:22)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":46:18)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":46:25)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":46:29)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":46:27)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":47:13)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":48:34)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":48:27)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":48:17)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":48:22)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":48:23)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":48:35)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":46:35)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":46:34)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":50:27)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":50:13)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":50:18)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":50:22)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":50:23)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":51:23)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":51:13)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":93:1)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":96:1)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":95:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":95:13)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":61:1)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":91:1)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":63:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":63:12)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":64:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":64:25)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":65:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":65:25)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":66:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":66:36)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":67:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":67:37)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":68:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":74:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":69:9)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":69:24)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":69:23)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":71:16)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":71:9)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":72:19)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":72:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":72:14)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":72:15)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":73:21)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":73:10)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":73:9)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":75:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":90:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":76:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":76:24)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":76:23)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":77:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":89:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":78:13)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":78:20)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":79:13)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":79:28)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":80:20)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":80:28)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":80:33)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":80:37)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":80:13)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":80:38)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":81:29)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":81:20)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":81:24)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":81:13)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":83:13)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":86:13)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":83:22)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":83:18)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":83:25)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":83:29)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":83:27)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":84:13)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":85:34)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":85:27)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":85:17)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":85:22)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":85:23)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":85:35)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":83:35)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":83:34)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":87:27)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":87:13)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":87:18)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":87:22)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":87:23)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":88:23)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c":88:13)
#loc147 = loc(fused[#loc1, #loc2])
#loc148 = loc(fused[#loc3, #loc4])
#loc149 = loc(fused[#loc5, #loc6])
#loc150 = loc(fused[#loc7, #loc8])
#loc151 = loc(fused[#loc9, #loc10])
#loc152 = loc(fused[#loc11, #loc12])
#loc153 = loc(fused[#loc13, #loc14])
#loc154 = loc(fused[#loc15, #loc16])
#loc155 = loc(fused[#loc17, #loc18])
#loc156 = loc(fused[#loc21, #loc20])
#loc157 = loc(fused[#loc23, #loc22])
#loc158 = loc(fused[#loc28, #loc26])
#loc159 = loc(fused[#loc29, #loc30])
#loc160 = loc(fused[#loc31, #loc32])
#loc161 = loc(fused[#loc34, #loc35])
#loc162 = loc(fused[#loc36, #loc37])
#loc163 = loc(fused[#loc38, #loc39])
#loc164 = loc(fused[#loc44, #loc45])
#loc165 = loc(fused[#loc49, #loc46])
#loc166 = loc(fused[#loc50, #loc51])
#loc167 = loc(fused[#loc53, #loc52])
#loc168 = loc(fused[#loc54, #loc55])
#loc169 = loc(fused[#loc57, #loc51])
#loc170 = loc(fused[#loc60, #loc63])
#loc171 = loc(fused[#loc65, #loc64])
#loc172 = loc(fused[#loc67, #loc66])
#loc173 = loc(fused[#loc73, #loc74])
#loc174 = loc(fused[#loc75, #loc76])
#loc175 = loc(fused[#loc77, #loc78])
#loc176 = loc(fused[#loc79, #loc80])
#loc177 = loc(fused[#loc81, #loc82])
#loc178 = loc(fused[#loc83, #loc84])
#loc179 = loc(fused[#loc85, #loc86])
#loc180 = loc(fused[#loc87, #loc88])
#loc181 = loc(fused[#loc89, #loc90])
#loc182 = loc(fused[#loc91, #loc92])
#loc183 = loc(fused[#loc95, #loc94])
#loc184 = loc(fused[#loc97, #loc96])
#loc185 = loc(fused[#loc102, #loc100])
#loc186 = loc(fused[#loc103, #loc104])
#loc187 = loc(fused[#loc105, #loc106])
#loc188 = loc(fused[#loc108, #loc109])
#loc189 = loc(fused[#loc110, #loc111])
#loc190 = loc(fused[#loc112, #loc113])
#loc191 = loc(fused[#loc118, #loc119])
#loc192 = loc(fused[#loc123, #loc120])
#loc193 = loc(fused[#loc124, #loc125])
#loc194 = loc(fused[#loc127, #loc126])
#loc195 = loc(fused[#loc128, #loc129])
#loc196 = loc(fused[#loc131, #loc125])
#loc197 = loc(fused[#loc134, #loc137])
#loc198 = loc(fused[#loc139, #loc138])
#loc199 = loc(fused[#loc141, #loc140])
