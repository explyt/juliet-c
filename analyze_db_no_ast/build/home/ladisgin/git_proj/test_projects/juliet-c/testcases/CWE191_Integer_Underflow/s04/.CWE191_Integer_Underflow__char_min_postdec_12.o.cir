!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__char_min_postdec_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc160)
  cir.func private  @printHexCharLine(!s8i) loc(#loc161)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc162)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto  @CWE191_Integer_Underflow__char_min_postdec_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc164)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc12)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc12)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc165)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc167)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc167)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc16)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc16)
      cir.if %6 {
        %7 = cir.const #cir.int<127> : !s32i loc(#loc21)
        %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc21)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc21)
        %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc21)
        cir.store %11, %0 : !s8i, !cir.ptr<!s8i> loc(#loc169)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc23)
        %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc24)
        %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc24)
        cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc170)
      } loc(#loc168)
    } loc(#loc166)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc172)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc172)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc28)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc28)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc175)
          %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc37)
          %9 = cir.unary(dec, %8) : !s8i, !s8i loc(#loc38)
          cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc176)
          %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc36)
          cir.store %10, %7 : !s8i, !cir.ptr<!s8i> loc(#loc175)
          %11 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc39)
          cir.call @printHexCharLine(%11) : (!s8i) -> () loc(#loc40)
        } loc(#loc174)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc43)
          %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc43)
          %9 = cir.const #cir.int<127> : !s32i loc(#loc44)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc44)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc44)
          %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc44)
          %13 = cir.cmp(gt, %8, %12) : !s32i, !s32i loc(#loc178)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc45)
          cir.if %14 {
            %15 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc180)
            %16 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc51)
            %17 = cir.unary(dec, %16) : !s8i, !s8i loc(#loc52)
            cir.store %17, %0 : !s8i, !cir.ptr<!s8i> loc(#loc181)
            %18 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc50)
            cir.store %18, %15 : !s8i, !cir.ptr<!s8i> loc(#loc180)
            %19 = cir.load %15 : !cir.ptr<!s8i>, !s8i loc(#loc53)
            cir.call @printHexCharLine(%19) : (!s8i) -> () loc(#loc54)
          } else {
            %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc7)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc7)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc55)
          } loc(#loc179)
        } loc(#loc177)
      } loc(#loc173)
    } loc(#loc171)
    cir.return loc(#loc9)
  } loc(#loc163)
  cir.func no_proto  @CWE191_Integer_Underflow__char_min_postdec_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    cir.return loc(#loc57)
  } loc(#loc182)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc186)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc66)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc66)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc187)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc189)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc189)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc70)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc70)
      cir.if %6 {
        %7 = cir.const #cir.int<127> : !s32i loc(#loc75)
        %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc75)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc75)
        %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc75)
        %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc75)
        cir.store %11, %0 : !s8i, !cir.ptr<!s8i> loc(#loc191)
      } else {
        %7 = cir.const #cir.int<127> : !s32i loc(#loc77)
        %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc77)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc77)
        %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc77)
        %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc77)
        cir.store %11, %0 : !s8i, !cir.ptr<!s8i> loc(#loc192)
      } loc(#loc190)
    } loc(#loc188)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc194)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc194)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc81)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc81)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc88)
          %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc88)
          %9 = cir.const #cir.int<127> : !s32i loc(#loc89)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc89)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc89)
          %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc89)
          %13 = cir.cmp(gt, %8, %12) : !s32i, !s32i loc(#loc197)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc90)
          cir.if %14 {
            %15 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc199)
            %16 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc96)
            %17 = cir.unary(dec, %16) : !s8i, !s8i loc(#loc97)
            cir.store %17, %0 : !s8i, !cir.ptr<!s8i> loc(#loc200)
            %18 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc95)
            cir.store %18, %15 : !s8i, !cir.ptr<!s8i> loc(#loc199)
            %19 = cir.load %15 : !cir.ptr<!s8i>, !s8i loc(#loc98)
            cir.call @printHexCharLine(%19) : (!s8i) -> () loc(#loc99)
          } else {
            %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc100)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc100)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc101)
          } loc(#loc198)
        } loc(#loc196)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc104)
          %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc104)
          %9 = cir.const #cir.int<127> : !s32i loc(#loc105)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc105)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc105)
          %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc105)
          %13 = cir.cmp(gt, %8, %12) : !s32i, !s32i loc(#loc202)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc106)
          cir.if %14 {
            %15 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc204)
            %16 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc112)
            %17 = cir.unary(dec, %16) : !s8i, !s8i loc(#loc113)
            cir.store %17, %0 : !s8i, !cir.ptr<!s8i> loc(#loc205)
            %18 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc111)
            cir.store %18, %15 : !s8i, !cir.ptr<!s8i> loc(#loc204)
            %19 = cir.load %15 : !cir.ptr<!s8i>, !s8i loc(#loc114)
            cir.call @printHexCharLine(%19) : (!s8i) -> () loc(#loc115)
          } else {
            %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc116)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc116)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc117)
          } loc(#loc203)
        } loc(#loc201)
      } loc(#loc195)
    } loc(#loc193)
    cir.return loc(#loc63)
  } loc(#loc185)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc207)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc122)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc122)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc208)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc210)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc210)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc126)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc126)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc131)
        %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc132)
        %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc132)
        cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc212)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc134)
        %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc135)
        %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc135)
        cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc213)
      } loc(#loc211)
    } loc(#loc209)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc215)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc215)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc139)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc139)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc218)
          %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc148)
          %9 = cir.unary(dec, %8) : !s8i, !s8i loc(#loc149)
          cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc219)
          %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc147)
          cir.store %10, %7 : !s8i, !cir.ptr<!s8i> loc(#loc218)
          %11 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc150)
          cir.call @printHexCharLine(%11) : (!s8i) -> () loc(#loc151)
        } loc(#loc217)
      } else {
        cir.scope {
          %7 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc221)
          %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc156)
          %9 = cir.unary(dec, %8) : !s8i, !s8i loc(#loc157)
          cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc222)
          %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc155)
          cir.store %10, %7 : !s8i, !cir.ptr<!s8i> loc(#loc221)
          %11 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc158)
          cir.call @printHexCharLine(%11) : (!s8i) -> () loc(#loc159)
        } loc(#loc220)
      } loc(#loc216)
    } loc(#loc214)
    cir.return loc(#loc119)
  } loc(#loc206)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__char_min_postdec_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":56:23)
#loc8 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":22:1)
#loc9 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":59:1)
#loc10 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":24:5)
#loc11 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":24:10)
#loc12 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":25:12)
#loc13 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":25:5)
#loc14 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":26:5)
#loc15 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":35:5)
#loc16 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":26:8)
#loc17 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":26:33)
#loc18 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":27:5)
#loc19 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":30:5)
#loc20 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":32:5)
#loc21 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":29:16)
#loc22 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":29:9)
#loc23 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":34:17)
#loc24 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":34:16)
#loc25 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":34:9)
#loc26 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":36:5)
#loc27 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":58:5)
#loc28 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":36:8)
#loc29 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":36:33)
#loc30 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":37:5)
#loc31 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":44:5)
#loc32 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":46:5)
#loc33 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":38:9)
#loc34 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":43:9)
#loc35 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":41:13)
#loc36 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":41:27)
#loc37 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":40:17)
#loc38 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":40:13)
#loc39 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":42:30)
#loc40 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":42:13)
#loc41 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":48:9)
#loc42 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":57:9)
#loc43 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":48:13)
#loc44 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":48:20)
#loc45 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":48:18)
#loc46 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":49:9)
#loc47 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":53:9)
#loc48 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":55:9)
#loc49 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":51:13)
#loc50 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":51:27)
#loc51 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":50:17)
#loc52 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":50:13)
#loc53 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":52:30)
#loc54 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":52:13)
#loc55 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":56:13)
#loc56 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":149:1)
#loc57 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":153:1)
#loc58 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":151:5)
#loc59 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":151:13)
#loc60 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":152:5)
#loc61 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":152:13)
#loc62 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":68:1)
#loc63 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":110:1)
#loc64 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":70:5)
#loc65 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":70:10)
#loc66 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":71:12)
#loc67 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":71:5)
#loc68 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":72:5)
#loc69 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":81:5)
#loc70 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":72:8)
#loc71 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":72:33)
#loc72 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":73:5)
#loc73 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":76:5)
#loc74 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":78:5)
#loc75 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":75:16)
#loc76 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":75:9)
#loc77 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":80:16)
#loc78 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":80:9)
#loc79 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":82:5)
#loc80 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":109:5)
#loc81 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":82:8)
#loc82 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":82:33)
#loc83 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":83:5)
#loc84 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":95:5)
#loc85 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":97:5)
#loc86 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":85:9)
#loc87 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":94:9)
#loc88 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":85:13)
#loc89 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":85:20)
#loc90 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":85:18)
#loc91 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":86:9)
#loc92 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":90:9)
#loc93 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":92:9)
#loc94 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":88:13)
#loc95 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":88:27)
#loc96 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":87:17)
#loc97 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":87:13)
#loc98 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":89:30)
#loc99 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":89:13)
#loc100 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":93:23)
#loc101 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":93:13)
#loc102 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":99:9)
#loc103 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":108:9)
#loc104 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":99:13)
#loc105 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":99:20)
#loc106 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":99:18)
#loc107 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":100:9)
#loc108 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":104:9)
#loc109 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":106:9)
#loc110 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":102:13)
#loc111 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":102:27)
#loc112 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":101:17)
#loc113 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":101:13)
#loc114 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":103:30)
#loc115 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":103:13)
#loc116 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":107:23)
#loc117 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":107:13)
#loc118 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":115:1)
#loc119 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":147:1)
#loc120 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":117:5)
#loc121 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":117:10)
#loc122 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":118:12)
#loc123 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":118:5)
#loc124 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":119:5)
#loc125 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":128:5)
#loc126 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":119:8)
#loc127 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":119:33)
#loc128 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":120:5)
#loc129 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":123:5)
#loc130 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":125:5)
#loc131 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":122:17)
#loc132 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":122:16)
#loc133 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":122:9)
#loc134 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":127:17)
#loc135 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":127:16)
#loc136 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":127:9)
#loc137 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":129:5)
#loc138 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":146:5)
#loc139 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":129:8)
#loc140 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":129:33)
#loc141 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":130:5)
#loc142 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":137:5)
#loc143 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":139:5)
#loc144 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":131:9)
#loc145 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":136:9)
#loc146 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":134:13)
#loc147 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":134:27)
#loc148 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":133:17)
#loc149 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":133:13)
#loc150 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":135:30)
#loc151 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":135:13)
#loc152 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":140:9)
#loc153 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":145:9)
#loc154 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":143:13)
#loc155 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":143:27)
#loc156 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":142:17)
#loc157 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":142:13)
#loc158 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":144:30)
#loc159 = loc("CWE191_Integer_Underflow__char_min_postdec_12.c":144:13)
#loc160 = loc(fused[#loc1, #loc2])
#loc161 = loc(fused[#loc3, #loc4])
#loc162 = loc(fused[#loc5, #loc6])
#loc163 = loc(fused[#loc8, #loc9])
#loc164 = loc(fused[#loc10, #loc11])
#loc165 = loc(fused[#loc13, #loc12])
#loc166 = loc(fused[#loc14, #loc15])
#loc167 = loc(fused[#loc16, #loc17])
#loc168 = loc(fused[#loc18, #loc19, #loc20, #loc15])
#loc169 = loc(fused[#loc22, #loc21])
#loc170 = loc(fused[#loc25, #loc23])
#loc171 = loc(fused[#loc26, #loc27])
#loc172 = loc(fused[#loc28, #loc29])
#loc173 = loc(fused[#loc30, #loc31, #loc32, #loc27])
#loc174 = loc(fused[#loc33, #loc34])
#loc175 = loc(fused[#loc35, #loc36])
#loc176 = loc(fused[#loc38, #loc37])
#loc177 = loc(fused[#loc41, #loc42])
#loc178 = loc(fused[#loc43, #loc44])
#loc179 = loc(fused[#loc46, #loc47, #loc48, #loc42])
#loc180 = loc(fused[#loc49, #loc50])
#loc181 = loc(fused[#loc52, #loc51])
#loc182 = loc(fused[#loc56, #loc57])
#loc183 = loc(fused[#loc58, #loc59])
#loc184 = loc(fused[#loc60, #loc61])
#loc185 = loc(fused[#loc62, #loc63])
#loc186 = loc(fused[#loc64, #loc65])
#loc187 = loc(fused[#loc67, #loc66])
#loc188 = loc(fused[#loc68, #loc69])
#loc189 = loc(fused[#loc70, #loc71])
#loc190 = loc(fused[#loc72, #loc73, #loc74, #loc69])
#loc191 = loc(fused[#loc76, #loc75])
#loc192 = loc(fused[#loc78, #loc77])
#loc193 = loc(fused[#loc79, #loc80])
#loc194 = loc(fused[#loc81, #loc82])
#loc195 = loc(fused[#loc83, #loc84, #loc85, #loc80])
#loc196 = loc(fused[#loc86, #loc87])
#loc197 = loc(fused[#loc88, #loc89])
#loc198 = loc(fused[#loc91, #loc92, #loc93, #loc87])
#loc199 = loc(fused[#loc94, #loc95])
#loc200 = loc(fused[#loc97, #loc96])
#loc201 = loc(fused[#loc102, #loc103])
#loc202 = loc(fused[#loc104, #loc105])
#loc203 = loc(fused[#loc107, #loc108, #loc109, #loc103])
#loc204 = loc(fused[#loc110, #loc111])
#loc205 = loc(fused[#loc113, #loc112])
#loc206 = loc(fused[#loc118, #loc119])
#loc207 = loc(fused[#loc120, #loc121])
#loc208 = loc(fused[#loc123, #loc122])
#loc209 = loc(fused[#loc124, #loc125])
#loc210 = loc(fused[#loc126, #loc127])
#loc211 = loc(fused[#loc128, #loc129, #loc130, #loc125])
#loc212 = loc(fused[#loc133, #loc131])
#loc213 = loc(fused[#loc136, #loc134])
#loc214 = loc(fused[#loc137, #loc138])
#loc215 = loc(fused[#loc139, #loc140])
#loc216 = loc(fused[#loc141, #loc142, #loc143, #loc138])
#loc217 = loc(fused[#loc144, #loc145])
#loc218 = loc(fused[#loc146, #loc147])
#loc219 = loc(fused[#loc149, #loc148])
#loc220 = loc(fused[#loc152, #loc153])
#loc221 = loc(fused[#loc154, #loc155])
#loc222 = loc(fused[#loc157, #loc156])
