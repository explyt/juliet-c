!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc53 = loc("CWE190_Integer_Overflow__int_max_add_32.c":116:10)
#loc54 = loc("CWE190_Integer_Overflow__int_max_add_32.c":116:14)
#loc55 = loc("CWE190_Integer_Overflow__int_max_add_32.c":116:20)
#loc56 = loc("CWE190_Integer_Overflow__int_max_add_32.c":116:32)
#loc163 = loc(fused[#loc53, #loc54])
#loc164 = loc(fused[#loc55, #loc56])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_add_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc142)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_add_32_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc144)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc145)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc146)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc145)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc146)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc149)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc16)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc149)
      %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc18)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc150)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc20)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    } loc(#loc148)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc153)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc27)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc153)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc155)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc32)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc32)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc155)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc33)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc34)
      } loc(#loc154)
    } loc(#loc152)
    cir.return loc(#loc4)
  } loc(#loc143)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_add_32_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc157)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc158)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc156)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc159)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc160)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc161)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc50)
  cir.func @main(%arg0: !s32i loc(fused[#loc53, #loc54]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc55, #loc56])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc163)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc164)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc52)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc57)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc58)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc59)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc59)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc60)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc47)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_max_add_32_good : !cir.ptr<!cir.func<!void ()>> loc(#loc165)
    cir.call @CWE190_Integer_Overflow__int_max_add_32_good() : () -> () loc(#loc62)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc48)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc49)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_max_add_32_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc166)
    cir.call @CWE190_Integer_Overflow__int_max_add_32_bad() : () -> () loc(#loc66)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc50)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc167)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc167)
    cir.return %17 : !s32i loc(#loc167)
  } loc(#loc162)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc169)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc170)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc171)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc170)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc171)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc79)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc174)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc85)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc174)
      %7 = cir.const #cir.int<2> : !s32i loc(#loc86)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc175)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc88)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc89)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    } loc(#loc173)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc178)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc94)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc95)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc178)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc180)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc100)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc99)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc100)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc180)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc101)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc102)
      } loc(#loc179)
    } loc(#loc177)
    cir.return loc(#loc72)
  } loc(#loc168)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc103)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc183)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc184)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc183)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc184)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc112)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc185)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc187)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc118)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc187)
      %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc119)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc188)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc121)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc122)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    } loc(#loc186)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc191)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc127)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc128)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc191)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc131)
        %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc132)
        %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc193)
        cir.if %9 {
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc195)
          %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc138)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc137)
          %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc138)
          cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc195)
          %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc139)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc140)
        } else {
          %10 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc103)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc103)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc141)
        } loc(#loc194)
      } loc(#loc192)
    } loc(#loc190)
    cir.return loc(#loc105)
  } loc(#loc181)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_add_32.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_add_32.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_add_32.c":43:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_add_32.c":24:5)
#loc6 = loc("CWE190_Integer_Overflow__int_max_add_32.c":24:9)
#loc7 = loc("CWE190_Integer_Overflow__int_max_add_32.c":25:5)
#loc8 = loc("CWE190_Integer_Overflow__int_max_add_32.c":25:22)
#loc9 = loc("CWE190_Integer_Overflow__int_max_add_32.c":26:5)
#loc10 = loc("CWE190_Integer_Overflow__int_max_add_32.c":26:22)
#loc11 = loc("CWE190_Integer_Overflow__int_max_add_32.c":28:12)
#loc12 = loc("CWE190_Integer_Overflow__int_max_add_32.c":28:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_add_32.c":29:5)
#loc14 = loc("CWE190_Integer_Overflow__int_max_add_32.c":34:5)
#loc15 = loc("CWE190_Integer_Overflow__int_max_add_32.c":30:9)
#loc16 = loc("CWE190_Integer_Overflow__int_max_add_32.c":30:21)
#loc17 = loc("CWE190_Integer_Overflow__int_max_add_32.c":30:20)
#loc18 = loc("CWE190_Integer_Overflow__int_max_add_32.c":32:16)
#loc19 = loc("CWE190_Integer_Overflow__int_max_add_32.c":32:9)
#loc20 = loc("CWE190_Integer_Overflow__int_max_add_32.c":33:21)
#loc21 = loc("CWE190_Integer_Overflow__int_max_add_32.c":33:10)
#loc22 = loc("CWE190_Integer_Overflow__int_max_add_32.c":33:9)
#loc23 = loc("CWE190_Integer_Overflow__int_max_add_32.c":35:5)
#loc24 = loc("CWE190_Integer_Overflow__int_max_add_32.c":42:5)
#loc25 = loc("CWE190_Integer_Overflow__int_max_add_32.c":36:9)
#loc26 = loc("CWE190_Integer_Overflow__int_max_add_32.c":36:21)
#loc27 = loc("CWE190_Integer_Overflow__int_max_add_32.c":36:20)
#loc28 = loc("CWE190_Integer_Overflow__int_max_add_32.c":37:9)
#loc29 = loc("CWE190_Integer_Overflow__int_max_add_32.c":41:9)
#loc30 = loc("CWE190_Integer_Overflow__int_max_add_32.c":39:13)
#loc31 = loc("CWE190_Integer_Overflow__int_max_add_32.c":39:33)
#loc32 = loc("CWE190_Integer_Overflow__int_max_add_32.c":39:26)
#loc33 = loc("CWE190_Integer_Overflow__int_max_add_32.c":40:26)
#loc34 = loc("CWE190_Integer_Overflow__int_max_add_32.c":40:13)
#loc35 = loc("CWE190_Integer_Overflow__int_max_add_32.c":102:1)
#loc36 = loc("CWE190_Integer_Overflow__int_max_add_32.c":106:1)
#loc37 = loc("CWE190_Integer_Overflow__int_max_add_32.c":104:5)
#loc38 = loc("CWE190_Integer_Overflow__int_max_add_32.c":104:13)
#loc39 = loc("CWE190_Integer_Overflow__int_max_add_32.c":105:5)
#loc40 = loc("CWE190_Integer_Overflow__int_max_add_32.c":105:13)
#loc41 = loc("/usr/include/stdlib.h":575:1)
#loc42 = loc("/usr/include/stdlib.h":575:41)
#loc43 = loc("/usr/include/time.h":76:1)
#loc44 = loc("/usr/include/time.h":76:38)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE190_Integer_Overflow__int_max_add_32.c":121:15)
#loc48 = loc("CWE190_Integer_Overflow__int_max_add_32.c":123:15)
#loc49 = loc("CWE190_Integer_Overflow__int_max_add_32.c":126:15)
#loc50 = loc("CWE190_Integer_Overflow__int_max_add_32.c":128:15)
#loc51 = loc("CWE190_Integer_Overflow__int_max_add_32.c":116:1)
#loc52 = loc("CWE190_Integer_Overflow__int_max_add_32.c":131:1)
#loc57 = loc("CWE190_Integer_Overflow__int_max_add_32.c":117:1)
#loc58 = loc("CWE190_Integer_Overflow__int_max_add_32.c":119:27)
#loc59 = loc("CWE190_Integer_Overflow__int_max_add_32.c":119:22)
#loc60 = loc("CWE190_Integer_Overflow__int_max_add_32.c":119:5)
#loc61 = loc("CWE190_Integer_Overflow__int_max_add_32.c":121:5)
#loc62 = loc("CWE190_Integer_Overflow__int_max_add_32.c":122:5)
#loc63 = loc("CWE190_Integer_Overflow__int_max_add_32.c":122:50)
#loc64 = loc("CWE190_Integer_Overflow__int_max_add_32.c":123:5)
#loc65 = loc("CWE190_Integer_Overflow__int_max_add_32.c":126:5)
#loc66 = loc("CWE190_Integer_Overflow__int_max_add_32.c":127:5)
#loc67 = loc("CWE190_Integer_Overflow__int_max_add_32.c":127:49)
#loc68 = loc("CWE190_Integer_Overflow__int_max_add_32.c":128:5)
#loc69 = loc("CWE190_Integer_Overflow__int_max_add_32.c":130:12)
#loc70 = loc("CWE190_Integer_Overflow__int_max_add_32.c":130:5)
#loc71 = loc("CWE190_Integer_Overflow__int_max_add_32.c":50:1)
#loc72 = loc("CWE190_Integer_Overflow__int_max_add_32.c":71:1)
#loc73 = loc("CWE190_Integer_Overflow__int_max_add_32.c":52:5)
#loc74 = loc("CWE190_Integer_Overflow__int_max_add_32.c":52:9)
#loc75 = loc("CWE190_Integer_Overflow__int_max_add_32.c":53:5)
#loc76 = loc("CWE190_Integer_Overflow__int_max_add_32.c":53:22)
#loc77 = loc("CWE190_Integer_Overflow__int_max_add_32.c":54:5)
#loc78 = loc("CWE190_Integer_Overflow__int_max_add_32.c":54:22)
#loc79 = loc("CWE190_Integer_Overflow__int_max_add_32.c":56:12)
#loc80 = loc("CWE190_Integer_Overflow__int_max_add_32.c":56:5)
#loc81 = loc("CWE190_Integer_Overflow__int_max_add_32.c":57:5)
#loc82 = loc("CWE190_Integer_Overflow__int_max_add_32.c":62:5)
#loc83 = loc("CWE190_Integer_Overflow__int_max_add_32.c":58:9)
#loc84 = loc("CWE190_Integer_Overflow__int_max_add_32.c":58:21)
#loc85 = loc("CWE190_Integer_Overflow__int_max_add_32.c":58:20)
#loc86 = loc("CWE190_Integer_Overflow__int_max_add_32.c":60:16)
#loc87 = loc("CWE190_Integer_Overflow__int_max_add_32.c":60:9)
#loc88 = loc("CWE190_Integer_Overflow__int_max_add_32.c":61:21)
#loc89 = loc("CWE190_Integer_Overflow__int_max_add_32.c":61:10)
#loc90 = loc("CWE190_Integer_Overflow__int_max_add_32.c":61:9)
#loc91 = loc("CWE190_Integer_Overflow__int_max_add_32.c":63:5)
#loc92 = loc("CWE190_Integer_Overflow__int_max_add_32.c":70:5)
#loc93 = loc("CWE190_Integer_Overflow__int_max_add_32.c":64:9)
#loc94 = loc("CWE190_Integer_Overflow__int_max_add_32.c":64:21)
#loc95 = loc("CWE190_Integer_Overflow__int_max_add_32.c":64:20)
#loc96 = loc("CWE190_Integer_Overflow__int_max_add_32.c":65:9)
#loc97 = loc("CWE190_Integer_Overflow__int_max_add_32.c":69:9)
#loc98 = loc("CWE190_Integer_Overflow__int_max_add_32.c":67:13)
#loc99 = loc("CWE190_Integer_Overflow__int_max_add_32.c":67:33)
#loc100 = loc("CWE190_Integer_Overflow__int_max_add_32.c":67:26)
#loc101 = loc("CWE190_Integer_Overflow__int_max_add_32.c":68:26)
#loc102 = loc("CWE190_Integer_Overflow__int_max_add_32.c":68:13)
#loc103 = loc("CWE190_Integer_Overflow__int_max_add_32.c":97:23)
#loc104 = loc("CWE190_Integer_Overflow__int_max_add_32.c":74:1)
#loc105 = loc("CWE190_Integer_Overflow__int_max_add_32.c":100:1)
#loc106 = loc("CWE190_Integer_Overflow__int_max_add_32.c":76:5)
#loc107 = loc("CWE190_Integer_Overflow__int_max_add_32.c":76:9)
#loc108 = loc("CWE190_Integer_Overflow__int_max_add_32.c":77:5)
#loc109 = loc("CWE190_Integer_Overflow__int_max_add_32.c":77:22)
#loc110 = loc("CWE190_Integer_Overflow__int_max_add_32.c":78:5)
#loc111 = loc("CWE190_Integer_Overflow__int_max_add_32.c":78:22)
#loc112 = loc("CWE190_Integer_Overflow__int_max_add_32.c":80:12)
#loc113 = loc("CWE190_Integer_Overflow__int_max_add_32.c":80:5)
#loc114 = loc("CWE190_Integer_Overflow__int_max_add_32.c":81:5)
#loc115 = loc("CWE190_Integer_Overflow__int_max_add_32.c":86:5)
#loc116 = loc("CWE190_Integer_Overflow__int_max_add_32.c":82:9)
#loc117 = loc("CWE190_Integer_Overflow__int_max_add_32.c":82:21)
#loc118 = loc("CWE190_Integer_Overflow__int_max_add_32.c":82:20)
#loc119 = loc("CWE190_Integer_Overflow__int_max_add_32.c":84:16)
#loc120 = loc("CWE190_Integer_Overflow__int_max_add_32.c":84:9)
#loc121 = loc("CWE190_Integer_Overflow__int_max_add_32.c":85:21)
#loc122 = loc("CWE190_Integer_Overflow__int_max_add_32.c":85:10)
#loc123 = loc("CWE190_Integer_Overflow__int_max_add_32.c":85:9)
#loc124 = loc("CWE190_Integer_Overflow__int_max_add_32.c":87:5)
#loc125 = loc("CWE190_Integer_Overflow__int_max_add_32.c":99:5)
#loc126 = loc("CWE190_Integer_Overflow__int_max_add_32.c":88:9)
#loc127 = loc("CWE190_Integer_Overflow__int_max_add_32.c":88:21)
#loc128 = loc("CWE190_Integer_Overflow__int_max_add_32.c":88:20)
#loc129 = loc("CWE190_Integer_Overflow__int_max_add_32.c":90:9)
#loc130 = loc("CWE190_Integer_Overflow__int_max_add_32.c":98:9)
#loc131 = loc("CWE190_Integer_Overflow__int_max_add_32.c":90:13)
#loc132 = loc("CWE190_Integer_Overflow__int_max_add_32.c":90:20)
#loc133 = loc("CWE190_Integer_Overflow__int_max_add_32.c":91:9)
#loc134 = loc("CWE190_Integer_Overflow__int_max_add_32.c":94:9)
#loc135 = loc("CWE190_Integer_Overflow__int_max_add_32.c":96:9)
#loc136 = loc("CWE190_Integer_Overflow__int_max_add_32.c":92:13)
#loc137 = loc("CWE190_Integer_Overflow__int_max_add_32.c":92:33)
#loc138 = loc("CWE190_Integer_Overflow__int_max_add_32.c":92:26)
#loc139 = loc("CWE190_Integer_Overflow__int_max_add_32.c":93:26)
#loc140 = loc("CWE190_Integer_Overflow__int_max_add_32.c":93:13)
#loc141 = loc("CWE190_Integer_Overflow__int_max_add_32.c":97:13)
#loc142 = loc(fused[#loc1, #loc2])
#loc143 = loc(fused[#loc3, #loc4])
#loc144 = loc(fused[#loc5, #loc6])
#loc145 = loc(fused[#loc7, #loc8])
#loc146 = loc(fused[#loc9, #loc10])
#loc147 = loc(fused[#loc12, #loc11])
#loc148 = loc(fused[#loc13, #loc14])
#loc149 = loc(fused[#loc15, #loc16])
#loc150 = loc(fused[#loc19, #loc18])
#loc151 = loc(fused[#loc22, #loc20])
#loc152 = loc(fused[#loc23, #loc24])
#loc153 = loc(fused[#loc25, #loc26])
#loc154 = loc(fused[#loc28, #loc29])
#loc155 = loc(fused[#loc30, #loc31])
#loc156 = loc(fused[#loc35, #loc36])
#loc157 = loc(fused[#loc37, #loc38])
#loc158 = loc(fused[#loc39, #loc40])
#loc159 = loc(fused[#loc41, #loc42])
#loc160 = loc(fused[#loc43, #loc44])
#loc161 = loc(fused[#loc45, #loc46])
#loc162 = loc(fused[#loc51, #loc52])
#loc165 = loc(fused[#loc62, #loc63])
#loc166 = loc(fused[#loc66, #loc67])
#loc167 = loc(fused[#loc70, #loc69])
#loc168 = loc(fused[#loc71, #loc72])
#loc169 = loc(fused[#loc73, #loc74])
#loc170 = loc(fused[#loc75, #loc76])
#loc171 = loc(fused[#loc77, #loc78])
#loc172 = loc(fused[#loc80, #loc79])
#loc173 = loc(fused[#loc81, #loc82])
#loc174 = loc(fused[#loc83, #loc84])
#loc175 = loc(fused[#loc87, #loc86])
#loc176 = loc(fused[#loc90, #loc88])
#loc177 = loc(fused[#loc91, #loc92])
#loc178 = loc(fused[#loc93, #loc94])
#loc179 = loc(fused[#loc96, #loc97])
#loc180 = loc(fused[#loc98, #loc99])
#loc181 = loc(fused[#loc104, #loc105])
#loc182 = loc(fused[#loc106, #loc107])
#loc183 = loc(fused[#loc108, #loc109])
#loc184 = loc(fused[#loc110, #loc111])
#loc185 = loc(fused[#loc113, #loc112])
#loc186 = loc(fused[#loc114, #loc115])
#loc187 = loc(fused[#loc116, #loc117])
#loc188 = loc(fused[#loc120, #loc119])
#loc189 = loc(fused[#loc123, #loc121])
#loc190 = loc(fused[#loc124, #loc125])
#loc191 = loc(fused[#loc126, #loc127])
#loc192 = loc(fused[#loc129, #loc130])
#loc193 = loc(fused[#loc131, #loc132])
#loc194 = loc(fused[#loc133, #loc134, #loc135, #loc130])
#loc195 = loc(fused[#loc136, #loc137])
