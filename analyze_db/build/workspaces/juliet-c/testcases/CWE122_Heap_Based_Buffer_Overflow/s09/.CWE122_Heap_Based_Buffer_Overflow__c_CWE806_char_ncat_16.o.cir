!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc119)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc120)
  cir.func private @strncat(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc121)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc122)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc123)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc124)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc126)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc17)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc18)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc18)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc127)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc128)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc17)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc129)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc130)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc26)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc26)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc132)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc28)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc30)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
      } loc(#loc133)
    } loc(#loc131)
    cir.scope {
      cir.while {
        %8 = cir.const #cir.int<1> : !s32i loc(#loc33)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc33)
        cir.condition(%9) loc(#loc33)
      } do {
        cir.scope {
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc35)
          %10 = cir.const #cir.int<65> : !s32i loc(#loc36)
          %11 = cir.const #cir.int<100> : !s32i loc(#loc37)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc38)
          %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc37)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc37)
          cir.libc.memset %14 bytes from %9 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc136)
          %15 = cir.const #cir.int<0> : !s32i loc(#loc41)
          %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc41)
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc42)
          %18 = cir.const #cir.int<100> : !s32i loc(#loc43)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc44)
          %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc43)
          %21 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %20 : !s32i), !cir.ptr<!s8i> loc(#loc45)
          cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc137)
          cir.break loc(#loc46)
        } loc(#loc135)
        cir.yield loc(#loc32)
      } loc(#loc134)
    } loc(#loc134)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc139)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc139)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc139)
      %10 = cir.get_global @strncat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc51)
      %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc52)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
      %13 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc54)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
      %15 = cir.call @strlen(%14) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc54)
      %16 = cir.call @strncat(%11, %12, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc51)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc56)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc56)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc57)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc58)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc57)
      %22 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc59)
      %23 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc59)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc140)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc61)
      %25 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc62)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc63)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc62)
    } loc(#loc138)
    cir.return loc(#loc14)
  } loc(#loc125)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc142)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc66)
    cir.return loc(#loc65)
  } loc(#loc141)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc144)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc72)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc73)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc73)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc145)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc146)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc72)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc147)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc148)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc81)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc81)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc150)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc83)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc84)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc85)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc83)
      } loc(#loc151)
    } loc(#loc149)
    cir.scope {
      cir.while {
        %8 = cir.const #cir.int<1> : !s32i loc(#loc88)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc88)
        cir.condition(%9) loc(#loc88)
      } do {
        cir.scope {
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc90)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc90)
          %10 = cir.const #cir.int<65> : !s32i loc(#loc91)
          %11 = cir.const #cir.int<50> : !s32i loc(#loc92)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc93)
          %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc92)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc92)
          cir.libc.memset %14 bytes from %9 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc154)
          %15 = cir.const #cir.int<0> : !s32i loc(#loc96)
          %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc96)
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
          %18 = cir.const #cir.int<50> : !s32i loc(#loc98)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc99)
          %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc98)
          %21 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %20 : !s32i), !cir.ptr<!s8i> loc(#loc100)
          cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc155)
          cir.break loc(#loc101)
        } loc(#loc153)
        cir.yield loc(#loc87)
      } loc(#loc152)
    } loc(#loc152)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc157)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc157)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc157)
      %10 = cir.get_global @strncat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc106)
      %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc107)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
      %13 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc109)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc110)
      %15 = cir.call @strlen(%14) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc109)
      %16 = cir.call @strncat(%11, %12, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc106)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc111)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc111)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc112)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc113)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc112)
      %22 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc114)
      %23 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc114)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc158)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc116)
      %25 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc117)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc118)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc117)
    } loc(#loc156)
    cir.return loc(#loc69)
  } loc(#loc143)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":152:1)
#loc6 = loc("/usr/include/string.h":153:29)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("/usr/include/stdlib.h":687:1)
#loc12 = loc("/usr/include/stdlib.h":687:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":23:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":43:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":25:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":25:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":26:20)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":26:27)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":26:31)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":26:42)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":26:43)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":26:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":27:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":27:33)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":27:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":27:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":27:23)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":27:24)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":27:30)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":27:29)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":28:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":34:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":28:11)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":29:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":31:16)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":31:22)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":31:27)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":31:31)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":31:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":31:32)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":32:23)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":32:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":32:14)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":32:18)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":32:19)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":33:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":35:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":42:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":36:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":36:25)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":38:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":38:17)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":38:23)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":38:29)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":38:36)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":39:22)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":39:14)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":39:17)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":39:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":40:19)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":40:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":41:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":41:14)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":72:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":75:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":74:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":74:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":50:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":70:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":52:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":52:12)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":53:20)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":53:27)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":53:31)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":53:42)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":53:43)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":53:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":54:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":54:33)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":54:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":54:17)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":54:23)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":54:24)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":54:30)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":54:29)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":55:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":61:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":55:11)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":56:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":58:16)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":58:22)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":58:27)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":58:30)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":58:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":58:31)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":59:22)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":59:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":59:14)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":59:17)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":59:18)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":60:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":62:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":69:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":63:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":63:25)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":65:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":65:17)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":65:23)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":65:29)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":65:36)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":66:22)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":66:14)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":66:17)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":66:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":67:19)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":67:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":68:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c":68:14)
#loc119 = loc(fused[#loc1, #loc2])
#loc120 = loc(fused[#loc3, #loc4])
#loc121 = loc(fused[#loc5, #loc6])
#loc122 = loc(fused[#loc7, #loc8])
#loc123 = loc(fused[#loc9, #loc10])
#loc124 = loc(fused[#loc11, #loc12])
#loc125 = loc(fused[#loc13, #loc14])
#loc126 = loc(fused[#loc15, #loc16])
#loc127 = loc(fused[#loc19, #loc20])
#loc128 = loc(fused[#loc18, #loc20])
#loc129 = loc(fused[#loc17, #loc21])
#loc130 = loc(fused[#loc22, #loc21])
#loc131 = loc(fused[#loc23, #loc24])
#loc132 = loc(fused[#loc25, #loc26])
#loc133 = loc(fused[#loc27, #loc24])
#loc134 = loc(fused[#loc31, #loc32])
#loc135 = loc(fused[#loc34, #loc32])
#loc136 = loc(fused[#loc39, #loc40])
#loc137 = loc(fused[#loc42, #loc41])
#loc138 = loc(fused[#loc47, #loc48])
#loc139 = loc(fused[#loc49, #loc50])
#loc140 = loc(fused[#loc59, #loc56])
#loc141 = loc(fused[#loc64, #loc65])
#loc142 = loc(fused[#loc66, #loc67])
#loc143 = loc(fused[#loc68, #loc69])
#loc144 = loc(fused[#loc70, #loc71])
#loc145 = loc(fused[#loc74, #loc75])
#loc146 = loc(fused[#loc73, #loc75])
#loc147 = loc(fused[#loc72, #loc76])
#loc148 = loc(fused[#loc77, #loc76])
#loc149 = loc(fused[#loc78, #loc79])
#loc150 = loc(fused[#loc80, #loc81])
#loc151 = loc(fused[#loc82, #loc79])
#loc152 = loc(fused[#loc86, #loc87])
#loc153 = loc(fused[#loc89, #loc87])
#loc154 = loc(fused[#loc94, #loc95])
#loc155 = loc(fused[#loc97, #loc96])
#loc156 = loc(fused[#loc102, #loc103])
#loc157 = loc(fused[#loc104, #loc105])
#loc158 = loc(fused[#loc114, #loc111])
