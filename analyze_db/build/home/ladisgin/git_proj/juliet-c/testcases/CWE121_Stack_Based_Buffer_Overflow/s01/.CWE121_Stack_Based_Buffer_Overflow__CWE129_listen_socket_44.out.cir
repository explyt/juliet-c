!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":44:21)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":44:25)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":302:10)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":302:14)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":302:20)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":302:32)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":152:25)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":152:29)
#loc269 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":188:25)
#loc270 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":188:29)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc430 = loc(fused[#loc6, #loc7])
#loc505 = loc(fused[#loc199, #loc200])
#loc506 = loc(fused[#loc201, #loc202])
#loc511 = loc(fused[#loc219, #loc220])
#loc530 = loc(fused[#loc269, #loc270])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc428)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc3)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc6, #loc7])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc430)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc8)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc432)
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc433)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc433)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc433)
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc18)
        %6 = cir.cmp(ge, %4, %5) : !s32i, !cir.bool loc(#loc435)
        cir.if %6 {
          %7 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
          %9 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc24)
          %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc24)
          cir.store %7, %10 : !s32i, !cir.ptr<!s32i> loc(#loc437)
          cir.scope {
            %11 = cir.const #cir.int<0> : !s32i loc(#loc27)
            cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc439)
            cir.for : cond {
              %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
              %13 = cir.const #cir.int<10> : !s32i loc(#loc30)
              %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc440)
              cir.condition(%14) loc(#loc31)
            } body {
              cir.scope {
                %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc33)
                %13 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc34)
                %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc34)
                %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc34)
                cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc35)
              } loc(#loc441)
              cir.yield loc(#loc26)
            } step {
              %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc36)
              %13 = cir.unary(inc, %12) : !s32i, !s32i loc(#loc37)
              cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc442)
              cir.yield loc(#loc438)
            } loc(#loc438)
          } loc(#loc438)
        } else {
          %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc3)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc38)
        } loc(#loc436)
      } loc(#loc434)
    } loc(#loc431)
    cir.return loc(#loc5)
  } loc(#loc429)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc443)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr1) loc(#loc444)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr1) loc(#loc445)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc446)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc447)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc448)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc449)
  cir.func private @close(!s32i) -> !s32i loc(#loc450)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc452)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc453)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc60)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc453)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc62)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc454)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc456)
      %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc457)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc458)
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc459)
      %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc460)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc71)
      %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc71)
      cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc458)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc73)
      %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc73)
      cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc459)
      cir.scope {
        cir.do {
          %16 = cir.const #cir.int<2> : !s32i loc(#loc78)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc79)
          %18 = cir.const #cir.int<6> : !s32i loc(#loc80)
          %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc81)
          cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc462)
          cir.scope {
            %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc86)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc87)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc87)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc464)
            cir.if %64 {
              cir.break loc(#loc89)
            } loc(#loc465)
          } loc(#loc463)
          %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc466)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc92)
          %22 = cir.const #cir.int<16> : !u64i loc(#loc467)
          cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc468)
          %23 = cir.const #cir.int<2> : !s32i loc(#loc97)
          %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc97)
          %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc98)
          cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc469)
          %26 = cir.const #cir.int<0> : !s32i loc(#loc100)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc100)
          %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc101)
          %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc102)
          cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc470)
          %30 = cir.const #cir.int<27015> : !s32i loc(#loc104)
          %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc104)
          %32 = cir.call @htons(%31) : (!u16i) -> !u16i extra(#fn_attr1) loc(#loc105)
          %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc106)
          cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc471)
          cir.scope {
            %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc111)
            %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc473)
            %63 = cir.const #cir.int<16> : !u64i loc(#loc474)
            %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc474)
            %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr1) loc(#loc116)
            %66 = cir.const #cir.int<1> : !s32i loc(#loc117)
            %67 = cir.unary(minus, %66) : !s32i, !s32i loc(#loc117)
            %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc475)
            cir.if %68 {
              cir.break loc(#loc119)
            } loc(#loc476)
          } loc(#loc472)
          cir.scope {
            %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc122)
            %62 = cir.const #cir.int<5> : !s32i loc(#loc123)
            %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc124)
            %64 = cir.const #cir.int<1> : !s32i loc(#loc125)
            %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc125)
            %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc478)
            cir.if %66 {
              cir.break loc(#loc127)
            } loc(#loc479)
          } loc(#loc477)
          %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc128)
          %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc129)
          %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc130)
          %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc131)
          cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc480)
          cir.scope {
            %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc136)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc137)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc137)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc482)
            cir.if %64 {
              cir.break loc(#loc139)
            } loc(#loc483)
          } loc(#loc481)
          %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc140)
          %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc141)
          %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc141)
          %41 = cir.const #cir.int<3> : !s32i loc(#loc142)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc142)
          %43 = cir.const #cir.int<4> : !u64i loc(#loc142)
          %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc142)
          %45 = cir.const #cir.int<2> : !s32i loc(#loc142)
          %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc142)
          %47 = cir.binop(add, %44, %46) : !u64i loc(#loc142)
          %48 = cir.const #cir.int<1> : !s32i loc(#loc143)
          %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc143)
          %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc484)
          %51 = cir.const #cir.int<0> : !s32i loc(#loc144)
          %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc145)
          %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc145)
          cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc485)
          cir.scope {
            %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc150)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc151)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc151)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc487)
            %65 = cir.ternary(%64, true {
              %66 = cir.const #true loc(#loc152)
              cir.yield %66 : !cir.bool loc(#loc152)
            }, false {
              %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc153)
              %67 = cir.const #cir.int<0> : !s32i loc(#loc154)
              %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc488)
              %69 = cir.ternary(%68, true {
                %70 = cir.const #true loc(#loc152)
                cir.yield %70 : !cir.bool loc(#loc152)
              }, false {
                %70 = cir.const #false loc(#loc152)
                cir.yield %70 : !cir.bool loc(#loc152)
              }) : (!cir.bool) -> !cir.bool loc(#loc152)
              cir.yield %69 : !cir.bool loc(#loc152)
            }) : (!cir.bool) -> !cir.bool loc(#loc152)
            cir.if %65 {
              cir.break loc(#loc156)
            } loc(#loc489)
          } loc(#loc486)
          %54 = cir.const #cir.int<0> : !s32i loc(#loc157)
          %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc157)
          %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc158)
          %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc159)
          %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc159)
          cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc490)
          %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc160)
          %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc161)
          cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc491)
          cir.yield loc(#loc77)
        } while {
          %16 = cir.const #cir.int<0> : !s32i loc(#loc164)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc164)
          cir.condition(%17) loc(#loc164)
        } loc(#loc461)
      } loc(#loc461)
      cir.scope {
        %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc167)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc168)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc168)
        %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc493)
        cir.if %19 {
          %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc170)
          %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc171)
        } loc(#loc494)
      } loc(#loc492)
      cir.scope {
        %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc174)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc175)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc175)
        %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc496)
        cir.if %19 {
          %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc177)
          %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc178)
        } loc(#loc497)
      } loc(#loc495)
    } loc(#loc455)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc179)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc180)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc179)
    cir.return loc(#loc56)
  } loc(#loc451)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc499)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc183)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc500)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc185)
    cir.return loc(#loc182)
  } loc(#loc498)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc501)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc502)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc503)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc193)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc194)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc196)
  cir.func @main(%arg0: !s32i loc(fused[#loc199, #loc200]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc201, #loc202])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc505)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc506)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc198)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc203)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc204)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc205)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc205)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc206)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc193)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc193)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc207)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc507)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44_good() : () -> () loc(#loc208)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc194)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc194)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc210)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc195)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc195)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc211)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc508)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44_bad() : () -> () loc(#loc212)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc196)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc196)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc214)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc215)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc509)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc509)
    cir.return %17 : !s32i loc(#loc509)
  } loc(#loc504)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc219, #loc220])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc511)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc513)
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc514)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc514)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc514)
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc230)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc231)
        %6 = cir.cmp(ge, %4, %5) : !s32i, !cir.bool loc(#loc516)
        cir.if %6 {
          %7 = cir.const #cir.int<1> : !s32i loc(#loc235)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc236)
          %9 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc237)
          %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc237)
          cir.store %7, %10 : !s32i, !cir.ptr<!s32i> loc(#loc518)
          cir.scope {
            %11 = cir.const #cir.int<0> : !s32i loc(#loc240)
            cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc520)
            cir.for : cond {
              %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc242)
              %13 = cir.const #cir.int<10> : !s32i loc(#loc243)
              %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc521)
              cir.condition(%14) loc(#loc244)
            } body {
              cir.scope {
                %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc246)
                %13 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc247)
                %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc247)
                %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc247)
                cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc248)
              } loc(#loc522)
              cir.yield loc(#loc239)
            } step {
              %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc249)
              %13 = cir.unary(inc, %12) : !s32i, !s32i loc(#loc250)
              cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc523)
              cir.yield loc(#loc519)
            } loc(#loc519)
          } loc(#loc519)
        } else {
          %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc251)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc251)
          cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc252)
        } loc(#loc517)
      } loc(#loc515)
    } loc(#loc512)
    cir.return loc(#loc218)
  } loc(#loc510)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc525)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc526)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc258)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc526)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc259)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc260)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc527)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc262)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc528)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc264)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc265)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc264)
    cir.return loc(#loc254)
  } loc(#loc524)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc266)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc269, #loc270])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc530)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc271)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc532)
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc533)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc533)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc533)
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc280)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc281)
        %6 = cir.cmp(ge, %4, %5) : !s32i, !cir.bool loc(#loc535)
        %7 = cir.ternary(%6, true {
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc283)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc284)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc536)
          %11 = cir.ternary(%10, true {
            %12 = cir.const #true loc(#loc282)
            cir.yield %12 : !cir.bool loc(#loc282)
          }, false {
            %12 = cir.const #false loc(#loc282)
            cir.yield %12 : !cir.bool loc(#loc282)
          }) : (!cir.bool) -> !cir.bool loc(#loc282)
          cir.yield %11 : !cir.bool loc(#loc282)
        }, false {
          %8 = cir.const #false loc(#loc282)
          cir.yield %8 : !cir.bool loc(#loc282)
        }) : (!cir.bool) -> !cir.bool loc(#loc282)
        cir.if %7 {
          %8 = cir.const #cir.int<1> : !s32i loc(#loc289)
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc290)
          %10 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc291)
          %11 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %9 : !s32i), !cir.ptr<!s32i> loc(#loc291)
          cir.store %8, %11 : !s32i, !cir.ptr<!s32i> loc(#loc538)
          cir.scope {
            %12 = cir.const #cir.int<0> : !s32i loc(#loc294)
            cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc540)
            cir.for : cond {
              %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc296)
              %14 = cir.const #cir.int<10> : !s32i loc(#loc297)
              %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc541)
              cir.condition(%15) loc(#loc298)
            } body {
              cir.scope {
                %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc300)
                %14 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc301)
                %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc301)
                %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc301)
                cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc302)
              } loc(#loc542)
              cir.yield loc(#loc293)
            } step {
              %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc303)
              %14 = cir.unary(inc, %13) : !s32i, !s32i loc(#loc304)
              cir.store %14, %1 : !s32i, !cir.ptr<!s32i> loc(#loc543)
              cir.yield loc(#loc539)
            } loc(#loc539)
          } loc(#loc539)
        } else {
          %8 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc266)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc266)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc305)
        } loc(#loc537)
      } loc(#loc534)
    } loc(#loc531)
    cir.return loc(#loc268)
  } loc(#loc529)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc545)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc546)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc311)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc546)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc312)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc313)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc547)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc549)
      %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc550)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc551)
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc552)
      %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc553)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc322)
      %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc322)
      cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc551)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc324)
      %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc324)
      cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc552)
      cir.scope {
        cir.do {
          %16 = cir.const #cir.int<2> : !s32i loc(#loc329)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc330)
          %18 = cir.const #cir.int<6> : !s32i loc(#loc331)
          %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc332)
          cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc555)
          cir.scope {
            %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc337)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc338)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc338)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc557)
            cir.if %64 {
              cir.break loc(#loc340)
            } loc(#loc558)
          } loc(#loc556)
          %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc559)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc343)
          %22 = cir.const #cir.int<16> : !u64i loc(#loc560)
          cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc561)
          %23 = cir.const #cir.int<2> : !s32i loc(#loc348)
          %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc348)
          %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc98)
          cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc562)
          %26 = cir.const #cir.int<0> : !s32i loc(#loc350)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc350)
          %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc101)
          %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc102)
          cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc563)
          %30 = cir.const #cir.int<27015> : !s32i loc(#loc352)
          %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc352)
          %32 = cir.call @htons(%31) : (!u16i) -> !u16i extra(#fn_attr1) loc(#loc353)
          %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc106)
          cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc564)
          cir.scope {
            %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc358)
            %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc566)
            %63 = cir.const #cir.int<16> : !u64i loc(#loc567)
            %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc567)
            %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr1) loc(#loc363)
            %66 = cir.const #cir.int<1> : !s32i loc(#loc364)
            %67 = cir.unary(minus, %66) : !s32i, !s32i loc(#loc364)
            %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc568)
            cir.if %68 {
              cir.break loc(#loc366)
            } loc(#loc569)
          } loc(#loc565)
          cir.scope {
            %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc369)
            %62 = cir.const #cir.int<5> : !s32i loc(#loc370)
            %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc371)
            %64 = cir.const #cir.int<1> : !s32i loc(#loc372)
            %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc372)
            %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc571)
            cir.if %66 {
              cir.break loc(#loc374)
            } loc(#loc572)
          } loc(#loc570)
          %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc375)
          %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc376)
          %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc377)
          %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc378)
          cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc573)
          cir.scope {
            %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc383)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc384)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc384)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc575)
            cir.if %64 {
              cir.break loc(#loc386)
            } loc(#loc576)
          } loc(#loc574)
          %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc387)
          %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc388)
          %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc388)
          %41 = cir.const #cir.int<3> : !s32i loc(#loc389)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc389)
          %43 = cir.const #cir.int<4> : !u64i loc(#loc389)
          %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc389)
          %45 = cir.const #cir.int<2> : !s32i loc(#loc389)
          %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc389)
          %47 = cir.binop(add, %44, %46) : !u64i loc(#loc389)
          %48 = cir.const #cir.int<1> : !s32i loc(#loc390)
          %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc390)
          %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc577)
          %51 = cir.const #cir.int<0> : !s32i loc(#loc391)
          %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc392)
          %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc392)
          cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc578)
          cir.scope {
            %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc397)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc398)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc398)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc580)
            %65 = cir.ternary(%64, true {
              %66 = cir.const #true loc(#loc399)
              cir.yield %66 : !cir.bool loc(#loc399)
            }, false {
              %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc400)
              %67 = cir.const #cir.int<0> : !s32i loc(#loc401)
              %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc581)
              %69 = cir.ternary(%68, true {
                %70 = cir.const #true loc(#loc399)
                cir.yield %70 : !cir.bool loc(#loc399)
              }, false {
                %70 = cir.const #false loc(#loc399)
                cir.yield %70 : !cir.bool loc(#loc399)
              }) : (!cir.bool) -> !cir.bool loc(#loc399)
              cir.yield %69 : !cir.bool loc(#loc399)
            }) : (!cir.bool) -> !cir.bool loc(#loc399)
            cir.if %65 {
              cir.break loc(#loc403)
            } loc(#loc582)
          } loc(#loc579)
          %54 = cir.const #cir.int<0> : !s32i loc(#loc404)
          %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc404)
          %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc405)
          %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc406)
          %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc406)
          cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc583)
          %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc407)
          %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc408)
          cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc584)
          cir.yield loc(#loc328)
        } while {
          %16 = cir.const #cir.int<0> : !s32i loc(#loc411)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc411)
          cir.condition(%17) loc(#loc411)
        } loc(#loc554)
      } loc(#loc554)
      cir.scope {
        %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc414)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc415)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc415)
        %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc586)
        cir.if %19 {
          %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc417)
          %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc418)
        } loc(#loc587)
      } loc(#loc585)
      cir.scope {
        %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc421)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc422)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc422)
        %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc589)
        cir.if %19 {
          %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc424)
          %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc425)
        } loc(#loc590)
      } loc(#loc588)
    } loc(#loc548)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc426)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc427)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc426)
    cir.return loc(#loc307)
  } loc(#loc544)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":62:23)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":44:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":65:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":45:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":46:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":64:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":47:9)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":47:13)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":48:9)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":48:30)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":51:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":63:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":51:13)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":51:21)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":52:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":59:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":61:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":53:28)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":53:20)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":53:13)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":55:13)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":58:13)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":55:21)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":55:17)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":55:24)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":55:28)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":55:26)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":56:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":57:37)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":57:30)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":57:17)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":55:33)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":55:32)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":62:13)
#loc39 = loc("/usr/include/sys/socket.h":102:1)
#loc40 = loc("/usr/include/sys/socket.h":102:62)
#loc41 = loc("/usr/include/netinet/in.h":404:1)
#loc42 = loc("/usr/include/netinet/in.h":405:40)
#loc43 = loc("/usr/include/sys/socket.h":112:1)
#loc44 = loc("/usr/include/sys/socket.h":113:6)
#loc45 = loc("/usr/include/sys/socket.h":296:1)
#loc46 = loc("/usr/include/sys/socket.h":296:39)
#loc47 = loc("/usr/include/sys/socket.h":306:1)
#loc48 = loc("/usr/include/sys/socket.h":307:38)
#loc49 = loc("/usr/include/sys/socket.h":145:1)
#loc50 = loc("/usr/include/sys/socket.h":145:68)
#loc51 = loc("/usr/include/stdlib.h":105:1)
#loc52 = loc("/usr/include/stdlib.h":106:33)
#loc53 = loc("/usr/include/unistd.h":358:1)
#loc54 = loc("/usr/include/unistd.h":358:27)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":67:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":145:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":69:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":69:9)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":71:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":71:29)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":73:13)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":73:12)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":73:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":74:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":142:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":79:9)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":79:13)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":80:9)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":80:28)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":81:9)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":81:31)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":82:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":82:31)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":83:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":83:41)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":84:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":127:17)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":94:35)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":94:44)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":94:57)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":94:28)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":94:13)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":94:68)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":95:13)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":98:13)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":95:17)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":95:33)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":96:13)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":97:17)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":99:20)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":99:21)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":99:30)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":99:33)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":99:47)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":99:13)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":99:48)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":100:34)
#loc98 = loc("/usr/include/netinet/in.h":249:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":100:13)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":101:39)
#loc101 = loc("/usr/include/netinet/in.h":251:20)
#loc102 = loc("/usr/include/netinet/in.h":33:15)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":101:13)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":102:38)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":102:32)
#loc106 = loc("/usr/include/netinet/in.h":250:15)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":102:13)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":102:46)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":103:13)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":106:13)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":103:22)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":103:54)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":103:55)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":103:64)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":103:78)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":103:17)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":103:84)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":104:13)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":105:17)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":107:13)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":110:13)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":107:24)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":107:38)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":107:17)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":107:57)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":108:13)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":109:17)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":111:35)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":111:49)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":111:55)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":111:28)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":111:13)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":111:59)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":112:13)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":115:13)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":112:17)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":112:33)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":113:13)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":114:17)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":117:31)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":117:45)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":117:58)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":117:76)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":117:79)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":117:26)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":117:13)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":117:80)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":118:13)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":121:13)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":118:17)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":118:31)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":118:44)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":118:47)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":118:61)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":119:13)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":120:17)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":123:39)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":123:25)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":123:13)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":125:25)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":125:20)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":125:13)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":125:36)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":127:16)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":128:9)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":131:9)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":128:13)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":128:29)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":129:9)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":130:26)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":130:13)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":132:9)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":135:9)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":132:13)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":132:29)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":133:9)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":134:26)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":134:13)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":144:5)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":144:13)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":288:1)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":292:1)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":290:5)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":290:13)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":291:5)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":291:13)
#loc187 = loc("/usr/include/stdlib.h":575:1)
#loc188 = loc("/usr/include/stdlib.h":575:41)
#loc189 = loc("/usr/include/time.h":76:1)
#loc190 = loc("/usr/include/time.h":76:38)
#loc191 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc192 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":307:15)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":309:15)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":312:15)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":314:15)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":302:1)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":317:1)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":303:1)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":305:27)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":305:22)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":305:5)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":307:5)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":308:5)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":308:70)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":309:5)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":312:5)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":313:5)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":313:69)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":314:5)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":316:12)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":316:5)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":152:1)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":173:1)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":153:1)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":154:5)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":172:5)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":155:9)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":155:13)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":156:9)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":156:30)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":159:9)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":171:9)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":159:13)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":159:21)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":160:9)
#loc233 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":167:9)
#loc234 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":169:9)
#loc235 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":161:28)
#loc236 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":161:20)
#loc237 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":161:13)
#loc238 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":163:13)
#loc239 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":166:13)
#loc240 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":163:21)
#loc241 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":163:17)
#loc242 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":163:24)
#loc243 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":163:28)
#loc244 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":163:26)
#loc245 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":164:13)
#loc246 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":165:37)
#loc247 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":165:30)
#loc248 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":165:17)
#loc249 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":163:33)
#loc250 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":163:32)
#loc251 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":170:23)
#loc252 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":170:13)
#loc253 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":175:1)
#loc254 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":185:1)
#loc255 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":177:5)
#loc256 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":177:9)
#loc257 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":178:5)
#loc258 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":178:29)
#loc259 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":180:13)
#loc260 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":180:12)
#loc261 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":180:5)
#loc262 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":183:12)
#loc263 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":183:5)
#loc264 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":184:5)
#loc265 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":184:13)
#loc266 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":205:23)
#loc267 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":188:1)
#loc268 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":208:1)
#loc271 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":189:1)
#loc272 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":190:5)
#loc273 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":207:5)
#loc274 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":191:9)
#loc275 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":191:13)
#loc276 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":192:9)
#loc277 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":192:30)
#loc278 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":194:9)
#loc279 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":206:9)
#loc280 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":194:13)
#loc281 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":194:21)
#loc282 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":194:23)
#loc283 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":194:26)
#loc284 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":194:34)
#loc285 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":194:36)
#loc286 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":195:9)
#loc287 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":202:9)
#loc288 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":204:9)
#loc289 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":196:28)
#loc290 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":196:20)
#loc291 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":196:13)
#loc292 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":198:13)
#loc293 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":201:13)
#loc294 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":198:21)
#loc295 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":198:17)
#loc296 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":198:24)
#loc297 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":198:28)
#loc298 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":198:26)
#loc299 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":199:13)
#loc300 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":200:37)
#loc301 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":200:30)
#loc302 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":200:17)
#loc303 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":198:33)
#loc304 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":198:32)
#loc305 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":205:13)
#loc306 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":210:1)
#loc307 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":286:1)
#loc308 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":212:5)
#loc309 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":212:9)
#loc310 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":213:5)
#loc311 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":213:29)
#loc312 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":215:13)
#loc313 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":215:12)
#loc314 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":215:5)
#loc315 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":216:5)
#loc316 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":284:5)
#loc317 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":221:9)
#loc318 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":221:13)
#loc319 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":222:9)
#loc320 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":222:28)
#loc321 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":223:9)
#loc322 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":223:31)
#loc323 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":224:9)
#loc324 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":224:31)
#loc325 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":225:9)
#loc326 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":225:41)
#loc327 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":226:9)
#loc328 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":269:17)
#loc329 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":236:35)
#loc330 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":236:44)
#loc331 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":236:57)
#loc332 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":236:28)
#loc333 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":236:13)
#loc334 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":236:68)
#loc335 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":237:13)
#loc336 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":240:13)
#loc337 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":237:17)
#loc338 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":237:33)
#loc339 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":238:13)
#loc340 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":239:17)
#loc341 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":241:20)
#loc342 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":241:21)
#loc343 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":241:30)
#loc344 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":241:33)
#loc345 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":241:47)
#loc346 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":241:13)
#loc347 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":241:48)
#loc348 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":242:34)
#loc349 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":242:13)
#loc350 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":243:39)
#loc351 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":243:13)
#loc352 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":244:38)
#loc353 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":244:32)
#loc354 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":244:13)
#loc355 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":244:46)
#loc356 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":245:13)
#loc357 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":248:13)
#loc358 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":245:22)
#loc359 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":245:54)
#loc360 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":245:55)
#loc361 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":245:64)
#loc362 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":245:78)
#loc363 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":245:17)
#loc364 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":245:84)
#loc365 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":246:13)
#loc366 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":247:17)
#loc367 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":249:13)
#loc368 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":252:13)
#loc369 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":249:24)
#loc370 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":249:38)
#loc371 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":249:17)
#loc372 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":249:57)
#loc373 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":250:13)
#loc374 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":251:17)
#loc375 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":253:35)
#loc376 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":253:49)
#loc377 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":253:55)
#loc378 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":253:28)
#loc379 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":253:13)
#loc380 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":253:59)
#loc381 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":254:13)
#loc382 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":257:13)
#loc383 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":254:17)
#loc384 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":254:33)
#loc385 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":255:13)
#loc386 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":256:17)
#loc387 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":259:31)
#loc388 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":259:45)
#loc389 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":259:58)
#loc390 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":259:76)
#loc391 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":259:79)
#loc392 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":259:26)
#loc393 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":259:13)
#loc394 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":259:80)
#loc395 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":260:13)
#loc396 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":263:13)
#loc397 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":260:17)
#loc398 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":260:31)
#loc399 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":260:44)
#loc400 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":260:47)
#loc401 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":260:61)
#loc402 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":261:13)
#loc403 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":262:17)
#loc404 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":265:39)
#loc405 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":265:25)
#loc406 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":265:13)
#loc407 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":267:25)
#loc408 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":267:20)
#loc409 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":267:13)
#loc410 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":267:36)
#loc411 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":269:16)
#loc412 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":270:9)
#loc413 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":273:9)
#loc414 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":270:13)
#loc415 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":270:29)
#loc416 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":271:9)
#loc417 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":272:26)
#loc418 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":272:13)
#loc419 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":274:9)
#loc420 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":277:9)
#loc421 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":274:13)
#loc422 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":274:29)
#loc423 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":275:9)
#loc424 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":276:26)
#loc425 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":276:13)
#loc426 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":285:5)
#loc427 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c":285:13)
#loc428 = loc(fused[#loc1, #loc2])
#loc429 = loc(fused[#loc4, #loc5])
#loc431 = loc(fused[#loc9, #loc10])
#loc432 = loc(fused[#loc11, #loc12])
#loc433 = loc(fused[#loc13, #loc14])
#loc434 = loc(fused[#loc15, #loc16])
#loc435 = loc(fused[#loc17, #loc18])
#loc436 = loc(fused[#loc19, #loc20, #loc21, #loc16])
#loc437 = loc(fused[#loc24, #loc22])
#loc438 = loc(fused[#loc25, #loc26])
#loc439 = loc(fused[#loc28, #loc27])
#loc440 = loc(fused[#loc29, #loc30])
#loc441 = loc(fused[#loc32, #loc26])
#loc442 = loc(fused[#loc37, #loc36])
#loc443 = loc(fused[#loc39, #loc40])
#loc444 = loc(fused[#loc41, #loc42])
#loc445 = loc(fused[#loc43, #loc44])
#loc446 = loc(fused[#loc45, #loc46])
#loc447 = loc(fused[#loc47, #loc48])
#loc448 = loc(fused[#loc49, #loc50])
#loc449 = loc(fused[#loc51, #loc52])
#loc450 = loc(fused[#loc53, #loc54])
#loc451 = loc(fused[#loc55, #loc56])
#loc452 = loc(fused[#loc57, #loc58])
#loc453 = loc(fused[#loc59, #loc60])
#loc454 = loc(fused[#loc63, #loc61])
#loc455 = loc(fused[#loc64, #loc65])
#loc456 = loc(fused[#loc66, #loc67])
#loc457 = loc(fused[#loc68, #loc69])
#loc458 = loc(fused[#loc70, #loc71])
#loc459 = loc(fused[#loc72, #loc73])
#loc460 = loc(fused[#loc74, #loc75])
#loc461 = loc(fused[#loc76, #loc77])
#loc462 = loc(fused[#loc82, #loc83])
#loc463 = loc(fused[#loc84, #loc85])
#loc464 = loc(fused[#loc86, #loc87])
#loc465 = loc(fused[#loc88, #loc85])
#loc466 = loc(fused[#loc90, #loc91])
#loc467 = loc(fused[#loc93, #loc94])
#loc468 = loc(fused[#loc95, #loc96])
#loc469 = loc(fused[#loc99, #loc97])
#loc470 = loc(fused[#loc103, #loc100])
#loc471 = loc(fused[#loc107, #loc108])
#loc472 = loc(fused[#loc109, #loc110])
#loc473 = loc(fused[#loc112, #loc113])
#loc474 = loc(fused[#loc114, #loc115])
#loc475 = loc(fused[#loc116, #loc117])
#loc476 = loc(fused[#loc118, #loc110])
#loc477 = loc(fused[#loc120, #loc121])
#loc478 = loc(fused[#loc124, #loc125])
#loc479 = loc(fused[#loc126, #loc121])
#loc480 = loc(fused[#loc132, #loc133])
#loc481 = loc(fused[#loc134, #loc135])
#loc482 = loc(fused[#loc136, #loc137])
#loc483 = loc(fused[#loc138, #loc135])
#loc484 = loc(fused[#loc142, #loc143])
#loc485 = loc(fused[#loc146, #loc147])
#loc486 = loc(fused[#loc148, #loc149])
#loc487 = loc(fused[#loc150, #loc151])
#loc488 = loc(fused[#loc153, #loc154])
#loc489 = loc(fused[#loc155, #loc149])
#loc490 = loc(fused[#loc159, #loc157])
#loc491 = loc(fused[#loc162, #loc163])
#loc492 = loc(fused[#loc165, #loc166])
#loc493 = loc(fused[#loc167, #loc168])
#loc494 = loc(fused[#loc169, #loc166])
#loc495 = loc(fused[#loc172, #loc173])
#loc496 = loc(fused[#loc174, #loc175])
#loc497 = loc(fused[#loc176, #loc173])
#loc498 = loc(fused[#loc181, #loc182])
#loc499 = loc(fused[#loc183, #loc184])
#loc500 = loc(fused[#loc185, #loc186])
#loc501 = loc(fused[#loc187, #loc188])
#loc502 = loc(fused[#loc189, #loc190])
#loc503 = loc(fused[#loc191, #loc192])
#loc504 = loc(fused[#loc197, #loc198])
#loc507 = loc(fused[#loc208, #loc209])
#loc508 = loc(fused[#loc212, #loc213])
#loc509 = loc(fused[#loc216, #loc215])
#loc510 = loc(fused[#loc217, #loc218])
#loc512 = loc(fused[#loc222, #loc223])
#loc513 = loc(fused[#loc224, #loc225])
#loc514 = loc(fused[#loc226, #loc227])
#loc515 = loc(fused[#loc228, #loc229])
#loc516 = loc(fused[#loc230, #loc231])
#loc517 = loc(fused[#loc232, #loc233, #loc234, #loc229])
#loc518 = loc(fused[#loc237, #loc235])
#loc519 = loc(fused[#loc238, #loc239])
#loc520 = loc(fused[#loc241, #loc240])
#loc521 = loc(fused[#loc242, #loc243])
#loc522 = loc(fused[#loc245, #loc239])
#loc523 = loc(fused[#loc250, #loc249])
#loc524 = loc(fused[#loc253, #loc254])
#loc525 = loc(fused[#loc255, #loc256])
#loc526 = loc(fused[#loc257, #loc258])
#loc527 = loc(fused[#loc261, #loc259])
#loc528 = loc(fused[#loc263, #loc262])
#loc529 = loc(fused[#loc267, #loc268])
#loc531 = loc(fused[#loc272, #loc273])
#loc532 = loc(fused[#loc274, #loc275])
#loc533 = loc(fused[#loc276, #loc277])
#loc534 = loc(fused[#loc278, #loc279])
#loc535 = loc(fused[#loc280, #loc281])
#loc536 = loc(fused[#loc283, #loc285])
#loc537 = loc(fused[#loc286, #loc287, #loc288, #loc279])
#loc538 = loc(fused[#loc291, #loc289])
#loc539 = loc(fused[#loc292, #loc293])
#loc540 = loc(fused[#loc295, #loc294])
#loc541 = loc(fused[#loc296, #loc297])
#loc542 = loc(fused[#loc299, #loc293])
#loc543 = loc(fused[#loc304, #loc303])
#loc544 = loc(fused[#loc306, #loc307])
#loc545 = loc(fused[#loc308, #loc309])
#loc546 = loc(fused[#loc310, #loc311])
#loc547 = loc(fused[#loc314, #loc312])
#loc548 = loc(fused[#loc315, #loc316])
#loc549 = loc(fused[#loc317, #loc318])
#loc550 = loc(fused[#loc319, #loc320])
#loc551 = loc(fused[#loc321, #loc322])
#loc552 = loc(fused[#loc323, #loc324])
#loc553 = loc(fused[#loc325, #loc326])
#loc554 = loc(fused[#loc327, #loc328])
#loc555 = loc(fused[#loc333, #loc334])
#loc556 = loc(fused[#loc335, #loc336])
#loc557 = loc(fused[#loc337, #loc338])
#loc558 = loc(fused[#loc339, #loc336])
#loc559 = loc(fused[#loc341, #loc342])
#loc560 = loc(fused[#loc344, #loc345])
#loc561 = loc(fused[#loc346, #loc347])
#loc562 = loc(fused[#loc349, #loc348])
#loc563 = loc(fused[#loc351, #loc350])
#loc564 = loc(fused[#loc354, #loc355])
#loc565 = loc(fused[#loc356, #loc357])
#loc566 = loc(fused[#loc359, #loc360])
#loc567 = loc(fused[#loc361, #loc362])
#loc568 = loc(fused[#loc363, #loc364])
#loc569 = loc(fused[#loc365, #loc357])
#loc570 = loc(fused[#loc367, #loc368])
#loc571 = loc(fused[#loc371, #loc372])
#loc572 = loc(fused[#loc373, #loc368])
#loc573 = loc(fused[#loc379, #loc380])
#loc574 = loc(fused[#loc381, #loc382])
#loc575 = loc(fused[#loc383, #loc384])
#loc576 = loc(fused[#loc385, #loc382])
#loc577 = loc(fused[#loc389, #loc390])
#loc578 = loc(fused[#loc393, #loc394])
#loc579 = loc(fused[#loc395, #loc396])
#loc580 = loc(fused[#loc397, #loc398])
#loc581 = loc(fused[#loc400, #loc401])
#loc582 = loc(fused[#loc402, #loc396])
#loc583 = loc(fused[#loc406, #loc404])
#loc584 = loc(fused[#loc409, #loc410])
#loc585 = loc(fused[#loc412, #loc413])
#loc586 = loc(fused[#loc414, #loc415])
#loc587 = loc(fused[#loc416, #loc413])
#loc588 = loc(fused[#loc419, #loc420])
#loc589 = loc(fused[#loc421, #loc422])
#loc590 = loc(fused[#loc423, #loc420])
