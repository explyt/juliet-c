!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc109)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc110)
  cir.func private  @printIntLine(!s32i) loc(#loc111)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc112)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc114)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc115)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc15)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc16)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc16)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc116)
    cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc117)
    cir.scope {
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
      %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc22)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc22)
      %10 = cir.cmp(eq, %7, %9) : !cir.ptr<!s32i>, !s32i loc(#loc119)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc23)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc25)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc26)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc27)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc25)
      } loc(#loc120)
    } loc(#loc118)
    cir.scope {
      %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc122)
      %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc123)
      %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc122)
      cir.store %9, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc122)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc36)
        %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc36)
        cir.store %18, %8 : !u64i, !cir.ptr<!u64i> loc(#loc125)
        cir.for : cond {
          %19 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc38)
          %20 = cir.const #cir.int<10> : !s32i loc(#loc39)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc39)
          %22 = cir.cmp(lt, %19, %21) : !u64i, !s32i loc(#loc126)
          %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc40)
          cir.condition(%23) loc(#loc40)
        } body {
          cir.scope {
            %19 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc42)
            %20 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc43)
            %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc43)
            %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc43)
            %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
            %24 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc45)
            %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !u64i), !cir.ptr<!s32i> loc(#loc46)
            cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc128)
          } loc(#loc127)
          cir.yield loc(#loc35)
        } step {
          %19 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc48)
          %20 = cir.unary(inc, %19) : !u64i, !u64i loc(#loc49)
          cir.store %20, %8 : !u64i, !cir.ptr<!u64i> loc(#loc129)
          cir.yield loc(#loc124)
        } loc(#loc124)
      } loc(#loc124)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc51)
      %12 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc52)
      %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc50)
      cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc53)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc54)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc55)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc54)
    } loc(#loc121)
    cir.return loc(#loc10)
  } loc(#loc113)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc131)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    cir.return loc(#loc57)
  } loc(#loc130)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc133)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc64)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc134)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc66)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc67)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc67)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc135)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc136)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc66)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc137)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc138)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc75)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc75)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !s32i loc(#loc140)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc76)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc78)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc79)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc80)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc78)
      } loc(#loc141)
    } loc(#loc139)
    cir.scope {
      %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc143)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc144)
      %11 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc143)
      cir.store %11, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc143)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc89)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc89)
        cir.store %20, %10 : !u64i, !cir.ptr<!u64i> loc(#loc146)
        cir.for : cond {
          %21 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc91)
          %22 = cir.const #cir.int<10> : !s32i loc(#loc92)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc92)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !s32i loc(#loc147)
          %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc93)
          cir.condition(%25) loc(#loc93)
        } body {
          cir.scope {
            %21 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc95)
            %22 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc96)
            %23 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %21 : !u64i), !cir.ptr<!s32i> loc(#loc96)
            %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc96)
            %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc97)
            %26 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc98)
            %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !u64i), !cir.ptr<!s32i> loc(#loc99)
            cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc149)
          } loc(#loc148)
          cir.yield loc(#loc88)
        } step {
          %21 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc101)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc102)
          cir.store %22, %10 : !u64i, !cir.ptr<!u64i> loc(#loc150)
          cir.yield loc(#loc145)
        } loc(#loc145)
      } loc(#loc145)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc103)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc104)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc105)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc103)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc106)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc107)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc108)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc108)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc107)
    } loc(#loc142)
    cir.return loc(#loc61)
  } loc(#loc132)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":39:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":23:11)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":24:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":24:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":26:19)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":26:26)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":26:28)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":26:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":27:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":27:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":27:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":27:17)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":27:14)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":27:23)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":27:24)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":27:30)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":27:29)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":28:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":38:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":29:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":29:28)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":30:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":30:16)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":32:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":35:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":32:18)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":32:14)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":32:21)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":32:25)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":32:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":33:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":34:30)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":34:23)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":34:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":34:18)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":34:19)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":34:31)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":32:30)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":32:29)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":36:22)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":36:27)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":36:28)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":36:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":37:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":37:14)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":66:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":69:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":68:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":68:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":46:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":64:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":48:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":48:11)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":49:12)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":49:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":51:19)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":51:26)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":51:29)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":51:39)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":51:40)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":51:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":52:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":52:33)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":52:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":52:17)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":52:14)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":52:23)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":52:24)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":52:30)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":52:29)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":53:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":63:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":54:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":54:28)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":55:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":55:16)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":57:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":60:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":57:18)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":57:14)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":57:21)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":57:25)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":57:23)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":58:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":59:30)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":59:23)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":59:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":59:18)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":59:19)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":59:31)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":57:30)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":57:29)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":61:22)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":61:27)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":61:28)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":61:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":62:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":62:14)
#loc109 = loc(fused[#loc1, #loc2])
#loc110 = loc(fused[#loc3, #loc4])
#loc111 = loc(fused[#loc5, #loc6])
#loc112 = loc(fused[#loc7, #loc8])
#loc113 = loc(fused[#loc9, #loc10])
#loc114 = loc(fused[#loc11, #loc12])
#loc115 = loc(fused[#loc14, #loc13])
#loc116 = loc(fused[#loc15, #loc17])
#loc117 = loc(fused[#loc18, #loc17])
#loc118 = loc(fused[#loc19, #loc20])
#loc119 = loc(fused[#loc21, #loc22])
#loc120 = loc(fused[#loc24, #loc20])
#loc121 = loc(fused[#loc28, #loc29])
#loc122 = loc(fused[#loc30, #loc31])
#loc123 = loc(fused[#loc32, #loc33])
#loc124 = loc(fused[#loc34, #loc35])
#loc125 = loc(fused[#loc37, #loc36])
#loc126 = loc(fused[#loc38, #loc39])
#loc127 = loc(fused[#loc41, #loc35])
#loc128 = loc(fused[#loc44, #loc47])
#loc129 = loc(fused[#loc49, #loc48])
#loc130 = loc(fused[#loc56, #loc57])
#loc131 = loc(fused[#loc58, #loc59])
#loc132 = loc(fused[#loc60, #loc61])
#loc133 = loc(fused[#loc62, #loc63])
#loc134 = loc(fused[#loc65, #loc64])
#loc135 = loc(fused[#loc68, #loc69])
#loc136 = loc(fused[#loc67, #loc69])
#loc137 = loc(fused[#loc66, #loc70])
#loc138 = loc(fused[#loc71, #loc70])
#loc139 = loc(fused[#loc72, #loc73])
#loc140 = loc(fused[#loc74, #loc75])
#loc141 = loc(fused[#loc77, #loc73])
#loc142 = loc(fused[#loc81, #loc82])
#loc143 = loc(fused[#loc83, #loc84])
#loc144 = loc(fused[#loc85, #loc86])
#loc145 = loc(fused[#loc87, #loc88])
#loc146 = loc(fused[#loc90, #loc89])
#loc147 = loc(fused[#loc91, #loc92])
#loc148 = loc(fused[#loc94, #loc88])
#loc149 = loc(fused[#loc97, #loc100])
#loc150 = loc(fused[#loc102, #loc101])
