!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc293)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc294)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc295)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc296)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc297)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc298)
  cir.func private @close(!s32i) -> !s32i loc(#loc299)
  cir.func private @printIntLine(!s32i) loc(#loc300)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_modulo_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc302)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc303)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc304)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc303)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc304)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc27)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc305)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc307)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc33)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc307)
      cir.scope {
        %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc309)
        %11 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc310)
        %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc311)
        %13 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc312)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc41)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc41)
        cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc311)
        cir.scope {
          cir.do {
            cir.scope {
              %16 = cir.const #cir.int<2> : !s32i loc(#loc48)
              %17 = cir.const #cir.int<1> : !s32i loc(#loc49)
              %18 = cir.const #cir.int<6> : !s32i loc(#loc50)
              %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc51)
              cir.store %19, %12 : !s32i, !cir.ptr<!s32i> loc(#loc315)
              cir.scope {
                %58 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc56)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc57)
                %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc57)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc317)
                cir.if %61 {
                  cir.break loc(#loc59)
                } loc(#loc318)
              } loc(#loc316)
              %20 = cir.cast(bitcast, %11 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc319)
              %21 = cir.const #cir.int<0> : !s32i loc(#loc62)
              %22 = cir.const #cir.int<16> : !u64i loc(#loc320)
              cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc321)
              %23 = cir.const #cir.int<2> : !s32i loc(#loc67)
              %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc67)
              %25 = cir.get_member %11[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
              cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc322)
              %26 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
              %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
              %28 = cir.call @inet_addr(%27) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc70)
              %29 = cir.get_member %11[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc71)
              %30 = cir.get_member %29[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc72)
              cir.store %28, %30 : !u32i, !cir.ptr<!u32i> loc(#loc323)
              %31 = cir.const #cir.int<27015> : !s32i loc(#loc75)
              %32 = cir.cast(integral, %31 : !s32i), !u16i loc(#loc75)
              %33 = cir.call @htons(%32) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc76)
              %34 = cir.get_member %11[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
              cir.store %33, %34 : !u16i, !cir.ptr<!u16i> loc(#loc324)
              cir.scope {
                %58 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc82)
                %59 = cir.cast(bitcast, %11 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc326)
                %60 = cir.const #cir.int<16> : !u64i loc(#loc327)
                %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc327)
                %62 = cir.call @connect(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc87)
                %63 = cir.const #cir.int<1> : !s32i loc(#loc88)
                %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc88)
                %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc328)
                cir.if %65 {
                  cir.break loc(#loc90)
                } loc(#loc329)
              } loc(#loc325)
              %35 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc91)
              %36 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc92)
              %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc92)
              %38 = cir.const #cir.int<3> : !s32i loc(#loc93)
              %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc93)
              %40 = cir.const #cir.int<4> : !u64i loc(#loc93)
              %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc93)
              %42 = cir.const #cir.int<2> : !s32i loc(#loc93)
              %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc93)
              %44 = cir.binop(add, %41, %43) : !u64i loc(#loc93)
              %45 = cir.const #cir.int<1> : !s32i loc(#loc94)
              %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc94)
              %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc330)
              %48 = cir.const #cir.int<0> : !s32i loc(#loc95)
              %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc96)
              %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc96)
              cir.store %50, %10 : !s32i, !cir.ptr<!s32i> loc(#loc331)
              cir.scope {
                %58 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc101)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc102)
                %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc102)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc333)
                %62 = cir.ternary(%61, true {
                  %63 = cir.const #true loc(#loc103)
                  cir.yield %63 : !cir.bool loc(#loc103)
                }, false {
                  %63 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc104)
                  %64 = cir.const #cir.int<0> : !s32i loc(#loc105)
                  %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc334)
                  %66 = cir.ternary(%65, true {
                    %67 = cir.const #true loc(#loc103)
                    cir.yield %67 : !cir.bool loc(#loc103)
                  }, false {
                    %67 = cir.const #false loc(#loc103)
                    cir.yield %67 : !cir.bool loc(#loc103)
                  }) : (!cir.bool) -> !cir.bool loc(#loc103)
                  cir.yield %66 : !cir.bool loc(#loc103)
                }) : (!cir.bool) -> !cir.bool loc(#loc103)
                cir.if %62 {
                  cir.break loc(#loc107)
                } loc(#loc335)
              } loc(#loc332)
              %51 = cir.const #cir.int<0> : !s32i loc(#loc108)
              %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc108)
              %53 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc109)
              %54 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc110)
              %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc110)
              cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc336)
              %56 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc111)
              %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc112)
              cir.store %57, %5 : !s32i, !cir.ptr<!s32i> loc(#loc337)
            } loc(#loc314)
            cir.yield loc(#loc45)
          } while {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc115)
            %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc115)
            cir.condition(%17) loc(#loc115)
          } loc(#loc313)
        } loc(#loc313)
        cir.scope {
          %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc118)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc119)
          %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc119)
          %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc339)
          cir.if %19 {
            %20 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc121)
            %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc122)
          } loc(#loc340)
        } loc(#loc338)
      } loc(#loc308)
      %8 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc123)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc124)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc341)
    } loc(#loc306)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc343)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc129)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc130)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc343)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc131)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc132)
      %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc344)
      cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc133)
    } loc(#loc342)
    cir.return loc(#loc19)
  } loc(#loc301)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_modulo_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc346)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc136)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc347)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc138)
    cir.return loc(#loc135)
  } loc(#loc345)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc349)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc350)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc351)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc350)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc351)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc149)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc352)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc354)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc154)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc155)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc354)
      %8 = cir.const #cir.int<7> : !s32i loc(#loc156)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc355)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc158)
      %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc159)
      cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc356)
    } loc(#loc353)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc358)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc164)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc165)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc358)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc166)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc167)
      %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc359)
      cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc168)
    } loc(#loc357)
    cir.return loc(#loc141)
  } loc(#loc348)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc360)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc171)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc362)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc363)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc364)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc363)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc364)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc180)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc181)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc365)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc367)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc186)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc187)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc367)
      cir.scope {
        %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc369)
        %11 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc370)
        %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc371)
        %13 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc372)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc195)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc195)
        cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc371)
        cir.scope {
          cir.do {
            cir.scope {
              %16 = cir.const #cir.int<2> : !s32i loc(#loc202)
              %17 = cir.const #cir.int<1> : !s32i loc(#loc203)
              %18 = cir.const #cir.int<6> : !s32i loc(#loc204)
              %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc205)
              cir.store %19, %12 : !s32i, !cir.ptr<!s32i> loc(#loc375)
              cir.scope {
                %58 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc210)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc211)
                %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc211)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc377)
                cir.if %61 {
                  cir.break loc(#loc213)
                } loc(#loc378)
              } loc(#loc376)
              %20 = cir.cast(bitcast, %11 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc379)
              %21 = cir.const #cir.int<0> : !s32i loc(#loc216)
              %22 = cir.const #cir.int<16> : !u64i loc(#loc380)
              cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc381)
              %23 = cir.const #cir.int<2> : !s32i loc(#loc221)
              %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc221)
              %25 = cir.get_member %11[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
              cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc382)
              %26 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc223)
              %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc223)
              %28 = cir.call @inet_addr(%27) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc224)
              %29 = cir.get_member %11[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc71)
              %30 = cir.get_member %29[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc72)
              cir.store %28, %30 : !u32i, !cir.ptr<!u32i> loc(#loc383)
              %31 = cir.const #cir.int<27015> : !s32i loc(#loc227)
              %32 = cir.cast(integral, %31 : !s32i), !u16i loc(#loc227)
              %33 = cir.call @htons(%32) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc228)
              %34 = cir.get_member %11[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
              cir.store %33, %34 : !u16i, !cir.ptr<!u16i> loc(#loc384)
              cir.scope {
                %58 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc233)
                %59 = cir.cast(bitcast, %11 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc386)
                %60 = cir.const #cir.int<16> : !u64i loc(#loc387)
                %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc387)
                %62 = cir.call @connect(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc238)
                %63 = cir.const #cir.int<1> : !s32i loc(#loc239)
                %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc239)
                %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc388)
                cir.if %65 {
                  cir.break loc(#loc241)
                } loc(#loc389)
              } loc(#loc385)
              %35 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc242)
              %36 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc243)
              %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc243)
              %38 = cir.const #cir.int<3> : !s32i loc(#loc244)
              %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc244)
              %40 = cir.const #cir.int<4> : !u64i loc(#loc244)
              %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc244)
              %42 = cir.const #cir.int<2> : !s32i loc(#loc244)
              %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc244)
              %44 = cir.binop(add, %41, %43) : !u64i loc(#loc244)
              %45 = cir.const #cir.int<1> : !s32i loc(#loc245)
              %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc245)
              %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc390)
              %48 = cir.const #cir.int<0> : !s32i loc(#loc246)
              %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc247)
              %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc247)
              cir.store %50, %10 : !s32i, !cir.ptr<!s32i> loc(#loc391)
              cir.scope {
                %58 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc252)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc253)
                %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc253)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc393)
                %62 = cir.ternary(%61, true {
                  %63 = cir.const #true loc(#loc254)
                  cir.yield %63 : !cir.bool loc(#loc254)
                }, false {
                  %63 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc255)
                  %64 = cir.const #cir.int<0> : !s32i loc(#loc256)
                  %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc394)
                  %66 = cir.ternary(%65, true {
                    %67 = cir.const #true loc(#loc254)
                    cir.yield %67 : !cir.bool loc(#loc254)
                  }, false {
                    %67 = cir.const #false loc(#loc254)
                    cir.yield %67 : !cir.bool loc(#loc254)
                  }) : (!cir.bool) -> !cir.bool loc(#loc254)
                  cir.yield %66 : !cir.bool loc(#loc254)
                }) : (!cir.bool) -> !cir.bool loc(#loc254)
                cir.if %62 {
                  cir.break loc(#loc258)
                } loc(#loc395)
              } loc(#loc392)
              %51 = cir.const #cir.int<0> : !s32i loc(#loc259)
              %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc259)
              %53 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc260)
              %54 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc261)
              %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc261)
              cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc396)
              %56 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc262)
              %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc263)
              cir.store %57, %5 : !s32i, !cir.ptr<!s32i> loc(#loc397)
            } loc(#loc374)
            cir.yield loc(#loc199)
          } while {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc266)
            %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc266)
            cir.condition(%17) loc(#loc266)
          } loc(#loc373)
        } loc(#loc373)
        cir.scope {
          %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc269)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc270)
          %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc270)
          %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc399)
          cir.if %19 {
            %20 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc272)
            %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc273)
          } loc(#loc400)
        } loc(#loc398)
      } loc(#loc368)
      %8 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc274)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc275)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc401)
    } loc(#loc366)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc403)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc280)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc281)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc403)
      cir.scope {
        %8 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc284)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc285)
        %10 = cir.cmp(ne, %8, %9) : !s32i, !cir.bool loc(#loc405)
        cir.if %10 {
          %11 = cir.const #cir.int<100> : !s32i loc(#loc289)
          %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc290)
          %13 = cir.binop(rem, %11, %12) : !s32i loc(#loc407)
          cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc291)
        } else {
          %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc171)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc171)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc292)
        } loc(#loc406)
      } loc(#loc404)
    } loc(#loc402)
    cir.return loc(#loc173)
  } loc(#loc361)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":79:53)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":44:1)
#loc19 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":116:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":46:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":46:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":47:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":47:22)
#loc24 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":48:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":48:22)
#loc26 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":50:13)
#loc27 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":50:12)
#loc28 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":50:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":51:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":110:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":52:9)
#loc32 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":52:21)
#loc33 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":52:20)
#loc34 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":53:9)
#loc35 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":108:9)
#loc36 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":58:13)
#loc37 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":58:17)
#loc38 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":59:13)
#loc39 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":59:32)
#loc40 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":60:13)
#loc41 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":60:36)
#loc42 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":61:13)
#loc43 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":61:45)
#loc44 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":62:13)
#loc45 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":97:21)
#loc46 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":63:13)
#loc47 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":96:13)
#loc48 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":72:40)
#loc49 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":72:49)
#loc50 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":72:62)
#loc51 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":72:33)
#loc52 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":72:17)
#loc53 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":72:73)
#loc54 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":73:17)
#loc55 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":76:17)
#loc56 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":73:21)
#loc57 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":73:38)
#loc58 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":74:17)
#loc59 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":75:21)
#loc60 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":77:24)
#loc61 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":77:25)
#loc62 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":77:34)
#loc63 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":77:37)
#loc64 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":77:51)
#loc65 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":77:17)
#loc66 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":77:52)
#loc67 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":78:38)
#loc68 = loc("/usr/include/netinet/in.h":249:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":78:17)
#loc70 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":79:43)
#loc71 = loc("/usr/include/netinet/in.h":251:20)
#loc72 = loc("/usr/include/netinet/in.h":33:15)
#loc73 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":79:17)
#loc74 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":79:63)
#loc75 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":80:42)
#loc76 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":80:36)
#loc77 = loc("/usr/include/netinet/in.h":250:15)
#loc78 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":80:17)
#loc79 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":80:50)
#loc80 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":81:17)
#loc81 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":84:17)
#loc82 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":81:29)
#loc83 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":81:62)
#loc84 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":81:63)
#loc85 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":81:72)
#loc86 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":81:86)
#loc87 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":81:21)
#loc88 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":81:92)
#loc89 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":82:17)
#loc90 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":83:21)
#loc91 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":87:35)
#loc92 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":87:50)
#loc93 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":87:63)
#loc94 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":87:81)
#loc95 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":87:84)
#loc96 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":87:30)
#loc97 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":87:17)
#loc98 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":87:85)
#loc99 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":88:17)
#loc100 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":91:17)
#loc101 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":88:21)
#loc102 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":88:35)
#loc103 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":88:48)
#loc104 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":88:51)
#loc105 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":88:65)
#loc106 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":89:17)
#loc107 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":90:21)
#loc108 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":93:43)
#loc109 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":93:29)
#loc110 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":93:17)
#loc111 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":95:29)
#loc112 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":95:24)
#loc113 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":95:17)
#loc114 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":95:40)
#loc115 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":97:20)
#loc116 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":98:13)
#loc117 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":101:13)
#loc118 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":98:17)
#loc119 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":98:34)
#loc120 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":99:13)
#loc121 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":100:30)
#loc122 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":100:17)
#loc123 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":109:21)
#loc124 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":109:10)
#loc125 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":109:9)
#loc126 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":111:5)
#loc127 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":115:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":112:9)
#loc129 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":112:21)
#loc130 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":112:20)
#loc131 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":114:22)
#loc132 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":114:28)
#loc133 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":114:9)
#loc134 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":225:1)
#loc135 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":229:1)
#loc136 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":227:5)
#loc137 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":227:13)
#loc138 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":228:5)
#loc139 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":228:13)
#loc140 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":123:1)
#loc141 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":141:1)
#loc142 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":125:5)
#loc143 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":125:9)
#loc144 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":126:5)
#loc145 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":126:22)
#loc146 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":127:5)
#loc147 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":127:22)
#loc148 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":129:13)
#loc149 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":129:12)
#loc150 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":129:5)
#loc151 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":130:5)
#loc152 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":135:5)
#loc153 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":131:9)
#loc154 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":131:21)
#loc155 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":131:20)
#loc156 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":133:16)
#loc157 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":133:9)
#loc158 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":134:21)
#loc159 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":134:10)
#loc160 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":134:9)
#loc161 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":136:5)
#loc162 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":140:5)
#loc163 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":137:9)
#loc164 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":137:21)
#loc165 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":137:20)
#loc166 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":139:22)
#loc167 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":139:28)
#loc168 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":139:9)
#loc169 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc170 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc171 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":220:23)
#loc172 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":144:1)
#loc173 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":223:1)
#loc174 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":146:5)
#loc175 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":146:9)
#loc176 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":147:5)
#loc177 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":147:22)
#loc178 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":148:5)
#loc179 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":148:22)
#loc180 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":150:13)
#loc181 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":150:12)
#loc182 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":150:5)
#loc183 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":151:5)
#loc184 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":210:5)
#loc185 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":152:9)
#loc186 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":152:21)
#loc187 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":152:20)
#loc188 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":153:9)
#loc189 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":208:9)
#loc190 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":158:13)
#loc191 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":158:17)
#loc192 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":159:13)
#loc193 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":159:32)
#loc194 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":160:13)
#loc195 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":160:36)
#loc196 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":161:13)
#loc197 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":161:45)
#loc198 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":162:13)
#loc199 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":197:21)
#loc200 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":163:13)
#loc201 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":196:13)
#loc202 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":172:40)
#loc203 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":172:49)
#loc204 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":172:62)
#loc205 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":172:33)
#loc206 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":172:17)
#loc207 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":172:73)
#loc208 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":173:17)
#loc209 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":176:17)
#loc210 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":173:21)
#loc211 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":173:38)
#loc212 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":174:17)
#loc213 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":175:21)
#loc214 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":177:24)
#loc215 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":177:25)
#loc216 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":177:34)
#loc217 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":177:37)
#loc218 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":177:51)
#loc219 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":177:17)
#loc220 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":177:52)
#loc221 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":178:38)
#loc222 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":178:17)
#loc223 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":179:53)
#loc224 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":179:43)
#loc225 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":179:17)
#loc226 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":179:63)
#loc227 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":180:42)
#loc228 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":180:36)
#loc229 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":180:17)
#loc230 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":180:50)
#loc231 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":181:17)
#loc232 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":184:17)
#loc233 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":181:29)
#loc234 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":181:62)
#loc235 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":181:63)
#loc236 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":181:72)
#loc237 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":181:86)
#loc238 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":181:21)
#loc239 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":181:92)
#loc240 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":182:17)
#loc241 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":183:21)
#loc242 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":187:35)
#loc243 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":187:50)
#loc244 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":187:63)
#loc245 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":187:81)
#loc246 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":187:84)
#loc247 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":187:30)
#loc248 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":187:17)
#loc249 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":187:85)
#loc250 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":188:17)
#loc251 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":191:17)
#loc252 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":188:21)
#loc253 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":188:35)
#loc254 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":188:48)
#loc255 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":188:51)
#loc256 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":188:65)
#loc257 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":189:17)
#loc258 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":190:21)
#loc259 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":193:43)
#loc260 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":193:29)
#loc261 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":193:17)
#loc262 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":195:29)
#loc263 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":195:24)
#loc264 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":195:17)
#loc265 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":195:40)
#loc266 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":197:20)
#loc267 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":198:13)
#loc268 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":201:13)
#loc269 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":198:17)
#loc270 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":198:34)
#loc271 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":199:13)
#loc272 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":200:30)
#loc273 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":200:17)
#loc274 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":209:21)
#loc275 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":209:10)
#loc276 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":209:9)
#loc277 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":211:5)
#loc278 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":222:5)
#loc279 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":212:9)
#loc280 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":212:21)
#loc281 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":212:20)
#loc282 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":214:9)
#loc283 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":221:9)
#loc284 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":214:13)
#loc285 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":214:21)
#loc286 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":215:9)
#loc287 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":217:9)
#loc288 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":219:9)
#loc289 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":216:26)
#loc290 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":216:32)
#loc291 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":216:13)
#loc292 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_32.c":220:13)
#loc293 = loc(fused[#loc1, #loc2])
#loc294 = loc(fused[#loc3, #loc4])
#loc295 = loc(fused[#loc6, #loc7])
#loc296 = loc(fused[#loc8, #loc9])
#loc297 = loc(fused[#loc10, #loc11])
#loc298 = loc(fused[#loc12, #loc13])
#loc299 = loc(fused[#loc14, #loc15])
#loc300 = loc(fused[#loc16, #loc17])
#loc301 = loc(fused[#loc18, #loc19])
#loc302 = loc(fused[#loc20, #loc21])
#loc303 = loc(fused[#loc22, #loc23])
#loc304 = loc(fused[#loc24, #loc25])
#loc305 = loc(fused[#loc28, #loc26])
#loc306 = loc(fused[#loc29, #loc30])
#loc307 = loc(fused[#loc31, #loc32])
#loc308 = loc(fused[#loc34, #loc35])
#loc309 = loc(fused[#loc36, #loc37])
#loc310 = loc(fused[#loc38, #loc39])
#loc311 = loc(fused[#loc40, #loc41])
#loc312 = loc(fused[#loc42, #loc43])
#loc313 = loc(fused[#loc44, #loc45])
#loc314 = loc(fused[#loc46, #loc47])
#loc315 = loc(fused[#loc52, #loc53])
#loc316 = loc(fused[#loc54, #loc55])
#loc317 = loc(fused[#loc56, #loc57])
#loc318 = loc(fused[#loc58, #loc55])
#loc319 = loc(fused[#loc60, #loc61])
#loc320 = loc(fused[#loc63, #loc64])
#loc321 = loc(fused[#loc65, #loc66])
#loc322 = loc(fused[#loc69, #loc67])
#loc323 = loc(fused[#loc73, #loc74])
#loc324 = loc(fused[#loc78, #loc79])
#loc325 = loc(fused[#loc80, #loc81])
#loc326 = loc(fused[#loc83, #loc84])
#loc327 = loc(fused[#loc85, #loc86])
#loc328 = loc(fused[#loc87, #loc88])
#loc329 = loc(fused[#loc89, #loc81])
#loc330 = loc(fused[#loc93, #loc94])
#loc331 = loc(fused[#loc97, #loc98])
#loc332 = loc(fused[#loc99, #loc100])
#loc333 = loc(fused[#loc101, #loc102])
#loc334 = loc(fused[#loc104, #loc105])
#loc335 = loc(fused[#loc106, #loc100])
#loc336 = loc(fused[#loc110, #loc108])
#loc337 = loc(fused[#loc113, #loc114])
#loc338 = loc(fused[#loc116, #loc117])
#loc339 = loc(fused[#loc118, #loc119])
#loc340 = loc(fused[#loc120, #loc117])
#loc341 = loc(fused[#loc125, #loc123])
#loc342 = loc(fused[#loc126, #loc127])
#loc343 = loc(fused[#loc128, #loc129])
#loc344 = loc(fused[#loc131, #loc132])
#loc345 = loc(fused[#loc134, #loc135])
#loc346 = loc(fused[#loc136, #loc137])
#loc347 = loc(fused[#loc138, #loc139])
#loc348 = loc(fused[#loc140, #loc141])
#loc349 = loc(fused[#loc142, #loc143])
#loc350 = loc(fused[#loc144, #loc145])
#loc351 = loc(fused[#loc146, #loc147])
#loc352 = loc(fused[#loc150, #loc148])
#loc353 = loc(fused[#loc151, #loc152])
#loc354 = loc(fused[#loc153, #loc154])
#loc355 = loc(fused[#loc157, #loc156])
#loc356 = loc(fused[#loc160, #loc158])
#loc357 = loc(fused[#loc161, #loc162])
#loc358 = loc(fused[#loc163, #loc164])
#loc359 = loc(fused[#loc166, #loc167])
#loc360 = loc(fused[#loc169, #loc170])
#loc361 = loc(fused[#loc172, #loc173])
#loc362 = loc(fused[#loc174, #loc175])
#loc363 = loc(fused[#loc176, #loc177])
#loc364 = loc(fused[#loc178, #loc179])
#loc365 = loc(fused[#loc182, #loc180])
#loc366 = loc(fused[#loc183, #loc184])
#loc367 = loc(fused[#loc185, #loc186])
#loc368 = loc(fused[#loc188, #loc189])
#loc369 = loc(fused[#loc190, #loc191])
#loc370 = loc(fused[#loc192, #loc193])
#loc371 = loc(fused[#loc194, #loc195])
#loc372 = loc(fused[#loc196, #loc197])
#loc373 = loc(fused[#loc198, #loc199])
#loc374 = loc(fused[#loc200, #loc201])
#loc375 = loc(fused[#loc206, #loc207])
#loc376 = loc(fused[#loc208, #loc209])
#loc377 = loc(fused[#loc210, #loc211])
#loc378 = loc(fused[#loc212, #loc209])
#loc379 = loc(fused[#loc214, #loc215])
#loc380 = loc(fused[#loc217, #loc218])
#loc381 = loc(fused[#loc219, #loc220])
#loc382 = loc(fused[#loc222, #loc221])
#loc383 = loc(fused[#loc225, #loc226])
#loc384 = loc(fused[#loc229, #loc230])
#loc385 = loc(fused[#loc231, #loc232])
#loc386 = loc(fused[#loc234, #loc235])
#loc387 = loc(fused[#loc236, #loc237])
#loc388 = loc(fused[#loc238, #loc239])
#loc389 = loc(fused[#loc240, #loc232])
#loc390 = loc(fused[#loc244, #loc245])
#loc391 = loc(fused[#loc248, #loc249])
#loc392 = loc(fused[#loc250, #loc251])
#loc393 = loc(fused[#loc252, #loc253])
#loc394 = loc(fused[#loc255, #loc256])
#loc395 = loc(fused[#loc257, #loc251])
#loc396 = loc(fused[#loc261, #loc259])
#loc397 = loc(fused[#loc264, #loc265])
#loc398 = loc(fused[#loc267, #loc268])
#loc399 = loc(fused[#loc269, #loc270])
#loc400 = loc(fused[#loc271, #loc268])
#loc401 = loc(fused[#loc276, #loc274])
#loc402 = loc(fused[#loc277, #loc278])
#loc403 = loc(fused[#loc279, #loc280])
#loc404 = loc(fused[#loc282, #loc283])
#loc405 = loc(fused[#loc284, #loc285])
#loc406 = loc(fused[#loc286, #loc287, #loc288, #loc283])
#loc407 = loc(fused[#loc289, #loc290])
