!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc178 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":238:8)
#loc179 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":238:14)
#loc339 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":266:10)
#loc340 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":266:14)
#loc341 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":266:20)
#loc342 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":266:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc426 = loc(fused[#loc178, #loc179])
#loc486 = loc(fused[#loc339, #loc340])
#loc487 = loc(fused[#loc341, #loc342])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc355)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc356)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc357)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc358)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc359)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc360)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc361)
  cir.func private @close(!s32i) -> !s32i loc(#loc362)
  cir.func private @printIntLine(!s32i) loc(#loc363)
  cir.func @_ZN44CWE369_Divide_by_Zero__float_listenSocket_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc365)
    %1 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc366)
    cir.store %0, %1 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc24)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc25)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc367)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc369)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc370)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc371)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc372)
      %7 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc373)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc34)
      %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc34)
      cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc371)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc36)
      %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc36)
      cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc372)
      cir.scope {
        cir.do {
          %12 = cir.const #cir.int<2> : !s32i loc(#loc41)
          %13 = cir.const #cir.int<1> : !u32i loc(#loc42)
          %14 = cir.cast(integral, %13 : !u32i), !s32i loc(#loc42)
          %15 = cir.const #cir.int<6> : !u32i loc(#loc43)
          %16 = cir.cast(integral, %15 : !u32i), !s32i loc(#loc43)
          %17 = cir.call @socket(%12, %14, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc44)
          cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc375)
          cir.scope {
            %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc49)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc50)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc50)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc377)
            cir.if %56 {
              cir.break loc(#loc52)
            } loc(#loc378)
          } loc(#loc376)
          %18 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc379)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc55)
          %20 = cir.const #cir.int<16> : !u64i loc(#loc380)
          cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc381)
          %21 = cir.const #cir.int<2> : !s32i loc(#loc60)
          %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc60)
          %23 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc61)
          cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc382)
          %24 = cir.const #cir.int<0> : !s32i loc(#loc63)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc63)
          %26 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc64)
          %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc65)
          cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc383)
          %28 = cir.const #cir.int<27015> : !s32i loc(#loc67)
          %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc67)
          %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc68)
          %31 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
          cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc384)
          cir.scope {
            %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc74)
            %54 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc386)
            %55 = cir.const #cir.int<16> : !u64i loc(#loc387)
            %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc387)
            %57 = cir.call @bind(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc79)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc80)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc80)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc388)
            cir.if %60 {
              cir.break loc(#loc82)
            } loc(#loc389)
          } loc(#loc385)
          cir.scope {
            %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc85)
            %54 = cir.const #cir.int<5> : !s32i loc(#loc86)
            %55 = cir.call @listen(%53, %54) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc87)
            %56 = cir.const #cir.int<1> : !s32i loc(#loc88)
            %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc88)
            %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc391)
            cir.if %58 {
              cir.break loc(#loc90)
            } loc(#loc392)
          } loc(#loc390)
          %32 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc91)
          %33 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc92)
          %34 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc93)
          %35 = cir.call @accept(%32, %33, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc94)
          cir.store %35, %6 : !s32i, !cir.ptr<!s32i> loc(#loc393)
          cir.scope {
            %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc99)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc100)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc100)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc395)
            cir.if %56 {
              cir.break loc(#loc102)
            } loc(#loc396)
          } loc(#loc394)
          %36 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc103)
          %37 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc104)
          %38 = cir.cast(bitcast, %37 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc104)
          %39 = cir.const #cir.int<20> : !s32i loc(#loc105)
          %40 = cir.const #cir.int<1> : !s32i loc(#loc106)
          %41 = cir.binop(sub, %39, %40) nsw : !s32i loc(#loc105)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc105)
          %43 = cir.const #cir.int<0> : !s32i loc(#loc107)
          %44 = cir.call @recv(%36, %38, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc108)
          %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc108)
          cir.store %45, %3 : !s32i, !cir.ptr<!s32i> loc(#loc397)
          cir.scope {
            %53 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc113)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc114)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc114)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc399)
            %57 = cir.ternary(%56, true {
              %58 = cir.const #true loc(#loc115)
              cir.yield %58 : !cir.bool loc(#loc115)
            }, false {
              %58 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc116)
              %59 = cir.const #cir.int<0> : !s32i loc(#loc117)
              %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc400)
              %61 = cir.ternary(%60, true {
                %62 = cir.const #true loc(#loc115)
                cir.yield %62 : !cir.bool loc(#loc115)
              }, false {
                %62 = cir.const #false loc(#loc115)
                cir.yield %62 : !cir.bool loc(#loc115)
              }) : (!cir.bool) -> !cir.bool loc(#loc115)
              cir.yield %61 : !cir.bool loc(#loc115)
            }) : (!cir.bool) -> !cir.bool loc(#loc115)
            cir.if %57 {
              cir.break loc(#loc119)
            } loc(#loc401)
          } loc(#loc398)
          %46 = cir.const #cir.int<0> : !s8i loc(#loc120)
          %47 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc121)
          %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc122)
          %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc122)
          cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc402)
          %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc123)
          %51 = cir.call @atof(%50) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc124)
          %52 = cir.cast(floating, %51 : !cir.double), !cir.float loc(#loc124)
          cir.store %52, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc403)
          cir.yield loc(#loc40)
        } while {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc127)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc127)
          cir.condition(%13) loc(#loc127)
        } loc(#loc374)
      } loc(#loc374)
      cir.scope {
        %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc130)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc131)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc131)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc405)
        cir.if %15 {
          %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc133)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc134)
        } loc(#loc406)
      } loc(#loc404)
      cir.scope {
        %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc137)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc138)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc138)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc408)
        cir.if %15 {
          %16 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc140)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc141)
        } loc(#loc409)
      } loc(#loc407)
    } loc(#loc368)
    cir.scope {
      %3 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc411)
      %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc145)
      %5 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc145)
      cir.store %5, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc411)
      cir.scope {
        %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc413)
        %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc150)
        %8 = cir.load %3 : !cir.ptr<!cir.float>, !cir.float loc(#loc151)
        %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc151)
        %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc414)
        %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc414)
        cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc413)
        %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc152)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc153)
      } loc(#loc412)
    } loc(#loc410)
    cir.return loc(#loc20)
  } loc(#loc364)
  cir.func internal private @_ZN44CWE369_Divide_by_Zero__float_listenSocket_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc416)
    %1 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc417)
    cir.store %0, %1 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc159)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc160)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc418)
    %3 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc162)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc419)
    cir.scope {
      %4 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc421)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc167)
      %6 = cir.load %5 : !cir.ptr<!cir.float>, !cir.float loc(#loc167)
      cir.store %6, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc421)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc423)
        %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc172)
        %9 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc173)
        %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc173)
        %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc424)
        %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc424)
        cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc423)
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc174)
        cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc175)
      } loc(#loc422)
    } loc(#loc420)
    cir.return loc(#loc155)
  } loc(#loc415)
  cir.func linkonce_odr @_ZSt4fabsf(%arg0: !cir.float loc(fused[#loc178, #loc179])) -> !cir.float extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__x", init] {alignment = 4 : i64} loc(#loc426)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__retval"] {alignment = 4 : i64} loc(#loc177)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc180)
    %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc181)
    %3 = cir.fabs %2 : !cir.float loc(#loc181)
    cir.store %3, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc427)
    %4 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc427)
    cir.return %4 : !cir.float loc(#loc427)
  } loc(#loc425)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc184)
  cir.func internal private @_ZN44CWE369_Divide_by_Zero__float_listenSocket_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc429)
    %1 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc430)
    cir.store %0, %1 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc190)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc191)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc431)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc433)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc434)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc435)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc436)
      %7 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc437)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc200)
      %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc200)
      cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc435)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc202)
      %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc202)
      cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc436)
      cir.scope {
        cir.do {
          %12 = cir.const #cir.int<2> : !s32i loc(#loc207)
          %13 = cir.const #cir.int<1> : !u32i loc(#loc208)
          %14 = cir.cast(integral, %13 : !u32i), !s32i loc(#loc208)
          %15 = cir.const #cir.int<6> : !u32i loc(#loc209)
          %16 = cir.cast(integral, %15 : !u32i), !s32i loc(#loc209)
          %17 = cir.call @socket(%12, %14, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc210)
          cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc439)
          cir.scope {
            %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc215)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc216)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc216)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc441)
            cir.if %56 {
              cir.break loc(#loc218)
            } loc(#loc442)
          } loc(#loc440)
          %18 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc443)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc221)
          %20 = cir.const #cir.int<16> : !u64i loc(#loc444)
          cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc445)
          %21 = cir.const #cir.int<2> : !s32i loc(#loc226)
          %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc226)
          %23 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc61)
          cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc446)
          %24 = cir.const #cir.int<0> : !s32i loc(#loc228)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc228)
          %26 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc64)
          %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc65)
          cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc447)
          %28 = cir.const #cir.int<27015> : !s32i loc(#loc230)
          %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc230)
          %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc231)
          %31 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
          cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc448)
          cir.scope {
            %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc236)
            %54 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc450)
            %55 = cir.const #cir.int<16> : !u64i loc(#loc451)
            %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc451)
            %57 = cir.call @bind(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc241)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc242)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc242)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc452)
            cir.if %60 {
              cir.break loc(#loc244)
            } loc(#loc453)
          } loc(#loc449)
          cir.scope {
            %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc247)
            %54 = cir.const #cir.int<5> : !s32i loc(#loc248)
            %55 = cir.call @listen(%53, %54) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc249)
            %56 = cir.const #cir.int<1> : !s32i loc(#loc250)
            %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc250)
            %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc455)
            cir.if %58 {
              cir.break loc(#loc252)
            } loc(#loc456)
          } loc(#loc454)
          %32 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc253)
          %33 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc254)
          %34 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc255)
          %35 = cir.call @accept(%32, %33, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc256)
          cir.store %35, %6 : !s32i, !cir.ptr<!s32i> loc(#loc457)
          cir.scope {
            %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc261)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc262)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc262)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc459)
            cir.if %56 {
              cir.break loc(#loc264)
            } loc(#loc460)
          } loc(#loc458)
          %36 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc265)
          %37 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc266)
          %38 = cir.cast(bitcast, %37 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc266)
          %39 = cir.const #cir.int<20> : !s32i loc(#loc267)
          %40 = cir.const #cir.int<1> : !s32i loc(#loc268)
          %41 = cir.binop(sub, %39, %40) nsw : !s32i loc(#loc267)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc267)
          %43 = cir.const #cir.int<0> : !s32i loc(#loc269)
          %44 = cir.call @recv(%36, %38, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc270)
          %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc270)
          cir.store %45, %3 : !s32i, !cir.ptr<!s32i> loc(#loc461)
          cir.scope {
            %53 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc275)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc276)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc276)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc463)
            %57 = cir.ternary(%56, true {
              %58 = cir.const #true loc(#loc277)
              cir.yield %58 : !cir.bool loc(#loc277)
            }, false {
              %58 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc278)
              %59 = cir.const #cir.int<0> : !s32i loc(#loc279)
              %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc464)
              %61 = cir.ternary(%60, true {
                %62 = cir.const #true loc(#loc277)
                cir.yield %62 : !cir.bool loc(#loc277)
              }, false {
                %62 = cir.const #false loc(#loc277)
                cir.yield %62 : !cir.bool loc(#loc277)
              }) : (!cir.bool) -> !cir.bool loc(#loc277)
              cir.yield %61 : !cir.bool loc(#loc277)
            }) : (!cir.bool) -> !cir.bool loc(#loc277)
            cir.if %57 {
              cir.break loc(#loc281)
            } loc(#loc465)
          } loc(#loc462)
          %46 = cir.const #cir.int<0> : !s8i loc(#loc282)
          %47 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc283)
          %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc284)
          %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc284)
          cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc466)
          %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc285)
          %51 = cir.call @atof(%50) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc286)
          %52 = cir.cast(floating, %51 : !cir.double), !cir.float loc(#loc286)
          cir.store %52, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc467)
          cir.yield loc(#loc206)
        } while {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc289)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc289)
          cir.condition(%13) loc(#loc289)
        } loc(#loc438)
      } loc(#loc438)
      cir.scope {
        %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc292)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc293)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc293)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc469)
        cir.if %15 {
          %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc295)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc296)
        } loc(#loc470)
      } loc(#loc468)
      cir.scope {
        %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc299)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc300)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc300)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc472)
        cir.if %15 {
          %16 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc302)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc303)
        } loc(#loc473)
      } loc(#loc471)
    } loc(#loc432)
    cir.scope {
      %3 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc475)
      %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc307)
      %5 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc307)
      cir.store %5, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc475)
      cir.scope {
        %6 = cir.load %3 : !cir.ptr<!cir.float>, !cir.float loc(#loc310)
        %7 = cir.call @_ZSt4fabsf(%6) : (!cir.float) -> !cir.float loc(#loc311)
        %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc311)
        %9 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc312)
        %10 = cir.cmp(gt, %8, %9) : !cir.double, !cir.bool loc(#loc477)
        cir.if %10 {
          %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc479)
          %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc318)
          %13 = cir.load %3 : !cir.ptr<!cir.float>, !cir.float loc(#loc319)
          %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc319)
          %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc480)
          %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc480)
          cir.store %16, %11 : !s32i, !cir.ptr<!s32i> loc(#loc479)
          %17 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc320)
          cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc321)
        } else {
          %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc184)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc184)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc322)
        } loc(#loc478)
      } loc(#loc476)
    } loc(#loc474)
    cir.return loc(#loc186)
  } loc(#loc428)
  cir.func @_ZN44CWE369_Divide_by_Zero__float_listenSocket_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN44CWE369_Divide_by_Zero__float_listenSocket_33L7goodG2BEv() : () -> () loc(#loc325)
    cir.call @_ZN44CWE369_Divide_by_Zero__float_listenSocket_33L7goodB2GEv() : () -> () loc(#loc326)
    cir.return loc(#loc324)
  } loc(#loc481)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc482)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc483)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc484)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc333)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc334)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc335)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc336)
  cir.func @main(%arg0: !s32i loc(fused[#loc339, #loc340]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc341, #loc342])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc486)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc487)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc338)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc343)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc343)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc344)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc345)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc345)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc346)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc333)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc333)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc347)
    cir.call @_ZN44CWE369_Divide_by_Zero__float_listenSocket_334goodEv() : () -> () loc(#loc348)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc334)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc334)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc349)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc335)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc335)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc350)
    cir.call @_ZN44CWE369_Divide_by_Zero__float_listenSocket_333badEv() : () -> () loc(#loc351)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc336)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc336)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc352)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc353)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc488)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc488)
    cir.return %15 : !s32i loc(#loc488)
  } loc(#loc485)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_33.cpp":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":102:1)
#loc14 = loc("/usr/include/stdlib.h":103:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":49:1)
#loc20 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":132:1)
#loc21 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":51:5)
#loc22 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":51:11)
#loc23 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":52:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":52:22)
#loc25 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":54:12)
#loc26 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":54:5)
#loc27 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":55:5)
#loc28 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":123:5)
#loc29 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":60:9)
#loc30 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":60:13)
#loc31 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":61:9)
#loc32 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":61:28)
#loc33 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":62:9)
#loc34 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":62:31)
#loc35 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":63:9)
#loc36 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":63:31)
#loc37 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":64:9)
#loc38 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":64:41)
#loc39 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":65:9)
#loc40 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":108:17)
#loc41 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":74:35)
#loc42 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":74:44)
#loc43 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":74:57)
#loc44 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":74:28)
#loc45 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":74:13)
#loc46 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":74:68)
#loc47 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":75:13)
#loc48 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":78:13)
#loc49 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":75:17)
#loc50 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":75:33)
#loc51 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":76:13)
#loc52 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":77:17)
#loc53 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":79:20)
#loc54 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":79:21)
#loc55 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":79:30)
#loc56 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":79:33)
#loc57 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":79:47)
#loc58 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":79:13)
#loc59 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":79:48)
#loc60 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":80:34)
#loc61 = loc("/usr/include/netinet/in.h":249:5)
#loc62 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":80:13)
#loc63 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":81:39)
#loc64 = loc("/usr/include/netinet/in.h":251:20)
#loc65 = loc("/usr/include/netinet/in.h":33:15)
#loc66 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":81:13)
#loc67 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":82:38)
#loc68 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":82:32)
#loc69 = loc("/usr/include/netinet/in.h":250:15)
#loc70 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":82:13)
#loc71 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":82:46)
#loc72 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":83:13)
#loc73 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":86:13)
#loc74 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":83:22)
#loc75 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":83:54)
#loc76 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":83:55)
#loc77 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":83:64)
#loc78 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":83:78)
#loc79 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":83:17)
#loc80 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":83:84)
#loc81 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":84:13)
#loc82 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":85:17)
#loc83 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":87:13)
#loc84 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":90:13)
#loc85 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":87:24)
#loc86 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":87:38)
#loc87 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":87:17)
#loc88 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":87:57)
#loc89 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":88:13)
#loc90 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":89:17)
#loc91 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":91:35)
#loc92 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":91:49)
#loc93 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":91:55)
#loc94 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":91:28)
#loc95 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":91:13)
#loc96 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":91:59)
#loc97 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":92:13)
#loc98 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":95:13)
#loc99 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":92:17)
#loc100 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":92:33)
#loc101 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":93:13)
#loc102 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":94:17)
#loc103 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":98:31)
#loc104 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":98:45)
#loc105 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":98:58)
#loc106 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":98:76)
#loc107 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":98:79)
#loc108 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":98:26)
#loc109 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":98:13)
#loc110 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":98:80)
#loc111 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":99:13)
#loc112 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":102:13)
#loc113 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":99:17)
#loc114 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":99:31)
#loc115 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":99:44)
#loc116 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":99:47)
#loc117 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":99:61)
#loc118 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":100:13)
#loc119 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":101:17)
#loc120 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":104:39)
#loc121 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":104:25)
#loc122 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":104:13)
#loc123 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":106:32)
#loc124 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":106:27)
#loc125 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":106:13)
#loc126 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":106:43)
#loc127 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":108:16)
#loc128 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":109:9)
#loc129 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":112:9)
#loc130 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":109:13)
#loc131 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":109:29)
#loc132 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":110:9)
#loc133 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":111:26)
#loc134 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":111:13)
#loc135 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":113:9)
#loc136 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":116:9)
#loc137 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":113:13)
#loc138 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":113:29)
#loc139 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":114:9)
#loc140 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":115:26)
#loc141 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":115:13)
#loc142 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":124:5)
#loc143 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":131:5)
#loc144 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":125:9)
#loc145 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":125:22)
#loc146 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":126:9)
#loc147 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":130:9)
#loc148 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":128:13)
#loc149 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":128:44)
#loc150 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":128:32)
#loc151 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":128:40)
#loc152 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":129:26)
#loc153 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":129:13)
#loc154 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":139:1)
#loc155 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":155:1)
#loc156 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":141:5)
#loc157 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":141:11)
#loc158 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":142:5)
#loc159 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":142:22)
#loc160 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":144:12)
#loc161 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":144:5)
#loc162 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":146:12)
#loc163 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":146:5)
#loc164 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":147:5)
#loc165 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":154:5)
#loc166 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":148:9)
#loc167 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":148:22)
#loc168 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":149:9)
#loc169 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":153:9)
#loc170 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":151:13)
#loc171 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":151:44)
#loc172 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":151:32)
#loc173 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":151:40)
#loc174 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":152:26)
#loc175 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":152:13)
#loc176 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":237:3)
#loc177 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:34)
#loc180 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:3)
#loc181 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:28)
#loc182 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:5)
#loc183 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:31)
#loc184 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":243:23)
#loc185 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":158:1)
#loc186 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":246:1)
#loc187 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":160:5)
#loc188 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":160:11)
#loc189 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":161:5)
#loc190 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":161:22)
#loc191 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":163:12)
#loc192 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":163:5)
#loc193 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":164:5)
#loc194 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":232:5)
#loc195 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":169:9)
#loc196 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":169:13)
#loc197 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":170:9)
#loc198 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":170:28)
#loc199 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":171:9)
#loc200 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":171:31)
#loc201 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":172:9)
#loc202 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":172:31)
#loc203 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":173:9)
#loc204 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":173:41)
#loc205 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":174:9)
#loc206 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":217:17)
#loc207 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":183:35)
#loc208 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":183:44)
#loc209 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":183:57)
#loc210 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":183:28)
#loc211 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":183:13)
#loc212 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":183:68)
#loc213 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":184:13)
#loc214 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":187:13)
#loc215 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":184:17)
#loc216 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":184:33)
#loc217 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":185:13)
#loc218 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":186:17)
#loc219 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":188:20)
#loc220 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":188:21)
#loc221 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":188:30)
#loc222 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":188:33)
#loc223 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":188:47)
#loc224 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":188:13)
#loc225 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":188:48)
#loc226 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":189:34)
#loc227 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":189:13)
#loc228 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":190:39)
#loc229 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":190:13)
#loc230 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":191:38)
#loc231 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":191:32)
#loc232 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":191:13)
#loc233 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":191:46)
#loc234 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":192:13)
#loc235 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":195:13)
#loc236 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":192:22)
#loc237 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":192:54)
#loc238 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":192:55)
#loc239 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":192:64)
#loc240 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":192:78)
#loc241 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":192:17)
#loc242 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":192:84)
#loc243 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":193:13)
#loc244 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":194:17)
#loc245 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":196:13)
#loc246 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":199:13)
#loc247 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":196:24)
#loc248 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":196:38)
#loc249 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":196:17)
#loc250 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":196:57)
#loc251 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":197:13)
#loc252 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":198:17)
#loc253 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":200:35)
#loc254 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":200:49)
#loc255 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":200:55)
#loc256 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":200:28)
#loc257 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":200:13)
#loc258 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":200:59)
#loc259 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":201:13)
#loc260 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":204:13)
#loc261 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":201:17)
#loc262 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":201:33)
#loc263 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":202:13)
#loc264 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":203:17)
#loc265 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":207:31)
#loc266 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":207:45)
#loc267 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":207:58)
#loc268 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":207:76)
#loc269 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":207:79)
#loc270 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":207:26)
#loc271 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":207:13)
#loc272 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":207:80)
#loc273 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":208:13)
#loc274 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":211:13)
#loc275 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":208:17)
#loc276 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":208:31)
#loc277 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":208:44)
#loc278 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":208:47)
#loc279 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":208:61)
#loc280 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":209:13)
#loc281 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":210:17)
#loc282 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":213:39)
#loc283 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":213:25)
#loc284 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":213:13)
#loc285 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":215:32)
#loc286 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":215:27)
#loc287 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":215:13)
#loc288 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":215:43)
#loc289 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":217:16)
#loc290 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":218:9)
#loc291 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":221:9)
#loc292 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":218:13)
#loc293 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":218:29)
#loc294 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":219:9)
#loc295 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":220:26)
#loc296 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":220:13)
#loc297 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":222:9)
#loc298 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":225:9)
#loc299 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":222:13)
#loc300 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":222:29)
#loc301 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":223:9)
#loc302 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":224:26)
#loc303 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":224:13)
#loc304 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":233:5)
#loc305 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":245:5)
#loc306 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":234:9)
#loc307 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":234:22)
#loc308 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":236:9)
#loc309 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":244:9)
#loc310 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":236:17)
#loc311 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":236:12)
#loc312 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":236:25)
#loc313 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":237:9)
#loc314 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":240:9)
#loc315 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":242:9)
#loc316 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":238:13)
#loc317 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":238:44)
#loc318 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":238:32)
#loc319 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":238:40)
#loc320 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":239:26)
#loc321 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":239:13)
#loc322 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":243:13)
#loc323 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":248:1)
#loc324 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":252:1)
#loc325 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":250:5)
#loc326 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":251:5)
#loc327 = loc("/usr/include/stdlib.h":575:1)
#loc328 = loc("/usr/include/stdlib.h":575:41)
#loc329 = loc("/usr/include/time.h":76:1)
#loc330 = loc("/usr/include/time.h":76:38)
#loc331 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc332 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc333 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":271:15)
#loc334 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":273:15)
#loc335 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":276:15)
#loc336 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":278:15)
#loc337 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":266:1)
#loc338 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":281:1)
#loc343 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":267:1)
#loc344 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":269:27)
#loc345 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":269:22)
#loc346 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":269:5)
#loc347 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":271:5)
#loc348 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":272:5)
#loc349 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":273:5)
#loc350 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":276:5)
#loc351 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":277:5)
#loc352 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":278:5)
#loc353 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":280:12)
#loc354 = loc("CWE369_Divide_by_Zero__float_listenSocket_33.cpp":280:5)
#loc355 = loc(fused[#loc1, #loc2])
#loc356 = loc(fused[#loc3, #loc4])
#loc357 = loc(fused[#loc5, #loc6])
#loc358 = loc(fused[#loc7, #loc8])
#loc359 = loc(fused[#loc9, #loc10])
#loc360 = loc(fused[#loc11, #loc12])
#loc361 = loc(fused[#loc13, #loc14])
#loc362 = loc(fused[#loc15, #loc16])
#loc363 = loc(fused[#loc17, #loc18])
#loc364 = loc(fused[#loc19, #loc20])
#loc365 = loc(fused[#loc21, #loc22])
#loc366 = loc(fused[#loc23, #loc24])
#loc367 = loc(fused[#loc26, #loc25])
#loc368 = loc(fused[#loc27, #loc28])
#loc369 = loc(fused[#loc29, #loc30])
#loc370 = loc(fused[#loc31, #loc32])
#loc371 = loc(fused[#loc33, #loc34])
#loc372 = loc(fused[#loc35, #loc36])
#loc373 = loc(fused[#loc37, #loc38])
#loc374 = loc(fused[#loc39, #loc40])
#loc375 = loc(fused[#loc45, #loc46])
#loc376 = loc(fused[#loc47, #loc48])
#loc377 = loc(fused[#loc49, #loc50])
#loc378 = loc(fused[#loc51, #loc48])
#loc379 = loc(fused[#loc53, #loc54])
#loc380 = loc(fused[#loc56, #loc57])
#loc381 = loc(fused[#loc58, #loc59])
#loc382 = loc(fused[#loc62, #loc60])
#loc383 = loc(fused[#loc66, #loc63])
#loc384 = loc(fused[#loc70, #loc71])
#loc385 = loc(fused[#loc72, #loc73])
#loc386 = loc(fused[#loc75, #loc76])
#loc387 = loc(fused[#loc77, #loc78])
#loc388 = loc(fused[#loc79, #loc80])
#loc389 = loc(fused[#loc81, #loc73])
#loc390 = loc(fused[#loc83, #loc84])
#loc391 = loc(fused[#loc87, #loc88])
#loc392 = loc(fused[#loc89, #loc84])
#loc393 = loc(fused[#loc95, #loc96])
#loc394 = loc(fused[#loc97, #loc98])
#loc395 = loc(fused[#loc99, #loc100])
#loc396 = loc(fused[#loc101, #loc98])
#loc397 = loc(fused[#loc109, #loc110])
#loc398 = loc(fused[#loc111, #loc112])
#loc399 = loc(fused[#loc113, #loc114])
#loc400 = loc(fused[#loc116, #loc117])
#loc401 = loc(fused[#loc118, #loc112])
#loc402 = loc(fused[#loc122, #loc120])
#loc403 = loc(fused[#loc125, #loc126])
#loc404 = loc(fused[#loc128, #loc129])
#loc405 = loc(fused[#loc130, #loc131])
#loc406 = loc(fused[#loc132, #loc129])
#loc407 = loc(fused[#loc135, #loc136])
#loc408 = loc(fused[#loc137, #loc138])
#loc409 = loc(fused[#loc139, #loc136])
#loc410 = loc(fused[#loc142, #loc143])
#loc411 = loc(fused[#loc144, #loc145])
#loc412 = loc(fused[#loc146, #loc147])
#loc413 = loc(fused[#loc148, #loc149])
#loc414 = loc(fused[#loc150, #loc151])
#loc415 = loc(fused[#loc154, #loc155])
#loc416 = loc(fused[#loc156, #loc157])
#loc417 = loc(fused[#loc158, #loc159])
#loc418 = loc(fused[#loc161, #loc160])
#loc419 = loc(fused[#loc163, #loc162])
#loc420 = loc(fused[#loc164, #loc165])
#loc421 = loc(fused[#loc166, #loc167])
#loc422 = loc(fused[#loc168, #loc169])
#loc423 = loc(fused[#loc170, #loc171])
#loc424 = loc(fused[#loc172, #loc173])
#loc425 = loc(fused[#loc176, #loc177])
#loc427 = loc(fused[#loc182, #loc183])
#loc428 = loc(fused[#loc185, #loc186])
#loc429 = loc(fused[#loc187, #loc188])
#loc430 = loc(fused[#loc189, #loc190])
#loc431 = loc(fused[#loc192, #loc191])
#loc432 = loc(fused[#loc193, #loc194])
#loc433 = loc(fused[#loc195, #loc196])
#loc434 = loc(fused[#loc197, #loc198])
#loc435 = loc(fused[#loc199, #loc200])
#loc436 = loc(fused[#loc201, #loc202])
#loc437 = loc(fused[#loc203, #loc204])
#loc438 = loc(fused[#loc205, #loc206])
#loc439 = loc(fused[#loc211, #loc212])
#loc440 = loc(fused[#loc213, #loc214])
#loc441 = loc(fused[#loc215, #loc216])
#loc442 = loc(fused[#loc217, #loc214])
#loc443 = loc(fused[#loc219, #loc220])
#loc444 = loc(fused[#loc222, #loc223])
#loc445 = loc(fused[#loc224, #loc225])
#loc446 = loc(fused[#loc227, #loc226])
#loc447 = loc(fused[#loc229, #loc228])
#loc448 = loc(fused[#loc232, #loc233])
#loc449 = loc(fused[#loc234, #loc235])
#loc450 = loc(fused[#loc237, #loc238])
#loc451 = loc(fused[#loc239, #loc240])
#loc452 = loc(fused[#loc241, #loc242])
#loc453 = loc(fused[#loc243, #loc235])
#loc454 = loc(fused[#loc245, #loc246])
#loc455 = loc(fused[#loc249, #loc250])
#loc456 = loc(fused[#loc251, #loc246])
#loc457 = loc(fused[#loc257, #loc258])
#loc458 = loc(fused[#loc259, #loc260])
#loc459 = loc(fused[#loc261, #loc262])
#loc460 = loc(fused[#loc263, #loc260])
#loc461 = loc(fused[#loc271, #loc272])
#loc462 = loc(fused[#loc273, #loc274])
#loc463 = loc(fused[#loc275, #loc276])
#loc464 = loc(fused[#loc278, #loc279])
#loc465 = loc(fused[#loc280, #loc274])
#loc466 = loc(fused[#loc284, #loc282])
#loc467 = loc(fused[#loc287, #loc288])
#loc468 = loc(fused[#loc290, #loc291])
#loc469 = loc(fused[#loc292, #loc293])
#loc470 = loc(fused[#loc294, #loc291])
#loc471 = loc(fused[#loc297, #loc298])
#loc472 = loc(fused[#loc299, #loc300])
#loc473 = loc(fused[#loc301, #loc298])
#loc474 = loc(fused[#loc304, #loc305])
#loc475 = loc(fused[#loc306, #loc307])
#loc476 = loc(fused[#loc308, #loc309])
#loc477 = loc(fused[#loc311, #loc312])
#loc478 = loc(fused[#loc313, #loc314, #loc315, #loc309])
#loc479 = loc(fused[#loc316, #loc317])
#loc480 = loc(fused[#loc318, #loc319])
#loc481 = loc(fused[#loc323, #loc324])
#loc482 = loc(fused[#loc327, #loc328])
#loc483 = loc(fused[#loc329, #loc330])
#loc484 = loc(fused[#loc331, #loc332])
#loc485 = loc(fused[#loc337, #loc338])
#loc488 = loc(fused[#loc354, #loc353])
