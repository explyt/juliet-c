!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":98:10)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":98:14)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":98:20)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":98:32)
#loc158 = loc(fused[#loc102, #loc103])
#loc159 = loc(fused[#loc104, #loc105])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLongLongLine(!s64i) loc(#loc118)
  cir.func @_ZN65CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_333badEv() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc120)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc121)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc122)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc8)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc10)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc10)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc10)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc10)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %8 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc123)
    %9 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc10)
    cir.store %10, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc122)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc12)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc12)
    %13 = cir.const #cir.int<8> : !u64i loc(#loc12)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc12)
    %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc12)
    cir.store %17, %8 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc123)
    %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc13)
    cir.store %18, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc124)
    cir.scope {
      %19 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc126)
      %20 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc18)
      %21 = cir.load %20 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc18)
      cir.store %21, %19 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc126)
      cir.scope {
        %22 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc128)
        %23 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc128)
        cir.store %23, %22 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc128)
        cir.scope {
          %24 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc130)
          cir.scope {
            %29 = cir.const #cir.int<0> : !s32i loc(#loc29)
            %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc29)
            cir.store %30, %24 : !u64i, !cir.ptr<!u64i> loc(#loc132)
            cir.for : cond {
              %31 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc31)
              %32 = cir.const #cir.int<100> : !s32i loc(#loc32)
              %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc32)
              %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc133)
              cir.condition(%34) loc(#loc133)
            } body {
              %31 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc33)
              %32 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc34)
              %33 = cir.ptr_stride(%32 : !cir.ptr<!s64i>, %31 : !u64i), !cir.ptr<!s64i> loc(#loc34)
              %34 = cir.load %33 : !cir.ptr<!s64i>, !s64i loc(#loc34)
              %35 = cir.load %19 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc35)
              %36 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc36)
              %37 = cir.ptr_stride(%35 : !cir.ptr<!s64i>, %36 : !u64i), !cir.ptr<!s64i> loc(#loc37)
              cir.store %34, %37 : !s64i, !cir.ptr<!s64i> loc(#loc134)
              cir.yield loc(#loc28)
            } step {
              %31 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc39)
              %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc40)
              cir.store %32, %24 : !u64i, !cir.ptr<!u64i> loc(#loc135)
              cir.yield loc(#loc131)
            } loc(#loc131)
          } loc(#loc131)
          %25 = cir.load %19 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc41)
          %26 = cir.const #cir.int<0> : !s32i loc(#loc42)
          %27 = cir.ptr_stride(%25 : !cir.ptr<!s64i>, %26 : !s32i), !cir.ptr<!s64i> loc(#loc43)
          %28 = cir.load %27 : !cir.ptr<!s64i>, !s64i loc(#loc41)
          cir.call @printLongLongLine(%28) : (!s64i) -> () loc(#loc44)
        } loc(#loc129)
      } loc(#loc127)
    } loc(#loc125)
    cir.return loc(#loc4)
  } loc(#loc119)
  cir.func internal private @_ZN65CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc137)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc138)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc139)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc50)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc52)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc52)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc52)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc52)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc52)
    %8 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc140)
    %9 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc52)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc52)
    cir.store %10, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc139)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc54)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc54)
    %13 = cir.const #cir.int<8> : !u64i loc(#loc54)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc54)
    %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc54)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc54)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc54)
    cir.store %17, %8 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc140)
    %18 = cir.load %8 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc55)
    cir.store %18, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc141)
    cir.scope {
      %19 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc143)
      %20 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc60)
      %21 = cir.load %20 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc60)
      cir.store %21, %19 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc143)
      cir.scope {
        %22 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc145)
        %23 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc145)
        cir.store %23, %22 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc145)
        cir.scope {
          %24 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc147)
          cir.scope {
            %29 = cir.const #cir.int<0> : !s32i loc(#loc71)
            %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc71)
            cir.store %30, %24 : !u64i, !cir.ptr<!u64i> loc(#loc149)
            cir.for : cond {
              %31 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc73)
              %32 = cir.const #cir.int<100> : !s32i loc(#loc74)
              %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc74)
              %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc150)
              cir.condition(%34) loc(#loc150)
            } body {
              %31 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc75)
              %32 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc76)
              %33 = cir.ptr_stride(%32 : !cir.ptr<!s64i>, %31 : !u64i), !cir.ptr<!s64i> loc(#loc76)
              %34 = cir.load %33 : !cir.ptr<!s64i>, !s64i loc(#loc76)
              %35 = cir.load %19 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc77)
              %36 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc78)
              %37 = cir.ptr_stride(%35 : !cir.ptr<!s64i>, %36 : !u64i), !cir.ptr<!s64i> loc(#loc79)
              cir.store %34, %37 : !s64i, !cir.ptr<!s64i> loc(#loc151)
              cir.yield loc(#loc70)
            } step {
              %31 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc81)
              %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc82)
              cir.store %32, %24 : !u64i, !cir.ptr<!u64i> loc(#loc152)
              cir.yield loc(#loc148)
            } loc(#loc148)
          } loc(#loc148)
          %25 = cir.load %19 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc83)
          %26 = cir.const #cir.int<0> : !s32i loc(#loc84)
          %27 = cir.ptr_stride(%25 : !cir.ptr<!s64i>, %26 : !s32i), !cir.ptr<!s64i> loc(#loc85)
          %28 = cir.load %27 : !cir.ptr<!s64i>, !s64i loc(#loc83)
          cir.call @printLongLongLine(%28) : (!s64i) -> () loc(#loc86)
        } loc(#loc146)
      } loc(#loc144)
    } loc(#loc142)
    cir.return loc(#loc46)
  } loc(#loc136)
  cir.func @_ZN65CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_334goodEv() extra(#fn_attr) {
    cir.call @_ZN65CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33L7goodG2BEv() : () -> () loc(#loc89)
    cir.return loc(#loc88)
  } loc(#loc153)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc154)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc155)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc156)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc96)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc97)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc99)
  cir.func @main(%arg0: !s32i loc(fused[#loc102, #loc103]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc104, #loc105])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc159)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc101)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc106)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc107)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc108)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc108)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc109)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc96)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc96)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    cir.call @_ZN65CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_334goodEv() : () -> () loc(#loc111)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc97)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc97)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc98)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc98)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc113)
    cir.call @_ZN65CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_333badEv() : () -> () loc(#loc114)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc99)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc115)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc116)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    cir.return %15 : !s32i loc(#loc160)
  } loc(#loc157)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":24:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":48:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":26:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":26:15)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":27:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":27:26)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":28:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":28:42)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":29:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":29:43)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":32:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":32:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":33:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":47:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":34:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":34:26)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":35:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":46:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":36:13)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":36:37)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":37:13)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":45:13)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":38:17)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":38:24)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":40:17)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":43:17)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":40:26)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":40:22)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":40:29)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":40:33)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":42:38)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":42:31)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":42:21)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":42:26)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":42:27)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":42:39)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":40:39)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":40:38)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":44:35)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":44:40)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":44:41)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":44:17)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":55:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":78:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":57:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":57:15)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":58:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":58:26)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":59:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":59:42)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":60:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":60:43)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":62:12)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":62:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":63:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":77:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":64:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":64:26)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":65:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":76:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":66:13)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":66:37)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":67:13)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":75:13)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":68:17)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":68:24)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":70:17)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":73:17)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":70:26)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":70:22)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":70:29)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":70:33)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":72:38)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":72:31)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":72:21)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":72:26)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":72:27)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":72:39)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":70:39)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":70:38)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":74:35)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":74:40)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":74:41)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":74:17)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":80:1)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":83:1)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":82:5)
#loc90 = loc("/usr/include/stdlib.h":575:1)
#loc91 = loc("/usr/include/stdlib.h":575:41)
#loc92 = loc("/usr/include/time.h":76:1)
#loc93 = loc("/usr/include/time.h":76:38)
#loc94 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc95 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":103:15)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":105:15)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":108:15)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":110:15)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":98:1)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":113:1)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":99:1)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":101:27)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":101:22)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":101:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":103:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":104:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":105:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":108:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":109:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":110:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":112:12)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_33.cpp":112:5)
#loc118 = loc(fused[#loc1, #loc2])
#loc119 = loc(fused[#loc3, #loc4])
#loc120 = loc(fused[#loc5, #loc6])
#loc121 = loc(fused[#loc7, #loc8])
#loc122 = loc(fused[#loc9, #loc10])
#loc123 = loc(fused[#loc11, #loc12])
#loc124 = loc(fused[#loc14, #loc13])
#loc125 = loc(fused[#loc15, #loc16])
#loc126 = loc(fused[#loc17, #loc18])
#loc127 = loc(fused[#loc19, #loc20])
#loc128 = loc(fused[#loc21, #loc22])
#loc129 = loc(fused[#loc23, #loc24])
#loc130 = loc(fused[#loc25, #loc26])
#loc131 = loc(fused[#loc27, #loc28])
#loc132 = loc(fused[#loc30, #loc29])
#loc133 = loc(fused[#loc31, #loc32])
#loc134 = loc(fused[#loc35, #loc38])
#loc135 = loc(fused[#loc40, #loc39])
#loc136 = loc(fused[#loc45, #loc46])
#loc137 = loc(fused[#loc47, #loc48])
#loc138 = loc(fused[#loc49, #loc50])
#loc139 = loc(fused[#loc51, #loc52])
#loc140 = loc(fused[#loc53, #loc54])
#loc141 = loc(fused[#loc56, #loc55])
#loc142 = loc(fused[#loc57, #loc58])
#loc143 = loc(fused[#loc59, #loc60])
#loc144 = loc(fused[#loc61, #loc62])
#loc145 = loc(fused[#loc63, #loc64])
#loc146 = loc(fused[#loc65, #loc66])
#loc147 = loc(fused[#loc67, #loc68])
#loc148 = loc(fused[#loc69, #loc70])
#loc149 = loc(fused[#loc72, #loc71])
#loc150 = loc(fused[#loc73, #loc74])
#loc151 = loc(fused[#loc77, #loc80])
#loc152 = loc(fused[#loc82, #loc81])
#loc153 = loc(fused[#loc87, #loc88])
#loc154 = loc(fused[#loc90, #loc91])
#loc155 = loc(fused[#loc92, #loc93])
#loc156 = loc(fused[#loc94, #loc95])
#loc157 = loc(fused[#loc100, #loc101])
#loc160 = loc(fused[#loc117, #loc116])
