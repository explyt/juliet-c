!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc99)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc100)
  cir.func private @printIntLine(!s32i) loc(#loc101)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc102)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc104)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc105)
    %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc106)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc107)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc19)
    cir.store %4, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc108)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc21)
    %6 = cir.const #cir.int<50> : !s32i loc(#loc22)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc22)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc109)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc110)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc111)
    cir.store %11, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc112)
    cir.br ^bb1 loc(#loc113)
  ^bb1:  // pred: ^bb0
    %12 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc30)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc114)
    cir.brcond %15 ^bb2, ^bb3 loc(#loc115)
  ^bb2:  // pred: ^bb1
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc32)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc34)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
    cir.br ^bb3 loc(#loc28)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc28)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc116)
  ^bb5:  // pred: ^bb4
    %19 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc12)
    cir.store %19, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc104)
    %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc14)
    cir.store %20, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc105)
    cir.br ^bb6 loc(#loc117)
  ^bb6:  // pred: ^bb5
    %21 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc106)
    cir.store %21, %2 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc106)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc39)
    %24 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc40)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc40)
    %26 = cir.const #cir.int<100> : !s32i loc(#loc41)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc41)
    %28 = cir.const #cir.int<4> : !u64i loc(#loc118)
    %29 = cir.binop(mul, %27, %28) : !u64i loc(#loc119)
    cir.libc.memcpy %29 bytes from %25 to %23 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc120)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc46)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc47)
    %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !s32i), !cir.ptr<!s32i> loc(#loc48)
    %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc49)
    %34 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc50)
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc51)
    cir.call @free(%36) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc50)
    cir.br ^bb7 loc(#loc38)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc36)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc10)
  } loc(#loc103)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc122)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc54)
    cir.return loc(#loc53)
  } loc(#loc121)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc124)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc125)
    %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc126)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc127)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc66)
    cir.store %4, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc128)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc68)
    %6 = cir.const #cir.int<100> : !s32i loc(#loc69)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc69)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc129)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc130)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc68)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc131)
    cir.store %11, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc132)
    cir.br ^bb1 loc(#loc133)
  ^bb1:  // pred: ^bb0
    %12 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc76)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc77)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc77)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc134)
    cir.brcond %15 ^bb2, ^bb3 loc(#loc135)
  ^bb2:  // pred: ^bb1
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc79)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc81)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc79)
    cir.br ^bb3 loc(#loc75)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc75)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc136)
  ^bb5:  // pred: ^bb4
    %19 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
    cir.store %19, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc124)
    %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc61)
    cir.store %20, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc125)
    cir.br ^bb6 loc(#loc137)
  ^bb6:  // pred: ^bb5
    %21 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc126)
    cir.store %21, %2 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc126)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc86)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc86)
    %24 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc87)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc87)
    %26 = cir.const #cir.int<100> : !s32i loc(#loc88)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc88)
    %28 = cir.const #cir.int<4> : !u64i loc(#loc138)
    %29 = cir.binop(mul, %27, %28) : !u64i loc(#loc139)
    cir.libc.memcpy %29 bytes from %25 to %23 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc140)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc93)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc94)
    %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !s32i), !cir.ptr<!s32i> loc(#loc95)
    %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc96)
    %34 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc97)
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc98)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc98)
    cir.call @free(%36) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc97)
    cir.br ^bb7 loc(#loc85)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc83)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc57)
  } loc(#loc123)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":39:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":29:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":29:26)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":30:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":30:22)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":32:13)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":32:33)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":23:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":23:11)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":24:12)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":24:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":26:19)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":26:26)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":26:29)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":26:39)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":26:40)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":26:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":27:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":27:33)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":27:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":27:17)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":27:23)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":27:24)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":27:30)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":27:29)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":28:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":38:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":31:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":37:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":34:20)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":34:26)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":34:34)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":34:38)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":34:48)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":34:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":34:49)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":35:26)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":35:31)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":35:32)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":35:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":36:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":36:18)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":66:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":69:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":68:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":68:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":46:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":64:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":54:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":54:26)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":55:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":55:22)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":57:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":57:33)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":48:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":48:11)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":49:12)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":49:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":51:19)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":51:26)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":51:30)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":51:40)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":51:41)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":51:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":52:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":52:33)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":52:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":52:17)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":52:23)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":52:24)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":52:30)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":52:29)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":53:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":63:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":56:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":62:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":59:20)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":59:26)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":59:34)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":59:38)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":59:48)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":59:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":59:49)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":60:26)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":60:31)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":60:32)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":60:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":61:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c":61:18)
#loc99 = loc(fused[#loc1, #loc2])
#loc100 = loc(fused[#loc3, #loc4])
#loc101 = loc(fused[#loc5, #loc6])
#loc102 = loc(fused[#loc7, #loc8])
#loc103 = loc(fused[#loc9, #loc10])
#loc104 = loc(fused[#loc11, #loc12])
#loc105 = loc(fused[#loc13, #loc14])
#loc106 = loc(fused[#loc15, #loc16])
#loc107 = loc(fused[#loc17, #loc18])
#loc108 = loc(fused[#loc20, #loc19])
#loc109 = loc(fused[#loc23, #loc24])
#loc110 = loc(fused[#loc22, #loc24])
#loc111 = loc(fused[#loc21, #loc25])
#loc112 = loc(fused[#loc26, #loc25])
#loc113 = loc(fused[#loc27, #loc28])
#loc114 = loc(fused[#loc29, #loc30])
#loc115 = loc(fused[#loc31, #loc28])
#loc116 = loc(fused[#loc35, #loc36])
#loc117 = loc(fused[#loc37, #loc38])
#loc118 = loc(fused[#loc42, #loc43])
#loc119 = loc(fused[#loc41, #loc43])
#loc120 = loc(fused[#loc44, #loc45])
#loc121 = loc(fused[#loc52, #loc53])
#loc122 = loc(fused[#loc54, #loc55])
#loc123 = loc(fused[#loc56, #loc57])
#loc124 = loc(fused[#loc58, #loc59])
#loc125 = loc(fused[#loc60, #loc61])
#loc126 = loc(fused[#loc62, #loc63])
#loc127 = loc(fused[#loc64, #loc65])
#loc128 = loc(fused[#loc67, #loc66])
#loc129 = loc(fused[#loc70, #loc71])
#loc130 = loc(fused[#loc69, #loc71])
#loc131 = loc(fused[#loc68, #loc72])
#loc132 = loc(fused[#loc73, #loc72])
#loc133 = loc(fused[#loc74, #loc75])
#loc134 = loc(fused[#loc76, #loc77])
#loc135 = loc(fused[#loc78, #loc75])
#loc136 = loc(fused[#loc82, #loc83])
#loc137 = loc(fused[#loc84, #loc85])
#loc138 = loc(fused[#loc89, #loc90])
#loc139 = loc(fused[#loc88, #loc90])
#loc140 = loc(fused[#loc91, #loc92])
