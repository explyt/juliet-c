!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc146)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc147)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc148)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc149)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc150)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc153)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc16)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc16)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc156)
          %4 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc157)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc24)
          %6 = cir.cast(int_to_float, %5 : !s32i), !cir.double loc(#loc24)
          cir.store %6, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc157)
          cir.scope {
            %9 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc27)
            %10 = cir.const #cir.int<256> : !s32i loc(#loc28)
            %11 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc147)
            %12 = cir.load %11 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc29)
            %13 = cir.call @fgets(%9, %10, %12) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc30)
            %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
            %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
            %16 = cir.cmp(ne, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc159)
            cir.if %16 {
              %17 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc35)
              %18 = cir.call @atof(%17) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc36)
              cir.store %18, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc161)
            } else {
              %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc39)
            } loc(#loc160)
          } loc(#loc158)
          %7 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc40)
          %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc40)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc41)
        } loc(#loc155)
      } loc(#loc154)
    } loc(#loc152)
    cir.return loc(#loc13)
  } loc(#loc151)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc163)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc164)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    cir.return loc(#loc43)
  } loc(#loc162)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc49)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc50)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    cir.return %2 : !s32i loc(#loc166)
  } loc(#loc165)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Value is too small or large to be represented as an int\00" : !cir.array<!s8i x 56>> : !cir.array<!s8i x 56> {alignment = 1 : i64} loc(#loc53)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc169)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc58)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc58)
      cir.if %2 {
        %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc52)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc52)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc63)
      } else {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc172)
          %4 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc173)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc69)
          %6 = cir.cast(int_to_float, %5 : !s32i), !cir.double loc(#loc69)
          cir.store %6, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc173)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc72)
            %8 = cir.const #cir.int<256> : !s32i loc(#loc73)
            %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc147)
            %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc74)
            %11 = cir.call @fgets(%7, %8, %10) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc75)
            %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc76)
            %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc76)
            %14 = cir.cmp(ne, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc175)
            cir.if %14 {
              %15 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc80)
              %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc81)
              cir.store %16, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc177)
            } else {
              %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc84)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc84)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc85)
            } loc(#loc176)
          } loc(#loc174)
          cir.scope {
            %7 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc88)
            %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc89)
            %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc89)
            %10 = cir.cmp(gt, %7, %9) : !cir.double, !cir.bool loc(#loc179)
            %11 = cir.ternary(%10, true {
              %12 = cir.const #true loc(#loc90)
              cir.yield %12 : !cir.bool loc(#loc90)
            }, false {
              %12 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc91)
              %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc92)
              %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc92)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc92)
              %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc92)
              %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc92)
              %18 = cir.cmp(lt, %12, %17) : !cir.double, !cir.bool loc(#loc180)
              %19 = cir.ternary(%18, true {
                %20 = cir.const #true loc(#loc90)
                cir.yield %20 : !cir.bool loc(#loc90)
              }, false {
                %20 = cir.const #false loc(#loc90)
                cir.yield %20 : !cir.bool loc(#loc90)
              }) : (!cir.bool) -> !cir.bool loc(#loc90)
              cir.yield %19 : !cir.bool loc(#loc90)
            }) : (!cir.bool) -> !cir.bool loc(#loc90)
            cir.if %11 {
              %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 56>> loc(#loc53)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 56>>), !cir.ptr<!s8i> loc(#loc53)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc96)
            } else {
              %12 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc97)
              %13 = cir.cast(float_to_int, %12 : !cir.double), !s32i loc(#loc97)
              cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc98)
            } loc(#loc181)
          } loc(#loc178)
        } loc(#loc171)
      } loc(#loc170)
    } loc(#loc168)
    cir.return loc(#loc55)
  } loc(#loc167)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc100)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc101)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc183)
    cir.return %2 : !s32i loc(#loc183)
  } loc(#loc182)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc186)
      %1 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc107)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc107)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc189)
          %4 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc190)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc115)
          %6 = cir.cast(int_to_float, %5 : !s32i), !cir.double loc(#loc115)
          cir.store %6, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc190)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc118)
            %8 = cir.const #cir.int<256> : !s32i loc(#loc119)
            %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc147)
            %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc120)
            %11 = cir.call @fgets(%7, %8, %10) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc121)
            %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc122)
            %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc122)
            %14 = cir.cmp(ne, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc192)
            cir.if %14 {
              %15 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc126)
              %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc127)
              cir.store %16, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc194)
            } else {
              %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc130)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc130)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc131)
            } loc(#loc193)
          } loc(#loc191)
          cir.scope {
            %7 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc134)
            %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc135)
            %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc135)
            %10 = cir.cmp(gt, %7, %9) : !cir.double, !cir.bool loc(#loc196)
            %11 = cir.ternary(%10, true {
              %12 = cir.const #true loc(#loc136)
              cir.yield %12 : !cir.bool loc(#loc136)
            }, false {
              %12 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc137)
              %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc138)
              %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc138)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc138)
              %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc138)
              %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc138)
              %18 = cir.cmp(lt, %12, %17) : !cir.double, !cir.bool loc(#loc197)
              %19 = cir.ternary(%18, true {
                %20 = cir.const #true loc(#loc136)
                cir.yield %20 : !cir.bool loc(#loc136)
              }, false {
                %20 = cir.const #false loc(#loc136)
                cir.yield %20 : !cir.bool loc(#loc136)
              }) : (!cir.bool) -> !cir.bool loc(#loc136)
              cir.yield %19 : !cir.bool loc(#loc136)
            }) : (!cir.bool) -> !cir.bool loc(#loc136)
            cir.if %11 {
              %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 56>> loc(#loc142)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 56>>), !cir.ptr<!s8i> loc(#loc142)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc143)
            } else {
              %12 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc144)
              %13 = cir.cast(float_to_int, %12 : !cir.double), !s32i loc(#loc144)
              cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc145)
            } loc(#loc198)
          } loc(#loc195)
        } loc(#loc188)
      } loc(#loc187)
    } loc(#loc185)
    cir.return loc(#loc104)
  } loc(#loc184)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":102:1)
#loc6 = loc("/usr/include/stdlib.h":103:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":50:27)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":35:1)
#loc13 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":56:1)
#loc14 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":37:5)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":55:5)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":37:8)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":37:26)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":38:5)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":39:9)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":54:9)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":40:13)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":40:45)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":41:13)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":41:35)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":43:13)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":51:13)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":43:23)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":43:36)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":43:53)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":43:17)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":43:63)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":44:13)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":47:13)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":49:13)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":46:37)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":46:32)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":46:17)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":46:48)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":50:17)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":53:31)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":53:13)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":137:1)
#loc43 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":141:1)
#loc44 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":139:5)
#loc45 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":139:11)
#loc46 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":140:5)
#loc47 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":140:11)
#loc48 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":23:1)
#loc49 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":26:1)
#loc50 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":25:12)
#loc51 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":25:5)
#loc52 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":68:19)
#loc53 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":92:27)
#loc54 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":63:1)
#loc55 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":100:1)
#loc56 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":65:5)
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":99:5)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":65:8)
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":65:27)
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":66:5)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":69:5)
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":71:5)
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":68:9)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":72:9)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":98:9)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":73:13)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":73:45)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":74:13)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":74:35)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":80:13)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":88:13)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":80:23)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":80:36)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":80:53)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":80:17)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":80:63)
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":81:13)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":84:13)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":86:13)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":83:37)
#loc81 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":83:32)
#loc82 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":83:17)
#loc83 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":83:48)
#loc84 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":87:27)
#loc85 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":87:17)
#loc86 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":90:13)
#loc87 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":97:13)
#loc88 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":90:17)
#loc89 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":90:32)
#loc90 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":90:40)
#loc91 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":90:43)
#loc92 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":90:58)
#loc93 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":91:13)
#loc94 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":93:13)
#loc95 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":95:13)
#loc96 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":92:17)
#loc97 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":96:35)
#loc98 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":96:17)
#loc99 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":28:1)
#loc100 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":31:1)
#loc101 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":30:12)
#loc102 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":30:5)
#loc103 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":103:1)
#loc104 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":135:1)
#loc105 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":105:5)
#loc106 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":134:5)
#loc107 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":105:8)
#loc108 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":105:26)
#loc109 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":106:5)
#loc110 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":107:9)
#loc111 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":133:9)
#loc112 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":108:13)
#loc113 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":108:45)
#loc114 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":109:13)
#loc115 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":109:35)
#loc116 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":115:13)
#loc117 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":123:13)
#loc118 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":115:23)
#loc119 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":115:36)
#loc120 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":115:53)
#loc121 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":115:17)
#loc122 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":115:63)
#loc123 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":116:13)
#loc124 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":119:13)
#loc125 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":121:13)
#loc126 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":118:37)
#loc127 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":118:32)
#loc128 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":118:17)
#loc129 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":118:48)
#loc130 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":122:27)
#loc131 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":122:17)
#loc132 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":125:13)
#loc133 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":132:13)
#loc134 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":125:17)
#loc135 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":125:32)
#loc136 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":125:40)
#loc137 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":125:43)
#loc138 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":125:58)
#loc139 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":126:13)
#loc140 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":128:13)
#loc141 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":130:13)
#loc142 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":127:27)
#loc143 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":127:17)
#loc144 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":131:35)
#loc145 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08.c":131:17)
#loc146 = loc(fused[#loc1, #loc2])
#loc147 = loc(fused[#loc3, #loc4])
#loc148 = loc(fused[#loc5, #loc6])
#loc149 = loc(fused[#loc7, #loc8])
#loc150 = loc(fused[#loc10, #loc11])
#loc151 = loc(fused[#loc12, #loc13])
#loc152 = loc(fused[#loc14, #loc15])
#loc153 = loc(fused[#loc16, #loc17])
#loc154 = loc(fused[#loc18, #loc15])
#loc155 = loc(fused[#loc19, #loc20])
#loc156 = loc(fused[#loc21, #loc22])
#loc157 = loc(fused[#loc23, #loc24])
#loc158 = loc(fused[#loc25, #loc26])
#loc159 = loc(fused[#loc30, #loc31])
#loc160 = loc(fused[#loc32, #loc33, #loc34, #loc26])
#loc161 = loc(fused[#loc37, #loc38])
#loc162 = loc(fused[#loc42, #loc43])
#loc163 = loc(fused[#loc44, #loc45])
#loc164 = loc(fused[#loc46, #loc47])
#loc165 = loc(fused[#loc48, #loc49])
#loc166 = loc(fused[#loc51, #loc50])
#loc167 = loc(fused[#loc54, #loc55])
#loc168 = loc(fused[#loc56, #loc57])
#loc169 = loc(fused[#loc58, #loc59])
#loc170 = loc(fused[#loc60, #loc61, #loc62, #loc57])
#loc171 = loc(fused[#loc64, #loc65])
#loc172 = loc(fused[#loc66, #loc67])
#loc173 = loc(fused[#loc68, #loc69])
#loc174 = loc(fused[#loc70, #loc71])
#loc175 = loc(fused[#loc75, #loc76])
#loc176 = loc(fused[#loc77, #loc78, #loc79, #loc71])
#loc177 = loc(fused[#loc82, #loc83])
#loc178 = loc(fused[#loc86, #loc87])
#loc179 = loc(fused[#loc88, #loc89])
#loc180 = loc(fused[#loc91, #loc92])
#loc181 = loc(fused[#loc93, #loc94, #loc95, #loc87])
#loc182 = loc(fused[#loc99, #loc100])
#loc183 = loc(fused[#loc102, #loc101])
#loc184 = loc(fused[#loc103, #loc104])
#loc185 = loc(fused[#loc105, #loc106])
#loc186 = loc(fused[#loc107, #loc108])
#loc187 = loc(fused[#loc109, #loc106])
#loc188 = loc(fused[#loc110, #loc111])
#loc189 = loc(fused[#loc112, #loc113])
#loc190 = loc(fused[#loc114, #loc115])
#loc191 = loc(fused[#loc116, #loc117])
#loc192 = loc(fused[#loc121, #loc122])
#loc193 = loc(fused[#loc123, #loc124, #loc125, #loc117])
#loc194 = loc(fused[#loc128, #loc129])
#loc195 = loc(fused[#loc132, #loc133])
#loc196 = loc(fused[#loc134, #loc135])
#loc197 = loc(fused[#loc137, #loc138])
#loc198 = loc(fused[#loc139, #loc140, #loc141, #loc133])
