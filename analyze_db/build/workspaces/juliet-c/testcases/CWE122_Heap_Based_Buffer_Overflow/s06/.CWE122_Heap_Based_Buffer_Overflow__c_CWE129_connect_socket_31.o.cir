!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc435)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc436)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc437)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc438)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc439)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc440)
  cir.func private @close(!s32i) -> !s32i loc(#loc441)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc442)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc443)
  cir.func private @printIntLine(!s32i) loc(#loc444)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc445)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc24)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc446)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc448)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc32)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc449)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc451)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc452)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc453)
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc454)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc41)
      %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc41)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc453)
      cir.scope {
        cir.do {
          cir.scope {
            %9 = cir.const #cir.int<2> : !s32i loc(#loc48)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc49)
            %11 = cir.const #cir.int<6> : !s32i loc(#loc50)
            %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc51)
            cir.store %12, %5 : !s32i, !cir.ptr<!s32i> loc(#loc457)
            cir.scope {
              %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc56)
              %52 = cir.const #cir.int<1> : !s32i loc(#loc57)
              %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc57)
              %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc459)
              cir.if %54 {
                cir.break loc(#loc59)
              } loc(#loc460)
            } loc(#loc458)
            %13 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc461)
            %14 = cir.const #cir.int<0> : !s32i loc(#loc62)
            %15 = cir.const #cir.int<16> : !u64i loc(#loc462)
            cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc463)
            %16 = cir.const #cir.int<2> : !s32i loc(#loc67)
            %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc67)
            %18 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
            cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc464)
            %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
            %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
            %21 = cir.call @inet_addr(%20) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc70)
            %22 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc71)
            %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc72)
            cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc465)
            %24 = cir.const #cir.int<27015> : !s32i loc(#loc75)
            %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc75)
            %26 = cir.call @htons(%25) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc76)
            %27 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
            cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc466)
            cir.scope {
              %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc82)
              %52 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc468)
              %53 = cir.const #cir.int<16> : !u64i loc(#loc469)
              %54 = cir.cast(integral, %53 : !u64i), !u32i loc(#loc469)
              %55 = cir.call @connect(%51, %52, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc87)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc88)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc88)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc470)
              cir.if %58 {
                cir.break loc(#loc90)
              } loc(#loc471)
            } loc(#loc467)
            %28 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc91)
            %29 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc92)
            %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc92)
            %31 = cir.const #cir.int<3> : !s32i loc(#loc93)
            %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc93)
            %33 = cir.const #cir.int<4> : !u64i loc(#loc93)
            %34 = cir.binop(mul, %32, %33) : !u64i loc(#loc93)
            %35 = cir.const #cir.int<2> : !s32i loc(#loc93)
            %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc93)
            %37 = cir.binop(add, %34, %36) : !u64i loc(#loc93)
            %38 = cir.const #cir.int<1> : !s32i loc(#loc94)
            %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc94)
            %40 = cir.binop(sub, %37, %39) : !u64i loc(#loc472)
            %41 = cir.const #cir.int<0> : !s32i loc(#loc95)
            %42 = cir.call @recv(%28, %30, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc96)
            %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc96)
            cir.store %43, %3 : !s32i, !cir.ptr<!s32i> loc(#loc473)
            cir.scope {
              %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc101)
              %52 = cir.const #cir.int<1> : !s32i loc(#loc102)
              %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc102)
              %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc475)
              %55 = cir.ternary(%54, true {
                %56 = cir.const #true loc(#loc103)
                cir.yield %56 : !cir.bool loc(#loc103)
              }, false {
                %56 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc104)
                %57 = cir.const #cir.int<0> : !s32i loc(#loc105)
                %58 = cir.cmp(eq, %56, %57) : !s32i, !cir.bool loc(#loc476)
                %59 = cir.ternary(%58, true {
                  %60 = cir.const #true loc(#loc103)
                  cir.yield %60 : !cir.bool loc(#loc103)
                }, false {
                  %60 = cir.const #false loc(#loc103)
                  cir.yield %60 : !cir.bool loc(#loc103)
                }) : (!cir.bool) -> !cir.bool loc(#loc103)
                cir.yield %59 : !cir.bool loc(#loc103)
              }) : (!cir.bool) -> !cir.bool loc(#loc103)
              cir.if %55 {
                cir.break loc(#loc107)
              } loc(#loc477)
            } loc(#loc474)
            %44 = cir.const #cir.int<0> : !s32i loc(#loc108)
            %45 = cir.cast(integral, %44 : !s32i), !s8i loc(#loc108)
            %46 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc109)
            %47 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc110)
            %48 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %46 : !s32i), !cir.ptr<!s8i> loc(#loc110)
            cir.store %45, %48 : !s8i, !cir.ptr<!s8i> loc(#loc478)
            %49 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc111)
            %50 = cir.call @atoi(%49) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc112)
            cir.store %50, %0 : !s32i, !cir.ptr<!s32i> loc(#loc479)
          } loc(#loc456)
          cir.yield loc(#loc45)
        } while {
          %9 = cir.const #cir.int<0> : !s32i loc(#loc115)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc115)
          cir.condition(%10) loc(#loc115)
        } loc(#loc455)
      } loc(#loc455)
      cir.scope {
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc118)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc119)
        %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc119)
        %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc481)
        cir.if %12 {
          %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc121)
          %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc122)
        } loc(#loc482)
      } loc(#loc480)
    } loc(#loc450)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc484)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc485)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc126)
      cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc484)
      %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc128)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc485)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc487)
        %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc488)
        %9 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc135)
        %10 = cir.const #cir.int<10> : !s32i loc(#loc136)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc136)
        %12 = cir.const #cir.int<4> : !u64i loc(#loc489)
        %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc490)
        %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc135)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc491)
        cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc488)
        cir.scope {
          %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc141)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc142)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc142)
          %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc493)
          cir.if %22 {
            %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc144)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc145)
            %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc146)
            cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc144)
          } loc(#loc494)
        } loc(#loc492)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc149)
          cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc496)
          cir.for : cond {
            %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc151)
            %21 = cir.const #cir.int<10> : !s32i loc(#loc152)
            %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc497)
            cir.condition(%22) loc(#loc153)
          } body {
            cir.scope {
              %20 = cir.const #cir.int<0> : !s32i loc(#loc155)
              %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc156)
              %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc157)
              %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc158)
              cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc499)
            } loc(#loc498)
            cir.yield loc(#loc148)
          } step {
            %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc159)
            %21 = cir.unary(inc, %20) nsw : !s32i, !s32i loc(#loc160)
            cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc500)
            cir.yield loc(#loc495)
          } loc(#loc495)
        } loc(#loc495)
        cir.scope {
          %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc163)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc164)
          %21 = cir.cmp(ge, %19, %20) : !s32i, !cir.bool loc(#loc502)
          cir.if %21 {
            %22 = cir.const #cir.int<1> : !s32i loc(#loc168)
            %23 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc169)
            %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc170)
            %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc171)
            cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc504)
            cir.scope {
              %26 = cir.const #cir.int<0> : !s32i loc(#loc174)
              cir.store %26, %7 : !s32i, !cir.ptr<!s32i> loc(#loc506)
              cir.for : cond {
                %27 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc176)
                %28 = cir.const #cir.int<10> : !s32i loc(#loc177)
                %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc507)
                cir.condition(%29) loc(#loc178)
              } body {
                cir.scope {
                  %27 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc180)
                  %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc181)
                  %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc182)
                  %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc180)
                  cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc183)
                } loc(#loc508)
                cir.yield loc(#loc173)
              } step {
                %27 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc184)
                %28 = cir.unary(inc, %27) nsw : !s32i, !s32i loc(#loc185)
                cir.store %28, %7 : !s32i, !cir.ptr<!s32i> loc(#loc509)
                cir.yield loc(#loc505)
              } loc(#loc505)
            } loc(#loc505)
          } else {
            %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc24)
            %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc24)
            cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc186)
          } loc(#loc503)
        } loc(#loc501)
        %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc187)
        %17 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc188)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc188)
        cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc187)
      } loc(#loc486)
    } loc(#loc483)
    cir.return loc(#loc28)
  } loc(#loc447)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc511)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc191)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc512)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc193)
    cir.return loc(#loc190)
  } loc(#loc510)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc514)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc199)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc200)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc515)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc202)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc516)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc518)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc519)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc207)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc518)
      %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc209)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc519)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc521)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc522)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc216)
        %11 = cir.const #cir.int<10> : !s32i loc(#loc217)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc217)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc523)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc524)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc216)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc525)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc522)
        cir.scope {
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc222)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc223)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc223)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !cir.bool loc(#loc527)
          cir.if %23 {
            %24 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc225)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc226)
            %26 = cir.unary(minus, %25) nsw : !s32i, !s32i loc(#loc227)
            cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc225)
          } loc(#loc528)
        } loc(#loc526)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc230)
          cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc530)
          cir.for : cond {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc232)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc233)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc531)
            cir.condition(%23) loc(#loc234)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc236)
              %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc237)
              %23 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc238)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc239)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc533)
            } loc(#loc532)
            cir.yield loc(#loc229)
          } step {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc240)
            %22 = cir.unary(inc, %21) nsw : !s32i, !s32i loc(#loc241)
            cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc534)
            cir.yield loc(#loc529)
          } loc(#loc529)
        } loc(#loc529)
        cir.scope {
          %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc244)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc245)
          %22 = cir.cmp(ge, %20, %21) : !s32i, !cir.bool loc(#loc536)
          cir.if %22 {
            %23 = cir.const #cir.int<1> : !s32i loc(#loc249)
            %24 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc250)
            %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc251)
            %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc252)
            cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc538)
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc255)
              cir.store %27, %8 : !s32i, !cir.ptr<!s32i> loc(#loc540)
              cir.for : cond {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc257)
                %29 = cir.const #cir.int<10> : !s32i loc(#loc258)
                %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc541)
                cir.condition(%30) loc(#loc259)
              } body {
                cir.scope {
                  %28 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc261)
                  %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc262)
                  %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc263)
                  %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc261)
                  cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc264)
                } loc(#loc542)
                cir.yield loc(#loc254)
              } step {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc265)
                %29 = cir.unary(inc, %28) nsw : !s32i, !s32i loc(#loc266)
                cir.store %29, %8 : !s32i, !cir.ptr<!s32i> loc(#loc543)
                cir.yield loc(#loc539)
              } loc(#loc539)
            } loc(#loc539)
          } else {
            %23 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc267)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc267)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc268)
          } loc(#loc537)
        } loc(#loc535)
        %17 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc269)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc270)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc270)
        cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc269)
      } loc(#loc520)
    } loc(#loc517)
    cir.return loc(#loc196)
  } loc(#loc513)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc271)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc545)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc276)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc277)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc546)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc548)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc549)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc550)
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc551)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc286)
      %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc286)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc550)
      cir.scope {
        cir.do {
          cir.scope {
            %9 = cir.const #cir.int<2> : !s32i loc(#loc293)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc294)
            %11 = cir.const #cir.int<6> : !s32i loc(#loc295)
            %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc296)
            cir.store %12, %5 : !s32i, !cir.ptr<!s32i> loc(#loc554)
            cir.scope {
              %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc301)
              %52 = cir.const #cir.int<1> : !s32i loc(#loc302)
              %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc302)
              %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc556)
              cir.if %54 {
                cir.break loc(#loc304)
              } loc(#loc557)
            } loc(#loc555)
            %13 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc558)
            %14 = cir.const #cir.int<0> : !s32i loc(#loc307)
            %15 = cir.const #cir.int<16> : !u64i loc(#loc559)
            cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc560)
            %16 = cir.const #cir.int<2> : !s32i loc(#loc312)
            %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc312)
            %18 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
            cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc561)
            %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc314)
            %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc314)
            %21 = cir.call @inet_addr(%20) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc315)
            %22 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc71)
            %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc72)
            cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc562)
            %24 = cir.const #cir.int<27015> : !s32i loc(#loc318)
            %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc318)
            %26 = cir.call @htons(%25) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc319)
            %27 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
            cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc563)
            cir.scope {
              %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc324)
              %52 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc565)
              %53 = cir.const #cir.int<16> : !u64i loc(#loc566)
              %54 = cir.cast(integral, %53 : !u64i), !u32i loc(#loc566)
              %55 = cir.call @connect(%51, %52, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc329)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc330)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc330)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc567)
              cir.if %58 {
                cir.break loc(#loc332)
              } loc(#loc568)
            } loc(#loc564)
            %28 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc333)
            %29 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc334)
            %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc334)
            %31 = cir.const #cir.int<3> : !s32i loc(#loc335)
            %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc335)
            %33 = cir.const #cir.int<4> : !u64i loc(#loc335)
            %34 = cir.binop(mul, %32, %33) : !u64i loc(#loc335)
            %35 = cir.const #cir.int<2> : !s32i loc(#loc335)
            %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc335)
            %37 = cir.binop(add, %34, %36) : !u64i loc(#loc335)
            %38 = cir.const #cir.int<1> : !s32i loc(#loc336)
            %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc336)
            %40 = cir.binop(sub, %37, %39) : !u64i loc(#loc569)
            %41 = cir.const #cir.int<0> : !s32i loc(#loc337)
            %42 = cir.call @recv(%28, %30, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc338)
            %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc338)
            cir.store %43, %3 : !s32i, !cir.ptr<!s32i> loc(#loc570)
            cir.scope {
              %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc343)
              %52 = cir.const #cir.int<1> : !s32i loc(#loc344)
              %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc344)
              %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc572)
              %55 = cir.ternary(%54, true {
                %56 = cir.const #true loc(#loc345)
                cir.yield %56 : !cir.bool loc(#loc345)
              }, false {
                %56 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc346)
                %57 = cir.const #cir.int<0> : !s32i loc(#loc347)
                %58 = cir.cmp(eq, %56, %57) : !s32i, !cir.bool loc(#loc573)
                %59 = cir.ternary(%58, true {
                  %60 = cir.const #true loc(#loc345)
                  cir.yield %60 : !cir.bool loc(#loc345)
                }, false {
                  %60 = cir.const #false loc(#loc345)
                  cir.yield %60 : !cir.bool loc(#loc345)
                }) : (!cir.bool) -> !cir.bool loc(#loc345)
                cir.yield %59 : !cir.bool loc(#loc345)
              }) : (!cir.bool) -> !cir.bool loc(#loc345)
              cir.if %55 {
                cir.break loc(#loc349)
              } loc(#loc574)
            } loc(#loc571)
            %44 = cir.const #cir.int<0> : !s32i loc(#loc350)
            %45 = cir.cast(integral, %44 : !s32i), !s8i loc(#loc350)
            %46 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc351)
            %47 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc352)
            %48 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %46 : !s32i), !cir.ptr<!s8i> loc(#loc352)
            cir.store %45, %48 : !s8i, !cir.ptr<!s8i> loc(#loc575)
            %49 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc353)
            %50 = cir.call @atoi(%49) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc354)
            cir.store %50, %0 : !s32i, !cir.ptr<!s32i> loc(#loc576)
          } loc(#loc553)
          cir.yield loc(#loc290)
        } while {
          %9 = cir.const #cir.int<0> : !s32i loc(#loc357)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc357)
          cir.condition(%10) loc(#loc357)
        } loc(#loc552)
      } loc(#loc552)
      cir.scope {
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc360)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc361)
        %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc361)
        %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc578)
        cir.if %12 {
          %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc363)
          %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc364)
        } loc(#loc579)
      } loc(#loc577)
    } loc(#loc547)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc581)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc582)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc368)
      cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc581)
      %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc370)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc582)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc584)
        %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc585)
        %9 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc377)
        %10 = cir.const #cir.int<10> : !s32i loc(#loc378)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc378)
        %12 = cir.const #cir.int<4> : !u64i loc(#loc586)
        %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc587)
        %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc377)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc588)
        cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc585)
        cir.scope {
          %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc383)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc384)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc384)
          %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc590)
          cir.if %22 {
            %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc386)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc387)
            %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc388)
            cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc386)
          } loc(#loc591)
        } loc(#loc589)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc391)
          cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc593)
          cir.for : cond {
            %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc393)
            %21 = cir.const #cir.int<10> : !s32i loc(#loc394)
            %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc594)
            cir.condition(%22) loc(#loc395)
          } body {
            cir.scope {
              %20 = cir.const #cir.int<0> : !s32i loc(#loc397)
              %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc398)
              %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc399)
              %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc400)
              cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc596)
            } loc(#loc595)
            cir.yield loc(#loc390)
          } step {
            %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc401)
            %21 = cir.unary(inc, %20) nsw : !s32i, !s32i loc(#loc402)
            cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc597)
            cir.yield loc(#loc592)
          } loc(#loc592)
        } loc(#loc592)
        cir.scope {
          %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc405)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc406)
          %21 = cir.cmp(ge, %19, %20) : !s32i, !cir.bool loc(#loc599)
          %22 = cir.ternary(%21, true {
            %23 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc408)
            %24 = cir.const #cir.int<10> : !s32i loc(#loc409)
            %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc600)
            %26 = cir.ternary(%25, true {
              %27 = cir.const #true loc(#loc407)
              cir.yield %27 : !cir.bool loc(#loc407)
            }, false {
              %27 = cir.const #false loc(#loc407)
              cir.yield %27 : !cir.bool loc(#loc407)
            }) : (!cir.bool) -> !cir.bool loc(#loc407)
            cir.yield %26 : !cir.bool loc(#loc407)
          }, false {
            %23 = cir.const #false loc(#loc407)
            cir.yield %23 : !cir.bool loc(#loc407)
          }) : (!cir.bool) -> !cir.bool loc(#loc407)
          cir.if %22 {
            %23 = cir.const #cir.int<1> : !s32i loc(#loc414)
            %24 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc415)
            %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc416)
            %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc417)
            cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc602)
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc420)
              cir.store %27, %7 : !s32i, !cir.ptr<!s32i> loc(#loc604)
              cir.for : cond {
                %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc422)
                %29 = cir.const #cir.int<10> : !s32i loc(#loc423)
                %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc605)
                cir.condition(%30) loc(#loc424)
              } body {
                cir.scope {
                  %28 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc426)
                  %29 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc427)
                  %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc428)
                  %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc426)
                  cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc429)
                } loc(#loc606)
                cir.yield loc(#loc419)
              } step {
                %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc430)
                %29 = cir.unary(inc, %28) nsw : !s32i, !s32i loc(#loc431)
                cir.store %29, %7 : !s32i, !cir.ptr<!s32i> loc(#loc607)
                cir.yield loc(#loc603)
              } loc(#loc603)
            } loc(#loc603)
          } else {
            %23 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc271)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc271)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc432)
          } loc(#loc601)
        } loc(#loc598)
        %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc433)
        %17 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc434)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc434)
        cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc433)
      } loc(#loc583)
    } loc(#loc580)
    cir.return loc(#loc273)
  } loc(#loc544)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":75:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("/usr/include/stdlib.h":672:1)
#loc17 = loc("/usr/include/stdlib.h":672:45)
#loc18 = loc("/usr/include/stdlib.h":756:1)
#loc19 = loc("/usr/include/stdlib.h":756:70)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":130:27)
#loc25 = loc("/usr/include/stdlib.h":687:1)
#loc26 = loc("/usr/include/stdlib.h":687:32)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":44:1)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":135:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":46:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":46:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":48:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":48:12)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":48:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":49:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":104:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":54:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":54:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":55:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":55:28)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":56:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":56:32)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":57:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":57:41)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":58:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":93:17)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":59:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":92:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":68:36)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":68:45)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":68:58)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":68:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":68:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":68:69)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":69:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":72:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":69:17)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":69:34)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":70:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":71:17)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":73:20)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":73:21)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":73:30)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":73:33)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":73:47)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":73:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":73:48)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":74:34)
#loc68 = loc("/usr/include/netinet/in.h":249:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":74:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":75:39)
#loc71 = loc("/usr/include/netinet/in.h":251:20)
#loc72 = loc("/usr/include/netinet/in.h":33:15)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":75:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":75:59)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":76:38)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":76:32)
#loc77 = loc("/usr/include/netinet/in.h":250:15)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":76:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":76:46)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":77:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":80:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":77:25)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":77:58)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":77:59)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":77:68)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":77:82)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":77:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":77:88)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":78:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":79:17)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":83:31)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":83:46)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":83:59)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":83:77)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":83:80)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":83:26)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":83:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":83:81)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":84:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":87:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":84:17)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":84:31)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":84:44)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":84:47)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":84:61)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":85:13)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":86:17)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":89:39)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":89:25)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":89:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":91:25)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":91:20)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":91:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":91:36)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":93:16)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":94:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":97:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":94:13)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":94:30)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":95:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":96:26)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":96:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":105:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":134:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":106:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":106:24)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":107:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":107:20)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":108:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":133:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":109:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":109:17)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":110:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":110:58)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":110:35)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":110:42)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":110:47)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":110:57)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":111:13)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":111:43)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":111:17)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":111:27)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":111:33)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":111:34)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":111:40)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":111:39)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":113:13)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":116:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":113:22)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":113:18)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":113:25)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":113:29)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":113:27)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":114:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":115:29)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":115:17)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":115:24)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":115:25)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":113:34)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":113:33)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":119:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":131:13)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":119:17)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":119:25)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":120:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":127:13)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":129:13)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":121:32)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":121:17)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":121:24)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":121:28)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":123:17)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":126:17)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":123:25)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":123:21)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":123:28)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":123:32)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":123:30)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":124:17)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":125:34)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":125:41)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":125:42)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":125:21)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":123:37)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":123:36)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":130:17)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":132:13)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":132:18)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":275:1)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":279:1)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":277:5)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":277:13)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":278:5)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":278:13)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":142:1)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":180:1)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":144:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":144:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":146:13)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":146:12)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":146:5)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":149:12)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":149:5)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":150:5)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":179:5)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":151:9)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":151:24)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":152:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":152:20)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":153:9)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":178:9)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":154:13)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":154:17)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":155:13)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":155:58)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":155:35)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":155:42)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":155:47)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":155:57)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":156:13)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":156:43)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":156:17)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":156:27)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":156:33)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":156:34)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":156:40)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":156:39)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":158:13)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":161:13)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":158:22)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":158:18)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":158:25)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":158:29)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":158:27)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":159:13)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":160:29)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":160:17)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":160:24)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":160:25)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":158:34)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":158:33)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":164:13)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":176:13)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":164:17)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":164:25)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":165:13)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":172:13)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":174:13)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":166:32)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":166:17)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":166:24)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":166:28)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":168:17)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":171:17)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":168:25)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":168:21)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":168:28)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":168:32)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":168:30)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":169:17)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":170:34)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":170:41)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":170:42)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":170:21)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":168:37)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":168:36)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":175:27)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":175:17)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":177:13)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":177:18)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":268:27)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":183:1)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":273:1)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":185:5)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":185:9)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":187:13)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":187:12)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":187:5)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":188:5)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":243:5)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":193:9)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":193:13)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":194:9)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":194:28)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":195:9)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":195:32)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":196:9)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":196:41)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":197:9)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":232:17)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":198:9)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":231:9)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":207:36)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":207:45)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":207:58)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":207:29)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":207:13)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":207:69)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":208:13)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":211:13)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":208:17)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":208:34)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":209:13)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":210:17)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":212:20)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":212:21)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":212:30)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":212:33)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":212:47)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":212:13)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":212:48)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":213:34)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":213:13)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":214:49)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":214:39)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":214:13)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":214:59)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":215:38)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":215:32)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":215:13)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":215:46)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":216:13)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":219:13)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":216:25)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":216:58)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":216:59)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":216:68)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":216:82)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":216:17)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":216:88)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":217:13)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":218:17)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":222:31)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":222:46)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":222:59)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":222:77)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":222:80)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":222:26)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":222:13)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":222:81)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":223:13)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":226:13)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":223:17)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":223:31)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":223:44)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":223:47)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":223:61)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":224:13)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":225:17)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":228:39)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":228:25)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":228:13)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":230:25)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":230:20)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":230:13)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":230:36)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":232:16)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":233:9)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":236:9)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":233:13)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":233:30)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":234:9)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":235:26)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":235:13)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":244:5)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":272:5)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":245:9)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":245:24)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":246:9)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":246:20)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":247:9)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":271:9)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":248:13)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":248:17)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":249:13)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":249:58)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":249:35)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":249:42)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":249:47)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":249:57)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":250:13)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":250:43)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":250:17)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":250:27)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":250:33)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":250:34)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":250:40)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":250:39)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":252:13)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":255:13)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":252:22)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":252:18)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":252:25)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":252:29)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":252:27)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":253:13)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":254:29)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":254:17)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":254:24)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":254:25)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":252:34)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":252:33)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":257:13)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":269:13)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":257:17)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":257:25)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":257:27)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":257:30)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":257:38)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":257:40)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":258:13)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":265:13)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":267:13)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":259:32)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":259:17)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":259:24)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":259:28)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":261:17)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":264:17)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":261:25)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":261:21)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":261:28)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":261:32)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":261:30)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":262:17)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":263:34)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":263:41)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":263:42)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":263:21)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":261:37)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":261:36)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":268:17)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":270:13)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c":270:18)
#loc435 = loc(fused[#loc1, #loc2])
#loc436 = loc(fused[#loc3, #loc4])
#loc437 = loc(fused[#loc6, #loc7])
#loc438 = loc(fused[#loc8, #loc9])
#loc439 = loc(fused[#loc10, #loc11])
#loc440 = loc(fused[#loc12, #loc13])
#loc441 = loc(fused[#loc14, #loc15])
#loc442 = loc(fused[#loc16, #loc17])
#loc443 = loc(fused[#loc18, #loc19])
#loc444 = loc(fused[#loc20, #loc21])
#loc445 = loc(fused[#loc22, #loc23])
#loc446 = loc(fused[#loc25, #loc26])
#loc447 = loc(fused[#loc27, #loc28])
#loc448 = loc(fused[#loc29, #loc30])
#loc449 = loc(fused[#loc33, #loc31])
#loc450 = loc(fused[#loc34, #loc35])
#loc451 = loc(fused[#loc36, #loc37])
#loc452 = loc(fused[#loc38, #loc39])
#loc453 = loc(fused[#loc40, #loc41])
#loc454 = loc(fused[#loc42, #loc43])
#loc455 = loc(fused[#loc44, #loc45])
#loc456 = loc(fused[#loc46, #loc47])
#loc457 = loc(fused[#loc52, #loc53])
#loc458 = loc(fused[#loc54, #loc55])
#loc459 = loc(fused[#loc56, #loc57])
#loc460 = loc(fused[#loc58, #loc55])
#loc461 = loc(fused[#loc60, #loc61])
#loc462 = loc(fused[#loc63, #loc64])
#loc463 = loc(fused[#loc65, #loc66])
#loc464 = loc(fused[#loc69, #loc67])
#loc465 = loc(fused[#loc73, #loc74])
#loc466 = loc(fused[#loc78, #loc79])
#loc467 = loc(fused[#loc80, #loc81])
#loc468 = loc(fused[#loc83, #loc84])
#loc469 = loc(fused[#loc85, #loc86])
#loc470 = loc(fused[#loc87, #loc88])
#loc471 = loc(fused[#loc89, #loc81])
#loc472 = loc(fused[#loc93, #loc94])
#loc473 = loc(fused[#loc97, #loc98])
#loc474 = loc(fused[#loc99, #loc100])
#loc475 = loc(fused[#loc101, #loc102])
#loc476 = loc(fused[#loc104, #loc105])
#loc477 = loc(fused[#loc106, #loc100])
#loc478 = loc(fused[#loc110, #loc108])
#loc479 = loc(fused[#loc113, #loc114])
#loc480 = loc(fused[#loc116, #loc117])
#loc481 = loc(fused[#loc118, #loc119])
#loc482 = loc(fused[#loc120, #loc117])
#loc483 = loc(fused[#loc123, #loc124])
#loc484 = loc(fused[#loc125, #loc126])
#loc485 = loc(fused[#loc127, #loc128])
#loc486 = loc(fused[#loc129, #loc130])
#loc487 = loc(fused[#loc131, #loc132])
#loc488 = loc(fused[#loc133, #loc134])
#loc489 = loc(fused[#loc137, #loc138])
#loc490 = loc(fused[#loc136, #loc138])
#loc491 = loc(fused[#loc135, #loc134])
#loc492 = loc(fused[#loc139, #loc140])
#loc493 = loc(fused[#loc141, #loc142])
#loc494 = loc(fused[#loc143, #loc140])
#loc495 = loc(fused[#loc147, #loc148])
#loc496 = loc(fused[#loc150, #loc149])
#loc497 = loc(fused[#loc151, #loc152])
#loc498 = loc(fused[#loc154, #loc148])
#loc499 = loc(fused[#loc156, #loc155])
#loc500 = loc(fused[#loc160, #loc159])
#loc501 = loc(fused[#loc161, #loc162])
#loc502 = loc(fused[#loc163, #loc164])
#loc503 = loc(fused[#loc165, #loc166, #loc167, #loc162])
#loc504 = loc(fused[#loc169, #loc168])
#loc505 = loc(fused[#loc172, #loc173])
#loc506 = loc(fused[#loc175, #loc174])
#loc507 = loc(fused[#loc176, #loc177])
#loc508 = loc(fused[#loc179, #loc173])
#loc509 = loc(fused[#loc185, #loc184])
#loc510 = loc(fused[#loc189, #loc190])
#loc511 = loc(fused[#loc191, #loc192])
#loc512 = loc(fused[#loc193, #loc194])
#loc513 = loc(fused[#loc195, #loc196])
#loc514 = loc(fused[#loc197, #loc198])
#loc515 = loc(fused[#loc201, #loc199])
#loc516 = loc(fused[#loc203, #loc202])
#loc517 = loc(fused[#loc204, #loc205])
#loc518 = loc(fused[#loc206, #loc207])
#loc519 = loc(fused[#loc208, #loc209])
#loc520 = loc(fused[#loc210, #loc211])
#loc521 = loc(fused[#loc212, #loc213])
#loc522 = loc(fused[#loc214, #loc215])
#loc523 = loc(fused[#loc218, #loc219])
#loc524 = loc(fused[#loc217, #loc219])
#loc525 = loc(fused[#loc216, #loc215])
#loc526 = loc(fused[#loc220, #loc221])
#loc527 = loc(fused[#loc222, #loc223])
#loc528 = loc(fused[#loc224, #loc221])
#loc529 = loc(fused[#loc228, #loc229])
#loc530 = loc(fused[#loc231, #loc230])
#loc531 = loc(fused[#loc232, #loc233])
#loc532 = loc(fused[#loc235, #loc229])
#loc533 = loc(fused[#loc237, #loc236])
#loc534 = loc(fused[#loc241, #loc240])
#loc535 = loc(fused[#loc242, #loc243])
#loc536 = loc(fused[#loc244, #loc245])
#loc537 = loc(fused[#loc246, #loc247, #loc248, #loc243])
#loc538 = loc(fused[#loc250, #loc249])
#loc539 = loc(fused[#loc253, #loc254])
#loc540 = loc(fused[#loc256, #loc255])
#loc541 = loc(fused[#loc257, #loc258])
#loc542 = loc(fused[#loc260, #loc254])
#loc543 = loc(fused[#loc266, #loc265])
#loc544 = loc(fused[#loc272, #loc273])
#loc545 = loc(fused[#loc274, #loc275])
#loc546 = loc(fused[#loc278, #loc276])
#loc547 = loc(fused[#loc279, #loc280])
#loc548 = loc(fused[#loc281, #loc282])
#loc549 = loc(fused[#loc283, #loc284])
#loc550 = loc(fused[#loc285, #loc286])
#loc551 = loc(fused[#loc287, #loc288])
#loc552 = loc(fused[#loc289, #loc290])
#loc553 = loc(fused[#loc291, #loc292])
#loc554 = loc(fused[#loc297, #loc298])
#loc555 = loc(fused[#loc299, #loc300])
#loc556 = loc(fused[#loc301, #loc302])
#loc557 = loc(fused[#loc303, #loc300])
#loc558 = loc(fused[#loc305, #loc306])
#loc559 = loc(fused[#loc308, #loc309])
#loc560 = loc(fused[#loc310, #loc311])
#loc561 = loc(fused[#loc313, #loc312])
#loc562 = loc(fused[#loc316, #loc317])
#loc563 = loc(fused[#loc320, #loc321])
#loc564 = loc(fused[#loc322, #loc323])
#loc565 = loc(fused[#loc325, #loc326])
#loc566 = loc(fused[#loc327, #loc328])
#loc567 = loc(fused[#loc329, #loc330])
#loc568 = loc(fused[#loc331, #loc323])
#loc569 = loc(fused[#loc335, #loc336])
#loc570 = loc(fused[#loc339, #loc340])
#loc571 = loc(fused[#loc341, #loc342])
#loc572 = loc(fused[#loc343, #loc344])
#loc573 = loc(fused[#loc346, #loc347])
#loc574 = loc(fused[#loc348, #loc342])
#loc575 = loc(fused[#loc352, #loc350])
#loc576 = loc(fused[#loc355, #loc356])
#loc577 = loc(fused[#loc358, #loc359])
#loc578 = loc(fused[#loc360, #loc361])
#loc579 = loc(fused[#loc362, #loc359])
#loc580 = loc(fused[#loc365, #loc366])
#loc581 = loc(fused[#loc367, #loc368])
#loc582 = loc(fused[#loc369, #loc370])
#loc583 = loc(fused[#loc371, #loc372])
#loc584 = loc(fused[#loc373, #loc374])
#loc585 = loc(fused[#loc375, #loc376])
#loc586 = loc(fused[#loc379, #loc380])
#loc587 = loc(fused[#loc378, #loc380])
#loc588 = loc(fused[#loc377, #loc376])
#loc589 = loc(fused[#loc381, #loc382])
#loc590 = loc(fused[#loc383, #loc384])
#loc591 = loc(fused[#loc385, #loc382])
#loc592 = loc(fused[#loc389, #loc390])
#loc593 = loc(fused[#loc392, #loc391])
#loc594 = loc(fused[#loc393, #loc394])
#loc595 = loc(fused[#loc396, #loc390])
#loc596 = loc(fused[#loc398, #loc397])
#loc597 = loc(fused[#loc402, #loc401])
#loc598 = loc(fused[#loc403, #loc404])
#loc599 = loc(fused[#loc405, #loc406])
#loc600 = loc(fused[#loc408, #loc410])
#loc601 = loc(fused[#loc411, #loc412, #loc413, #loc404])
#loc602 = loc(fused[#loc415, #loc414])
#loc603 = loc(fused[#loc418, #loc419])
#loc604 = loc(fused[#loc421, #loc420])
#loc605 = loc(fused[#loc422, #loc423])
#loc606 = loc(fused[#loc425, #loc419])
#loc607 = loc(fused[#loc431, #loc430])
