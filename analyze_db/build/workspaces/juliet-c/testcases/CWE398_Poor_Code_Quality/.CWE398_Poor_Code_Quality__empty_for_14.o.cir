!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_for_14.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.global "private" external @globalFive : !s32i {alignment = 4 : i64} loc(#loc87)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc88)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_for_14_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc87)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc11)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc91)
      cir.if %3 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc94)
          cir.scope {
            %7 = cir.const #cir.int<0> : !s32i loc(#loc19)
            cir.store %7, %6 : !s32i, !cir.ptr<!s32i> loc(#loc96)
            cir.for : cond {
              %8 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc21)
              %9 = cir.const #cir.int<10> : !s32i loc(#loc22)
              %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc97)
              cir.condition(%10) loc(#loc23)
            } body {
              cir.yield loc(#loc18)
            } step {
              %8 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc24)
              %9 = cir.unary(inc, %8) nsw : !s32i, !s32i loc(#loc25)
              cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc98)
              cir.yield loc(#loc95)
            } loc(#loc95)
          } loc(#loc95)
        } loc(#loc93)
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc5)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc5)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc26)
      } loc(#loc92)
    } loc(#loc90)
    cir.return loc(#loc7)
  } loc(#loc89)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_for_14_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc100)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc101)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc33)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Inside the for statement\00" : !cir.array<!s8i x 25>> : !cir.array<!s8i x 25> {alignment = 1 : i64} loc(#loc34)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc35)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc87)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc40)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc41)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc104)
      cir.if %3 {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc33)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc33)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc45)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc107)
          cir.scope {
            %7 = cir.const #cir.int<0> : !s32i loc(#loc52)
            cir.store %7, %6 : !s32i, !cir.ptr<!s32i> loc(#loc109)
            cir.for : cond {
              %8 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc54)
              %9 = cir.const #cir.int<10> : !s32i loc(#loc55)
              %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc110)
              cir.condition(%10) loc(#loc56)
            } body {
              cir.scope {
                %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc34)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc34)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc58)
              } loc(#loc111)
              cir.yield loc(#loc51)
            } step {
              %8 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc59)
              %9 = cir.unary(inc, %8) nsw : !s32i, !s32i loc(#loc60)
              cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc112)
              cir.yield loc(#loc108)
            } loc(#loc108)
          } loc(#loc108)
        } loc(#loc106)
        %4 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc35)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc35)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc61)
      } loc(#loc105)
    } loc(#loc103)
    cir.return loc(#loc37)
  } loc(#loc102)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc87)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc67)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc115)
      cir.if %3 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc118)
          cir.scope {
            %7 = cir.const #cir.int<0> : !s32i loc(#loc75)
            cir.store %7, %6 : !s32i, !cir.ptr<!s32i> loc(#loc120)
            cir.for : cond {
              %8 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc77)
              %9 = cir.const #cir.int<10> : !s32i loc(#loc78)
              %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc121)
              cir.condition(%10) loc(#loc79)
            } body {
              cir.scope {
                %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc81)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc81)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc82)
              } loc(#loc122)
              cir.yield loc(#loc74)
            } step {
              %8 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc83)
              %9 = cir.unary(inc, %8) nsw : !s32i, !s32i loc(#loc84)
              cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc123)
              cir.yield loc(#loc119)
            } loc(#loc119)
          } loc(#loc119)
        } loc(#loc117)
        %4 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc85)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc85)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc86)
      } loc(#loc116)
    } loc(#loc114)
    cir.return loc(#loc63)
  } loc(#loc113)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_for_14.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":118:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":118:12)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":31:19)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":20:1)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":33:1)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":22:5)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":32:5)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":22:8)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":22:20)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":23:5)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":25:9)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":30:9)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":26:13)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":26:17)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":27:13)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":29:13)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":27:22)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":27:18)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":27:25)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":27:29)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":27:27)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":27:34)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":27:33)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":31:9)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":78:1)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":82:1)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":80:5)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":80:11)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":81:5)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":81:11)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":45:19)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":54:27)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":57:19)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":40:1)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":59:1)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":42:5)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":58:5)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":42:8)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":42:20)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":43:5)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":46:5)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":48:5)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":45:9)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":50:9)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":56:9)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":51:13)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":51:17)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":52:13)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":55:13)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":52:22)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":52:18)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":52:25)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":52:29)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":52:27)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":53:13)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":54:17)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":52:34)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":52:33)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":57:9)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":62:1)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":76:1)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":64:5)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":75:5)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":64:8)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":64:20)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":65:5)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":67:9)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":73:9)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":68:13)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":68:17)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":69:13)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":72:13)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":69:22)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":69:18)
#loc77 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":69:25)
#loc78 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":69:29)
#loc79 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":69:27)
#loc80 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":70:13)
#loc81 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":71:27)
#loc82 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":71:17)
#loc83 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":69:34)
#loc84 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":69:33)
#loc85 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":74:19)
#loc86 = loc("CWE398_Poor_Code_Quality__empty_for_14.c":74:9)
#loc87 = loc(fused[#loc1, #loc2])
#loc88 = loc(fused[#loc3, #loc4])
#loc89 = loc(fused[#loc6, #loc7])
#loc90 = loc(fused[#loc8, #loc9])
#loc91 = loc(fused[#loc10, #loc11])
#loc92 = loc(fused[#loc12, #loc9])
#loc93 = loc(fused[#loc13, #loc14])
#loc94 = loc(fused[#loc15, #loc16])
#loc95 = loc(fused[#loc17, #loc18])
#loc96 = loc(fused[#loc20, #loc19])
#loc97 = loc(fused[#loc21, #loc22])
#loc98 = loc(fused[#loc25, #loc24])
#loc99 = loc(fused[#loc27, #loc28])
#loc100 = loc(fused[#loc29, #loc30])
#loc101 = loc(fused[#loc31, #loc32])
#loc102 = loc(fused[#loc36, #loc37])
#loc103 = loc(fused[#loc38, #loc39])
#loc104 = loc(fused[#loc40, #loc41])
#loc105 = loc(fused[#loc42, #loc43, #loc44, #loc39])
#loc106 = loc(fused[#loc46, #loc47])
#loc107 = loc(fused[#loc48, #loc49])
#loc108 = loc(fused[#loc50, #loc51])
#loc109 = loc(fused[#loc53, #loc52])
#loc110 = loc(fused[#loc54, #loc55])
#loc111 = loc(fused[#loc57, #loc51])
#loc112 = loc(fused[#loc60, #loc59])
#loc113 = loc(fused[#loc62, #loc63])
#loc114 = loc(fused[#loc64, #loc65])
#loc115 = loc(fused[#loc66, #loc67])
#loc116 = loc(fused[#loc68, #loc65])
#loc117 = loc(fused[#loc69, #loc70])
#loc118 = loc(fused[#loc71, #loc72])
#loc119 = loc(fused[#loc73, #loc74])
#loc120 = loc(fused[#loc76, #loc75])
#loc121 = loc(fused[#loc77, #loc78])
#loc122 = loc(fused[#loc80, #loc74])
#loc123 = loc(fused[#loc84, #loc83])
