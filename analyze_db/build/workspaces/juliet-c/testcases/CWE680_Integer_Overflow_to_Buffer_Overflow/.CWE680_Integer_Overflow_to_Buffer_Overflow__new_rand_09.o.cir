!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc162)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc163)
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc164)
  cir.func private @printIntLine(!s32i) loc(#loc165)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_093badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc167)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc14)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc168)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc162)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc18)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc20)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc20)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc20)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc20)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc20)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc20)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc20)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc20)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc20)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc20)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc20)
          cir.yield %23 : !u32i loc(#loc20)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc20)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc20)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc20)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc20)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc20)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc20)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc20)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc20)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc20)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc20)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc20)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc20)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc20)
          cir.yield %27 : !u32i loc(#loc20)
        }) : (!cir.bool) -> !u32i loc(#loc20)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc20)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
      } loc(#loc170)
    } loc(#loc169)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc173)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc174)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc175)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc29)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc176)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc177)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc178)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc33)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc34)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc179)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc179)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc180)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc40)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc40)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc182)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc42)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc43)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc43)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc183)
          cir.condition(%24) loc(#loc183)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc45)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc46)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc47)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc48)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc185)
          } loc(#loc184)
          cir.yield loc(#loc39)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc49)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc50)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc186)
          cir.yield loc(#loc181)
        } loc(#loc181)
      } loc(#loc181)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc52)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc53)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc51)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc54)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
      cir.delete.array %18 : <!s32i> loc(#loc55)
    } loc(#loc172)
    cir.return loc(#loc10)
  } loc(#loc166)
  cir.global "private" constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc187)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc188)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc60)
  cir.func internal private @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09L8goodG2B1Ev() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc190)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc66)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc187)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc70)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc70)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc60)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc60)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc74)
      } else {
        %6 = cir.const #cir.int<20> : !s32i loc(#loc75)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
      } loc(#loc193)
    } loc(#loc192)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc196)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc197)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc198)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc84)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc84)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc199)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc200)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc201)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc88)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc89)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc202)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc202)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc203)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc95)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc95)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc205)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc97)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc98)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc98)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc206)
          cir.condition(%24) loc(#loc206)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc100)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc102)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc103)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc208)
          } loc(#loc207)
          cir.yield loc(#loc94)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc104)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc105)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc209)
          cir.yield loc(#loc204)
        } loc(#loc204)
      } loc(#loc204)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc106)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc107)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc108)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc106)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc109)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc110)
      cir.delete.array %18 : <!s32i> loc(#loc110)
    } loc(#loc195)
    cir.return loc(#loc62)
  } loc(#loc189)
  cir.func internal private @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09L8goodG2B2Ev() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc211)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc116)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc162)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc120)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc120)
      cir.if %5 {
        %6 = cir.const #cir.int<20> : !s32i loc(#loc122)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc215)
      } loc(#loc214)
    } loc(#loc213)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc217)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc218)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc219)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc131)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc131)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc220)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc221)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc222)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc135)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc136)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc223)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc223)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc224)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc142)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc142)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc226)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc144)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc145)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc145)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc227)
          cir.condition(%24) loc(#loc227)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc147)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc148)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc149)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc150)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc229)
          } loc(#loc228)
          cir.yield loc(#loc141)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc151)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc152)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc230)
          cir.yield loc(#loc225)
        } loc(#loc225)
      } loc(#loc225)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc153)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc154)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc155)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc153)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc156)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc157)
      cir.delete.array %18 : <!s32i> loc(#loc157)
    } loc(#loc216)
    cir.return loc(#loc112)
  } loc(#loc210)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_094goodEv() extra(#fn_attr1) {
    cir.call @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09L8goodG2B1Ev() : () -> () loc(#loc160)
    cir.call @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09L8goodG2B2Ev() : () -> () loc(#loc161)
    cir.return loc(#loc159)
  } loc(#loc231)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc6 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":24:1)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":47:1)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":26:5)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":26:9)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":28:13)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":28:12)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":28:5)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":29:5)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":33:5)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":29:8)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":30:5)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":32:16)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":32:9)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":34:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":46:5)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":35:9)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":35:16)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":35:26)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":36:9)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":36:14)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":38:21)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":38:28)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":38:38)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":38:9)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":39:37)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":24:6)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":39:28)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":39:46)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":39:9)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":40:9)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":43:9)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":40:18)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":40:14)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":40:21)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":40:33)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":41:9)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":42:29)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":42:13)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":42:24)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":42:25)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":40:40)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":40:39)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":44:22)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":44:33)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":44:34)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":44:9)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":45:19)
#loc56 = loc("../../testcasesupport/std_testcase.h":110:1)
#loc57 = loc("../../testcasesupport/std_testcase.h":110:18)
#loc58 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc59 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":62:19)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":54:1)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":82:1)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":56:5)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":56:9)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":58:13)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":58:12)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":58:5)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":59:5)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":68:5)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":59:8)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":60:5)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":63:5)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":65:5)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":62:9)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":67:16)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":67:9)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":69:5)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":81:5)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":70:9)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":70:16)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":70:26)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":71:9)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":71:14)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":73:21)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":73:28)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":73:38)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":73:9)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":74:37)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":54:13)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":74:28)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":74:46)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":74:9)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":75:9)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":78:9)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":75:18)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":75:14)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":75:21)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":75:33)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":76:9)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":77:29)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":77:13)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":77:24)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":77:25)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":75:40)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":75:39)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":79:22)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":79:33)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":79:34)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":79:9)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":80:19)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":85:1)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":108:1)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":87:5)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":87:9)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":89:13)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":89:12)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":89:5)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":90:5)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":94:5)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":90:8)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":91:5)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":93:16)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":93:9)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":95:5)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":107:5)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":96:9)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":96:16)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":96:26)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":97:9)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":97:14)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":99:21)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":99:28)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":99:38)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":99:9)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":100:37)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":85:13)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":100:28)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":100:46)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":100:9)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":101:9)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":104:9)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":101:18)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":101:14)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":101:21)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":101:33)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":102:9)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":103:29)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":103:13)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":103:24)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":103:25)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":101:40)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":101:39)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":105:22)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":105:33)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":105:34)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":105:9)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":106:19)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":110:1)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":114:1)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":112:5)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_09.cpp":113:5)
#loc162 = loc(fused[#loc1, #loc2])
#loc163 = loc(fused[#loc3, #loc4])
#loc164 = loc(fused[#loc5, #loc6])
#loc165 = loc(fused[#loc7, #loc8])
#loc166 = loc(fused[#loc9, #loc10])
#loc167 = loc(fused[#loc11, #loc12])
#loc168 = loc(fused[#loc15, #loc13])
#loc169 = loc(fused[#loc16, #loc17])
#loc170 = loc(fused[#loc19, #loc17])
#loc171 = loc(fused[#loc21, #loc20])
#loc172 = loc(fused[#loc22, #loc23])
#loc173 = loc(fused[#loc24, #loc25])
#loc174 = loc(fused[#loc24, #loc26])
#loc175 = loc(fused[#loc27, #loc28])
#loc176 = loc(fused[#loc30, #loc31])
#loc177 = loc(fused[#loc29, #loc31])
#loc178 = loc(fused[#loc32, #loc31])
#loc179 = loc(fused[#loc35, #loc36])
#loc180 = loc(fused[#loc37, #loc36])
#loc181 = loc(fused[#loc38, #loc39])
#loc182 = loc(fused[#loc41, #loc40])
#loc183 = loc(fused[#loc42, #loc43])
#loc184 = loc(fused[#loc44, #loc39])
#loc185 = loc(fused[#loc46, #loc45])
#loc186 = loc(fused[#loc50, #loc49])
#loc187 = loc(fused[#loc56, #loc57])
#loc188 = loc(fused[#loc58, #loc59])
#loc189 = loc(fused[#loc61, #loc62])
#loc190 = loc(fused[#loc63, #loc64])
#loc191 = loc(fused[#loc67, #loc65])
#loc192 = loc(fused[#loc68, #loc69])
#loc193 = loc(fused[#loc71, #loc72, #loc73, #loc69])
#loc194 = loc(fused[#loc76, #loc75])
#loc195 = loc(fused[#loc77, #loc78])
#loc196 = loc(fused[#loc79, #loc80])
#loc197 = loc(fused[#loc79, #loc81])
#loc198 = loc(fused[#loc82, #loc83])
#loc199 = loc(fused[#loc85, #loc86])
#loc200 = loc(fused[#loc84, #loc86])
#loc201 = loc(fused[#loc87, #loc86])
#loc202 = loc(fused[#loc90, #loc91])
#loc203 = loc(fused[#loc92, #loc91])
#loc204 = loc(fused[#loc93, #loc94])
#loc205 = loc(fused[#loc96, #loc95])
#loc206 = loc(fused[#loc97, #loc98])
#loc207 = loc(fused[#loc99, #loc94])
#loc208 = loc(fused[#loc101, #loc100])
#loc209 = loc(fused[#loc105, #loc104])
#loc210 = loc(fused[#loc111, #loc112])
#loc211 = loc(fused[#loc113, #loc114])
#loc212 = loc(fused[#loc117, #loc115])
#loc213 = loc(fused[#loc118, #loc119])
#loc214 = loc(fused[#loc121, #loc119])
#loc215 = loc(fused[#loc123, #loc122])
#loc216 = loc(fused[#loc124, #loc125])
#loc217 = loc(fused[#loc126, #loc127])
#loc218 = loc(fused[#loc126, #loc128])
#loc219 = loc(fused[#loc129, #loc130])
#loc220 = loc(fused[#loc132, #loc133])
#loc221 = loc(fused[#loc131, #loc133])
#loc222 = loc(fused[#loc134, #loc133])
#loc223 = loc(fused[#loc137, #loc138])
#loc224 = loc(fused[#loc139, #loc138])
#loc225 = loc(fused[#loc140, #loc141])
#loc226 = loc(fused[#loc143, #loc142])
#loc227 = loc(fused[#loc144, #loc145])
#loc228 = loc(fused[#loc146, #loc141])
#loc229 = loc(fused[#loc148, #loc147])
#loc230 = loc(fused[#loc152, #loc151])
#loc231 = loc(fused[#loc158, #loc159])
