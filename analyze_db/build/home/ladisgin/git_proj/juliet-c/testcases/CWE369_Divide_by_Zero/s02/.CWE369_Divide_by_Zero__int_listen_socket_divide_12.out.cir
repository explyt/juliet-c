!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc127 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":95:48)
#loc192 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":372:10)
#loc193 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":372:14)
#loc194 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":372:20)
#loc195 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":372:32)
#loc319 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":203:48)
#loc420 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":275:48)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc583 = loc(fused[#loc192, #loc193])
#loc584 = loc(fused[#loc194, #loc195])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc508)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc509)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc510)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc511)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc512)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc513)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc514)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc515)
  cir.func private @close(!s32i) -> !s32i loc(#loc516)
  cir.func private @printIntLine(!s32i) loc(#loc517)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc518)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc23)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc520)
    %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc521)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc522)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc523)
    %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc524)
    %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc525)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc39)
    cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc526)
    cir.br ^bb1 loc(#loc527)
  ^bb1:  // pred: ^bb0
    %8 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc528)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc528)
    %10 = cir.call %9() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc43)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc43)
    cir.brcond %11 ^bb2, ^bb46 loc(#loc529)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc530)
  ^bb3:  // pred: ^bb2
    %12 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc31)
    cir.store %13, %2 : !s32i, !cir.ptr<!s32i> loc(#loc522)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc33)
    cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc523)
    cir.br ^bb4 loc(#loc531)
  ^bb4:  // pred: ^bb3
    cir.br ^bb6 loc(#loc531)
  ^bb5:  // pred: ^bb34
    %16 = cir.const #cir.int<0> : !s32i loc(#loc52)
    %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc52)
    cir.brcond %17 ^bb6, ^bb35 loc(#loc52)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    %18 = cir.const #cir.int<2> : !s32i loc(#loc53)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %20 = cir.const #cir.int<6> : !s32i loc(#loc55)
    %21 = cir.call @socket(%18, %19, %20) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc56)
    cir.store %21, %2 : !s32i, !cir.ptr<!s32i> loc(#loc532)
    cir.br ^bb7 loc(#loc533)
  ^bb7:  // pred: ^bb6
    %22 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc62)
    %25 = cir.cmp(eq, %22, %24) : !s32i, !cir.bool loc(#loc534)
    cir.brcond %25 ^bb8, ^bb9 loc(#loc535)
  ^bb8:  // pred: ^bb7
    cir.br ^bb35 loc(#loc64)
  ^bb9:  // pred: ^bb7
    cir.br ^bb10 loc(#loc60)
  ^bb10:  // pred: ^bb9
    %26 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc536)
    %27 = cir.const #cir.int<0> : !s32i loc(#loc67)
    %28 = cir.const #cir.int<16> : !u64i loc(#loc537)
    cir.libc.memset %28 bytes from %26 set to %27 : !cir.ptr<!void>, !s32i, !u64i loc(#loc538)
    %29 = cir.const #cir.int<2> : !s32i loc(#loc72)
    %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc72)
    %31 = cir.get_member %1[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
    cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc539)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc75)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc75)
    %34 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
    %35 = cir.get_member %34[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc77)
    cir.store %33, %35 : !u32i, !cir.ptr<!u32i> loc(#loc540)
    %36 = cir.const #cir.int<27015> : !s32i loc(#loc79)
    %37 = cir.cast(integral, %36 : !s32i), !u16i loc(#loc79)
    %38 = cir.call @htons(%37) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc80)
    %39 = cir.get_member %1[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc81)
    cir.store %38, %39 : !u16i, !cir.ptr<!u16i> loc(#loc541)
    cir.br ^bb11 loc(#loc542)
  ^bb11:  // pred: ^bb10
    %40 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    %41 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc543)
    %42 = cir.const #cir.int<16> : !u64i loc(#loc544)
    %43 = cir.cast(integral, %42 : !u64i), !u32i loc(#loc544)
    %44 = cir.call @bind(%40, %41, %43) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc91)
    %45 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %46 = cir.unary(minus, %45) : !s32i, !s32i loc(#loc92)
    %47 = cir.cmp(eq, %44, %46) : !s32i, !cir.bool loc(#loc545)
    cir.brcond %47 ^bb12, ^bb13 loc(#loc546)
  ^bb12:  // pred: ^bb11
    cir.br ^bb35 loc(#loc94)
  ^bb13:  // pred: ^bb11
    cir.br ^bb14 loc(#loc85)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc547)
  ^bb15:  // pred: ^bb14
    %48 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    %49 = cir.const #cir.int<5> : !s32i loc(#loc98)
    %50 = cir.call @listen(%48, %49) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc99)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc100)
    %52 = cir.unary(minus, %51) : !s32i, !s32i loc(#loc100)
    %53 = cir.cmp(eq, %50, %52) : !s32i, !cir.bool loc(#loc548)
    cir.brcond %53 ^bb16, ^bb17 loc(#loc549)
  ^bb16:  // pred: ^bb15
    cir.br ^bb35 loc(#loc102)
  ^bb17:  // pred: ^bb15
    cir.br ^bb18 loc(#loc96)
  ^bb18:  // pred: ^bb17
    %54 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    %55 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc104)
    %56 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc105)
    %57 = cir.call @accept(%54, %55, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc106)
    cir.store %57, %3 : !s32i, !cir.ptr<!s32i> loc(#loc550)
    cir.br ^bb19 loc(#loc551)
  ^bb19:  // pred: ^bb18
    %58 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc111)
    %59 = cir.const #cir.int<1> : !s32i loc(#loc112)
    %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc112)
    %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc552)
    cir.brcond %61 ^bb20, ^bb21 loc(#loc553)
  ^bb20:  // pred: ^bb19
    cir.br ^bb35 loc(#loc114)
  ^bb21:  // pred: ^bb19
    cir.br ^bb22 loc(#loc110)
  ^bb22:  // pred: ^bb21
    %62 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    %63 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc116)
    %64 = cir.cast(bitcast, %63 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc116)
    %65 = cir.const #cir.int<3> : !s32i loc(#loc117)
    %66 = cir.cast(integral, %65 : !s32i), !u64i loc(#loc117)
    %67 = cir.const #cir.int<4> : !u64i loc(#loc117)
    %68 = cir.binop(mul, %66, %67) : !u64i loc(#loc117)
    %69 = cir.const #cir.int<2> : !s32i loc(#loc117)
    %70 = cir.cast(integral, %69 : !s32i), !u64i loc(#loc117)
    %71 = cir.binop(add, %68, %70) : !u64i loc(#loc117)
    %72 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %73 = cir.cast(integral, %72 : !s32i), !u64i loc(#loc118)
    %74 = cir.binop(sub, %71, %73) : !u64i loc(#loc554)
    %75 = cir.const #cir.int<0> : !s32i loc(#loc119)
    %76 = cir.call @recv(%62, %64, %74, %75) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc120)
    %77 = cir.cast(integral, %76 : !s64i), !s32i loc(#loc120)
    cir.store %77, %0 : !s32i, !cir.ptr<!s32i> loc(#loc555)
    cir.br ^bb23 loc(#loc556)
  ^bb23:  // pred: ^bb22
    %78 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    %79 = cir.const #cir.int<1> : !s32i loc(#loc126)
    %80 = cir.unary(minus, %79) : !s32i, !s32i loc(#loc126)
    %81 = cir.cmp(eq, %78, %80) : !s32i, !cir.bool loc(#loc557)
    cir.brcond %81 ^bb24, ^bb25 loc(#loc127)
  ^bb24:  // pred: ^bb23
    %82 = cir.const #true loc(#loc127)
    cir.br ^bb30(%82 : !cir.bool) loc(#loc127)
  ^bb25:  // pred: ^bb23
    %83 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    %84 = cir.const #cir.int<0> : !s32i loc(#loc129)
    %85 = cir.cmp(eq, %83, %84) : !s32i, !cir.bool loc(#loc558)
    cir.brcond %85 ^bb26, ^bb27 loc(#loc127)
  ^bb26:  // pred: ^bb25
    %86 = cir.const #true loc(#loc127)
    cir.br ^bb28(%86 : !cir.bool) loc(#loc127)
  ^bb27:  // pred: ^bb25
    %87 = cir.const #false loc(#loc127)
    cir.br ^bb28(%87 : !cir.bool) loc(#loc127)
  ^bb28(%88: !cir.bool loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":95:48)):  // 2 preds: ^bb26, ^bb27
    cir.br ^bb29 loc(#loc127)
  ^bb29:  // pred: ^bb28
    cir.br ^bb30(%88 : !cir.bool) loc(#loc127)
  ^bb30(%89: !cir.bool loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":95:48)):  // 2 preds: ^bb24, ^bb29
    cir.br ^bb31 loc(#loc127)
  ^bb31:  // pred: ^bb30
    cir.brcond %89 ^bb32, ^bb33 loc(#loc559)
  ^bb32:  // pred: ^bb31
    cir.br ^bb35 loc(#loc131)
  ^bb33:  // pred: ^bb31
    cir.br ^bb34 loc(#loc124)
  ^bb34:  // pred: ^bb33
    %90 = cir.const #cir.int<0> : !s32i loc(#loc132)
    %91 = cir.cast(integral, %90 : !s32i), !s8i loc(#loc132)
    %92 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    %93 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc134)
    %94 = cir.ptr_stride(%93 : !cir.ptr<!s8i>, %92 : !s32i), !cir.ptr<!s8i> loc(#loc134)
    cir.store %91, %94 : !s8i, !cir.ptr<!s8i> loc(#loc560)
    %95 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc135)
    %96 = cir.call @atoi(%95) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc136)
    cir.store %96, %5 : !s32i, !cir.ptr<!s32i> loc(#loc561)
    cir.br ^bb5 loc(#loc51)
  ^bb35:  // 6 preds: ^bb5, ^bb8, ^bb12, ^bb16, ^bb20, ^bb32
    cir.br ^bb36 loc(#loc51)
  ^bb36:  // pred: ^bb35
    cir.br ^bb37 loc(#loc562)
  ^bb37:  // pred: ^bb36
    %97 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc141)
    %98 = cir.const #cir.int<1> : !s32i loc(#loc142)
    %99 = cir.unary(minus, %98) : !s32i, !s32i loc(#loc142)
    %100 = cir.cmp(ne, %97, %99) : !s32i, !cir.bool loc(#loc563)
    cir.brcond %100 ^bb38, ^bb39 loc(#loc564)
  ^bb38:  // pred: ^bb37
    %101 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    %102 = cir.call @close(%101) : (!s32i) -> !s32i loc(#loc145)
    cir.br ^bb39 loc(#loc140)
  ^bb39:  // 2 preds: ^bb37, ^bb38
    cir.br ^bb40 loc(#loc140)
  ^bb40:  // pred: ^bb39
    cir.br ^bb41 loc(#loc565)
  ^bb41:  // pred: ^bb40
    %103 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc148)
    %104 = cir.const #cir.int<1> : !s32i loc(#loc149)
    %105 = cir.unary(minus, %104) : !s32i, !s32i loc(#loc149)
    %106 = cir.cmp(ne, %103, %105) : !s32i, !cir.bool loc(#loc566)
    cir.brcond %106 ^bb42, ^bb43 loc(#loc567)
  ^bb42:  // pred: ^bb41
    %107 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    %108 = cir.call @close(%107) : (!s32i) -> !s32i loc(#loc152)
    cir.br ^bb43 loc(#loc147)
  ^bb43:  // 2 preds: ^bb41, ^bb42
    cir.br ^bb44 loc(#loc147)
  ^bb44:  // pred: ^bb43
    cir.br ^bb45 loc(#loc49)
  ^bb45:  // pred: ^bb44
    cir.br ^bb47 loc(#loc46)
  ^bb46:  // pred: ^bb1
    %109 = cir.const #cir.int<7> : !s32i loc(#loc153)
    cir.store %109, %5 : !s32i, !cir.ptr<!s32i> loc(#loc568)
    cir.br ^bb47 loc(#loc42)
  ^bb47:  // 2 preds: ^bb45, ^bb46
    cir.br ^bb48 loc(#loc42)
  ^bb48:  // pred: ^bb47
    cir.br ^bb49 loc(#loc569)
  ^bb49:  // pred: ^bb48
    %110 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc570)
    %111 = cir.cast(bitcast, %110 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc570)
    %112 = cir.call %111() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc157)
    %113 = cir.cast(int_to_bool, %112 : !s32i), !cir.bool loc(#loc157)
    cir.brcond %113 ^bb50, ^bb51 loc(#loc571)
  ^bb50:  // pred: ^bb49
    %114 = cir.const #cir.int<100> : !s32i loc(#loc162)
    %115 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc163)
    %116 = cir.binop(div, %114, %115) : !s32i loc(#loc572)
    cir.call @printIntLine(%116) : (!s32i) -> () loc(#loc164)
    cir.br ^bb57 loc(#loc160)
  ^bb51:  // pred: ^bb49
    cir.br ^bb52 loc(#loc573)
  ^bb52:  // pred: ^bb51
    %117 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc167)
    %118 = cir.const #cir.int<0> : !s32i loc(#loc168)
    %119 = cir.cmp(ne, %117, %118) : !s32i, !cir.bool loc(#loc574)
    cir.brcond %119 ^bb53, ^bb54 loc(#loc575)
  ^bb53:  // pred: ^bb52
    %120 = cir.const #cir.int<100> : !s32i loc(#loc172)
    %121 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc173)
    %122 = cir.binop(div, %120, %121) : !s32i loc(#loc576)
    cir.call @printIntLine(%122) : (!s32i) -> () loc(#loc174)
    cir.br ^bb55 loc(#loc170)
  ^bb54:  // pred: ^bb52
    %123 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc23)
    %124 = cir.cast(array_to_ptrdecay, %123 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc23)
    cir.call @printLine(%124) : (!cir.ptr<!s8i>) -> () loc(#loc175)
    cir.br ^bb55 loc(#loc166)
  ^bb55:  // 2 preds: ^bb53, ^bb54
    cir.br ^bb56 loc(#loc166)
  ^bb56:  // pred: ^bb55
    cir.br ^bb57 loc(#loc156)
  ^bb57:  // 2 preds: ^bb50, ^bb56
    cir.br ^bb58 loc(#loc156)
  ^bb58:  // pred: ^bb57
    cir.return loc(#loc25)
  } loc(#loc519)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc578)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc178)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc579)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc180)
    cir.return loc(#loc177)
  } loc(#loc577)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc580)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc581)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc186)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc188)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc189)
  cir.func @main(%arg0: !s32i loc(fused[#loc192, #loc193]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc194, #loc195])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc583)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc584)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc191)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc196)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc197)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc198)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc198)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc199)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc186)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc186)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc200)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_divide_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc585)
    cir.call @CWE369_Divide_by_Zero__int_listen_socket_divide_12_good() : () -> () loc(#loc201)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc187)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc187)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc203)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc188)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc188)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc204)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_divide_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc586)
    cir.call @CWE369_Divide_by_Zero__int_listen_socket_divide_12_bad() : () -> () loc(#loc205)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc189)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc189)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc207)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc208)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc587)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc587)
    cir.return %17 : !s32i loc(#loc587)
  } loc(#loc582)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc589)
    %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc590)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc591)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc592)
    %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc593)
    %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc594)
    %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc595)
    %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc596)
    %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc597)
    %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc598)
    %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc599)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc234)
    %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc235)
    cir.store %12, %10 : !s32i, !cir.ptr<!s32i> loc(#loc600)
    cir.br ^bb1 loc(#loc601)
  ^bb1:  // pred: ^bb0
    %13 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc602)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc602)
    %15 = cir.call %14() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc239)
    %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc239)
    cir.brcond %16 ^bb2, ^bb46 loc(#loc603)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc604)
  ^bb3:  // pred: ^bb2
    %17 = cir.const #cir.int<1> : !s32i loc(#loc217)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc217)
    cir.store %18, %2 : !s32i, !cir.ptr<!s32i> loc(#loc591)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc219)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc219)
    cir.store %20, %3 : !s32i, !cir.ptr<!s32i> loc(#loc592)
    cir.br ^bb4 loc(#loc605)
  ^bb4:  // pred: ^bb3
    cir.br ^bb6 loc(#loc605)
  ^bb5:  // pred: ^bb34
    %21 = cir.const #cir.int<0> : !s32i loc(#loc248)
    %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc248)
    cir.brcond %22 ^bb6, ^bb35 loc(#loc248)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    %23 = cir.const #cir.int<2> : !s32i loc(#loc249)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc250)
    %25 = cir.const #cir.int<6> : !s32i loc(#loc251)
    %26 = cir.call @socket(%23, %24, %25) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc252)
    cir.store %26, %2 : !s32i, !cir.ptr<!s32i> loc(#loc606)
    cir.br ^bb7 loc(#loc607)
  ^bb7:  // pred: ^bb6
    %27 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc257)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc258)
    %29 = cir.unary(minus, %28) : !s32i, !s32i loc(#loc258)
    %30 = cir.cmp(eq, %27, %29) : !s32i, !cir.bool loc(#loc608)
    cir.brcond %30 ^bb8, ^bb9 loc(#loc609)
  ^bb8:  // pred: ^bb7
    cir.br ^bb35 loc(#loc260)
  ^bb9:  // pred: ^bb7
    cir.br ^bb10 loc(#loc256)
  ^bb10:  // pred: ^bb9
    %31 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc610)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc263)
    %33 = cir.const #cir.int<16> : !u64i loc(#loc611)
    cir.libc.memset %33 bytes from %31 set to %32 : !cir.ptr<!void>, !s32i, !u64i loc(#loc612)
    %34 = cir.const #cir.int<2> : !s32i loc(#loc268)
    %35 = cir.cast(integral, %34 : !s32i), !u16i loc(#loc268)
    %36 = cir.get_member %1[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
    cir.store %35, %36 : !u16i, !cir.ptr<!u16i> loc(#loc613)
    %37 = cir.const #cir.int<0> : !s32i loc(#loc270)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc270)
    %39 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
    %40 = cir.get_member %39[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc77)
    cir.store %38, %40 : !u32i, !cir.ptr<!u32i> loc(#loc614)
    %41 = cir.const #cir.int<27015> : !s32i loc(#loc272)
    %42 = cir.cast(integral, %41 : !s32i), !u16i loc(#loc272)
    %43 = cir.call @htons(%42) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc273)
    %44 = cir.get_member %1[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc81)
    cir.store %43, %44 : !u16i, !cir.ptr<!u16i> loc(#loc615)
    cir.br ^bb11 loc(#loc616)
  ^bb11:  // pred: ^bb10
    %45 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc278)
    %46 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc617)
    %47 = cir.const #cir.int<16> : !u64i loc(#loc618)
    %48 = cir.cast(integral, %47 : !u64i), !u32i loc(#loc618)
    %49 = cir.call @bind(%45, %46, %48) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc283)
    %50 = cir.const #cir.int<1> : !s32i loc(#loc284)
    %51 = cir.unary(minus, %50) : !s32i, !s32i loc(#loc284)
    %52 = cir.cmp(eq, %49, %51) : !s32i, !cir.bool loc(#loc619)
    cir.brcond %52 ^bb12, ^bb13 loc(#loc620)
  ^bb12:  // pred: ^bb11
    cir.br ^bb35 loc(#loc286)
  ^bb13:  // pred: ^bb11
    cir.br ^bb14 loc(#loc277)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc621)
  ^bb15:  // pred: ^bb14
    %53 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc289)
    %54 = cir.const #cir.int<5> : !s32i loc(#loc290)
    %55 = cir.call @listen(%53, %54) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc291)
    %56 = cir.const #cir.int<1> : !s32i loc(#loc292)
    %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc292)
    %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc622)
    cir.brcond %58 ^bb16, ^bb17 loc(#loc623)
  ^bb16:  // pred: ^bb15
    cir.br ^bb35 loc(#loc294)
  ^bb17:  // pred: ^bb15
    cir.br ^bb18 loc(#loc288)
  ^bb18:  // pred: ^bb17
    %59 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc295)
    %60 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc296)
    %61 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc297)
    %62 = cir.call @accept(%59, %60, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc298)
    cir.store %62, %3 : !s32i, !cir.ptr<!s32i> loc(#loc624)
    cir.br ^bb19 loc(#loc625)
  ^bb19:  // pred: ^bb18
    %63 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc303)
    %64 = cir.const #cir.int<1> : !s32i loc(#loc304)
    %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc304)
    %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc626)
    cir.brcond %66 ^bb20, ^bb21 loc(#loc627)
  ^bb20:  // pred: ^bb19
    cir.br ^bb35 loc(#loc306)
  ^bb21:  // pred: ^bb19
    cir.br ^bb22 loc(#loc302)
  ^bb22:  // pred: ^bb21
    %67 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc307)
    %68 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc308)
    %69 = cir.cast(bitcast, %68 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc308)
    %70 = cir.const #cir.int<3> : !s32i loc(#loc309)
    %71 = cir.cast(integral, %70 : !s32i), !u64i loc(#loc309)
    %72 = cir.const #cir.int<4> : !u64i loc(#loc309)
    %73 = cir.binop(mul, %71, %72) : !u64i loc(#loc309)
    %74 = cir.const #cir.int<2> : !s32i loc(#loc309)
    %75 = cir.cast(integral, %74 : !s32i), !u64i loc(#loc309)
    %76 = cir.binop(add, %73, %75) : !u64i loc(#loc309)
    %77 = cir.const #cir.int<1> : !s32i loc(#loc310)
    %78 = cir.cast(integral, %77 : !s32i), !u64i loc(#loc310)
    %79 = cir.binop(sub, %76, %78) : !u64i loc(#loc628)
    %80 = cir.const #cir.int<0> : !s32i loc(#loc311)
    %81 = cir.call @recv(%67, %69, %79, %80) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc312)
    %82 = cir.cast(integral, %81 : !s64i), !s32i loc(#loc312)
    cir.store %82, %0 : !s32i, !cir.ptr<!s32i> loc(#loc629)
    cir.br ^bb23 loc(#loc630)
  ^bb23:  // pred: ^bb22
    %83 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc317)
    %84 = cir.const #cir.int<1> : !s32i loc(#loc318)
    %85 = cir.unary(minus, %84) : !s32i, !s32i loc(#loc318)
    %86 = cir.cmp(eq, %83, %85) : !s32i, !cir.bool loc(#loc631)
    cir.brcond %86 ^bb24, ^bb25 loc(#loc319)
  ^bb24:  // pred: ^bb23
    %87 = cir.const #true loc(#loc319)
    cir.br ^bb30(%87 : !cir.bool) loc(#loc319)
  ^bb25:  // pred: ^bb23
    %88 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc320)
    %89 = cir.const #cir.int<0> : !s32i loc(#loc321)
    %90 = cir.cmp(eq, %88, %89) : !s32i, !cir.bool loc(#loc632)
    cir.brcond %90 ^bb26, ^bb27 loc(#loc319)
  ^bb26:  // pred: ^bb25
    %91 = cir.const #true loc(#loc319)
    cir.br ^bb28(%91 : !cir.bool) loc(#loc319)
  ^bb27:  // pred: ^bb25
    %92 = cir.const #false loc(#loc319)
    cir.br ^bb28(%92 : !cir.bool) loc(#loc319)
  ^bb28(%93: !cir.bool loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":203:48)):  // 2 preds: ^bb26, ^bb27
    cir.br ^bb29 loc(#loc319)
  ^bb29:  // pred: ^bb28
    cir.br ^bb30(%93 : !cir.bool) loc(#loc319)
  ^bb30(%94: !cir.bool loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":203:48)):  // 2 preds: ^bb24, ^bb29
    cir.br ^bb31 loc(#loc319)
  ^bb31:  // pred: ^bb30
    cir.brcond %94 ^bb32, ^bb33 loc(#loc633)
  ^bb32:  // pred: ^bb31
    cir.br ^bb35 loc(#loc323)
  ^bb33:  // pred: ^bb31
    cir.br ^bb34 loc(#loc316)
  ^bb34:  // pred: ^bb33
    %95 = cir.const #cir.int<0> : !s32i loc(#loc324)
    %96 = cir.cast(integral, %95 : !s32i), !s8i loc(#loc324)
    %97 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc325)
    %98 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc326)
    %99 = cir.ptr_stride(%98 : !cir.ptr<!s8i>, %97 : !s32i), !cir.ptr<!s8i> loc(#loc326)
    cir.store %96, %99 : !s8i, !cir.ptr<!s8i> loc(#loc634)
    %100 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc327)
    %101 = cir.call @atoi(%100) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc328)
    cir.store %101, %10 : !s32i, !cir.ptr<!s32i> loc(#loc635)
    cir.br ^bb5 loc(#loc247)
  ^bb35:  // 6 preds: ^bb5, ^bb8, ^bb12, ^bb16, ^bb20, ^bb32
    cir.br ^bb36 loc(#loc247)
  ^bb36:  // pred: ^bb35
    cir.br ^bb37 loc(#loc636)
  ^bb37:  // pred: ^bb36
    %102 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc333)
    %103 = cir.const #cir.int<1> : !s32i loc(#loc334)
    %104 = cir.unary(minus, %103) : !s32i, !s32i loc(#loc334)
    %105 = cir.cmp(ne, %102, %104) : !s32i, !cir.bool loc(#loc637)
    cir.brcond %105 ^bb38, ^bb39 loc(#loc638)
  ^bb38:  // pred: ^bb37
    %106 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc336)
    %107 = cir.call @close(%106) : (!s32i) -> !s32i loc(#loc337)
    cir.br ^bb39 loc(#loc332)
  ^bb39:  // 2 preds: ^bb37, ^bb38
    cir.br ^bb40 loc(#loc332)
  ^bb40:  // pred: ^bb39
    cir.br ^bb41 loc(#loc639)
  ^bb41:  // pred: ^bb40
    %108 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc340)
    %109 = cir.const #cir.int<1> : !s32i loc(#loc341)
    %110 = cir.unary(minus, %109) : !s32i, !s32i loc(#loc341)
    %111 = cir.cmp(ne, %108, %110) : !s32i, !cir.bool loc(#loc640)
    cir.brcond %111 ^bb42, ^bb43 loc(#loc641)
  ^bb42:  // pred: ^bb41
    %112 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc343)
    %113 = cir.call @close(%112) : (!s32i) -> !s32i loc(#loc344)
    cir.br ^bb43 loc(#loc339)
  ^bb43:  // 2 preds: ^bb41, ^bb42
    cir.br ^bb44 loc(#loc339)
  ^bb44:  // pred: ^bb43
    cir.br ^bb45 loc(#loc245)
  ^bb45:  // pred: ^bb44
    cir.br ^bb90 loc(#loc242)
  ^bb46:  // pred: ^bb1
    cir.br ^bb47 loc(#loc642)
  ^bb47:  // pred: ^bb46
    %114 = cir.const #cir.int<1> : !s32i loc(#loc227)
    %115 = cir.unary(minus, %114) : !s32i, !s32i loc(#loc227)
    cir.store %115, %7 : !s32i, !cir.ptr<!s32i> loc(#loc596)
    %116 = cir.const #cir.int<1> : !s32i loc(#loc229)
    %117 = cir.unary(minus, %116) : !s32i, !s32i loc(#loc229)
    cir.store %117, %8 : !s32i, !cir.ptr<!s32i> loc(#loc597)
    cir.br ^bb48 loc(#loc643)
  ^bb48:  // pred: ^bb47
    cir.br ^bb50 loc(#loc643)
  ^bb49:  // pred: ^bb78
    %118 = cir.const #cir.int<0> : !s32i loc(#loc349)
    %119 = cir.cast(int_to_bool, %118 : !s32i), !cir.bool loc(#loc349)
    cir.brcond %119 ^bb50, ^bb79 loc(#loc349)
  ^bb50:  // 2 preds: ^bb48, ^bb49
    %120 = cir.const #cir.int<2> : !s32i loc(#loc350)
    %121 = cir.const #cir.int<1> : !s32i loc(#loc351)
    %122 = cir.const #cir.int<6> : !s32i loc(#loc352)
    %123 = cir.call @socket(%120, %121, %122) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc353)
    cir.store %123, %7 : !s32i, !cir.ptr<!s32i> loc(#loc644)
    cir.br ^bb51 loc(#loc645)
  ^bb51:  // pred: ^bb50
    %124 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc358)
    %125 = cir.const #cir.int<1> : !s32i loc(#loc359)
    %126 = cir.unary(minus, %125) : !s32i, !s32i loc(#loc359)
    %127 = cir.cmp(eq, %124, %126) : !s32i, !cir.bool loc(#loc646)
    cir.brcond %127 ^bb52, ^bb53 loc(#loc647)
  ^bb52:  // pred: ^bb51
    cir.br ^bb79 loc(#loc361)
  ^bb53:  // pred: ^bb51
    cir.br ^bb54 loc(#loc357)
  ^bb54:  // pred: ^bb53
    %128 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc648)
    %129 = cir.const #cir.int<0> : !s32i loc(#loc364)
    %130 = cir.const #cir.int<16> : !u64i loc(#loc649)
    cir.libc.memset %130 bytes from %128 set to %129 : !cir.ptr<!void>, !s32i, !u64i loc(#loc650)
    %131 = cir.const #cir.int<2> : !s32i loc(#loc369)
    %132 = cir.cast(integral, %131 : !s32i), !u16i loc(#loc369)
    %133 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
    cir.store %132, %133 : !u16i, !cir.ptr<!u16i> loc(#loc651)
    %134 = cir.const #cir.int<0> : !s32i loc(#loc371)
    %135 = cir.cast(integral, %134 : !s32i), !u32i loc(#loc371)
    %136 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
    %137 = cir.get_member %136[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc77)
    cir.store %135, %137 : !u32i, !cir.ptr<!u32i> loc(#loc652)
    %138 = cir.const #cir.int<27015> : !s32i loc(#loc373)
    %139 = cir.cast(integral, %138 : !s32i), !u16i loc(#loc373)
    %140 = cir.call @htons(%139) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc374)
    %141 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc81)
    cir.store %140, %141 : !u16i, !cir.ptr<!u16i> loc(#loc653)
    cir.br ^bb55 loc(#loc654)
  ^bb55:  // pred: ^bb54
    %142 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc379)
    %143 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc655)
    %144 = cir.const #cir.int<16> : !u64i loc(#loc656)
    %145 = cir.cast(integral, %144 : !u64i), !u32i loc(#loc656)
    %146 = cir.call @bind(%142, %143, %145) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc384)
    %147 = cir.const #cir.int<1> : !s32i loc(#loc385)
    %148 = cir.unary(minus, %147) : !s32i, !s32i loc(#loc385)
    %149 = cir.cmp(eq, %146, %148) : !s32i, !cir.bool loc(#loc657)
    cir.brcond %149 ^bb56, ^bb57 loc(#loc658)
  ^bb56:  // pred: ^bb55
    cir.br ^bb79 loc(#loc387)
  ^bb57:  // pred: ^bb55
    cir.br ^bb58 loc(#loc378)
  ^bb58:  // pred: ^bb57
    cir.br ^bb59 loc(#loc659)
  ^bb59:  // pred: ^bb58
    %150 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc390)
    %151 = cir.const #cir.int<5> : !s32i loc(#loc391)
    %152 = cir.call @listen(%150, %151) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc392)
    %153 = cir.const #cir.int<1> : !s32i loc(#loc393)
    %154 = cir.unary(minus, %153) : !s32i, !s32i loc(#loc393)
    %155 = cir.cmp(eq, %152, %154) : !s32i, !cir.bool loc(#loc660)
    cir.brcond %155 ^bb60, ^bb61 loc(#loc661)
  ^bb60:  // pred: ^bb59
    cir.br ^bb79 loc(#loc395)
  ^bb61:  // pred: ^bb59
    cir.br ^bb62 loc(#loc389)
  ^bb62:  // pred: ^bb61
    %156 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc396)
    %157 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc397)
    %158 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc398)
    %159 = cir.call @accept(%156, %157, %158) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc399)
    cir.store %159, %8 : !s32i, !cir.ptr<!s32i> loc(#loc662)
    cir.br ^bb63 loc(#loc663)
  ^bb63:  // pred: ^bb62
    %160 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc404)
    %161 = cir.const #cir.int<1> : !s32i loc(#loc405)
    %162 = cir.unary(minus, %161) : !s32i, !s32i loc(#loc405)
    %163 = cir.cmp(eq, %160, %162) : !s32i, !cir.bool loc(#loc664)
    cir.brcond %163 ^bb64, ^bb65 loc(#loc665)
  ^bb64:  // pred: ^bb63
    cir.br ^bb79 loc(#loc407)
  ^bb65:  // pred: ^bb63
    cir.br ^bb66 loc(#loc403)
  ^bb66:  // pred: ^bb65
    %164 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc408)
    %165 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc409)
    %166 = cir.cast(bitcast, %165 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc409)
    %167 = cir.const #cir.int<3> : !s32i loc(#loc410)
    %168 = cir.cast(integral, %167 : !s32i), !u64i loc(#loc410)
    %169 = cir.const #cir.int<4> : !u64i loc(#loc410)
    %170 = cir.binop(mul, %168, %169) : !u64i loc(#loc410)
    %171 = cir.const #cir.int<2> : !s32i loc(#loc410)
    %172 = cir.cast(integral, %171 : !s32i), !u64i loc(#loc410)
    %173 = cir.binop(add, %170, %172) : !u64i loc(#loc410)
    %174 = cir.const #cir.int<1> : !s32i loc(#loc411)
    %175 = cir.cast(integral, %174 : !s32i), !u64i loc(#loc411)
    %176 = cir.binop(sub, %173, %175) : !u64i loc(#loc666)
    %177 = cir.const #cir.int<0> : !s32i loc(#loc412)
    %178 = cir.call @recv(%164, %166, %176, %177) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc413)
    %179 = cir.cast(integral, %178 : !s64i), !s32i loc(#loc413)
    cir.store %179, %5 : !s32i, !cir.ptr<!s32i> loc(#loc667)
    cir.br ^bb67 loc(#loc668)
  ^bb67:  // pred: ^bb66
    %180 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc418)
    %181 = cir.const #cir.int<1> : !s32i loc(#loc419)
    %182 = cir.unary(minus, %181) : !s32i, !s32i loc(#loc419)
    %183 = cir.cmp(eq, %180, %182) : !s32i, !cir.bool loc(#loc669)
    cir.brcond %183 ^bb68, ^bb69 loc(#loc420)
  ^bb68:  // pred: ^bb67
    %184 = cir.const #true loc(#loc420)
    cir.br ^bb74(%184 : !cir.bool) loc(#loc420)
  ^bb69:  // pred: ^bb67
    %185 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc421)
    %186 = cir.const #cir.int<0> : !s32i loc(#loc422)
    %187 = cir.cmp(eq, %185, %186) : !s32i, !cir.bool loc(#loc670)
    cir.brcond %187 ^bb70, ^bb71 loc(#loc420)
  ^bb70:  // pred: ^bb69
    %188 = cir.const #true loc(#loc420)
    cir.br ^bb72(%188 : !cir.bool) loc(#loc420)
  ^bb71:  // pred: ^bb69
    %189 = cir.const #false loc(#loc420)
    cir.br ^bb72(%189 : !cir.bool) loc(#loc420)
  ^bb72(%190: !cir.bool loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":275:48)):  // 2 preds: ^bb70, ^bb71
    cir.br ^bb73 loc(#loc420)
  ^bb73:  // pred: ^bb72
    cir.br ^bb74(%190 : !cir.bool) loc(#loc420)
  ^bb74(%191: !cir.bool loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":275:48)):  // 2 preds: ^bb68, ^bb73
    cir.br ^bb75 loc(#loc420)
  ^bb75:  // pred: ^bb74
    cir.brcond %191 ^bb76, ^bb77 loc(#loc671)
  ^bb76:  // pred: ^bb75
    cir.br ^bb79 loc(#loc424)
  ^bb77:  // pred: ^bb75
    cir.br ^bb78 loc(#loc417)
  ^bb78:  // pred: ^bb77
    %192 = cir.const #cir.int<0> : !s32i loc(#loc425)
    %193 = cir.cast(integral, %192 : !s32i), !s8i loc(#loc425)
    %194 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc426)
    %195 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc427)
    %196 = cir.ptr_stride(%195 : !cir.ptr<!s8i>, %194 : !s32i), !cir.ptr<!s8i> loc(#loc427)
    cir.store %193, %196 : !s8i, !cir.ptr<!s8i> loc(#loc672)
    %197 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc428)
    %198 = cir.call @atoi(%197) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc429)
    cir.store %198, %10 : !s32i, !cir.ptr<!s32i> loc(#loc673)
    cir.br ^bb49 loc(#loc348)
  ^bb79:  // 6 preds: ^bb49, ^bb52, ^bb56, ^bb60, ^bb64, ^bb76
    cir.br ^bb80 loc(#loc348)
  ^bb80:  // pred: ^bb79
    cir.br ^bb81 loc(#loc674)
  ^bb81:  // pred: ^bb80
    %199 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc434)
    %200 = cir.const #cir.int<1> : !s32i loc(#loc435)
    %201 = cir.unary(minus, %200) : !s32i, !s32i loc(#loc435)
    %202 = cir.cmp(ne, %199, %201) : !s32i, !cir.bool loc(#loc675)
    cir.brcond %202 ^bb82, ^bb83 loc(#loc676)
  ^bb82:  // pred: ^bb81
    %203 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc437)
    %204 = cir.call @close(%203) : (!s32i) -> !s32i loc(#loc438)
    cir.br ^bb83 loc(#loc433)
  ^bb83:  // 2 preds: ^bb81, ^bb82
    cir.br ^bb84 loc(#loc433)
  ^bb84:  // pred: ^bb83
    cir.br ^bb85 loc(#loc677)
  ^bb85:  // pred: ^bb84
    %205 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc441)
    %206 = cir.const #cir.int<1> : !s32i loc(#loc442)
    %207 = cir.unary(minus, %206) : !s32i, !s32i loc(#loc442)
    %208 = cir.cmp(ne, %205, %207) : !s32i, !cir.bool loc(#loc678)
    cir.brcond %208 ^bb86, ^bb87 loc(#loc679)
  ^bb86:  // pred: ^bb85
    %209 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc444)
    %210 = cir.call @close(%209) : (!s32i) -> !s32i loc(#loc445)
    cir.br ^bb87 loc(#loc440)
  ^bb87:  // 2 preds: ^bb85, ^bb86
    cir.br ^bb88 loc(#loc440)
  ^bb88:  // pred: ^bb87
    cir.br ^bb89 loc(#loc346)
  ^bb89:  // pred: ^bb88
    cir.br ^bb90 loc(#loc238)
  ^bb90:  // 2 preds: ^bb45, ^bb89
    cir.br ^bb91 loc(#loc238)
  ^bb91:  // pred: ^bb90
    cir.br ^bb92 loc(#loc680)
  ^bb92:  // pred: ^bb91
    %211 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc681)
    %212 = cir.cast(bitcast, %211 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc681)
    %213 = cir.call %212() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc448)
    %214 = cir.cast(int_to_bool, %213 : !s32i), !cir.bool loc(#loc448)
    cir.brcond %214 ^bb93, ^bb99 loc(#loc682)
  ^bb93:  // pred: ^bb92
    cir.br ^bb94 loc(#loc683)
  ^bb94:  // pred: ^bb93
    %215 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc455)
    %216 = cir.const #cir.int<0> : !s32i loc(#loc456)
    %217 = cir.cmp(ne, %215, %216) : !s32i, !cir.bool loc(#loc684)
    cir.brcond %217 ^bb95, ^bb96 loc(#loc685)
  ^bb95:  // pred: ^bb94
    %218 = cir.const #cir.int<100> : !s32i loc(#loc460)
    %219 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc461)
    %220 = cir.binop(div, %218, %219) : !s32i loc(#loc686)
    cir.call @printIntLine(%220) : (!s32i) -> () loc(#loc462)
    cir.br ^bb97 loc(#loc458)
  ^bb96:  // pred: ^bb94
    %221 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc463)
    %222 = cir.cast(array_to_ptrdecay, %221 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc463)
    cir.call @printLine(%222) : (!cir.ptr<!s8i>) -> () loc(#loc464)
    cir.br ^bb97 loc(#loc454)
  ^bb97:  // 2 preds: ^bb95, ^bb96
    cir.br ^bb98 loc(#loc454)
  ^bb98:  // pred: ^bb97
    cir.br ^bb105 loc(#loc451)
  ^bb99:  // pred: ^bb92
    cir.br ^bb100 loc(#loc687)
  ^bb100:  // pred: ^bb99
    %223 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc467)
    %224 = cir.const #cir.int<0> : !s32i loc(#loc468)
    %225 = cir.cmp(ne, %223, %224) : !s32i, !cir.bool loc(#loc688)
    cir.brcond %225 ^bb101, ^bb102 loc(#loc689)
  ^bb101:  // pred: ^bb100
    %226 = cir.const #cir.int<100> : !s32i loc(#loc472)
    %227 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc473)
    %228 = cir.binop(div, %226, %227) : !s32i loc(#loc690)
    cir.call @printIntLine(%228) : (!s32i) -> () loc(#loc474)
    cir.br ^bb103 loc(#loc470)
  ^bb102:  // pred: ^bb100
    %229 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc475)
    %230 = cir.cast(array_to_ptrdecay, %229 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc475)
    cir.call @printLine(%230) : (!cir.ptr<!s8i>) -> () loc(#loc476)
    cir.br ^bb103 loc(#loc466)
  ^bb103:  // 2 preds: ^bb101, ^bb102
    cir.br ^bb104 loc(#loc466)
  ^bb104:  // pred: ^bb103
    cir.br ^bb105 loc(#loc447)
  ^bb105:  // 2 preds: ^bb98, ^bb104
    cir.br ^bb106 loc(#loc447)
  ^bb106:  // pred: ^bb105
    cir.return loc(#loc211)
  } loc(#loc588)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc692)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc481)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc482)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc693)
    cir.br ^bb1 loc(#loc694)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc695)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc695)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc486)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc486)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc696)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<7> : !s32i loc(#loc491)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc697)
    cir.br ^bb4 loc(#loc489)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<7> : !s32i loc(#loc493)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc698)
    cir.br ^bb4 loc(#loc485)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc485)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc699)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc700)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc700)
    %11 = cir.call %10() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc497)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc497)
    cir.brcond %12 ^bb7, ^bb8 loc(#loc701)
  ^bb7:  // pred: ^bb6
    %13 = cir.const #cir.int<100> : !s32i loc(#loc502)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc503)
    %15 = cir.binop(div, %13, %14) : !s32i loc(#loc702)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc504)
    cir.br ^bb9 loc(#loc500)
  ^bb8:  // pred: ^bb6
    %16 = cir.const #cir.int<100> : !s32i loc(#loc505)
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc506)
    %18 = cir.binop(div, %16, %17) : !s32i loc(#loc703)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc507)
    cir.br ^bb9 loc(#loc496)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc496)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc478)
  } loc(#loc691)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":404:1)
#loc6 = loc("/usr/include/netinet/in.h":405:40)
#loc7 = loc("/usr/include/sys/socket.h":112:1)
#loc8 = loc("/usr/include/sys/socket.h":113:6)
#loc9 = loc("/usr/include/sys/socket.h":296:1)
#loc10 = loc("/usr/include/sys/socket.h":296:39)
#loc11 = loc("/usr/include/sys/socket.h":306:1)
#loc12 = loc("/usr/include/sys/socket.h":307:38)
#loc13 = loc("/usr/include/sys/socket.h":145:1)
#loc14 = loc("/usr/include/sys/socket.h":145:68)
#loc15 = loc("/usr/include/stdlib.h":105:1)
#loc16 = loc("/usr/include/stdlib.h":106:33)
#loc17 = loc("/usr/include/unistd.h":358:1)
#loc18 = loc("/usr/include/unistd.h":358:27)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc23 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":140:23)
#loc24 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":44:1)
#loc25 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":143:1)
#loc26 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":56:13)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":56:17)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":57:13)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":57:32)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":58:13)
#loc31 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":58:35)
#loc32 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":59:13)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":59:35)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":60:13)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":60:45)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":46:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":46:9)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":48:13)
#loc39 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":48:12)
#loc40 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":48:5)
#loc41 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":49:5)
#loc42 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":125:5)
#loc43 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":49:8)
#loc44 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":49:33)
#loc45 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":50:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":120:5)
#loc47 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":122:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":51:9)
#loc49 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":119:9)
#loc50 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":61:13)
#loc51 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":104:21)
#loc52 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":104:20)
#loc53 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":71:39)
#loc54 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":71:48)
#loc55 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":71:61)
#loc56 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":71:32)
#loc57 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":71:17)
#loc58 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":71:72)
#loc59 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":72:17)
#loc60 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":75:17)
#loc61 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":72:21)
#loc62 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":72:37)
#loc63 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":73:17)
#loc64 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":74:21)
#loc65 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":76:24)
#loc66 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":76:25)
#loc67 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":76:34)
#loc68 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":76:37)
#loc69 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":76:51)
#loc70 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":76:17)
#loc71 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":76:52)
#loc72 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":77:38)
#loc73 = loc("/usr/include/netinet/in.h":249:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":77:17)
#loc75 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":78:43)
#loc76 = loc("/usr/include/netinet/in.h":251:20)
#loc77 = loc("/usr/include/netinet/in.h":33:15)
#loc78 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":78:17)
#loc79 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":79:42)
#loc80 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":79:36)
#loc81 = loc("/usr/include/netinet/in.h":250:15)
#loc82 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":79:17)
#loc83 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":79:50)
#loc84 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":80:17)
#loc85 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":83:17)
#loc86 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":80:26)
#loc87 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":80:58)
#loc88 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":80:59)
#loc89 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":80:68)
#loc90 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":80:82)
#loc91 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":80:21)
#loc92 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":80:88)
#loc93 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":81:17)
#loc94 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":82:21)
#loc95 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":84:17)
#loc96 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":87:17)
#loc97 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":84:28)
#loc98 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":84:42)
#loc99 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":84:21)
#loc100 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":84:61)
#loc101 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":85:17)
#loc102 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":86:21)
#loc103 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":88:39)
#loc104 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":88:53)
#loc105 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":88:59)
#loc106 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":88:32)
#loc107 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":88:17)
#loc108 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":88:63)
#loc109 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":89:17)
#loc110 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":92:17)
#loc111 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":89:21)
#loc112 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":89:37)
#loc113 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":90:17)
#loc114 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":91:21)
#loc115 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":94:35)
#loc116 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":94:49)
#loc117 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":94:62)
#loc118 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":94:80)
#loc119 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":94:83)
#loc120 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":94:30)
#loc121 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":94:17)
#loc122 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":94:84)
#loc123 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":95:17)
#loc124 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":98:17)
#loc125 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":95:21)
#loc126 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":95:35)
#loc128 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":95:51)
#loc129 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":95:65)
#loc130 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":96:17)
#loc131 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":97:21)
#loc132 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":100:43)
#loc133 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":100:29)
#loc134 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":100:17)
#loc135 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":102:29)
#loc136 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":102:24)
#loc137 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":102:17)
#loc138 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":102:40)
#loc139 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":105:13)
#loc140 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":108:13)
#loc141 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":105:17)
#loc142 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":105:33)
#loc143 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":106:13)
#loc144 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":107:30)
#loc145 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":107:17)
#loc146 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":109:13)
#loc147 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":112:13)
#loc148 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":109:17)
#loc149 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":109:33)
#loc150 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":110:13)
#loc151 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":111:30)
#loc152 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":111:17)
#loc153 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":124:16)
#loc154 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":124:9)
#loc155 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":126:5)
#loc156 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":142:5)
#loc157 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":126:8)
#loc158 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":126:33)
#loc159 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":127:5)
#loc160 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":130:5)
#loc161 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":132:5)
#loc162 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":129:22)
#loc163 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":129:28)
#loc164 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":129:9)
#loc165 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":134:9)
#loc166 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":141:9)
#loc167 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":134:13)
#loc168 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":134:21)
#loc169 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":135:9)
#loc170 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":137:9)
#loc171 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":139:9)
#loc172 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":136:26)
#loc173 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":136:32)
#loc174 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":136:13)
#loc175 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":140:13)
#loc176 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":357:1)
#loc177 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":361:1)
#loc178 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":359:5)
#loc179 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":359:13)
#loc180 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":360:5)
#loc181 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":360:13)
#loc182 = loc("/usr/include/stdlib.h":575:1)
#loc183 = loc("/usr/include/stdlib.h":575:41)
#loc184 = loc("/usr/include/time.h":76:1)
#loc185 = loc("/usr/include/time.h":76:38)
#loc186 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":377:15)
#loc187 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":379:15)
#loc188 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":382:15)
#loc189 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":384:15)
#loc190 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":372:1)
#loc191 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":387:1)
#loc196 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":373:1)
#loc197 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":375:27)
#loc198 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":375:22)
#loc199 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":375:5)
#loc200 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":377:5)
#loc201 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":378:5)
#loc202 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":378:61)
#loc203 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":379:5)
#loc204 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":382:5)
#loc205 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":383:5)
#loc206 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":383:60)
#loc207 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":384:5)
#loc208 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":386:12)
#loc209 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":386:5)
#loc210 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":152:1)
#loc211 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":325:1)
#loc212 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":164:13)
#loc213 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":164:17)
#loc214 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":165:13)
#loc215 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":165:32)
#loc216 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":166:13)
#loc217 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":166:35)
#loc218 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":167:13)
#loc219 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":167:35)
#loc220 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":168:13)
#loc221 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":168:45)
#loc222 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":236:13)
#loc223 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":236:17)
#loc224 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":237:13)
#loc225 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":237:32)
#loc226 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":238:13)
#loc227 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":238:35)
#loc228 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":239:13)
#loc229 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":239:35)
#loc230 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":240:13)
#loc231 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":240:45)
#loc232 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":154:5)
#loc233 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":154:9)
#loc234 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":156:13)
#loc235 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":156:12)
#loc236 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":156:5)
#loc237 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":157:5)
#loc238 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":300:5)
#loc239 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":157:8)
#loc240 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":157:33)
#loc241 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":158:5)
#loc242 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":228:5)
#loc243 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":230:5)
#loc244 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":159:9)
#loc245 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":227:9)
#loc246 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":169:13)
#loc247 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":212:21)
#loc248 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":212:20)
#loc249 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":179:39)
#loc250 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":179:48)
#loc251 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":179:61)
#loc252 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":179:32)
#loc253 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":179:17)
#loc254 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":179:72)
#loc255 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":180:17)
#loc256 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":183:17)
#loc257 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":180:21)
#loc258 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":180:37)
#loc259 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":181:17)
#loc260 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":182:21)
#loc261 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":184:24)
#loc262 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":184:25)
#loc263 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":184:34)
#loc264 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":184:37)
#loc265 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":184:51)
#loc266 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":184:17)
#loc267 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":184:52)
#loc268 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":185:38)
#loc269 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":185:17)
#loc270 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":186:43)
#loc271 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":186:17)
#loc272 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":187:42)
#loc273 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":187:36)
#loc274 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":187:17)
#loc275 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":187:50)
#loc276 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":188:17)
#loc277 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":191:17)
#loc278 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":188:26)
#loc279 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":188:58)
#loc280 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":188:59)
#loc281 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":188:68)
#loc282 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":188:82)
#loc283 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":188:21)
#loc284 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":188:88)
#loc285 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":189:17)
#loc286 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":190:21)
#loc287 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":192:17)
#loc288 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":195:17)
#loc289 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":192:28)
#loc290 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":192:42)
#loc291 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":192:21)
#loc292 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":192:61)
#loc293 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":193:17)
#loc294 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":194:21)
#loc295 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":196:39)
#loc296 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":196:53)
#loc297 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":196:59)
#loc298 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":196:32)
#loc299 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":196:17)
#loc300 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":196:63)
#loc301 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":197:17)
#loc302 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":200:17)
#loc303 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":197:21)
#loc304 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":197:37)
#loc305 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":198:17)
#loc306 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":199:21)
#loc307 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":202:35)
#loc308 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":202:49)
#loc309 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":202:62)
#loc310 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":202:80)
#loc311 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":202:83)
#loc312 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":202:30)
#loc313 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":202:17)
#loc314 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":202:84)
#loc315 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":203:17)
#loc316 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":206:17)
#loc317 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":203:21)
#loc318 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":203:35)
#loc320 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":203:51)
#loc321 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":203:65)
#loc322 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":204:17)
#loc323 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":205:21)
#loc324 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":208:43)
#loc325 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":208:29)
#loc326 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":208:17)
#loc327 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":210:29)
#loc328 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":210:24)
#loc329 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":210:17)
#loc330 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":210:40)
#loc331 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":213:13)
#loc332 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":216:13)
#loc333 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":213:17)
#loc334 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":213:33)
#loc335 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":214:13)
#loc336 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":215:30)
#loc337 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":215:17)
#loc338 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":217:13)
#loc339 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":220:13)
#loc340 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":217:17)
#loc341 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":217:33)
#loc342 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":218:13)
#loc343 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":219:30)
#loc344 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":219:17)
#loc345 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":231:9)
#loc346 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":299:9)
#loc347 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":241:13)
#loc348 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":284:21)
#loc349 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":284:20)
#loc350 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":251:39)
#loc351 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":251:48)
#loc352 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":251:61)
#loc353 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":251:32)
#loc354 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":251:17)
#loc355 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":251:72)
#loc356 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":252:17)
#loc357 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":255:17)
#loc358 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":252:21)
#loc359 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":252:37)
#loc360 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":253:17)
#loc361 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":254:21)
#loc362 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":256:24)
#loc363 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":256:25)
#loc364 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":256:34)
#loc365 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":256:37)
#loc366 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":256:51)
#loc367 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":256:17)
#loc368 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":256:52)
#loc369 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":257:38)
#loc370 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":257:17)
#loc371 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":258:43)
#loc372 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":258:17)
#loc373 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":259:42)
#loc374 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":259:36)
#loc375 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":259:17)
#loc376 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":259:50)
#loc377 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":260:17)
#loc378 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":263:17)
#loc379 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":260:26)
#loc380 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":260:58)
#loc381 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":260:59)
#loc382 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":260:68)
#loc383 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":260:82)
#loc384 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":260:21)
#loc385 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":260:88)
#loc386 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":261:17)
#loc387 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":262:21)
#loc388 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":264:17)
#loc389 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":267:17)
#loc390 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":264:28)
#loc391 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":264:42)
#loc392 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":264:21)
#loc393 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":264:61)
#loc394 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":265:17)
#loc395 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":266:21)
#loc396 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":268:39)
#loc397 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":268:53)
#loc398 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":268:59)
#loc399 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":268:32)
#loc400 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":268:17)
#loc401 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":268:63)
#loc402 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":269:17)
#loc403 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":272:17)
#loc404 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":269:21)
#loc405 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":269:37)
#loc406 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":270:17)
#loc407 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":271:21)
#loc408 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":274:35)
#loc409 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":274:49)
#loc410 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":274:62)
#loc411 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":274:80)
#loc412 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":274:83)
#loc413 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":274:30)
#loc414 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":274:17)
#loc415 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":274:84)
#loc416 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":275:17)
#loc417 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":278:17)
#loc418 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":275:21)
#loc419 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":275:35)
#loc421 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":275:51)
#loc422 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":275:65)
#loc423 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":276:17)
#loc424 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":277:21)
#loc425 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":280:43)
#loc426 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":280:29)
#loc427 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":280:17)
#loc428 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":282:29)
#loc429 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":282:24)
#loc430 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":282:17)
#loc431 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":282:40)
#loc432 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":285:13)
#loc433 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":288:13)
#loc434 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":285:17)
#loc435 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":285:33)
#loc436 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":286:13)
#loc437 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":287:30)
#loc438 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":287:17)
#loc439 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":289:13)
#loc440 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":292:13)
#loc441 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":289:17)
#loc442 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":289:33)
#loc443 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":290:13)
#loc444 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":291:30)
#loc445 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":291:17)
#loc446 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":301:5)
#loc447 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":324:5)
#loc448 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":301:8)
#loc449 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":301:33)
#loc450 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":302:5)
#loc451 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":312:5)
#loc452 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":314:5)
#loc453 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":304:9)
#loc454 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":311:9)
#loc455 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":304:13)
#loc456 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":304:21)
#loc457 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":305:9)
#loc458 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":307:9)
#loc459 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":309:9)
#loc460 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":306:26)
#loc461 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":306:32)
#loc462 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":306:13)
#loc463 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":310:23)
#loc464 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":310:13)
#loc465 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":316:9)
#loc466 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":323:9)
#loc467 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":316:13)
#loc468 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":316:21)
#loc469 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":317:9)
#loc470 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":319:9)
#loc471 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":321:9)
#loc472 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":318:26)
#loc473 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":318:32)
#loc474 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":318:13)
#loc475 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":322:23)
#loc476 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":322:13)
#loc477 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":330:1)
#loc478 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":355:1)
#loc479 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":332:5)
#loc480 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":332:9)
#loc481 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":334:13)
#loc482 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":334:12)
#loc483 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":334:5)
#loc484 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":335:5)
#loc485 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":344:5)
#loc486 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":335:8)
#loc487 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":335:33)
#loc488 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":336:5)
#loc489 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":339:5)
#loc490 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":341:5)
#loc491 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":338:16)
#loc492 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":338:9)
#loc493 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":343:16)
#loc494 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":343:9)
#loc495 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":345:5)
#loc496 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":354:5)
#loc497 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":345:8)
#loc498 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":345:33)
#loc499 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":346:5)
#loc500 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":349:5)
#loc501 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":351:5)
#loc502 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":348:22)
#loc503 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":348:28)
#loc504 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":348:9)
#loc505 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":353:22)
#loc506 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":353:28)
#loc507 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":353:9)
#loc508 = loc(fused[#loc1, #loc2])
#loc509 = loc(fused[#loc3, #loc4])
#loc510 = loc(fused[#loc5, #loc6])
#loc511 = loc(fused[#loc7, #loc8])
#loc512 = loc(fused[#loc9, #loc10])
#loc513 = loc(fused[#loc11, #loc12])
#loc514 = loc(fused[#loc13, #loc14])
#loc515 = loc(fused[#loc15, #loc16])
#loc516 = loc(fused[#loc17, #loc18])
#loc517 = loc(fused[#loc19, #loc20])
#loc518 = loc(fused[#loc21, #loc22])
#loc519 = loc(fused[#loc24, #loc25])
#loc520 = loc(fused[#loc26, #loc27])
#loc521 = loc(fused[#loc28, #loc29])
#loc522 = loc(fused[#loc30, #loc31])
#loc523 = loc(fused[#loc32, #loc33])
#loc524 = loc(fused[#loc34, #loc35])
#loc525 = loc(fused[#loc36, #loc37])
#loc526 = loc(fused[#loc40, #loc38])
#loc527 = loc(fused[#loc41, #loc42])
#loc528 = loc(fused[#loc43, #loc44])
#loc529 = loc(fused[#loc45, #loc46, #loc47, #loc42])
#loc530 = loc(fused[#loc48, #loc49])
#loc531 = loc(fused[#loc50, #loc51])
#loc532 = loc(fused[#loc57, #loc58])
#loc533 = loc(fused[#loc59, #loc60])
#loc534 = loc(fused[#loc61, #loc62])
#loc535 = loc(fused[#loc63, #loc60])
#loc536 = loc(fused[#loc65, #loc66])
#loc537 = loc(fused[#loc68, #loc69])
#loc538 = loc(fused[#loc70, #loc71])
#loc539 = loc(fused[#loc74, #loc72])
#loc540 = loc(fused[#loc78, #loc75])
#loc541 = loc(fused[#loc82, #loc83])
#loc542 = loc(fused[#loc84, #loc85])
#loc543 = loc(fused[#loc87, #loc88])
#loc544 = loc(fused[#loc89, #loc90])
#loc545 = loc(fused[#loc91, #loc92])
#loc546 = loc(fused[#loc93, #loc85])
#loc547 = loc(fused[#loc95, #loc96])
#loc548 = loc(fused[#loc99, #loc100])
#loc549 = loc(fused[#loc101, #loc96])
#loc550 = loc(fused[#loc107, #loc108])
#loc551 = loc(fused[#loc109, #loc110])
#loc552 = loc(fused[#loc111, #loc112])
#loc553 = loc(fused[#loc113, #loc110])
#loc554 = loc(fused[#loc117, #loc118])
#loc555 = loc(fused[#loc121, #loc122])
#loc556 = loc(fused[#loc123, #loc124])
#loc557 = loc(fused[#loc125, #loc126])
#loc558 = loc(fused[#loc128, #loc129])
#loc559 = loc(fused[#loc130, #loc124])
#loc560 = loc(fused[#loc134, #loc132])
#loc561 = loc(fused[#loc137, #loc138])
#loc562 = loc(fused[#loc139, #loc140])
#loc563 = loc(fused[#loc141, #loc142])
#loc564 = loc(fused[#loc143, #loc140])
#loc565 = loc(fused[#loc146, #loc147])
#loc566 = loc(fused[#loc148, #loc149])
#loc567 = loc(fused[#loc150, #loc147])
#loc568 = loc(fused[#loc154, #loc153])
#loc569 = loc(fused[#loc155, #loc156])
#loc570 = loc(fused[#loc157, #loc158])
#loc571 = loc(fused[#loc159, #loc160, #loc161, #loc156])
#loc572 = loc(fused[#loc162, #loc163])
#loc573 = loc(fused[#loc165, #loc166])
#loc574 = loc(fused[#loc167, #loc168])
#loc575 = loc(fused[#loc169, #loc170, #loc171, #loc166])
#loc576 = loc(fused[#loc172, #loc173])
#loc577 = loc(fused[#loc176, #loc177])
#loc578 = loc(fused[#loc178, #loc179])
#loc579 = loc(fused[#loc180, #loc181])
#loc580 = loc(fused[#loc182, #loc183])
#loc581 = loc(fused[#loc184, #loc185])
#loc582 = loc(fused[#loc190, #loc191])
#loc585 = loc(fused[#loc201, #loc202])
#loc586 = loc(fused[#loc205, #loc206])
#loc587 = loc(fused[#loc209, #loc208])
#loc588 = loc(fused[#loc210, #loc211])
#loc589 = loc(fused[#loc212, #loc213])
#loc590 = loc(fused[#loc214, #loc215])
#loc591 = loc(fused[#loc216, #loc217])
#loc592 = loc(fused[#loc218, #loc219])
#loc593 = loc(fused[#loc220, #loc221])
#loc594 = loc(fused[#loc222, #loc223])
#loc595 = loc(fused[#loc224, #loc225])
#loc596 = loc(fused[#loc226, #loc227])
#loc597 = loc(fused[#loc228, #loc229])
#loc598 = loc(fused[#loc230, #loc231])
#loc599 = loc(fused[#loc232, #loc233])
#loc600 = loc(fused[#loc236, #loc234])
#loc601 = loc(fused[#loc237, #loc238])
#loc602 = loc(fused[#loc239, #loc240])
#loc603 = loc(fused[#loc241, #loc242, #loc243, #loc238])
#loc604 = loc(fused[#loc244, #loc245])
#loc605 = loc(fused[#loc246, #loc247])
#loc606 = loc(fused[#loc253, #loc254])
#loc607 = loc(fused[#loc255, #loc256])
#loc608 = loc(fused[#loc257, #loc258])
#loc609 = loc(fused[#loc259, #loc256])
#loc610 = loc(fused[#loc261, #loc262])
#loc611 = loc(fused[#loc264, #loc265])
#loc612 = loc(fused[#loc266, #loc267])
#loc613 = loc(fused[#loc269, #loc268])
#loc614 = loc(fused[#loc271, #loc270])
#loc615 = loc(fused[#loc274, #loc275])
#loc616 = loc(fused[#loc276, #loc277])
#loc617 = loc(fused[#loc279, #loc280])
#loc618 = loc(fused[#loc281, #loc282])
#loc619 = loc(fused[#loc283, #loc284])
#loc620 = loc(fused[#loc285, #loc277])
#loc621 = loc(fused[#loc287, #loc288])
#loc622 = loc(fused[#loc291, #loc292])
#loc623 = loc(fused[#loc293, #loc288])
#loc624 = loc(fused[#loc299, #loc300])
#loc625 = loc(fused[#loc301, #loc302])
#loc626 = loc(fused[#loc303, #loc304])
#loc627 = loc(fused[#loc305, #loc302])
#loc628 = loc(fused[#loc309, #loc310])
#loc629 = loc(fused[#loc313, #loc314])
#loc630 = loc(fused[#loc315, #loc316])
#loc631 = loc(fused[#loc317, #loc318])
#loc632 = loc(fused[#loc320, #loc321])
#loc633 = loc(fused[#loc322, #loc316])
#loc634 = loc(fused[#loc326, #loc324])
#loc635 = loc(fused[#loc329, #loc330])
#loc636 = loc(fused[#loc331, #loc332])
#loc637 = loc(fused[#loc333, #loc334])
#loc638 = loc(fused[#loc335, #loc332])
#loc639 = loc(fused[#loc338, #loc339])
#loc640 = loc(fused[#loc340, #loc341])
#loc641 = loc(fused[#loc342, #loc339])
#loc642 = loc(fused[#loc345, #loc346])
#loc643 = loc(fused[#loc347, #loc348])
#loc644 = loc(fused[#loc354, #loc355])
#loc645 = loc(fused[#loc356, #loc357])
#loc646 = loc(fused[#loc358, #loc359])
#loc647 = loc(fused[#loc360, #loc357])
#loc648 = loc(fused[#loc362, #loc363])
#loc649 = loc(fused[#loc365, #loc366])
#loc650 = loc(fused[#loc367, #loc368])
#loc651 = loc(fused[#loc370, #loc369])
#loc652 = loc(fused[#loc372, #loc371])
#loc653 = loc(fused[#loc375, #loc376])
#loc654 = loc(fused[#loc377, #loc378])
#loc655 = loc(fused[#loc380, #loc381])
#loc656 = loc(fused[#loc382, #loc383])
#loc657 = loc(fused[#loc384, #loc385])
#loc658 = loc(fused[#loc386, #loc378])
#loc659 = loc(fused[#loc388, #loc389])
#loc660 = loc(fused[#loc392, #loc393])
#loc661 = loc(fused[#loc394, #loc389])
#loc662 = loc(fused[#loc400, #loc401])
#loc663 = loc(fused[#loc402, #loc403])
#loc664 = loc(fused[#loc404, #loc405])
#loc665 = loc(fused[#loc406, #loc403])
#loc666 = loc(fused[#loc410, #loc411])
#loc667 = loc(fused[#loc414, #loc415])
#loc668 = loc(fused[#loc416, #loc417])
#loc669 = loc(fused[#loc418, #loc419])
#loc670 = loc(fused[#loc421, #loc422])
#loc671 = loc(fused[#loc423, #loc417])
#loc672 = loc(fused[#loc427, #loc425])
#loc673 = loc(fused[#loc430, #loc431])
#loc674 = loc(fused[#loc432, #loc433])
#loc675 = loc(fused[#loc434, #loc435])
#loc676 = loc(fused[#loc436, #loc433])
#loc677 = loc(fused[#loc439, #loc440])
#loc678 = loc(fused[#loc441, #loc442])
#loc679 = loc(fused[#loc443, #loc440])
#loc680 = loc(fused[#loc446, #loc447])
#loc681 = loc(fused[#loc448, #loc449])
#loc682 = loc(fused[#loc450, #loc451, #loc452, #loc447])
#loc683 = loc(fused[#loc453, #loc454])
#loc684 = loc(fused[#loc455, #loc456])
#loc685 = loc(fused[#loc457, #loc458, #loc459, #loc454])
#loc686 = loc(fused[#loc460, #loc461])
#loc687 = loc(fused[#loc465, #loc466])
#loc688 = loc(fused[#loc467, #loc468])
#loc689 = loc(fused[#loc469, #loc470, #loc471, #loc466])
#loc690 = loc(fused[#loc472, #loc473])
#loc691 = loc(fused[#loc477, #loc478])
#loc692 = loc(fused[#loc479, #loc480])
#loc693 = loc(fused[#loc483, #loc481])
#loc694 = loc(fused[#loc484, #loc485])
#loc695 = loc(fused[#loc486, #loc487])
#loc696 = loc(fused[#loc488, #loc489, #loc490, #loc485])
#loc697 = loc(fused[#loc492, #loc491])
#loc698 = loc(fused[#loc494, #loc493])
#loc699 = loc(fused[#loc495, #loc496])
#loc700 = loc(fused[#loc497, #loc498])
#loc701 = loc(fused[#loc499, #loc500, #loc501, #loc496])
#loc702 = loc(fused[#loc502, #loc503])
#loc703 = loc(fused[#loc505, #loc506])
