!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc57 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":164:10)
#loc58 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":164:14)
#loc59 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":164:20)
#loc60 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":164:32)
#loc230 = loc(fused[#loc57, #loc58])
#loc231 = loc(fused[#loc59, #loc60])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_13.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant external @GLOBAL_CONST_FIVE : !s32i {alignment = 4 : i64} loc(#loc206)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc207)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc208)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printHexCharLine(!s8i) loc(#loc209)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_square_13_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc211)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc212)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc16)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc16)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc213)
    cir.br ^bb1 loc(#loc214)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc206)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc21)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc215)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc216)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc23)
    %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc208)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc24)
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
    %13 = cir.call @__isoc99_fscanf(%10, %12, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc23)
    cir.br ^bb3 loc(#loc19)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc217)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc206)
    %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %16 = cir.const #cir.int<5> : !s32i loc(#loc28)
    %17 = cir.cmp(eq, %15, %16) : !s32i, !cir.bool loc(#loc218)
    cir.brcond %17 ^bb6, ^bb9 loc(#loc219)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc220)
  ^bb7:  // pred: ^bb6
    %18 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc32)
    %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc32)
    %20 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc13)
    %21 = cir.cast(integral, %20 : !s8i), !s32i loc(#loc13)
    %22 = cir.binop(mul, %19, %21) nsw : !s32i loc(#loc32)
    %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc32)
    cir.store %23, %0 : !s8i, !cir.ptr<!s8i> loc(#loc211)
    %24 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc33)
    cir.call @printHexCharLine(%24) : (!s8i) -> () loc(#loc34)
    cir.br ^bb8 loc(#loc31)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc26)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc26)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc11)
  } loc(#loc210)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_square_13_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc222)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc224)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc225)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    cir.return loc(#loc36)
  } loc(#loc221)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc226)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc227)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc228)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc54)
  cir.func @main(%arg0: !s32i loc(fused[#loc57, #loc58]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc59, #loc60])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc230)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc231)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc56)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc61)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc61)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc62)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc63)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc63)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc64)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc51)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %8 = cir.get_global @CWE190_Integer_Overflow__char_fscanf_square_13_good : !cir.ptr<!cir.func<!void ()>> loc(#loc232)
    cir.call @CWE190_Integer_Overflow__char_fscanf_square_13_good() : () -> () loc(#loc66)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc52)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc53)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %13 = cir.get_global @CWE190_Integer_Overflow__char_fscanf_square_13_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc233)
    cir.call @CWE190_Integer_Overflow__char_fscanf_square_13_bad() : () -> () loc(#loc70)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc54)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc73)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc234)
    cir.return %17 : !s32i loc(#loc234)
  } loc(#loc229)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc75)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc77)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc236)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc237)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc84)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc84)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc238)
    cir.br ^bb1 loc(#loc239)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc206)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc89)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc240)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc241)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc91)
    %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc208)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc92)
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc93)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc93)
    %13 = cir.call @__isoc99_fscanf(%10, %12, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc91)
    cir.br ^bb3 loc(#loc87)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc87)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc242)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc206)
    %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    %16 = cir.const #cir.int<5> : !s32i loc(#loc97)
    %17 = cir.cmp(ne, %15, %16) : !s32i, !cir.bool loc(#loc243)
    cir.brcond %17 ^bb6, ^bb7 loc(#loc244)
  ^bb6:  // pred: ^bb5
    %18 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc75)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    cir.br ^bb13 loc(#loc99)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc245)
  ^bb8:  // pred: ^bb7
    %20 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc104)
    %21 = cir.cast(integral, %20 : !s8i), !s64i loc(#loc104)
    %22 = cir.cast(integral, %21 : !s64i), !s32i loc(#loc104)
    %23 = cir.abs %22 poison : !s32i loc(#loc105)
    %24 = cir.cast(integral, %23 : !s32i), !s64i loc(#loc105)
    %25 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc106)
    %26 = cir.const #cir.int<127> : !s32i loc(#loc107)
    %27 = cir.cast(int_to_float, %26 : !s32i), !cir.double loc(#loc107)
    %28 = cir.call @sqrt(%27) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc106)
    %29 = cir.cast(float_to_int, %28 : !cir.double), !s64i loc(#loc106)
    %30 = cir.cmp(le, %24, %29) : !s64i, !cir.bool loc(#loc246)
    cir.brcond %30 ^bb9, ^bb10 loc(#loc247)
  ^bb9:  // pred: ^bb8
    %31 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc112)
    %32 = cir.cast(integral, %31 : !s8i), !s32i loc(#loc112)
    %33 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc81)
    %34 = cir.cast(integral, %33 : !s8i), !s32i loc(#loc81)
    %35 = cir.binop(mul, %32, %34) nsw : !s32i loc(#loc112)
    %36 = cir.cast(integral, %35 : !s32i), !s8i loc(#loc112)
    cir.store %36, %0 : !s8i, !cir.ptr<!s8i> loc(#loc236)
    %37 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc113)
    cir.call @printHexCharLine(%37) : (!s8i) -> () loc(#loc114)
    cir.br ^bb11 loc(#loc110)
  ^bb10:  // pred: ^bb8
    %38 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc77)
    %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc115)
    cir.br ^bb11 loc(#loc103)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc103)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc95)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc95)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc79)
  } loc(#loc235)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc249)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc250)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc122)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc122)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc251)
    cir.br ^bb1 loc(#loc252)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc206)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc126)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc127)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc253)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc254)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc129)
    %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc208)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc130)
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc131)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc131)
    %13 = cir.call @__isoc99_fscanf(%10, %12, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc129)
    cir.br ^bb3 loc(#loc125)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc125)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc255)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc206)
    %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc134)
    %16 = cir.const #cir.int<5> : !s32i loc(#loc135)
    %17 = cir.cmp(eq, %15, %16) : !s32i, !cir.bool loc(#loc256)
    cir.brcond %17 ^bb6, ^bb12 loc(#loc257)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc258)
  ^bb7:  // pred: ^bb6
    %18 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc139)
    %19 = cir.cast(integral, %18 : !s8i), !s64i loc(#loc139)
    %20 = cir.cast(integral, %19 : !s64i), !s32i loc(#loc139)
    %21 = cir.abs %20 poison : !s32i loc(#loc140)
    %22 = cir.cast(integral, %21 : !s32i), !s64i loc(#loc140)
    %23 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc141)
    %24 = cir.const #cir.int<127> : !s32i loc(#loc142)
    %25 = cir.cast(int_to_float, %24 : !s32i), !cir.double loc(#loc142)
    %26 = cir.call @sqrt(%25) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc141)
    %27 = cir.cast(float_to_int, %26 : !cir.double), !s64i loc(#loc141)
    %28 = cir.cmp(le, %22, %27) : !s64i, !cir.bool loc(#loc259)
    cir.brcond %28 ^bb8, ^bb9 loc(#loc260)
  ^bb8:  // pred: ^bb7
    %29 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc147)
    %30 = cir.cast(integral, %29 : !s8i), !s32i loc(#loc147)
    %31 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc119)
    %32 = cir.cast(integral, %31 : !s8i), !s32i loc(#loc119)
    %33 = cir.binop(mul, %30, %32) nsw : !s32i loc(#loc147)
    %34 = cir.cast(integral, %33 : !s32i), !s8i loc(#loc147)
    cir.store %34, %0 : !s8i, !cir.ptr<!s8i> loc(#loc249)
    %35 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc148)
    cir.call @printHexCharLine(%35) : (!s8i) -> () loc(#loc149)
    cir.br ^bb10 loc(#loc145)
  ^bb9:  // pred: ^bb7
    %36 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc150)
    %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc150)
    cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc151)
    cir.br ^bb10 loc(#loc138)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc138)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc133)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc133)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc117)
  } loc(#loc248)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc262)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc263)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc158)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc158)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc264)
    cir.br ^bb1 loc(#loc265)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc206)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc162)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc163)
    %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc266)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc267)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc167)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc167)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc168)
    cir.br ^bb4 loc(#loc165)
  ^bb3:  // pred: ^bb1
    %10 = cir.const #cir.int<2> : !s32i loc(#loc169)
    %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc169)
    cir.store %11, %1 : !s8i, !cir.ptr<!s8i> loc(#loc268)
    cir.br ^bb4 loc(#loc161)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc161)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc269)
  ^bb6:  // pred: ^bb5
    %12 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc206)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc173)
    %14 = cir.const #cir.int<5> : !s32i loc(#loc174)
    %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc270)
    cir.brcond %15 ^bb7, ^bb10 loc(#loc271)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc272)
  ^bb8:  // pred: ^bb7
    %16 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc178)
    %17 = cir.cast(integral, %16 : !s8i), !s32i loc(#loc178)
    %18 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc155)
    %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc155)
    %20 = cir.binop(mul, %17, %19) nsw : !s32i loc(#loc178)
    %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc178)
    cir.store %21, %0 : !s8i, !cir.ptr<!s8i> loc(#loc262)
    %22 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc179)
    cir.call @printHexCharLine(%22) : (!s8i) -> () loc(#loc180)
    cir.br ^bb9 loc(#loc177)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc172)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc172)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc153)
  } loc(#loc261)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc274)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc275)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc187)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc187)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc276)
    cir.br ^bb1 loc(#loc277)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc206)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc191)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc192)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc278)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc279)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc194)
    %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc194)
    cir.store %9, %1 : !s8i, !cir.ptr<!s8i> loc(#loc280)
    cir.br ^bb3 loc(#loc190)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc190)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc281)
  ^bb5:  // pred: ^bb4
    %10 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc206)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc198)
    %12 = cir.const #cir.int<5> : !s32i loc(#loc199)
    %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc282)
    cir.brcond %13 ^bb6, ^bb9 loc(#loc283)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc284)
  ^bb7:  // pred: ^bb6
    %14 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc203)
    %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc203)
    %16 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc184)
    %17 = cir.cast(integral, %16 : !s8i), !s32i loc(#loc184)
    %18 = cir.binop(mul, %15, %17) nsw : !s32i loc(#loc203)
    %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc203)
    cir.store %19, %0 : !s8i, !cir.ptr<!s8i> loc(#loc274)
    %20 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc204)
    cir.call @printHexCharLine(%20) : (!s8i) -> () loc(#loc205)
    cir.br ^bb8 loc(#loc202)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc197)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc197)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc182)
  } loc(#loc273)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_13.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":111:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":111:18)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":31:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc10 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":24:1)
#loc11 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":41:1)
#loc12 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":37:13)
#loc13 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":37:34)
#loc14 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":26:10)
#loc16 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":27:12)
#loc17 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":27:5)
#loc18 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":28:5)
#loc19 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":32:5)
#loc20 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":28:8)
#loc21 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":28:27)
#loc22 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":29:5)
#loc23 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":31:9)
#loc24 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":31:17)
#loc25 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":33:5)
#loc26 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":40:5)
#loc27 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":33:8)
#loc28 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":33:27)
#loc29 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":34:5)
#loc30 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":35:9)
#loc31 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":39:9)
#loc32 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":37:27)
#loc33 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":38:30)
#loc34 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":38:13)
#loc35 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":147:1)
#loc36 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":153:1)
#loc37 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":149:5)
#loc38 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":149:14)
#loc39 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":150:5)
#loc40 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":150:14)
#loc41 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":151:5)
#loc42 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":151:14)
#loc43 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":152:5)
#loc44 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":152:14)
#loc45 = loc("/usr/include/stdlib.h":575:1)
#loc46 = loc("/usr/include/stdlib.h":575:41)
#loc47 = loc("/usr/include/time.h":76:1)
#loc48 = loc("/usr/include/time.h":76:38)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc51 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":169:15)
#loc52 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":171:15)
#loc53 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":174:15)
#loc54 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":176:15)
#loc55 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":164:1)
#loc56 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":179:1)
#loc61 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":165:1)
#loc62 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":167:27)
#loc63 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":167:22)
#loc64 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":167:5)
#loc65 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":169:5)
#loc66 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":170:5)
#loc67 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":170:57)
#loc68 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":171:5)
#loc69 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":174:5)
#loc70 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":175:5)
#loc71 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":175:56)
#loc72 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":176:5)
#loc73 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":178:12)
#loc74 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":178:5)
#loc75 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":60:19)
#loc76 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc77 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":72:23)
#loc78 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":48:1)
#loc79 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":75:1)
#loc80 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":67:13)
#loc81 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":67:34)
#loc82 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":50:5)
#loc83 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":50:10)
#loc84 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":51:12)
#loc85 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":51:5)
#loc86 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":52:5)
#loc87 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":56:5)
#loc88 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":52:8)
#loc89 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":52:27)
#loc90 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":53:5)
#loc91 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":55:9)
#loc92 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":55:17)
#loc93 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":55:24)
#loc94 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":57:5)
#loc95 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":74:5)
#loc96 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":57:8)
#loc97 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":57:27)
#loc98 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":58:5)
#loc99 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":61:5)
#loc100 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":63:5)
#loc101 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":60:9)
#loc102 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":65:9)
#loc103 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":73:9)
#loc104 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":65:23)
#loc105 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":65:13)
#loc106 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":65:38)
#loc107 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":65:51)
#loc108 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":65:59)
#loc109 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":66:9)
#loc110 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":69:9)
#loc111 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":71:9)
#loc112 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":67:27)
#loc113 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":68:30)
#loc114 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":68:13)
#loc115 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":72:13)
#loc116 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":78:1)
#loc117 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":100:1)
#loc118 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":92:13)
#loc119 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":92:34)
#loc120 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":80:5)
#loc121 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":80:10)
#loc122 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":81:12)
#loc123 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":81:5)
#loc124 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":82:5)
#loc125 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":86:5)
#loc126 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":82:8)
#loc127 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":82:27)
#loc128 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":83:5)
#loc129 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":85:9)
#loc130 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":85:17)
#loc131 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":85:24)
#loc132 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":87:5)
#loc133 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":99:5)
#loc134 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":87:8)
#loc135 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":87:27)
#loc136 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":88:5)
#loc137 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":90:9)
#loc138 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":98:9)
#loc139 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":90:23)
#loc140 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":90:13)
#loc141 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":90:38)
#loc142 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":90:51)
#loc143 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":90:59)
#loc144 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":91:9)
#loc145 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":94:9)
#loc146 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":96:9)
#loc147 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":92:27)
#loc148 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":93:30)
#loc149 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":93:13)
#loc150 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":97:23)
#loc151 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":97:13)
#loc152 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":103:1)
#loc153 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":125:1)
#loc154 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":121:13)
#loc155 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":121:34)
#loc156 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":105:5)
#loc157 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":105:10)
#loc158 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":106:12)
#loc159 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":106:5)
#loc160 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":107:5)
#loc161 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":116:5)
#loc162 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":107:8)
#loc163 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":107:27)
#loc164 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":108:5)
#loc165 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":111:5)
#loc166 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":113:5)
#loc167 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":110:19)
#loc168 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":110:9)
#loc169 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":115:16)
#loc170 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":115:9)
#loc171 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":117:5)
#loc172 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":124:5)
#loc173 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":117:8)
#loc174 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":117:27)
#loc175 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":118:5)
#loc176 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":119:9)
#loc177 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":123:9)
#loc178 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":121:27)
#loc179 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":122:30)
#loc180 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":122:13)
#loc181 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":128:1)
#loc182 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":145:1)
#loc183 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":141:13)
#loc184 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":141:34)
#loc185 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":130:5)
#loc186 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":130:10)
#loc187 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":131:12)
#loc188 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":131:5)
#loc189 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":132:5)
#loc190 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":136:5)
#loc191 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":132:8)
#loc192 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":132:27)
#loc193 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":133:5)
#loc194 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":135:16)
#loc195 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":135:9)
#loc196 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":137:5)
#loc197 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":144:5)
#loc198 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":137:8)
#loc199 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":137:27)
#loc200 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":138:5)
#loc201 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":139:9)
#loc202 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":143:9)
#loc203 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":141:27)
#loc204 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":142:30)
#loc205 = loc("CWE190_Integer_Overflow__char_fscanf_square_13.c":142:13)
#loc206 = loc(fused[#loc1, #loc2])
#loc207 = loc(fused[#loc3, #loc4])
#loc208 = loc(fused[#loc5, #loc6])
#loc209 = loc(fused[#loc8, #loc9])
#loc210 = loc(fused[#loc10, #loc11])
#loc211 = loc(fused[#loc12, #loc13])
#loc212 = loc(fused[#loc14, #loc15])
#loc213 = loc(fused[#loc17, #loc16])
#loc214 = loc(fused[#loc18, #loc19])
#loc215 = loc(fused[#loc20, #loc21])
#loc216 = loc(fused[#loc22, #loc19])
#loc217 = loc(fused[#loc25, #loc26])
#loc218 = loc(fused[#loc27, #loc28])
#loc219 = loc(fused[#loc29, #loc26])
#loc220 = loc(fused[#loc30, #loc31])
#loc221 = loc(fused[#loc35, #loc36])
#loc222 = loc(fused[#loc37, #loc38])
#loc223 = loc(fused[#loc39, #loc40])
#loc224 = loc(fused[#loc41, #loc42])
#loc225 = loc(fused[#loc43, #loc44])
#loc226 = loc(fused[#loc45, #loc46])
#loc227 = loc(fused[#loc47, #loc48])
#loc228 = loc(fused[#loc49, #loc50])
#loc229 = loc(fused[#loc55, #loc56])
#loc232 = loc(fused[#loc66, #loc67])
#loc233 = loc(fused[#loc70, #loc71])
#loc234 = loc(fused[#loc74, #loc73])
#loc235 = loc(fused[#loc78, #loc79])
#loc236 = loc(fused[#loc80, #loc81])
#loc237 = loc(fused[#loc82, #loc83])
#loc238 = loc(fused[#loc85, #loc84])
#loc239 = loc(fused[#loc86, #loc87])
#loc240 = loc(fused[#loc88, #loc89])
#loc241 = loc(fused[#loc90, #loc87])
#loc242 = loc(fused[#loc94, #loc95])
#loc243 = loc(fused[#loc96, #loc97])
#loc244 = loc(fused[#loc98, #loc99, #loc100, #loc95])
#loc245 = loc(fused[#loc102, #loc103])
#loc246 = loc(fused[#loc105, #loc108])
#loc247 = loc(fused[#loc109, #loc110, #loc111, #loc103])
#loc248 = loc(fused[#loc116, #loc117])
#loc249 = loc(fused[#loc118, #loc119])
#loc250 = loc(fused[#loc120, #loc121])
#loc251 = loc(fused[#loc123, #loc122])
#loc252 = loc(fused[#loc124, #loc125])
#loc253 = loc(fused[#loc126, #loc127])
#loc254 = loc(fused[#loc128, #loc125])
#loc255 = loc(fused[#loc132, #loc133])
#loc256 = loc(fused[#loc134, #loc135])
#loc257 = loc(fused[#loc136, #loc133])
#loc258 = loc(fused[#loc137, #loc138])
#loc259 = loc(fused[#loc140, #loc143])
#loc260 = loc(fused[#loc144, #loc145, #loc146, #loc138])
#loc261 = loc(fused[#loc152, #loc153])
#loc262 = loc(fused[#loc154, #loc155])
#loc263 = loc(fused[#loc156, #loc157])
#loc264 = loc(fused[#loc159, #loc158])
#loc265 = loc(fused[#loc160, #loc161])
#loc266 = loc(fused[#loc162, #loc163])
#loc267 = loc(fused[#loc164, #loc165, #loc166, #loc161])
#loc268 = loc(fused[#loc170, #loc169])
#loc269 = loc(fused[#loc171, #loc172])
#loc270 = loc(fused[#loc173, #loc174])
#loc271 = loc(fused[#loc175, #loc172])
#loc272 = loc(fused[#loc176, #loc177])
#loc273 = loc(fused[#loc181, #loc182])
#loc274 = loc(fused[#loc183, #loc184])
#loc275 = loc(fused[#loc185, #loc186])
#loc276 = loc(fused[#loc188, #loc187])
#loc277 = loc(fused[#loc189, #loc190])
#loc278 = loc(fused[#loc191, #loc192])
#loc279 = loc(fused[#loc193, #loc190])
#loc280 = loc(fused[#loc195, #loc194])
#loc281 = loc(fused[#loc196, #loc197])
#loc282 = loc(fused[#loc198, #loc199])
#loc283 = loc(fused[#loc200, #loc197])
#loc284 = loc(fused[#loc201, #loc202])
