!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":73:40)
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc87)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc88)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc89)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc91)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc93)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc94)
    cir.br ^bb1 loc(#loc95)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc95)
  ^bb2:  // pred: ^bb1
    %2 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %3 ^bb3, ^bb11 loc(#loc20)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc96)
  ^bb4:  // pred: ^bb3
    %4 = cir.const #cir.int<0> : !s32i loc(#loc17)
    %5 = cir.cast(int_to_float, %4 : !s32i), !cir.double loc(#loc17)
    cir.store %5, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc94)
    cir.br ^bb5 loc(#loc97)
  ^bb5:  // pred: ^bb4
    %6 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc25)
    %7 = cir.const #cir.int<256> : !s32i loc(#loc26)
    %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc88)
    %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc27)
    %10 = cir.call @fgets(%6, %7, %9) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc28)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc29)
    %13 = cir.cmp(ne, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc98)
    cir.brcond %13 ^bb6, ^bb7 loc(#loc99)
  ^bb6:  // pred: ^bb5
    %14 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc33)
    %15 = cir.call @atof(%14) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc34)
    cir.store %15, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc100)
    cir.br ^bb8 loc(#loc31)
  ^bb7:  // pred: ^bb5
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc37)
    cir.br ^bb8 loc(#loc24)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc24)
  ^bb9:  // pred: ^bb8
    %18 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc38)
    %19 = cir.cast(float_to_int, %18 : !cir.double), !s32i loc(#loc38)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc39)
    cir.br ^bb10 loc(#loc22)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc40)
  ^bb11:  // 2 preds: ^bb2, ^bb10
    cir.br ^bb12 loc(#loc19)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc13)
  } loc(#loc92)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc102)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    cir.return loc(#loc42)
  } loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Value is too small or large to be represented as an int\00" : !cir.array<!s8i x 56>> : !cir.array<!s8i x 56> {alignment = 1 : i64} loc(#loc45)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc104)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc105)
    cir.br ^bb1 loc(#loc106)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc106)
  ^bb2:  // pred: ^bb1
    %2 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc54)
    cir.brcond %3 ^bb3, ^bb24 loc(#loc54)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc107)
  ^bb4:  // pred: ^bb3
    %4 = cir.const #cir.int<0> : !s32i loc(#loc51)
    %5 = cir.cast(int_to_float, %4 : !s32i), !cir.double loc(#loc51)
    cir.store %5, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc105)
    cir.br ^bb5 loc(#loc108)
  ^bb5:  // pred: ^bb4
    %6 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc59)
    %7 = cir.const #cir.int<256> : !s32i loc(#loc60)
    %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc88)
    %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc61)
    %10 = cir.call @fgets(%6, %7, %9) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc62)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc63)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc63)
    %13 = cir.cmp(ne, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc109)
    cir.brcond %13 ^bb6, ^bb7 loc(#loc110)
  ^bb6:  // pred: ^bb5
    %14 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc67)
    %15 = cir.call @atof(%14) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc68)
    cir.store %15, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc111)
    cir.br ^bb8 loc(#loc65)
  ^bb7:  // pred: ^bb5
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc71)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    cir.br ^bb8 loc(#loc58)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc58)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc112)
  ^bb10:  // pred: ^bb9
    %18 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc75)
    %19 = cir.const #cir.int<2147483647> : !s32i loc(#loc76)
    %20 = cir.cast(int_to_float, %19 : !s32i), !cir.double loc(#loc76)
    %21 = cir.cmp(gt, %18, %20) : !cir.double, !cir.bool loc(#loc113)
    cir.brcond %21 ^bb11, ^bb12 loc(#loc77)
  ^bb11:  // pred: ^bb10
    %22 = cir.const #true loc(#loc77)
    cir.br ^bb17(%22 : !cir.bool) loc(#loc77)
  ^bb12:  // pred: ^bb10
    %23 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc78)
    %24 = cir.const #cir.int<2147483647> : !s32i loc(#loc79)
    %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc79)
    %26 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %27 = cir.binop(sub, %25, %26) nsw : !s32i loc(#loc79)
    %28 = cir.cast(int_to_float, %27 : !s32i), !cir.double loc(#loc79)
    %29 = cir.cmp(lt, %23, %28) : !cir.double, !cir.bool loc(#loc114)
    cir.brcond %29 ^bb13, ^bb14 loc(#loc77)
  ^bb13:  // pred: ^bb12
    %30 = cir.const #true loc(#loc77)
    cir.br ^bb15(%30 : !cir.bool) loc(#loc77)
  ^bb14:  // pred: ^bb12
    %31 = cir.const #false loc(#loc77)
    cir.br ^bb15(%31 : !cir.bool) loc(#loc77)
  ^bb15(%32: !cir.bool loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":73:40)):  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc77)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17(%32 : !cir.bool) loc(#loc77)
  ^bb17(%33: !cir.bool loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":73:40)):  // 2 preds: ^bb11, ^bb16
    cir.br ^bb18 loc(#loc77)
  ^bb18:  // pred: ^bb17
    cir.brcond %33 ^bb19, ^bb20 loc(#loc115)
  ^bb19:  // pred: ^bb18
    %34 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 56>> loc(#loc45)
    %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 56>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%35) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    cir.br ^bb21 loc(#loc81)
  ^bb20:  // pred: ^bb18
    %36 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc84)
    %37 = cir.cast(float_to_int, %36 : !cir.double), !s32i loc(#loc84)
    cir.call @printIntLine(%37) : (!s32i) -> () loc(#loc85)
    cir.br ^bb21 loc(#loc74)
  ^bb21:  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc74)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc56)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc86)
  ^bb24:  // 2 preds: ^bb2, ^bb23
    cir.br ^bb25 loc(#loc53)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc47)
  } loc(#loc103)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":102:1)
#loc6 = loc("/usr/include/stdlib.h":103:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":37:27)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":22:1)
#loc13 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":44:1)
#loc14 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":27:13)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":27:45)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":28:13)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":28:35)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":24:5)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":43:5)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":24:11)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":26:9)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":41:9)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":30:13)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":38:13)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":30:23)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":30:36)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":30:53)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":30:17)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":30:63)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":31:13)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":34:13)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":36:13)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":33:37)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":33:32)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":33:17)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":33:48)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":37:17)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":40:31)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":40:13)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":42:9)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":86:1)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":89:1)
#loc43 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":88:5)
#loc44 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":88:11)
#loc45 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":75:27)
#loc46 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":51:1)
#loc47 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":84:1)
#loc48 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":56:13)
#loc49 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":56:45)
#loc50 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":57:13)
#loc51 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":57:35)
#loc52 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":53:5)
#loc53 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":83:5)
#loc54 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":53:11)
#loc55 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":55:9)
#loc56 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":81:9)
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":63:13)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":71:13)
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":63:23)
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":63:36)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":63:53)
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":63:17)
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":63:63)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":64:13)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":67:13)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":69:13)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":66:37)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":66:32)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":66:17)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":66:48)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":70:27)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":70:17)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":73:13)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":80:13)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":73:17)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":73:32)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":73:43)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":73:58)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":74:13)
#loc81 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":76:13)
#loc82 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":78:13)
#loc83 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":75:17)
#loc84 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":79:35)
#loc85 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":79:17)
#loc86 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16.c":82:9)
#loc87 = loc(fused[#loc1, #loc2])
#loc88 = loc(fused[#loc3, #loc4])
#loc89 = loc(fused[#loc5, #loc6])
#loc90 = loc(fused[#loc7, #loc8])
#loc91 = loc(fused[#loc10, #loc11])
#loc92 = loc(fused[#loc12, #loc13])
#loc93 = loc(fused[#loc14, #loc15])
#loc94 = loc(fused[#loc16, #loc17])
#loc95 = loc(fused[#loc18, #loc19])
#loc96 = loc(fused[#loc21, #loc22])
#loc97 = loc(fused[#loc23, #loc24])
#loc98 = loc(fused[#loc28, #loc29])
#loc99 = loc(fused[#loc30, #loc31, #loc32, #loc24])
#loc100 = loc(fused[#loc35, #loc36])
#loc101 = loc(fused[#loc41, #loc42])
#loc102 = loc(fused[#loc43, #loc44])
#loc103 = loc(fused[#loc46, #loc47])
#loc104 = loc(fused[#loc48, #loc49])
#loc105 = loc(fused[#loc50, #loc51])
#loc106 = loc(fused[#loc52, #loc53])
#loc107 = loc(fused[#loc55, #loc56])
#loc108 = loc(fused[#loc57, #loc58])
#loc109 = loc(fused[#loc62, #loc63])
#loc110 = loc(fused[#loc64, #loc65, #loc66, #loc58])
#loc111 = loc(fused[#loc69, #loc70])
#loc112 = loc(fused[#loc73, #loc74])
#loc113 = loc(fused[#loc75, #loc76])
#loc114 = loc(fused[#loc78, #loc79])
#loc115 = loc(fused[#loc80, #loc81, #loc82, #loc74])
