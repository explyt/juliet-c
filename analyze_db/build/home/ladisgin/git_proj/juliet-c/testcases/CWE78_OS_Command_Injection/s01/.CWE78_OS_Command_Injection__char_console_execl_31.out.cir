!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc98 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":119:10)
#loc99 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":119:14)
#loc100 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":119:20)
#loc101 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":119:32)
#true = #cir.bool<true> : !cir.bool
#loc176 = loc(fused[#loc98, #loc99])
#loc177 = loc(fused[#loc100, #loc101])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_console_execl_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc139)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_console_execl_31_bad.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc140)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc141)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc142)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc143)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc144)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc13)
  cir.func private @execl(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc145)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"/bin/sh\00" : !cir.array<!s8i x 8>> : !cir.array<!s8i x 8> {alignment = 1 : i64} loc(#loc16)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc17)
  cir.func no_proto @CWE78_OS_Command_Injection__char_console_execl_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc147)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc140)
    %2 = cir.get_global @__const.CWE78_OS_Command_Injection__char_console_execl_31_bad.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc140)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc140)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc22)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc148)
    cir.scope {
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc150)
      %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc28)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
      %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc28)
      cir.store %7, %4 : !u64i, !cir.ptr<!u64i> loc(#loc150)
      cir.scope {
        %8 = cir.const #cir.int<100> : !s32i loc(#loc32)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc32)
        %10 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc33)
        %11 = cir.binop(sub, %9, %10) : !u64i loc(#loc152)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc34)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc34)
        %14 = cir.cmp(gt, %11, %13) : !u64i, !cir.bool loc(#loc153)
        cir.if %14 {
          cir.scope {
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
            %16 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc39)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !u64i), !cir.ptr<!s8i> loc(#loc40)
            %18 = cir.const #cir.int<100> : !s32i loc(#loc41)
            %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc41)
            %20 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc42)
            %21 = cir.binop(sub, %19, %20) : !u64i loc(#loc156)
            %22 = cir.cast(integral, %21 : !u64i), !s32i loc(#loc156)
            %23 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc143)
            %24 = cir.load %23 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc43)
            %25 = cir.call @fgets(%17, %22, %24) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc44)
            %26 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc45)
            %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc45)
            %28 = cir.cmp(ne, %25, %27) : !cir.ptr<!s8i>, !cir.bool loc(#loc157)
            cir.if %28 {
              %29 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc49)
              %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
              %31 = cir.call @strlen(%30) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc49)
              cir.store %31, %4 : !u64i, !cir.ptr<!u64i> loc(#loc159)
              cir.scope {
                %32 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc55)
                %33 = cir.const #cir.int<0> : !s32i loc(#loc56)
                %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc56)
                %35 = cir.cmp(gt, %32, %34) : !u64i, !cir.bool loc(#loc161)
                %36 = cir.ternary(%35, true {
                  %37 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
                  %38 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc59)
                  %39 = cir.const #cir.int<1> : !s32i loc(#loc60)
                  %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc60)
                  %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc162)
                  %42 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %41 : !u64i), !cir.ptr<!s8i> loc(#loc61)
                  %43 = cir.load %42 : !cir.ptr<!s8i>, !s8i loc(#loc58)
                  %44 = cir.cast(integral, %43 : !s8i), !s32i loc(#loc58)
                  %45 = cir.const #cir.int<10> : !s32i loc(#loc62)
                  %46 = cir.cmp(eq, %44, %45) : !s32i, !cir.bool loc(#loc163)
                  %47 = cir.ternary(%46, true {
                    %48 = cir.const #true loc(#loc57)
                    cir.yield %48 : !cir.bool loc(#loc57)
                  }, false {
                    %48 = cir.const #false loc(#loc57)
                    cir.yield %48 : !cir.bool loc(#loc57)
                  }) : (!cir.bool) -> !cir.bool loc(#loc57)
                  cir.yield %47 : !cir.bool loc(#loc57)
                }, false {
                  %37 = cir.const #false loc(#loc57)
                  cir.yield %37 : !cir.bool loc(#loc57)
                }) : (!cir.bool) -> !cir.bool loc(#loc57)
                cir.if %36 {
                  %37 = cir.const #cir.int<0> : !s32i loc(#loc64)
                  %38 = cir.cast(integral, %37 : !s32i), !s8i loc(#loc64)
                  %39 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
                  %40 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc66)
                  %41 = cir.const #cir.int<1> : !s32i loc(#loc67)
                  %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc67)
                  %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc165)
                  %44 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc68)
                  cir.store %38, %44 : !s8i, !cir.ptr<!s8i> loc(#loc166)
                } loc(#loc164)
              } loc(#loc160)
            } else {
              %29 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc13)
              %30 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc13)
              cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc69)
              %31 = cir.const #cir.int<0> : !s32i loc(#loc70)
              %32 = cir.cast(integral, %31 : !s32i), !s8i loc(#loc70)
              %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
              %34 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc72)
              %35 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc73)
              cir.store %32, %35 : !s8i, !cir.ptr<!s8i> loc(#loc167)
            } loc(#loc158)
          } loc(#loc155)
        } loc(#loc154)
      } loc(#loc151)
    } loc(#loc149)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc169)
      %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc170)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
      cir.store %6, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc169)
      %7 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
      cir.store %7, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc170)
      %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc16)
      %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc16)
      %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc80)
      %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc80)
      %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc17)
      %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc17)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc81)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc82)
      %16 = cir.call @execl(%9, %11, %13, %14, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc83)
    } loc(#loc168)
    cir.return loc(#loc19)
  } loc(#loc146)
  cir.func no_proto @CWE78_OS_Command_Injection__char_console_execl_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc172)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc86)
    cir.return loc(#loc85)
  } loc(#loc171)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc173)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc174)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc93)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc94)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc95)
  cir.func @main(%arg0: !s32i loc(fused[#loc98, #loc99]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc100, #loc101])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc176)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc177)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc97)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc102)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc103)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc104)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc104)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc105)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc92)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    %8 = cir.get_global @CWE78_OS_Command_Injection__char_console_execl_31_good : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call @CWE78_OS_Command_Injection__char_console_execl_31_good() : () -> () loc(#loc107)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc93)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc93)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc109)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc94)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc94)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    %13 = cir.get_global @CWE78_OS_Command_Injection__char_console_execl_31_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call @CWE78_OS_Command_Injection__char_console_execl_31_bad() : () -> () loc(#loc111)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc95)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc95)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc113)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc114)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc180)
    cir.return %17 : !s32i loc(#loc180)
  } loc(#loc175)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc181)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc118)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc183)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc139)
    %2 = cir.get_global @__const.goodG2B.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc139)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc139)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc123)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc184)
    %4 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc125)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
    %6 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc118)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc118)
    %8 = cir.call @strcat(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc125)
    cir.scope {
      %9 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc186)
      %10 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc187)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
      cir.store %11, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc186)
      %12 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
      cir.store %12, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc187)
      %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc133)
      %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc133)
      %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc134)
      %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc134)
      %17 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc135)
      %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc135)
      %19 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc136)
      %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc137)
      %21 = cir.call @execl(%14, %16, %18, %19, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc138)
    } loc(#loc185)
    cir.return loc(#loc120)
  } loc(#loc182)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_console_execl_31.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":92:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":92:28)
#loc3 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":48:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":48:28)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/stdio.h":654:1)
#loc8 = loc("/usr/include/stdio.h":655:59)
#loc9 = loc("/usr/include/stdio.h":149:1)
#loc10 = loc("/usr/include/stdio.h":149:14)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":69:27)
#loc14 = loc("/usr/include/unistd.h":594:1)
#loc15 = loc("/usr/include/unistd.h":595:14)
#loc16 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":80:15)
#loc17 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":80:51)
#loc18 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":45:1)
#loc19 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":82:1)
#loc20 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":47:5)
#loc21 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":47:12)
#loc22 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":49:12)
#loc23 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":49:5)
#loc24 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":50:5)
#loc25 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":74:5)
#loc26 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":52:9)
#loc27 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":52:37)
#loc28 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":52:26)
#loc29 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":52:33)
#loc30 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":54:9)
#loc31 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":73:9)
#loc32 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":54:13)
#loc33 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":54:17)
#loc34 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":54:27)
#loc35 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":55:9)
#loc36 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":57:13)
#loc37 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":72:13)
#loc38 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":57:23)
#loc39 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":57:28)
#loc40 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":57:27)
#loc41 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":57:43)
#loc42 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":57:47)
#loc43 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":57:57)
#loc44 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":57:17)
#loc45 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":57:67)
#loc46 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":58:13)
#loc47 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":66:13)
#loc48 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":68:13)
#loc49 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":61:27)
#loc50 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":61:34)
#loc51 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":61:17)
#loc52 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":61:38)
#loc53 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":62:17)
#loc54 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":65:17)
#loc55 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":62:21)
#loc56 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":62:31)
#loc57 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":62:33)
#loc58 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":62:36)
#loc59 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":62:41)
#loc60 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":62:49)
#loc61 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":62:50)
#loc62 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":62:55)
#loc63 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":63:17)
#loc64 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":64:39)
#loc65 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":64:21)
#loc66 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":64:26)
#loc67 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":64:34)
#loc68 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":64:35)
#loc69 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":69:17)
#loc70 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":71:33)
#loc71 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":71:17)
#loc72 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":71:22)
#loc73 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":71:29)
#loc74 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":75:5)
#loc75 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":81:5)
#loc76 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":76:9)
#loc77 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":76:27)
#loc78 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":77:9)
#loc79 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":77:23)
#loc80 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":80:33)
#loc81 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":80:65)
#loc82 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":80:79)
#loc83 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":80:9)
#loc84 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":105:1)
#loc85 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":108:1)
#loc86 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":107:5)
#loc87 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":107:13)
#loc88 = loc("/usr/include/stdlib.h":575:1)
#loc89 = loc("/usr/include/stdlib.h":575:41)
#loc90 = loc("/usr/include/time.h":76:1)
#loc91 = loc("/usr/include/time.h":76:38)
#loc92 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":124:15)
#loc93 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":126:15)
#loc94 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":129:15)
#loc95 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":131:15)
#loc96 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":119:1)
#loc97 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":134:1)
#loc102 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":120:1)
#loc103 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":122:27)
#loc104 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":122:22)
#loc105 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":122:5)
#loc106 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":124:5)
#loc107 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":125:5)
#loc108 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":125:60)
#loc109 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":126:5)
#loc110 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":129:5)
#loc111 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":130:5)
#loc112 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":130:59)
#loc113 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":131:5)
#loc114 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":133:12)
#loc115 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":133:5)
#loc116 = loc("/usr/include/string.h":149:1)
#loc117 = loc("/usr/include/string.h":150:14)
#loc118 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":95:18)
#loc119 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":89:1)
#loc120 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":103:1)
#loc121 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":91:5)
#loc122 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":91:12)
#loc123 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":93:12)
#loc124 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":93:5)
#loc125 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":95:5)
#loc126 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":95:12)
#loc127 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":96:5)
#loc128 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":102:5)
#loc129 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":97:9)
#loc130 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":97:27)
#loc131 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":98:9)
#loc132 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":98:23)
#loc133 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":101:15)
#loc134 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":101:33)
#loc135 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":101:51)
#loc136 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":101:65)
#loc137 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":101:79)
#loc138 = loc("CWE78_OS_Command_Injection__char_console_execl_31.c":101:9)
#loc139 = loc(fused[#loc1, #loc2])
#loc140 = loc(fused[#loc3, #loc4])
#loc141 = loc(fused[#loc5, #loc6])
#loc142 = loc(fused[#loc7, #loc8])
#loc143 = loc(fused[#loc9, #loc10])
#loc144 = loc(fused[#loc11, #loc12])
#loc145 = loc(fused[#loc14, #loc15])
#loc146 = loc(fused[#loc18, #loc19])
#loc147 = loc(fused[#loc20, #loc21])
#loc148 = loc(fused[#loc23, #loc22])
#loc149 = loc(fused[#loc24, #loc25])
#loc150 = loc(fused[#loc26, #loc27])
#loc151 = loc(fused[#loc30, #loc31])
#loc152 = loc(fused[#loc32, #loc33])
#loc153 = loc(fused[#loc32, #loc34])
#loc154 = loc(fused[#loc35, #loc31])
#loc155 = loc(fused[#loc36, #loc37])
#loc156 = loc(fused[#loc41, #loc42])
#loc157 = loc(fused[#loc44, #loc45])
#loc158 = loc(fused[#loc46, #loc47, #loc48, #loc37])
#loc159 = loc(fused[#loc51, #loc52])
#loc160 = loc(fused[#loc53, #loc54])
#loc161 = loc(fused[#loc55, #loc56])
#loc162 = loc(fused[#loc59, #loc60])
#loc163 = loc(fused[#loc58, #loc62])
#loc164 = loc(fused[#loc63, #loc54])
#loc165 = loc(fused[#loc66, #loc67])
#loc166 = loc(fused[#loc65, #loc64])
#loc167 = loc(fused[#loc71, #loc70])
#loc168 = loc(fused[#loc74, #loc75])
#loc169 = loc(fused[#loc76, #loc77])
#loc170 = loc(fused[#loc78, #loc79])
#loc171 = loc(fused[#loc84, #loc85])
#loc172 = loc(fused[#loc86, #loc87])
#loc173 = loc(fused[#loc88, #loc89])
#loc174 = loc(fused[#loc90, #loc91])
#loc175 = loc(fused[#loc96, #loc97])
#loc178 = loc(fused[#loc107, #loc108])
#loc179 = loc(fused[#loc111, #loc112])
#loc180 = loc(fused[#loc115, #loc114])
#loc181 = loc(fused[#loc116, #loc117])
#loc182 = loc(fused[#loc119, #loc120])
#loc183 = loc(fused[#loc121, #loc122])
#loc184 = loc(fused[#loc124, #loc123])
#loc185 = loc(fused[#loc127, #loc128])
#loc186 = loc(fused[#loc129, #loc130])
#loc187 = loc(fused[#loc131, #loc132])
