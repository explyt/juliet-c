!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":27:21)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":61:21)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__int64_t_rand_postdec_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc69)
  cir.func private @printLongLongLine(!s64i) loc(#loc70)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_postdec_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc72)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc73)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc74)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc13)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc13)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc13)
    %9 = cir.const #cir.int<60> : !s32i loc(#loc13)
    %10 = cir.shift(left, %8 : !u64i, %9 : !s32i) -> !u64i loc(#loc13)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc13)
    %13 = cir.const #cir.int<45> : !s32i loc(#loc13)
    %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc13)
    %15 = cir.binop(xor, %10, %14) : !u64i loc(#loc13)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc13)
    %18 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc13)
    %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc13)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc13)
    %23 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc13)
    %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc13)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc13)
    %28 = cir.binop(xor, %25, %27) : !u64i loc(#loc13)
    cir.br ^bb3(%28 : !u64i) loc(#loc13)
  ^bb2:  // pred: ^bb0
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc13)
    %31 = cir.const #cir.int<60> : !s32i loc(#loc13)
    %32 = cir.shift(left, %30 : !u64i, %31 : !s32i) -> !u64i loc(#loc13)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc13)
    %35 = cir.const #cir.int<45> : !s32i loc(#loc13)
    %36 = cir.shift(left, %34 : !u64i, %35 : !s32i) -> !u64i loc(#loc13)
    %37 = cir.binop(xor, %32, %36) : !u64i loc(#loc13)
    %38 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc13)
    %40 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %41 = cir.shift(left, %39 : !u64i, %40 : !s32i) -> !u64i loc(#loc13)
    %42 = cir.binop(xor, %37, %41) : !u64i loc(#loc13)
    %43 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc13)
    %45 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %46 = cir.shift(left, %44 : !u64i, %45 : !s32i) -> !u64i loc(#loc13)
    %47 = cir.binop(xor, %42, %46) : !u64i loc(#loc13)
    %48 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc13)
    %50 = cir.binop(xor, %47, %49) : !u64i loc(#loc13)
    %51 = cir.unary(minus, %50) : !u64i, !u64i loc(#loc13)
    %52 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %53 = cir.cast(integral, %52 : !s32i), !u64i loc(#loc13)
    %54 = cir.binop(sub, %51, %53) : !u64i loc(#loc13)
    cir.br ^bb3(%54 : !u64i) loc(#loc13)
  ^bb3(%55: !u64i loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":27:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc13)
  ^bb4:  // pred: ^bb3
    %56 = cir.cast(integral, %55 : !u64i), !s64i loc(#loc13)
    cir.store %56, %1 : !s64i, !cir.ptr<!s64i> loc(#loc75)
    cir.br ^bb5 loc(#loc76)
  ^bb5:  // pred: ^bb4
    %57 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc17)
    %58 = cir.unary(dec, %57) : !s64i, !s64i loc(#loc18)
    cir.store %58, %1 : !s64i, !cir.ptr<!s64i> loc(#loc77)
    %59 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc8)
    cir.store %59, %0 : !s64i, !cir.ptr<!s64i> loc(#loc72)
    %60 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc19)
    cir.call @printLongLongLine(%60) : (!s64i) -> () loc(#loc20)
    cir.br ^bb6 loc(#loc16)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc6)
  } loc(#loc71)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_postdec_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc79)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc23)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc80)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc25)
    cir.return loc(#loc22)
  } loc(#loc78)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc82)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc83)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc33)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc84)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc35)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc36)
    %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc36)
    cir.store %5, %1 : !s64i, !cir.ptr<!s64i> loc(#loc85)
    cir.br ^bb1 loc(#loc86)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc40)
    %7 = cir.unary(dec, %6) : !s64i, !s64i loc(#loc41)
    cir.store %7, %1 : !s64i, !cir.ptr<!s64i> loc(#loc87)
    %8 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc30)
    cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc82)
    %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc42)
    cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc43)
    cir.br ^bb2 loc(#loc39)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc28)
  } loc(#loc81)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc88)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc46)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc90)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc91)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc53)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc92)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc55)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc55)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc55)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc55)
    %9 = cir.const #cir.int<60> : !s32i loc(#loc55)
    %10 = cir.shift(left, %8 : !u64i, %9 : !s32i) -> !u64i loc(#loc55)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc55)
    %13 = cir.const #cir.int<45> : !s32i loc(#loc55)
    %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc55)
    %15 = cir.binop(xor, %10, %14) : !u64i loc(#loc55)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc55)
    %18 = cir.const #cir.int<30> : !s32i loc(#loc55)
    %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc55)
    %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc55)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc55)
    %23 = cir.const #cir.int<15> : !s32i loc(#loc55)
    %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc55)
    %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc55)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc55)
    %28 = cir.binop(xor, %25, %27) : !u64i loc(#loc55)
    cir.br ^bb3(%28 : !u64i) loc(#loc55)
  ^bb2:  // pred: ^bb0
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc55)
    %31 = cir.const #cir.int<60> : !s32i loc(#loc55)
    %32 = cir.shift(left, %30 : !u64i, %31 : !s32i) -> !u64i loc(#loc55)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc55)
    %35 = cir.const #cir.int<45> : !s32i loc(#loc55)
    %36 = cir.shift(left, %34 : !u64i, %35 : !s32i) -> !u64i loc(#loc55)
    %37 = cir.binop(xor, %32, %36) : !u64i loc(#loc55)
    %38 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc55)
    %40 = cir.const #cir.int<30> : !s32i loc(#loc55)
    %41 = cir.shift(left, %39 : !u64i, %40 : !s32i) -> !u64i loc(#loc55)
    %42 = cir.binop(xor, %37, %41) : !u64i loc(#loc55)
    %43 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc55)
    %45 = cir.const #cir.int<15> : !s32i loc(#loc55)
    %46 = cir.shift(left, %44 : !u64i, %45 : !s32i) -> !u64i loc(#loc55)
    %47 = cir.binop(xor, %42, %46) : !u64i loc(#loc55)
    %48 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc55)
    %50 = cir.binop(xor, %47, %49) : !u64i loc(#loc55)
    %51 = cir.unary(minus, %50) : !u64i, !u64i loc(#loc55)
    %52 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %53 = cir.cast(integral, %52 : !s32i), !u64i loc(#loc55)
    %54 = cir.binop(sub, %51, %53) : !u64i loc(#loc55)
    cir.br ^bb3(%54 : !u64i) loc(#loc55)
  ^bb3(%55: !u64i loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":61:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc55)
  ^bb4:  // pred: ^bb3
    %56 = cir.cast(integral, %55 : !u64i), !s64i loc(#loc55)
    cir.store %56, %1 : !s64i, !cir.ptr<!s64i> loc(#loc93)
    cir.br ^bb5 loc(#loc94)
  ^bb5:  // pred: ^bb4
    %57 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc59)
    %58 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc60)
    %59 = cir.unary(minus, %58) : !s64i, !s64i loc(#loc60)
    %60 = cir.const #cir.int<1> : !s64i loc(#loc60)
    %61 = cir.binop(sub, %59, %60) nsw : !s64i loc(#loc60)
    %62 = cir.cmp(gt, %57, %61) : !s64i, !cir.bool loc(#loc95)
    cir.brcond %62 ^bb6, ^bb7 loc(#loc96)
  ^bb6:  // pred: ^bb5
    %63 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc64)
    %64 = cir.unary(dec, %63) : !s64i, !s64i loc(#loc65)
    cir.store %64, %1 : !s64i, !cir.ptr<!s64i> loc(#loc97)
    %65 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc50)
    cir.store %65, %0 : !s64i, !cir.ptr<!s64i> loc(#loc90)
    %66 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc66)
    cir.call @printLongLongLine(%66) : (!s64i) -> () loc(#loc67)
    cir.br ^bb8 loc(#loc62)
  ^bb7:  // pred: ^bb5
    %67 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc46)
    %68 = cir.cast(array_to_ptrdecay, %67 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%68) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    cir.br ^bb8 loc(#loc58)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc58)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc48)
  } loc(#loc89)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":34:1)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":31:9)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":31:26)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":24:5)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":24:13)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":25:12)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":25:5)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":27:5)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":28:5)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":33:5)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":30:13)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":30:9)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":32:27)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":32:9)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":75:1)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":79:1)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":77:5)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":77:13)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":78:5)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":78:13)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":41:1)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":53:1)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":50:9)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":50:26)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":43:5)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":43:13)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":44:12)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":44:5)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":46:13)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":46:12)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":46:5)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":47:5)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":52:5)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":49:13)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":49:9)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":51:27)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":51:9)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":71:19)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":56:1)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":73:1)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":66:9)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":66:26)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":58:5)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":58:13)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":59:12)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":59:5)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":61:5)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":63:5)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":72:5)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":63:9)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":63:16)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":64:5)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":68:5)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":70:5)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":65:13)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":65:9)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":67:27)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":67:9)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_01.c":71:9)
#loc69 = loc(fused[#loc1, #loc2])
#loc70 = loc(fused[#loc3, #loc4])
#loc71 = loc(fused[#loc5, #loc6])
#loc72 = loc(fused[#loc7, #loc8])
#loc73 = loc(fused[#loc9, #loc10])
#loc74 = loc(fused[#loc12, #loc11])
#loc75 = loc(fused[#loc14, #loc13])
#loc76 = loc(fused[#loc15, #loc16])
#loc77 = loc(fused[#loc18, #loc17])
#loc78 = loc(fused[#loc21, #loc22])
#loc79 = loc(fused[#loc23, #loc24])
#loc80 = loc(fused[#loc25, #loc26])
#loc81 = loc(fused[#loc27, #loc28])
#loc82 = loc(fused[#loc29, #loc30])
#loc83 = loc(fused[#loc31, #loc32])
#loc84 = loc(fused[#loc34, #loc33])
#loc85 = loc(fused[#loc37, #loc35])
#loc86 = loc(fused[#loc38, #loc39])
#loc87 = loc(fused[#loc41, #loc40])
#loc88 = loc(fused[#loc44, #loc45])
#loc89 = loc(fused[#loc47, #loc48])
#loc90 = loc(fused[#loc49, #loc50])
#loc91 = loc(fused[#loc51, #loc52])
#loc92 = loc(fused[#loc54, #loc53])
#loc93 = loc(fused[#loc56, #loc55])
#loc94 = loc(fused[#loc57, #loc58])
#loc95 = loc(fused[#loc59, #loc60])
#loc96 = loc(fused[#loc61, #loc62, #loc63, #loc58])
#loc97 = loc(fused[#loc65, #loc64])
