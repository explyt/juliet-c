!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLongLongLine(!s64i) loc(#loc94)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_max_square_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc96)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc7)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc97)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc11)
        cir.condition(%3) loc(#loc11)
      } do {
        %2 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc12)
        cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc99)
        cir.break loc(#loc14)
      } loc(#loc98)
    } loc(#loc98)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
        cir.condition(%3) loc(#loc17)
      } do {
        cir.scope {
          %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc102)
          %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc22)
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc21)
          %5 = cir.binop(mul, %3, %4) nsw : !s64i loc(#loc22)
          cir.store %5, %2 : !s64i, !cir.ptr<!s64i> loc(#loc102)
          %6 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc23)
          cir.call @printLongLongLine(%6) : (!s64i) -> () loc(#loc24)
        } loc(#loc101)
        cir.break loc(#loc25)
      } loc(#loc100)
    } loc(#loc100)
    cir.return loc(#loc4)
  } loc(#loc95)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_max_square_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc104)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc105)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc103)
  cir.func private  @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc106)
  cir.func private  @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc34)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc107)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc37)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc109)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc42)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc110)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc46)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc46)
        cir.condition(%3) loc(#loc46)
      } do {
        %2 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc47)
        cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc112)
        cir.break loc(#loc49)
      } loc(#loc111)
    } loc(#loc111)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc52)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc52)
        cir.condition(%3) loc(#loc52)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc55)
          %3 = cir.call @imaxabs(%2) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc56)
          %4 = cir.cast(int_to_float, %3 : !s64i), !cir.long_double<!cir.f80> loc(#loc56)
          %5 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc57)
          %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc58)
          %7 = cir.cast(int_to_float, %6 : !s64i), !cir.long_double<!cir.f80> loc(#loc58)
          %8 = cir.call @sqrtl(%7) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc57)
          %9 = cir.cmp(le, %4, %8) : !cir.long_double<!cir.f80>, !s32i loc(#loc115)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc60)
          cir.if %10 {
            %11 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc117)
            %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc66)
            %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc65)
            %14 = cir.binop(mul, %12, %13) nsw : !s64i loc(#loc66)
            cir.store %14, %11 : !s64i, !cir.ptr<!s64i> loc(#loc117)
            %15 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc67)
            cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc68)
          } else {
            %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc37)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc37)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc69)
          } loc(#loc116)
        } loc(#loc114)
        cir.break loc(#loc70)
      } loc(#loc113)
    } loc(#loc113)
    cir.return loc(#loc39)
  } loc(#loc108)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc119)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc75)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc120)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc79)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc79)
        cir.condition(%3) loc(#loc79)
      } do {
        %2 = cir.const #cir.int<2> : !s32i loc(#loc80)
        %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc80)
        cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc122)
        cir.break loc(#loc82)
      } loc(#loc121)
    } loc(#loc121)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc85)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc85)
        cir.condition(%3) loc(#loc85)
      } do {
        cir.scope {
          %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc125)
          %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc90)
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc89)
          %5 = cir.binop(mul, %3, %4) nsw : !s64i loc(#loc90)
          cir.store %5, %2 : !s64i, !cir.ptr<!s64i> loc(#loc125)
          %6 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc91)
          cir.call @printLongLongLine(%6) : (!s64i) -> () loc(#loc92)
        } loc(#loc124)
        cir.break loc(#loc93)
      } loc(#loc123)
    } loc(#loc123)
    cir.return loc(#loc72)
  } loc(#loc118)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":25:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":44:1)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":27:5)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":27:13)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":28:12)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":28:5)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":29:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":34:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":29:11)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":32:16)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":32:9)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":33:9)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":35:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":43:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":35:11)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":37:9)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":41:9)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":39:13)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":39:37)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":39:30)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":40:31)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":40:13)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":42:9)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":99:1)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":103:1)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":101:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":101:13)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":102:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":102:13)
#loc32 = loc("/usr/include/inttypes.h":351:1)
#loc33 = loc("/usr/include/inttypes.h":351:74)
#loc34 = loc("/usr/include/bits/mathcalls.h":143:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":71:23)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":51:1)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":75:1)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":53:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":53:13)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":54:12)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":54:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":55:5)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":60:5)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":55:11)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":58:16)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":58:9)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":59:9)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":61:5)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":74:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":61:11)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":64:9)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":72:9)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":64:31)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":64:13)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":64:40)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":64:46)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":64:55)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":64:37)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":65:9)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":68:9)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":70:9)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":66:13)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":66:37)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":66:30)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":67:31)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":67:13)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":71:13)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":73:9)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":78:1)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":97:1)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":80:5)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":80:13)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":81:12)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":81:5)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":82:5)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":87:5)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":82:11)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":85:16)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":85:9)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":86:9)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":88:5)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":96:5)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":88:11)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":90:9)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":94:9)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":92:13)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":92:37)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":92:30)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":93:31)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":93:13)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":95:9)
#loc94 = loc(fused[#loc1, #loc2])
#loc95 = loc(fused[#loc3, #loc4])
#loc96 = loc(fused[#loc5, #loc6])
#loc97 = loc(fused[#loc8, #loc7])
#loc98 = loc(fused[#loc9, #loc10])
#loc99 = loc(fused[#loc13, #loc12])
#loc100 = loc(fused[#loc15, #loc16])
#loc101 = loc(fused[#loc18, #loc19])
#loc102 = loc(fused[#loc20, #loc21])
#loc103 = loc(fused[#loc26, #loc27])
#loc104 = loc(fused[#loc28, #loc29])
#loc105 = loc(fused[#loc30, #loc31])
#loc106 = loc(fused[#loc32, #loc33])
#loc107 = loc(fused[#loc35, #loc36])
#loc108 = loc(fused[#loc38, #loc39])
#loc109 = loc(fused[#loc40, #loc41])
#loc110 = loc(fused[#loc43, #loc42])
#loc111 = loc(fused[#loc44, #loc45])
#loc112 = loc(fused[#loc48, #loc47])
#loc113 = loc(fused[#loc50, #loc51])
#loc114 = loc(fused[#loc53, #loc54])
#loc115 = loc(fused[#loc56, #loc59])
#loc116 = loc(fused[#loc61, #loc62, #loc63, #loc54])
#loc117 = loc(fused[#loc64, #loc65])
#loc118 = loc(fused[#loc71, #loc72])
#loc119 = loc(fused[#loc73, #loc74])
#loc120 = loc(fused[#loc76, #loc75])
#loc121 = loc(fused[#loc77, #loc78])
#loc122 = loc(fused[#loc81, #loc80])
#loc123 = loc(fused[#loc83, #loc84])
#loc124 = loc(fused[#loc86, #loc87])
#loc125 = loc(fused[#loc88, #loc89])
