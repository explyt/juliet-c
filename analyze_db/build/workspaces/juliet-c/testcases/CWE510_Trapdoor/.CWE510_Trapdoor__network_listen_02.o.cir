!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__network_listen_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc108)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc109)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc110)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc111)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc112)
  cir.func private @close(!s32i) -> !s32i loc(#loc113)
  cir.func no_proto @CWE510_Trapdoor__network_listen_02_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc17)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc118)
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc119)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc120)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc24)
          %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc24)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc119)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc26)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc26)
          cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc120)
          cir.scope {
            cir.do {
              cir.scope {
                %9 = cir.const #cir.int<2> : !s32i loc(#loc31)
                %10 = cir.const #cir.int<1> : !s32i loc(#loc32)
                %11 = cir.const #cir.int<6> : !s32i loc(#loc33)
                %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc34)
                cir.store %12, %3 : !s32i, !cir.ptr<!s32i> loc(#loc123)
                cir.scope {
                  %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc39)
                  %32 = cir.const #cir.int<1> : !s32i loc(#loc40)
                  %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc40)
                  %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc125)
                  cir.if %34 {
                    cir.break loc(#loc42)
                  } loc(#loc126)
                } loc(#loc124)
                %13 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc127)
                %14 = cir.const #cir.int<0> : !s32i loc(#loc45)
                %15 = cir.const #cir.int<16> : !u64i loc(#loc128)
                cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc129)
                %16 = cir.const #cir.int<2> : !s32i loc(#loc50)
                %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc50)
                %18 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc51)
                cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc130)
                %19 = cir.const #cir.int<0> : !s32i loc(#loc53)
                %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc53)
                %21 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc54)
                %22 = cir.get_member %21[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc55)
                cir.store %20, %22 : !u32i, !cir.ptr<!u32i> loc(#loc131)
                %23 = cir.const #cir.int<30000> : !s32i loc(#loc57)
                %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc57)
                %25 = cir.call @htons(%24) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc58)
                %26 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc59)
                cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc132)
                cir.scope {
                  %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc64)
                  %32 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc134)
                  %33 = cir.const #cir.int<16> : !u64i loc(#loc135)
                  %34 = cir.cast(integral, %33 : !u64i), !u32i loc(#loc135)
                  %35 = cir.call @bind(%31, %32, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc69)
                  %36 = cir.const #cir.int<1> : !s32i loc(#loc70)
                  %37 = cir.unary(minus, %36) nsw : !s32i, !s32i loc(#loc70)
                  %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc136)
                  cir.if %38 {
                    cir.break loc(#loc72)
                  } loc(#loc137)
                } loc(#loc133)
                cir.scope {
                  %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc75)
                  %32 = cir.const #cir.int<5> : !s32i loc(#loc76)
                  %33 = cir.call @listen(%31, %32) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc77)
                  %34 = cir.const #cir.int<1> : !s32i loc(#loc78)
                  %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc78)
                  %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc139)
                  cir.if %36 {
                    cir.break loc(#loc80)
                  } loc(#loc140)
                } loc(#loc138)
                %27 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc81)
                %28 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc82)
                %29 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc83)
                %30 = cir.call @accept(%27, %28, %29) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc84)
                cir.store %30, %4 : !s32i, !cir.ptr<!s32i> loc(#loc141)
                cir.scope {
                  %31 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc89)
                  %32 = cir.const #cir.int<1> : !s32i loc(#loc90)
                  %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc90)
                  %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc143)
                  cir.if %34 {
                    cir.break loc(#loc92)
                  } loc(#loc144)
                } loc(#loc142)
              } loc(#loc122)
              cir.yield loc(#loc28)
            } while {
              %9 = cir.const #cir.int<0> : !s32i loc(#loc93)
              %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc93)
              cir.condition(%10) loc(#loc93)
            } loc(#loc121)
          } loc(#loc121)
          cir.scope {
            %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc96)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc97)
            %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc97)
            %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc146)
            cir.if %12 {
              %13 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc99)
              %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc100)
            } loc(#loc147)
          } loc(#loc145)
          cir.scope {
            %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc103)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc104)
            %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc104)
            %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc149)
            cir.if %12 {
              %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc106)
              %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc107)
            } loc(#loc150)
          } loc(#loc148)
        } loc(#loc117)
      } loc(#loc116)
    } loc(#loc115)
    cir.return loc(#loc14)
  } loc(#loc114)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__network_listen_02.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/unistd.h":358:1)
#loc12 = loc("/usr/include/unistd.h":358:27)
#loc13 = loc("CWE510_Trapdoor__network_listen_02.c":39:1)
#loc14 = loc("CWE510_Trapdoor__network_listen_02.c":102:1)
#loc15 = loc("CWE510_Trapdoor__network_listen_02.c":41:5)
#loc16 = loc("CWE510_Trapdoor__network_listen_02.c":101:5)
#loc17 = loc("CWE510_Trapdoor__network_listen_02.c":41:8)
#loc18 = loc("CWE510_Trapdoor__network_listen_02.c":42:5)
#loc19 = loc("CWE510_Trapdoor__network_listen_02.c":43:9)
#loc20 = loc("CWE510_Trapdoor__network_listen_02.c":100:9)
#loc21 = loc("CWE510_Trapdoor__network_listen_02.c":48:13)
#loc22 = loc("CWE510_Trapdoor__network_listen_02.c":48:32)
#loc23 = loc("CWE510_Trapdoor__network_listen_02.c":49:13)
#loc24 = loc("CWE510_Trapdoor__network_listen_02.c":49:35)
#loc25 = loc("CWE510_Trapdoor__network_listen_02.c":50:13)
#loc26 = loc("CWE510_Trapdoor__network_listen_02.c":50:35)
#loc27 = loc("CWE510_Trapdoor__network_listen_02.c":51:13)
#loc28 = loc("CWE510_Trapdoor__network_listen_02.c":85:21)
#loc29 = loc("CWE510_Trapdoor__network_listen_02.c":52:13)
#loc30 = loc("CWE510_Trapdoor__network_listen_02.c":84:13)
#loc31 = loc("CWE510_Trapdoor__network_listen_02.c":60:39)
#loc32 = loc("CWE510_Trapdoor__network_listen_02.c":60:48)
#loc33 = loc("CWE510_Trapdoor__network_listen_02.c":60:61)
#loc34 = loc("CWE510_Trapdoor__network_listen_02.c":60:32)
#loc35 = loc("CWE510_Trapdoor__network_listen_02.c":60:17)
#loc36 = loc("CWE510_Trapdoor__network_listen_02.c":60:72)
#loc37 = loc("CWE510_Trapdoor__network_listen_02.c":61:17)
#loc38 = loc("CWE510_Trapdoor__network_listen_02.c":64:17)
#loc39 = loc("CWE510_Trapdoor__network_listen_02.c":61:21)
#loc40 = loc("CWE510_Trapdoor__network_listen_02.c":61:37)
#loc41 = loc("CWE510_Trapdoor__network_listen_02.c":62:17)
#loc42 = loc("CWE510_Trapdoor__network_listen_02.c":63:21)
#loc43 = loc("CWE510_Trapdoor__network_listen_02.c":65:24)
#loc44 = loc("CWE510_Trapdoor__network_listen_02.c":65:25)
#loc45 = loc("CWE510_Trapdoor__network_listen_02.c":65:34)
#loc46 = loc("CWE510_Trapdoor__network_listen_02.c":65:37)
#loc47 = loc("CWE510_Trapdoor__network_listen_02.c":65:51)
#loc48 = loc("CWE510_Trapdoor__network_listen_02.c":65:17)
#loc49 = loc("CWE510_Trapdoor__network_listen_02.c":65:52)
#loc50 = loc("CWE510_Trapdoor__network_listen_02.c":66:38)
#loc51 = loc("/usr/include/netinet/in.h":249:5)
#loc52 = loc("CWE510_Trapdoor__network_listen_02.c":66:17)
#loc53 = loc("CWE510_Trapdoor__network_listen_02.c":67:43)
#loc54 = loc("/usr/include/netinet/in.h":251:20)
#loc55 = loc("/usr/include/netinet/in.h":33:15)
#loc56 = loc("CWE510_Trapdoor__network_listen_02.c":67:17)
#loc57 = loc("CWE510_Trapdoor__network_listen_02.c":68:42)
#loc58 = loc("CWE510_Trapdoor__network_listen_02.c":68:36)
#loc59 = loc("/usr/include/netinet/in.h":250:15)
#loc60 = loc("CWE510_Trapdoor__network_listen_02.c":68:17)
#loc61 = loc("CWE510_Trapdoor__network_listen_02.c":68:47)
#loc62 = loc("CWE510_Trapdoor__network_listen_02.c":69:17)
#loc63 = loc("CWE510_Trapdoor__network_listen_02.c":72:17)
#loc64 = loc("CWE510_Trapdoor__network_listen_02.c":69:26)
#loc65 = loc("CWE510_Trapdoor__network_listen_02.c":69:58)
#loc66 = loc("CWE510_Trapdoor__network_listen_02.c":69:59)
#loc67 = loc("CWE510_Trapdoor__network_listen_02.c":69:68)
#loc68 = loc("CWE510_Trapdoor__network_listen_02.c":69:82)
#loc69 = loc("CWE510_Trapdoor__network_listen_02.c":69:21)
#loc70 = loc("CWE510_Trapdoor__network_listen_02.c":69:88)
#loc71 = loc("CWE510_Trapdoor__network_listen_02.c":70:17)
#loc72 = loc("CWE510_Trapdoor__network_listen_02.c":71:21)
#loc73 = loc("CWE510_Trapdoor__network_listen_02.c":73:17)
#loc74 = loc("CWE510_Trapdoor__network_listen_02.c":76:17)
#loc75 = loc("CWE510_Trapdoor__network_listen_02.c":73:28)
#loc76 = loc("CWE510_Trapdoor__network_listen_02.c":73:42)
#loc77 = loc("CWE510_Trapdoor__network_listen_02.c":73:21)
#loc78 = loc("CWE510_Trapdoor__network_listen_02.c":73:48)
#loc79 = loc("CWE510_Trapdoor__network_listen_02.c":74:17)
#loc80 = loc("CWE510_Trapdoor__network_listen_02.c":75:21)
#loc81 = loc("CWE510_Trapdoor__network_listen_02.c":78:39)
#loc82 = loc("CWE510_Trapdoor__network_listen_02.c":78:53)
#loc83 = loc("CWE510_Trapdoor__network_listen_02.c":78:59)
#loc84 = loc("CWE510_Trapdoor__network_listen_02.c":78:32)
#loc85 = loc("CWE510_Trapdoor__network_listen_02.c":78:17)
#loc86 = loc("CWE510_Trapdoor__network_listen_02.c":78:63)
#loc87 = loc("CWE510_Trapdoor__network_listen_02.c":79:17)
#loc88 = loc("CWE510_Trapdoor__network_listen_02.c":82:17)
#loc89 = loc("CWE510_Trapdoor__network_listen_02.c":79:21)
#loc90 = loc("CWE510_Trapdoor__network_listen_02.c":79:37)
#loc91 = loc("CWE510_Trapdoor__network_listen_02.c":80:17)
#loc92 = loc("CWE510_Trapdoor__network_listen_02.c":81:21)
#loc93 = loc("CWE510_Trapdoor__network_listen_02.c":85:20)
#loc94 = loc("CWE510_Trapdoor__network_listen_02.c":86:13)
#loc95 = loc("CWE510_Trapdoor__network_listen_02.c":89:13)
#loc96 = loc("CWE510_Trapdoor__network_listen_02.c":86:17)
#loc97 = loc("CWE510_Trapdoor__network_listen_02.c":86:33)
#loc98 = loc("CWE510_Trapdoor__network_listen_02.c":87:13)
#loc99 = loc("CWE510_Trapdoor__network_listen_02.c":88:30)
#loc100 = loc("CWE510_Trapdoor__network_listen_02.c":88:17)
#loc101 = loc("CWE510_Trapdoor__network_listen_02.c":90:13)
#loc102 = loc("CWE510_Trapdoor__network_listen_02.c":93:13)
#loc103 = loc("CWE510_Trapdoor__network_listen_02.c":90:17)
#loc104 = loc("CWE510_Trapdoor__network_listen_02.c":90:33)
#loc105 = loc("CWE510_Trapdoor__network_listen_02.c":91:13)
#loc106 = loc("CWE510_Trapdoor__network_listen_02.c":92:30)
#loc107 = loc("CWE510_Trapdoor__network_listen_02.c":92:17)
#loc108 = loc(fused[#loc1, #loc2])
#loc109 = loc(fused[#loc3, #loc4])
#loc110 = loc(fused[#loc5, #loc6])
#loc111 = loc(fused[#loc7, #loc8])
#loc112 = loc(fused[#loc9, #loc10])
#loc113 = loc(fused[#loc11, #loc12])
#loc114 = loc(fused[#loc13, #loc14])
#loc115 = loc(fused[#loc15, #loc16])
#loc116 = loc(fused[#loc18, #loc16])
#loc117 = loc(fused[#loc19, #loc20])
#loc118 = loc(fused[#loc21, #loc22])
#loc119 = loc(fused[#loc23, #loc24])
#loc120 = loc(fused[#loc25, #loc26])
#loc121 = loc(fused[#loc27, #loc28])
#loc122 = loc(fused[#loc29, #loc30])
#loc123 = loc(fused[#loc35, #loc36])
#loc124 = loc(fused[#loc37, #loc38])
#loc125 = loc(fused[#loc39, #loc40])
#loc126 = loc(fused[#loc41, #loc38])
#loc127 = loc(fused[#loc43, #loc44])
#loc128 = loc(fused[#loc46, #loc47])
#loc129 = loc(fused[#loc48, #loc49])
#loc130 = loc(fused[#loc52, #loc50])
#loc131 = loc(fused[#loc56, #loc53])
#loc132 = loc(fused[#loc60, #loc61])
#loc133 = loc(fused[#loc62, #loc63])
#loc134 = loc(fused[#loc65, #loc66])
#loc135 = loc(fused[#loc67, #loc68])
#loc136 = loc(fused[#loc69, #loc70])
#loc137 = loc(fused[#loc71, #loc63])
#loc138 = loc(fused[#loc73, #loc74])
#loc139 = loc(fused[#loc77, #loc78])
#loc140 = loc(fused[#loc79, #loc74])
#loc141 = loc(fused[#loc85, #loc86])
#loc142 = loc(fused[#loc87, #loc88])
#loc143 = loc(fused[#loc89, #loc90])
#loc144 = loc(fused[#loc91, #loc88])
#loc145 = loc(fused[#loc94, #loc95])
#loc146 = loc(fused[#loc96, #loc97])
#loc147 = loc(fused[#loc98, #loc95])
#loc148 = loc(fused[#loc101, #loc102])
#loc149 = loc(fused[#loc103, #loc104])
#loc150 = loc(fused[#loc105, #loc102])
