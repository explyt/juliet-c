!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc146)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc147)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc148)
  cir.func private @printLongLongLine(!s64i) loc(#loc149)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_square_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc151)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc152)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc153)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc16)
    cir.store %3, %2 : !s64i, !cir.ptr<!s64i> loc(#loc154)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc20)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc156)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc157)
        cir.condition(%7) loc(#loc24)
      } body {
        cir.scope {
          %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc26)
          %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc147)
          %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc27)
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc148)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc148)
          %10 = cir.call @__isoc99_fscanf(%7, %9, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc26)
        } loc(#loc158)
        cir.yield loc(#loc19)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc29)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc159)
        cir.yield loc(#loc155)
      } loc(#loc155)
    } loc(#loc155)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc32)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc161)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc34)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc35)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc162)
        cir.condition(%7) loc(#loc36)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc165)
            %6 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc42)
            %7 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc41)
            %8 = cir.binop(mul, %6, %7) nsw : !s64i loc(#loc42)
            cir.store %8, %5 : !s64i, !cir.ptr<!s64i> loc(#loc165)
            %9 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc43)
            cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc44)
          } loc(#loc164)
        } loc(#loc163)
        cir.yield loc(#loc31)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc45)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc46)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc166)
        cir.yield loc(#loc160)
      } loc(#loc160)
    } loc(#loc160)
    cir.return loc(#loc10)
  } loc(#loc150)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_square_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc168)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc49)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc169)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc51)
    cir.return loc(#loc48)
  } loc(#loc167)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc170)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc55)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc58)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc173)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc174)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc175)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc66)
    cir.store %3, %2 : !s64i, !cir.ptr<!s64i> loc(#loc176)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc70)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc73)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc179)
        cir.condition(%7) loc(#loc74)
      } body {
        cir.scope {
          %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc76)
          %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc147)
          %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc77)
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc181)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc181)
          %10 = cir.call @__isoc99_fscanf(%7, %9, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc76)
        } loc(#loc180)
        cir.yield loc(#loc69)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc81)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc182)
        cir.yield loc(#loc177)
      } loc(#loc177)
    } loc(#loc177)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc84)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc184)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc86)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc87)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc185)
        cir.condition(%7) loc(#loc88)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc92)
            %6 = cir.call @imaxabs(%5) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr1) loc(#loc93)
            %7 = cir.cast(int_to_float, %6 : !s64i), !cir.long_double<!cir.f80> loc(#loc93)
            %8 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc94)
            %9 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc95)
            %10 = cir.cast(int_to_float, %9 : !s64i), !cir.long_double<!cir.f80> loc(#loc95)
            %11 = cir.call @sqrtl(%10) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc94)
            %12 = cir.cmp(le, %7, %11) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc188)
            cir.if %12 {
              %13 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc190)
              %14 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc102)
              %15 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc101)
              %16 = cir.binop(mul, %14, %15) nsw : !s64i loc(#loc102)
              cir.store %16, %13 : !s64i, !cir.ptr<!s64i> loc(#loc190)
              %17 = cir.load %13 : !cir.ptr<!s64i>, !s64i loc(#loc103)
              cir.call @printLongLongLine(%17) : (!s64i) -> () loc(#loc104)
            } else {
              %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc58)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc58)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc105)
            } loc(#loc189)
          } loc(#loc187)
        } loc(#loc186)
        cir.yield loc(#loc83)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc106)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc107)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc191)
        cir.yield loc(#loc183)
      } loc(#loc183)
    } loc(#loc183)
    cir.return loc(#loc60)
  } loc(#loc172)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc193)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc194)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc195)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc115)
    cir.store %3, %2 : !s64i, !cir.ptr<!s64i> loc(#loc196)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc119)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc198)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc122)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc199)
        cir.condition(%7) loc(#loc123)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2> : !s32i loc(#loc125)
          %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc125)
          cir.store %6, %2 : !s64i, !cir.ptr<!s64i> loc(#loc201)
        } loc(#loc200)
        cir.yield loc(#loc118)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc127)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc128)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
        cir.yield loc(#loc197)
      } loc(#loc197)
    } loc(#loc197)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc131)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc204)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc133)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc134)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc205)
        cir.condition(%7) loc(#loc135)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc208)
            %6 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc141)
            %7 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc140)
            %8 = cir.binop(mul, %6, %7) nsw : !s64i loc(#loc141)
            cir.store %8, %5 : !s64i, !cir.ptr<!s64i> loc(#loc208)
            %9 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc142)
            cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc143)
          } loc(#loc207)
        } loc(#loc206)
        cir.yield loc(#loc130)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc144)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc145)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc209)
        cir.yield loc(#loc203)
      } loc(#loc203)
    } loc(#loc203)
    cir.return loc(#loc109)
  } loc(#loc192)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":33:24)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":33:28)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":25:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":43:1)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":27:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":27:9)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":27:11)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":28:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":28:13)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":29:12)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":29:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":30:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":34:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":30:13)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":30:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":30:16)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":30:20)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":30:18)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":31:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":33:9)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":33:17)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":30:24)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":30:23)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":35:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":42:5)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":35:13)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":35:9)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":35:16)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":35:20)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":35:18)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":36:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":37:9)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":41:9)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":39:13)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":39:37)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":39:30)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":40:31)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":40:13)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":35:24)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":35:23)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":96:1)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":100:1)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":98:5)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":98:13)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":99:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":99:13)
#loc53 = loc("/usr/include/inttypes.h":351:1)
#loc54 = loc("/usr/include/inttypes.h":351:74)
#loc55 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":70:23)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":50:1)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":73:1)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":52:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":52:9)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":52:11)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":53:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":53:13)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":54:12)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":54:5)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":55:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":59:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":55:13)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":55:9)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":55:16)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":55:20)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":55:18)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":56:5)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":58:9)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":58:17)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":58:24)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":58:28)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":55:24)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":55:23)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":60:5)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":72:5)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":60:13)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":60:9)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":60:16)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":60:20)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":60:18)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":61:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":63:9)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":71:9)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":63:31)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":63:13)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":63:40)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":63:46)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":63:55)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":64:9)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":67:9)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":69:9)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":65:13)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":65:37)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":65:30)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":66:31)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":66:13)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":70:13)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":60:24)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":60:23)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":76:1)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":94:1)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":78:5)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":78:9)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":78:11)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":79:5)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":79:13)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":80:12)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":80:5)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":81:5)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":85:5)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":81:13)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":81:9)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":81:16)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":81:20)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":81:18)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":82:5)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":84:16)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":84:9)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":81:24)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":81:23)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":86:5)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":93:5)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":86:13)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":86:9)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":86:16)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":86:20)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":86:18)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":87:5)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":88:9)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":92:9)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":90:13)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":90:37)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":90:30)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":91:31)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":91:13)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":86:24)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_17.c":86:23)
#loc146 = loc(fused[#loc1, #loc2])
#loc147 = loc(fused[#loc3, #loc4])
#loc148 = loc(fused[#loc5, #loc6])
#loc149 = loc(fused[#loc7, #loc8])
#loc150 = loc(fused[#loc9, #loc10])
#loc151 = loc(fused[#loc11, #loc12])
#loc152 = loc(fused[#loc11, #loc13])
#loc153 = loc(fused[#loc14, #loc15])
#loc154 = loc(fused[#loc17, #loc16])
#loc155 = loc(fused[#loc18, #loc19])
#loc156 = loc(fused[#loc21, #loc20])
#loc157 = loc(fused[#loc22, #loc23])
#loc158 = loc(fused[#loc25, #loc19])
#loc159 = loc(fused[#loc29, #loc28])
#loc160 = loc(fused[#loc30, #loc31])
#loc161 = loc(fused[#loc33, #loc32])
#loc162 = loc(fused[#loc34, #loc35])
#loc163 = loc(fused[#loc37, #loc31])
#loc164 = loc(fused[#loc38, #loc39])
#loc165 = loc(fused[#loc40, #loc41])
#loc166 = loc(fused[#loc46, #loc45])
#loc167 = loc(fused[#loc47, #loc48])
#loc168 = loc(fused[#loc49, #loc50])
#loc169 = loc(fused[#loc51, #loc52])
#loc170 = loc(fused[#loc53, #loc54])
#loc171 = loc(fused[#loc56, #loc57])
#loc172 = loc(fused[#loc59, #loc60])
#loc173 = loc(fused[#loc61, #loc62])
#loc174 = loc(fused[#loc61, #loc63])
#loc175 = loc(fused[#loc64, #loc65])
#loc176 = loc(fused[#loc67, #loc66])
#loc177 = loc(fused[#loc68, #loc69])
#loc178 = loc(fused[#loc71, #loc70])
#loc179 = loc(fused[#loc72, #loc73])
#loc180 = loc(fused[#loc75, #loc69])
#loc181 = loc(fused[#loc78, #loc79])
#loc182 = loc(fused[#loc81, #loc80])
#loc183 = loc(fused[#loc82, #loc83])
#loc184 = loc(fused[#loc85, #loc84])
#loc185 = loc(fused[#loc86, #loc87])
#loc186 = loc(fused[#loc89, #loc83])
#loc187 = loc(fused[#loc90, #loc91])
#loc188 = loc(fused[#loc93, #loc96])
#loc189 = loc(fused[#loc97, #loc98, #loc99, #loc91])
#loc190 = loc(fused[#loc100, #loc101])
#loc191 = loc(fused[#loc107, #loc106])
#loc192 = loc(fused[#loc108, #loc109])
#loc193 = loc(fused[#loc110, #loc111])
#loc194 = loc(fused[#loc110, #loc112])
#loc195 = loc(fused[#loc113, #loc114])
#loc196 = loc(fused[#loc116, #loc115])
#loc197 = loc(fused[#loc117, #loc118])
#loc198 = loc(fused[#loc120, #loc119])
#loc199 = loc(fused[#loc121, #loc122])
#loc200 = loc(fused[#loc124, #loc118])
#loc201 = loc(fused[#loc126, #loc125])
#loc202 = loc(fused[#loc128, #loc127])
#loc203 = loc(fused[#loc129, #loc130])
#loc204 = loc(fused[#loc132, #loc131])
#loc205 = loc(fused[#loc133, #loc134])
#loc206 = loc(fused[#loc136, #loc130])
#loc207 = loc(fused[#loc137, #loc138])
#loc208 = loc(fused[#loc139, #loc140])
#loc209 = loc(fused[#loc145, #loc144])
