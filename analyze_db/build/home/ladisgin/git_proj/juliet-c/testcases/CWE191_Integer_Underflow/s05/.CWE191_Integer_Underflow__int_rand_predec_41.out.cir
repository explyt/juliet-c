!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":22:21)
#loc8 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":22:25)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":108:10)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":108:14)
#loc48 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":108:20)
#loc49 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":108:32)
#loc67 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":68:25)
#loc68 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":68:29)
#loc96 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":47:25)
#loc97 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":47:29)
#loc121 = loc(fused[#loc7, #loc8])
#loc136 = loc(fused[#loc46, #loc47])
#loc137 = loc(fused[#loc48, #loc49])
#loc142 = loc(fused[#loc67, #loc68])
#loc153 = loc(fused[#loc96, #loc97])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int_rand_predec_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc118)
  cir.func private @printIntLine(!s32i) loc(#loc119)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc121)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc9)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc123)
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %3 = cir.unary(dec, %2) : !s32i, !s32i loc(#loc14)
      cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc124)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc13)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc123)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc16)
      cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc17)
    } loc(#loc122)
    cir.return loc(#loc6)
  } loc(#loc120)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_predec_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc126)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc22)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc24)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc24)
    %6 = cir.ternary(%5, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc24)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc24)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc24)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc24)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc24)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc24)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc24)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc24)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc24)
      cir.yield %20 : !u32i loc(#loc24)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc24)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc24)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc24)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc24)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc24)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc24)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc24)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc24)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc24)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc24)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc24)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc24)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc24)
      cir.yield %24 : !u32i loc(#loc24)
    }) : (!cir.bool) -> !u32i loc(#loc24)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc24)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc128)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    cir.call @badSink(%8) : (!s32i) -> () loc(#loc27)
    cir.return loc(#loc19)
  } loc(#loc125)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_predec_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc130)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc131)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc129)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc132)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc133)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc134)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc43)
  cir.func @main(%arg0: !s32i loc(fused[#loc46, #loc47]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc48, #loc49])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc136)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc137)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc45)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc50)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc50)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc51)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc52)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc52)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc53)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc40)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %8 = cir.get_global @CWE191_Integer_Underflow__int_rand_predec_41_good : !cir.ptr<!cir.func<!void ()>> loc(#loc138)
    cir.call @CWE191_Integer_Underflow__int_rand_predec_41_good() : () -> () loc(#loc55)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc41)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc42)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %13 = cir.get_global @CWE191_Integer_Underflow__int_rand_predec_41_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc139)
    cir.call @CWE191_Integer_Underflow__int_rand_predec_41_bad() : () -> () loc(#loc59)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc43)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc62)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc140)
    cir.return %17 : !s32i loc(#loc140)
  } loc(#loc135)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc64)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc67, #loc68])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc142)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
      %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc73)
      %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc73)
      %4 = cir.const #cir.int<1> : !s32i loc(#loc73)
      %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc73)
      %6 = cir.cmp(gt, %1, %5) : !s32i, !cir.bool loc(#loc144)
      cir.if %6 {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc146)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
        %9 = cir.unary(dec, %8) : !s32i, !s32i loc(#loc79)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
        %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc146)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc81)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc82)
      } else {
        %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc64)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc64)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc83)
      } loc(#loc145)
    } loc(#loc143)
    cir.return loc(#loc66)
  } loc(#loc141)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc149)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc88)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc90)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc90)
    %6 = cir.ternary(%5, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc90)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc90)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc90)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc90)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc90)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc90)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc90)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc90)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc90)
      cir.yield %20 : !u32i loc(#loc90)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc90)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc90)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc90)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc90)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc90)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc90)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc90)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc90)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc90)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc90)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc90)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc90)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc90)
      cir.yield %24 : !u32i loc(#loc90)
    }) : (!cir.bool) -> !u32i loc(#loc90)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc90)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    cir.call @goodB2GSink(%8) : (!s32i) -> () loc(#loc93)
    cir.return loc(#loc85)
  } loc(#loc148)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc96, #loc97])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc153)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc155)
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
      %3 = cir.unary(dec, %2) : !s32i, !s32i loc(#loc103)
      cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc156)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc155)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc105)
      cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc106)
    } loc(#loc154)
    cir.return loc(#loc95)
  } loc(#loc152)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc111)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc113)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc114)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc117)
    cir.return loc(#loc108)
  } loc(#loc157)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int_rand_predec_41.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":30:1)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":23:1)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":24:5)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":29:5)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":27:9)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":27:22)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":26:9)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":26:11)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":28:22)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":28:9)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":32:1)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":40:1)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":34:5)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":34:9)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":36:12)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":36:5)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":38:12)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":38:5)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":39:13)
#loc27 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":39:5)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":93:1)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":97:1)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":95:5)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":95:13)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":96:5)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":96:13)
#loc34 = loc("/usr/include/stdlib.h":575:1)
#loc35 = loc("/usr/include/stdlib.h":575:41)
#loc36 = loc("/usr/include/time.h":76:1)
#loc37 = loc("/usr/include/time.h":76:38)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":113:15)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":115:15)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":118:15)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":120:15)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":108:1)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":123:1)
#loc50 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":109:1)
#loc51 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":111:27)
#loc52 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":111:22)
#loc53 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":111:5)
#loc54 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":113:5)
#loc55 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":114:5)
#loc56 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":114:55)
#loc57 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":115:5)
#loc58 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":118:5)
#loc59 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":119:5)
#loc60 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":119:54)
#loc61 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":120:5)
#loc62 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":122:12)
#loc63 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":122:5)
#loc64 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":79:19)
#loc65 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":68:1)
#loc66 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":81:1)
#loc69 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":69:1)
#loc70 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":71:5)
#loc71 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":80:5)
#loc72 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":71:9)
#loc73 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":71:16)
#loc74 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":72:5)
#loc75 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":76:5)
#loc76 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":78:5)
#loc77 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":74:9)
#loc78 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":74:22)
#loc79 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":73:9)
#loc80 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":73:11)
#loc81 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":75:22)
#loc82 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":75:9)
#loc83 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":79:9)
#loc84 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":83:1)
#loc85 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":91:1)
#loc86 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":85:5)
#loc87 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":85:9)
#loc88 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":87:12)
#loc89 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":87:5)
#loc90 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":89:12)
#loc91 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":89:5)
#loc92 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":90:17)
#loc93 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":90:5)
#loc94 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":47:1)
#loc95 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":55:1)
#loc98 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":48:1)
#loc99 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":49:5)
#loc100 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":54:5)
#loc101 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":52:9)
#loc102 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":52:22)
#loc103 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":51:9)
#loc104 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":51:11)
#loc105 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":53:22)
#loc106 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":53:9)
#loc107 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":57:1)
#loc108 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":65:1)
#loc109 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":59:5)
#loc110 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":59:9)
#loc111 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":61:12)
#loc112 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":61:5)
#loc113 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":63:13)
#loc114 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":63:12)
#loc115 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":63:5)
#loc116 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":64:17)
#loc117 = loc("CWE191_Integer_Underflow__int_rand_predec_41.c":64:5)
#loc118 = loc(fused[#loc1, #loc2])
#loc119 = loc(fused[#loc3, #loc4])
#loc120 = loc(fused[#loc5, #loc6])
#loc122 = loc(fused[#loc10, #loc11])
#loc123 = loc(fused[#loc12, #loc13])
#loc124 = loc(fused[#loc14, #loc15])
#loc125 = loc(fused[#loc18, #loc19])
#loc126 = loc(fused[#loc20, #loc21])
#loc127 = loc(fused[#loc23, #loc22])
#loc128 = loc(fused[#loc25, #loc24])
#loc129 = loc(fused[#loc28, #loc29])
#loc130 = loc(fused[#loc30, #loc31])
#loc131 = loc(fused[#loc32, #loc33])
#loc132 = loc(fused[#loc34, #loc35])
#loc133 = loc(fused[#loc36, #loc37])
#loc134 = loc(fused[#loc38, #loc39])
#loc135 = loc(fused[#loc44, #loc45])
#loc138 = loc(fused[#loc55, #loc56])
#loc139 = loc(fused[#loc59, #loc60])
#loc140 = loc(fused[#loc63, #loc62])
#loc141 = loc(fused[#loc65, #loc66])
#loc143 = loc(fused[#loc70, #loc71])
#loc144 = loc(fused[#loc72, #loc73])
#loc145 = loc(fused[#loc74, #loc75, #loc76, #loc71])
#loc146 = loc(fused[#loc77, #loc78])
#loc147 = loc(fused[#loc79, #loc80])
#loc148 = loc(fused[#loc84, #loc85])
#loc149 = loc(fused[#loc86, #loc87])
#loc150 = loc(fused[#loc89, #loc88])
#loc151 = loc(fused[#loc91, #loc90])
#loc152 = loc(fused[#loc94, #loc95])
#loc154 = loc(fused[#loc99, #loc100])
#loc155 = loc(fused[#loc101, #loc102])
#loc156 = loc(fused[#loc103, #loc104])
#loc157 = loc(fused[#loc107, #loc108])
#loc158 = loc(fused[#loc109, #loc110])
#loc159 = loc(fused[#loc112, #loc111])
#loc160 = loc(fused[#loc115, #loc113])
