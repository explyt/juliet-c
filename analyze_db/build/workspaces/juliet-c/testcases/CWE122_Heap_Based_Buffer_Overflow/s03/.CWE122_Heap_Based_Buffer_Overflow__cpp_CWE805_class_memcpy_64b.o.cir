!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":24:14)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":24:21)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":53:18)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":53:25)
!ty_TwoIntsClass = !cir.record<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc101 = loc(fused[#loc5, #loc6])
#loc119 = loc(fused[#loc54, #loc55])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s03/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc99)
  cir.func @_ZN61CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_647badSinkEPv(%arg0: !cir.ptr<!void> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!ty_TwoIntsClass x 100>, !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>, ["source"] {alignment = 16 : i64} loc(#loc102)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc103)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc101)
    %3 = cir.alloca !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc104)
    %4 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data", init] {alignment = 8 : i64} loc(#loc105)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc15)
    %5 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc12)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc12)
    cir.store %6, %3 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>> loc(#loc104)
    %7 = cir.load deref %3 : !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc16)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc17)
    cir.store %8, %4 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc105)
    cir.br ^bb1 loc(#loc106)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc107)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc108)
  ^bb3:  // pred: ^bb2
    %9 = cir.const #cir.int<0> : !s32i loc(#loc24)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc24)
    cir.store %10, %1 : !u64i, !cir.ptr<!u64i> loc(#loc109)
    cir.br ^bb4 loc(#loc108)
  ^bb4:  // 2 preds: ^bb3, ^bb8
    %11 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc26)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc27)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc27)
    %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc110)
    cir.brcond %14 ^bb5, ^bb9 loc(#loc110)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc111)
  ^bb6:  // pred: ^bb5
    %15 = cir.const #cir.int<0> : !s32i loc(#loc29)
    %16 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc30)
    %17 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc31)
    %18 = cir.ptr_stride(%17 : !cir.ptr<!ty_TwoIntsClass>, %16 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc31)
    %19 = cir.get_member %18[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc32)
    cir.store %15, %19 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc33)
    %21 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc34)
    %22 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc35)
    %23 = cir.ptr_stride(%22 : !cir.ptr<!ty_TwoIntsClass>, %21 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc35)
    %24 = cir.get_member %23[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc36)
    cir.store %20, %24 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    cir.br ^bb7 loc(#loc23)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc23)
  ^bb8:  // pred: ^bb7
    %25 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc37)
    %26 = cir.unary(inc, %25) : !u64i, !u64i loc(#loc38)
    cir.store %26, %1 : !u64i, !cir.ptr<!u64i> loc(#loc114)
    cir.br ^bb4 loc(#loc108)
  ^bb9:  // pred: ^bb4
    cir.br ^bb10 loc(#loc23)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc21)
  ^bb11:  // pred: ^bb10
    %27 = cir.load %4 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc39)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc39)
    %29 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc40)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc40)
    %31 = cir.const #cir.int<100> : !s32i loc(#loc41)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc41)
    %33 = cir.const #cir.int<8> : !u64i loc(#loc115)
    %34 = cir.binop(mul, %32, %33) : !u64i loc(#loc116)
    cir.libc.memcpy %34 bytes from %30 to %28 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc117)
    %35 = cir.load %4 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc46)
    %36 = cir.const #cir.int<0> : !s32i loc(#loc47)
    %37 = cir.ptr_stride(%35 : !cir.ptr<!ty_TwoIntsClass>, %36 : !s32i), !cir.ptr<!ty_TwoIntsClass> loc(#loc48)
    %38 = cir.get_member %37[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc32)
    %39 = cir.load %38 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    cir.call @printIntLine(%39) : (!s32i) -> () loc(#loc50)
    %40 = cir.load %4 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc51)
    cir.delete.array %40 : <!ty_TwoIntsClass> loc(#loc51)
    cir.br ^bb12 loc(#loc19)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc4)
  } loc(#loc100)
  cir.func @_ZN61CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_6411goodG2BSinkEPv(%arg0: !cir.ptr<!void> loc(fused[#loc54, #loc55])) extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!ty_TwoIntsClass x 100>, !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>, ["source"] {alignment = 16 : i64} loc(#loc120)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc121)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc119)
    %3 = cir.alloca !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc122)
    %4 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data", init] {alignment = 8 : i64} loc(#loc123)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc64)
    %5 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc61)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc61)
    cir.store %6, %3 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>> loc(#loc122)
    %7 = cir.load deref %3 : !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc65)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc66)
    cir.store %8, %4 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc123)
    cir.br ^bb1 loc(#loc124)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc125)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc126)
  ^bb3:  // pred: ^bb2
    %9 = cir.const #cir.int<0> : !s32i loc(#loc73)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc73)
    cir.store %10, %1 : !u64i, !cir.ptr<!u64i> loc(#loc127)
    cir.br ^bb4 loc(#loc126)
  ^bb4:  // 2 preds: ^bb3, ^bb8
    %11 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc75)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc76)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc76)
    %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc128)
    cir.brcond %14 ^bb5, ^bb9 loc(#loc128)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc129)
  ^bb6:  // pred: ^bb5
    %15 = cir.const #cir.int<0> : !s32i loc(#loc78)
    %16 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc79)
    %17 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc80)
    %18 = cir.ptr_stride(%17 : !cir.ptr<!ty_TwoIntsClass>, %16 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc80)
    %19 = cir.get_member %18[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc32)
    cir.store %15, %19 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc81)
    %21 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc82)
    %22 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc83)
    %23 = cir.ptr_stride(%22 : !cir.ptr<!ty_TwoIntsClass>, %21 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc83)
    %24 = cir.get_member %23[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc36)
    cir.store %20, %24 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    cir.br ^bb7 loc(#loc72)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc72)
  ^bb8:  // pred: ^bb7
    %25 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc84)
    %26 = cir.unary(inc, %25) : !u64i, !u64i loc(#loc85)
    cir.store %26, %1 : !u64i, !cir.ptr<!u64i> loc(#loc132)
    cir.br ^bb4 loc(#loc126)
  ^bb9:  // pred: ^bb4
    cir.br ^bb10 loc(#loc72)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc70)
  ^bb11:  // pred: ^bb10
    %27 = cir.load %4 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc86)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc86)
    %29 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc87)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc87)
    %31 = cir.const #cir.int<100> : !s32i loc(#loc88)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc88)
    %33 = cir.const #cir.int<8> : !u64i loc(#loc133)
    %34 = cir.binop(mul, %32, %33) : !u64i loc(#loc134)
    cir.libc.memcpy %34 bytes from %30 to %28 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc135)
    %35 = cir.load %4 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc93)
    %36 = cir.const #cir.int<0> : !s32i loc(#loc94)
    %37 = cir.ptr_stride(%35 : !cir.ptr<!ty_TwoIntsClass>, %36 : !s32i), !cir.ptr<!ty_TwoIntsClass> loc(#loc95)
    %38 = cir.get_member %37[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc32)
    %39 = cir.load %38 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    cir.call @printIntLine(%39) : (!s32i) -> () loc(#loc97)
    %40 = cir.load %4 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc98)
    cir.delete.array %40 : <!ty_TwoIntsClass> loc(#loc98)
    cir.br ^bb12 loc(#loc68)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc53)
  } loc(#loc118)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s03/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":24:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":46:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":31:9)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":31:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":33:13)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":33:20)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":27:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":27:50)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":29:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":29:36)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":25:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":29:29)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":29:28)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":30:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":45:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":32:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":40:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":35:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":39:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":35:22)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":35:18)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":35:25)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":35:29)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":36:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":37:36)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":37:24)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":37:17)
#loc32 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":38:36)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":38:24)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":38:17)
#loc36 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":35:35)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":35:34)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":42:16)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":42:22)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":42:30)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":42:34)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":42:53)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":42:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":42:54)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":43:22)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":43:27)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":43:28)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":43:30)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":43:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":44:19)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":53:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":75:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":60:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":60:32)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":62:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":62:20)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":56:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":56:50)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":58:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":58:36)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":54:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":58:29)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":58:28)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":59:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":74:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":61:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":69:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":64:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":68:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":64:22)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":64:18)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":64:25)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":64:29)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":65:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":66:36)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":66:24)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":66:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":67:36)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":67:24)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":67:17)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":64:35)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":64:34)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":71:16)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":71:22)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":71:30)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":71:34)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":71:53)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":71:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":71:54)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":72:22)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":72:27)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":72:28)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":72:30)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":72:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":73:19)
#loc99 = loc(fused[#loc1, #loc2])
#loc100 = loc(fused[#loc3, #loc4])
#loc102 = loc(fused[#loc7, #loc8])
#loc103 = loc(fused[#loc9, #loc10])
#loc104 = loc(fused[#loc11, #loc12])
#loc105 = loc(fused[#loc13, #loc14])
#loc106 = loc(fused[#loc18, #loc19])
#loc107 = loc(fused[#loc20, #loc21])
#loc108 = loc(fused[#loc22, #loc23])
#loc109 = loc(fused[#loc25, #loc24])
#loc110 = loc(fused[#loc26, #loc27])
#loc111 = loc(fused[#loc28, #loc23])
#loc112 = loc(fused[#loc31, #loc29])
#loc113 = loc(fused[#loc35, #loc33])
#loc114 = loc(fused[#loc38, #loc37])
#loc115 = loc(fused[#loc42, #loc43])
#loc116 = loc(fused[#loc41, #loc43])
#loc117 = loc(fused[#loc44, #loc45])
#loc118 = loc(fused[#loc52, #loc53])
#loc120 = loc(fused[#loc56, #loc57])
#loc121 = loc(fused[#loc58, #loc59])
#loc122 = loc(fused[#loc60, #loc61])
#loc123 = loc(fused[#loc62, #loc63])
#loc124 = loc(fused[#loc67, #loc68])
#loc125 = loc(fused[#loc69, #loc70])
#loc126 = loc(fused[#loc71, #loc72])
#loc127 = loc(fused[#loc74, #loc73])
#loc128 = loc(fused[#loc75, #loc76])
#loc129 = loc(fused[#loc77, #loc72])
#loc130 = loc(fused[#loc80, #loc78])
#loc131 = loc(fused[#loc83, #loc81])
#loc132 = loc(fused[#loc85, #loc84])
#loc133 = loc(fused[#loc89, #loc90])
#loc134 = loc(fused[#loc88, #loc90])
#loc135 = loc(fused[#loc91, #loc92])
