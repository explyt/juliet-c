!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":106:10)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":106:14)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":106:20)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":106:32)
#loc106 = loc(fused[#loc39, #loc40])
#loc107 = loc(fused[#loc41, #loc42])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @puts(!cir.ptr<!s8i>) -> !s32i loc(#loc93)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc3)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc94)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"puts failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc6)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15_bad() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc96)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<6> : !s32i loc(#loc12)
    cir.br ^bb2 loc(#loc10)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %0 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc10)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc13)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc97)
  ^bb5:  // pred: ^bb4
    %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc3)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc3)
    %3 = cir.call @puts(%2) : (!cir.ptr<!s8i>) -> !s32i loc(#loc16)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc17)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc98)
    cir.brcond %5 ^bb6, ^bb7 loc(#loc99)
  ^bb6:  // pred: ^bb5
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc6)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc6)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc19)
    cir.br ^bb7 loc(#loc15)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc15)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10 loc(#loc20)
  ^bb9:  // pred: ^bb2
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc21)
    cir.br ^bb10 loc(#loc22)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc11)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc9)
  } loc(#loc95)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc101)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc25)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc102)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    cir.return loc(#loc24)
  } loc(#loc100)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc103)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc33)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc34)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc35)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc36)
  cir.func @main(%arg0: !s32i loc(fused[#loc39, #loc40]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc41, #loc42])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc106)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc107)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc38)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc43)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc43)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc44)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc45)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc45)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc46)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc33)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc47)
    %8 = cir.get_global @CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc108)
    cir.call @CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15_good() : () -> () loc(#loc48)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc34)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc35)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %13 = cir.get_global @CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc109)
    cir.call @CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15_bad() : () -> () loc(#loc52)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc36)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc55)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    cir.return %17 : !s32i loc(#loc110)
  } loc(#loc105)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc112)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<5> : !s32i loc(#loc61)
    cir.br ^bb2 loc(#loc59)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %0 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc59)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc62)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %1 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc63)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    cir.br ^bb10 loc(#loc65)
  ^bb5:  // pred: ^bb2
    cir.br ^bb6 loc(#loc113)
  ^bb6:  // pred: ^bb5
    %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc68)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc68)
    %5 = cir.call @puts(%4) : (!cir.ptr<!s8i>) -> !s32i loc(#loc69)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc70)
    %8 = cir.cmp(eq, %5, %7) : !s32i, !cir.bool loc(#loc114)
    cir.brcond %8 ^bb7, ^bb8 loc(#loc115)
  ^bb7:  // pred: ^bb6
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc72)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    cir.br ^bb8 loc(#loc67)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc67)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc74)
  ^bb10:  // 2 preds: ^bb4, ^bb9
    cir.br ^bb11 loc(#loc60)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc58)
  } loc(#loc111)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc117)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<6> : !s32i loc(#loc79)
    cir.br ^bb2 loc(#loc77)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %0 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc77)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc80)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc118)
  ^bb5:  // pred: ^bb4
    %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc83)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc83)
    %3 = cir.call @puts(%2) : (!cir.ptr<!s8i>) -> !s32i loc(#loc84)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc85)
    %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc85)
    %6 = cir.cmp(eq, %3, %5) : !s32i, !cir.bool loc(#loc119)
    cir.brcond %6 ^bb6, ^bb7 loc(#loc120)
  ^bb6:  // pred: ^bb5
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc87)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc87)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    cir.br ^bb7 loc(#loc82)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc82)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10 loc(#loc89)
  ^bb9:  // pred: ^bb2
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc90)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc90)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    cir.br ^bb10 loc(#loc92)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc78)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc76)
  } loc(#loc116)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":714:1)
#loc2 = loc("/usr/include/stdio.h":714:33)
#loc3 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":37:18)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":39:23)
#loc7 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":44:19)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":30:1)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":47:1)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":32:5)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":46:5)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":32:12)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":34:5)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":37:9)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":40:9)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":37:13)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":37:31)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":38:9)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":39:13)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":41:9)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":44:9)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":45:9)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":91:1)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":95:1)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":93:5)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":93:11)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":94:5)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":94:11)
#loc29 = loc("/usr/include/stdlib.h":575:1)
#loc30 = loc("/usr/include/stdlib.h":575:41)
#loc31 = loc("/usr/include/time.h":76:1)
#loc32 = loc("/usr/include/time.h":76:38)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":111:15)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":113:15)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":116:15)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":118:15)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":106:1)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":121:1)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":107:1)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":109:27)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":109:22)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":109:5)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":111:5)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":112:5)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":112:72)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":113:5)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":116:5)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":117:5)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":117:71)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":118:5)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":120:12)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":120:5)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":54:1)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":70:1)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":56:5)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":69:5)
#loc61 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":56:12)
#loc62 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":58:5)
#loc63 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":60:19)
#loc64 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":60:9)
#loc65 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":61:9)
#loc66 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":64:9)
#loc67 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":67:9)
#loc68 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":64:18)
#loc69 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":64:13)
#loc70 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":64:31)
#loc71 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":65:9)
#loc72 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":66:23)
#loc73 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":66:13)
#loc74 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":68:9)
#loc75 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":73:1)
#loc76 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":89:1)
#loc77 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":75:5)
#loc78 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":88:5)
#loc79 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":75:12)
#loc80 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":77:5)
#loc81 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":79:9)
#loc82 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":82:9)
#loc83 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":79:18)
#loc84 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":79:13)
#loc85 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":79:31)
#loc86 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":80:9)
#loc87 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":81:23)
#loc88 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":81:13)
#loc89 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":83:9)
#loc90 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":86:19)
#loc91 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":86:9)
#loc92 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_puts_15.c":87:9)
#loc93 = loc(fused[#loc1, #loc2])
#loc94 = loc(fused[#loc4, #loc5])
#loc95 = loc(fused[#loc8, #loc9])
#loc96 = loc(fused[#loc10, #loc11])
#loc97 = loc(fused[#loc14, #loc15])
#loc98 = loc(fused[#loc16, #loc17])
#loc99 = loc(fused[#loc18, #loc15])
#loc100 = loc(fused[#loc23, #loc24])
#loc101 = loc(fused[#loc25, #loc26])
#loc102 = loc(fused[#loc27, #loc28])
#loc103 = loc(fused[#loc29, #loc30])
#loc104 = loc(fused[#loc31, #loc32])
#loc105 = loc(fused[#loc37, #loc38])
#loc108 = loc(fused[#loc48, #loc49])
#loc109 = loc(fused[#loc52, #loc53])
#loc110 = loc(fused[#loc56, #loc55])
#loc111 = loc(fused[#loc57, #loc58])
#loc112 = loc(fused[#loc59, #loc60])
#loc113 = loc(fused[#loc66, #loc67])
#loc114 = loc(fused[#loc69, #loc70])
#loc115 = loc(fused[#loc71, #loc67])
#loc116 = loc(fused[#loc75, #loc76])
#loc117 = loc(fused[#loc77, #loc78])
#loc118 = loc(fused[#loc81, #loc82])
#loc119 = loc(fused[#loc84, #loc85])
#loc120 = loc(fused[#loc86, #loc82])
