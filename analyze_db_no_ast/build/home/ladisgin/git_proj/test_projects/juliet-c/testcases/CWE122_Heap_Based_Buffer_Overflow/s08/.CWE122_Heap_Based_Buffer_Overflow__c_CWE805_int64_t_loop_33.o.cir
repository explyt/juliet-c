!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc120)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc121)
  cir.func private  @printLongLongLine(!s64i) loc(#loc122)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc123)
  cir.func  @_ZN59CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc125)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc126)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc14)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc15)
    cir.store %2, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc127)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc17)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc18)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc18)
    %6 = cir.const #cir.int<8> : !u64i loc(#loc128)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc129)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc17)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc130)
    cir.store %9, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc131)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc25)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc26)
      %12 = cir.cmp(eq, %10, %11) : !cir.ptr<!s64i>, !cir.bool loc(#loc133)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc28)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc30)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
      } loc(#loc134)
    } loc(#loc132)
    cir.scope {
      %10 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc136)
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc34)
      %12 = cir.load %11 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc34)
      cir.store %12, %10 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc136)
      cir.scope {
        %13 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc138)
        %14 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc138)
        cir.store %14, %13 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc138)
        cir.scope {
          %15 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc140)
          cir.scope {
            %23 = cir.const #cir.int<0> : !s32i loc(#loc45)
            %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc45)
            cir.store %24, %15 : !u64i, !cir.ptr<!u64i> loc(#loc142)
            cir.for : cond {
              %25 = cir.load %15 : !cir.ptr<!u64i>, !u64i loc(#loc47)
              %26 = cir.const #cir.int<100> : !s32i loc(#loc48)
              %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc48)
              %28 = cir.cmp(lt, %25, %27) : !u64i, !cir.bool loc(#loc143)
              cir.condition(%28) loc(#loc143)
            } body {
              %25 = cir.load %15 : !cir.ptr<!u64i>, !u64i loc(#loc49)
              %26 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc50)
              %27 = cir.ptr_stride(%26 : !cir.ptr<!s64i>, %25 : !u64i), !cir.ptr<!s64i> loc(#loc50)
              %28 = cir.load %27 : !cir.ptr<!s64i>, !s64i loc(#loc50)
              %29 = cir.load %10 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc51)
              %30 = cir.load %15 : !cir.ptr<!u64i>, !u64i loc(#loc52)
              %31 = cir.ptr_stride(%29 : !cir.ptr<!s64i>, %30 : !u64i), !cir.ptr<!s64i> loc(#loc53)
              cir.store %28, %31 : !s64i, !cir.ptr<!s64i> loc(#loc144)
              cir.yield loc(#loc44)
            } step {
              %25 = cir.load %15 : !cir.ptr<!u64i>, !u64i loc(#loc55)
              %26 = cir.unary(inc, %25) : !u64i, !u64i loc(#loc56)
              cir.store %26, %15 : !u64i, !cir.ptr<!u64i> loc(#loc145)
              cir.yield loc(#loc141)
            } loc(#loc141)
          } loc(#loc141)
          %16 = cir.load %10 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc57)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc58)
          %18 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %17 : !s32i), !cir.ptr<!s64i> loc(#loc59)
          %19 = cir.load %18 : !cir.ptr<!s64i>, !s64i loc(#loc57)
          cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc60)
          %20 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc61)
          %21 = cir.load %10 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc62)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc62)
          cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc61)
        } loc(#loc139)
      } loc(#loc137)
    } loc(#loc135)
    cir.return loc(#loc10)
  } loc(#loc124)
  cir.func internal private  @_ZN59CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc147)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc148)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc68)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc69)
    cir.store %2, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc149)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc71)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc72)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc72)
    %6 = cir.const #cir.int<8> : !u64i loc(#loc150)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc151)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc71)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc152)
    cir.store %9, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc153)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc79)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc80)
      %12 = cir.cmp(eq, %10, %11) : !cir.ptr<!s64i>, !cir.bool loc(#loc155)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc82)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc83)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc84)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc82)
      } loc(#loc156)
    } loc(#loc154)
    cir.scope {
      %10 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc158)
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc88)
      %12 = cir.load %11 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc88)
      cir.store %12, %10 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc158)
      cir.scope {
        %13 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc160)
        %14 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc160)
        cir.store %14, %13 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc160)
        cir.scope {
          %15 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc162)
          cir.scope {
            %23 = cir.const #cir.int<0> : !s32i loc(#loc99)
            %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc99)
            cir.store %24, %15 : !u64i, !cir.ptr<!u64i> loc(#loc164)
            cir.for : cond {
              %25 = cir.load %15 : !cir.ptr<!u64i>, !u64i loc(#loc101)
              %26 = cir.const #cir.int<100> : !s32i loc(#loc102)
              %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc102)
              %28 = cir.cmp(lt, %25, %27) : !u64i, !cir.bool loc(#loc165)
              cir.condition(%28) loc(#loc165)
            } body {
              %25 = cir.load %15 : !cir.ptr<!u64i>, !u64i loc(#loc103)
              %26 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc104)
              %27 = cir.ptr_stride(%26 : !cir.ptr<!s64i>, %25 : !u64i), !cir.ptr<!s64i> loc(#loc104)
              %28 = cir.load %27 : !cir.ptr<!s64i>, !s64i loc(#loc104)
              %29 = cir.load %10 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc105)
              %30 = cir.load %15 : !cir.ptr<!u64i>, !u64i loc(#loc106)
              %31 = cir.ptr_stride(%29 : !cir.ptr<!s64i>, %30 : !u64i), !cir.ptr<!s64i> loc(#loc107)
              cir.store %28, %31 : !s64i, !cir.ptr<!s64i> loc(#loc166)
              cir.yield loc(#loc98)
            } step {
              %25 = cir.load %15 : !cir.ptr<!u64i>, !u64i loc(#loc109)
              %26 = cir.unary(inc, %25) : !u64i, !u64i loc(#loc110)
              cir.store %26, %15 : !u64i, !cir.ptr<!u64i> loc(#loc167)
              cir.yield loc(#loc163)
            } loc(#loc163)
          } loc(#loc163)
          %16 = cir.load %10 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc111)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc112)
          %18 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %17 : !s32i), !cir.ptr<!s64i> loc(#loc113)
          %19 = cir.load %18 : !cir.ptr<!s64i>, !s64i loc(#loc111)
          cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc114)
          %20 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc115)
          %21 = cir.load %10 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc116)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc116)
          cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc115)
        } loc(#loc161)
      } loc(#loc159)
    } loc(#loc157)
    cir.return loc(#loc64)
  } loc(#loc146)
  cir.func  @_ZN59CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN59CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33L7goodG2BEv() : () -> () loc(#loc119)
    cir.return loc(#loc118)
  } loc(#loc168)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":24:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":48:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":26:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":26:15)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":27:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":27:26)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":28:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":28:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":30:23)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":30:30)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":30:33)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":30:47)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":30:48)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":30:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":31:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":31:33)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":31:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":31:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":31:23)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":31:24)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":31:30)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":31:29)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":32:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":47:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":33:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":33:26)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":34:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":46:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":35:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":35:37)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":36:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":45:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":37:17)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":37:24)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":39:17)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":42:17)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":39:26)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":39:22)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":39:29)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":39:33)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":41:38)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":41:31)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":41:21)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":41:26)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":41:27)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":41:39)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":39:39)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":39:38)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":43:35)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":43:40)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":43:41)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":43:17)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":44:17)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":44:22)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":55:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":79:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":57:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":57:15)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":58:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":58:26)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":59:12)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":59:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":61:23)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":61:30)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":61:34)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":61:48)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":61:49)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":61:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":62:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":62:33)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":62:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":62:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":62:23)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":62:24)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":62:30)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":62:29)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":63:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":78:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":64:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":64:26)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":65:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":77:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":66:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":66:37)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":67:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":76:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":68:17)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":68:24)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":70:17)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":73:17)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":70:26)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":70:22)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":70:29)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":70:33)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":72:38)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":72:31)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":72:21)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":72:26)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":72:27)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":72:39)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":70:39)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":70:38)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":74:35)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":74:40)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":74:41)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":74:17)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":75:17)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":75:22)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":81:1)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":84:1)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_33.cpp":83:5)
#loc120 = loc(fused[#loc1, #loc2])
#loc121 = loc(fused[#loc3, #loc4])
#loc122 = loc(fused[#loc5, #loc6])
#loc123 = loc(fused[#loc7, #loc8])
#loc124 = loc(fused[#loc9, #loc10])
#loc125 = loc(fused[#loc11, #loc12])
#loc126 = loc(fused[#loc13, #loc14])
#loc127 = loc(fused[#loc16, #loc15])
#loc128 = loc(fused[#loc19, #loc20])
#loc129 = loc(fused[#loc18, #loc20])
#loc130 = loc(fused[#loc17, #loc21])
#loc131 = loc(fused[#loc22, #loc21])
#loc132 = loc(fused[#loc23, #loc24])
#loc133 = loc(fused[#loc25, #loc26])
#loc134 = loc(fused[#loc27, #loc24])
#loc135 = loc(fused[#loc31, #loc32])
#loc136 = loc(fused[#loc33, #loc34])
#loc137 = loc(fused[#loc35, #loc36])
#loc138 = loc(fused[#loc37, #loc38])
#loc139 = loc(fused[#loc39, #loc40])
#loc140 = loc(fused[#loc41, #loc42])
#loc141 = loc(fused[#loc43, #loc44])
#loc142 = loc(fused[#loc46, #loc45])
#loc143 = loc(fused[#loc47, #loc48])
#loc144 = loc(fused[#loc51, #loc54])
#loc145 = loc(fused[#loc56, #loc55])
#loc146 = loc(fused[#loc63, #loc64])
#loc147 = loc(fused[#loc65, #loc66])
#loc148 = loc(fused[#loc67, #loc68])
#loc149 = loc(fused[#loc70, #loc69])
#loc150 = loc(fused[#loc73, #loc74])
#loc151 = loc(fused[#loc72, #loc74])
#loc152 = loc(fused[#loc71, #loc75])
#loc153 = loc(fused[#loc76, #loc75])
#loc154 = loc(fused[#loc77, #loc78])
#loc155 = loc(fused[#loc79, #loc80])
#loc156 = loc(fused[#loc81, #loc78])
#loc157 = loc(fused[#loc85, #loc86])
#loc158 = loc(fused[#loc87, #loc88])
#loc159 = loc(fused[#loc89, #loc90])
#loc160 = loc(fused[#loc91, #loc92])
#loc161 = loc(fused[#loc93, #loc94])
#loc162 = loc(fused[#loc95, #loc96])
#loc163 = loc(fused[#loc97, #loc98])
#loc164 = loc(fused[#loc100, #loc99])
#loc165 = loc(fused[#loc101, #loc102])
#loc166 = loc(fused[#loc105, #loc108])
#loc167 = loc(fused[#loc110, #loc109])
#loc168 = loc(fused[#loc117, #loc118])
