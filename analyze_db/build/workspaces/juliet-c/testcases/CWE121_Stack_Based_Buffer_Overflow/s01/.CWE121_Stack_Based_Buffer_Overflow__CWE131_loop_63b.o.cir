!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":21:66)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":21:74)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":41:70)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":41:78)
#loc73 = loc(fused[#loc5, #loc6])
#loc85 = loc(fused[#loc39, #loc40])
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc71)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b_badSink(%arg0: !cir.ptr<!cir.ptr<!s32i>> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc73)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc74)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc9)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc8)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc10)
    cir.store %3, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc74)
    cir.scope {
      %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc76)
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc77)
      %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc76)
      cir.store %6, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc76)
      cir.scope {
        %11 = cir.const #cir.int<0> : !s32i loc(#loc19)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc19)
        cir.store %12, %5 : !u64i, !cir.ptr<!u64i> loc(#loc79)
        cir.for : cond {
          %13 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc21)
          %14 = cir.const #cir.int<10> : !s32i loc(#loc22)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc22)
          %16 = cir.cmp(lt, %13, %15) : !u64i, !cir.bool loc(#loc80)
          cir.condition(%16) loc(#loc23)
        } body {
          cir.scope {
            %13 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc25)
            %14 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc26)
            %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !u64i), !cir.ptr<!s32i> loc(#loc26)
            %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc26)
            %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
            %18 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc28)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !u64i), !cir.ptr<!s32i> loc(#loc29)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc82)
          } loc(#loc81)
          cir.yield loc(#loc18)
        } step {
          %13 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc31)
          %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc32)
          cir.store %14, %5 : !u64i, !cir.ptr<!u64i> loc(#loc83)
          cir.yield loc(#loc78)
        } loc(#loc78)
      } loc(#loc78)
      %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc34)
      %9 = cir.ptr_stride(%7 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc35)
      %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc33)
      cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc36)
    } loc(#loc75)
    cir.return loc(#loc4)
  } loc(#loc72)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b_goodG2BSink(%arg0: !cir.ptr<!cir.ptr<!s32i>> loc(fused[#loc39, #loc40])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc85)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc86)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc43)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc42)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
    cir.store %3, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc86)
    cir.scope {
      %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc88)
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc89)
      %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc88)
      cir.store %6, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc88)
      cir.scope {
        %11 = cir.const #cir.int<0> : !s32i loc(#loc53)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc53)
        cir.store %12, %5 : !u64i, !cir.ptr<!u64i> loc(#loc91)
        cir.for : cond {
          %13 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc55)
          %14 = cir.const #cir.int<10> : !s32i loc(#loc56)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc56)
          %16 = cir.cmp(lt, %13, %15) : !u64i, !cir.bool loc(#loc92)
          cir.condition(%16) loc(#loc57)
        } body {
          cir.scope {
            %13 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc59)
            %14 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc60)
            %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !u64i), !cir.ptr<!s32i> loc(#loc60)
            %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc60)
            %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc61)
            %18 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc62)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !u64i), !cir.ptr<!s32i> loc(#loc63)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc94)
          } loc(#loc93)
          cir.yield loc(#loc52)
        } step {
          %13 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc65)
          %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc66)
          cir.store %14, %5 : !u64i, !cir.ptr<!u64i> loc(#loc95)
          cir.yield loc(#loc90)
        } loc(#loc90)
      } loc(#loc90)
      %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc68)
      %9 = cir.ptr_stride(%7 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc69)
      %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc67)
      cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc70)
    } loc(#loc87)
    cir.return loc(#loc38)
  } loc(#loc84)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":34:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":23:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":23:19)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":22:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":23:18)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":24:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":33:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":25:9)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":25:28)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":26:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":26:16)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":28:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":31:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":28:18)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":28:14)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":28:21)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":28:25)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":28:23)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":29:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":30:30)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":30:23)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":30:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":30:18)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":30:19)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":30:31)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":28:30)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":28:29)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":32:22)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":32:27)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":32:28)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":32:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":41:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":54:1)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":43:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":43:19)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":42:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":43:18)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":44:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":53:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":45:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":45:28)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":46:9)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":46:16)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":48:9)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":51:9)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":48:18)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":48:14)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":48:21)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":48:25)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":48:23)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":49:9)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":50:30)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":50:23)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":50:13)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":50:18)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":50:19)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":50:31)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":48:30)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":48:29)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":52:22)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":52:27)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":52:28)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c":52:9)
#loc71 = loc(fused[#loc1, #loc2])
#loc72 = loc(fused[#loc3, #loc4])
#loc74 = loc(fused[#loc7, #loc8])
#loc75 = loc(fused[#loc11, #loc12])
#loc76 = loc(fused[#loc13, #loc14])
#loc77 = loc(fused[#loc15, #loc16])
#loc78 = loc(fused[#loc17, #loc18])
#loc79 = loc(fused[#loc20, #loc19])
#loc80 = loc(fused[#loc21, #loc22])
#loc81 = loc(fused[#loc24, #loc18])
#loc82 = loc(fused[#loc27, #loc30])
#loc83 = loc(fused[#loc32, #loc31])
#loc84 = loc(fused[#loc37, #loc38])
#loc86 = loc(fused[#loc41, #loc42])
#loc87 = loc(fused[#loc45, #loc46])
#loc88 = loc(fused[#loc47, #loc48])
#loc89 = loc(fused[#loc49, #loc50])
#loc90 = loc(fused[#loc51, #loc52])
#loc91 = loc(fused[#loc54, #loc53])
#loc92 = loc(fused[#loc55, #loc56])
#loc93 = loc(fused[#loc58, #loc52])
#loc94 = loc(fused[#loc61, #loc64])
#loc95 = loc(fused[#loc66, #loc65])
