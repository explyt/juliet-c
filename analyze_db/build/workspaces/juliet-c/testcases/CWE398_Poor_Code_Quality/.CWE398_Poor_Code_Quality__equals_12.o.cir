!s32i = !cir.int<s, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__equals_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc70)
  cir.func private @printIntLine(!s32i) loc(#loc71)
  cir.func no_proto @CWE398_Poor_Code_Quality__equals_12_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc74)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc74)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc9)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc9)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc77)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc17)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc77)
          %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc18)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc19)
          %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc20)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc78)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc22)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc23)
        } loc(#loc76)
      } else {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc80)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intFive", init] {alignment = 4 : i64} loc(#loc81)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc27)
          cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc80)
          %7 = cir.const #cir.int<5> : !s32i loc(#loc28)
          cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc81)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc29)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc30)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc31)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc82)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc33)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc34)
        } loc(#loc79)
      } loc(#loc75)
    } loc(#loc73)
    cir.return loc(#loc6)
  } loc(#loc72)
  cir.func no_proto @CWE398_Poor_Code_Quality__equals_12_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc84)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc36)
  } loc(#loc83)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc87)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc87)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc43)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc43)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc90)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intFive", init] {alignment = 4 : i64} loc(#loc91)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc51)
          cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc90)
          %7 = cir.const #cir.int<5> : !s32i loc(#loc52)
          cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc91)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc53)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc54)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc55)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc92)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc57)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc58)
        } loc(#loc89)
      } else {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc94)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intFive", init] {alignment = 4 : i64} loc(#loc95)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc62)
          cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc94)
          %7 = cir.const #cir.int<5> : !s32i loc(#loc63)
          cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc95)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc64)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc65)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc66)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc96)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc68)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc69)
        } loc(#loc93)
      } loc(#loc88)
    } loc(#loc86)
    cir.return loc(#loc40)
  } loc(#loc85)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__equals_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE398_Poor_Code_Quality__equals_12.c":20:1)
#loc6 = loc("CWE398_Poor_Code_Quality__equals_12.c":42:1)
#loc7 = loc("CWE398_Poor_Code_Quality__equals_12.c":22:5)
#loc8 = loc("CWE398_Poor_Code_Quality__equals_12.c":41:5)
#loc9 = loc("CWE398_Poor_Code_Quality__equals_12.c":22:8)
#loc10 = loc("CWE398_Poor_Code_Quality__equals_12.c":22:33)
#loc11 = loc("CWE398_Poor_Code_Quality__equals_12.c":23:5)
#loc12 = loc("CWE398_Poor_Code_Quality__equals_12.c":31:5)
#loc13 = loc("CWE398_Poor_Code_Quality__equals_12.c":33:5)
#loc14 = loc("CWE398_Poor_Code_Quality__equals_12.c":24:9)
#loc15 = loc("CWE398_Poor_Code_Quality__equals_12.c":30:9)
#loc16 = loc("CWE398_Poor_Code_Quality__equals_12.c":25:13)
#loc17 = loc("CWE398_Poor_Code_Quality__equals_12.c":25:26)
#loc18 = loc("CWE398_Poor_Code_Quality__equals_12.c":26:26)
#loc19 = loc("CWE398_Poor_Code_Quality__equals_12.c":26:13)
#loc20 = loc("CWE398_Poor_Code_Quality__equals_12.c":28:22)
#loc21 = loc("CWE398_Poor_Code_Quality__equals_12.c":28:13)
#loc22 = loc("CWE398_Poor_Code_Quality__equals_12.c":29:26)
#loc23 = loc("CWE398_Poor_Code_Quality__equals_12.c":29:13)
#loc24 = loc("CWE398_Poor_Code_Quality__equals_12.c":34:9)
#loc25 = loc("CWE398_Poor_Code_Quality__equals_12.c":40:9)
#loc26 = loc("CWE398_Poor_Code_Quality__equals_12.c":35:13)
#loc27 = loc("CWE398_Poor_Code_Quality__equals_12.c":35:26)
#loc28 = loc("CWE398_Poor_Code_Quality__equals_12.c":35:39)
#loc29 = loc("CWE398_Poor_Code_Quality__equals_12.c":36:26)
#loc30 = loc("CWE398_Poor_Code_Quality__equals_12.c":36:13)
#loc31 = loc("CWE398_Poor_Code_Quality__equals_12.c":38:22)
#loc32 = loc("CWE398_Poor_Code_Quality__equals_12.c":38:13)
#loc33 = loc("CWE398_Poor_Code_Quality__equals_12.c":39:26)
#loc34 = loc("CWE398_Poor_Code_Quality__equals_12.c":39:13)
#loc35 = loc("CWE398_Poor_Code_Quality__equals_12.c":73:1)
#loc36 = loc("CWE398_Poor_Code_Quality__equals_12.c":76:1)
#loc37 = loc("CWE398_Poor_Code_Quality__equals_12.c":75:5)
#loc38 = loc("CWE398_Poor_Code_Quality__equals_12.c":75:11)
#loc39 = loc("CWE398_Poor_Code_Quality__equals_12.c":49:1)
#loc40 = loc("CWE398_Poor_Code_Quality__equals_12.c":71:1)
#loc41 = loc("CWE398_Poor_Code_Quality__equals_12.c":51:5)
#loc42 = loc("CWE398_Poor_Code_Quality__equals_12.c":70:5)
#loc43 = loc("CWE398_Poor_Code_Quality__equals_12.c":51:8)
#loc44 = loc("CWE398_Poor_Code_Quality__equals_12.c":51:33)
#loc45 = loc("CWE398_Poor_Code_Quality__equals_12.c":52:5)
#loc46 = loc("CWE398_Poor_Code_Quality__equals_12.c":60:5)
#loc47 = loc("CWE398_Poor_Code_Quality__equals_12.c":62:5)
#loc48 = loc("CWE398_Poor_Code_Quality__equals_12.c":53:9)
#loc49 = loc("CWE398_Poor_Code_Quality__equals_12.c":59:9)
#loc50 = loc("CWE398_Poor_Code_Quality__equals_12.c":54:13)
#loc51 = loc("CWE398_Poor_Code_Quality__equals_12.c":54:26)
#loc52 = loc("CWE398_Poor_Code_Quality__equals_12.c":54:39)
#loc53 = loc("CWE398_Poor_Code_Quality__equals_12.c":55:26)
#loc54 = loc("CWE398_Poor_Code_Quality__equals_12.c":55:13)
#loc55 = loc("CWE398_Poor_Code_Quality__equals_12.c":57:22)
#loc56 = loc("CWE398_Poor_Code_Quality__equals_12.c":57:13)
#loc57 = loc("CWE398_Poor_Code_Quality__equals_12.c":58:26)
#loc58 = loc("CWE398_Poor_Code_Quality__equals_12.c":58:13)
#loc59 = loc("CWE398_Poor_Code_Quality__equals_12.c":63:9)
#loc60 = loc("CWE398_Poor_Code_Quality__equals_12.c":69:9)
#loc61 = loc("CWE398_Poor_Code_Quality__equals_12.c":64:13)
#loc62 = loc("CWE398_Poor_Code_Quality__equals_12.c":64:26)
#loc63 = loc("CWE398_Poor_Code_Quality__equals_12.c":64:39)
#loc64 = loc("CWE398_Poor_Code_Quality__equals_12.c":65:26)
#loc65 = loc("CWE398_Poor_Code_Quality__equals_12.c":65:13)
#loc66 = loc("CWE398_Poor_Code_Quality__equals_12.c":67:22)
#loc67 = loc("CWE398_Poor_Code_Quality__equals_12.c":67:13)
#loc68 = loc("CWE398_Poor_Code_Quality__equals_12.c":68:26)
#loc69 = loc("CWE398_Poor_Code_Quality__equals_12.c":68:13)
#loc70 = loc(fused[#loc1, #loc2])
#loc71 = loc(fused[#loc3, #loc4])
#loc72 = loc(fused[#loc5, #loc6])
#loc73 = loc(fused[#loc7, #loc8])
#loc74 = loc(fused[#loc9, #loc10])
#loc75 = loc(fused[#loc11, #loc12, #loc13, #loc8])
#loc76 = loc(fused[#loc14, #loc15])
#loc77 = loc(fused[#loc16, #loc17])
#loc78 = loc(fused[#loc21, #loc20])
#loc79 = loc(fused[#loc24, #loc25])
#loc80 = loc(fused[#loc26, #loc27])
#loc81 = loc(fused[#loc26, #loc28])
#loc82 = loc(fused[#loc32, #loc31])
#loc83 = loc(fused[#loc35, #loc36])
#loc84 = loc(fused[#loc37, #loc38])
#loc85 = loc(fused[#loc39, #loc40])
#loc86 = loc(fused[#loc41, #loc42])
#loc87 = loc(fused[#loc43, #loc44])
#loc88 = loc(fused[#loc45, #loc46, #loc47, #loc42])
#loc89 = loc(fused[#loc48, #loc49])
#loc90 = loc(fused[#loc50, #loc51])
#loc91 = loc(fused[#loc50, #loc52])
#loc92 = loc(fused[#loc56, #loc55])
#loc93 = loc(fused[#loc59, #loc60])
#loc94 = loc(fused[#loc61, #loc62])
#loc95 = loc(fused[#loc61, #loc63])
#loc96 = loc(fused[#loc67, #loc66])
