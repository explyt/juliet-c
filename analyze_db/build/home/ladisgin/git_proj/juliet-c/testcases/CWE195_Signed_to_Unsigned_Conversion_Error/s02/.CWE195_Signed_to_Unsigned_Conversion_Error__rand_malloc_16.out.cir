!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc70 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":93:10)
#loc71 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":93:14)
#loc72 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":93:20)
#loc73 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":93:32)
#loc159 = loc(fused[#loc70, #loc71])
#loc160 = loc(fused[#loc72, #loc73])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE195_Signed_to_Unsigned_Conversion_Error/s02/CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc134)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc135)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc136)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc137)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc138)
  cir.func no_proto @CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc140)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc16)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc20)
        cir.condition(%4) loc(#loc20)
      } do {
        %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
        %4 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %5 = cir.binop(and, %3, %4) : !s32i loc(#loc21)
        %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc21)
        %7 = cir.ternary(%6, true {
          %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc21)
          %11 = cir.const #cir.int<30> : !s32i loc(#loc21)
          %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc21)
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc21)
          %15 = cir.const #cir.int<15> : !s32i loc(#loc21)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc21)
          %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc21)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc21)
          %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc21)
          cir.yield %20 : !u32i loc(#loc21)
        }, false {
          %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc21)
          %11 = cir.const #cir.int<30> : !s32i loc(#loc21)
          %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc21)
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc21)
          %15 = cir.const #cir.int<15> : !s32i loc(#loc21)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc21)
          %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc21)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc21)
          %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc21)
          %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc21)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc21)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc21)
          %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc21)
          cir.yield %24 : !u32i loc(#loc21)
        }) : (!cir.bool) -> !u32i loc(#loc21)
        %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc21)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc143)
        cir.break loc(#loc23)
      } loc(#loc142)
    } loc(#loc142)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      %4 = cir.const #cir.int<100> : !s32i loc(#loc27)
      %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc145)
      cir.if %5 {
        %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc147)
        %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc31)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc32)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc31)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc148)
        cir.store %11, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc147)
        cir.scope {
          %30 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
          %31 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
          %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
          %33 = cir.cmp(eq, %30, %32) : !cir.ptr<!s8i>, !cir.bool loc(#loc150)
          cir.if %33 {
            %34 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc38)
            %35 = cir.const #cir.int<1> : !s32i loc(#loc39)
            %36 = cir.unary(minus, %35) : !s32i, !s32i loc(#loc40)
            cir.call @exit(%36) : (!s32i) -> () extra(#fn_attr) loc(#loc38)
          } loc(#loc151)
        } loc(#loc149)
        %12 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc41)
        %14 = cir.const #cir.int<65> : !s32i loc(#loc42)
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc43)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc44)
        %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc43)
        %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc43)
        cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc152)
        %19 = cir.const #cir.int<0> : !s32i loc(#loc47)
        %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc47)
        %21 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
        %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
        %23 = cir.const #cir.int<1> : !s32i loc(#loc50)
        %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc49)
        %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc51)
        cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc153)
        %26 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
        cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc53)
        %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc54)
        %28 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
        %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc55)
        cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc54)
      } loc(#loc146)
    } loc(#loc144)
    cir.return loc(#loc12)
  } loc(#loc139)
  cir.func no_proto @CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc155)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    cir.return loc(#loc57)
  } loc(#loc154)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc156)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc157)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc67)
  cir.func @main(%arg0: !s32i loc(fused[#loc70, #loc71]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc72, #loc73])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc159)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc160)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc69)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc74)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc74)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc75)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc76)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc76)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc77)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc64)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %8 = cir.get_global @CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc161)
    cir.call @CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16_good() : () -> () loc(#loc79)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc65)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc66)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %13 = cir.get_global @CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc162)
    cir.call @CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16_bad() : () -> () loc(#loc83)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc67)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc86)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc163)
    cir.return %17 : !s32i loc(#loc163)
  } loc(#loc158)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc165)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc93)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc97)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc97)
        cir.condition(%4) loc(#loc97)
      } do {
        %3 = cir.const #cir.int<100> : !s32i loc(#loc98)
        %4 = cir.const #cir.int<1> : !s32i loc(#loc99)
        %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc98)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc168)
        cir.break loc(#loc101)
      } loc(#loc167)
    } loc(#loc167)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
      %4 = cir.const #cir.int<100> : !s32i loc(#loc105)
      %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc170)
      cir.if %5 {
        %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc172)
        %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc109)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc110)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc109)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc173)
        cir.store %11, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc172)
        cir.scope {
          %30 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc113)
          %31 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc114)
          %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc114)
          %33 = cir.cmp(eq, %30, %32) : !cir.ptr<!s8i>, !cir.bool loc(#loc175)
          cir.if %33 {
            %34 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc116)
            %35 = cir.const #cir.int<1> : !s32i loc(#loc117)
            %36 = cir.unary(minus, %35) : !s32i, !s32i loc(#loc118)
            cir.call @exit(%36) : (!s32i) -> () extra(#fn_attr) loc(#loc116)
          } loc(#loc176)
        } loc(#loc174)
        %12 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc119)
        %14 = cir.const #cir.int<65> : !s32i loc(#loc120)
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc122)
        %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc121)
        %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc121)
        cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc177)
        %19 = cir.const #cir.int<0> : !s32i loc(#loc125)
        %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc125)
        %21 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
        %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc127)
        %23 = cir.const #cir.int<1> : !s32i loc(#loc128)
        %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc127)
        %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc129)
        cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc178)
        %26 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
        cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc131)
        %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc132)
        %28 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
        %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc133)
        cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc132)
      } loc(#loc171)
    } loc(#loc169)
    cir.return loc(#loc89)
  } loc(#loc164)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE195_Signed_to_Unsigned_Conversion_Error/s02/CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":21:1)
#loc12 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":45:1)
#loc13 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":23:5)
#loc14 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":23:9)
#loc15 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":25:13)
#loc16 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":25:12)
#loc17 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":25:5)
#loc18 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":26:5)
#loc19 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":31:5)
#loc20 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":26:11)
#loc21 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":29:16)
#loc22 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":29:9)
#loc23 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":30:9)
#loc24 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":33:5)
#loc25 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":44:5)
#loc26 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":33:9)
#loc27 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":33:16)
#loc28 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":34:5)
#loc29 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":37:9)
#loc30 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":37:48)
#loc31 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":37:37)
#loc32 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":37:44)
#loc33 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":38:9)
#loc34 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":38:43)
#loc35 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":38:13)
#loc36 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":38:27)
#loc37 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":38:33)
#loc38 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":38:34)
#loc39 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":38:40)
#loc40 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":38:39)
#loc41 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":40:16)
#loc42 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":40:28)
#loc43 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":40:33)
#loc44 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":40:38)
#loc45 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":40:9)
#loc46 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":40:39)
#loc47 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":41:30)
#loc48 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":41:9)
#loc49 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":41:20)
#loc50 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":41:25)
#loc51 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":41:26)
#loc52 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":42:19)
#loc53 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":42:9)
#loc54 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":43:9)
#loc55 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":43:14)
#loc56 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":78:1)
#loc57 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":81:1)
#loc58 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":80:5)
#loc59 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":80:13)
#loc60 = loc("/usr/include/stdlib.h":575:1)
#loc61 = loc("/usr/include/stdlib.h":575:41)
#loc62 = loc("/usr/include/time.h":76:1)
#loc63 = loc("/usr/include/time.h":76:38)
#loc64 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":98:15)
#loc65 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":100:15)
#loc66 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":103:15)
#loc67 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":105:15)
#loc68 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":93:1)
#loc69 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":108:1)
#loc74 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":94:1)
#loc75 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":96:27)
#loc76 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":96:22)
#loc77 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":96:5)
#loc78 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":98:5)
#loc79 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":99:5)
#loc80 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":99:69)
#loc81 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":100:5)
#loc82 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":103:5)
#loc83 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":104:5)
#loc84 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":104:68)
#loc85 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":105:5)
#loc86 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":107:12)
#loc87 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":107:5)
#loc88 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":52:1)
#loc89 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":76:1)
#loc90 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":54:5)
#loc91 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":54:9)
#loc92 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":56:13)
#loc93 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":56:12)
#loc94 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":56:5)
#loc95 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":57:5)
#loc96 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":62:5)
#loc97 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":57:11)
#loc98 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":60:16)
#loc99 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":60:20)
#loc100 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":60:9)
#loc101 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":61:9)
#loc102 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":64:5)
#loc103 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":75:5)
#loc104 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":64:9)
#loc105 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":64:16)
#loc106 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":65:5)
#loc107 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":68:9)
#loc108 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":68:48)
#loc109 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":68:37)
#loc110 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":68:44)
#loc111 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":69:9)
#loc112 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":69:43)
#loc113 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":69:13)
#loc114 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":69:27)
#loc115 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":69:33)
#loc116 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":69:34)
#loc117 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":69:40)
#loc118 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":69:39)
#loc119 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":71:16)
#loc120 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":71:28)
#loc121 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":71:33)
#loc122 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":71:38)
#loc123 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":71:9)
#loc124 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":71:39)
#loc125 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":72:30)
#loc126 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":72:9)
#loc127 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":72:20)
#loc128 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":72:25)
#loc129 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":72:26)
#loc130 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":73:19)
#loc131 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":73:9)
#loc132 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":74:9)
#loc133 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16.c":74:14)
#loc134 = loc(fused[#loc1, #loc2])
#loc135 = loc(fused[#loc3, #loc4])
#loc136 = loc(fused[#loc5, #loc6])
#loc137 = loc(fused[#loc7, #loc8])
#loc138 = loc(fused[#loc9, #loc10])
#loc139 = loc(fused[#loc11, #loc12])
#loc140 = loc(fused[#loc13, #loc14])
#loc141 = loc(fused[#loc17, #loc15])
#loc142 = loc(fused[#loc18, #loc19])
#loc143 = loc(fused[#loc22, #loc21])
#loc144 = loc(fused[#loc24, #loc25])
#loc145 = loc(fused[#loc26, #loc27])
#loc146 = loc(fused[#loc28, #loc25])
#loc147 = loc(fused[#loc29, #loc30])
#loc148 = loc(fused[#loc31, #loc30])
#loc149 = loc(fused[#loc33, #loc34])
#loc150 = loc(fused[#loc35, #loc36])
#loc151 = loc(fused[#loc37, #loc34])
#loc152 = loc(fused[#loc45, #loc46])
#loc153 = loc(fused[#loc48, #loc47])
#loc154 = loc(fused[#loc56, #loc57])
#loc155 = loc(fused[#loc58, #loc59])
#loc156 = loc(fused[#loc60, #loc61])
#loc157 = loc(fused[#loc62, #loc63])
#loc158 = loc(fused[#loc68, #loc69])
#loc161 = loc(fused[#loc79, #loc80])
#loc162 = loc(fused[#loc83, #loc84])
#loc163 = loc(fused[#loc87, #loc86])
#loc164 = loc(fused[#loc88, #loc89])
#loc165 = loc(fused[#loc90, #loc91])
#loc166 = loc(fused[#loc94, #loc92])
#loc167 = loc(fused[#loc95, #loc96])
#loc168 = loc(fused[#loc100, #loc99])
#loc169 = loc(fused[#loc102, #loc103])
#loc170 = loc(fused[#loc104, #loc105])
#loc171 = loc(fused[#loc106, #loc103])
#loc172 = loc(fused[#loc107, #loc108])
#loc173 = loc(fused[#loc109, #loc108])
#loc174 = loc(fused[#loc111, #loc112])
#loc175 = loc(fused[#loc113, #loc114])
#loc176 = loc(fused[#loc115, #loc112])
#loc177 = loc(fused[#loc123, #loc124])
#loc178 = loc(fused[#loc126, #loc125])
