!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc137 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":222:10)
#loc138 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":222:14)
#loc139 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":222:20)
#loc140 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":222:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc329 = loc(fused[#loc137, #loc138])
#loc330 = loc(fused[#loc139, #loc140])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_connect_socket_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc277)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc278)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc279)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc280)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc281)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc282)
  cir.func private @close(!s32i) -> !s32i loc(#loc283)
  cir.func private @printIntLine(!s32i) loc(#loc284)
  cir.func no_proto @CWE369_Divide_by_Zero__float_connect_socket_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc286)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc22)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc287)
    cir.scope {
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc289)
      %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc290)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc291)
      %5 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc292)
      %6 = cir.const #cir.int<1> : !s32i loc(#loc31)
      %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc31)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc291)
      cir.scope {
        cir.do {
          %8 = cir.const #cir.int<2> : !s32i loc(#loc36)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc37)
          %10 = cir.const #cir.int<6> : !s32i loc(#loc38)
          %11 = cir.call @socket(%8, %9, %10) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc39)
          cir.store %11, %4 : !s32i, !cir.ptr<!s32i> loc(#loc294)
          cir.scope {
            %45 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc44)
            %46 = cir.const #cir.int<1> : !s32i loc(#loc45)
            %47 = cir.unary(minus, %46) : !s32i, !s32i loc(#loc45)
            %48 = cir.cmp(eq, %45, %47) : !s32i, !cir.bool loc(#loc296)
            cir.if %48 {
              cir.break loc(#loc47)
            } loc(#loc297)
          } loc(#loc295)
          %12 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc298)
          %13 = cir.const #cir.int<0> : !s32i loc(#loc50)
          %14 = cir.const #cir.int<16> : !u64i loc(#loc299)
          cir.libc.memset %14 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc300)
          %15 = cir.const #cir.int<2> : !s32i loc(#loc55)
          %16 = cir.cast(integral, %15 : !s32i), !u16i loc(#loc55)
          %17 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc56)
          cir.store %16, %17 : !u16i, !cir.ptr<!u16i> loc(#loc301)
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
          %20 = cir.call @inet_addr(%19) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc58)
          %21 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc59)
          %22 = cir.get_member %21[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc60)
          cir.store %20, %22 : !u32i, !cir.ptr<!u32i> loc(#loc302)
          %23 = cir.const #cir.int<27015> : !s32i loc(#loc63)
          %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc63)
          %25 = cir.call @htons(%24) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc64)
          %26 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
          cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc303)
          cir.scope {
            %45 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc70)
            %46 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc305)
            %47 = cir.const #cir.int<16> : !u64i loc(#loc306)
            %48 = cir.cast(integral, %47 : !u64i), !u32i loc(#loc306)
            %49 = cir.call @connect(%45, %46, %48) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc75)
            %50 = cir.const #cir.int<1> : !s32i loc(#loc76)
            %51 = cir.unary(minus, %50) : !s32i, !s32i loc(#loc76)
            %52 = cir.cmp(eq, %49, %51) : !s32i, !cir.bool loc(#loc307)
            cir.if %52 {
              cir.break loc(#loc78)
            } loc(#loc308)
          } loc(#loc304)
          %27 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc79)
          %28 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc80)
          %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc80)
          %30 = cir.const #cir.int<20> : !s32i loc(#loc81)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc82)
          %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc81)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc81)
          %34 = cir.const #cir.int<0> : !s32i loc(#loc83)
          %35 = cir.call @recv(%27, %29, %33, %34) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc84)
          %36 = cir.cast(integral, %35 : !s64i), !s32i loc(#loc84)
          cir.store %36, %2 : !s32i, !cir.ptr<!s32i> loc(#loc309)
          cir.scope {
            %45 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc89)
            %46 = cir.const #cir.int<1> : !s32i loc(#loc90)
            %47 = cir.unary(minus, %46) : !s32i, !s32i loc(#loc90)
            %48 = cir.cmp(eq, %45, %47) : !s32i, !cir.bool loc(#loc311)
            %49 = cir.ternary(%48, true {
              %50 = cir.const #true loc(#loc91)
              cir.yield %50 : !cir.bool loc(#loc91)
            }, false {
              %50 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc92)
              %51 = cir.const #cir.int<0> : !s32i loc(#loc93)
              %52 = cir.cmp(eq, %50, %51) : !s32i, !cir.bool loc(#loc312)
              %53 = cir.ternary(%52, true {
                %54 = cir.const #true loc(#loc91)
                cir.yield %54 : !cir.bool loc(#loc91)
              }, false {
                %54 = cir.const #false loc(#loc91)
                cir.yield %54 : !cir.bool loc(#loc91)
              }) : (!cir.bool) -> !cir.bool loc(#loc91)
              cir.yield %53 : !cir.bool loc(#loc91)
            }) : (!cir.bool) -> !cir.bool loc(#loc91)
            cir.if %49 {
              cir.break loc(#loc95)
            } loc(#loc313)
          } loc(#loc310)
          %37 = cir.const #cir.int<0> : !s32i loc(#loc96)
          %38 = cir.cast(integral, %37 : !s32i), !s8i loc(#loc96)
          %39 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc97)
          %40 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc98)
          %41 = cir.ptr_stride(%40 : !cir.ptr<!s8i>, %39 : !s32i), !cir.ptr<!s8i> loc(#loc98)
          cir.store %38, %41 : !s8i, !cir.ptr<!s8i> loc(#loc314)
          %42 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc99)
          %43 = cir.call @atof(%42) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc100)
          %44 = cir.cast(floating, %43 : !cir.double), !cir.float loc(#loc100)
          cir.store %44, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc315)
          cir.yield loc(#loc35)
        } while {
          %8 = cir.const #cir.int<0> : !s32i loc(#loc103)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc103)
          cir.condition(%9) loc(#loc103)
        } loc(#loc293)
      } loc(#loc293)
      cir.scope {
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc106)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc107)
        %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc107)
        %11 = cir.cmp(ne, %8, %10) : !s32i, !cir.bool loc(#loc317)
        cir.if %11 {
          %12 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc109)
          %13 = cir.call @close(%12) : (!s32i) -> !s32i loc(#loc110)
        } loc(#loc318)
      } loc(#loc316)
    } loc(#loc288)
    cir.scope {
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc320)
      %3 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc115)
      %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc116)
      %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc116)
      %6 = cir.binop(div, %3, %5) : !cir.double loc(#loc321)
      %7 = cir.cast(float_to_int, %6 : !cir.double), !s32i loc(#loc321)
      cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc320)
      %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc117)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc118)
    } loc(#loc319)
    cir.return loc(#loc19)
  } loc(#loc285)
  cir.func no_proto @CWE369_Divide_by_Zero__float_connect_socket_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc323)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc121)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc324)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc123)
    cir.return loc(#loc120)
  } loc(#loc322)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc325)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc326)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc327)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc131)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc132)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc133)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc134)
  cir.func @main(%arg0: !s32i loc(fused[#loc137, #loc138]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc139, #loc140])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc329)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc330)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc136)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc141)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc142)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc143)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc143)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc144)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc131)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc131)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc145)
    %8 = cir.get_global @CWE369_Divide_by_Zero__float_connect_socket_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc331)
    cir.call @CWE369_Divide_by_Zero__float_connect_socket_01_good() : () -> () loc(#loc146)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc132)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc132)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc148)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc133)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc133)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc149)
    %13 = cir.get_global @CWE369_Divide_by_Zero__float_connect_socket_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc332)
    cir.call @CWE369_Divide_by_Zero__float_connect_socket_01_bad() : () -> () loc(#loc150)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc134)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc134)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc152)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc153)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc333)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc333)
    cir.return %17 : !s32i loc(#loc333)
  } loc(#loc328)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc335)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc159)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc336)
    %2 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc161)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc337)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc339)
      %4 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc167)
      %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc168)
      %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc168)
      %7 = cir.binop(div, %4, %6) : !cir.double loc(#loc340)
      %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc340)
      cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc339)
      %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc169)
      cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc170)
    } loc(#loc338)
    cir.return loc(#loc156)
  } loc(#loc334)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc171)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc342)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc176)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc343)
    cir.scope {
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc345)
      %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc346)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc347)
      %5 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc348)
      %6 = cir.const #cir.int<1> : !s32i loc(#loc185)
      %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc185)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc347)
      cir.scope {
        cir.do {
          %8 = cir.const #cir.int<2> : !s32i loc(#loc190)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc191)
          %10 = cir.const #cir.int<6> : !s32i loc(#loc192)
          %11 = cir.call @socket(%8, %9, %10) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc193)
          cir.store %11, %4 : !s32i, !cir.ptr<!s32i> loc(#loc350)
          cir.scope {
            %45 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc198)
            %46 = cir.const #cir.int<1> : !s32i loc(#loc199)
            %47 = cir.unary(minus, %46) : !s32i, !s32i loc(#loc199)
            %48 = cir.cmp(eq, %45, %47) : !s32i, !cir.bool loc(#loc352)
            cir.if %48 {
              cir.break loc(#loc201)
            } loc(#loc353)
          } loc(#loc351)
          %12 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc354)
          %13 = cir.const #cir.int<0> : !s32i loc(#loc204)
          %14 = cir.const #cir.int<16> : !u64i loc(#loc355)
          cir.libc.memset %14 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc356)
          %15 = cir.const #cir.int<2> : !s32i loc(#loc209)
          %16 = cir.cast(integral, %15 : !s32i), !u16i loc(#loc209)
          %17 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc56)
          cir.store %16, %17 : !u16i, !cir.ptr<!u16i> loc(#loc357)
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc211)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc211)
          %20 = cir.call @inet_addr(%19) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc212)
          %21 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc59)
          %22 = cir.get_member %21[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc60)
          cir.store %20, %22 : !u32i, !cir.ptr<!u32i> loc(#loc358)
          %23 = cir.const #cir.int<27015> : !s32i loc(#loc215)
          %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc215)
          %25 = cir.call @htons(%24) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc216)
          %26 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
          cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc359)
          cir.scope {
            %45 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc221)
            %46 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc361)
            %47 = cir.const #cir.int<16> : !u64i loc(#loc362)
            %48 = cir.cast(integral, %47 : !u64i), !u32i loc(#loc362)
            %49 = cir.call @connect(%45, %46, %48) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc226)
            %50 = cir.const #cir.int<1> : !s32i loc(#loc227)
            %51 = cir.unary(minus, %50) : !s32i, !s32i loc(#loc227)
            %52 = cir.cmp(eq, %49, %51) : !s32i, !cir.bool loc(#loc363)
            cir.if %52 {
              cir.break loc(#loc229)
            } loc(#loc364)
          } loc(#loc360)
          %27 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc230)
          %28 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc231)
          %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc231)
          %30 = cir.const #cir.int<20> : !s32i loc(#loc232)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc233)
          %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc232)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc232)
          %34 = cir.const #cir.int<0> : !s32i loc(#loc234)
          %35 = cir.call @recv(%27, %29, %33, %34) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc235)
          %36 = cir.cast(integral, %35 : !s64i), !s32i loc(#loc235)
          cir.store %36, %2 : !s32i, !cir.ptr<!s32i> loc(#loc365)
          cir.scope {
            %45 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc240)
            %46 = cir.const #cir.int<1> : !s32i loc(#loc241)
            %47 = cir.unary(minus, %46) : !s32i, !s32i loc(#loc241)
            %48 = cir.cmp(eq, %45, %47) : !s32i, !cir.bool loc(#loc367)
            %49 = cir.ternary(%48, true {
              %50 = cir.const #true loc(#loc242)
              cir.yield %50 : !cir.bool loc(#loc242)
            }, false {
              %50 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc243)
              %51 = cir.const #cir.int<0> : !s32i loc(#loc244)
              %52 = cir.cmp(eq, %50, %51) : !s32i, !cir.bool loc(#loc368)
              %53 = cir.ternary(%52, true {
                %54 = cir.const #true loc(#loc242)
                cir.yield %54 : !cir.bool loc(#loc242)
              }, false {
                %54 = cir.const #false loc(#loc242)
                cir.yield %54 : !cir.bool loc(#loc242)
              }) : (!cir.bool) -> !cir.bool loc(#loc242)
              cir.yield %53 : !cir.bool loc(#loc242)
            }) : (!cir.bool) -> !cir.bool loc(#loc242)
            cir.if %49 {
              cir.break loc(#loc246)
            } loc(#loc369)
          } loc(#loc366)
          %37 = cir.const #cir.int<0> : !s32i loc(#loc247)
          %38 = cir.cast(integral, %37 : !s32i), !s8i loc(#loc247)
          %39 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc248)
          %40 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc249)
          %41 = cir.ptr_stride(%40 : !cir.ptr<!s8i>, %39 : !s32i), !cir.ptr<!s8i> loc(#loc249)
          cir.store %38, %41 : !s8i, !cir.ptr<!s8i> loc(#loc370)
          %42 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc250)
          %43 = cir.call @atof(%42) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc251)
          %44 = cir.cast(floating, %43 : !cir.double), !cir.float loc(#loc251)
          cir.store %44, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc371)
          cir.yield loc(#loc189)
        } while {
          %8 = cir.const #cir.int<0> : !s32i loc(#loc254)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc254)
          cir.condition(%9) loc(#loc254)
        } loc(#loc349)
      } loc(#loc349)
      cir.scope {
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc257)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc258)
        %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc258)
        %11 = cir.cmp(ne, %8, %10) : !s32i, !cir.bool loc(#loc373)
        cir.if %11 {
          %12 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc260)
          %13 = cir.call @close(%12) : (!s32i) -> !s32i loc(#loc261)
        } loc(#loc374)
      } loc(#loc372)
    } loc(#loc344)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc264)
      %3 = cir.cast(floating, %2 : !cir.float), !cir.double loc(#loc264)
      %4 = cir.fabs %3 : !cir.double loc(#loc264)
      %5 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc265)
      %6 = cir.cmp(gt, %4, %5) : !cir.double, !cir.bool loc(#loc376)
      cir.if %6 {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc378)
        %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc272)
        %9 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc273)
        %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc273)
        %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc379)
        %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc379)
        cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc378)
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc274)
        cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc275)
      } else {
        %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc171)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc171)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc276)
      } loc(#loc377)
    } loc(#loc375)
    cir.return loc(#loc173)
  } loc(#loc341)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_connect_socket_01.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":76:49)
#loc6 = loc("/usr/include/netinet/in.h":404:1)
#loc7 = loc("/usr/include/netinet/in.h":405:40)
#loc8 = loc("/usr/include/sys/socket.h":126:1)
#loc9 = loc("/usr/include/sys/socket.h":126:75)
#loc10 = loc("/usr/include/sys/socket.h":145:1)
#loc11 = loc("/usr/include/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":102:1)
#loc13 = loc("/usr/include/stdlib.h":103:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":46:1)
#loc19 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":112:1)
#loc20 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":48:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":48:11)
#loc22 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":50:12)
#loc23 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":50:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":51:5)
#loc25 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":106:5)
#loc26 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":56:9)
#loc27 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":56:13)
#loc28 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":57:9)
#loc29 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":57:28)
#loc30 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":58:9)
#loc31 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":58:32)
#loc32 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":59:9)
#loc33 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":59:41)
#loc34 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":60:9)
#loc35 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":95:17)
#loc36 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":69:36)
#loc37 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":69:45)
#loc38 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":69:58)
#loc39 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":69:29)
#loc40 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":69:13)
#loc41 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":69:69)
#loc42 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":70:13)
#loc43 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":73:13)
#loc44 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":70:17)
#loc45 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":70:34)
#loc46 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":71:13)
#loc47 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":72:17)
#loc48 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":74:20)
#loc49 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":74:21)
#loc50 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":74:30)
#loc51 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":74:33)
#loc52 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":74:47)
#loc53 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":74:13)
#loc54 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":74:48)
#loc55 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":75:34)
#loc56 = loc("/usr/include/netinet/in.h":249:5)
#loc57 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":75:13)
#loc58 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":76:39)
#loc59 = loc("/usr/include/netinet/in.h":251:20)
#loc60 = loc("/usr/include/netinet/in.h":33:15)
#loc61 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":76:13)
#loc62 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":76:59)
#loc63 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":77:38)
#loc64 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":77:32)
#loc65 = loc("/usr/include/netinet/in.h":250:15)
#loc66 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":77:13)
#loc67 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":77:46)
#loc68 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":78:13)
#loc69 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":81:13)
#loc70 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":78:25)
#loc71 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":78:58)
#loc72 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":78:59)
#loc73 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":78:68)
#loc74 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":78:82)
#loc75 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":78:17)
#loc76 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":78:88)
#loc77 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":79:13)
#loc78 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":80:17)
#loc79 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":85:31)
#loc80 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":85:46)
#loc81 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":85:59)
#loc82 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":85:77)
#loc83 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":85:80)
#loc84 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":85:26)
#loc85 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":85:13)
#loc86 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":85:81)
#loc87 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":86:13)
#loc88 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":89:13)
#loc89 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":86:17)
#loc90 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":86:31)
#loc91 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":86:44)
#loc92 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":86:47)
#loc93 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":86:61)
#loc94 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":87:13)
#loc95 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":88:17)
#loc96 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":91:39)
#loc97 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":91:25)
#loc98 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":91:13)
#loc99 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":93:32)
#loc100 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":93:27)
#loc101 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":93:13)
#loc102 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":93:43)
#loc103 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":95:16)
#loc104 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":96:9)
#loc105 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":99:9)
#loc106 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":96:13)
#loc107 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":96:30)
#loc108 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":97:9)
#loc109 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":98:26)
#loc110 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":98:13)
#loc111 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":107:5)
#loc112 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":111:5)
#loc113 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":109:9)
#loc114 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":109:40)
#loc115 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":109:28)
#loc116 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":109:36)
#loc117 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":110:22)
#loc118 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":110:9)
#loc119 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":207:1)
#loc120 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":211:1)
#loc121 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":209:5)
#loc122 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":209:13)
#loc123 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":210:5)
#loc124 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":210:13)
#loc125 = loc("/usr/include/stdlib.h":575:1)
#loc126 = loc("/usr/include/stdlib.h":575:41)
#loc127 = loc("/usr/include/time.h":76:1)
#loc128 = loc("/usr/include/time.h":76:38)
#loc129 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc130 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc131 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":227:15)
#loc132 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":229:15)
#loc133 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":232:15)
#loc134 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":234:15)
#loc135 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":222:1)
#loc136 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":237:1)
#loc141 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":223:1)
#loc142 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":225:27)
#loc143 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":225:22)
#loc144 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":225:5)
#loc145 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":227:5)
#loc146 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":228:5)
#loc147 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":228:57)
#loc148 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":229:5)
#loc149 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":232:5)
#loc150 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":233:5)
#loc151 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":233:56)
#loc152 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":234:5)
#loc153 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":236:12)
#loc154 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":236:5)
#loc155 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":119:1)
#loc156 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":131:1)
#loc157 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":121:5)
#loc158 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":121:11)
#loc159 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":123:12)
#loc160 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":123:5)
#loc161 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":125:12)
#loc162 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":125:5)
#loc163 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":126:5)
#loc164 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":130:5)
#loc165 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":128:9)
#loc166 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":128:40)
#loc167 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":128:28)
#loc168 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":128:36)
#loc169 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":129:22)
#loc170 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":129:9)
#loc171 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":203:19)
#loc172 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":134:1)
#loc173 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":205:1)
#loc174 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":136:5)
#loc175 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":136:11)
#loc176 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":138:12)
#loc177 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":138:5)
#loc178 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":139:5)
#loc179 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":194:5)
#loc180 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":144:9)
#loc181 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":144:13)
#loc182 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":145:9)
#loc183 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":145:28)
#loc184 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":146:9)
#loc185 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":146:32)
#loc186 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":147:9)
#loc187 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":147:41)
#loc188 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":148:9)
#loc189 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":183:17)
#loc190 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":157:36)
#loc191 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":157:45)
#loc192 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":157:58)
#loc193 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":157:29)
#loc194 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":157:13)
#loc195 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":157:69)
#loc196 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":158:13)
#loc197 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":161:13)
#loc198 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":158:17)
#loc199 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":158:34)
#loc200 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":159:13)
#loc201 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":160:17)
#loc202 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":162:20)
#loc203 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":162:21)
#loc204 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":162:30)
#loc205 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":162:33)
#loc206 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":162:47)
#loc207 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":162:13)
#loc208 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":162:48)
#loc209 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":163:34)
#loc210 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":163:13)
#loc211 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":164:49)
#loc212 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":164:39)
#loc213 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":164:13)
#loc214 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":164:59)
#loc215 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":165:38)
#loc216 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":165:32)
#loc217 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":165:13)
#loc218 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":165:46)
#loc219 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":166:13)
#loc220 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":169:13)
#loc221 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":166:25)
#loc222 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":166:58)
#loc223 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":166:59)
#loc224 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":166:68)
#loc225 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":166:82)
#loc226 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":166:17)
#loc227 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":166:88)
#loc228 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":167:13)
#loc229 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":168:17)
#loc230 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":173:31)
#loc231 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":173:46)
#loc232 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":173:59)
#loc233 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":173:77)
#loc234 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":173:80)
#loc235 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":173:26)
#loc236 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":173:13)
#loc237 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":173:81)
#loc238 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":174:13)
#loc239 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":177:13)
#loc240 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":174:17)
#loc241 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":174:31)
#loc242 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":174:44)
#loc243 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":174:47)
#loc244 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":174:61)
#loc245 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":175:13)
#loc246 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":176:17)
#loc247 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":179:39)
#loc248 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":179:25)
#loc249 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":179:13)
#loc250 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":181:32)
#loc251 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":181:27)
#loc252 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":181:13)
#loc253 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":181:43)
#loc254 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":183:16)
#loc255 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":184:9)
#loc256 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":187:9)
#loc257 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":184:13)
#loc258 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":184:30)
#loc259 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":185:9)
#loc260 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":186:26)
#loc261 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":186:13)
#loc262 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":196:5)
#loc263 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":204:5)
#loc264 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":196:13)
#loc265 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":196:21)
#loc266 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":196:8)
#loc267 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":197:5)
#loc268 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":200:5)
#loc269 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":202:5)
#loc270 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":198:9)
#loc271 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":198:40)
#loc272 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":198:28)
#loc273 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":198:36)
#loc274 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":199:22)
#loc275 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":199:9)
#loc276 = loc("CWE369_Divide_by_Zero__float_connect_socket_01.c":203:9)
#loc277 = loc(fused[#loc1, #loc2])
#loc278 = loc(fused[#loc3, #loc4])
#loc279 = loc(fused[#loc6, #loc7])
#loc280 = loc(fused[#loc8, #loc9])
#loc281 = loc(fused[#loc10, #loc11])
#loc282 = loc(fused[#loc12, #loc13])
#loc283 = loc(fused[#loc14, #loc15])
#loc284 = loc(fused[#loc16, #loc17])
#loc285 = loc(fused[#loc18, #loc19])
#loc286 = loc(fused[#loc20, #loc21])
#loc287 = loc(fused[#loc23, #loc22])
#loc288 = loc(fused[#loc24, #loc25])
#loc289 = loc(fused[#loc26, #loc27])
#loc290 = loc(fused[#loc28, #loc29])
#loc291 = loc(fused[#loc30, #loc31])
#loc292 = loc(fused[#loc32, #loc33])
#loc293 = loc(fused[#loc34, #loc35])
#loc294 = loc(fused[#loc40, #loc41])
#loc295 = loc(fused[#loc42, #loc43])
#loc296 = loc(fused[#loc44, #loc45])
#loc297 = loc(fused[#loc46, #loc43])
#loc298 = loc(fused[#loc48, #loc49])
#loc299 = loc(fused[#loc51, #loc52])
#loc300 = loc(fused[#loc53, #loc54])
#loc301 = loc(fused[#loc57, #loc55])
#loc302 = loc(fused[#loc61, #loc62])
#loc303 = loc(fused[#loc66, #loc67])
#loc304 = loc(fused[#loc68, #loc69])
#loc305 = loc(fused[#loc71, #loc72])
#loc306 = loc(fused[#loc73, #loc74])
#loc307 = loc(fused[#loc75, #loc76])
#loc308 = loc(fused[#loc77, #loc69])
#loc309 = loc(fused[#loc85, #loc86])
#loc310 = loc(fused[#loc87, #loc88])
#loc311 = loc(fused[#loc89, #loc90])
#loc312 = loc(fused[#loc92, #loc93])
#loc313 = loc(fused[#loc94, #loc88])
#loc314 = loc(fused[#loc98, #loc96])
#loc315 = loc(fused[#loc101, #loc102])
#loc316 = loc(fused[#loc104, #loc105])
#loc317 = loc(fused[#loc106, #loc107])
#loc318 = loc(fused[#loc108, #loc105])
#loc319 = loc(fused[#loc111, #loc112])
#loc320 = loc(fused[#loc113, #loc114])
#loc321 = loc(fused[#loc115, #loc116])
#loc322 = loc(fused[#loc119, #loc120])
#loc323 = loc(fused[#loc121, #loc122])
#loc324 = loc(fused[#loc123, #loc124])
#loc325 = loc(fused[#loc125, #loc126])
#loc326 = loc(fused[#loc127, #loc128])
#loc327 = loc(fused[#loc129, #loc130])
#loc328 = loc(fused[#loc135, #loc136])
#loc331 = loc(fused[#loc146, #loc147])
#loc332 = loc(fused[#loc150, #loc151])
#loc333 = loc(fused[#loc154, #loc153])
#loc334 = loc(fused[#loc155, #loc156])
#loc335 = loc(fused[#loc157, #loc158])
#loc336 = loc(fused[#loc160, #loc159])
#loc337 = loc(fused[#loc162, #loc161])
#loc338 = loc(fused[#loc163, #loc164])
#loc339 = loc(fused[#loc165, #loc166])
#loc340 = loc(fused[#loc167, #loc168])
#loc341 = loc(fused[#loc172, #loc173])
#loc342 = loc(fused[#loc174, #loc175])
#loc343 = loc(fused[#loc177, #loc176])
#loc344 = loc(fused[#loc178, #loc179])
#loc345 = loc(fused[#loc180, #loc181])
#loc346 = loc(fused[#loc182, #loc183])
#loc347 = loc(fused[#loc184, #loc185])
#loc348 = loc(fused[#loc186, #loc187])
#loc349 = loc(fused[#loc188, #loc189])
#loc350 = loc(fused[#loc194, #loc195])
#loc351 = loc(fused[#loc196, #loc197])
#loc352 = loc(fused[#loc198, #loc199])
#loc353 = loc(fused[#loc200, #loc197])
#loc354 = loc(fused[#loc202, #loc203])
#loc355 = loc(fused[#loc205, #loc206])
#loc356 = loc(fused[#loc207, #loc208])
#loc357 = loc(fused[#loc210, #loc209])
#loc358 = loc(fused[#loc213, #loc214])
#loc359 = loc(fused[#loc217, #loc218])
#loc360 = loc(fused[#loc219, #loc220])
#loc361 = loc(fused[#loc222, #loc223])
#loc362 = loc(fused[#loc224, #loc225])
#loc363 = loc(fused[#loc226, #loc227])
#loc364 = loc(fused[#loc228, #loc220])
#loc365 = loc(fused[#loc236, #loc237])
#loc366 = loc(fused[#loc238, #loc239])
#loc367 = loc(fused[#loc240, #loc241])
#loc368 = loc(fused[#loc243, #loc244])
#loc369 = loc(fused[#loc245, #loc239])
#loc370 = loc(fused[#loc249, #loc247])
#loc371 = loc(fused[#loc252, #loc253])
#loc372 = loc(fused[#loc255, #loc256])
#loc373 = loc(fused[#loc257, #loc258])
#loc374 = loc(fused[#loc259, #loc256])
#loc375 = loc(fused[#loc262, #loc263])
#loc376 = loc(fused[#loc266, #loc265])
#loc377 = loc(fused[#loc267, #loc268, #loc269, #loc263])
#loc378 = loc(fused[#loc270, #loc271])
#loc379 = loc(fused[#loc272, #loc273])
