!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc120)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc121)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_for_loop_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc123)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
        cir.condition(%4) loc(#loc15)
      } do {
        %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
        %4 = cir.const #cir.int<1> : !s32i loc(#loc16)
        %5 = cir.binop(and, %3, %4) : !s32i loc(#loc16)
        %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc16)
        %7 = cir.ternary(%6, true {
          %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc16)
          %11 = cir.const #cir.int<30> : !s32i loc(#loc16)
          %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc16)
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc16)
          %15 = cir.const #cir.int<15> : !s32i loc(#loc16)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc16)
          %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc16)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc16)
          %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc16)
          cir.yield %20 : !u32i loc(#loc16)
        }, false {
          %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc16)
          %11 = cir.const #cir.int<30> : !s32i loc(#loc16)
          %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc16)
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc16)
          %15 = cir.const #cir.int<15> : !s32i loc(#loc16)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc16)
          %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc16)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc16)
          %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc16)
          %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc16)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc16)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc16)
          %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc16)
          cir.yield %24 : !u32i loc(#loc16)
        }) : (!cir.bool) -> !u32i loc(#loc16)
        %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc16)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
        cir.break loc(#loc18)
      } loc(#loc125)
    } loc(#loc125)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc21)
        cir.condition(%4) loc(#loc21)
      } do {
        cir.scope {
          %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc129)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc25)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc25)
          cir.store %5, %3 : !u64i, !cir.ptr<!u64i> loc(#loc129)
          cir.scope {
            %6 = cir.const #cir.int<0> : !s32i loc(#loc28)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc28)
            cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc131)
            cir.for : cond {
              %8 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc30)
              %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
              %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc31)
              %11 = cir.cmp(lt, %8, %10) : !u64i, !s32i loc(#loc132)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc32)
              cir.condition(%12) loc(#loc32)
            } body {
              cir.scope {
                %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc5)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc5)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc34)
              } loc(#loc133)
              cir.yield loc(#loc27)
            } step {
              %8 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc35)
              %9 = cir.unary(inc, %8) : !u64i, !u64i loc(#loc36)
              cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc134)
              cir.yield loc(#loc130)
            } loc(#loc130)
          } loc(#loc130)
        } loc(#loc128)
        cir.break loc(#loc37)
      } loc(#loc127)
    } loc(#loc127)
    cir.return loc(#loc7)
  } loc(#loc122)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_for_loop_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc136)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc39)
  } loc(#loc135)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc139)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc49)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc53)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc53)
        cir.condition(%4) loc(#loc53)
      } do {
        %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
        %4 = cir.const #cir.int<1> : !s32i loc(#loc54)
        %5 = cir.binop(and, %3, %4) : !s32i loc(#loc54)
        %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc54)
        %7 = cir.ternary(%6, true {
          %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc54)
          %11 = cir.const #cir.int<30> : !s32i loc(#loc54)
          %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc54)
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc54)
          %15 = cir.const #cir.int<15> : !s32i loc(#loc54)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc54)
          %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc54)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc54)
          %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc54)
          cir.yield %20 : !u32i loc(#loc54)
        }, false {
          %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc54)
          %11 = cir.const #cir.int<30> : !s32i loc(#loc54)
          %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc54)
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc54)
          %15 = cir.const #cir.int<15> : !s32i loc(#loc54)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc54)
          %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc54)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc54)
          %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc54)
          %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc54)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc54)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc54)
          %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc54)
          cir.yield %24 : !u32i loc(#loc54)
        }) : (!cir.bool) -> !u32i loc(#loc54)
        %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc54)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc142)
        cir.break loc(#loc56)
      } loc(#loc141)
    } loc(#loc141)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc59)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc59)
        cir.condition(%4) loc(#loc59)
      } do {
        cir.scope {
          %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc145)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc63)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc63)
          cir.store %5, %3 : !u64i, !cir.ptr<!u64i> loc(#loc145)
          cir.scope {
            %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
            %7 = cir.const #cir.int<0> : !s32i loc(#loc67)
            %8 = cir.cmp(gt, %6, %7) : !s32i, !s32i loc(#loc147)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc68)
            %10 = cir.ternary(%9, true {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
              %12 = cir.const #cir.int<20> : !s32i loc(#loc71)
              %13 = cir.cmp(le, %11, %12) : !s32i, !s32i loc(#loc148)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc72)
              %15 = cir.ternary(%14, true {
                %16 = cir.const #true loc(#loc69)
                cir.yield %16 : !cir.bool loc(#loc69)
              }, false {
                %16 = cir.const #false loc(#loc69)
                cir.yield %16 : !cir.bool loc(#loc69)
              }) : (!cir.bool) -> !cir.bool loc(#loc69)
              cir.yield %15 : !cir.bool loc(#loc69)
            }, false {
              %11 = cir.const #false loc(#loc69)
              cir.yield %11 : !cir.bool loc(#loc69)
            }) : (!cir.bool) -> !cir.bool loc(#loc69)
            cir.if %10 {
              cir.scope {
                %11 = cir.const #cir.int<0> : !s32i loc(#loc76)
                %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc76)
                cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc151)
                cir.for : cond {
                  %13 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc78)
                  %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
                  %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc79)
                  %16 = cir.cmp(lt, %13, %15) : !u64i, !s32i loc(#loc152)
                  %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc80)
                  cir.condition(%17) loc(#loc80)
                } body {
                  cir.scope {
                    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc82)
                    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc82)
                    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc83)
                  } loc(#loc153)
                  cir.yield loc(#loc75)
                } step {
                  %13 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc84)
                  %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc85)
                  cir.store %14, %3 : !u64i, !cir.ptr<!u64i> loc(#loc154)
                  cir.yield loc(#loc150)
                } loc(#loc150)
              } loc(#loc150)
            } loc(#loc149)
          } loc(#loc146)
        } loc(#loc144)
        cir.break loc(#loc86)
      } loc(#loc143)
    } loc(#loc143)
    cir.return loc(#loc45)
  } loc(#loc138)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc92)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc96)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc96)
        cir.condition(%4) loc(#loc96)
      } do {
        %3 = cir.const #cir.int<20> : !s32i loc(#loc97)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc159)
        cir.break loc(#loc99)
      } loc(#loc158)
    } loc(#loc158)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc102)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc102)
        cir.condition(%4) loc(#loc102)
      } do {
        cir.scope {
          %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc162)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc106)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc106)
          cir.store %5, %3 : !u64i, !cir.ptr<!u64i> loc(#loc162)
          cir.scope {
            %6 = cir.const #cir.int<0> : !s32i loc(#loc109)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc109)
            cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc164)
            cir.for : cond {
              %8 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc111)
              %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc112)
              %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc112)
              %11 = cir.cmp(lt, %8, %10) : !u64i, !s32i loc(#loc165)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc113)
              cir.condition(%12) loc(#loc113)
            } body {
              cir.scope {
                %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc115)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc115)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc116)
              } loc(#loc166)
              cir.yield loc(#loc108)
            } step {
              %8 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc117)
              %9 = cir.unary(inc, %8) : !u64i, !u64i loc(#loc118)
              cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc167)
              cir.yield loc(#loc163)
            } loc(#loc163)
          } loc(#loc163)
        } loc(#loc161)
        cir.break loc(#loc119)
      } loc(#loc160)
    } loc(#loc160)
    cir.return loc(#loc88)
  } loc(#loc155)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":40:27)
#loc6 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":22:1)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":45:1)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":24:5)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":24:9)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":26:14)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":26:13)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":26:5)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":27:5)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":32:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":27:11)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":30:17)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":30:9)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":31:9)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":33:5)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":44:5)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":33:11)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":35:9)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":42:9)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":36:13)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":36:24)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":38:13)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":41:13)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":38:22)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":38:18)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":38:25)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":38:37)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":38:27)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":39:13)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":40:17)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":38:45)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":38:44)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":43:9)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":106:1)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":110:1)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":108:5)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":108:13)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":109:5)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":109:13)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":52:1)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":78:1)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":54:5)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":54:9)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":56:14)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":56:13)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":56:5)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":57:5)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":62:5)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":57:11)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":60:17)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":60:9)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":61:9)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":63:5)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":77:5)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":63:11)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":65:9)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":75:9)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":66:13)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":66:24)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":68:13)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":74:13)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":68:17)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":68:25)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":68:23)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":68:27)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":68:30)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":68:39)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":68:36)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":69:13)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":70:17)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":73:17)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":70:26)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":70:22)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":70:29)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":70:41)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":70:31)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":71:17)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":72:31)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":72:21)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":70:49)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":70:48)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":76:9)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":81:1)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":104:1)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":83:5)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":83:9)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":85:14)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":85:13)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":85:5)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":86:5)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":91:5)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":86:11)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":89:17)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":89:9)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":90:9)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":92:5)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":103:5)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":92:11)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":94:9)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":101:9)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":95:13)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":95:24)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":97:13)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":100:13)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":97:22)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":97:18)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":97:25)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":97:37)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":97:27)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":98:13)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":99:27)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":99:17)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":97:45)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":97:44)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":102:9)
#loc120 = loc(fused[#loc1, #loc2])
#loc121 = loc(fused[#loc3, #loc4])
#loc122 = loc(fused[#loc6, #loc7])
#loc123 = loc(fused[#loc8, #loc9])
#loc124 = loc(fused[#loc12, #loc10])
#loc125 = loc(fused[#loc13, #loc14])
#loc126 = loc(fused[#loc17, #loc16])
#loc127 = loc(fused[#loc19, #loc20])
#loc128 = loc(fused[#loc22, #loc23])
#loc129 = loc(fused[#loc24, #loc25])
#loc130 = loc(fused[#loc26, #loc27])
#loc131 = loc(fused[#loc29, #loc28])
#loc132 = loc(fused[#loc30, #loc31])
#loc133 = loc(fused[#loc33, #loc27])
#loc134 = loc(fused[#loc36, #loc35])
#loc135 = loc(fused[#loc38, #loc39])
#loc136 = loc(fused[#loc40, #loc41])
#loc137 = loc(fused[#loc42, #loc43])
#loc138 = loc(fused[#loc44, #loc45])
#loc139 = loc(fused[#loc46, #loc47])
#loc140 = loc(fused[#loc50, #loc48])
#loc141 = loc(fused[#loc51, #loc52])
#loc142 = loc(fused[#loc55, #loc54])
#loc143 = loc(fused[#loc57, #loc58])
#loc144 = loc(fused[#loc60, #loc61])
#loc145 = loc(fused[#loc62, #loc63])
#loc146 = loc(fused[#loc64, #loc65])
#loc147 = loc(fused[#loc66, #loc67])
#loc148 = loc(fused[#loc70, #loc71])
#loc149 = loc(fused[#loc73, #loc65])
#loc150 = loc(fused[#loc74, #loc75])
#loc151 = loc(fused[#loc77, #loc76])
#loc152 = loc(fused[#loc78, #loc79])
#loc153 = loc(fused[#loc81, #loc75])
#loc154 = loc(fused[#loc85, #loc84])
#loc155 = loc(fused[#loc87, #loc88])
#loc156 = loc(fused[#loc89, #loc90])
#loc157 = loc(fused[#loc93, #loc91])
#loc158 = loc(fused[#loc94, #loc95])
#loc159 = loc(fused[#loc98, #loc97])
#loc160 = loc(fused[#loc100, #loc101])
#loc161 = loc(fused[#loc103, #loc104])
#loc162 = loc(fused[#loc105, #loc106])
#loc163 = loc(fused[#loc107, #loc108])
#loc164 = loc(fused[#loc110, #loc109])
#loc165 = loc(fused[#loc111, #loc112])
#loc166 = loc(fused[#loc114, #loc108])
#loc167 = loc(fused[#loc118, #loc117])
