!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc177 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":392:10)
#loc178 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":392:14)
#loc179 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":392:20)
#loc180 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":392:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc610 = loc(fused[#loc177, #loc178])
#loc611 = loc(fused[#loc179, #loc180])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_square_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc540)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc541)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc542)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc543)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc544)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc545)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc546)
  cir.func private @close(!s32i) -> !s32i loc(#loc547)
  cir.func private @printIntLine(!s32i) loc(#loc548)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_square_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc550)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc23)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc551)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc27)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc27)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc555)
          %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc556)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc557)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc558)
          %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc559)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc36)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc36)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc557)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc38)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc38)
          cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc558)
          cir.scope {
            cir.do {
              %13 = cir.const #cir.int<2> : !s32i loc(#loc43)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc44)
              %15 = cir.const #cir.int<6> : !s32i loc(#loc45)
              %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc46)
              cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc561)
              cir.scope {
                %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc51)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc52)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc52)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc563)
                cir.if %61 {
                  cir.break loc(#loc54)
                } loc(#loc564)
              } loc(#loc562)
              %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc565)
              %18 = cir.const #cir.int<0> : !s32i loc(#loc57)
              %19 = cir.const #cir.int<16> : !u64i loc(#loc566)
              cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc567)
              %20 = cir.const #cir.int<2> : !s32i loc(#loc62)
              %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc62)
              %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc63)
              cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc568)
              %23 = cir.const #cir.int<0> : !s32i loc(#loc65)
              %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc65)
              %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc66)
              %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc67)
              cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc569)
              %27 = cir.const #cir.int<27015> : !s32i loc(#loc69)
              %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc69)
              %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc70)
              %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc570)
              cir.scope {
                %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc76)
                %59 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc572)
                %60 = cir.const #cir.int<16> : !u64i loc(#loc573)
                %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc573)
                %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc81)
                %63 = cir.const #cir.int<1> : !s32i loc(#loc82)
                %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc82)
                %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc574)
                cir.if %65 {
                  cir.break loc(#loc84)
                } loc(#loc575)
              } loc(#loc571)
              cir.scope {
                %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc87)
                %59 = cir.const #cir.int<5> : !s32i loc(#loc88)
                %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc89)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc90)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc90)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc577)
                cir.if %63 {
                  cir.break loc(#loc92)
                } loc(#loc578)
              } loc(#loc576)
              %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc93)
              %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc94)
              %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc95)
              %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc96)
              cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc579)
              cir.scope {
                %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc101)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc102)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc102)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc581)
                cir.if %61 {
                  cir.break loc(#loc104)
                } loc(#loc582)
              } loc(#loc580)
              %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc105)
              %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc106)
              %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc106)
              %38 = cir.const #cir.int<3> : !s32i loc(#loc107)
              %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc107)
              %40 = cir.const #cir.int<4> : !u64i loc(#loc107)
              %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc107)
              %42 = cir.const #cir.int<2> : !s32i loc(#loc107)
              %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc107)
              %44 = cir.binop(add, %41, %43) : !u64i loc(#loc107)
              %45 = cir.const #cir.int<1> : !s32i loc(#loc108)
              %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc108)
              %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc583)
              %48 = cir.const #cir.int<0> : !s32i loc(#loc109)
              %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc110)
              %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc110)
              cir.store %50, %4 : !s32i, !cir.ptr<!s32i> loc(#loc584)
              cir.scope {
                %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc115)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc116)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc116)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc586)
                %62 = cir.ternary(%61, true {
                  %63 = cir.const #true loc(#loc117)
                  cir.yield %63 : !cir.bool loc(#loc117)
                }, false {
                  %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc118)
                  %64 = cir.const #cir.int<0> : !s32i loc(#loc119)
                  %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc587)
                  %66 = cir.ternary(%65, true {
                    %67 = cir.const #true loc(#loc117)
                    cir.yield %67 : !cir.bool loc(#loc117)
                  }, false {
                    %67 = cir.const #false loc(#loc117)
                    cir.yield %67 : !cir.bool loc(#loc117)
                  }) : (!cir.bool) -> !cir.bool loc(#loc117)
                  cir.yield %66 : !cir.bool loc(#loc117)
                }) : (!cir.bool) -> !cir.bool loc(#loc117)
                cir.if %62 {
                  cir.break loc(#loc121)
                } loc(#loc588)
              } loc(#loc585)
              %51 = cir.const #cir.int<0> : !s32i loc(#loc122)
              %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc122)
              %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc123)
              %54 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc124)
              %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc124)
              cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc589)
              %56 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc125)
              %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc126)
              cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc590)
              cir.yield loc(#loc42)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc129)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc129)
              cir.condition(%14) loc(#loc129)
            } loc(#loc560)
          } loc(#loc560)
          cir.scope {
            %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc132)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc133)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc133)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc592)
            cir.if %16 {
              %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc135)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc136)
            } loc(#loc593)
          } loc(#loc591)
          cir.scope {
            %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc139)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc140)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc140)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc595)
            cir.if %16 {
              %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc142)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc143)
            } loc(#loc596)
          } loc(#loc594)
        } loc(#loc554)
      } loc(#loc553)
    } loc(#loc552)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc146)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc146)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc600)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
          %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc152)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc600)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc153)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc154)
        } loc(#loc599)
      } loc(#loc598)
    } loc(#loc597)
    cir.return loc(#loc20)
  } loc(#loc549)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_square_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc602)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc157)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc603)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc159)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc604)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc161)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc605)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc163)
    cir.return loc(#loc156)
  } loc(#loc601)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc606)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc607)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc608)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc173)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc174)
  cir.func @main(%arg0: !s32i loc(fused[#loc177, #loc178]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc179, #loc180])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc610)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc611)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc176)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc181)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc182)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc183)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc183)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc184)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc171)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc171)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc185)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_listen_socket_square_02_good : !cir.ptr<!cir.func<!void ()>> loc(#loc612)
    cir.call @CWE190_Integer_Overflow__int_listen_socket_square_02_good() : () -> () loc(#loc186)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc172)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc172)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc188)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc173)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc173)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc189)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_listen_socket_square_02_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc613)
    cir.call @CWE190_Integer_Overflow__int_listen_socket_square_02_bad() : () -> () loc(#loc190)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc174)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc174)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc192)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc193)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc614)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc614)
    cir.return %17 : !s32i loc(#loc614)
  } loc(#loc609)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc195)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc196)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc197)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc616)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc202)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc617)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc206)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc206)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc621)
          %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc622)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc623)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc624)
          %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc625)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc215)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc215)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc623)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc217)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc217)
          cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc624)
          cir.scope {
            cir.do {
              %13 = cir.const #cir.int<2> : !s32i loc(#loc222)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc223)
              %15 = cir.const #cir.int<6> : !s32i loc(#loc224)
              %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc225)
              cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc627)
              cir.scope {
                %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc230)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc231)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc231)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc629)
                cir.if %61 {
                  cir.break loc(#loc233)
                } loc(#loc630)
              } loc(#loc628)
              %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc631)
              %18 = cir.const #cir.int<0> : !s32i loc(#loc236)
              %19 = cir.const #cir.int<16> : !u64i loc(#loc632)
              cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc633)
              %20 = cir.const #cir.int<2> : !s32i loc(#loc241)
              %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc241)
              %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc63)
              cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc634)
              %23 = cir.const #cir.int<0> : !s32i loc(#loc243)
              %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc243)
              %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc66)
              %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc67)
              cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc635)
              %27 = cir.const #cir.int<27015> : !s32i loc(#loc245)
              %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc245)
              %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc246)
              %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc636)
              cir.scope {
                %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc251)
                %59 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc638)
                %60 = cir.const #cir.int<16> : !u64i loc(#loc639)
                %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc639)
                %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc256)
                %63 = cir.const #cir.int<1> : !s32i loc(#loc257)
                %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc257)
                %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc640)
                cir.if %65 {
                  cir.break loc(#loc259)
                } loc(#loc641)
              } loc(#loc637)
              cir.scope {
                %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc262)
                %59 = cir.const #cir.int<5> : !s32i loc(#loc263)
                %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc264)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc265)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc265)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc643)
                cir.if %63 {
                  cir.break loc(#loc267)
                } loc(#loc644)
              } loc(#loc642)
              %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc268)
              %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc269)
              %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc270)
              %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc271)
              cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc645)
              cir.scope {
                %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc276)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc277)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc277)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc647)
                cir.if %61 {
                  cir.break loc(#loc279)
                } loc(#loc648)
              } loc(#loc646)
              %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc280)
              %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc281)
              %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc281)
              %38 = cir.const #cir.int<3> : !s32i loc(#loc282)
              %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc282)
              %40 = cir.const #cir.int<4> : !u64i loc(#loc282)
              %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc282)
              %42 = cir.const #cir.int<2> : !s32i loc(#loc282)
              %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc282)
              %44 = cir.binop(add, %41, %43) : !u64i loc(#loc282)
              %45 = cir.const #cir.int<1> : !s32i loc(#loc283)
              %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc283)
              %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc649)
              %48 = cir.const #cir.int<0> : !s32i loc(#loc284)
              %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc285)
              %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc285)
              cir.store %50, %4 : !s32i, !cir.ptr<!s32i> loc(#loc650)
              cir.scope {
                %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc290)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc291)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc291)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc652)
                %62 = cir.ternary(%61, true {
                  %63 = cir.const #true loc(#loc292)
                  cir.yield %63 : !cir.bool loc(#loc292)
                }, false {
                  %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc293)
                  %64 = cir.const #cir.int<0> : !s32i loc(#loc294)
                  %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc653)
                  %66 = cir.ternary(%65, true {
                    %67 = cir.const #true loc(#loc292)
                    cir.yield %67 : !cir.bool loc(#loc292)
                  }, false {
                    %67 = cir.const #false loc(#loc292)
                    cir.yield %67 : !cir.bool loc(#loc292)
                  }) : (!cir.bool) -> !cir.bool loc(#loc292)
                  cir.yield %66 : !cir.bool loc(#loc292)
                }) : (!cir.bool) -> !cir.bool loc(#loc292)
                cir.if %62 {
                  cir.break loc(#loc296)
                } loc(#loc654)
              } loc(#loc651)
              %51 = cir.const #cir.int<0> : !s32i loc(#loc297)
              %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc297)
              %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc298)
              %54 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc299)
              %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc299)
              cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc655)
              %56 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc300)
              %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc301)
              cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc656)
              cir.yield loc(#loc221)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc304)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc304)
              cir.condition(%14) loc(#loc304)
            } loc(#loc626)
          } loc(#loc626)
          cir.scope {
            %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc307)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc308)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc308)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc658)
            cir.if %16 {
              %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc310)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc311)
            } loc(#loc659)
          } loc(#loc657)
          cir.scope {
            %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc314)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc315)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc315)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc661)
            cir.if %16 {
              %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc317)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc318)
            } loc(#loc662)
          } loc(#loc660)
        } loc(#loc620)
      } loc(#loc619)
    } loc(#loc618)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc321)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc321)
      cir.if %3 {
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc195)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc195)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc325)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc328)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc329)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc329)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc329)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc329)
          %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc666)
          %10 = cir.ternary(%9, true {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc331)
            %12 = cir.abs %11 poison : !s32i loc(#loc332)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc332)
            %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc333)
            %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc334)
            %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc334)
            %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc333)
            %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc333)
            %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc667)
            %20 = cir.ternary(%19, true {
              %21 = cir.const #true loc(#loc330)
              cir.yield %21 : !cir.bool loc(#loc330)
            }, false {
              %21 = cir.const #false loc(#loc330)
              cir.yield %21 : !cir.bool loc(#loc330)
            }) : (!cir.bool) -> !cir.bool loc(#loc330)
            cir.yield %20 : !cir.bool loc(#loc330)
          }, false {
            %11 = cir.const #false loc(#loc330)
            cir.yield %11 : !cir.bool loc(#loc330)
          }) : (!cir.bool) -> !cir.bool loc(#loc330)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc669)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc341)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc340)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc341)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc669)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc342)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc343)
          } else {
            %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc197)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc197)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc344)
          } loc(#loc668)
        } loc(#loc665)
      } loc(#loc664)
    } loc(#loc663)
    cir.return loc(#loc199)
  } loc(#loc615)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc671)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc349)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc672)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc353)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc353)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc676)
          %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc677)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc678)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc679)
          %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc680)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc362)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc362)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc678)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc364)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc364)
          cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc679)
          cir.scope {
            cir.do {
              %13 = cir.const #cir.int<2> : !s32i loc(#loc369)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc370)
              %15 = cir.const #cir.int<6> : !s32i loc(#loc371)
              %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc372)
              cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc682)
              cir.scope {
                %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc377)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc378)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc378)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc684)
                cir.if %61 {
                  cir.break loc(#loc380)
                } loc(#loc685)
              } loc(#loc683)
              %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc686)
              %18 = cir.const #cir.int<0> : !s32i loc(#loc383)
              %19 = cir.const #cir.int<16> : !u64i loc(#loc687)
              cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc688)
              %20 = cir.const #cir.int<2> : !s32i loc(#loc388)
              %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc388)
              %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc63)
              cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc689)
              %23 = cir.const #cir.int<0> : !s32i loc(#loc390)
              %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc390)
              %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc66)
              %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc67)
              cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc690)
              %27 = cir.const #cir.int<27015> : !s32i loc(#loc392)
              %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc392)
              %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc393)
              %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc691)
              cir.scope {
                %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc398)
                %59 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc693)
                %60 = cir.const #cir.int<16> : !u64i loc(#loc694)
                %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc694)
                %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc403)
                %63 = cir.const #cir.int<1> : !s32i loc(#loc404)
                %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc404)
                %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc695)
                cir.if %65 {
                  cir.break loc(#loc406)
                } loc(#loc696)
              } loc(#loc692)
              cir.scope {
                %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc409)
                %59 = cir.const #cir.int<5> : !s32i loc(#loc410)
                %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc411)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc412)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc412)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc698)
                cir.if %63 {
                  cir.break loc(#loc414)
                } loc(#loc699)
              } loc(#loc697)
              %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc415)
              %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc416)
              %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc417)
              %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc418)
              cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc700)
              cir.scope {
                %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc423)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc424)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc424)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc702)
                cir.if %61 {
                  cir.break loc(#loc426)
                } loc(#loc703)
              } loc(#loc701)
              %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc427)
              %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc428)
              %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc428)
              %38 = cir.const #cir.int<3> : !s32i loc(#loc429)
              %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc429)
              %40 = cir.const #cir.int<4> : !u64i loc(#loc429)
              %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc429)
              %42 = cir.const #cir.int<2> : !s32i loc(#loc429)
              %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc429)
              %44 = cir.binop(add, %41, %43) : !u64i loc(#loc429)
              %45 = cir.const #cir.int<1> : !s32i loc(#loc430)
              %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc430)
              %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc704)
              %48 = cir.const #cir.int<0> : !s32i loc(#loc431)
              %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc432)
              %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc432)
              cir.store %50, %4 : !s32i, !cir.ptr<!s32i> loc(#loc705)
              cir.scope {
                %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc437)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc438)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc438)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc707)
                %62 = cir.ternary(%61, true {
                  %63 = cir.const #true loc(#loc439)
                  cir.yield %63 : !cir.bool loc(#loc439)
                }, false {
                  %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc440)
                  %64 = cir.const #cir.int<0> : !s32i loc(#loc441)
                  %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc708)
                  %66 = cir.ternary(%65, true {
                    %67 = cir.const #true loc(#loc439)
                    cir.yield %67 : !cir.bool loc(#loc439)
                  }, false {
                    %67 = cir.const #false loc(#loc439)
                    cir.yield %67 : !cir.bool loc(#loc439)
                  }) : (!cir.bool) -> !cir.bool loc(#loc439)
                  cir.yield %66 : !cir.bool loc(#loc439)
                }) : (!cir.bool) -> !cir.bool loc(#loc439)
                cir.if %62 {
                  cir.break loc(#loc443)
                } loc(#loc709)
              } loc(#loc706)
              %51 = cir.const #cir.int<0> : !s32i loc(#loc444)
              %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc444)
              %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc445)
              %54 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc446)
              %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc446)
              cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc710)
              %56 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc447)
              %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc448)
              cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc711)
              cir.yield loc(#loc368)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc451)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc451)
              cir.condition(%14) loc(#loc451)
            } loc(#loc681)
          } loc(#loc681)
          cir.scope {
            %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc454)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc455)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc455)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc713)
            cir.if %16 {
              %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc457)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc458)
            } loc(#loc714)
          } loc(#loc712)
          cir.scope {
            %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc461)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc462)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc462)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc716)
            cir.if %16 {
              %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc464)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc465)
            } loc(#loc717)
          } loc(#loc715)
        } loc(#loc675)
      } loc(#loc674)
    } loc(#loc673)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc468)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc468)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc472)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc473)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc473)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc473)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc473)
          %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc721)
          %10 = cir.ternary(%9, true {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc475)
            %12 = cir.abs %11 poison : !s32i loc(#loc476)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc476)
            %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc477)
            %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc478)
            %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc478)
            %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc477)
            %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc477)
            %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc722)
            %20 = cir.ternary(%19, true {
              %21 = cir.const #true loc(#loc474)
              cir.yield %21 : !cir.bool loc(#loc474)
            }, false {
              %21 = cir.const #false loc(#loc474)
              cir.yield %21 : !cir.bool loc(#loc474)
            }) : (!cir.bool) -> !cir.bool loc(#loc474)
            cir.yield %20 : !cir.bool loc(#loc474)
          }, false {
            %11 = cir.const #false loc(#loc474)
            cir.yield %11 : !cir.bool loc(#loc474)
          }) : (!cir.bool) -> !cir.bool loc(#loc474)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc724)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc485)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc484)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc485)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc724)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc486)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc487)
          } else {
            %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc488)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc488)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc489)
          } loc(#loc723)
        } loc(#loc720)
      } loc(#loc719)
    } loc(#loc718)
    cir.return loc(#loc346)
  } loc(#loc670)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc726)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc494)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc727)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc498)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc498)
      cir.if %3 {
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc502)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc502)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc503)
      } else {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc504)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc730)
      } loc(#loc729)
    } loc(#loc728)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc508)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc508)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc734)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc514)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc513)
          %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc514)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc734)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc515)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc516)
        } loc(#loc733)
      } loc(#loc732)
    } loc(#loc731)
    cir.return loc(#loc491)
  } loc(#loc725)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc736)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc521)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc737)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc525)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc525)
      cir.if %3 {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc527)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc740)
      } loc(#loc739)
    } loc(#loc738)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc531)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc531)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc744)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc537)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc536)
          %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc537)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc744)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc538)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc539)
        } loc(#loc743)
      } loc(#loc742)
    } loc(#loc741)
    cir.return loc(#loc518)
  } loc(#loc735)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_square_02.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":46:1)
#loc20 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":131:1)
#loc21 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":48:5)
#loc22 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":48:9)
#loc23 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":50:12)
#loc24 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":50:5)
#loc25 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":51:5)
#loc26 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":122:5)
#loc27 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":51:8)
#loc28 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":52:5)
#loc29 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":53:9)
#loc30 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":121:9)
#loc31 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":58:13)
#loc32 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":58:17)
#loc33 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":59:13)
#loc34 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":59:32)
#loc35 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":60:13)
#loc36 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":60:35)
#loc37 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":61:13)
#loc38 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":61:35)
#loc39 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":62:13)
#loc40 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":62:45)
#loc41 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":63:13)
#loc42 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":106:21)
#loc43 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":73:39)
#loc44 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":73:48)
#loc45 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":73:61)
#loc46 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":73:32)
#loc47 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":73:17)
#loc48 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":73:72)
#loc49 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":74:17)
#loc50 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":77:17)
#loc51 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":74:21)
#loc52 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":74:37)
#loc53 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":75:17)
#loc54 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":76:21)
#loc55 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":78:24)
#loc56 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":78:25)
#loc57 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":78:34)
#loc58 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":78:37)
#loc59 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":78:51)
#loc60 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":78:17)
#loc61 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":78:52)
#loc62 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":79:38)
#loc63 = loc("/usr/include/netinet/in.h":249:5)
#loc64 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":79:17)
#loc65 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":80:43)
#loc66 = loc("/usr/include/netinet/in.h":251:20)
#loc67 = loc("/usr/include/netinet/in.h":33:15)
#loc68 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":80:17)
#loc69 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":81:42)
#loc70 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":81:36)
#loc71 = loc("/usr/include/netinet/in.h":250:15)
#loc72 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":81:17)
#loc73 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":81:50)
#loc74 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":82:17)
#loc75 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":85:17)
#loc76 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":82:26)
#loc77 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":82:58)
#loc78 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":82:59)
#loc79 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":82:68)
#loc80 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":82:82)
#loc81 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":82:21)
#loc82 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":82:88)
#loc83 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":83:17)
#loc84 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":84:21)
#loc85 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":86:17)
#loc86 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":89:17)
#loc87 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":86:28)
#loc88 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":86:42)
#loc89 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":86:21)
#loc90 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":86:61)
#loc91 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":87:17)
#loc92 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":88:21)
#loc93 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":90:39)
#loc94 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":90:53)
#loc95 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":90:59)
#loc96 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":90:32)
#loc97 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":90:17)
#loc98 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":90:63)
#loc99 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":91:17)
#loc100 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":94:17)
#loc101 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":91:21)
#loc102 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":91:37)
#loc103 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":92:17)
#loc104 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":93:21)
#loc105 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":96:35)
#loc106 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":96:49)
#loc107 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":96:62)
#loc108 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":96:80)
#loc109 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":96:83)
#loc110 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":96:30)
#loc111 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":96:17)
#loc112 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":96:84)
#loc113 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":97:17)
#loc114 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":100:17)
#loc115 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":97:21)
#loc116 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":97:35)
#loc117 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":97:48)
#loc118 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":97:51)
#loc119 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":97:65)
#loc120 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":98:17)
#loc121 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":99:21)
#loc122 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":102:43)
#loc123 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":102:29)
#loc124 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":102:17)
#loc125 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":104:29)
#loc126 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":104:24)
#loc127 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":104:17)
#loc128 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":104:40)
#loc129 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":106:20)
#loc130 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":107:13)
#loc131 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":110:13)
#loc132 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":107:17)
#loc133 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":107:33)
#loc134 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":108:13)
#loc135 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":109:30)
#loc136 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":109:17)
#loc137 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":111:13)
#loc138 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":114:13)
#loc139 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":111:17)
#loc140 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":111:33)
#loc141 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":112:13)
#loc142 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":113:30)
#loc143 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":113:17)
#loc144 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":123:5)
#loc145 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":130:5)
#loc146 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":123:8)
#loc147 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":124:5)
#loc148 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":125:9)
#loc149 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":129:9)
#loc150 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":127:13)
#loc151 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":127:33)
#loc152 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":127:26)
#loc153 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":128:26)
#loc154 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":128:13)
#loc155 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":375:1)
#loc156 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":381:1)
#loc157 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":377:5)
#loc158 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":377:14)
#loc159 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":378:5)
#loc160 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":378:14)
#loc161 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":379:5)
#loc162 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":379:14)
#loc163 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":380:5)
#loc164 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":380:14)
#loc165 = loc("/usr/include/stdlib.h":575:1)
#loc166 = loc("/usr/include/stdlib.h":575:41)
#loc167 = loc("/usr/include/time.h":76:1)
#loc168 = loc("/usr/include/time.h":76:38)
#loc169 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc170 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc171 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":397:15)
#loc172 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":399:15)
#loc173 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":402:15)
#loc174 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":404:15)
#loc175 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":392:1)
#loc176 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":407:1)
#loc181 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":393:1)
#loc182 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":395:27)
#loc183 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":395:22)
#loc184 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":395:5)
#loc185 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":397:5)
#loc186 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":398:5)
#loc187 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":398:63)
#loc188 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":399:5)
#loc189 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":402:5)
#loc190 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":403:5)
#loc191 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":403:62)
#loc192 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":404:5)
#loc193 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":406:12)
#loc194 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":406:5)
#loc195 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":218:19)
#loc196 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc197 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":230:23)
#loc198 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":138:1)
#loc199 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":233:1)
#loc200 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":140:5)
#loc201 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":140:9)
#loc202 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":142:12)
#loc203 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":142:5)
#loc204 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":143:5)
#loc205 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":214:5)
#loc206 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":143:8)
#loc207 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":144:5)
#loc208 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":145:9)
#loc209 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":213:9)
#loc210 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":150:13)
#loc211 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":150:17)
#loc212 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":151:13)
#loc213 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":151:32)
#loc214 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":152:13)
#loc215 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":152:35)
#loc216 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":153:13)
#loc217 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":153:35)
#loc218 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":154:13)
#loc219 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":154:45)
#loc220 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":155:13)
#loc221 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":198:21)
#loc222 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":165:39)
#loc223 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":165:48)
#loc224 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":165:61)
#loc225 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":165:32)
#loc226 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":165:17)
#loc227 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":165:72)
#loc228 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":166:17)
#loc229 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":169:17)
#loc230 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":166:21)
#loc231 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":166:37)
#loc232 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":167:17)
#loc233 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":168:21)
#loc234 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":170:24)
#loc235 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":170:25)
#loc236 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":170:34)
#loc237 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":170:37)
#loc238 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":170:51)
#loc239 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":170:17)
#loc240 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":170:52)
#loc241 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":171:38)
#loc242 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":171:17)
#loc243 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":172:43)
#loc244 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":172:17)
#loc245 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":173:42)
#loc246 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":173:36)
#loc247 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":173:17)
#loc248 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":173:50)
#loc249 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":174:17)
#loc250 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":177:17)
#loc251 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":174:26)
#loc252 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":174:58)
#loc253 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":174:59)
#loc254 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":174:68)
#loc255 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":174:82)
#loc256 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":174:21)
#loc257 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":174:88)
#loc258 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":175:17)
#loc259 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":176:21)
#loc260 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":178:17)
#loc261 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":181:17)
#loc262 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":178:28)
#loc263 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":178:42)
#loc264 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":178:21)
#loc265 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":178:61)
#loc266 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":179:17)
#loc267 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":180:21)
#loc268 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":182:39)
#loc269 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":182:53)
#loc270 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":182:59)
#loc271 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":182:32)
#loc272 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":182:17)
#loc273 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":182:63)
#loc274 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":183:17)
#loc275 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":186:17)
#loc276 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":183:21)
#loc277 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":183:37)
#loc278 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":184:17)
#loc279 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":185:21)
#loc280 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":188:35)
#loc281 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":188:49)
#loc282 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":188:62)
#loc283 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":188:80)
#loc284 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":188:83)
#loc285 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":188:30)
#loc286 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":188:17)
#loc287 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":188:84)
#loc288 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":189:17)
#loc289 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":192:17)
#loc290 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":189:21)
#loc291 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":189:35)
#loc292 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":189:48)
#loc293 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":189:51)
#loc294 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":189:65)
#loc295 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":190:17)
#loc296 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":191:21)
#loc297 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":194:43)
#loc298 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":194:29)
#loc299 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":194:17)
#loc300 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":196:29)
#loc301 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":196:24)
#loc302 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":196:17)
#loc303 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":196:40)
#loc304 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":198:20)
#loc305 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":199:13)
#loc306 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":202:13)
#loc307 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":199:17)
#loc308 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":199:33)
#loc309 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":200:13)
#loc310 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":201:30)
#loc311 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":201:17)
#loc312 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":203:13)
#loc313 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":206:13)
#loc314 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":203:17)
#loc315 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":203:33)
#loc316 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":204:13)
#loc317 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":205:30)
#loc318 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":205:17)
#loc319 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":215:5)
#loc320 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":232:5)
#loc321 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":215:8)
#loc322 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":216:5)
#loc323 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":219:5)
#loc324 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":221:5)
#loc325 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":218:9)
#loc326 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":223:9)
#loc327 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":231:9)
#loc328 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":223:13)
#loc329 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":223:20)
#loc330 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":223:28)
#loc331 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":223:35)
#loc332 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":223:31)
#loc333 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":223:49)
#loc334 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":223:62)
#loc335 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":223:69)
#loc336 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":224:9)
#loc337 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":227:9)
#loc338 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":229:9)
#loc339 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":225:13)
#loc340 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":225:33)
#loc341 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":225:26)
#loc342 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":226:26)
#loc343 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":226:13)
#loc344 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":230:13)
#loc345 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":236:1)
#loc346 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":326:1)
#loc347 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":238:5)
#loc348 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":238:9)
#loc349 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":240:12)
#loc350 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":240:5)
#loc351 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":241:5)
#loc352 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":312:5)
#loc353 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":241:8)
#loc354 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":242:5)
#loc355 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":243:9)
#loc356 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":311:9)
#loc357 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":248:13)
#loc358 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":248:17)
#loc359 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":249:13)
#loc360 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":249:32)
#loc361 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":250:13)
#loc362 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":250:35)
#loc363 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":251:13)
#loc364 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":251:35)
#loc365 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":252:13)
#loc366 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":252:45)
#loc367 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":253:13)
#loc368 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":296:21)
#loc369 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":263:39)
#loc370 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":263:48)
#loc371 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":263:61)
#loc372 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":263:32)
#loc373 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":263:17)
#loc374 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":263:72)
#loc375 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":264:17)
#loc376 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":267:17)
#loc377 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":264:21)
#loc378 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":264:37)
#loc379 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":265:17)
#loc380 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":266:21)
#loc381 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":268:24)
#loc382 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":268:25)
#loc383 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":268:34)
#loc384 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":268:37)
#loc385 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":268:51)
#loc386 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":268:17)
#loc387 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":268:52)
#loc388 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":269:38)
#loc389 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":269:17)
#loc390 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":270:43)
#loc391 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":270:17)
#loc392 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":271:42)
#loc393 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":271:36)
#loc394 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":271:17)
#loc395 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":271:50)
#loc396 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":272:17)
#loc397 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":275:17)
#loc398 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":272:26)
#loc399 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":272:58)
#loc400 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":272:59)
#loc401 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":272:68)
#loc402 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":272:82)
#loc403 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":272:21)
#loc404 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":272:88)
#loc405 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":273:17)
#loc406 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":274:21)
#loc407 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":276:17)
#loc408 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":279:17)
#loc409 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":276:28)
#loc410 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":276:42)
#loc411 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":276:21)
#loc412 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":276:61)
#loc413 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":277:17)
#loc414 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":278:21)
#loc415 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":280:39)
#loc416 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":280:53)
#loc417 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":280:59)
#loc418 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":280:32)
#loc419 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":280:17)
#loc420 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":280:63)
#loc421 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":281:17)
#loc422 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":284:17)
#loc423 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":281:21)
#loc424 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":281:37)
#loc425 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":282:17)
#loc426 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":283:21)
#loc427 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":286:35)
#loc428 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":286:49)
#loc429 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":286:62)
#loc430 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":286:80)
#loc431 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":286:83)
#loc432 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":286:30)
#loc433 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":286:17)
#loc434 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":286:84)
#loc435 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":287:17)
#loc436 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":290:17)
#loc437 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":287:21)
#loc438 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":287:35)
#loc439 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":287:48)
#loc440 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":287:51)
#loc441 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":287:65)
#loc442 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":288:17)
#loc443 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":289:21)
#loc444 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":292:43)
#loc445 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":292:29)
#loc446 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":292:17)
#loc447 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":294:29)
#loc448 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":294:24)
#loc449 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":294:17)
#loc450 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":294:40)
#loc451 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":296:20)
#loc452 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":297:13)
#loc453 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":300:13)
#loc454 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":297:17)
#loc455 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":297:33)
#loc456 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":298:13)
#loc457 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":299:30)
#loc458 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":299:17)
#loc459 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":301:13)
#loc460 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":304:13)
#loc461 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":301:17)
#loc462 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":301:33)
#loc463 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":302:13)
#loc464 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":303:30)
#loc465 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":303:17)
#loc466 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":313:5)
#loc467 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":325:5)
#loc468 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":313:8)
#loc469 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":314:5)
#loc470 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":316:9)
#loc471 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":324:9)
#loc472 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":316:13)
#loc473 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":316:20)
#loc474 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":316:28)
#loc475 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":316:35)
#loc476 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":316:31)
#loc477 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":316:49)
#loc478 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":316:62)
#loc479 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":316:69)
#loc480 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":317:9)
#loc481 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":320:9)
#loc482 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":322:9)
#loc483 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":318:13)
#loc484 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":318:33)
#loc485 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":318:26)
#loc486 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":319:26)
#loc487 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":319:13)
#loc488 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":323:23)
#loc489 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":323:13)
#loc490 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":329:1)
#loc491 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":352:1)
#loc492 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":331:5)
#loc493 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":331:9)
#loc494 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":333:12)
#loc495 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":333:5)
#loc496 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":334:5)
#loc497 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":343:5)
#loc498 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":334:8)
#loc499 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":335:5)
#loc500 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":338:5)
#loc501 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":340:5)
#loc502 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":337:19)
#loc503 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":337:9)
#loc504 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":342:16)
#loc505 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":342:9)
#loc506 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":344:5)
#loc507 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":351:5)
#loc508 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":344:8)
#loc509 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":345:5)
#loc510 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":346:9)
#loc511 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":350:9)
#loc512 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":348:13)
#loc513 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":348:33)
#loc514 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":348:26)
#loc515 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":349:26)
#loc516 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":349:13)
#loc517 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":355:1)
#loc518 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":373:1)
#loc519 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":357:5)
#loc520 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":357:9)
#loc521 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":359:12)
#loc522 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":359:5)
#loc523 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":360:5)
#loc524 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":364:5)
#loc525 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":360:8)
#loc526 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":361:5)
#loc527 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":363:16)
#loc528 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":363:9)
#loc529 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":365:5)
#loc530 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":372:5)
#loc531 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":365:8)
#loc532 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":366:5)
#loc533 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":367:9)
#loc534 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":371:9)
#loc535 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":369:13)
#loc536 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":369:33)
#loc537 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":369:26)
#loc538 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":370:26)
#loc539 = loc("CWE190_Integer_Overflow__int_listen_socket_square_02.c":370:13)
#loc540 = loc(fused[#loc1, #loc2])
#loc541 = loc(fused[#loc3, #loc4])
#loc542 = loc(fused[#loc5, #loc6])
#loc543 = loc(fused[#loc7, #loc8])
#loc544 = loc(fused[#loc9, #loc10])
#loc545 = loc(fused[#loc11, #loc12])
#loc546 = loc(fused[#loc13, #loc14])
#loc547 = loc(fused[#loc15, #loc16])
#loc548 = loc(fused[#loc17, #loc18])
#loc549 = loc(fused[#loc19, #loc20])
#loc550 = loc(fused[#loc21, #loc22])
#loc551 = loc(fused[#loc24, #loc23])
#loc552 = loc(fused[#loc25, #loc26])
#loc553 = loc(fused[#loc28, #loc26])
#loc554 = loc(fused[#loc29, #loc30])
#loc555 = loc(fused[#loc31, #loc32])
#loc556 = loc(fused[#loc33, #loc34])
#loc557 = loc(fused[#loc35, #loc36])
#loc558 = loc(fused[#loc37, #loc38])
#loc559 = loc(fused[#loc39, #loc40])
#loc560 = loc(fused[#loc41, #loc42])
#loc561 = loc(fused[#loc47, #loc48])
#loc562 = loc(fused[#loc49, #loc50])
#loc563 = loc(fused[#loc51, #loc52])
#loc564 = loc(fused[#loc53, #loc50])
#loc565 = loc(fused[#loc55, #loc56])
#loc566 = loc(fused[#loc58, #loc59])
#loc567 = loc(fused[#loc60, #loc61])
#loc568 = loc(fused[#loc64, #loc62])
#loc569 = loc(fused[#loc68, #loc65])
#loc570 = loc(fused[#loc72, #loc73])
#loc571 = loc(fused[#loc74, #loc75])
#loc572 = loc(fused[#loc77, #loc78])
#loc573 = loc(fused[#loc79, #loc80])
#loc574 = loc(fused[#loc81, #loc82])
#loc575 = loc(fused[#loc83, #loc75])
#loc576 = loc(fused[#loc85, #loc86])
#loc577 = loc(fused[#loc89, #loc90])
#loc578 = loc(fused[#loc91, #loc86])
#loc579 = loc(fused[#loc97, #loc98])
#loc580 = loc(fused[#loc99, #loc100])
#loc581 = loc(fused[#loc101, #loc102])
#loc582 = loc(fused[#loc103, #loc100])
#loc583 = loc(fused[#loc107, #loc108])
#loc584 = loc(fused[#loc111, #loc112])
#loc585 = loc(fused[#loc113, #loc114])
#loc586 = loc(fused[#loc115, #loc116])
#loc587 = loc(fused[#loc118, #loc119])
#loc588 = loc(fused[#loc120, #loc114])
#loc589 = loc(fused[#loc124, #loc122])
#loc590 = loc(fused[#loc127, #loc128])
#loc591 = loc(fused[#loc130, #loc131])
#loc592 = loc(fused[#loc132, #loc133])
#loc593 = loc(fused[#loc134, #loc131])
#loc594 = loc(fused[#loc137, #loc138])
#loc595 = loc(fused[#loc139, #loc140])
#loc596 = loc(fused[#loc141, #loc138])
#loc597 = loc(fused[#loc144, #loc145])
#loc598 = loc(fused[#loc147, #loc145])
#loc599 = loc(fused[#loc148, #loc149])
#loc600 = loc(fused[#loc150, #loc151])
#loc601 = loc(fused[#loc155, #loc156])
#loc602 = loc(fused[#loc157, #loc158])
#loc603 = loc(fused[#loc159, #loc160])
#loc604 = loc(fused[#loc161, #loc162])
#loc605 = loc(fused[#loc163, #loc164])
#loc606 = loc(fused[#loc165, #loc166])
#loc607 = loc(fused[#loc167, #loc168])
#loc608 = loc(fused[#loc169, #loc170])
#loc609 = loc(fused[#loc175, #loc176])
#loc612 = loc(fused[#loc186, #loc187])
#loc613 = loc(fused[#loc190, #loc191])
#loc614 = loc(fused[#loc194, #loc193])
#loc615 = loc(fused[#loc198, #loc199])
#loc616 = loc(fused[#loc200, #loc201])
#loc617 = loc(fused[#loc203, #loc202])
#loc618 = loc(fused[#loc204, #loc205])
#loc619 = loc(fused[#loc207, #loc205])
#loc620 = loc(fused[#loc208, #loc209])
#loc621 = loc(fused[#loc210, #loc211])
#loc622 = loc(fused[#loc212, #loc213])
#loc623 = loc(fused[#loc214, #loc215])
#loc624 = loc(fused[#loc216, #loc217])
#loc625 = loc(fused[#loc218, #loc219])
#loc626 = loc(fused[#loc220, #loc221])
#loc627 = loc(fused[#loc226, #loc227])
#loc628 = loc(fused[#loc228, #loc229])
#loc629 = loc(fused[#loc230, #loc231])
#loc630 = loc(fused[#loc232, #loc229])
#loc631 = loc(fused[#loc234, #loc235])
#loc632 = loc(fused[#loc237, #loc238])
#loc633 = loc(fused[#loc239, #loc240])
#loc634 = loc(fused[#loc242, #loc241])
#loc635 = loc(fused[#loc244, #loc243])
#loc636 = loc(fused[#loc247, #loc248])
#loc637 = loc(fused[#loc249, #loc250])
#loc638 = loc(fused[#loc252, #loc253])
#loc639 = loc(fused[#loc254, #loc255])
#loc640 = loc(fused[#loc256, #loc257])
#loc641 = loc(fused[#loc258, #loc250])
#loc642 = loc(fused[#loc260, #loc261])
#loc643 = loc(fused[#loc264, #loc265])
#loc644 = loc(fused[#loc266, #loc261])
#loc645 = loc(fused[#loc272, #loc273])
#loc646 = loc(fused[#loc274, #loc275])
#loc647 = loc(fused[#loc276, #loc277])
#loc648 = loc(fused[#loc278, #loc275])
#loc649 = loc(fused[#loc282, #loc283])
#loc650 = loc(fused[#loc286, #loc287])
#loc651 = loc(fused[#loc288, #loc289])
#loc652 = loc(fused[#loc290, #loc291])
#loc653 = loc(fused[#loc293, #loc294])
#loc654 = loc(fused[#loc295, #loc289])
#loc655 = loc(fused[#loc299, #loc297])
#loc656 = loc(fused[#loc302, #loc303])
#loc657 = loc(fused[#loc305, #loc306])
#loc658 = loc(fused[#loc307, #loc308])
#loc659 = loc(fused[#loc309, #loc306])
#loc660 = loc(fused[#loc312, #loc313])
#loc661 = loc(fused[#loc314, #loc315])
#loc662 = loc(fused[#loc316, #loc313])
#loc663 = loc(fused[#loc319, #loc320])
#loc664 = loc(fused[#loc322, #loc323, #loc324, #loc320])
#loc665 = loc(fused[#loc326, #loc327])
#loc666 = loc(fused[#loc328, #loc329])
#loc667 = loc(fused[#loc332, #loc335])
#loc668 = loc(fused[#loc336, #loc337, #loc338, #loc327])
#loc669 = loc(fused[#loc339, #loc340])
#loc670 = loc(fused[#loc345, #loc346])
#loc671 = loc(fused[#loc347, #loc348])
#loc672 = loc(fused[#loc350, #loc349])
#loc673 = loc(fused[#loc351, #loc352])
#loc674 = loc(fused[#loc354, #loc352])
#loc675 = loc(fused[#loc355, #loc356])
#loc676 = loc(fused[#loc357, #loc358])
#loc677 = loc(fused[#loc359, #loc360])
#loc678 = loc(fused[#loc361, #loc362])
#loc679 = loc(fused[#loc363, #loc364])
#loc680 = loc(fused[#loc365, #loc366])
#loc681 = loc(fused[#loc367, #loc368])
#loc682 = loc(fused[#loc373, #loc374])
#loc683 = loc(fused[#loc375, #loc376])
#loc684 = loc(fused[#loc377, #loc378])
#loc685 = loc(fused[#loc379, #loc376])
#loc686 = loc(fused[#loc381, #loc382])
#loc687 = loc(fused[#loc384, #loc385])
#loc688 = loc(fused[#loc386, #loc387])
#loc689 = loc(fused[#loc389, #loc388])
#loc690 = loc(fused[#loc391, #loc390])
#loc691 = loc(fused[#loc394, #loc395])
#loc692 = loc(fused[#loc396, #loc397])
#loc693 = loc(fused[#loc399, #loc400])
#loc694 = loc(fused[#loc401, #loc402])
#loc695 = loc(fused[#loc403, #loc404])
#loc696 = loc(fused[#loc405, #loc397])
#loc697 = loc(fused[#loc407, #loc408])
#loc698 = loc(fused[#loc411, #loc412])
#loc699 = loc(fused[#loc413, #loc408])
#loc700 = loc(fused[#loc419, #loc420])
#loc701 = loc(fused[#loc421, #loc422])
#loc702 = loc(fused[#loc423, #loc424])
#loc703 = loc(fused[#loc425, #loc422])
#loc704 = loc(fused[#loc429, #loc430])
#loc705 = loc(fused[#loc433, #loc434])
#loc706 = loc(fused[#loc435, #loc436])
#loc707 = loc(fused[#loc437, #loc438])
#loc708 = loc(fused[#loc440, #loc441])
#loc709 = loc(fused[#loc442, #loc436])
#loc710 = loc(fused[#loc446, #loc444])
#loc711 = loc(fused[#loc449, #loc450])
#loc712 = loc(fused[#loc452, #loc453])
#loc713 = loc(fused[#loc454, #loc455])
#loc714 = loc(fused[#loc456, #loc453])
#loc715 = loc(fused[#loc459, #loc460])
#loc716 = loc(fused[#loc461, #loc462])
#loc717 = loc(fused[#loc463, #loc460])
#loc718 = loc(fused[#loc466, #loc467])
#loc719 = loc(fused[#loc469, #loc467])
#loc720 = loc(fused[#loc470, #loc471])
#loc721 = loc(fused[#loc472, #loc473])
#loc722 = loc(fused[#loc476, #loc479])
#loc723 = loc(fused[#loc480, #loc481, #loc482, #loc471])
#loc724 = loc(fused[#loc483, #loc484])
#loc725 = loc(fused[#loc490, #loc491])
#loc726 = loc(fused[#loc492, #loc493])
#loc727 = loc(fused[#loc495, #loc494])
#loc728 = loc(fused[#loc496, #loc497])
#loc729 = loc(fused[#loc499, #loc500, #loc501, #loc497])
#loc730 = loc(fused[#loc505, #loc504])
#loc731 = loc(fused[#loc506, #loc507])
#loc732 = loc(fused[#loc509, #loc507])
#loc733 = loc(fused[#loc510, #loc511])
#loc734 = loc(fused[#loc512, #loc513])
#loc735 = loc(fused[#loc517, #loc518])
#loc736 = loc(fused[#loc519, #loc520])
#loc737 = loc(fused[#loc522, #loc521])
#loc738 = loc(fused[#loc523, #loc524])
#loc739 = loc(fused[#loc526, #loc524])
#loc740 = loc(fused[#loc528, #loc527])
#loc741 = loc(fused[#loc529, #loc530])
#loc742 = loc(fused[#loc532, #loc530])
#loc743 = loc(fused[#loc533, #loc534])
#loc744 = loc(fused[#loc535, #loc536])
