!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc39 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":92:10)
#loc40 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":92:14)
#loc41 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":92:20)
#loc42 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":92:32)
#loc121 = loc(fused[#loc39, #loc40])
#loc122 = loc(fused[#loc41, #loc42])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_min_multiply_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printHexCharLine(!s8i) loc(#loc105)
  cir.func no_proto @CWE191_Integer_Underflow__char_min_multiply_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc107)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc7)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc7)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc108)
    %3 = cir.const #cir.int<127> : !s32i loc(#loc9)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc9)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc9)
    %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc9)
    cir.store %7, %0 : !s8i, !cir.ptr<!s8i> loc(#loc109)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc13)
      %9 = cir.cast(integral, %8 : !s8i), !s32i loc(#loc13)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc14)
      %11 = cir.cmp(lt, %9, %10) : !s32i, !cir.bool loc(#loc111)
      cir.if %11 {
        %12 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc113)
        %13 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc18)
        %14 = cir.cast(integral, %13 : !s8i), !s32i loc(#loc18)
        %15 = cir.const #cir.int<2> : !s32i loc(#loc17)
        %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc18)
        %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc18)
        cir.store %17, %12 : !s8i, !cir.ptr<!s8i> loc(#loc113)
        %18 = cir.load %12 : !cir.ptr<!s8i>, !s8i loc(#loc19)
        cir.call @printHexCharLine(%18) : (!s8i) -> () loc(#loc20)
      } loc(#loc112)
    } loc(#loc110)
    cir.return loc(#loc4)
  } loc(#loc106)
  cir.func no_proto @CWE191_Integer_Underflow__char_min_multiply_01_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc115)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc23)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc116)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc25)
    cir.return loc(#loc22)
  } loc(#loc114)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc117)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc118)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc119)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc33)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc34)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc35)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc36)
  cir.func @main(%arg0: !s32i loc(fused[#loc39, #loc40]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc41, #loc42])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc121)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc122)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc38)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc43)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc43)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc44)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc45)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc45)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc46)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc33)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc47)
    %8 = cir.get_global @CWE191_Integer_Underflow__char_min_multiply_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc123)
    cir.call @CWE191_Integer_Underflow__char_min_multiply_01_good() : () -> () loc(#loc48)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc34)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc35)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %13 = cir.get_global @CWE191_Integer_Underflow__char_min_multiply_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc124)
    cir.call @CWE191_Integer_Underflow__char_min_multiply_01_bad() : () -> () loc(#loc52)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc36)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc55)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    cir.return %17 : !s32i loc(#loc125)
  } loc(#loc120)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc127)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc61)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc61)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc128)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc63)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc64)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc64)
    cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc129)
    cir.scope {
      %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc68)
      %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc68)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc69)
      %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc131)
      cir.if %9 {
        %10 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc133)
        %11 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc73)
        %12 = cir.cast(integral, %11 : !s8i), !s32i loc(#loc73)
        %13 = cir.const #cir.int<2> : !s32i loc(#loc72)
        %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc73)
        %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc73)
        cir.store %15, %10 : !s8i, !cir.ptr<!s8i> loc(#loc133)
        %16 = cir.load %10 : !cir.ptr<!s8i>, !s8i loc(#loc74)
        cir.call @printHexCharLine(%16) : (!s8i) -> () loc(#loc75)
      } loc(#loc132)
    } loc(#loc130)
    cir.return loc(#loc58)
  } loc(#loc126)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc76)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc135)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc81)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc81)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc136)
    %3 = cir.const #cir.int<127> : !s32i loc(#loc83)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc83)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc83)
    %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc83)
    cir.store %7, %0 : !s8i, !cir.ptr<!s8i> loc(#loc137)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc87)
      %9 = cir.cast(integral, %8 : !s8i), !s32i loc(#loc87)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc88)
      %11 = cir.cmp(lt, %9, %10) : !s32i, !cir.bool loc(#loc139)
      cir.if %11 {
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc92)
          %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc92)
          %14 = cir.const #cir.int<127> : !s32i loc(#loc93)
          %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc93)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc93)
          %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc93)
          %18 = cir.const #cir.int<2> : !s32i loc(#loc94)
          %19 = cir.binop(div, %17, %18) : !s32i loc(#loc142)
          %20 = cir.cmp(gt, %13, %19) : !s32i, !cir.bool loc(#loc143)
          cir.if %20 {
            %21 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc145)
            %22 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc101)
            %23 = cir.cast(integral, %22 : !s8i), !s32i loc(#loc101)
            %24 = cir.const #cir.int<2> : !s32i loc(#loc100)
            %25 = cir.binop(mul, %23, %24) nsw : !s32i loc(#loc101)
            %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc101)
            cir.store %26, %21 : !s8i, !cir.ptr<!s8i> loc(#loc145)
            %27 = cir.load %21 : !cir.ptr<!s8i>, !s8i loc(#loc102)
            cir.call @printHexCharLine(%27) : (!s8i) -> () loc(#loc103)
          } else {
            %21 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc76)
            %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc76)
            cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc104)
          } loc(#loc144)
        } loc(#loc141)
      } loc(#loc140)
    } loc(#loc138)
    cir.return loc(#loc78)
  } loc(#loc134)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_min_multiply_01.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc3 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":34:1)
#loc5 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":24:5)
#loc6 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":24:10)
#loc7 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":25:12)
#loc8 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":25:5)
#loc9 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":27:12)
#loc10 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":27:5)
#loc11 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":28:5)
#loc12 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":33:5)
#loc13 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":28:8)
#loc14 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":28:15)
#loc15 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":29:5)
#loc16 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":31:9)
#loc17 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":31:30)
#loc18 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":31:23)
#loc19 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":32:26)
#loc20 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":32:9)
#loc21 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":77:1)
#loc22 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":81:1)
#loc23 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":79:5)
#loc24 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":79:13)
#loc25 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":80:5)
#loc26 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":80:13)
#loc27 = loc("/usr/include/stdlib.h":575:1)
#loc28 = loc("/usr/include/stdlib.h":575:41)
#loc29 = loc("/usr/include/time.h":76:1)
#loc30 = loc("/usr/include/time.h":76:38)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc33 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":97:15)
#loc34 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":99:15)
#loc35 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":102:15)
#loc36 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":104:15)
#loc37 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":92:1)
#loc38 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":107:1)
#loc43 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":93:1)
#loc44 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":95:27)
#loc45 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":95:22)
#loc46 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":95:5)
#loc47 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":97:5)
#loc48 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":98:5)
#loc49 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":98:57)
#loc50 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":99:5)
#loc51 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":102:5)
#loc52 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":103:5)
#loc53 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":103:56)
#loc54 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":104:5)
#loc55 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":106:12)
#loc56 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":106:5)
#loc57 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":41:1)
#loc58 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":53:1)
#loc59 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":43:5)
#loc60 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":43:10)
#loc61 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":44:12)
#loc62 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":44:5)
#loc63 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":46:13)
#loc64 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":46:12)
#loc65 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":46:5)
#loc66 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":47:5)
#loc67 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":52:5)
#loc68 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":47:8)
#loc69 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":47:15)
#loc70 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":48:5)
#loc71 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":50:9)
#loc72 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":50:30)
#loc73 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":50:23)
#loc74 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":51:26)
#loc75 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":51:9)
#loc76 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":72:23)
#loc77 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":56:1)
#loc78 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":75:1)
#loc79 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":58:5)
#loc80 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":58:10)
#loc81 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":59:12)
#loc82 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":59:5)
#loc83 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":61:12)
#loc84 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":61:5)
#loc85 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":62:5)
#loc86 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":74:5)
#loc87 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":62:8)
#loc88 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":62:15)
#loc89 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":63:5)
#loc90 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":65:9)
#loc91 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":73:9)
#loc92 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":65:13)
#loc93 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":65:21)
#loc94 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":65:30)
#loc95 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":65:31)
#loc96 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":66:9)
#loc97 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":69:9)
#loc98 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":71:9)
#loc99 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":67:13)
#loc100 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":67:34)
#loc101 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":67:27)
#loc102 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":68:30)
#loc103 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":68:13)
#loc104 = loc("CWE191_Integer_Underflow__char_min_multiply_01.c":72:13)
#loc105 = loc(fused[#loc1, #loc2])
#loc106 = loc(fused[#loc3, #loc4])
#loc107 = loc(fused[#loc5, #loc6])
#loc108 = loc(fused[#loc8, #loc7])
#loc109 = loc(fused[#loc10, #loc9])
#loc110 = loc(fused[#loc11, #loc12])
#loc111 = loc(fused[#loc13, #loc14])
#loc112 = loc(fused[#loc15, #loc12])
#loc113 = loc(fused[#loc16, #loc17])
#loc114 = loc(fused[#loc21, #loc22])
#loc115 = loc(fused[#loc23, #loc24])
#loc116 = loc(fused[#loc25, #loc26])
#loc117 = loc(fused[#loc27, #loc28])
#loc118 = loc(fused[#loc29, #loc30])
#loc119 = loc(fused[#loc31, #loc32])
#loc120 = loc(fused[#loc37, #loc38])
#loc123 = loc(fused[#loc48, #loc49])
#loc124 = loc(fused[#loc52, #loc53])
#loc125 = loc(fused[#loc56, #loc55])
#loc126 = loc(fused[#loc57, #loc58])
#loc127 = loc(fused[#loc59, #loc60])
#loc128 = loc(fused[#loc62, #loc61])
#loc129 = loc(fused[#loc65, #loc63])
#loc130 = loc(fused[#loc66, #loc67])
#loc131 = loc(fused[#loc68, #loc69])
#loc132 = loc(fused[#loc70, #loc67])
#loc133 = loc(fused[#loc71, #loc72])
#loc134 = loc(fused[#loc77, #loc78])
#loc135 = loc(fused[#loc79, #loc80])
#loc136 = loc(fused[#loc82, #loc81])
#loc137 = loc(fused[#loc84, #loc83])
#loc138 = loc(fused[#loc85, #loc86])
#loc139 = loc(fused[#loc87, #loc88])
#loc140 = loc(fused[#loc89, #loc86])
#loc141 = loc(fused[#loc90, #loc91])
#loc142 = loc(fused[#loc93, #loc94])
#loc143 = loc(fused[#loc92, #loc95])
#loc144 = loc(fused[#loc96, #loc97, #loc98, #loc91])
#loc145 = loc(fused[#loc99, #loc100])
