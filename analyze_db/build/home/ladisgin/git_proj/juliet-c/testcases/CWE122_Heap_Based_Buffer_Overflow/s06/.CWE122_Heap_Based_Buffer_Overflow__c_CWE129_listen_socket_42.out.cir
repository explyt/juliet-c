!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":44:22)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":44:26)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":322:10)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":322:14)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":322:20)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":322:32)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":200:26)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":200:30)
#loc451 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":157:26)
#loc452 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":157:30)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc539 = loc(fused[#loc19, #loc20])
#loc623 = loc(fused[#loc237, #loc238])
#loc624 = loc(fused[#loc239, #loc240])
#loc629 = loc(fused[#loc257, #loc258])
#loc704 = loc(fused[#loc451, #loc452])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc530)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc531)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc532)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc533)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc534)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc535)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc536)
  cir.func private @close(!s32i) -> !s32i loc(#loc537)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc19, #loc20])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc539)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc18)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc21)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc541)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc542)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc543)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc544)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc545)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc29)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc29)
      cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc543)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc31)
      %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc31)
      cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc544)
      cir.scope {
        cir.do {
          %13 = cir.const #cir.int<2> : !s32i loc(#loc36)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc37)
          %15 = cir.const #cir.int<6> : !s32i loc(#loc38)
          %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc39)
          cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc547)
          cir.scope {
            %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc44)
            %59 = cir.const #cir.int<1> : !s32i loc(#loc45)
            %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc45)
            %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc549)
            cir.if %61 {
              cir.break loc(#loc47)
            } loc(#loc550)
          } loc(#loc548)
          %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc551)
          %18 = cir.const #cir.int<0> : !s32i loc(#loc50)
          %19 = cir.const #cir.int<16> : !u64i loc(#loc552)
          cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc553)
          %20 = cir.const #cir.int<2> : !s32i loc(#loc55)
          %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc55)
          %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc56)
          cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc554)
          %23 = cir.const #cir.int<0> : !s32i loc(#loc58)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc58)
          %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc59)
          %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc60)
          cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc555)
          %27 = cir.const #cir.int<27015> : !s32i loc(#loc62)
          %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc62)
          %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc63)
          %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
          cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc556)
          cir.scope {
            %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc69)
            %59 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc558)
            %60 = cir.const #cir.int<16> : !u64i loc(#loc559)
            %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc559)
            %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc74)
            %63 = cir.const #cir.int<1> : !s32i loc(#loc75)
            %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc75)
            %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc560)
            cir.if %65 {
              cir.break loc(#loc77)
            } loc(#loc561)
          } loc(#loc557)
          cir.scope {
            %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc80)
            %59 = cir.const #cir.int<5> : !s32i loc(#loc81)
            %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc82)
            %61 = cir.const #cir.int<1> : !s32i loc(#loc83)
            %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc83)
            %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc563)
            cir.if %63 {
              cir.break loc(#loc85)
            } loc(#loc564)
          } loc(#loc562)
          %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc86)
          %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc87)
          %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc88)
          %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc89)
          cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc565)
          cir.scope {
            %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc94)
            %59 = cir.const #cir.int<1> : !s32i loc(#loc95)
            %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc95)
            %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc567)
            cir.if %61 {
              cir.break loc(#loc97)
            } loc(#loc568)
          } loc(#loc566)
          %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc98)
          %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc99)
          %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc99)
          %38 = cir.const #cir.int<3> : !s32i loc(#loc100)
          %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc100)
          %40 = cir.const #cir.int<4> : !u64i loc(#loc100)
          %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc100)
          %42 = cir.const #cir.int<2> : !s32i loc(#loc100)
          %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc100)
          %44 = cir.binop(add, %41, %43) : !u64i loc(#loc100)
          %45 = cir.const #cir.int<1> : !s32i loc(#loc101)
          %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc101)
          %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc569)
          %48 = cir.const #cir.int<0> : !s32i loc(#loc102)
          %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc103)
          %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc103)
          cir.store %50, %4 : !s32i, !cir.ptr<!s32i> loc(#loc570)
          cir.scope {
            %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc108)
            %59 = cir.const #cir.int<1> : !s32i loc(#loc109)
            %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc109)
            %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc572)
            %62 = cir.ternary(%61, true {
              %63 = cir.const #true loc(#loc110)
              cir.yield %63 : !cir.bool loc(#loc110)
            }, false {
              %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc111)
              %64 = cir.const #cir.int<0> : !s32i loc(#loc112)
              %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc573)
              %66 = cir.ternary(%65, true {
                %67 = cir.const #true loc(#loc110)
                cir.yield %67 : !cir.bool loc(#loc110)
              }, false {
                %67 = cir.const #false loc(#loc110)
                cir.yield %67 : !cir.bool loc(#loc110)
              }) : (!cir.bool) -> !cir.bool loc(#loc110)
              cir.yield %66 : !cir.bool loc(#loc110)
            }) : (!cir.bool) -> !cir.bool loc(#loc110)
            cir.if %62 {
              cir.break loc(#loc114)
            } loc(#loc574)
          } loc(#loc571)
          %51 = cir.const #cir.int<0> : !s32i loc(#loc115)
          %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc115)
          %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc116)
          %54 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc117)
          %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc117)
          cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc575)
          %56 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc118)
          %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc119)
          cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc576)
          cir.yield loc(#loc35)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc122)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc122)
          cir.condition(%14) loc(#loc122)
        } loc(#loc546)
      } loc(#loc546)
      cir.scope {
        %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc125)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc126)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc126)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc578)
        cir.if %16 {
          %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc128)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc129)
        } loc(#loc579)
      } loc(#loc577)
      cir.scope {
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc132)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc133)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc133)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc581)
        cir.if %16 {
          %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc135)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc136)
        } loc(#loc582)
      } loc(#loc580)
    } loc(#loc540)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc583)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc583)
    cir.return %3 : !s32i loc(#loc583)
  } loc(#loc538)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc584)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc585)
  cir.func private @printIntLine(!s32i) loc(#loc586)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc587)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc147)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc588)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc590)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc154)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc155)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc591)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc158)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc592)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc594)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc595)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc167)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc168)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc168)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc596)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc597)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc167)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc598)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc595)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc173)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc174)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc174)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc600)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc176)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc177)
          %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc178)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc176)
        } loc(#loc601)
      } loc(#loc599)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc181)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc603)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc183)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc184)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc604)
          cir.condition(%20) loc(#loc185)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc187)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc188)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc189)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc190)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc606)
          } loc(#loc605)
          cir.yield loc(#loc180)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc191)
          %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc192)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc607)
          cir.yield loc(#loc602)
        } loc(#loc602)
      } loc(#loc602)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc195)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc196)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc609)
        cir.if %19 {
          %20 = cir.const #cir.int<1> : !s32i loc(#loc200)
          %21 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc201)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc202)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc203)
          cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc611)
          cir.scope {
            %24 = cir.const #cir.int<0> : !s32i loc(#loc206)
            cir.store %24, %5 : !s32i, !cir.ptr<!s32i> loc(#loc613)
            cir.for : cond {
              %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc208)
              %26 = cir.const #cir.int<10> : !s32i loc(#loc209)
              %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc614)
              cir.condition(%27) loc(#loc210)
            } body {
              cir.scope {
                %25 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc212)
                %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc213)
                %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc214)
                %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc212)
                cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc215)
              } loc(#loc615)
              cir.yield loc(#loc205)
            } step {
              %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc216)
              %26 = cir.unary(inc, %25) : !s32i, !s32i loc(#loc217)
              cir.store %26, %5 : !s32i, !cir.ptr<!s32i> loc(#loc616)
              cir.yield loc(#loc612)
            } loc(#loc612)
          } loc(#loc612)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc147)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc147)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc218)
        } loc(#loc610)
      } loc(#loc608)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc219)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc220)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc220)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc219)
    } loc(#loc593)
    cir.return loc(#loc151)
  } loc(#loc589)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc618)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc223)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc619)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc225)
    cir.return loc(#loc222)
  } loc(#loc617)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc620)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc621)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc231)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc232)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc233)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc234)
  cir.func @main(%arg0: !s32i loc(fused[#loc237, #loc238]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc239, #loc240])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc623)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc624)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc236)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc241)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc242)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc243)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc243)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc244)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc231)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc231)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc245)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42_good : !cir.ptr<!cir.func<!void ()>> loc(#loc625)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42_good() : () -> () loc(#loc246)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc232)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc232)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc248)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc233)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc233)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc249)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc626)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42_bad() : () -> () loc(#loc250)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc234)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc234)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc252)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc253)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc627)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc627)
    cir.return %17 : !s32i loc(#loc627)
  } loc(#loc622)
  cir.func internal private @goodB2GSource(%arg0: !s32i loc(fused[#loc257, #loc258])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc629)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc256)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc259)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc631)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc632)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc633)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc634)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc635)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc267)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc267)
      cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc633)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc269)
      %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc269)
      cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc634)
      cir.scope {
        cir.do {
          %13 = cir.const #cir.int<2> : !s32i loc(#loc274)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc275)
          %15 = cir.const #cir.int<6> : !s32i loc(#loc276)
          %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc277)
          cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc637)
          cir.scope {
            %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc282)
            %59 = cir.const #cir.int<1> : !s32i loc(#loc283)
            %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc283)
            %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc639)
            cir.if %61 {
              cir.break loc(#loc285)
            } loc(#loc640)
          } loc(#loc638)
          %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc641)
          %18 = cir.const #cir.int<0> : !s32i loc(#loc288)
          %19 = cir.const #cir.int<16> : !u64i loc(#loc642)
          cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc643)
          %20 = cir.const #cir.int<2> : !s32i loc(#loc293)
          %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc293)
          %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc56)
          cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc644)
          %23 = cir.const #cir.int<0> : !s32i loc(#loc295)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc295)
          %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc59)
          %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc60)
          cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc645)
          %27 = cir.const #cir.int<27015> : !s32i loc(#loc297)
          %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc297)
          %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc298)
          %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
          cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc646)
          cir.scope {
            %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc303)
            %59 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc648)
            %60 = cir.const #cir.int<16> : !u64i loc(#loc649)
            %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc649)
            %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc308)
            %63 = cir.const #cir.int<1> : !s32i loc(#loc309)
            %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc309)
            %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc650)
            cir.if %65 {
              cir.break loc(#loc311)
            } loc(#loc651)
          } loc(#loc647)
          cir.scope {
            %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc314)
            %59 = cir.const #cir.int<5> : !s32i loc(#loc315)
            %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc316)
            %61 = cir.const #cir.int<1> : !s32i loc(#loc317)
            %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc317)
            %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc653)
            cir.if %63 {
              cir.break loc(#loc319)
            } loc(#loc654)
          } loc(#loc652)
          %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc320)
          %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc321)
          %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc322)
          %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc323)
          cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc655)
          cir.scope {
            %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc328)
            %59 = cir.const #cir.int<1> : !s32i loc(#loc329)
            %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc329)
            %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc657)
            cir.if %61 {
              cir.break loc(#loc331)
            } loc(#loc658)
          } loc(#loc656)
          %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc332)
          %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc333)
          %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc333)
          %38 = cir.const #cir.int<3> : !s32i loc(#loc334)
          %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc334)
          %40 = cir.const #cir.int<4> : !u64i loc(#loc334)
          %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc334)
          %42 = cir.const #cir.int<2> : !s32i loc(#loc334)
          %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc334)
          %44 = cir.binop(add, %41, %43) : !u64i loc(#loc334)
          %45 = cir.const #cir.int<1> : !s32i loc(#loc335)
          %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc335)
          %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc659)
          %48 = cir.const #cir.int<0> : !s32i loc(#loc336)
          %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc337)
          %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc337)
          cir.store %50, %4 : !s32i, !cir.ptr<!s32i> loc(#loc660)
          cir.scope {
            %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc342)
            %59 = cir.const #cir.int<1> : !s32i loc(#loc343)
            %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc343)
            %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc662)
            %62 = cir.ternary(%61, true {
              %63 = cir.const #true loc(#loc344)
              cir.yield %63 : !cir.bool loc(#loc344)
            }, false {
              %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc345)
              %64 = cir.const #cir.int<0> : !s32i loc(#loc346)
              %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc663)
              %66 = cir.ternary(%65, true {
                %67 = cir.const #true loc(#loc344)
                cir.yield %67 : !cir.bool loc(#loc344)
              }, false {
                %67 = cir.const #false loc(#loc344)
                cir.yield %67 : !cir.bool loc(#loc344)
              }) : (!cir.bool) -> !cir.bool loc(#loc344)
              cir.yield %66 : !cir.bool loc(#loc344)
            }) : (!cir.bool) -> !cir.bool loc(#loc344)
            cir.if %62 {
              cir.break loc(#loc348)
            } loc(#loc664)
          } loc(#loc661)
          %51 = cir.const #cir.int<0> : !s32i loc(#loc349)
          %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc349)
          %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc350)
          %54 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc351)
          %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc351)
          cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc665)
          %56 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc352)
          %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc353)
          cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc666)
          cir.yield loc(#loc273)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc356)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc356)
          cir.condition(%14) loc(#loc356)
        } loc(#loc636)
      } loc(#loc636)
      cir.scope {
        %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc359)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc360)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc360)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc668)
        cir.if %16 {
          %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc362)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc363)
        } loc(#loc669)
      } loc(#loc667)
      cir.scope {
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc366)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc367)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc367)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc671)
        cir.if %16 {
          %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc369)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc370)
        } loc(#loc672)
      } loc(#loc670)
    } loc(#loc630)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc371)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc673)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc673)
    cir.return %3 : !s32i loc(#loc673)
  } loc(#loc628)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc373)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc675)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc378)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc379)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc676)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc381)
    %4 = cir.call @goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc382)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc677)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc679)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc680)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc391)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc392)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc392)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc681)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc682)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc391)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc683)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc680)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc397)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc398)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc398)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc685)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc400)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc401)
          %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc402)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc400)
        } loc(#loc686)
      } loc(#loc684)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc405)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc688)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc407)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc408)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc689)
          cir.condition(%20) loc(#loc409)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc411)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc412)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc413)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc414)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc691)
          } loc(#loc690)
          cir.yield loc(#loc404)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc415)
          %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc416)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc692)
          cir.yield loc(#loc687)
        } loc(#loc687)
      } loc(#loc687)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc419)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc420)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc694)
        %20 = cir.ternary(%19, true {
          %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc422)
          %22 = cir.const #cir.int<10> : !s32i loc(#loc423)
          %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc695)
          %24 = cir.ternary(%23, true {
            %25 = cir.const #true loc(#loc421)
            cir.yield %25 : !cir.bool loc(#loc421)
          }, false {
            %25 = cir.const #false loc(#loc421)
            cir.yield %25 : !cir.bool loc(#loc421)
          }) : (!cir.bool) -> !cir.bool loc(#loc421)
          cir.yield %24 : !cir.bool loc(#loc421)
        }, false {
          %21 = cir.const #false loc(#loc421)
          cir.yield %21 : !cir.bool loc(#loc421)
        }) : (!cir.bool) -> !cir.bool loc(#loc421)
        cir.if %20 {
          %21 = cir.const #cir.int<1> : !s32i loc(#loc428)
          %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc429)
          %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc430)
          %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc431)
          cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc697)
          cir.scope {
            %25 = cir.const #cir.int<0> : !s32i loc(#loc434)
            cir.store %25, %5 : !s32i, !cir.ptr<!s32i> loc(#loc699)
            cir.for : cond {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc436)
              %27 = cir.const #cir.int<10> : !s32i loc(#loc437)
              %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc700)
              cir.condition(%28) loc(#loc438)
            } body {
              cir.scope {
                %26 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc440)
                %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc441)
                %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc442)
                %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc440)
                cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc443)
              } loc(#loc701)
              cir.yield loc(#loc433)
            } step {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc444)
              %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc445)
              cir.store %27, %5 : !s32i, !cir.ptr<!s32i> loc(#loc702)
              cir.yield loc(#loc698)
            } loc(#loc698)
          } loc(#loc698)
        } else {
          %21 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc373)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc373)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc446)
        } loc(#loc696)
      } loc(#loc693)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc447)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc448)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc448)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc447)
    } loc(#loc678)
    cir.return loc(#loc375)
  } loc(#loc674)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc451, #loc452])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc704)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc450)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc453)
    %2 = cir.const #cir.int<7> : !s32i loc(#loc454)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc705)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc456)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc706)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc706)
    cir.return %4 : !s32i loc(#loc706)
  } loc(#loc703)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc708)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc462)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc463)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc709)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc465)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc466)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc710)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc712)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc713)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc475)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc476)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc476)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc714)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc715)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc475)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc716)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc713)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc481)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc482)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc482)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc718)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc484)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc485)
          %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc486)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc484)
        } loc(#loc719)
      } loc(#loc717)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc489)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc721)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc491)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc492)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc722)
          cir.condition(%20) loc(#loc493)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc495)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc496)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc497)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc498)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc724)
          } loc(#loc723)
          cir.yield loc(#loc488)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc499)
          %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc500)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc725)
          cir.yield loc(#loc720)
        } loc(#loc720)
      } loc(#loc720)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc503)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc504)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc727)
        cir.if %19 {
          %20 = cir.const #cir.int<1> : !s32i loc(#loc508)
          %21 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc509)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc510)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc511)
          cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc729)
          cir.scope {
            %24 = cir.const #cir.int<0> : !s32i loc(#loc514)
            cir.store %24, %5 : !s32i, !cir.ptr<!s32i> loc(#loc731)
            cir.for : cond {
              %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc516)
              %26 = cir.const #cir.int<10> : !s32i loc(#loc517)
              %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc732)
              cir.condition(%27) loc(#loc518)
            } body {
              cir.scope {
                %25 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc520)
                %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc521)
                %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc522)
                %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc520)
                cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc523)
              } loc(#loc733)
              cir.yield loc(#loc513)
            } step {
              %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc524)
              %26 = cir.unary(inc, %25) : !s32i, !s32i loc(#loc525)
              cir.store %26, %5 : !s32i, !cir.ptr<!s32i> loc(#loc734)
              cir.yield loc(#loc730)
            } loc(#loc730)
          } loc(#loc730)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc526)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc526)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc527)
        } loc(#loc728)
      } loc(#loc726)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc528)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc529)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc529)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc528)
    } loc(#loc711)
    cir.return loc(#loc459)
  } loc(#loc707)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":44:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":116:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":45:1)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":46:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":114:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":51:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":51:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":52:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":52:28)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":53:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":53:31)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":54:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":54:31)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":55:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":55:41)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":56:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":99:17)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":66:35)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":66:44)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":66:57)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":66:28)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":66:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":66:68)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":67:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":70:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":67:17)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":67:33)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":68:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":69:17)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":71:20)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":71:21)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":71:30)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":71:33)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":71:47)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":71:13)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":71:48)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":72:34)
#loc56 = loc("/usr/include/netinet/in.h":249:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":72:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":73:39)
#loc59 = loc("/usr/include/netinet/in.h":251:20)
#loc60 = loc("/usr/include/netinet/in.h":33:15)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":73:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":74:38)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":74:32)
#loc64 = loc("/usr/include/netinet/in.h":250:15)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":74:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":74:46)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":75:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":78:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":75:22)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":75:54)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":75:55)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":75:64)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":75:78)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":75:17)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":75:84)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":76:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":77:17)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":79:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":82:13)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":79:24)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":79:38)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":79:17)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":79:57)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":80:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":81:17)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":83:35)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":83:49)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":83:55)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":83:28)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":83:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":83:59)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":84:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":87:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":84:17)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":84:33)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":85:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":86:17)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":89:31)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":89:45)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":89:58)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":89:76)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":89:79)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":89:26)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":89:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":89:80)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":90:13)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":93:13)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":90:17)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":90:31)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":90:44)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":90:47)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":90:61)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":91:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":92:17)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":95:39)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":95:25)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":95:13)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":97:25)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":97:20)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":97:13)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":97:36)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":99:16)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":100:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":103:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":100:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":100:29)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":101:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":102:26)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":102:13)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":104:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":107:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":104:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":104:29)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":105:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":106:26)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":106:13)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":115:12)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":115:5)
#loc139 = loc("/usr/include/stdlib.h":672:1)
#loc140 = loc("/usr/include/stdlib.h":672:45)
#loc141 = loc("/usr/include/stdlib.h":756:1)
#loc142 = loc("/usr/include/stdlib.h":756:70)
#loc143 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc144 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc145 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc146 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":146:23)
#loc148 = loc("/usr/include/stdlib.h":687:1)
#loc149 = loc("/usr/include/stdlib.h":687:32)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":118:1)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":150:1)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":120:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":120:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":122:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":122:12)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":122:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":123:22)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":123:12)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":123:5)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":123:26)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":124:5)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":149:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":125:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":125:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":126:9)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":126:54)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":126:31)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":126:38)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":126:43)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":126:53)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":127:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":127:39)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":127:13)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":127:23)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":127:29)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":127:30)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":127:36)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":127:35)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":129:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":132:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":129:18)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":129:14)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":129:21)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":129:25)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":129:23)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":130:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":131:25)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":131:13)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":131:20)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":131:21)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":129:30)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":129:29)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":135:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":147:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":135:13)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":135:21)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":136:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":143:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":145:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":137:28)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":137:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":137:20)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":137:24)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":139:13)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":142:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":139:21)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":139:17)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":139:24)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":139:28)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":139:26)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":140:13)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":141:30)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":141:37)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":141:38)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":141:17)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":139:33)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":139:32)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":146:13)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":148:9)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":148:14)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":307:1)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":311:1)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":309:5)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":309:13)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":310:5)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":310:13)
#loc227 = loc("/usr/include/stdlib.h":575:1)
#loc228 = loc("/usr/include/stdlib.h":575:41)
#loc229 = loc("/usr/include/time.h":76:1)
#loc230 = loc("/usr/include/time.h":76:38)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":327:15)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":329:15)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":332:15)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":334:15)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":322:1)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":337:1)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":323:1)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":325:27)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":325:22)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":325:5)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":327:5)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":328:5)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":328:71)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":329:5)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":332:5)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":333:5)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":333:70)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":334:5)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":336:12)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":336:5)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":200:1)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":272:1)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":201:1)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":202:5)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":270:5)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":207:9)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":207:13)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":208:9)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":208:28)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":209:9)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":209:31)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":210:9)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":210:31)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":211:9)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":211:41)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":212:9)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":255:17)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":222:35)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":222:44)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":222:57)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":222:28)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":222:13)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":222:68)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":223:13)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":226:13)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":223:17)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":223:33)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":224:13)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":225:17)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":227:20)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":227:21)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":227:30)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":227:33)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":227:47)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":227:13)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":227:48)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":228:34)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":228:13)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":229:39)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":229:13)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":230:38)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":230:32)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":230:13)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":230:46)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":231:13)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":234:13)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":231:22)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":231:54)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":231:55)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":231:64)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":231:78)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":231:17)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":231:84)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":232:13)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":233:17)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":235:13)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":238:13)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":235:24)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":235:38)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":235:17)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":235:57)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":236:13)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":237:17)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":239:35)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":239:49)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":239:55)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":239:28)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":239:13)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":239:59)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":240:13)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":243:13)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":240:17)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":240:33)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":241:13)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":242:17)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":245:31)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":245:45)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":245:58)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":245:76)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":245:79)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":245:26)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":245:13)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":245:80)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":246:13)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":249:13)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":246:17)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":246:31)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":246:44)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":246:47)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":246:61)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":247:13)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":248:17)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":251:39)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":251:25)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":251:13)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":253:25)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":253:20)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":253:13)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":253:36)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":255:16)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":256:9)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":259:9)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":256:13)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":256:29)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":257:9)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":258:26)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":258:13)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":260:9)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":263:9)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":260:13)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":260:29)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":261:9)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":262:26)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":262:13)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":271:12)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":271:5)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":301:23)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":274:1)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":305:1)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":276:5)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":276:9)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":278:13)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":278:12)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":278:5)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":279:26)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":279:12)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":279:5)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":279:30)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":280:5)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":304:5)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":281:9)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":281:13)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":282:9)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":282:54)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":282:31)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":282:38)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":282:43)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":282:53)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":283:9)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":283:39)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":283:13)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":283:23)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":283:29)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":283:30)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":283:36)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":283:35)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":285:9)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":288:9)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":285:18)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":285:14)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":285:21)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":285:25)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":285:23)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":286:9)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":287:25)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":287:13)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":287:20)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":287:21)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":285:30)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":285:29)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":290:9)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":302:9)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":290:13)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":290:21)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":290:23)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":290:26)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":290:34)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":290:36)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":291:9)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":298:9)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":300:9)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":292:28)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":292:13)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":292:20)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":292:24)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":294:13)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":297:13)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":294:21)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":294:17)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":294:24)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":294:28)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":294:26)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":295:13)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":296:30)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":296:37)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":296:38)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":296:17)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":294:33)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":294:32)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":301:13)
#loc447 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":303:9)
#loc448 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":303:14)
#loc449 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":157:1)
#loc450 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":163:1)
#loc453 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":158:1)
#loc454 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":161:12)
#loc455 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":161:5)
#loc456 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":162:12)
#loc457 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":162:5)
#loc458 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":165:1)
#loc459 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":197:1)
#loc460 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":167:5)
#loc461 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":167:9)
#loc462 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":169:13)
#loc463 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":169:12)
#loc464 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":169:5)
#loc465 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":170:26)
#loc466 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":170:12)
#loc467 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":170:5)
#loc468 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":170:30)
#loc469 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":171:5)
#loc470 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":196:5)
#loc471 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":172:9)
#loc472 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":172:13)
#loc473 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":173:9)
#loc474 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":173:54)
#loc475 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":173:31)
#loc476 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":173:38)
#loc477 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":173:43)
#loc478 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":173:53)
#loc479 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":174:9)
#loc480 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":174:39)
#loc481 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":174:13)
#loc482 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":174:23)
#loc483 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":174:29)
#loc484 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":174:30)
#loc485 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":174:36)
#loc486 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":174:35)
#loc487 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":176:9)
#loc488 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":179:9)
#loc489 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":176:18)
#loc490 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":176:14)
#loc491 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":176:21)
#loc492 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":176:25)
#loc493 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":176:23)
#loc494 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":177:9)
#loc495 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":178:25)
#loc496 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":178:13)
#loc497 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":178:20)
#loc498 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":178:21)
#loc499 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":176:30)
#loc500 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":176:29)
#loc501 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":182:9)
#loc502 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":194:9)
#loc503 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":182:13)
#loc504 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":182:21)
#loc505 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":183:9)
#loc506 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":190:9)
#loc507 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":192:9)
#loc508 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":184:28)
#loc509 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":184:13)
#loc510 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":184:20)
#loc511 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":184:24)
#loc512 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":186:13)
#loc513 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":189:13)
#loc514 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":186:21)
#loc515 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":186:17)
#loc516 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":186:24)
#loc517 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":186:28)
#loc518 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":186:26)
#loc519 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":187:13)
#loc520 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":188:30)
#loc521 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":188:37)
#loc522 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":188:38)
#loc523 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":188:17)
#loc524 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":186:33)
#loc525 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":186:32)
#loc526 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":193:23)
#loc527 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":193:13)
#loc528 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":195:9)
#loc529 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c":195:14)
#loc530 = loc(fused[#loc1, #loc2])
#loc531 = loc(fused[#loc3, #loc4])
#loc532 = loc(fused[#loc5, #loc6])
#loc533 = loc(fused[#loc7, #loc8])
#loc534 = loc(fused[#loc9, #loc10])
#loc535 = loc(fused[#loc11, #loc12])
#loc536 = loc(fused[#loc13, #loc14])
#loc537 = loc(fused[#loc15, #loc16])
#loc538 = loc(fused[#loc17, #loc18])
#loc540 = loc(fused[#loc22, #loc23])
#loc541 = loc(fused[#loc24, #loc25])
#loc542 = loc(fused[#loc26, #loc27])
#loc543 = loc(fused[#loc28, #loc29])
#loc544 = loc(fused[#loc30, #loc31])
#loc545 = loc(fused[#loc32, #loc33])
#loc546 = loc(fused[#loc34, #loc35])
#loc547 = loc(fused[#loc40, #loc41])
#loc548 = loc(fused[#loc42, #loc43])
#loc549 = loc(fused[#loc44, #loc45])
#loc550 = loc(fused[#loc46, #loc43])
#loc551 = loc(fused[#loc48, #loc49])
#loc552 = loc(fused[#loc51, #loc52])
#loc553 = loc(fused[#loc53, #loc54])
#loc554 = loc(fused[#loc57, #loc55])
#loc555 = loc(fused[#loc61, #loc58])
#loc556 = loc(fused[#loc65, #loc66])
#loc557 = loc(fused[#loc67, #loc68])
#loc558 = loc(fused[#loc70, #loc71])
#loc559 = loc(fused[#loc72, #loc73])
#loc560 = loc(fused[#loc74, #loc75])
#loc561 = loc(fused[#loc76, #loc68])
#loc562 = loc(fused[#loc78, #loc79])
#loc563 = loc(fused[#loc82, #loc83])
#loc564 = loc(fused[#loc84, #loc79])
#loc565 = loc(fused[#loc90, #loc91])
#loc566 = loc(fused[#loc92, #loc93])
#loc567 = loc(fused[#loc94, #loc95])
#loc568 = loc(fused[#loc96, #loc93])
#loc569 = loc(fused[#loc100, #loc101])
#loc570 = loc(fused[#loc104, #loc105])
#loc571 = loc(fused[#loc106, #loc107])
#loc572 = loc(fused[#loc108, #loc109])
#loc573 = loc(fused[#loc111, #loc112])
#loc574 = loc(fused[#loc113, #loc107])
#loc575 = loc(fused[#loc117, #loc115])
#loc576 = loc(fused[#loc120, #loc121])
#loc577 = loc(fused[#loc123, #loc124])
#loc578 = loc(fused[#loc125, #loc126])
#loc579 = loc(fused[#loc127, #loc124])
#loc580 = loc(fused[#loc130, #loc131])
#loc581 = loc(fused[#loc132, #loc133])
#loc582 = loc(fused[#loc134, #loc131])
#loc583 = loc(fused[#loc138, #loc137])
#loc584 = loc(fused[#loc139, #loc140])
#loc585 = loc(fused[#loc141, #loc142])
#loc586 = loc(fused[#loc143, #loc144])
#loc587 = loc(fused[#loc145, #loc146])
#loc588 = loc(fused[#loc148, #loc149])
#loc589 = loc(fused[#loc150, #loc151])
#loc590 = loc(fused[#loc152, #loc153])
#loc591 = loc(fused[#loc156, #loc154])
#loc592 = loc(fused[#loc159, #loc160])
#loc593 = loc(fused[#loc161, #loc162])
#loc594 = loc(fused[#loc163, #loc164])
#loc595 = loc(fused[#loc165, #loc166])
#loc596 = loc(fused[#loc169, #loc170])
#loc597 = loc(fused[#loc168, #loc170])
#loc598 = loc(fused[#loc167, #loc166])
#loc599 = loc(fused[#loc171, #loc172])
#loc600 = loc(fused[#loc173, #loc174])
#loc601 = loc(fused[#loc175, #loc172])
#loc602 = loc(fused[#loc179, #loc180])
#loc603 = loc(fused[#loc182, #loc181])
#loc604 = loc(fused[#loc183, #loc184])
#loc605 = loc(fused[#loc186, #loc180])
#loc606 = loc(fused[#loc188, #loc187])
#loc607 = loc(fused[#loc192, #loc191])
#loc608 = loc(fused[#loc193, #loc194])
#loc609 = loc(fused[#loc195, #loc196])
#loc610 = loc(fused[#loc197, #loc198, #loc199, #loc194])
#loc611 = loc(fused[#loc201, #loc200])
#loc612 = loc(fused[#loc204, #loc205])
#loc613 = loc(fused[#loc207, #loc206])
#loc614 = loc(fused[#loc208, #loc209])
#loc615 = loc(fused[#loc211, #loc205])
#loc616 = loc(fused[#loc217, #loc216])
#loc617 = loc(fused[#loc221, #loc222])
#loc618 = loc(fused[#loc223, #loc224])
#loc619 = loc(fused[#loc225, #loc226])
#loc620 = loc(fused[#loc227, #loc228])
#loc621 = loc(fused[#loc229, #loc230])
#loc622 = loc(fused[#loc235, #loc236])
#loc625 = loc(fused[#loc246, #loc247])
#loc626 = loc(fused[#loc250, #loc251])
#loc627 = loc(fused[#loc254, #loc253])
#loc628 = loc(fused[#loc255, #loc256])
#loc630 = loc(fused[#loc260, #loc261])
#loc631 = loc(fused[#loc262, #loc263])
#loc632 = loc(fused[#loc264, #loc265])
#loc633 = loc(fused[#loc266, #loc267])
#loc634 = loc(fused[#loc268, #loc269])
#loc635 = loc(fused[#loc270, #loc271])
#loc636 = loc(fused[#loc272, #loc273])
#loc637 = loc(fused[#loc278, #loc279])
#loc638 = loc(fused[#loc280, #loc281])
#loc639 = loc(fused[#loc282, #loc283])
#loc640 = loc(fused[#loc284, #loc281])
#loc641 = loc(fused[#loc286, #loc287])
#loc642 = loc(fused[#loc289, #loc290])
#loc643 = loc(fused[#loc291, #loc292])
#loc644 = loc(fused[#loc294, #loc293])
#loc645 = loc(fused[#loc296, #loc295])
#loc646 = loc(fused[#loc299, #loc300])
#loc647 = loc(fused[#loc301, #loc302])
#loc648 = loc(fused[#loc304, #loc305])
#loc649 = loc(fused[#loc306, #loc307])
#loc650 = loc(fused[#loc308, #loc309])
#loc651 = loc(fused[#loc310, #loc302])
#loc652 = loc(fused[#loc312, #loc313])
#loc653 = loc(fused[#loc316, #loc317])
#loc654 = loc(fused[#loc318, #loc313])
#loc655 = loc(fused[#loc324, #loc325])
#loc656 = loc(fused[#loc326, #loc327])
#loc657 = loc(fused[#loc328, #loc329])
#loc658 = loc(fused[#loc330, #loc327])
#loc659 = loc(fused[#loc334, #loc335])
#loc660 = loc(fused[#loc338, #loc339])
#loc661 = loc(fused[#loc340, #loc341])
#loc662 = loc(fused[#loc342, #loc343])
#loc663 = loc(fused[#loc345, #loc346])
#loc664 = loc(fused[#loc347, #loc341])
#loc665 = loc(fused[#loc351, #loc349])
#loc666 = loc(fused[#loc354, #loc355])
#loc667 = loc(fused[#loc357, #loc358])
#loc668 = loc(fused[#loc359, #loc360])
#loc669 = loc(fused[#loc361, #loc358])
#loc670 = loc(fused[#loc364, #loc365])
#loc671 = loc(fused[#loc366, #loc367])
#loc672 = loc(fused[#loc368, #loc365])
#loc673 = loc(fused[#loc372, #loc371])
#loc674 = loc(fused[#loc374, #loc375])
#loc675 = loc(fused[#loc376, #loc377])
#loc676 = loc(fused[#loc380, #loc378])
#loc677 = loc(fused[#loc383, #loc384])
#loc678 = loc(fused[#loc385, #loc386])
#loc679 = loc(fused[#loc387, #loc388])
#loc680 = loc(fused[#loc389, #loc390])
#loc681 = loc(fused[#loc393, #loc394])
#loc682 = loc(fused[#loc392, #loc394])
#loc683 = loc(fused[#loc391, #loc390])
#loc684 = loc(fused[#loc395, #loc396])
#loc685 = loc(fused[#loc397, #loc398])
#loc686 = loc(fused[#loc399, #loc396])
#loc687 = loc(fused[#loc403, #loc404])
#loc688 = loc(fused[#loc406, #loc405])
#loc689 = loc(fused[#loc407, #loc408])
#loc690 = loc(fused[#loc410, #loc404])
#loc691 = loc(fused[#loc412, #loc411])
#loc692 = loc(fused[#loc416, #loc415])
#loc693 = loc(fused[#loc417, #loc418])
#loc694 = loc(fused[#loc419, #loc420])
#loc695 = loc(fused[#loc422, #loc424])
#loc696 = loc(fused[#loc425, #loc426, #loc427, #loc418])
#loc697 = loc(fused[#loc429, #loc428])
#loc698 = loc(fused[#loc432, #loc433])
#loc699 = loc(fused[#loc435, #loc434])
#loc700 = loc(fused[#loc436, #loc437])
#loc701 = loc(fused[#loc439, #loc433])
#loc702 = loc(fused[#loc445, #loc444])
#loc703 = loc(fused[#loc449, #loc450])
#loc705 = loc(fused[#loc455, #loc454])
#loc706 = loc(fused[#loc457, #loc456])
#loc707 = loc(fused[#loc458, #loc459])
#loc708 = loc(fused[#loc460, #loc461])
#loc709 = loc(fused[#loc464, #loc462])
#loc710 = loc(fused[#loc467, #loc468])
#loc711 = loc(fused[#loc469, #loc470])
#loc712 = loc(fused[#loc471, #loc472])
#loc713 = loc(fused[#loc473, #loc474])
#loc714 = loc(fused[#loc477, #loc478])
#loc715 = loc(fused[#loc476, #loc478])
#loc716 = loc(fused[#loc475, #loc474])
#loc717 = loc(fused[#loc479, #loc480])
#loc718 = loc(fused[#loc481, #loc482])
#loc719 = loc(fused[#loc483, #loc480])
#loc720 = loc(fused[#loc487, #loc488])
#loc721 = loc(fused[#loc490, #loc489])
#loc722 = loc(fused[#loc491, #loc492])
#loc723 = loc(fused[#loc494, #loc488])
#loc724 = loc(fused[#loc496, #loc495])
#loc725 = loc(fused[#loc500, #loc499])
#loc726 = loc(fused[#loc501, #loc502])
#loc727 = loc(fused[#loc503, #loc504])
#loc728 = loc(fused[#loc505, #loc506, #loc507, #loc502])
#loc729 = loc(fused[#loc509, #loc508])
#loc730 = loc(fused[#loc512, #loc513])
#loc731 = loc(fused[#loc515, #loc514])
#loc732 = loc(fused[#loc516, #loc517])
#loc733 = loc(fused[#loc519, #loc513])
#loc734 = loc(fused[#loc525, #loc524])
