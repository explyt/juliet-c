!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc105)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc106)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc107)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc108)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc109)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc111)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc15)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc16)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc16)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc112)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc113)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc114)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc115)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc24)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc24)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc117)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc26)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc28)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
      } loc(#loc118)
    } loc(#loc116)
    cir.scope {
      cir.while {
        %8 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc31)
        cir.condition(%9) loc(#loc31)
      } do {
        cir.scope {
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc33)
          %10 = cir.const #cir.int<65> : !s32i loc(#loc34)
          %11 = cir.const #cir.int<100> : !s32i loc(#loc35)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc36)
          %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc35)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc35)
          cir.libc.memset %14 bytes from %9 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc121)
          %15 = cir.const #cir.int<0> : !s32i loc(#loc39)
          %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc39)
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
          %18 = cir.const #cir.int<100> : !s32i loc(#loc41)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc42)
          %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc41)
          %21 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %20 : !s32i), !cir.ptr<!s8i> loc(#loc43)
          cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc122)
          cir.break loc(#loc44)
        } loc(#loc120)
        cir.yield loc(#loc30)
      } loc(#loc119)
    } loc(#loc119)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc124)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc124)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc124)
      %10 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc49)
      %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc50)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
      %13 = cir.call @strcat(%11, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc49)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
      cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc53)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc54)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc55)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc54)
    } loc(#loc123)
    cir.return loc(#loc12)
  } loc(#loc110)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc126)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc58)
    cir.return loc(#loc57)
  } loc(#loc125)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc128)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc64)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc65)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc65)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc129)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc130)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc64)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc131)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc132)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc73)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc73)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc134)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc75)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc76)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc77)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc75)
      } loc(#loc135)
    } loc(#loc133)
    cir.scope {
      cir.while {
        %8 = cir.const #cir.int<1> : !s32i loc(#loc80)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc80)
        cir.condition(%9) loc(#loc80)
      } do {
        cir.scope {
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc82)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc82)
          %10 = cir.const #cir.int<65> : !s32i loc(#loc83)
          %11 = cir.const #cir.int<50> : !s32i loc(#loc84)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc85)
          %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc84)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc84)
          cir.libc.memset %14 bytes from %9 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc138)
          %15 = cir.const #cir.int<0> : !s32i loc(#loc88)
          %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc88)
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
          %18 = cir.const #cir.int<50> : !s32i loc(#loc90)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc91)
          %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc90)
          %21 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %20 : !s32i), !cir.ptr<!s8i> loc(#loc92)
          cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc139)
          cir.break loc(#loc93)
        } loc(#loc137)
        cir.yield loc(#loc79)
      } loc(#loc136)
    } loc(#loc136)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc141)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc141)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc141)
      %10 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc98)
      %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc99)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
      %13 = cir.call @strcat(%11, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc98)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
      cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc102)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc103)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc104)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc104)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc103)
    } loc(#loc140)
    cir.return loc(#loc61)
  } loc(#loc127)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":149:1)
#loc6 = loc("/usr/include/string.h":150:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":23:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":42:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":25:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":25:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":26:20)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":26:27)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":26:31)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":26:42)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":26:43)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":26:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":27:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":27:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":27:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":27:17)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":27:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":27:24)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":27:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":27:29)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":28:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":34:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":28:11)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":29:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":31:16)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":31:22)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":31:27)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":31:31)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":31:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":31:32)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":32:23)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":32:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":32:14)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":32:18)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":32:19)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":33:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":35:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":41:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":36:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":36:25)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":38:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":38:16)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":38:22)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":39:19)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":39:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":40:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":40:14)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":70:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":73:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":72:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":72:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":49:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":68:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":51:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":51:12)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":52:20)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":52:27)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":52:31)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":52:42)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":52:43)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":52:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":53:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":53:33)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":53:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":53:17)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":53:23)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":53:24)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":53:30)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":53:29)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":54:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":60:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":54:11)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":55:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":57:16)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":57:22)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":57:27)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":57:30)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":57:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":57:31)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":58:22)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":58:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":58:14)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":58:17)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":58:18)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":59:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":61:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":67:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":62:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":62:25)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":64:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":64:16)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":64:22)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":65:19)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":65:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":66:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c":66:14)
#loc105 = loc(fused[#loc1, #loc2])
#loc106 = loc(fused[#loc3, #loc4])
#loc107 = loc(fused[#loc5, #loc6])
#loc108 = loc(fused[#loc7, #loc8])
#loc109 = loc(fused[#loc9, #loc10])
#loc110 = loc(fused[#loc11, #loc12])
#loc111 = loc(fused[#loc13, #loc14])
#loc112 = loc(fused[#loc17, #loc18])
#loc113 = loc(fused[#loc16, #loc18])
#loc114 = loc(fused[#loc15, #loc19])
#loc115 = loc(fused[#loc20, #loc19])
#loc116 = loc(fused[#loc21, #loc22])
#loc117 = loc(fused[#loc23, #loc24])
#loc118 = loc(fused[#loc25, #loc22])
#loc119 = loc(fused[#loc29, #loc30])
#loc120 = loc(fused[#loc32, #loc30])
#loc121 = loc(fused[#loc37, #loc38])
#loc122 = loc(fused[#loc40, #loc39])
#loc123 = loc(fused[#loc45, #loc46])
#loc124 = loc(fused[#loc47, #loc48])
#loc125 = loc(fused[#loc56, #loc57])
#loc126 = loc(fused[#loc58, #loc59])
#loc127 = loc(fused[#loc60, #loc61])
#loc128 = loc(fused[#loc62, #loc63])
#loc129 = loc(fused[#loc66, #loc67])
#loc130 = loc(fused[#loc65, #loc67])
#loc131 = loc(fused[#loc64, #loc68])
#loc132 = loc(fused[#loc69, #loc68])
#loc133 = loc(fused[#loc70, #loc71])
#loc134 = loc(fused[#loc72, #loc73])
#loc135 = loc(fused[#loc74, #loc71])
#loc136 = loc(fused[#loc78, #loc79])
#loc137 = loc(fused[#loc81, #loc79])
#loc138 = loc(fused[#loc86, #loc87])
#loc139 = loc(fused[#loc89, #loc88])
#loc140 = loc(fused[#loc94, #loc95])
#loc141 = loc(fused[#loc96, #loc97])
