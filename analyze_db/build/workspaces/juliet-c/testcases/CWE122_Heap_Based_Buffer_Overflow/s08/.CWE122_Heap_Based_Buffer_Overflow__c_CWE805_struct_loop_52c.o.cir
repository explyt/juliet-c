!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":23:74)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":23:90)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":54:78)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":54:94)
!ty__twoIntsStruct = !cir.record<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc118 = loc(fused[#loc7, #loc8])
#loc138 = loc(fused[#loc63, #loc64])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc115)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc116)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c_badSink(%arg0: !cir.ptr<!ty__twoIntsStruct> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc118)
    cir.store %arg0, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc9)
    cir.scope {
      %1 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc120)
      cir.scope {
        %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc122)
        cir.scope {
          %3 = cir.const #cir.int<0> : !s32i loc(#loc20)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc20)
          cir.store %4, %2 : !u64i, !cir.ptr<!u64i> loc(#loc124)
          cir.for : cond {
            %5 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc22)
            %6 = cir.const #cir.int<100> : !s32i loc(#loc23)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc23)
            %8 = cir.cmp(lt, %5, %7) : !u64i, !cir.bool loc(#loc125)
            cir.condition(%8) loc(#loc24)
          } body {
            cir.scope {
              %5 = cir.const #cir.int<0> : !s32i loc(#loc26)
              %6 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc27)
              %7 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc28)
              %8 = cir.ptr_stride(%7 : !cir.ptr<!ty__twoIntsStruct>, %6 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc28)
              %9 = cir.get_member %8[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc29)
              cir.store %5, %9 : !s32i, !cir.ptr<!s32i> loc(#loc127)
              %10 = cir.const #cir.int<0> : !s32i loc(#loc30)
              %11 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc31)
              %12 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc32)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!ty__twoIntsStruct>, %11 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc32)
              %14 = cir.get_member %13[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc33)
              cir.store %10, %14 : !s32i, !cir.ptr<!s32i> loc(#loc128)
            } loc(#loc126)
            cir.yield loc(#loc19)
          } step {
            %5 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc34)
            %6 = cir.unary(inc, %5) : !u64i, !u64i loc(#loc35)
            cir.store %6, %2 : !u64i, !cir.ptr<!u64i> loc(#loc129)
            cir.yield loc(#loc123)
          } loc(#loc123)
        } loc(#loc123)
      } loc(#loc121)
      cir.scope {
        %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc131)
        cir.scope {
          %9 = cir.const #cir.int<0> : !s32i loc(#loc42)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc42)
          cir.store %10, %2 : !u64i, !cir.ptr<!u64i> loc(#loc133)
          cir.for : cond {
            %11 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc44)
            %12 = cir.const #cir.int<100> : !s32i loc(#loc45)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc45)
            %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc134)
            cir.condition(%14) loc(#loc46)
          } body {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc48)
              %12 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc49)
              %13 = cir.ptr_stride(%11 : !cir.ptr<!ty__twoIntsStruct>, %12 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc50)
              %14 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc51)
              %15 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc52)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!ty__twoIntsStruct>, %14 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc52)
              cir.copy %16 to %13 : !cir.ptr<!ty__twoIntsStruct> loc(#loc50)
            } loc(#loc135)
            cir.yield loc(#loc41)
          } step {
            %11 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc53)
            %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc54)
            cir.store %12, %2 : !u64i, !cir.ptr<!u64i> loc(#loc136)
            cir.yield loc(#loc132)
          } loc(#loc132)
        } loc(#loc132)
        %3 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc55)
        %4 = cir.const #cir.int<0> : !s32i loc(#loc56)
        %5 = cir.ptr_stride(%3 : !cir.ptr<!ty__twoIntsStruct>, %4 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc57)
        cir.call @printStructLine(%5) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc58)
        %6 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc59)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc60)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc60)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc59)
      } loc(#loc130)
    } loc(#loc119)
    cir.return loc(#loc6)
  } loc(#loc117)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c_goodG2BSink(%arg0: !cir.ptr<!ty__twoIntsStruct> loc(fused[#loc63, #loc64])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc138)
    cir.store %arg0, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc65)
    cir.scope {
      %1 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc140)
      cir.scope {
        %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc142)
        cir.scope {
          %3 = cir.const #cir.int<0> : !s32i loc(#loc76)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc76)
          cir.store %4, %2 : !u64i, !cir.ptr<!u64i> loc(#loc144)
          cir.for : cond {
            %5 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc78)
            %6 = cir.const #cir.int<100> : !s32i loc(#loc79)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc79)
            %8 = cir.cmp(lt, %5, %7) : !u64i, !cir.bool loc(#loc145)
            cir.condition(%8) loc(#loc80)
          } body {
            cir.scope {
              %5 = cir.const #cir.int<0> : !s32i loc(#loc82)
              %6 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc83)
              %7 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc84)
              %8 = cir.ptr_stride(%7 : !cir.ptr<!ty__twoIntsStruct>, %6 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc84)
              %9 = cir.get_member %8[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc29)
              cir.store %5, %9 : !s32i, !cir.ptr<!s32i> loc(#loc147)
              %10 = cir.const #cir.int<0> : !s32i loc(#loc85)
              %11 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc86)
              %12 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc87)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!ty__twoIntsStruct>, %11 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc87)
              %14 = cir.get_member %13[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc33)
              cir.store %10, %14 : !s32i, !cir.ptr<!s32i> loc(#loc148)
            } loc(#loc146)
            cir.yield loc(#loc75)
          } step {
            %5 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc88)
            %6 = cir.unary(inc, %5) : !u64i, !u64i loc(#loc89)
            cir.store %6, %2 : !u64i, !cir.ptr<!u64i> loc(#loc149)
            cir.yield loc(#loc143)
          } loc(#loc143)
        } loc(#loc143)
      } loc(#loc141)
      cir.scope {
        %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc151)
        cir.scope {
          %9 = cir.const #cir.int<0> : !s32i loc(#loc96)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc96)
          cir.store %10, %2 : !u64i, !cir.ptr<!u64i> loc(#loc153)
          cir.for : cond {
            %11 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc98)
            %12 = cir.const #cir.int<100> : !s32i loc(#loc99)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc99)
            %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc154)
            cir.condition(%14) loc(#loc100)
          } body {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc102)
              %12 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc103)
              %13 = cir.ptr_stride(%11 : !cir.ptr<!ty__twoIntsStruct>, %12 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc104)
              %14 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc105)
              %15 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc106)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!ty__twoIntsStruct>, %14 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc106)
              cir.copy %16 to %13 : !cir.ptr<!ty__twoIntsStruct> loc(#loc104)
            } loc(#loc155)
            cir.yield loc(#loc95)
          } step {
            %11 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc107)
            %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc108)
            cir.store %12, %2 : !u64i, !cir.ptr<!u64i> loc(#loc156)
            cir.yield loc(#loc152)
          } loc(#loc152)
        } loc(#loc152)
        %3 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc109)
        %4 = cir.const #cir.int<0> : !s32i loc(#loc110)
        %5 = cir.ptr_stride(%3 : !cir.ptr<!ty__twoIntsStruct>, %4 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc111)
        cir.call @printStructLine(%5) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc112)
        %6 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc113)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc114)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc114)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc113)
      } loc(#loc150)
    } loc(#loc139)
    cir.return loc(#loc62)
  } loc(#loc137)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":23:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":47:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":24:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":25:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":46:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":26:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":26:33)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":27:9)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":35:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":28:13)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":28:20)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":30:13)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":34:13)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":30:22)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":30:18)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":30:25)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":30:29)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":30:27)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":31:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":32:36)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":32:24)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":32:17)
#loc29 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":33:36)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":33:24)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":33:17)
#loc33 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":30:35)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":30:34)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":36:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":45:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":37:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":37:20)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":39:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":42:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":39:22)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":39:18)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":39:25)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":39:29)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":39:27)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":40:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":41:17)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":41:22)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":41:23)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":41:34)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":41:27)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":39:35)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":39:34)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":43:30)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":43:35)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":43:36)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":43:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":44:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":44:18)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":54:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":78:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":55:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":56:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":77:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":57:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":57:33)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":58:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":66:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":59:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":59:20)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":61:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":65:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":61:22)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":61:18)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":61:25)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":61:29)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":61:27)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":62:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":63:36)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":63:24)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":63:17)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":64:36)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":64:24)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":64:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":61:35)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":61:34)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":67:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":76:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":68:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":68:20)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":70:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":73:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":70:22)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":70:18)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":70:25)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":70:29)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":70:27)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":71:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":72:17)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":72:22)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":72:23)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":72:34)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":72:27)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":70:35)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":70:34)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":74:30)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":74:35)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":74:36)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":74:13)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":75:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c":75:18)
#loc115 = loc(fused[#loc1, #loc2])
#loc116 = loc(fused[#loc3, #loc4])
#loc117 = loc(fused[#loc5, #loc6])
#loc119 = loc(fused[#loc10, #loc11])
#loc120 = loc(fused[#loc12, #loc13])
#loc121 = loc(fused[#loc14, #loc15])
#loc122 = loc(fused[#loc16, #loc17])
#loc123 = loc(fused[#loc18, #loc19])
#loc124 = loc(fused[#loc21, #loc20])
#loc125 = loc(fused[#loc22, #loc23])
#loc126 = loc(fused[#loc25, #loc19])
#loc127 = loc(fused[#loc28, #loc26])
#loc128 = loc(fused[#loc32, #loc30])
#loc129 = loc(fused[#loc35, #loc34])
#loc130 = loc(fused[#loc36, #loc37])
#loc131 = loc(fused[#loc38, #loc39])
#loc132 = loc(fused[#loc40, #loc41])
#loc133 = loc(fused[#loc43, #loc42])
#loc134 = loc(fused[#loc44, #loc45])
#loc135 = loc(fused[#loc47, #loc41])
#loc136 = loc(fused[#loc54, #loc53])
#loc137 = loc(fused[#loc61, #loc62])
#loc139 = loc(fused[#loc66, #loc67])
#loc140 = loc(fused[#loc68, #loc69])
#loc141 = loc(fused[#loc70, #loc71])
#loc142 = loc(fused[#loc72, #loc73])
#loc143 = loc(fused[#loc74, #loc75])
#loc144 = loc(fused[#loc77, #loc76])
#loc145 = loc(fused[#loc78, #loc79])
#loc146 = loc(fused[#loc81, #loc75])
#loc147 = loc(fused[#loc84, #loc82])
#loc148 = loc(fused[#loc87, #loc85])
#loc149 = loc(fused[#loc89, #loc88])
#loc150 = loc(fused[#loc90, #loc91])
#loc151 = loc(fused[#loc92, #loc93])
#loc152 = loc(fused[#loc94, #loc95])
#loc153 = loc(fused[#loc97, #loc96])
#loc154 = loc(fused[#loc98, #loc99])
#loc155 = loc(fused[#loc101, #loc95])
#loc156 = loc(fused[#loc108, #loc107])
