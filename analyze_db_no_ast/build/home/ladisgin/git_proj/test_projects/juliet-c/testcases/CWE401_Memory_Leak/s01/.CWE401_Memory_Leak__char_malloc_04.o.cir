!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_malloc_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc177)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc178)
  cir.func private  @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc179)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"A String\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc7)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc180)
  cir.func no_proto  @CWE401_Memory_Leak__char_malloc_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc182)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc14)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc183)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc18)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc18)
      cir.if %3 {
        %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc20)
        %5 = cir.const #cir.int<100> : !s32i loc(#loc21)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc21)
        %7 = cir.const #cir.int<1> : !u64i loc(#loc186)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc187)
        %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc188)
        cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc189)
        cir.scope {
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
          %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc29)
          %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s8i>, !s32i loc(#loc191)
          %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc30)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc33)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc34)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
          } loc(#loc192)
        } loc(#loc190)
        %11 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc35)
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
        %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc7)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc7)
        %15 = cir.call @strcpy(%12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc35)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
        cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc38)
      } loc(#loc185)
    } loc(#loc184)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc41)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc41)
      cir.if %3 {
      } loc(#loc194)
    } loc(#loc193)
    cir.return loc(#loc11)
  } loc(#loc181)
  cir.func no_proto  @CWE401_Memory_Leak__char_malloc_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc196)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc197)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc198)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc199)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    cir.return loc(#loc44)
  } loc(#loc195)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc53)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc200)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc202)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc60)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc203)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc64)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc64)
      cir.if %3 {
        %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc66)
        %5 = cir.const #cir.int<100> : !s32i loc(#loc67)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc67)
        %7 = cir.const #cir.int<1> : !u64i loc(#loc206)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc207)
        %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc66)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc208)
        cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc209)
        cir.scope {
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
          %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc75)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc75)
          %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s8i>, !s32i loc(#loc211)
          %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc76)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc78)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc79)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc80)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc78)
          } loc(#loc212)
        } loc(#loc210)
        %11 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc81)
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc82)
        %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc83)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc83)
        %15 = cir.call @strcpy(%12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc81)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc84)
        cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc85)
      } loc(#loc205)
    } loc(#loc204)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc88)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc88)
      cir.if %3 {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc53)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc53)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc92)
      } else {
        %4 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc93)
        %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
        %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc94)
        cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc93)
      } loc(#loc214)
    } loc(#loc213)
    cir.return loc(#loc57)
  } loc(#loc201)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc216)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc99)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc217)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc103)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc103)
      cir.if %3 {
        %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc105)
        %5 = cir.const #cir.int<100> : !s32i loc(#loc106)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc106)
        %7 = cir.const #cir.int<1> : !u64i loc(#loc220)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc221)
        %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc105)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc222)
        cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc223)
        cir.scope {
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc113)
          %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc114)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc114)
          %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s8i>, !s32i loc(#loc225)
          %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc115)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc117)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc118)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc119)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc117)
          } loc(#loc226)
        } loc(#loc224)
        %11 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc120)
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc121)
        %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc122)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc122)
        %15 = cir.call @strcpy(%12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc120)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
        cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc124)
      } loc(#loc219)
    } loc(#loc218)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc127)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc127)
      cir.if %3 {
        %4 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc129)
        %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
        %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc130)
        cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc129)
      } loc(#loc228)
    } loc(#loc227)
    cir.return loc(#loc96)
  } loc(#loc215)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc230)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc135)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc231)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc139)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc139)
      cir.if %3 {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc143)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc143)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc144)
      } else {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc145)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc145)
        %6 = cir.const #cir.int<1> : !u64i loc(#loc145)
        %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc145)
        %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc145)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc145)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc145)
        cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc234)
        %11 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc147)
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
        %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc149)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc149)
        %15 = cir.call @strcpy(%12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc147)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc150)
        cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc151)
      } loc(#loc233)
    } loc(#loc232)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc154)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc154)
      cir.if %3 {
      } loc(#loc236)
    } loc(#loc235)
    cir.return loc(#loc132)
  } loc(#loc229)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc238)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc160)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc239)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc164)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc164)
      cir.if %3 {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc166)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc166)
        %6 = cir.const #cir.int<1> : !u64i loc(#loc166)
        %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc166)
        %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc166)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc166)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc166)
        cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc242)
        %11 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc168)
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc169)
        %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc170)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc170)
        %15 = cir.call @strcpy(%12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc168)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc171)
        cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc172)
      } loc(#loc241)
    } loc(#loc240)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc175)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc175)
      cir.if %3 {
      } loc(#loc244)
    } loc(#loc243)
    cir.return loc(#loc157)
  } loc(#loc237)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_malloc_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":141:1)
#loc6 = loc("/usr/include/string.h":142:14)
#loc7 = loc("CWE401_Memory_Leak__char_malloc_04.c":40:22)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE401_Memory_Leak__char_malloc_04.c":30:1)
#loc11 = loc("CWE401_Memory_Leak__char_malloc_04.c":48:1)
#loc12 = loc("CWE401_Memory_Leak__char_malloc_04.c":32:5)
#loc13 = loc("CWE401_Memory_Leak__char_malloc_04.c":32:12)
#loc14 = loc("CWE401_Memory_Leak__char_malloc_04.c":33:12)
#loc15 = loc("CWE401_Memory_Leak__char_malloc_04.c":33:5)
#loc16 = loc("CWE401_Memory_Leak__char_malloc_04.c":34:5)
#loc17 = loc("CWE401_Memory_Leak__char_malloc_04.c":42:5)
#loc18 = loc("CWE401_Memory_Leak__char_malloc_04.c":34:8)
#loc19 = loc("CWE401_Memory_Leak__char_malloc_04.c":35:5)
#loc20 = loc("CWE401_Memory_Leak__char_malloc_04.c":37:24)
#loc21 = loc("CWE401_Memory_Leak__char_malloc_04.c":37:31)
#loc22 = loc("CWE401_Memory_Leak__char_malloc_04.c":37:35)
#loc23 = loc("CWE401_Memory_Leak__char_malloc_04.c":37:46)
#loc24 = loc("CWE401_Memory_Leak__char_malloc_04.c":37:47)
#loc25 = loc("CWE401_Memory_Leak__char_malloc_04.c":37:9)
#loc26 = loc("CWE401_Memory_Leak__char_malloc_04.c":38:9)
#loc27 = loc("CWE401_Memory_Leak__char_malloc_04.c":38:37)
#loc28 = loc("CWE401_Memory_Leak__char_malloc_04.c":38:13)
#loc29 = loc("CWE401_Memory_Leak__char_malloc_04.c":38:21)
#loc30 = loc("CWE401_Memory_Leak__char_malloc_04.c":38:18)
#loc31 = loc("CWE401_Memory_Leak__char_malloc_04.c":38:27)
#loc32 = loc("CWE401_Memory_Leak__char_malloc_04.c":38:28)
#loc33 = loc("CWE401_Memory_Leak__char_malloc_04.c":38:34)
#loc34 = loc("CWE401_Memory_Leak__char_malloc_04.c":38:33)
#loc35 = loc("CWE401_Memory_Leak__char_malloc_04.c":40:9)
#loc36 = loc("CWE401_Memory_Leak__char_malloc_04.c":40:16)
#loc37 = loc("CWE401_Memory_Leak__char_malloc_04.c":41:19)
#loc38 = loc("CWE401_Memory_Leak__char_malloc_04.c":41:9)
#loc39 = loc("CWE401_Memory_Leak__char_malloc_04.c":43:5)
#loc40 = loc("CWE401_Memory_Leak__char_malloc_04.c":47:5)
#loc41 = loc("CWE401_Memory_Leak__char_malloc_04.c":43:8)
#loc42 = loc("CWE401_Memory_Leak__char_malloc_04.c":44:5)
#loc43 = loc("CWE401_Memory_Leak__char_malloc_04.c":146:1)
#loc44 = loc("CWE401_Memory_Leak__char_malloc_04.c":152:1)
#loc45 = loc("CWE401_Memory_Leak__char_malloc_04.c":148:5)
#loc46 = loc("CWE401_Memory_Leak__char_malloc_04.c":148:14)
#loc47 = loc("CWE401_Memory_Leak__char_malloc_04.c":149:5)
#loc48 = loc("CWE401_Memory_Leak__char_malloc_04.c":149:14)
#loc49 = loc("CWE401_Memory_Leak__char_malloc_04.c":150:5)
#loc50 = loc("CWE401_Memory_Leak__char_malloc_04.c":150:14)
#loc51 = loc("CWE401_Memory_Leak__char_malloc_04.c":151:5)
#loc52 = loc("CWE401_Memory_Leak__char_malloc_04.c":151:14)
#loc53 = loc("CWE401_Memory_Leak__char_malloc_04.c":71:19)
#loc54 = loc("/usr/include/stdlib.h":687:1)
#loc55 = loc("/usr/include/stdlib.h":687:32)
#loc56 = loc("CWE401_Memory_Leak__char_malloc_04.c":55:1)
#loc57 = loc("CWE401_Memory_Leak__char_malloc_04.c":78:1)
#loc58 = loc("CWE401_Memory_Leak__char_malloc_04.c":57:5)
#loc59 = loc("CWE401_Memory_Leak__char_malloc_04.c":57:12)
#loc60 = loc("CWE401_Memory_Leak__char_malloc_04.c":58:12)
#loc61 = loc("CWE401_Memory_Leak__char_malloc_04.c":58:5)
#loc62 = loc("CWE401_Memory_Leak__char_malloc_04.c":59:5)
#loc63 = loc("CWE401_Memory_Leak__char_malloc_04.c":67:5)
#loc64 = loc("CWE401_Memory_Leak__char_malloc_04.c":59:8)
#loc65 = loc("CWE401_Memory_Leak__char_malloc_04.c":60:5)
#loc66 = loc("CWE401_Memory_Leak__char_malloc_04.c":62:24)
#loc67 = loc("CWE401_Memory_Leak__char_malloc_04.c":62:31)
#loc68 = loc("CWE401_Memory_Leak__char_malloc_04.c":62:35)
#loc69 = loc("CWE401_Memory_Leak__char_malloc_04.c":62:46)
#loc70 = loc("CWE401_Memory_Leak__char_malloc_04.c":62:47)
#loc71 = loc("CWE401_Memory_Leak__char_malloc_04.c":62:9)
#loc72 = loc("CWE401_Memory_Leak__char_malloc_04.c":63:9)
#loc73 = loc("CWE401_Memory_Leak__char_malloc_04.c":63:37)
#loc74 = loc("CWE401_Memory_Leak__char_malloc_04.c":63:13)
#loc75 = loc("CWE401_Memory_Leak__char_malloc_04.c":63:21)
#loc76 = loc("CWE401_Memory_Leak__char_malloc_04.c":63:18)
#loc77 = loc("CWE401_Memory_Leak__char_malloc_04.c":63:27)
#loc78 = loc("CWE401_Memory_Leak__char_malloc_04.c":63:28)
#loc79 = loc("CWE401_Memory_Leak__char_malloc_04.c":63:34)
#loc80 = loc("CWE401_Memory_Leak__char_malloc_04.c":63:33)
#loc81 = loc("CWE401_Memory_Leak__char_malloc_04.c":65:9)
#loc82 = loc("CWE401_Memory_Leak__char_malloc_04.c":65:16)
#loc83 = loc("CWE401_Memory_Leak__char_malloc_04.c":65:22)
#loc84 = loc("CWE401_Memory_Leak__char_malloc_04.c":66:19)
#loc85 = loc("CWE401_Memory_Leak__char_malloc_04.c":66:9)
#loc86 = loc("CWE401_Memory_Leak__char_malloc_04.c":68:5)
#loc87 = loc("CWE401_Memory_Leak__char_malloc_04.c":77:5)
#loc88 = loc("CWE401_Memory_Leak__char_malloc_04.c":68:8)
#loc89 = loc("CWE401_Memory_Leak__char_malloc_04.c":69:5)
#loc90 = loc("CWE401_Memory_Leak__char_malloc_04.c":72:5)
#loc91 = loc("CWE401_Memory_Leak__char_malloc_04.c":74:5)
#loc92 = loc("CWE401_Memory_Leak__char_malloc_04.c":71:9)
#loc93 = loc("CWE401_Memory_Leak__char_malloc_04.c":76:9)
#loc94 = loc("CWE401_Memory_Leak__char_malloc_04.c":76:14)
#loc95 = loc("CWE401_Memory_Leak__char_malloc_04.c":81:1)
#loc96 = loc("CWE401_Memory_Leak__char_malloc_04.c":99:1)
#loc97 = loc("CWE401_Memory_Leak__char_malloc_04.c":83:5)
#loc98 = loc("CWE401_Memory_Leak__char_malloc_04.c":83:12)
#loc99 = loc("CWE401_Memory_Leak__char_malloc_04.c":84:12)
#loc100 = loc("CWE401_Memory_Leak__char_malloc_04.c":84:5)
#loc101 = loc("CWE401_Memory_Leak__char_malloc_04.c":85:5)
#loc102 = loc("CWE401_Memory_Leak__char_malloc_04.c":93:5)
#loc103 = loc("CWE401_Memory_Leak__char_malloc_04.c":85:8)
#loc104 = loc("CWE401_Memory_Leak__char_malloc_04.c":86:5)
#loc105 = loc("CWE401_Memory_Leak__char_malloc_04.c":88:24)
#loc106 = loc("CWE401_Memory_Leak__char_malloc_04.c":88:31)
#loc107 = loc("CWE401_Memory_Leak__char_malloc_04.c":88:35)
#loc108 = loc("CWE401_Memory_Leak__char_malloc_04.c":88:46)
#loc109 = loc("CWE401_Memory_Leak__char_malloc_04.c":88:47)
#loc110 = loc("CWE401_Memory_Leak__char_malloc_04.c":88:9)
#loc111 = loc("CWE401_Memory_Leak__char_malloc_04.c":89:9)
#loc112 = loc("CWE401_Memory_Leak__char_malloc_04.c":89:37)
#loc113 = loc("CWE401_Memory_Leak__char_malloc_04.c":89:13)
#loc114 = loc("CWE401_Memory_Leak__char_malloc_04.c":89:21)
#loc115 = loc("CWE401_Memory_Leak__char_malloc_04.c":89:18)
#loc116 = loc("CWE401_Memory_Leak__char_malloc_04.c":89:27)
#loc117 = loc("CWE401_Memory_Leak__char_malloc_04.c":89:28)
#loc118 = loc("CWE401_Memory_Leak__char_malloc_04.c":89:34)
#loc119 = loc("CWE401_Memory_Leak__char_malloc_04.c":89:33)
#loc120 = loc("CWE401_Memory_Leak__char_malloc_04.c":91:9)
#loc121 = loc("CWE401_Memory_Leak__char_malloc_04.c":91:16)
#loc122 = loc("CWE401_Memory_Leak__char_malloc_04.c":91:22)
#loc123 = loc("CWE401_Memory_Leak__char_malloc_04.c":92:19)
#loc124 = loc("CWE401_Memory_Leak__char_malloc_04.c":92:9)
#loc125 = loc("CWE401_Memory_Leak__char_malloc_04.c":94:5)
#loc126 = loc("CWE401_Memory_Leak__char_malloc_04.c":98:5)
#loc127 = loc("CWE401_Memory_Leak__char_malloc_04.c":94:8)
#loc128 = loc("CWE401_Memory_Leak__char_malloc_04.c":95:5)
#loc129 = loc("CWE401_Memory_Leak__char_malloc_04.c":97:9)
#loc130 = loc("CWE401_Memory_Leak__char_malloc_04.c":97:14)
#loc131 = loc("CWE401_Memory_Leak__char_malloc_04.c":102:1)
#loc132 = loc("CWE401_Memory_Leak__char_malloc_04.c":124:1)
#loc133 = loc("CWE401_Memory_Leak__char_malloc_04.c":104:5)
#loc134 = loc("CWE401_Memory_Leak__char_malloc_04.c":104:12)
#loc135 = loc("CWE401_Memory_Leak__char_malloc_04.c":105:12)
#loc136 = loc("CWE401_Memory_Leak__char_malloc_04.c":105:5)
#loc137 = loc("CWE401_Memory_Leak__char_malloc_04.c":106:5)
#loc138 = loc("CWE401_Memory_Leak__char_malloc_04.c":118:5)
#loc139 = loc("CWE401_Memory_Leak__char_malloc_04.c":106:8)
#loc140 = loc("CWE401_Memory_Leak__char_malloc_04.c":107:5)
#loc141 = loc("CWE401_Memory_Leak__char_malloc_04.c":110:5)
#loc142 = loc("CWE401_Memory_Leak__char_malloc_04.c":112:5)
#loc143 = loc("CWE401_Memory_Leak__char_malloc_04.c":109:19)
#loc144 = loc("CWE401_Memory_Leak__char_malloc_04.c":109:9)
#loc145 = loc("CWE401_Memory_Leak__char_malloc_04.c":114:24)
#loc146 = loc("CWE401_Memory_Leak__char_malloc_04.c":114:9)
#loc147 = loc("CWE401_Memory_Leak__char_malloc_04.c":116:9)
#loc148 = loc("CWE401_Memory_Leak__char_malloc_04.c":116:16)
#loc149 = loc("CWE401_Memory_Leak__char_malloc_04.c":116:22)
#loc150 = loc("CWE401_Memory_Leak__char_malloc_04.c":117:19)
#loc151 = loc("CWE401_Memory_Leak__char_malloc_04.c":117:9)
#loc152 = loc("CWE401_Memory_Leak__char_malloc_04.c":119:5)
#loc153 = loc("CWE401_Memory_Leak__char_malloc_04.c":123:5)
#loc154 = loc("CWE401_Memory_Leak__char_malloc_04.c":119:8)
#loc155 = loc("CWE401_Memory_Leak__char_malloc_04.c":120:5)
#loc156 = loc("CWE401_Memory_Leak__char_malloc_04.c":127:1)
#loc157 = loc("CWE401_Memory_Leak__char_malloc_04.c":144:1)
#loc158 = loc("CWE401_Memory_Leak__char_malloc_04.c":129:5)
#loc159 = loc("CWE401_Memory_Leak__char_malloc_04.c":129:12)
#loc160 = loc("CWE401_Memory_Leak__char_malloc_04.c":130:12)
#loc161 = loc("CWE401_Memory_Leak__char_malloc_04.c":130:5)
#loc162 = loc("CWE401_Memory_Leak__char_malloc_04.c":131:5)
#loc163 = loc("CWE401_Memory_Leak__char_malloc_04.c":138:5)
#loc164 = loc("CWE401_Memory_Leak__char_malloc_04.c":131:8)
#loc165 = loc("CWE401_Memory_Leak__char_malloc_04.c":132:5)
#loc166 = loc("CWE401_Memory_Leak__char_malloc_04.c":134:24)
#loc167 = loc("CWE401_Memory_Leak__char_malloc_04.c":134:9)
#loc168 = loc("CWE401_Memory_Leak__char_malloc_04.c":136:9)
#loc169 = loc("CWE401_Memory_Leak__char_malloc_04.c":136:16)
#loc170 = loc("CWE401_Memory_Leak__char_malloc_04.c":136:22)
#loc171 = loc("CWE401_Memory_Leak__char_malloc_04.c":137:19)
#loc172 = loc("CWE401_Memory_Leak__char_malloc_04.c":137:9)
#loc173 = loc("CWE401_Memory_Leak__char_malloc_04.c":139:5)
#loc174 = loc("CWE401_Memory_Leak__char_malloc_04.c":143:5)
#loc175 = loc("CWE401_Memory_Leak__char_malloc_04.c":139:8)
#loc176 = loc("CWE401_Memory_Leak__char_malloc_04.c":140:5)
#loc177 = loc(fused[#loc1, #loc2])
#loc178 = loc(fused[#loc3, #loc4])
#loc179 = loc(fused[#loc5, #loc6])
#loc180 = loc(fused[#loc8, #loc9])
#loc181 = loc(fused[#loc10, #loc11])
#loc182 = loc(fused[#loc12, #loc13])
#loc183 = loc(fused[#loc15, #loc14])
#loc184 = loc(fused[#loc16, #loc17])
#loc185 = loc(fused[#loc19, #loc17])
#loc186 = loc(fused[#loc22, #loc23])
#loc187 = loc(fused[#loc21, #loc23])
#loc188 = loc(fused[#loc20, #loc24])
#loc189 = loc(fused[#loc25, #loc24])
#loc190 = loc(fused[#loc26, #loc27])
#loc191 = loc(fused[#loc28, #loc29])
#loc192 = loc(fused[#loc31, #loc27])
#loc193 = loc(fused[#loc39, #loc40])
#loc194 = loc(fused[#loc42, #loc40])
#loc195 = loc(fused[#loc43, #loc44])
#loc196 = loc(fused[#loc45, #loc46])
#loc197 = loc(fused[#loc47, #loc48])
#loc198 = loc(fused[#loc49, #loc50])
#loc199 = loc(fused[#loc51, #loc52])
#loc200 = loc(fused[#loc54, #loc55])
#loc201 = loc(fused[#loc56, #loc57])
#loc202 = loc(fused[#loc58, #loc59])
#loc203 = loc(fused[#loc61, #loc60])
#loc204 = loc(fused[#loc62, #loc63])
#loc205 = loc(fused[#loc65, #loc63])
#loc206 = loc(fused[#loc68, #loc69])
#loc207 = loc(fused[#loc67, #loc69])
#loc208 = loc(fused[#loc66, #loc70])
#loc209 = loc(fused[#loc71, #loc70])
#loc210 = loc(fused[#loc72, #loc73])
#loc211 = loc(fused[#loc74, #loc75])
#loc212 = loc(fused[#loc77, #loc73])
#loc213 = loc(fused[#loc86, #loc87])
#loc214 = loc(fused[#loc89, #loc90, #loc91, #loc87])
#loc215 = loc(fused[#loc95, #loc96])
#loc216 = loc(fused[#loc97, #loc98])
#loc217 = loc(fused[#loc100, #loc99])
#loc218 = loc(fused[#loc101, #loc102])
#loc219 = loc(fused[#loc104, #loc102])
#loc220 = loc(fused[#loc107, #loc108])
#loc221 = loc(fused[#loc106, #loc108])
#loc222 = loc(fused[#loc105, #loc109])
#loc223 = loc(fused[#loc110, #loc109])
#loc224 = loc(fused[#loc111, #loc112])
#loc225 = loc(fused[#loc113, #loc114])
#loc226 = loc(fused[#loc116, #loc112])
#loc227 = loc(fused[#loc125, #loc126])
#loc228 = loc(fused[#loc128, #loc126])
#loc229 = loc(fused[#loc131, #loc132])
#loc230 = loc(fused[#loc133, #loc134])
#loc231 = loc(fused[#loc136, #loc135])
#loc232 = loc(fused[#loc137, #loc138])
#loc233 = loc(fused[#loc140, #loc141, #loc142, #loc138])
#loc234 = loc(fused[#loc146, #loc145])
#loc235 = loc(fused[#loc152, #loc153])
#loc236 = loc(fused[#loc155, #loc153])
#loc237 = loc(fused[#loc156, #loc157])
#loc238 = loc(fused[#loc158, #loc159])
#loc239 = loc(fused[#loc161, #loc160])
#loc240 = loc(fused[#loc162, #loc163])
#loc241 = loc(fused[#loc165, #loc163])
#loc242 = loc(fused[#loc167, #loc166])
#loc243 = loc(fused[#loc173, #loc174])
#loc244 = loc(fused[#loc176, #loc174])
