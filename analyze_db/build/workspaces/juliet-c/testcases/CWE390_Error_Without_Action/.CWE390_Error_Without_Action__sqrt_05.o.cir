!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc104)
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc105)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc5)
  cir.func private @printDoubleLine(!cir.double) loc(#loc106)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_05_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc104)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc12)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc12)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc111)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc18)
          %5 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc19)
          cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc112)
          %6 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc20)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc21)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc22)
          %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc22)
          %10 = cir.call @sqrt(%9) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc20)
          cir.store %10, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc113)
          cir.scope {
            %12 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc27)
            %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc27)
            %14 = cir.const #cir.int<33> : !s32i loc(#loc28)
            %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc115)
            cir.if %15 {
            } loc(#loc116)
          } loc(#loc114)
          %11 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc30)
          cir.call @printDoubleLine(%11) : (!cir.double) -> () loc(#loc31)
        } loc(#loc110)
      } loc(#loc109)
    } loc(#loc108)
    cir.return loc(#loc9)
  } loc(#loc107)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc118)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc119)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc117)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc120)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc121)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc43)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc122)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc120)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc50)
      cir.if %2 {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc42)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc42)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc54)
      } else {
        cir.scope {
          %3 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc127)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc59)
          %5 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc60)
          cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc128)
          %6 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc61)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc62)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc63)
          %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc63)
          %10 = cir.call @sqrt(%9) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc61)
          cir.store %10, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc129)
          cir.scope {
            %12 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc68)
            %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc68)
            %14 = cir.const #cir.int<33> : !s32i loc(#loc69)
            %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc131)
            cir.if %15 {
              %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc43)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc43)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc71)
              %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc72)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc73)
              cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc72)
            } loc(#loc132)
          } loc(#loc130)
          %11 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc74)
          cir.call @printDoubleLine(%11) : (!cir.double) -> () loc(#loc75)
        } loc(#loc126)
      } loc(#loc125)
    } loc(#loc124)
    cir.return loc(#loc47)
  } loc(#loc123)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc104)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc80)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc137)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc86)
          %5 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc87)
          cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc138)
          %6 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc88)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc89)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc90)
          %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc90)
          %10 = cir.call @sqrt(%9) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc88)
          cir.store %10, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc139)
          cir.scope {
            %12 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc95)
            %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc95)
            %14 = cir.const #cir.int<33> : !s32i loc(#loc96)
            %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc141)
            cir.if %15 {
              %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc98)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc98)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc99)
              %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc100)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc101)
              cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc100)
            } loc(#loc142)
          } loc(#loc140)
          %11 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc102)
          cir.call @printDoubleLine(%11) : (!cir.double) -> () loc(#loc103)
        } loc(#loc136)
      } loc(#loc135)
    } loc(#loc134)
    cir.return loc(#loc77)
  } loc(#loc133)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_05.c":0:0)
#loc1 = loc("CWE390_Error_Without_Action__sqrt_05.c":24:1)
#loc2 = loc("CWE390_Error_Without_Action__sqrt_05.c":24:25)
#loc3 = loc("/usr/include/errno.h":37:1)
#loc4 = loc("/usr/include/errno.h":37:45)
#loc5 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc8 = loc("CWE390_Error_Without_Action__sqrt_05.c":29:1)
#loc9 = loc("CWE390_Error_Without_Action__sqrt_05.c":45:1)
#loc10 = loc("CWE390_Error_Without_Action__sqrt_05.c":31:5)
#loc11 = loc("CWE390_Error_Without_Action__sqrt_05.c":44:5)
#loc12 = loc("CWE390_Error_Without_Action__sqrt_05.c":31:8)
#loc13 = loc("CWE390_Error_Without_Action__sqrt_05.c":32:5)
#loc14 = loc("CWE390_Error_Without_Action__sqrt_05.c":33:9)
#loc15 = loc("CWE390_Error_Without_Action__sqrt_05.c":43:9)
#loc16 = loc("CWE390_Error_Without_Action__sqrt_05.c":34:13)
#loc17 = loc("CWE390_Error_Without_Action__sqrt_05.c":34:20)
#loc18 = loc("CWE390_Error_Without_Action__sqrt_05.c":35:21)
#loc19 = loc("CWE390_Error_Without_Action__sqrt_05.c":35:13)
#loc20 = loc("CWE390_Error_Without_Action__sqrt_05.c":36:36)
#loc21 = loc("CWE390_Error_Without_Action__sqrt_05.c":36:50)
#loc22 = loc("CWE390_Error_Without_Action__sqrt_05.c":36:49)
#loc23 = loc("CWE390_Error_Without_Action__sqrt_05.c":36:13)
#loc24 = loc("CWE390_Error_Without_Action__sqrt_05.c":36:51)
#loc25 = loc("CWE390_Error_Without_Action__sqrt_05.c":38:13)
#loc26 = loc("CWE390_Error_Without_Action__sqrt_05.c":41:13)
#loc27 = loc("CWE390_Error_Without_Action__sqrt_05.c":38:17)
#loc28 = loc("CWE390_Error_Without_Action__sqrt_05.c":38:26)
#loc29 = loc("CWE390_Error_Without_Action__sqrt_05.c":39:13)
#loc30 = loc("CWE390_Error_Without_Action__sqrt_05.c":42:29)
#loc31 = loc("CWE390_Error_Without_Action__sqrt_05.c":42:13)
#loc32 = loc("CWE390_Error_Without_Action__sqrt_05.c":96:1)
#loc33 = loc("CWE390_Error_Without_Action__sqrt_05.c":100:1)
#loc34 = loc("CWE390_Error_Without_Action__sqrt_05.c":98:5)
#loc35 = loc("CWE390_Error_Without_Action__sqrt_05.c":98:11)
#loc36 = loc("CWE390_Error_Without_Action__sqrt_05.c":99:5)
#loc37 = loc("CWE390_Error_Without_Action__sqrt_05.c":99:11)
#loc38 = loc("CWE390_Error_Without_Action__sqrt_05.c":25:1)
#loc39 = loc("CWE390_Error_Without_Action__sqrt_05.c":25:26)
#loc40 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE390_Error_Without_Action__sqrt_05.c":57:19)
#loc43 = loc("CWE390_Error_Without_Action__sqrt_05.c":68:27)
#loc44 = loc("/usr/include/stdlib.h":756:1)
#loc45 = loc("/usr/include/stdlib.h":756:70)
#loc46 = loc("CWE390_Error_Without_Action__sqrt_05.c":52:1)
#loc47 = loc("CWE390_Error_Without_Action__sqrt_05.c":74:1)
#loc48 = loc("CWE390_Error_Without_Action__sqrt_05.c":54:5)
#loc49 = loc("CWE390_Error_Without_Action__sqrt_05.c":73:5)
#loc50 = loc("CWE390_Error_Without_Action__sqrt_05.c":54:8)
#loc51 = loc("CWE390_Error_Without_Action__sqrt_05.c":55:5)
#loc52 = loc("CWE390_Error_Without_Action__sqrt_05.c":58:5)
#loc53 = loc("CWE390_Error_Without_Action__sqrt_05.c":60:5)
#loc54 = loc("CWE390_Error_Without_Action__sqrt_05.c":57:9)
#loc55 = loc("CWE390_Error_Without_Action__sqrt_05.c":61:9)
#loc56 = loc("CWE390_Error_Without_Action__sqrt_05.c":72:9)
#loc57 = loc("CWE390_Error_Without_Action__sqrt_05.c":62:13)
#loc58 = loc("CWE390_Error_Without_Action__sqrt_05.c":62:20)
#loc59 = loc("CWE390_Error_Without_Action__sqrt_05.c":63:21)
#loc60 = loc("CWE390_Error_Without_Action__sqrt_05.c":63:13)
#loc61 = loc("CWE390_Error_Without_Action__sqrt_05.c":64:36)
#loc62 = loc("CWE390_Error_Without_Action__sqrt_05.c":64:50)
#loc63 = loc("CWE390_Error_Without_Action__sqrt_05.c":64:49)
#loc64 = loc("CWE390_Error_Without_Action__sqrt_05.c":64:13)
#loc65 = loc("CWE390_Error_Without_Action__sqrt_05.c":64:51)
#loc66 = loc("CWE390_Error_Without_Action__sqrt_05.c":66:13)
#loc67 = loc("CWE390_Error_Without_Action__sqrt_05.c":70:13)
#loc68 = loc("CWE390_Error_Without_Action__sqrt_05.c":66:17)
#loc69 = loc("CWE390_Error_Without_Action__sqrt_05.c":66:26)
#loc70 = loc("CWE390_Error_Without_Action__sqrt_05.c":67:13)
#loc71 = loc("CWE390_Error_Without_Action__sqrt_05.c":68:17)
#loc72 = loc("CWE390_Error_Without_Action__sqrt_05.c":69:17)
#loc73 = loc("CWE390_Error_Without_Action__sqrt_05.c":69:22)
#loc74 = loc("CWE390_Error_Without_Action__sqrt_05.c":71:29)
#loc75 = loc("CWE390_Error_Without_Action__sqrt_05.c":71:13)
#loc76 = loc("CWE390_Error_Without_Action__sqrt_05.c":77:1)
#loc77 = loc("CWE390_Error_Without_Action__sqrt_05.c":94:1)
#loc78 = loc("CWE390_Error_Without_Action__sqrt_05.c":79:5)
#loc79 = loc("CWE390_Error_Without_Action__sqrt_05.c":93:5)
#loc80 = loc("CWE390_Error_Without_Action__sqrt_05.c":79:8)
#loc81 = loc("CWE390_Error_Without_Action__sqrt_05.c":80:5)
#loc82 = loc("CWE390_Error_Without_Action__sqrt_05.c":81:9)
#loc83 = loc("CWE390_Error_Without_Action__sqrt_05.c":92:9)
#loc84 = loc("CWE390_Error_Without_Action__sqrt_05.c":82:13)
#loc85 = loc("CWE390_Error_Without_Action__sqrt_05.c":82:20)
#loc86 = loc("CWE390_Error_Without_Action__sqrt_05.c":83:21)
#loc87 = loc("CWE390_Error_Without_Action__sqrt_05.c":83:13)
#loc88 = loc("CWE390_Error_Without_Action__sqrt_05.c":84:36)
#loc89 = loc("CWE390_Error_Without_Action__sqrt_05.c":84:50)
#loc90 = loc("CWE390_Error_Without_Action__sqrt_05.c":84:49)
#loc91 = loc("CWE390_Error_Without_Action__sqrt_05.c":84:13)
#loc92 = loc("CWE390_Error_Without_Action__sqrt_05.c":84:51)
#loc93 = loc("CWE390_Error_Without_Action__sqrt_05.c":86:13)
#loc94 = loc("CWE390_Error_Without_Action__sqrt_05.c":90:13)
#loc95 = loc("CWE390_Error_Without_Action__sqrt_05.c":86:17)
#loc96 = loc("CWE390_Error_Without_Action__sqrt_05.c":86:26)
#loc97 = loc("CWE390_Error_Without_Action__sqrt_05.c":87:13)
#loc98 = loc("CWE390_Error_Without_Action__sqrt_05.c":88:27)
#loc99 = loc("CWE390_Error_Without_Action__sqrt_05.c":88:17)
#loc100 = loc("CWE390_Error_Without_Action__sqrt_05.c":89:17)
#loc101 = loc("CWE390_Error_Without_Action__sqrt_05.c":89:22)
#loc102 = loc("CWE390_Error_Without_Action__sqrt_05.c":91:29)
#loc103 = loc("CWE390_Error_Without_Action__sqrt_05.c":91:13)
#loc104 = loc(fused[#loc1, #loc2])
#loc105 = loc(fused[#loc3, #loc4])
#loc106 = loc(fused[#loc6, #loc7])
#loc107 = loc(fused[#loc8, #loc9])
#loc108 = loc(fused[#loc10, #loc11])
#loc109 = loc(fused[#loc13, #loc11])
#loc110 = loc(fused[#loc14, #loc15])
#loc111 = loc(fused[#loc16, #loc17])
#loc112 = loc(fused[#loc19, #loc18])
#loc113 = loc(fused[#loc23, #loc24])
#loc114 = loc(fused[#loc25, #loc26])
#loc115 = loc(fused[#loc27, #loc28])
#loc116 = loc(fused[#loc29, #loc26])
#loc117 = loc(fused[#loc32, #loc33])
#loc118 = loc(fused[#loc34, #loc35])
#loc119 = loc(fused[#loc36, #loc37])
#loc120 = loc(fused[#loc38, #loc39])
#loc121 = loc(fused[#loc40, #loc41])
#loc122 = loc(fused[#loc44, #loc45])
#loc123 = loc(fused[#loc46, #loc47])
#loc124 = loc(fused[#loc48, #loc49])
#loc125 = loc(fused[#loc51, #loc52, #loc53, #loc49])
#loc126 = loc(fused[#loc55, #loc56])
#loc127 = loc(fused[#loc57, #loc58])
#loc128 = loc(fused[#loc60, #loc59])
#loc129 = loc(fused[#loc64, #loc65])
#loc130 = loc(fused[#loc66, #loc67])
#loc131 = loc(fused[#loc68, #loc69])
#loc132 = loc(fused[#loc70, #loc67])
#loc133 = loc(fused[#loc76, #loc77])
#loc134 = loc(fused[#loc78, #loc79])
#loc135 = loc(fused[#loc81, #loc79])
#loc136 = loc(fused[#loc82, #loc83])
#loc137 = loc(fused[#loc84, #loc85])
#loc138 = loc(fused[#loc87, #loc86])
#loc139 = loc(fused[#loc91, #loc92])
#loc140 = loc(fused[#loc93, #loc94])
#loc141 = loc(fused[#loc95, #loc96])
#loc142 = loc(fused[#loc97, #loc94])
