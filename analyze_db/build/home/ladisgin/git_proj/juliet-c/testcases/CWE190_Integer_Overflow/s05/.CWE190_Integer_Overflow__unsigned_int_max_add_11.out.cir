!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":162:10)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":162:14)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":162:20)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":162:32)
#loc218 = loc(fused[#loc52, #loc53])
#loc219 = loc(fused[#loc54, #loc55])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc194)
  cir.func private @printUnsignedLine(!u32i) loc(#loc195)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_add_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc197)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc198)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc11)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc199)
    cir.br ^bb1 loc(#loc200)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc201)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc201)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc15)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc202)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc18)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc18)
    %10 = cir.const #cir.int<2> : !u32i loc(#loc18)
    %11 = cir.binop(mul, %9, %10) : !u32i loc(#loc18)
    %12 = cir.const #cir.int<1> : !u32i loc(#loc18)
    %13 = cir.binop(add, %11, %12) : !u32i loc(#loc18)
    cir.store %13, %1 : !u32i, !cir.ptr<!u32i> loc(#loc203)
    cir.br ^bb3 loc(#loc14)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc204)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc205)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc205)
    %16 = cir.call %15() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc22)
    %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %17 ^bb6, ^bb9 loc(#loc206)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc207)
  ^bb7:  // pred: ^bb6
    %18 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc27)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc8)
    %21 = cir.binop(add, %18, %20) : !u32i loc(#loc208)
    cir.store %21, %0 : !u32i, !cir.ptr<!u32i> loc(#loc197)
    %22 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc28)
    cir.call @printUnsignedLine(%22) : (!u32i) -> () loc(#loc29)
    cir.br ^bb8 loc(#loc26)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc21)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc21)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc6)
  } loc(#loc196)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_add_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc210)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc212)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc209)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc214)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc215)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc216)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc49)
  cir.func @main(%arg0: !s32i loc(fused[#loc52, #loc53]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc54, #loc55])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc218)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc219)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc51)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc56)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc56)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc57)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc58)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc58)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc59)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc46)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %8 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_max_add_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call @CWE190_Integer_Overflow__unsigned_int_max_add_11_good() : () -> () loc(#loc61)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc47)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc48)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %13 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_max_add_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call @CWE190_Integer_Overflow__unsigned_int_max_add_11_bad() : () -> () loc(#loc65)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc49)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc68)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc222)
    cir.return %17 : !s32i loc(#loc222)
  } loc(#loc217)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc223)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc73)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc225)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc226)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc80)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc80)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc227)
    cir.br ^bb1 loc(#loc228)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc229)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc229)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc84)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc84)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc230)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc87)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc87)
    %10 = cir.const #cir.int<2> : !u32i loc(#loc87)
    %11 = cir.binop(mul, %9, %10) : !u32i loc(#loc87)
    %12 = cir.const #cir.int<1> : !u32i loc(#loc87)
    %13 = cir.binop(add, %11, %12) : !u32i loc(#loc87)
    cir.store %13, %1 : !u32i, !cir.ptr<!u32i> loc(#loc231)
    cir.br ^bb3 loc(#loc83)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc83)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc232)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc233)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc233)
    %16 = cir.call %15() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc91)
    %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc91)
    cir.brcond %17 ^bb6, ^bb7 loc(#loc234)
  ^bb6:  // pred: ^bb5
    %18 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc72)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    cir.br ^bb13 loc(#loc94)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc235)
  ^bb8:  // pred: ^bb7
    %20 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc99)
    %21 = cir.const #cir.int<2147483647> : !s32i loc(#loc100)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc100)
    %23 = cir.const #cir.int<2> : !u32i loc(#loc100)
    %24 = cir.binop(mul, %22, %23) : !u32i loc(#loc100)
    %25 = cir.const #cir.int<1> : !u32i loc(#loc100)
    %26 = cir.binop(add, %24, %25) : !u32i loc(#loc100)
    %27 = cir.cmp(lt, %20, %26) : !u32i, !cir.bool loc(#loc236)
    cir.brcond %27 ^bb9, ^bb10 loc(#loc237)
  ^bb9:  // pred: ^bb8
    %28 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc104)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc77)
    %31 = cir.binop(add, %28, %30) : !u32i loc(#loc238)
    cir.store %31, %0 : !u32i, !cir.ptr<!u32i> loc(#loc225)
    %32 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc105)
    cir.call @printUnsignedLine(%32) : (!u32i) -> () loc(#loc106)
    cir.br ^bb11 loc(#loc102)
  ^bb10:  // pred: ^bb8
    %33 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc73)
    %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%34) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    cir.br ^bb11 loc(#loc98)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc98)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc90)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc90)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc75)
  } loc(#loc224)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc240)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc241)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc114)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc114)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc242)
    cir.br ^bb1 loc(#loc243)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc244)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc244)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc118)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc118)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc245)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc121)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc121)
    %10 = cir.const #cir.int<2> : !u32i loc(#loc121)
    %11 = cir.binop(mul, %9, %10) : !u32i loc(#loc121)
    %12 = cir.const #cir.int<1> : !u32i loc(#loc121)
    %13 = cir.binop(add, %11, %12) : !u32i loc(#loc121)
    cir.store %13, %1 : !u32i, !cir.ptr<!u32i> loc(#loc246)
    cir.br ^bb3 loc(#loc117)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc117)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc247)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc248)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc248)
    %16 = cir.call %15() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc125)
    %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc125)
    cir.brcond %17 ^bb6, ^bb12 loc(#loc249)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc250)
  ^bb7:  // pred: ^bb6
    %18 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc130)
    %19 = cir.const #cir.int<2147483647> : !s32i loc(#loc131)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc131)
    %21 = cir.const #cir.int<2> : !u32i loc(#loc131)
    %22 = cir.binop(mul, %20, %21) : !u32i loc(#loc131)
    %23 = cir.const #cir.int<1> : !u32i loc(#loc131)
    %24 = cir.binop(add, %22, %23) : !u32i loc(#loc131)
    %25 = cir.cmp(lt, %18, %24) : !u32i, !cir.bool loc(#loc251)
    cir.brcond %25 ^bb8, ^bb9 loc(#loc252)
  ^bb8:  // pred: ^bb7
    %26 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc135)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc111)
    %29 = cir.binop(add, %26, %28) : !u32i loc(#loc253)
    cir.store %29, %0 : !u32i, !cir.ptr<!u32i> loc(#loc240)
    %30 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc136)
    cir.call @printUnsignedLine(%30) : (!u32i) -> () loc(#loc137)
    cir.br ^bb10 loc(#loc133)
  ^bb9:  // pred: ^bb7
    %31 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc138)
    %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc138)
    cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc139)
    cir.br ^bb10 loc(#loc129)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc129)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc124)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc124)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc109)
  } loc(#loc239)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc255)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc256)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc146)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc146)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc257)
    cir.br ^bb1 loc(#loc258)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc259)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc259)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc150)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc150)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc260)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc155)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc155)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc156)
    cir.br ^bb4 loc(#loc153)
  ^bb3:  // pred: ^bb1
    %10 = cir.const #cir.int<2> : !s32i loc(#loc157)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc157)
    cir.store %11, %1 : !u32i, !cir.ptr<!u32i> loc(#loc261)
    cir.br ^bb4 loc(#loc149)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc149)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc262)
  ^bb6:  // pred: ^bb5
    %12 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc263)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc263)
    %14 = cir.call %13() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc161)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc161)
    cir.brcond %15 ^bb7, ^bb10 loc(#loc264)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc265)
  ^bb8:  // pred: ^bb7
    %16 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc166)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc143)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc143)
    %19 = cir.binop(add, %16, %18) : !u32i loc(#loc266)
    cir.store %19, %0 : !u32i, !cir.ptr<!u32i> loc(#loc255)
    %20 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc167)
    cir.call @printUnsignedLine(%20) : (!u32i) -> () loc(#loc168)
    cir.br ^bb9 loc(#loc165)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc160)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc160)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc141)
  } loc(#loc254)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc268)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc269)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc175)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc175)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc270)
    cir.br ^bb1 loc(#loc271)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc272)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc272)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc179)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc179)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc273)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc182)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc182)
    cir.store %9, %1 : !u32i, !cir.ptr<!u32i> loc(#loc274)
    cir.br ^bb3 loc(#loc178)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc178)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc275)
  ^bb5:  // pred: ^bb4
    %10 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc276)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc276)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc186)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc186)
    cir.brcond %13 ^bb6, ^bb9 loc(#loc277)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc278)
  ^bb7:  // pred: ^bb6
    %14 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc191)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc172)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc172)
    %17 = cir.binop(add, %14, %16) : !u32i loc(#loc279)
    cir.store %17, %0 : !u32i, !cir.ptr<!u32i> loc(#loc268)
    %18 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc192)
    cir.call @printUnsignedLine(%18) : (!u32i) -> () loc(#loc193)
    cir.br ^bb8 loc(#loc190)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc185)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc185)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc170)
  } loc(#loc267)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":39:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":35:13)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":35:42)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":24:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":24:18)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":25:12)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":25:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":26:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":30:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":26:8)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":26:26)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":27:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":29:16)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":29:9)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":31:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":38:5)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":31:8)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":31:26)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":32:5)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":33:9)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":37:9)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":35:35)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":36:31)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":36:13)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":145:1)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":151:1)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":147:5)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":147:14)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":148:5)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":148:14)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":149:5)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":149:14)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":150:5)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":150:14)
#loc40 = loc("/usr/include/stdlib.h":575:1)
#loc41 = loc("/usr/include/stdlib.h":575:41)
#loc42 = loc("/usr/include/time.h":76:1)
#loc43 = loc("/usr/include/time.h":76:38)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":167:15)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":169:15)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":172:15)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":174:15)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":162:1)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":177:1)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":163:1)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":165:27)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":165:22)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":165:5)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":167:5)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":168:5)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":168:59)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":169:5)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":172:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":173:5)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":173:58)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":174:5)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":176:12)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":176:5)
#loc70 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc71 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":58:19)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":70:23)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":46:1)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":73:1)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":65:13)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":65:42)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":48:5)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":48:18)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":49:12)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":49:5)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":50:5)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":54:5)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":50:8)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":50:26)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":51:5)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":53:16)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":53:9)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":55:5)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":72:5)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":55:8)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":55:27)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":56:5)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":59:5)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":61:5)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":58:9)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":63:9)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":71:9)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":63:13)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":63:20)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":64:9)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":67:9)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":69:9)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":65:35)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":66:31)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":66:13)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":70:13)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":76:1)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":98:1)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":90:13)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":90:42)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":78:5)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":78:18)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":79:12)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":79:5)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":80:5)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":84:5)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":80:8)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":80:26)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":81:5)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":83:16)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":83:9)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":85:5)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":97:5)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":85:8)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":85:26)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":86:5)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":88:9)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":96:9)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":88:13)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":88:20)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":89:9)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":92:9)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":94:9)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":90:35)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":91:31)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":91:13)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":95:23)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":95:13)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":101:1)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":123:1)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":119:13)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":119:42)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":103:5)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":103:18)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":104:12)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":104:5)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":105:5)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":114:5)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":105:8)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":105:27)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":106:5)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":109:5)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":111:5)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":108:19)
#loc156 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":108:9)
#loc157 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":113:16)
#loc158 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":113:9)
#loc159 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":115:5)
#loc160 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":122:5)
#loc161 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":115:8)
#loc162 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":115:26)
#loc163 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":116:5)
#loc164 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":117:9)
#loc165 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":121:9)
#loc166 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":119:35)
#loc167 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":120:31)
#loc168 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":120:13)
#loc169 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":126:1)
#loc170 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":143:1)
#loc171 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":139:13)
#loc172 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":139:42)
#loc173 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":128:5)
#loc174 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":128:18)
#loc175 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":129:12)
#loc176 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":129:5)
#loc177 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":130:5)
#loc178 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":134:5)
#loc179 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":130:8)
#loc180 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":130:26)
#loc181 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":131:5)
#loc182 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":133:16)
#loc183 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":133:9)
#loc184 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":135:5)
#loc185 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":142:5)
#loc186 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":135:8)
#loc187 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":135:26)
#loc188 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":136:5)
#loc189 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":137:9)
#loc190 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":141:9)
#loc191 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":139:35)
#loc192 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":140:31)
#loc193 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_11.c":140:13)
#loc194 = loc(fused[#loc1, #loc2])
#loc195 = loc(fused[#loc3, #loc4])
#loc196 = loc(fused[#loc5, #loc6])
#loc197 = loc(fused[#loc7, #loc8])
#loc198 = loc(fused[#loc9, #loc10])
#loc199 = loc(fused[#loc12, #loc11])
#loc200 = loc(fused[#loc13, #loc14])
#loc201 = loc(fused[#loc15, #loc16])
#loc202 = loc(fused[#loc17, #loc14])
#loc203 = loc(fused[#loc19, #loc18])
#loc204 = loc(fused[#loc20, #loc21])
#loc205 = loc(fused[#loc22, #loc23])
#loc206 = loc(fused[#loc24, #loc21])
#loc207 = loc(fused[#loc25, #loc26])
#loc208 = loc(fused[#loc27, #loc8])
#loc209 = loc(fused[#loc30, #loc31])
#loc210 = loc(fused[#loc32, #loc33])
#loc211 = loc(fused[#loc34, #loc35])
#loc212 = loc(fused[#loc36, #loc37])
#loc213 = loc(fused[#loc38, #loc39])
#loc214 = loc(fused[#loc40, #loc41])
#loc215 = loc(fused[#loc42, #loc43])
#loc216 = loc(fused[#loc44, #loc45])
#loc217 = loc(fused[#loc50, #loc51])
#loc220 = loc(fused[#loc61, #loc62])
#loc221 = loc(fused[#loc65, #loc66])
#loc222 = loc(fused[#loc69, #loc68])
#loc223 = loc(fused[#loc70, #loc71])
#loc224 = loc(fused[#loc74, #loc75])
#loc225 = loc(fused[#loc76, #loc77])
#loc226 = loc(fused[#loc78, #loc79])
#loc227 = loc(fused[#loc81, #loc80])
#loc228 = loc(fused[#loc82, #loc83])
#loc229 = loc(fused[#loc84, #loc85])
#loc230 = loc(fused[#loc86, #loc83])
#loc231 = loc(fused[#loc88, #loc87])
#loc232 = loc(fused[#loc89, #loc90])
#loc233 = loc(fused[#loc91, #loc92])
#loc234 = loc(fused[#loc93, #loc94, #loc95, #loc90])
#loc235 = loc(fused[#loc97, #loc98])
#loc236 = loc(fused[#loc99, #loc100])
#loc237 = loc(fused[#loc101, #loc102, #loc103, #loc98])
#loc238 = loc(fused[#loc104, #loc77])
#loc239 = loc(fused[#loc108, #loc109])
#loc240 = loc(fused[#loc110, #loc111])
#loc241 = loc(fused[#loc112, #loc113])
#loc242 = loc(fused[#loc115, #loc114])
#loc243 = loc(fused[#loc116, #loc117])
#loc244 = loc(fused[#loc118, #loc119])
#loc245 = loc(fused[#loc120, #loc117])
#loc246 = loc(fused[#loc122, #loc121])
#loc247 = loc(fused[#loc123, #loc124])
#loc248 = loc(fused[#loc125, #loc126])
#loc249 = loc(fused[#loc127, #loc124])
#loc250 = loc(fused[#loc128, #loc129])
#loc251 = loc(fused[#loc130, #loc131])
#loc252 = loc(fused[#loc132, #loc133, #loc134, #loc129])
#loc253 = loc(fused[#loc135, #loc111])
#loc254 = loc(fused[#loc140, #loc141])
#loc255 = loc(fused[#loc142, #loc143])
#loc256 = loc(fused[#loc144, #loc145])
#loc257 = loc(fused[#loc147, #loc146])
#loc258 = loc(fused[#loc148, #loc149])
#loc259 = loc(fused[#loc150, #loc151])
#loc260 = loc(fused[#loc152, #loc153, #loc154, #loc149])
#loc261 = loc(fused[#loc158, #loc157])
#loc262 = loc(fused[#loc159, #loc160])
#loc263 = loc(fused[#loc161, #loc162])
#loc264 = loc(fused[#loc163, #loc160])
#loc265 = loc(fused[#loc164, #loc165])
#loc266 = loc(fused[#loc166, #loc143])
#loc267 = loc(fused[#loc169, #loc170])
#loc268 = loc(fused[#loc171, #loc172])
#loc269 = loc(fused[#loc173, #loc174])
#loc270 = loc(fused[#loc176, #loc175])
#loc271 = loc(fused[#loc177, #loc178])
#loc272 = loc(fused[#loc179, #loc180])
#loc273 = loc(fused[#loc181, #loc178])
#loc274 = loc(fused[#loc183, #loc182])
#loc275 = loc(fused[#loc184, #loc185])
#loc276 = loc(fused[#loc186, #loc187])
#loc277 = loc(fused[#loc188, #loc185])
#loc278 = loc(fused[#loc189, #loc190])
#loc279 = loc(fused[#loc191, #loc172])
