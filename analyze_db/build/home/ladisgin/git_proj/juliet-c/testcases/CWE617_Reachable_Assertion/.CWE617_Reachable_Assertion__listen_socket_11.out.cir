!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc167 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":183:10)
#loc168 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":183:14)
#loc169 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":183:20)
#loc170 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":183:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc289 = loc(fused[#loc167, #loc168])
#loc290 = loc(fused[#loc169, #loc170])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc223)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc224)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc225)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc226)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc227)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc228)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc229)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc230)
  cir.func private @close(!s32i) -> !s32i loc(#loc231)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc232)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc21)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__listen_socket_11.c\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc21)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__listen_socket_11_bad()\00" : !cir.array<!s8i x 56>> : !cir.array<!s8i x 56> {alignment = 1 : i64} loc(#loc21)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc234)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc27)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    cir.scope {
      %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc237)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc237)
      %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc31)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc31)
      cir.if %7 {
        cir.scope {
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc240)
          %9 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc241)
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc242)
          %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc243)
          %12 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc244)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc41)
          %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc41)
          cir.store %14, %10 : !s32i, !cir.ptr<!s32i> loc(#loc242)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc43)
          %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc43)
          cir.store %16, %11 : !s32i, !cir.ptr<!s32i> loc(#loc243)
          cir.scope {
            cir.do {
              %17 = cir.const #cir.int<2> : !s32i loc(#loc48)
              %18 = cir.const #cir.int<1> : !s32i loc(#loc49)
              %19 = cir.const #cir.int<6> : !s32i loc(#loc50)
              %20 = cir.call @socket(%17, %18, %19) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc51)
              cir.store %20, %10 : !s32i, !cir.ptr<!s32i> loc(#loc246)
              cir.scope {
                %62 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc56)
                %63 = cir.const #cir.int<1> : !s32i loc(#loc57)
                %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc57)
                %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc248)
                cir.if %65 {
                  cir.break loc(#loc59)
                } loc(#loc249)
              } loc(#loc247)
              %21 = cir.cast(bitcast, %9 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc250)
              %22 = cir.const #cir.int<0> : !s32i loc(#loc62)
              %23 = cir.const #cir.int<16> : !u64i loc(#loc251)
              cir.libc.memset %23 bytes from %21 set to %22 : !cir.ptr<!void>, !s32i, !u64i loc(#loc252)
              %24 = cir.const #cir.int<2> : !s32i loc(#loc67)
              %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc67)
              %26 = cir.get_member %9[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
              cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc253)
              %27 = cir.const #cir.int<0> : !s32i loc(#loc70)
              %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc70)
              %29 = cir.get_member %9[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc71)
              %30 = cir.get_member %29[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc72)
              cir.store %28, %30 : !u32i, !cir.ptr<!u32i> loc(#loc254)
              %31 = cir.const #cir.int<27015> : !s32i loc(#loc74)
              %32 = cir.cast(integral, %31 : !s32i), !u16i loc(#loc74)
              %33 = cir.call @htons(%32) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc75)
              %34 = cir.get_member %9[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc76)
              cir.store %33, %34 : !u16i, !cir.ptr<!u16i> loc(#loc255)
              cir.scope {
                %62 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc81)
                %63 = cir.cast(bitcast, %9 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc257)
                %64 = cir.const #cir.int<16> : !u64i loc(#loc258)
                %65 = cir.cast(integral, %64 : !u64i), !u32i loc(#loc258)
                %66 = cir.call @bind(%62, %63, %65) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc86)
                %67 = cir.const #cir.int<1> : !s32i loc(#loc87)
                %68 = cir.unary(minus, %67) : !s32i, !s32i loc(#loc87)
                %69 = cir.cmp(eq, %66, %68) : !s32i, !cir.bool loc(#loc259)
                cir.if %69 {
                  cir.break loc(#loc89)
                } loc(#loc260)
              } loc(#loc256)
              cir.scope {
                %62 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc92)
                %63 = cir.const #cir.int<5> : !s32i loc(#loc93)
                %64 = cir.call @listen(%62, %63) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc94)
                %65 = cir.const #cir.int<1> : !s32i loc(#loc95)
                %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc95)
                %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc262)
                cir.if %67 {
                  cir.break loc(#loc97)
                } loc(#loc263)
              } loc(#loc261)
              %35 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc98)
              %36 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc99)
              %37 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc100)
              %38 = cir.call @accept(%35, %36, %37) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc101)
              cir.store %38, %11 : !s32i, !cir.ptr<!s32i> loc(#loc264)
              cir.scope {
                %62 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc106)
                %63 = cir.const #cir.int<1> : !s32i loc(#loc107)
                %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc107)
                %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc266)
                cir.if %65 {
                  cir.break loc(#loc109)
                } loc(#loc267)
              } loc(#loc265)
              %39 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc110)
              %40 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc111)
              %41 = cir.cast(bitcast, %40 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc111)
              %42 = cir.const #cir.int<3> : !s32i loc(#loc112)
              %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc112)
              %44 = cir.const #cir.int<4> : !u64i loc(#loc112)
              %45 = cir.binop(mul, %43, %44) : !u64i loc(#loc112)
              %46 = cir.const #cir.int<2> : !s32i loc(#loc112)
              %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc112)
              %48 = cir.binop(add, %45, %47) : !u64i loc(#loc112)
              %49 = cir.const #cir.int<1> : !s32i loc(#loc113)
              %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc113)
              %51 = cir.binop(sub, %48, %50) : !u64i loc(#loc268)
              %52 = cir.const #cir.int<0> : !s32i loc(#loc114)
              %53 = cir.call @recv(%39, %41, %51, %52) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc115)
              %54 = cir.cast(integral, %53 : !s64i), !s32i loc(#loc115)
              cir.store %54, %8 : !s32i, !cir.ptr<!s32i> loc(#loc269)
              cir.scope {
                %62 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc120)
                %63 = cir.const #cir.int<1> : !s32i loc(#loc121)
                %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc121)
                %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc271)
                %66 = cir.ternary(%65, true {
                  %67 = cir.const #true loc(#loc122)
                  cir.yield %67 : !cir.bool loc(#loc122)
                }, false {
                  %67 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc123)
                  %68 = cir.const #cir.int<0> : !s32i loc(#loc124)
                  %69 = cir.cmp(eq, %67, %68) : !s32i, !cir.bool loc(#loc272)
                  %70 = cir.ternary(%69, true {
                    %71 = cir.const #true loc(#loc122)
                    cir.yield %71 : !cir.bool loc(#loc122)
                  }, false {
                    %71 = cir.const #false loc(#loc122)
                    cir.yield %71 : !cir.bool loc(#loc122)
                  }) : (!cir.bool) -> !cir.bool loc(#loc122)
                  cir.yield %70 : !cir.bool loc(#loc122)
                }) : (!cir.bool) -> !cir.bool loc(#loc122)
                cir.if %66 {
                  cir.break loc(#loc126)
                } loc(#loc273)
              } loc(#loc270)
              %55 = cir.const #cir.int<0> : !s32i loc(#loc127)
              %56 = cir.cast(integral, %55 : !s32i), !s8i loc(#loc127)
              %57 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc128)
              %58 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc129)
              %59 = cir.ptr_stride(%58 : !cir.ptr<!s8i>, %57 : !s32i), !cir.ptr<!s8i> loc(#loc129)
              cir.store %56, %59 : !s8i, !cir.ptr<!s8i> loc(#loc274)
              %60 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc130)
              %61 = cir.call @atoi(%60) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc131)
              cir.store %61, %0 : !s32i, !cir.ptr<!s32i> loc(#loc275)
              cir.yield loc(#loc47)
            } while {
              %17 = cir.const #cir.int<0> : !s32i loc(#loc134)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc134)
              cir.condition(%18) loc(#loc134)
            } loc(#loc245)
          } loc(#loc245)
          cir.scope {
            %17 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc137)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc138)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc138)
            %20 = cir.cmp(ne, %17, %19) : !s32i, !cir.bool loc(#loc277)
            cir.if %20 {
              %21 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc140)
              %22 = cir.call @close(%21) : (!s32i) -> !s32i loc(#loc141)
            } loc(#loc278)
          } loc(#loc276)
          cir.scope {
            %17 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc144)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc145)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc145)
            %20 = cir.cmp(ne, %17, %19) : !s32i, !cir.bool loc(#loc280)
            cir.if %20 {
              %21 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc147)
              %22 = cir.call @close(%21) : (!s32i) -> !s32i loc(#loc148)
            } loc(#loc281)
          } loc(#loc279)
        } loc(#loc239)
      } loc(#loc238)
    } loc(#loc236)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc21)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc21)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc21)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc21)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc21)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc21)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc21)
          %11 = cir.const #cir.int<125> : !s32i loc(#loc21)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc21)
          %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 56>> loc(#loc21)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 56>>), !cir.ptr<!s8i> loc(#loc21)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc21)
        } loc(#loc21)
      } loc(#loc21)
    } loc(#loc21)
    cir.return loc(#loc23)
  } loc(#loc233)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc283)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc151)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc284)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc153)
    cir.return loc(#loc150)
  } loc(#loc282)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc285)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc286)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc287)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc161)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc162)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc163)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc164)
  cir.func @main(%arg0: !s32i loc(fused[#loc167, #loc168]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc169, #loc170])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc289)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc290)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc166)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc171)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc172)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc173)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc173)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc174)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc161)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc161)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc175)
    %8 = cir.get_global @CWE617_Reachable_Assertion__listen_socket_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc291)
    cir.call @CWE617_Reachable_Assertion__listen_socket_11_good() : () -> () loc(#loc176)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc162)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc162)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc178)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc163)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc163)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc179)
    %13 = cir.get_global @CWE617_Reachable_Assertion__listen_socket_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc292)
    cir.call @CWE617_Reachable_Assertion__listen_socket_11_bad() : () -> () loc(#loc180)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc164)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc164)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc182)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc183)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc293)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc293)
    cir.return %17 : !s32i loc(#loc293)
  } loc(#loc288)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc294)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc188)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc296)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc193)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc194)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc297)
    cir.scope {
      %4 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc299)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc299)
      %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc198)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc198)
      cir.if %7 {
        %8 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc187)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc187)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc203)
      } else {
        %8 = cir.const #cir.int<5> : !s32i loc(#loc204)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc205)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc204)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc301)
      } loc(#loc300)
    } loc(#loc298)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc188)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc188)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc188)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc188)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc188)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc188)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc188)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc188)
          %11 = cir.const #cir.int<149> : !s32i loc(#loc188)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc188)
          %13 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc188)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc188)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc188)
        } loc(#loc188)
      } loc(#loc188)
    } loc(#loc188)
    cir.return loc(#loc190)
  } loc(#loc295)
  cir.global "private" constant cir_private dsolocal @".str.9" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc207)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc303)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc212)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc213)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc304)
    cir.scope {
      %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc306)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc306)
      %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc217)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc217)
      cir.if %7 {
        %8 = cir.const #cir.int<5> : !s32i loc(#loc220)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc221)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc220)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc308)
      } loc(#loc307)
    } loc(#loc305)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc207)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc207)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc207)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc207)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc207)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc207)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc207)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc207)
          %11 = cir.const #cir.int<164> : !s32i loc(#loc207)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc207)
          %13 = cir.get_global @".str.9" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc207)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc207)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc207)
        } loc(#loc207)
      } loc(#loc207)
    } loc(#loc207)
    cir.return loc(#loc209)
  } loc(#loc302)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":404:1)
#loc6 = loc("/usr/include/netinet/in.h":405:40)
#loc7 = loc("/usr/include/sys/socket.h":112:1)
#loc8 = loc("/usr/include/sys/socket.h":113:6)
#loc9 = loc("/usr/include/sys/socket.h":296:1)
#loc10 = loc("/usr/include/sys/socket.h":296:39)
#loc11 = loc("/usr/include/sys/socket.h":306:1)
#loc12 = loc("/usr/include/sys/socket.h":307:38)
#loc13 = loc("/usr/include/sys/socket.h":145:1)
#loc14 = loc("/usr/include/sys/socket.h":145:68)
#loc15 = loc("/usr/include/stdlib.h":105:1)
#loc16 = loc("/usr/include/stdlib.h":106:33)
#loc17 = loc("/usr/include/unistd.h":358:1)
#loc18 = loc("/usr/include/unistd.h":358:27)
#loc19 = loc("/usr/include/assert.h":67:1)
#loc20 = loc("/usr/include/assert.h":69:43)
#loc21 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":125:5)
#loc22 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":47:1)
#loc23 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":126:1)
#loc24 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":49:5)
#loc25 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":49:9)
#loc26 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":51:13)
#loc27 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":51:12)
#loc28 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":51:5)
#loc29 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":52:5)
#loc30 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":123:5)
#loc31 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":52:8)
#loc32 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":52:26)
#loc33 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":53:5)
#loc34 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":54:9)
#loc35 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":122:9)
#loc36 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":59:13)
#loc37 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":59:17)
#loc38 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":60:13)
#loc39 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":60:32)
#loc40 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":61:13)
#loc41 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":61:35)
#loc42 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":62:13)
#loc43 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":62:35)
#loc44 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":63:13)
#loc45 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":63:45)
#loc46 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":64:13)
#loc47 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":107:21)
#loc48 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":74:39)
#loc49 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":74:48)
#loc50 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":74:61)
#loc51 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":74:32)
#loc52 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":74:17)
#loc53 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":74:72)
#loc54 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":75:17)
#loc55 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":78:17)
#loc56 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":75:21)
#loc57 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":75:37)
#loc58 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":76:17)
#loc59 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":77:21)
#loc60 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":79:24)
#loc61 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":79:25)
#loc62 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":79:34)
#loc63 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":79:37)
#loc64 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":79:51)
#loc65 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":79:17)
#loc66 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":79:52)
#loc67 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":80:38)
#loc68 = loc("/usr/include/netinet/in.h":249:5)
#loc69 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":80:17)
#loc70 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":81:43)
#loc71 = loc("/usr/include/netinet/in.h":251:20)
#loc72 = loc("/usr/include/netinet/in.h":33:15)
#loc73 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":81:17)
#loc74 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":82:42)
#loc75 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":82:36)
#loc76 = loc("/usr/include/netinet/in.h":250:15)
#loc77 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":82:17)
#loc78 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":82:50)
#loc79 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":83:17)
#loc80 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":86:17)
#loc81 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":83:26)
#loc82 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":83:58)
#loc83 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":83:59)
#loc84 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":83:68)
#loc85 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":83:82)
#loc86 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":83:21)
#loc87 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":83:88)
#loc88 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":84:17)
#loc89 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":85:21)
#loc90 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":87:17)
#loc91 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":90:17)
#loc92 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":87:28)
#loc93 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":87:42)
#loc94 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":87:21)
#loc95 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":87:61)
#loc96 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":88:17)
#loc97 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":89:21)
#loc98 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":91:39)
#loc99 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":91:53)
#loc100 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":91:59)
#loc101 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":91:32)
#loc102 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":91:17)
#loc103 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":91:63)
#loc104 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":92:17)
#loc105 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":95:17)
#loc106 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":92:21)
#loc107 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":92:37)
#loc108 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":93:17)
#loc109 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":94:21)
#loc110 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":97:35)
#loc111 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":97:49)
#loc112 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":97:62)
#loc113 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":97:80)
#loc114 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":97:83)
#loc115 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":97:30)
#loc116 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":97:17)
#loc117 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":97:84)
#loc118 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":98:17)
#loc119 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":101:17)
#loc120 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":98:21)
#loc121 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":98:35)
#loc122 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":98:48)
#loc123 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":98:51)
#loc124 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":98:65)
#loc125 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":99:17)
#loc126 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":100:21)
#loc127 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":103:43)
#loc128 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":103:29)
#loc129 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":103:17)
#loc130 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":105:29)
#loc131 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":105:24)
#loc132 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":105:17)
#loc133 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":105:40)
#loc134 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":107:20)
#loc135 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":108:13)
#loc136 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":111:13)
#loc137 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":108:17)
#loc138 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":108:33)
#loc139 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":109:13)
#loc140 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":110:30)
#loc141 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":110:17)
#loc142 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":112:13)
#loc143 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":115:13)
#loc144 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":112:17)
#loc145 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":112:33)
#loc146 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":113:13)
#loc147 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":114:30)
#loc148 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":114:17)
#loc149 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":167:1)
#loc150 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":171:1)
#loc151 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":169:5)
#loc152 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":169:14)
#loc153 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":170:5)
#loc154 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":170:14)
#loc155 = loc("/usr/include/stdlib.h":575:1)
#loc156 = loc("/usr/include/stdlib.h":575:41)
#loc157 = loc("/usr/include/time.h":76:1)
#loc158 = loc("/usr/include/time.h":76:38)
#loc159 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc160 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc161 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":188:15)
#loc162 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":190:15)
#loc163 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":193:15)
#loc164 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":195:15)
#loc165 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":183:1)
#loc166 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":198:1)
#loc171 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":184:1)
#loc172 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":186:27)
#loc173 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":186:22)
#loc174 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":186:5)
#loc175 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":188:5)
#loc176 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":189:5)
#loc177 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":189:55)
#loc178 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":190:5)
#loc179 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":193:5)
#loc180 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":194:5)
#loc181 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":194:54)
#loc182 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":195:5)
#loc183 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":197:12)
#loc184 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":197:5)
#loc185 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc186 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc187 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":141:19)
#loc188 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":149:5)
#loc189 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":133:1)
#loc190 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":150:1)
#loc191 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":135:5)
#loc192 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":135:9)
#loc193 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":137:13)
#loc194 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":137:12)
#loc195 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":137:5)
#loc196 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":138:5)
#loc197 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":147:5)
#loc198 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":138:8)
#loc199 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":138:27)
#loc200 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":139:5)
#loc201 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":142:5)
#loc202 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":144:5)
#loc203 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":141:9)
#loc204 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":146:16)
#loc205 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":146:29)
#loc206 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":146:9)
#loc207 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":164:5)
#loc208 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":153:1)
#loc209 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":165:1)
#loc210 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":155:5)
#loc211 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":155:9)
#loc212 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":157:13)
#loc213 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":157:12)
#loc214 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":157:5)
#loc215 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":158:5)
#loc216 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":162:5)
#loc217 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":158:8)
#loc218 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":158:26)
#loc219 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":159:5)
#loc220 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":161:16)
#loc221 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":161:29)
#loc222 = loc("CWE617_Reachable_Assertion__listen_socket_11.c":161:9)
#loc223 = loc(fused[#loc1, #loc2])
#loc224 = loc(fused[#loc3, #loc4])
#loc225 = loc(fused[#loc5, #loc6])
#loc226 = loc(fused[#loc7, #loc8])
#loc227 = loc(fused[#loc9, #loc10])
#loc228 = loc(fused[#loc11, #loc12])
#loc229 = loc(fused[#loc13, #loc14])
#loc230 = loc(fused[#loc15, #loc16])
#loc231 = loc(fused[#loc17, #loc18])
#loc232 = loc(fused[#loc19, #loc20])
#loc233 = loc(fused[#loc22, #loc23])
#loc234 = loc(fused[#loc24, #loc25])
#loc235 = loc(fused[#loc28, #loc26])
#loc236 = loc(fused[#loc29, #loc30])
#loc237 = loc(fused[#loc31, #loc32])
#loc238 = loc(fused[#loc33, #loc30])
#loc239 = loc(fused[#loc34, #loc35])
#loc240 = loc(fused[#loc36, #loc37])
#loc241 = loc(fused[#loc38, #loc39])
#loc242 = loc(fused[#loc40, #loc41])
#loc243 = loc(fused[#loc42, #loc43])
#loc244 = loc(fused[#loc44, #loc45])
#loc245 = loc(fused[#loc46, #loc47])
#loc246 = loc(fused[#loc52, #loc53])
#loc247 = loc(fused[#loc54, #loc55])
#loc248 = loc(fused[#loc56, #loc57])
#loc249 = loc(fused[#loc58, #loc55])
#loc250 = loc(fused[#loc60, #loc61])
#loc251 = loc(fused[#loc63, #loc64])
#loc252 = loc(fused[#loc65, #loc66])
#loc253 = loc(fused[#loc69, #loc67])
#loc254 = loc(fused[#loc73, #loc70])
#loc255 = loc(fused[#loc77, #loc78])
#loc256 = loc(fused[#loc79, #loc80])
#loc257 = loc(fused[#loc82, #loc83])
#loc258 = loc(fused[#loc84, #loc85])
#loc259 = loc(fused[#loc86, #loc87])
#loc260 = loc(fused[#loc88, #loc80])
#loc261 = loc(fused[#loc90, #loc91])
#loc262 = loc(fused[#loc94, #loc95])
#loc263 = loc(fused[#loc96, #loc91])
#loc264 = loc(fused[#loc102, #loc103])
#loc265 = loc(fused[#loc104, #loc105])
#loc266 = loc(fused[#loc106, #loc107])
#loc267 = loc(fused[#loc108, #loc105])
#loc268 = loc(fused[#loc112, #loc113])
#loc269 = loc(fused[#loc116, #loc117])
#loc270 = loc(fused[#loc118, #loc119])
#loc271 = loc(fused[#loc120, #loc121])
#loc272 = loc(fused[#loc123, #loc124])
#loc273 = loc(fused[#loc125, #loc119])
#loc274 = loc(fused[#loc129, #loc127])
#loc275 = loc(fused[#loc132, #loc133])
#loc276 = loc(fused[#loc135, #loc136])
#loc277 = loc(fused[#loc137, #loc138])
#loc278 = loc(fused[#loc139, #loc136])
#loc279 = loc(fused[#loc142, #loc143])
#loc280 = loc(fused[#loc144, #loc145])
#loc281 = loc(fused[#loc146, #loc143])
#loc282 = loc(fused[#loc149, #loc150])
#loc283 = loc(fused[#loc151, #loc152])
#loc284 = loc(fused[#loc153, #loc154])
#loc285 = loc(fused[#loc155, #loc156])
#loc286 = loc(fused[#loc157, #loc158])
#loc287 = loc(fused[#loc159, #loc160])
#loc288 = loc(fused[#loc165, #loc166])
#loc291 = loc(fused[#loc176, #loc177])
#loc292 = loc(fused[#loc180, #loc181])
#loc293 = loc(fused[#loc184, #loc183])
#loc294 = loc(fused[#loc185, #loc186])
#loc295 = loc(fused[#loc189, #loc190])
#loc296 = loc(fused[#loc191, #loc192])
#loc297 = loc(fused[#loc195, #loc193])
#loc298 = loc(fused[#loc196, #loc197])
#loc299 = loc(fused[#loc198, #loc199])
#loc300 = loc(fused[#loc200, #loc201, #loc202, #loc197])
#loc301 = loc(fused[#loc206, #loc205])
#loc302 = loc(fused[#loc208, #loc209])
#loc303 = loc(fused[#loc210, #loc211])
#loc304 = loc(fused[#loc214, #loc212])
#loc305 = loc(fused[#loc215, #loc216])
#loc306 = loc(fused[#loc217, #loc218])
#loc307 = loc(fused[#loc219, #loc216])
#loc308 = loc(fused[#loc222, #loc221])
