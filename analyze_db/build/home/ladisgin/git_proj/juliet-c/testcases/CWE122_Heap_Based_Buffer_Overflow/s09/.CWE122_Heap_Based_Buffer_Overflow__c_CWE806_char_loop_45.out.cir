!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":105:10)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":105:14)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":105:20)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":105:32)
#loc211 = loc(fused[#loc56, #loc57])
#loc212 = loc(fused[#loc58, #loc59])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc189)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc190)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45_badData = #cir.ptr<null> : !cir.ptr<!s8i> {alignment = 8 : i64} loc(#loc191)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc193)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc11)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc12)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc12)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc194)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc195)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc11)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc196)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc197)
    cir.scope {
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
      %26 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc20)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc20)
      %28 = cir.cmp(eq, %25, %27) : !cir.ptr<!s8i>, !cir.bool loc(#loc199)
      cir.if %28 {
        %29 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc22)
        %30 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %31 = cir.unary(minus, %30) : !s32i, !s32i loc(#loc24)
        cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc22)
      } loc(#loc200)
    } loc(#loc198)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc25)
    %10 = cir.const #cir.int<65> : !s32i loc(#loc26)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc27)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc27)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc27)
    cir.libc.memset %14 bytes from %9 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc201)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc31)
    %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc31)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
    %18 = cir.const #cir.int<100> : !s32i loc(#loc33)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc33)
    %21 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %20 : !s32i), !cir.ptr<!s8i> loc(#loc35)
    cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc202)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
    %23 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45_badData : !cir.ptr<!cir.ptr<!s8i>> loc(#loc191)
    cir.store %22, %23 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc203)
    %24 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc204)
    cir.call %24() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc8)
  } loc(#loc192)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc41)
  } loc(#loc205)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc207)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc208)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc209)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc53)
  cir.func @main(%arg0: !s32i loc(fused[#loc56, #loc57]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc58, #loc59])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc211)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc212)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc55)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc60)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc60)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc61)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc62)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc62)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc63)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc50)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45_good : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45_good() : () -> () loc(#loc65)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc51)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc52)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc214)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45_bad() : () -> () loc(#loc69)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc53)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc72)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc215)
    cir.return %17 : !s32i loc(#loc215)
  } loc(#loc210)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc216)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc217)
  cir.func no_proto internal private @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc219)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45_badData : !cir.ptr<!cir.ptr<!s8i>> loc(#loc191)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc81)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc219)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc221)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc222)
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc223)
      %6 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc221)
      cir.store %6, %3 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc221)
      %7 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc89)
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc90)
      %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc89)
      cir.store %9, %5 : !u64i, !cir.ptr<!u64i> loc(#loc224)
      cir.scope {
        %21 = cir.const #cir.int<0> : !s32i loc(#loc95)
        %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc95)
        cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc226)
        cir.for : cond {
          %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc97)
          %24 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc98)
          %25 = cir.cmp(lt, %23, %24) : !u64i, !cir.bool loc(#loc227)
          cir.condition(%25) loc(#loc99)
        } body {
          cir.scope {
            %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
            %24 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc102)
            %25 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %24 : !u64i), !cir.ptr<!s8i> loc(#loc103)
            %26 = cir.load %25 : !cir.ptr<!s8i>, !s8i loc(#loc101)
            %27 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc104)
            %28 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc105)
            %29 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %27 : !u64i), !cir.ptr<!s8i> loc(#loc105)
            cir.store %26, %29 : !s8i, !cir.ptr<!s8i> loc(#loc229)
          } loc(#loc228)
          cir.yield loc(#loc94)
        } step {
          %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc106)
          %24 = cir.unary(inc, %23) : !u64i, !u64i loc(#loc107)
          cir.store %24, %4 : !u64i, !cir.ptr<!u64i> loc(#loc230)
          cir.yield loc(#loc225)
        } loc(#loc225)
      } loc(#loc225)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc108)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc108)
      %12 = cir.const #cir.int<50> : !s32i loc(#loc109)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc110)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc109)
      %15 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc111)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc111)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc231)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc112)
      cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc113)
      %18 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc114)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc115)
      cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc114)
    } loc(#loc220)
    cir.return loc(#loc79)
  } loc(#loc218)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45_goodG2BData = #cir.ptr<null> : !cir.ptr<!s8i> {alignment = 8 : i64} loc(#loc232)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc234)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc122)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc123)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc123)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc235)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc236)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc122)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc237)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc238)
    cir.scope {
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
      %26 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc131)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc131)
      %28 = cir.cmp(eq, %25, %27) : !cir.ptr<!s8i>, !cir.bool loc(#loc240)
      cir.if %28 {
        %29 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc133)
        %30 = cir.const #cir.int<1> : !s32i loc(#loc134)
        %31 = cir.unary(minus, %30) : !s32i, !s32i loc(#loc135)
        cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc133)
      } loc(#loc241)
    } loc(#loc239)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc136)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc136)
    %10 = cir.const #cir.int<65> : !s32i loc(#loc137)
    %11 = cir.const #cir.int<50> : !s32i loc(#loc138)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc138)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc138)
    cir.libc.memset %14 bytes from %9 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc242)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc142)
    %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc142)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
    %18 = cir.const #cir.int<50> : !s32i loc(#loc144)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc145)
    %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc144)
    %21 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %20 : !s32i), !cir.ptr<!s8i> loc(#loc146)
    cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc243)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc147)
    %23 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45_goodG2BData : !cir.ptr<!cir.ptr<!s8i>> loc(#loc232)
    cir.store %22, %23 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc244)
    %24 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc245)
    cir.call %24() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc149)
    cir.return loc(#loc119)
  } loc(#loc233)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc247)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45_goodG2BData : !cir.ptr<!cir.ptr<!s8i>> loc(#loc232)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc154)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc247)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc249)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc250)
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc251)
      %6 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc249)
      cir.store %6, %3 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc249)
      %7 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc162)
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc163)
      %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc162)
      cir.store %9, %5 : !u64i, !cir.ptr<!u64i> loc(#loc252)
      cir.scope {
        %21 = cir.const #cir.int<0> : !s32i loc(#loc168)
        %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc168)
        cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc254)
        cir.for : cond {
          %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc170)
          %24 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc171)
          %25 = cir.cmp(lt, %23, %24) : !u64i, !cir.bool loc(#loc255)
          cir.condition(%25) loc(#loc172)
        } body {
          cir.scope {
            %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc174)
            %24 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc175)
            %25 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %24 : !u64i), !cir.ptr<!s8i> loc(#loc176)
            %26 = cir.load %25 : !cir.ptr<!s8i>, !s8i loc(#loc174)
            %27 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc177)
            %28 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc178)
            %29 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %27 : !u64i), !cir.ptr<!s8i> loc(#loc178)
            cir.store %26, %29 : !s8i, !cir.ptr<!s8i> loc(#loc257)
          } loc(#loc256)
          cir.yield loc(#loc167)
        } step {
          %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc179)
          %24 = cir.unary(inc, %23) : !u64i, !u64i loc(#loc180)
          cir.store %24, %4 : !u64i, !cir.ptr<!u64i> loc(#loc258)
          cir.yield loc(#loc253)
        } loc(#loc253)
      } loc(#loc253)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc181)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc181)
      %12 = cir.const #cir.int<50> : !s32i loc(#loc182)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc183)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc182)
      %15 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc184)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc184)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc259)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc185)
      cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc186)
      %18 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc187)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc188)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc188)
      cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc187)
    } loc(#loc248)
    cir.return loc(#loc152)
  } loc(#loc246)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":21:15)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":44:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":54:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":46:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":46:12)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":47:20)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":47:27)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":47:31)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":47:42)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":47:43)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":47:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":48:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":48:33)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":48:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":48:17)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":48:23)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":48:24)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":48:30)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":48:29)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":50:12)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":50:18)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":50:23)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":50:27)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":50:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":50:28)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":51:19)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":51:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":51:10)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":51:14)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":51:15)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":52:72)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":52:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":53:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":53:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":91:1)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":94:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":93:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":93:13)
#loc44 = loc("/usr/include/stdlib.h":575:1)
#loc45 = loc("/usr/include/stdlib.h":575:41)
#loc46 = loc("/usr/include/time.h":76:1)
#loc47 = loc("/usr/include/time.h":76:38)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":110:15)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":112:15)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":115:15)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":117:15)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":105:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":120:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":106:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":108:27)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":108:22)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":108:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":110:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":111:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":111:67)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":112:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":115:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":116:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":116:66)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":117:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":119:12)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":119:5)
#loc74 = loc("/usr/include/string.h":407:1)
#loc75 = loc("/usr/include/string.h":408:33)
#loc76 = loc("/usr/include/stdlib.h":687:1)
#loc77 = loc("/usr/include/stdlib.h":687:32)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":26:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":42:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":28:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":28:19)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":29:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":41:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":30:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":30:25)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":31:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":31:16)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":31:19)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":32:19)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":32:26)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":32:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":32:30)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":34:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":37:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":34:18)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":34:14)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":34:21)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":34:25)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":34:23)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":35:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":36:23)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":36:28)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":36:29)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":36:18)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":36:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":34:35)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":34:34)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":38:22)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":38:14)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":38:17)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":38:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":39:19)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":39:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":40:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":40:14)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":22:1)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":22:15)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":79:1)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":89:1)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":81:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":81:12)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":82:20)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":82:27)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":82:31)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":82:42)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":82:43)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":82:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":83:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":83:33)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":83:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":83:17)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":83:23)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":83:24)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":83:30)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":83:29)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":85:12)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":85:18)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":85:23)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":85:26)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":85:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":85:27)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":86:18)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":86:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":86:10)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":86:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":86:14)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":87:76)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":87:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":88:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":88:17)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":61:1)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":77:1)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":63:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":63:19)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":64:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":76:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":65:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":65:25)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":66:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":66:16)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":66:19)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":67:19)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":67:26)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":67:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":67:30)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":69:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":72:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":69:18)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":69:14)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":69:21)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":69:25)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":69:23)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":70:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":71:23)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":71:28)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":71:29)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":71:18)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":71:13)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":69:35)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":69:34)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":73:22)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":73:14)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":73:17)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":73:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":74:19)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":74:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":75:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c":75:14)
#loc189 = loc(fused[#loc1, #loc2])
#loc190 = loc(fused[#loc3, #loc4])
#loc191 = loc(fused[#loc5, #loc6])
#loc192 = loc(fused[#loc7, #loc8])
#loc193 = loc(fused[#loc9, #loc10])
#loc194 = loc(fused[#loc13, #loc14])
#loc195 = loc(fused[#loc12, #loc14])
#loc196 = loc(fused[#loc11, #loc15])
#loc197 = loc(fused[#loc16, #loc15])
#loc198 = loc(fused[#loc17, #loc18])
#loc199 = loc(fused[#loc19, #loc20])
#loc200 = loc(fused[#loc21, #loc18])
#loc201 = loc(fused[#loc29, #loc30])
#loc202 = loc(fused[#loc32, #loc31])
#loc203 = loc(fused[#loc37, #loc36])
#loc204 = loc(fused[#loc38, #loc39])
#loc205 = loc(fused[#loc40, #loc41])
#loc206 = loc(fused[#loc42, #loc43])
#loc207 = loc(fused[#loc44, #loc45])
#loc208 = loc(fused[#loc46, #loc47])
#loc209 = loc(fused[#loc48, #loc49])
#loc210 = loc(fused[#loc54, #loc55])
#loc213 = loc(fused[#loc65, #loc66])
#loc214 = loc(fused[#loc69, #loc70])
#loc215 = loc(fused[#loc73, #loc72])
#loc216 = loc(fused[#loc74, #loc75])
#loc217 = loc(fused[#loc76, #loc77])
#loc218 = loc(fused[#loc78, #loc79])
#loc219 = loc(fused[#loc80, #loc81])
#loc220 = loc(fused[#loc82, #loc83])
#loc221 = loc(fused[#loc84, #loc85])
#loc222 = loc(fused[#loc86, #loc87])
#loc223 = loc(fused[#loc86, #loc88])
#loc224 = loc(fused[#loc91, #loc92])
#loc225 = loc(fused[#loc93, #loc94])
#loc226 = loc(fused[#loc96, #loc95])
#loc227 = loc(fused[#loc97, #loc98])
#loc228 = loc(fused[#loc100, #loc94])
#loc229 = loc(fused[#loc105, #loc103])
#loc230 = loc(fused[#loc107, #loc106])
#loc231 = loc(fused[#loc111, #loc108])
#loc232 = loc(fused[#loc116, #loc117])
#loc233 = loc(fused[#loc118, #loc119])
#loc234 = loc(fused[#loc120, #loc121])
#loc235 = loc(fused[#loc124, #loc125])
#loc236 = loc(fused[#loc123, #loc125])
#loc237 = loc(fused[#loc122, #loc126])
#loc238 = loc(fused[#loc127, #loc126])
#loc239 = loc(fused[#loc128, #loc129])
#loc240 = loc(fused[#loc130, #loc131])
#loc241 = loc(fused[#loc132, #loc129])
#loc242 = loc(fused[#loc140, #loc141])
#loc243 = loc(fused[#loc143, #loc142])
#loc244 = loc(fused[#loc148, #loc147])
#loc245 = loc(fused[#loc149, #loc150])
#loc246 = loc(fused[#loc151, #loc152])
#loc247 = loc(fused[#loc153, #loc154])
#loc248 = loc(fused[#loc155, #loc156])
#loc249 = loc(fused[#loc157, #loc158])
#loc250 = loc(fused[#loc159, #loc160])
#loc251 = loc(fused[#loc159, #loc161])
#loc252 = loc(fused[#loc164, #loc165])
#loc253 = loc(fused[#loc166, #loc167])
#loc254 = loc(fused[#loc169, #loc168])
#loc255 = loc(fused[#loc170, #loc171])
#loc256 = loc(fused[#loc173, #loc167])
#loc257 = loc(fused[#loc178, #loc176])
#loc258 = loc(fused[#loc180, #loc179])
#loc259 = loc(fused[#loc184, #loc181])
