!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc134)
  cir.func private  @strdup(!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc135)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc136)
  cir.func private  @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc137)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"a string\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc138)
  cir.func no_proto  @CWE401_Memory_Leak__strdup_char_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc140)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc16)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc141)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc143)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc143)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc20)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc20)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc146)
          %7 = cir.const #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc146)
          cir.store %7, %6 : !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>> loc(#loc146)
          %8 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc29)
          %9 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc30)
          %10 = cir.call @strdup(%9) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc29)
          cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc147)
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc34)
        } loc(#loc145)
      } else {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc35)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc35)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc35)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc35)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc35)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc35)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc35)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc148)
        %13 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc37)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
        %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc9)
        %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc9)
        %17 = cir.call @strcpy(%14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc37)
        %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
        cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc40)
      } loc(#loc144)
    } loc(#loc142)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc150)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc150)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc43)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc43)
      cir.if %5 {
      } else {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc48)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc49)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc48)
      } loc(#loc151)
    } loc(#loc149)
    cir.return loc(#loc13)
  } loc(#loc139)
  cir.func no_proto  @CWE401_Memory_Leak__strdup_char_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc153)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc154)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    cir.return loc(#loc51)
  } loc(#loc152)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc156)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc60)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc157)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc159)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc159)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc64)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc64)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc162)
          %7 = cir.const #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc162)
          cir.store %7, %6 : !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>> loc(#loc162)
          %8 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc73)
          %9 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc74)
          %10 = cir.call @strdup(%9) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc73)
          cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc163)
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc78)
        } loc(#loc161)
      } else {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc165)
          %7 = cir.const #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc165)
          cir.store %7, %6 : !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>> loc(#loc165)
          %8 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc83)
          %9 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc84)
          %10 = cir.call @strdup(%9) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc83)
          cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc166)
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc88)
        } loc(#loc164)
      } loc(#loc160)
    } loc(#loc158)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc168)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc168)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc91)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc91)
      cir.if %5 {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc96)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc97)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc96)
      } else {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc98)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc99)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc98)
      } loc(#loc169)
    } loc(#loc167)
    cir.return loc(#loc57)
  } loc(#loc155)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc171)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc104)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc172)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc174)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc174)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc108)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc108)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc113)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc113)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc113)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc113)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc113)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc113)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc113)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc176)
        %13 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc115)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
        %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc117)
        %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc117)
        %17 = cir.call @strcpy(%14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc115)
        %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
        cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc119)
      } else {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc120)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc120)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc120)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc120)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc120)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc120)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc120)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc177)
        %13 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc122)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
        %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc124)
        %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc124)
        %17 = cir.call @strcpy(%14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc122)
        %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
        cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc126)
      } loc(#loc175)
    } loc(#loc173)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc179)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc179)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc129)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc129)
      cir.if %5 {
      } else {
      } loc(#loc180)
    } loc(#loc178)
    cir.return loc(#loc101)
  } loc(#loc170)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/string.h":187:1)
#loc4 = loc("/usr/include/string.h":188:35)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("/usr/include/string.h":141:1)
#loc8 = loc("/usr/include/string.h":142:14)
#loc9 = loc("CWE401_Memory_Leak__strdup_char_12.c":43:22)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE401_Memory_Leak__strdup_char_12.c":24:1)
#loc13 = loc("CWE401_Memory_Leak__strdup_char_12.c":57:1)
#loc14 = loc("CWE401_Memory_Leak__strdup_char_12.c":26:5)
#loc15 = loc("CWE401_Memory_Leak__strdup_char_12.c":26:12)
#loc16 = loc("CWE401_Memory_Leak__strdup_char_12.c":27:12)
#loc17 = loc("CWE401_Memory_Leak__strdup_char_12.c":27:5)
#loc18 = loc("CWE401_Memory_Leak__strdup_char_12.c":28:5)
#loc19 = loc("CWE401_Memory_Leak__strdup_char_12.c":45:5)
#loc20 = loc("CWE401_Memory_Leak__strdup_char_12.c":28:8)
#loc21 = loc("CWE401_Memory_Leak__strdup_char_12.c":28:33)
#loc22 = loc("CWE401_Memory_Leak__strdup_char_12.c":29:5)
#loc23 = loc("CWE401_Memory_Leak__strdup_char_12.c":37:5)
#loc24 = loc("CWE401_Memory_Leak__strdup_char_12.c":39:5)
#loc25 = loc("CWE401_Memory_Leak__strdup_char_12.c":30:9)
#loc26 = loc("CWE401_Memory_Leak__strdup_char_12.c":36:9)
#loc27 = loc("CWE401_Memory_Leak__strdup_char_12.c":31:13)
#loc28 = loc("CWE401_Memory_Leak__strdup_char_12.c":31:31)
#loc29 = loc("CWE401_Memory_Leak__strdup_char_12.c":33:20)
#loc30 = loc("CWE401_Memory_Leak__strdup_char_12.c":33:27)
#loc31 = loc("CWE401_Memory_Leak__strdup_char_12.c":33:13)
#loc32 = loc("CWE401_Memory_Leak__strdup_char_12.c":33:35)
#loc33 = loc("CWE401_Memory_Leak__strdup_char_12.c":35:23)
#loc34 = loc("CWE401_Memory_Leak__strdup_char_12.c":35:13)
#loc35 = loc("CWE401_Memory_Leak__strdup_char_12.c":41:24)
#loc36 = loc("CWE401_Memory_Leak__strdup_char_12.c":41:9)
#loc37 = loc("CWE401_Memory_Leak__strdup_char_12.c":43:9)
#loc38 = loc("CWE401_Memory_Leak__strdup_char_12.c":43:16)
#loc39 = loc("CWE401_Memory_Leak__strdup_char_12.c":44:19)
#loc40 = loc("CWE401_Memory_Leak__strdup_char_12.c":44:9)
#loc41 = loc("CWE401_Memory_Leak__strdup_char_12.c":46:5)
#loc42 = loc("CWE401_Memory_Leak__strdup_char_12.c":56:5)
#loc43 = loc("CWE401_Memory_Leak__strdup_char_12.c":46:8)
#loc44 = loc("CWE401_Memory_Leak__strdup_char_12.c":46:33)
#loc45 = loc("CWE401_Memory_Leak__strdup_char_12.c":47:5)
#loc46 = loc("CWE401_Memory_Leak__strdup_char_12.c":51:5)
#loc47 = loc("CWE401_Memory_Leak__strdup_char_12.c":53:5)
#loc48 = loc("CWE401_Memory_Leak__strdup_char_12.c":55:9)
#loc49 = loc("CWE401_Memory_Leak__strdup_char_12.c":55:14)
#loc50 = loc("CWE401_Memory_Leak__strdup_char_12.c":139:1)
#loc51 = loc("CWE401_Memory_Leak__strdup_char_12.c":143:1)
#loc52 = loc("CWE401_Memory_Leak__strdup_char_12.c":141:5)
#loc53 = loc("CWE401_Memory_Leak__strdup_char_12.c":141:13)
#loc54 = loc("CWE401_Memory_Leak__strdup_char_12.c":142:5)
#loc55 = loc("CWE401_Memory_Leak__strdup_char_12.c":142:13)
#loc56 = loc("CWE401_Memory_Leak__strdup_char_12.c":66:1)
#loc57 = loc("CWE401_Memory_Leak__strdup_char_12.c":100:1)
#loc58 = loc("CWE401_Memory_Leak__strdup_char_12.c":68:5)
#loc59 = loc("CWE401_Memory_Leak__strdup_char_12.c":68:12)
#loc60 = loc("CWE401_Memory_Leak__strdup_char_12.c":69:12)
#loc61 = loc("CWE401_Memory_Leak__strdup_char_12.c":69:5)
#loc62 = loc("CWE401_Memory_Leak__strdup_char_12.c":70:5)
#loc63 = loc("CWE401_Memory_Leak__strdup_char_12.c":89:5)
#loc64 = loc("CWE401_Memory_Leak__strdup_char_12.c":70:8)
#loc65 = loc("CWE401_Memory_Leak__strdup_char_12.c":70:33)
#loc66 = loc("CWE401_Memory_Leak__strdup_char_12.c":71:5)
#loc67 = loc("CWE401_Memory_Leak__strdup_char_12.c":79:5)
#loc68 = loc("CWE401_Memory_Leak__strdup_char_12.c":81:5)
#loc69 = loc("CWE401_Memory_Leak__strdup_char_12.c":72:9)
#loc70 = loc("CWE401_Memory_Leak__strdup_char_12.c":78:9)
#loc71 = loc("CWE401_Memory_Leak__strdup_char_12.c":73:13)
#loc72 = loc("CWE401_Memory_Leak__strdup_char_12.c":73:31)
#loc73 = loc("CWE401_Memory_Leak__strdup_char_12.c":75:20)
#loc74 = loc("CWE401_Memory_Leak__strdup_char_12.c":75:27)
#loc75 = loc("CWE401_Memory_Leak__strdup_char_12.c":75:13)
#loc76 = loc("CWE401_Memory_Leak__strdup_char_12.c":75:35)
#loc77 = loc("CWE401_Memory_Leak__strdup_char_12.c":77:23)
#loc78 = loc("CWE401_Memory_Leak__strdup_char_12.c":77:13)
#loc79 = loc("CWE401_Memory_Leak__strdup_char_12.c":82:9)
#loc80 = loc("CWE401_Memory_Leak__strdup_char_12.c":88:9)
#loc81 = loc("CWE401_Memory_Leak__strdup_char_12.c":83:13)
#loc82 = loc("CWE401_Memory_Leak__strdup_char_12.c":83:31)
#loc83 = loc("CWE401_Memory_Leak__strdup_char_12.c":85:20)
#loc84 = loc("CWE401_Memory_Leak__strdup_char_12.c":85:27)
#loc85 = loc("CWE401_Memory_Leak__strdup_char_12.c":85:13)
#loc86 = loc("CWE401_Memory_Leak__strdup_char_12.c":85:35)
#loc87 = loc("CWE401_Memory_Leak__strdup_char_12.c":87:23)
#loc88 = loc("CWE401_Memory_Leak__strdup_char_12.c":87:13)
#loc89 = loc("CWE401_Memory_Leak__strdup_char_12.c":90:5)
#loc90 = loc("CWE401_Memory_Leak__strdup_char_12.c":99:5)
#loc91 = loc("CWE401_Memory_Leak__strdup_char_12.c":90:8)
#loc92 = loc("CWE401_Memory_Leak__strdup_char_12.c":90:33)
#loc93 = loc("CWE401_Memory_Leak__strdup_char_12.c":91:5)
#loc94 = loc("CWE401_Memory_Leak__strdup_char_12.c":94:5)
#loc95 = loc("CWE401_Memory_Leak__strdup_char_12.c":96:5)
#loc96 = loc("CWE401_Memory_Leak__strdup_char_12.c":93:9)
#loc97 = loc("CWE401_Memory_Leak__strdup_char_12.c":93:14)
#loc98 = loc("CWE401_Memory_Leak__strdup_char_12.c":98:9)
#loc99 = loc("CWE401_Memory_Leak__strdup_char_12.c":98:14)
#loc100 = loc("CWE401_Memory_Leak__strdup_char_12.c":105:1)
#loc101 = loc("CWE401_Memory_Leak__strdup_char_12.c":137:1)
#loc102 = loc("CWE401_Memory_Leak__strdup_char_12.c":107:5)
#loc103 = loc("CWE401_Memory_Leak__strdup_char_12.c":107:12)
#loc104 = loc("CWE401_Memory_Leak__strdup_char_12.c":108:12)
#loc105 = loc("CWE401_Memory_Leak__strdup_char_12.c":108:5)
#loc106 = loc("CWE401_Memory_Leak__strdup_char_12.c":109:5)
#loc107 = loc("CWE401_Memory_Leak__strdup_char_12.c":124:5)
#loc108 = loc("CWE401_Memory_Leak__strdup_char_12.c":109:8)
#loc109 = loc("CWE401_Memory_Leak__strdup_char_12.c":109:33)
#loc110 = loc("CWE401_Memory_Leak__strdup_char_12.c":110:5)
#loc111 = loc("CWE401_Memory_Leak__strdup_char_12.c":116:5)
#loc112 = loc("CWE401_Memory_Leak__strdup_char_12.c":118:5)
#loc113 = loc("CWE401_Memory_Leak__strdup_char_12.c":112:24)
#loc114 = loc("CWE401_Memory_Leak__strdup_char_12.c":112:9)
#loc115 = loc("CWE401_Memory_Leak__strdup_char_12.c":114:9)
#loc116 = loc("CWE401_Memory_Leak__strdup_char_12.c":114:16)
#loc117 = loc("CWE401_Memory_Leak__strdup_char_12.c":114:22)
#loc118 = loc("CWE401_Memory_Leak__strdup_char_12.c":115:19)
#loc119 = loc("CWE401_Memory_Leak__strdup_char_12.c":115:9)
#loc120 = loc("CWE401_Memory_Leak__strdup_char_12.c":120:24)
#loc121 = loc("CWE401_Memory_Leak__strdup_char_12.c":120:9)
#loc122 = loc("CWE401_Memory_Leak__strdup_char_12.c":122:9)
#loc123 = loc("CWE401_Memory_Leak__strdup_char_12.c":122:16)
#loc124 = loc("CWE401_Memory_Leak__strdup_char_12.c":122:22)
#loc125 = loc("CWE401_Memory_Leak__strdup_char_12.c":123:19)
#loc126 = loc("CWE401_Memory_Leak__strdup_char_12.c":123:9)
#loc127 = loc("CWE401_Memory_Leak__strdup_char_12.c":125:5)
#loc128 = loc("CWE401_Memory_Leak__strdup_char_12.c":136:5)
#loc129 = loc("CWE401_Memory_Leak__strdup_char_12.c":125:8)
#loc130 = loc("CWE401_Memory_Leak__strdup_char_12.c":125:33)
#loc131 = loc("CWE401_Memory_Leak__strdup_char_12.c":126:5)
#loc132 = loc("CWE401_Memory_Leak__strdup_char_12.c":130:5)
#loc133 = loc("CWE401_Memory_Leak__strdup_char_12.c":132:5)
#loc134 = loc(fused[#loc1, #loc2])
#loc135 = loc(fused[#loc3, #loc4])
#loc136 = loc(fused[#loc5, #loc6])
#loc137 = loc(fused[#loc7, #loc8])
#loc138 = loc(fused[#loc10, #loc11])
#loc139 = loc(fused[#loc12, #loc13])
#loc140 = loc(fused[#loc14, #loc15])
#loc141 = loc(fused[#loc17, #loc16])
#loc142 = loc(fused[#loc18, #loc19])
#loc143 = loc(fused[#loc20, #loc21])
#loc144 = loc(fused[#loc22, #loc23, #loc24, #loc19])
#loc145 = loc(fused[#loc25, #loc26])
#loc146 = loc(fused[#loc27, #loc28])
#loc147 = loc(fused[#loc31, #loc32])
#loc148 = loc(fused[#loc36, #loc35])
#loc149 = loc(fused[#loc41, #loc42])
#loc150 = loc(fused[#loc43, #loc44])
#loc151 = loc(fused[#loc45, #loc46, #loc47, #loc42])
#loc152 = loc(fused[#loc50, #loc51])
#loc153 = loc(fused[#loc52, #loc53])
#loc154 = loc(fused[#loc54, #loc55])
#loc155 = loc(fused[#loc56, #loc57])
#loc156 = loc(fused[#loc58, #loc59])
#loc157 = loc(fused[#loc61, #loc60])
#loc158 = loc(fused[#loc62, #loc63])
#loc159 = loc(fused[#loc64, #loc65])
#loc160 = loc(fused[#loc66, #loc67, #loc68, #loc63])
#loc161 = loc(fused[#loc69, #loc70])
#loc162 = loc(fused[#loc71, #loc72])
#loc163 = loc(fused[#loc75, #loc76])
#loc164 = loc(fused[#loc79, #loc80])
#loc165 = loc(fused[#loc81, #loc82])
#loc166 = loc(fused[#loc85, #loc86])
#loc167 = loc(fused[#loc89, #loc90])
#loc168 = loc(fused[#loc91, #loc92])
#loc169 = loc(fused[#loc93, #loc94, #loc95, #loc90])
#loc170 = loc(fused[#loc100, #loc101])
#loc171 = loc(fused[#loc102, #loc103])
#loc172 = loc(fused[#loc105, #loc104])
#loc173 = loc(fused[#loc106, #loc107])
#loc174 = loc(fused[#loc108, #loc109])
#loc175 = loc(fused[#loc110, #loc111, #loc112, #loc107])
#loc176 = loc(fused[#loc114, #loc113])
#loc177 = loc(fused[#loc121, #loc120])
#loc178 = loc(fused[#loc127, #loc128])
#loc179 = loc(fused[#loc129, #loc130])
#loc180 = loc(fused[#loc131, #loc132, #loc133, #loc128])
