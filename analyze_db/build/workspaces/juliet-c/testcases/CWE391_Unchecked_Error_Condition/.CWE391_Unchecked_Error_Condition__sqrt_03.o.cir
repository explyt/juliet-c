!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc1)
  cir.func private @printDoubleLine(!cir.double) loc(#loc96)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_03_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc8)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc9)
      %2 = cir.cmp(eq, %0, %1) : !s32i, !cir.bool loc(#loc99)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc102)
          %4 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc15)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc16)
          %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc17)
          %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc17)
          %8 = cir.call @sqrt(%7) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc15)
          cir.store %8, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc103)
          %9 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc20)
          cir.call @printDoubleLine(%9) : (!cir.double) -> () loc(#loc21)
        } loc(#loc101)
      } loc(#loc100)
    } loc(#loc98)
    cir.return loc(#loc5)
  } loc(#loc97)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_03_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc105)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc24)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc106)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    cir.return loc(#loc23)
  } loc(#loc104)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc30)
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc108)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc33)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc109)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc40)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc41)
      %2 = cir.cmp(ne, %0, %1) : !s32i, !cir.bool loc(#loc112)
      cir.if %2 {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc30)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc30)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc45)
      } else {
        cir.scope {
          %3 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc115)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc50)
          %5 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc51)
          cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc116)
          %6 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc52)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc53)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc54)
          %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc54)
          %10 = cir.call @sqrt(%9) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc52)
          cir.store %10, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc117)
          cir.scope {
            %12 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc59)
            %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc59)
            %14 = cir.const #cir.int<33> : !s32i loc(#loc60)
            %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc119)
            cir.if %15 {
              %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc33)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc33)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc62)
              %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc63)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc64)
              cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc63)
            } loc(#loc120)
          } loc(#loc118)
          %11 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc65)
          cir.call @printDoubleLine(%11) : (!cir.double) -> () loc(#loc66)
        } loc(#loc114)
      } loc(#loc113)
    } loc(#loc111)
    cir.return loc(#loc37)
  } loc(#loc110)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc71)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc72)
      %2 = cir.cmp(eq, %0, %1) : !s32i, !cir.bool loc(#loc123)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc126)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc78)
          %5 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc79)
          cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc127)
          %6 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc80)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc81)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc82)
          %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc82)
          %10 = cir.call @sqrt(%9) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc80)
          cir.store %10, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc128)
          cir.scope {
            %12 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc87)
            %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc87)
            %14 = cir.const #cir.int<33> : !s32i loc(#loc88)
            %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc130)
            cir.if %15 {
              %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc90)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc90)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc91)
              %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc92)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc93)
              cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc92)
            } loc(#loc131)
          } loc(#loc129)
          %11 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc94)
          cir.call @printDoubleLine(%11) : (!cir.double) -> () loc(#loc95)
        } loc(#loc125)
      } loc(#loc124)
    } loc(#loc122)
    cir.return loc(#loc68)
  } loc(#loc121)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_03.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc4 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":24:1)
#loc5 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":35:1)
#loc6 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":26:5)
#loc7 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":34:5)
#loc8 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":26:8)
#loc9 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":26:11)
#loc10 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":27:5)
#loc11 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":28:9)
#loc12 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":33:9)
#loc13 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":29:13)
#loc14 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":29:20)
#loc15 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":30:36)
#loc16 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":30:50)
#loc17 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":30:49)
#loc18 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":30:13)
#loc19 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":30:51)
#loc20 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":32:29)
#loc21 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":32:13)
#loc22 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":86:1)
#loc23 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":90:1)
#loc24 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":88:5)
#loc25 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":88:11)
#loc26 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":89:5)
#loc27 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":89:11)
#loc28 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc29 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc30 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":47:19)
#loc31 = loc("/usr/include/errno.h":37:1)
#loc32 = loc("/usr/include/errno.h":37:45)
#loc33 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":58:27)
#loc34 = loc("/usr/include/stdlib.h":756:1)
#loc35 = loc("/usr/include/stdlib.h":756:70)
#loc36 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":42:1)
#loc37 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":64:1)
#loc38 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":44:5)
#loc39 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":63:5)
#loc40 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":44:8)
#loc41 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":44:11)
#loc42 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":45:5)
#loc43 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":48:5)
#loc44 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":50:5)
#loc45 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":47:9)
#loc46 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":51:9)
#loc47 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":62:9)
#loc48 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":52:13)
#loc49 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":52:20)
#loc50 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":53:21)
#loc51 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":53:13)
#loc52 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":54:36)
#loc53 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":54:50)
#loc54 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":54:49)
#loc55 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":54:13)
#loc56 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":54:51)
#loc57 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":56:13)
#loc58 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":60:13)
#loc59 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":56:17)
#loc60 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":56:26)
#loc61 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":57:13)
#loc62 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":58:17)
#loc63 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":59:17)
#loc64 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":59:22)
#loc65 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":61:29)
#loc66 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":61:13)
#loc67 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":67:1)
#loc68 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":84:1)
#loc69 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":69:5)
#loc70 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":83:5)
#loc71 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":69:8)
#loc72 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":69:11)
#loc73 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":70:5)
#loc74 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":71:9)
#loc75 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":82:9)
#loc76 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":72:13)
#loc77 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":72:20)
#loc78 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":73:21)
#loc79 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":73:13)
#loc80 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":74:36)
#loc81 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":74:50)
#loc82 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":74:49)
#loc83 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":74:13)
#loc84 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":74:51)
#loc85 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":76:13)
#loc86 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":80:13)
#loc87 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":76:17)
#loc88 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":76:26)
#loc89 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":77:13)
#loc90 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":78:27)
#loc91 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":78:17)
#loc92 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":79:17)
#loc93 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":79:22)
#loc94 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":81:29)
#loc95 = loc("CWE391_Unchecked_Error_Condition__sqrt_03.c":81:13)
#loc96 = loc(fused[#loc2, #loc3])
#loc97 = loc(fused[#loc4, #loc5])
#loc98 = loc(fused[#loc6, #loc7])
#loc99 = loc(fused[#loc8, #loc9])
#loc100 = loc(fused[#loc10, #loc7])
#loc101 = loc(fused[#loc11, #loc12])
#loc102 = loc(fused[#loc13, #loc14])
#loc103 = loc(fused[#loc18, #loc19])
#loc104 = loc(fused[#loc22, #loc23])
#loc105 = loc(fused[#loc24, #loc25])
#loc106 = loc(fused[#loc26, #loc27])
#loc107 = loc(fused[#loc28, #loc29])
#loc108 = loc(fused[#loc31, #loc32])
#loc109 = loc(fused[#loc34, #loc35])
#loc110 = loc(fused[#loc36, #loc37])
#loc111 = loc(fused[#loc38, #loc39])
#loc112 = loc(fused[#loc40, #loc41])
#loc113 = loc(fused[#loc42, #loc43, #loc44, #loc39])
#loc114 = loc(fused[#loc46, #loc47])
#loc115 = loc(fused[#loc48, #loc49])
#loc116 = loc(fused[#loc51, #loc50])
#loc117 = loc(fused[#loc55, #loc56])
#loc118 = loc(fused[#loc57, #loc58])
#loc119 = loc(fused[#loc59, #loc60])
#loc120 = loc(fused[#loc61, #loc58])
#loc121 = loc(fused[#loc67, #loc68])
#loc122 = loc(fused[#loc69, #loc70])
#loc123 = loc(fused[#loc71, #loc72])
#loc124 = loc(fused[#loc73, #loc70])
#loc125 = loc(fused[#loc74, #loc75])
#loc126 = loc(fused[#loc76, #loc77])
#loc127 = loc(fused[#loc79, #loc78])
#loc128 = loc(fused[#loc83, #loc84])
#loc129 = loc(fused[#loc85, #loc86])
#loc130 = loc(fused[#loc87, #loc88])
#loc131 = loc(fused[#loc89, #loc86])
