!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE23_Relative_Path_Traversal/s02/CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.global "private" constant cir_private @__const._ZN58CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12L7goodG2BEv.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc254)
  cir.global "private" constant cir_private @__const._ZN58CWE23_Relative_Path_Traversal__char_listen_socket_fopen_123badEv.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc255)
  cir.func private @globalReturnsTrueOrFalse() -> !s32i loc(#loc256)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc257)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc258)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc259)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc260)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc261)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc262)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc263)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc264)
  cir.func private @close(!s32i) -> !s32i loc(#loc265)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc266)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"file.txt\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc27)
  cir.func private @fopen(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc267)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"wb+\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc30)
  cir.func private @fclose(!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc268)
  cir.func @_ZN58CWE23_Relative_Path_Traversal__char_listen_socket_fopen_123badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc270)
    %1 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc255)
    %2 = cir.get_global @__const._ZN58CWE23_Relative_Path_Traversal__char_listen_socket_fopen_123badEv.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc255)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc255)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc37)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc271)
    cir.scope {
      %4 = cir.call @globalReturnsTrueOrFalse() : () -> !s32i loc(#loc41)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc273)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc276)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc277)
          %8 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc278)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc279)
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc280)
          %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc281)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc55)
          %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc55)
          cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc279)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc57)
          %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc57)
          cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc280)
          %16 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc60)
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
          %18 = cir.call @strlen(%17) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc60)
          cir.store %18, %11 : !u64i, !cir.ptr<!u64i> loc(#loc281)
          cir.scope {
            cir.do {
              cir.scope {
                %19 = cir.const #cir.int<2> : !s32i loc(#loc66)
                %20 = cir.const #cir.int<1> : !u32i loc(#loc67)
                %21 = cir.cast(integral, %20 : !u32i), !s32i loc(#loc67)
                %22 = cir.const #cir.int<6> : !u32i loc(#loc68)
                %23 = cir.cast(integral, %22 : !u32i), !s32i loc(#loc68)
                %24 = cir.call @socket(%19, %21, %23) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc69)
                cir.store %24, %9 : !s32i, !cir.ptr<!s32i> loc(#loc284)
                cir.scope {
                  %77 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc74)
                  %78 = cir.const #cir.int<1> : !s32i loc(#loc75)
                  %79 = cir.unary(minus, %78) nsw : !s32i, !s32i loc(#loc75)
                  %80 = cir.cmp(eq, %77, %79) : !s32i, !cir.bool loc(#loc286)
                  cir.if %80 {
                    cir.break loc(#loc77)
                  } loc(#loc287)
                } loc(#loc285)
                %25 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc288)
                %26 = cir.const #cir.int<0> : !s32i loc(#loc80)
                %27 = cir.const #cir.int<16> : !u64i loc(#loc289)
                cir.libc.memset %27 bytes from %25 set to %26 : !cir.ptr<!void>, !s32i, !u64i loc(#loc290)
                %28 = cir.const #cir.int<2> : !s32i loc(#loc85)
                %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc85)
                %30 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc86)
                cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc291)
                %31 = cir.const #cir.int<0> : !s32i loc(#loc88)
                %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc88)
                %33 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc89)
                %34 = cir.get_member %33[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc90)
                cir.store %32, %34 : !u32i, !cir.ptr<!u32i> loc(#loc292)
                %35 = cir.const #cir.int<27015> : !s32i loc(#loc92)
                %36 = cir.cast(integral, %35 : !s32i), !u16i loc(#loc92)
                %37 = cir.call @htons(%36) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc93)
                %38 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc94)
                cir.store %37, %38 : !u16i, !cir.ptr<!u16i> loc(#loc293)
                cir.scope {
                  %77 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc99)
                  %78 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc295)
                  %79 = cir.const #cir.int<16> : !u64i loc(#loc296)
                  %80 = cir.cast(integral, %79 : !u64i), !u32i loc(#loc296)
                  %81 = cir.call @bind(%77, %78, %80) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc104)
                  %82 = cir.const #cir.int<1> : !s32i loc(#loc105)
                  %83 = cir.unary(minus, %82) nsw : !s32i, !s32i loc(#loc105)
                  %84 = cir.cmp(eq, %81, %83) : !s32i, !cir.bool loc(#loc297)
                  cir.if %84 {
                    cir.break loc(#loc107)
                  } loc(#loc298)
                } loc(#loc294)
                cir.scope {
                  %77 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                  %78 = cir.const #cir.int<5> : !s32i loc(#loc111)
                  %79 = cir.call @listen(%77, %78) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc112)
                  %80 = cir.const #cir.int<1> : !s32i loc(#loc113)
                  %81 = cir.unary(minus, %80) nsw : !s32i, !s32i loc(#loc113)
                  %82 = cir.cmp(eq, %79, %81) : !s32i, !cir.bool loc(#loc300)
                  cir.if %82 {
                    cir.break loc(#loc115)
                  } loc(#loc301)
                } loc(#loc299)
                %39 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                %40 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc117)
                %41 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc118)
                %42 = cir.call @accept(%39, %40, %41) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc119)
                cir.store %42, %10 : !s32i, !cir.ptr<!s32i> loc(#loc302)
                cir.scope {
                  %77 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc124)
                  %78 = cir.const #cir.int<1> : !s32i loc(#loc125)
                  %79 = cir.unary(minus, %78) nsw : !s32i, !s32i loc(#loc125)
                  %80 = cir.cmp(eq, %77, %79) : !s32i, !cir.bool loc(#loc304)
                  cir.if %80 {
                    cir.break loc(#loc127)
                  } loc(#loc305)
                } loc(#loc303)
                %43 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc128)
                %44 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
                %45 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc130)
                %46 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %45 : !u64i), !cir.ptr<!s8i> loc(#loc131)
                %47 = cir.cast(bitcast, %46 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc306)
                %48 = cir.const #cir.int<1> : !u64i loc(#loc307)
                %49 = cir.const #cir.int<4096> : !s32i loc(#loc136)
                %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc136)
                %51 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc137)
                %52 = cir.binop(sub, %50, %51) : !u64i loc(#loc308)
                %53 = cir.const #cir.int<1> : !s32i loc(#loc138)
                %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc138)
                %55 = cir.binop(sub, %52, %54) : !u64i loc(#loc309)
                %56 = cir.binop(mul, %48, %55) : !u64i loc(#loc310)
                %57 = cir.const #cir.int<0> : !s32i loc(#loc140)
                %58 = cir.call @recv(%43, %47, %56, %57) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc141)
                %59 = cir.cast(integral, %58 : !s64i), !s32i loc(#loc141)
                cir.store %59, %6 : !s32i, !cir.ptr<!s32i> loc(#loc311)
                cir.scope {
                  %77 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc146)
                  %78 = cir.const #cir.int<1> : !s32i loc(#loc147)
                  %79 = cir.unary(minus, %78) nsw : !s32i, !s32i loc(#loc147)
                  %80 = cir.cmp(eq, %77, %79) : !s32i, !cir.bool loc(#loc313)
                  %81 = cir.ternary(%80, true {
                    %82 = cir.const #true loc(#loc148)
                    cir.yield %82 : !cir.bool loc(#loc148)
                  }, false {
                    %82 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc149)
                    %83 = cir.const #cir.int<0> : !s32i loc(#loc150)
                    %84 = cir.cmp(eq, %82, %83) : !s32i, !cir.bool loc(#loc314)
                    %85 = cir.ternary(%84, true {
                      %86 = cir.const #true loc(#loc148)
                      cir.yield %86 : !cir.bool loc(#loc148)
                    }, false {
                      %86 = cir.const #false loc(#loc148)
                      cir.yield %86 : !cir.bool loc(#loc148)
                    }) : (!cir.bool) -> !cir.bool loc(#loc148)
                    cir.yield %85 : !cir.bool loc(#loc148)
                  }) : (!cir.bool) -> !cir.bool loc(#loc148)
                  cir.if %81 {
                    cir.break loc(#loc152)
                  } loc(#loc315)
                } loc(#loc312)
                %60 = cir.const #cir.int<0> : !s8i loc(#loc153)
                %61 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc154)
                %62 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc155)
                %63 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc156)
                %64 = cir.cast(integral, %63 : !s32i), !u64i loc(#loc156)
                %65 = cir.const #cir.int<1> : !u64i loc(#loc316)
                %66 = cir.binop(div, %64, %65) : !u64i loc(#loc317)
                %67 = cir.binop(add, %62, %66) : !u64i loc(#loc318)
                %68 = cir.ptr_stride(%61 : !cir.ptr<!s8i>, %67 : !u64i), !cir.ptr<!s8i> loc(#loc159)
                cir.store %60, %68 : !s8i, !cir.ptr<!s8i> loc(#loc319)
                %69 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc160)
                %70 = cir.const #cir.int<13> : !s8i loc(#loc161)
                %71 = cir.cast(integral, %70 : !s8i), !s32i loc(#loc161)
                %72 = cir.call @strchr(%69, %71) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc162)
                cir.store %72, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc320)
                cir.scope {
                  %77 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc167)
                  %78 = cir.cast(ptr_to_bool, %77 : !cir.ptr<!s8i>), !cir.bool loc(#loc167)
                  cir.if %78 {
                    %79 = cir.const #cir.int<0> : !s8i loc(#loc169)
                    %80 = cir.load deref %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc170)
                    cir.store %79, %80 : !s8i, !cir.ptr<!s8i> loc(#loc323)
                  } loc(#loc322)
                } loc(#loc321)
                %73 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc172)
                %74 = cir.const #cir.int<10> : !s8i loc(#loc173)
                %75 = cir.cast(integral, %74 : !s8i), !s32i loc(#loc173)
                %76 = cir.call @strchr(%73, %75) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc174)
                cir.store %76, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc324)
                cir.scope {
                  %77 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc179)
                  %78 = cir.cast(ptr_to_bool, %77 : !cir.ptr<!s8i>), !cir.bool loc(#loc179)
                  cir.if %78 {
                    %79 = cir.const #cir.int<0> : !s8i loc(#loc181)
                    %80 = cir.load deref %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc182)
                    cir.store %79, %80 : !s8i, !cir.ptr<!s8i> loc(#loc327)
                  } loc(#loc326)
                } loc(#loc325)
              } loc(#loc283)
              cir.yield loc(#loc63)
            } while {
              %19 = cir.const #cir.int<0> : !s32i loc(#loc184)
              %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc184)
              cir.condition(%20) loc(#loc184)
            } loc(#loc282)
          } loc(#loc282)
          cir.scope {
            %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc187)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc188)
            %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc188)
            %22 = cir.cmp(ne, %19, %21) : !s32i, !cir.bool loc(#loc329)
            cir.if %22 {
              %23 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc190)
              %24 = cir.call @close(%23) : (!s32i) -> !s32i loc(#loc191)
            } loc(#loc330)
          } loc(#loc328)
          cir.scope {
            %19 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc194)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc195)
            %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc195)
            %22 = cir.cmp(ne, %19, %21) : !s32i, !cir.bool loc(#loc332)
            cir.if %22 {
              %23 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc197)
              %24 = cir.call @close(%23) : (!s32i) -> !s32i loc(#loc198)
            } loc(#loc333)
          } loc(#loc331)
        } loc(#loc275)
      } else {
        %6 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc199)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc200)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc27)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc27)
        %10 = cir.call @strcat(%7, %9) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc199)
      } loc(#loc274)
    } loc(#loc272)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pFile", init] {alignment = 8 : i64} loc(#loc335)
      %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__IO_FILE> loc(#loc204)
      cir.store %5, %4 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc335)
      %6 = cir.get_global @fopen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE>>> loc(#loc205)
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc206)
      %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc30)
      %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc30)
      %10 = cir.call @fopen(%7, %9) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc205)
      cir.store %10, %4 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc336)
      cir.scope {
        %11 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc211)
        %12 = cir.const #cir.ptr<null> : !cir.ptr<!ty__IO_FILE> loc(#loc212)
        %13 = cir.cmp(ne, %11, %12) : !cir.ptr<!ty__IO_FILE>, !cir.bool loc(#loc338)
        cir.if %13 {
          %14 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc214)
          %15 = cir.call @fclose(%14) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc215)
        } loc(#loc339)
      } loc(#loc337)
    } loc(#loc334)
    cir.return loc(#loc34)
  } loc(#loc269)
  cir.func internal private @_ZN58CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc341)
    %1 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc254)
    %2 = cir.get_global @__const._ZN58CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12L7goodG2BEv.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc254)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc254)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc220)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc342)
    cir.scope {
      %4 = cir.call @globalReturnsTrueOrFalse() : () -> !s32i loc(#loc224)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc344)
      cir.if %5 {
        %6 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc229)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc230)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc231)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc231)
        %10 = cir.call @strcat(%7, %9) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc229)
      } else {
        %6 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc232)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc233)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc234)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc234)
        %10 = cir.call @strcat(%7, %9) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc232)
      } loc(#loc345)
    } loc(#loc343)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pFile", init] {alignment = 8 : i64} loc(#loc347)
      %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__IO_FILE> loc(#loc238)
      cir.store %5, %4 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc347)
      %6 = cir.get_global @fopen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE>>> loc(#loc239)
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc240)
      %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc241)
      %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc241)
      %10 = cir.call @fopen(%7, %9) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc239)
      cir.store %10, %4 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc348)
      cir.scope {
        %11 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc246)
        %12 = cir.const #cir.ptr<null> : !cir.ptr<!ty__IO_FILE> loc(#loc247)
        %13 = cir.cmp(ne, %11, %12) : !cir.ptr<!ty__IO_FILE>, !cir.bool loc(#loc350)
        cir.if %13 {
          %14 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc249)
          %15 = cir.call @fclose(%14) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc250)
        } loc(#loc351)
      } loc(#loc349)
    } loc(#loc346)
    cir.return loc(#loc217)
  } loc(#loc340)
  cir.func @_ZN58CWE23_Relative_Path_Traversal__char_listen_socket_fopen_124goodEv() extra(#fn_attr1) {
    cir.call @_ZN58CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12L7goodG2BEv() : () -> () loc(#loc253)
    cir.return loc(#loc252)
  } loc(#loc352)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE23_Relative_Path_Traversal/s02/CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":0:0)
#loc1 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":170:5)
#loc2 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":170:37)
#loc3 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":61:5)
#loc4 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":61:37)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc11 = loc("/usr/include/netinet/in.h":402:1)
#loc12 = loc("/usr/include/netinet/in.h":403:40)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc15 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc16 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc17 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc18 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc19 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc20 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc21 = loc("/usr/include/string.h":226:1)
#loc22 = loc("/usr/include/string.h":227:50)
#loc23 = loc("/usr/include/unistd.h":358:1)
#loc24 = loc("/usr/include/unistd.h":358:27)
#loc25 = loc("/usr/include/string.h":149:1)
#loc26 = loc("/usr/include/string.h":150:14)
#loc27 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":148:22)
#loc28 = loc("/usr/include/stdio.h":264:1)
#loc29 = loc("/usr/include/stdio.h":266:3)
#loc30 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":153:29)
#loc31 = loc("/usr/include/stdio.h":184:1)
#loc32 = loc("/usr/include/stdio.h":184:36)
#loc33 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":58:1)
#loc34 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":159:1)
#loc35 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":60:5)
#loc36 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":60:12)
#loc37 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":62:12)
#loc38 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":62:5)
#loc39 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":63:5)
#loc40 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":149:5)
#loc41 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":63:8)
#loc42 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":63:33)
#loc43 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":64:5)
#loc44 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":144:5)
#loc45 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":146:5)
#loc46 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":65:9)
#loc47 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":143:9)
#loc48 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":70:13)
#loc49 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":70:17)
#loc50 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":71:13)
#loc51 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":71:32)
#loc52 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":72:13)
#loc53 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":72:19)
#loc54 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":73:13)
#loc55 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":73:35)
#loc56 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":74:13)
#loc57 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":74:35)
#loc58 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":75:13)
#loc59 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":75:41)
#loc60 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":75:30)
#loc61 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":75:37)
#loc62 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":76:13)
#loc63 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":128:21)
#loc64 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":77:13)
#loc65 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":127:13)
#loc66 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":86:39)
#loc67 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":86:48)
#loc68 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":86:61)
#loc69 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":86:32)
#loc70 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":86:17)
#loc71 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":86:72)
#loc72 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":87:17)
#loc73 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":90:17)
#loc74 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":87:21)
#loc75 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":87:37)
#loc76 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":88:17)
#loc77 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":89:21)
#loc78 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":91:24)
#loc79 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":91:25)
#loc80 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":91:34)
#loc81 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":91:37)
#loc82 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":91:51)
#loc83 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":91:17)
#loc84 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":91:52)
#loc85 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":92:38)
#loc86 = loc("/usr/include/netinet/in.h":249:5)
#loc87 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":92:17)
#loc88 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":93:43)
#loc89 = loc("/usr/include/netinet/in.h":251:20)
#loc90 = loc("/usr/include/netinet/in.h":33:15)
#loc91 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":93:17)
#loc92 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":94:42)
#loc93 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":94:36)
#loc94 = loc("/usr/include/netinet/in.h":250:15)
#loc95 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":94:17)
#loc96 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":94:50)
#loc97 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":95:17)
#loc98 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":98:17)
#loc99 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":95:26)
#loc100 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":95:58)
#loc101 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":95:59)
#loc102 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":95:68)
#loc103 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":95:82)
#loc104 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":95:21)
#loc105 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":95:88)
#loc106 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":96:17)
#loc107 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":97:21)
#loc108 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":99:17)
#loc109 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":102:17)
#loc110 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":99:28)
#loc111 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":99:42)
#loc112 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":99:21)
#loc113 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":99:61)
#loc114 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":100:17)
#loc115 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":101:21)
#loc116 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":103:39)
#loc117 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":103:53)
#loc118 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":103:59)
#loc119 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":103:32)
#loc120 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":103:17)
#loc121 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":103:63)
#loc122 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":104:17)
#loc123 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":107:17)
#loc124 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":104:21)
#loc125 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":104:37)
#loc126 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":105:17)
#loc127 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":106:21)
#loc128 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":109:35)
#loc129 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":109:58)
#loc130 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":109:65)
#loc131 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":109:63)
#loc132 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":109:49)
#loc133 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":109:72)
#loc134 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":109:75)
#loc135 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":109:86)
#loc136 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":109:91)
#loc137 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":109:106)
#loc138 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":109:116)
#loc139 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":109:117)
#loc140 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":109:120)
#loc141 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":109:30)
#loc142 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":109:17)
#loc143 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":109:121)
#loc144 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":110:17)
#loc145 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":113:17)
#loc146 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":110:21)
#loc147 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":110:35)
#loc148 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":110:48)
#loc149 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":110:51)
#loc150 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":110:65)
#loc151 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":111:17)
#loc152 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":112:21)
#loc153 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":115:61)
#loc154 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":115:17)
#loc155 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":115:22)
#loc156 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":115:32)
#loc157 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":115:45)
#loc158 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":115:56)
#loc159 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":115:57)
#loc160 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":117:34)
#loc161 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":117:40)
#loc162 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":117:27)
#loc163 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":117:17)
#loc164 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":117:44)
#loc165 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":118:17)
#loc166 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":121:17)
#loc167 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":118:21)
#loc168 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":119:17)
#loc169 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":120:32)
#loc170 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":120:22)
#loc171 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":120:21)
#loc172 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":122:34)
#loc173 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":122:40)
#loc174 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":122:27)
#loc175 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":122:17)
#loc176 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":122:44)
#loc177 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":123:17)
#loc178 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":126:17)
#loc179 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":123:21)
#loc180 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":124:17)
#loc181 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":125:32)
#loc182 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":125:22)
#loc183 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":125:21)
#loc184 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":128:20)
#loc185 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":129:13)
#loc186 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":132:13)
#loc187 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":129:17)
#loc188 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":129:33)
#loc189 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":130:13)
#loc190 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":131:30)
#loc191 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":131:17)
#loc192 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":133:13)
#loc193 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":136:13)
#loc194 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":133:17)
#loc195 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":133:33)
#loc196 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":134:13)
#loc197 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":135:30)
#loc198 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":135:17)
#loc199 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":148:9)
#loc200 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":148:16)
#loc201 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":150:5)
#loc202 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":158:5)
#loc203 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":151:9)
#loc204 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":151:23)
#loc205 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":153:17)
#loc206 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":153:23)
#loc207 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":153:9)
#loc208 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":153:34)
#loc209 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":154:9)
#loc210 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":157:9)
#loc211 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":154:13)
#loc212 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":154:22)
#loc213 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":155:9)
#loc214 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":156:20)
#loc215 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":156:13)
#loc216 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":167:1)
#loc217 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":191:1)
#loc218 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":169:5)
#loc219 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":169:12)
#loc220 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":171:12)
#loc221 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":171:5)
#loc222 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":172:5)
#loc223 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":181:5)
#loc224 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":172:8)
#loc225 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":172:33)
#loc226 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":173:5)
#loc227 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":176:5)
#loc228 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":178:5)
#loc229 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":175:9)
#loc230 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":175:16)
#loc231 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":175:22)
#loc232 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":180:9)
#loc233 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":180:16)
#loc234 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":180:22)
#loc235 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":182:5)
#loc236 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":190:5)
#loc237 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":183:9)
#loc238 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":183:23)
#loc239 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":185:17)
#loc240 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":185:23)
#loc241 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":185:29)
#loc242 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":185:9)
#loc243 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":185:34)
#loc244 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":186:9)
#loc245 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":189:9)
#loc246 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":186:13)
#loc247 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":186:22)
#loc248 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":187:9)
#loc249 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":188:20)
#loc250 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":188:13)
#loc251 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":193:1)
#loc252 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":196:1)
#loc253 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_fopen_12.cpp":195:5)
#loc254 = loc(fused[#loc1, #loc2])
#loc255 = loc(fused[#loc3, #loc4])
#loc256 = loc(fused[#loc5, #loc6])
#loc257 = loc(fused[#loc7, #loc8])
#loc258 = loc(fused[#loc9, #loc10])
#loc259 = loc(fused[#loc11, #loc12])
#loc260 = loc(fused[#loc13, #loc14])
#loc261 = loc(fused[#loc15, #loc16])
#loc262 = loc(fused[#loc17, #loc18])
#loc263 = loc(fused[#loc19, #loc20])
#loc264 = loc(fused[#loc21, #loc22])
#loc265 = loc(fused[#loc23, #loc24])
#loc266 = loc(fused[#loc25, #loc26])
#loc267 = loc(fused[#loc28, #loc29])
#loc268 = loc(fused[#loc31, #loc32])
#loc269 = loc(fused[#loc33, #loc34])
#loc270 = loc(fused[#loc35, #loc36])
#loc271 = loc(fused[#loc38, #loc37])
#loc272 = loc(fused[#loc39, #loc40])
#loc273 = loc(fused[#loc41, #loc42])
#loc274 = loc(fused[#loc43, #loc44, #loc45, #loc40])
#loc275 = loc(fused[#loc46, #loc47])
#loc276 = loc(fused[#loc48, #loc49])
#loc277 = loc(fused[#loc50, #loc51])
#loc278 = loc(fused[#loc52, #loc53])
#loc279 = loc(fused[#loc54, #loc55])
#loc280 = loc(fused[#loc56, #loc57])
#loc281 = loc(fused[#loc58, #loc59])
#loc282 = loc(fused[#loc62, #loc63])
#loc283 = loc(fused[#loc64, #loc65])
#loc284 = loc(fused[#loc70, #loc71])
#loc285 = loc(fused[#loc72, #loc73])
#loc286 = loc(fused[#loc74, #loc75])
#loc287 = loc(fused[#loc76, #loc73])
#loc288 = loc(fused[#loc78, #loc79])
#loc289 = loc(fused[#loc81, #loc82])
#loc290 = loc(fused[#loc83, #loc84])
#loc291 = loc(fused[#loc87, #loc85])
#loc292 = loc(fused[#loc91, #loc88])
#loc293 = loc(fused[#loc95, #loc96])
#loc294 = loc(fused[#loc97, #loc98])
#loc295 = loc(fused[#loc100, #loc101])
#loc296 = loc(fused[#loc102, #loc103])
#loc297 = loc(fused[#loc104, #loc105])
#loc298 = loc(fused[#loc106, #loc98])
#loc299 = loc(fused[#loc108, #loc109])
#loc300 = loc(fused[#loc112, #loc113])
#loc301 = loc(fused[#loc114, #loc109])
#loc302 = loc(fused[#loc120, #loc121])
#loc303 = loc(fused[#loc122, #loc123])
#loc304 = loc(fused[#loc124, #loc125])
#loc305 = loc(fused[#loc126, #loc123])
#loc306 = loc(fused[#loc132, #loc133])
#loc307 = loc(fused[#loc134, #loc135])
#loc308 = loc(fused[#loc136, #loc137])
#loc309 = loc(fused[#loc136, #loc138])
#loc310 = loc(fused[#loc134, #loc139])
#loc311 = loc(fused[#loc142, #loc143])
#loc312 = loc(fused[#loc144, #loc145])
#loc313 = loc(fused[#loc146, #loc147])
#loc314 = loc(fused[#loc149, #loc150])
#loc315 = loc(fused[#loc151, #loc145])
#loc316 = loc(fused[#loc157, #loc158])
#loc317 = loc(fused[#loc156, #loc158])
#loc318 = loc(fused[#loc155, #loc158])
#loc319 = loc(fused[#loc154, #loc153])
#loc320 = loc(fused[#loc163, #loc164])
#loc321 = loc(fused[#loc165, #loc166])
#loc322 = loc(fused[#loc168, #loc166])
#loc323 = loc(fused[#loc171, #loc169])
#loc324 = loc(fused[#loc175, #loc176])
#loc325 = loc(fused[#loc177, #loc178])
#loc326 = loc(fused[#loc180, #loc178])
#loc327 = loc(fused[#loc183, #loc181])
#loc328 = loc(fused[#loc185, #loc186])
#loc329 = loc(fused[#loc187, #loc188])
#loc330 = loc(fused[#loc189, #loc186])
#loc331 = loc(fused[#loc192, #loc193])
#loc332 = loc(fused[#loc194, #loc195])
#loc333 = loc(fused[#loc196, #loc193])
#loc334 = loc(fused[#loc201, #loc202])
#loc335 = loc(fused[#loc203, #loc204])
#loc336 = loc(fused[#loc207, #loc208])
#loc337 = loc(fused[#loc209, #loc210])
#loc338 = loc(fused[#loc211, #loc212])
#loc339 = loc(fused[#loc213, #loc210])
#loc340 = loc(fused[#loc216, #loc217])
#loc341 = loc(fused[#loc218, #loc219])
#loc342 = loc(fused[#loc221, #loc220])
#loc343 = loc(fused[#loc222, #loc223])
#loc344 = loc(fused[#loc224, #loc225])
#loc345 = loc(fused[#loc226, #loc227, #loc228, #loc223])
#loc346 = loc(fused[#loc235, #loc236])
#loc347 = loc(fused[#loc237, #loc238])
#loc348 = loc(fused[#loc242, #loc243])
#loc349 = loc(fused[#loc244, #loc245])
#loc350 = loc(fused[#loc246, #loc247])
#loc351 = loc(fused[#loc248, #loc245])
#loc352 = loc(fused[#loc251, #loc252])
