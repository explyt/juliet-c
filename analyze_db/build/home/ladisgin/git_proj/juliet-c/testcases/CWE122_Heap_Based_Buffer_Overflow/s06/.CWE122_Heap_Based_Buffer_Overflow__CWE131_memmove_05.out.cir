!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":112:10)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":112:14)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":112:20)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":112:32)
#loc201 = loc(fused[#loc68, #loc69])
#loc202 = loc(fused[#loc70, #loc71])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc174)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc175)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc176)
  cir.func private @printIntLine(!s32i) loc(#loc177)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc178)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc180)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc181)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc174)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc19)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc22)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc22)
        %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc184)
        cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc185)
        cir.scope {
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
          %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc28)
          %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc187)
          cir.if %13 {
            %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc31)
            %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc32)
            cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
          } loc(#loc188)
        } loc(#loc186)
      } loc(#loc183)
    } loc(#loc182)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc190)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc190)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc190)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc37)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc38)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc38)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc39)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc39)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc191)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc192)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc193)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc45)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc46)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc44)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc47)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc48)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc49)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc48)
    } loc(#loc189)
    cir.return loc(#loc12)
  } loc(#loc179)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc195)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc196)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    cir.return loc(#loc51)
  } loc(#loc194)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc197)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc198)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc65)
  cir.func @main(%arg0: !s32i loc(fused[#loc68, #loc69]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc70, #loc71])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc201)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc202)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc67)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc72)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc73)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc74)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc74)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc75)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc62)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05_good : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05_good() : () -> () loc(#loc77)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc63)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc64)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc204)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05_bad() : () -> () loc(#loc81)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc65)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc84)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc205)
    cir.return %17 : !s32i loc(#loc205)
  } loc(#loc200)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc206)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc88)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc208)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc93)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc209)
    cir.scope {
      %2 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc206)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc97)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc97)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc88)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc88)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc101)
      } else {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc102)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc103)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc103)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc212)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc213)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc102)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc214)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc215)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc110)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc111)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc111)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc217)
          cir.if %15 {
            %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc113)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc114)
            %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc115)
            cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc113)
          } loc(#loc218)
        } loc(#loc216)
      } loc(#loc211)
    } loc(#loc210)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc220)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc220)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc220)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc120)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc120)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc121)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc121)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc122)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc122)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc221)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc222)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc223)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc127)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc128)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc129)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc127)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc130)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc131)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc132)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc132)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc131)
    } loc(#loc219)
    cir.return loc(#loc90)
  } loc(#loc207)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc225)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc137)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc226)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc174)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc141)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc141)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc143)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc144)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc144)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc229)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc230)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc143)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc231)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc232)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc151)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc152)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc152)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc234)
          cir.if %15 {
            %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc154)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc155)
            %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc156)
            cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc154)
          } loc(#loc235)
        } loc(#loc233)
      } loc(#loc228)
    } loc(#loc227)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc237)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc237)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc237)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc161)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc161)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc162)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc162)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc163)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc163)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc238)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc239)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc240)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc168)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc169)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc170)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc168)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc171)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc172)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc173)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc173)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc172)
    } loc(#loc236)
    cir.return loc(#loc134)
  } loc(#loc224)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":23:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":23:25)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":28:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":45:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":30:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":30:11)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":31:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":31:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":32:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":37:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":32:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":33:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":35:23)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":35:30)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":35:32)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":35:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":36:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":36:37)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":36:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":36:21)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":36:27)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":36:28)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":36:34)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":36:33)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":38:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":44:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":39:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":39:28)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":41:17)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":41:23)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":41:31)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":41:34)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":41:44)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":41:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":41:45)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":42:22)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":42:27)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":42:28)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":42:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":43:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":43:14)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":96:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":100:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":98:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":98:14)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":99:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":99:14)
#loc56 = loc("/usr/include/stdlib.h":575:1)
#loc57 = loc("/usr/include/stdlib.h":575:41)
#loc58 = loc("/usr/include/time.h":76:1)
#loc59 = loc("/usr/include/time.h":76:38)
#loc60 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc61 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":117:15)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":119:15)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":122:15)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":124:15)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":112:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":127:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":113:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":115:27)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":115:22)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":115:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":117:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":118:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":118:63)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":119:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":122:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":123:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":123:62)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":124:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":126:12)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":126:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":24:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":24:26)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":59:19)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":52:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":74:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":54:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":54:11)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":55:12)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":55:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":56:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":66:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":56:8)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":57:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":60:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":62:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":59:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":64:23)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":64:30)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":64:33)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":64:43)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":64:44)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":64:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":65:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":65:37)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":65:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":65:21)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":65:27)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":65:28)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":65:34)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":65:33)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":67:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":73:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":68:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":68:28)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":70:17)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":70:23)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":70:31)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":70:34)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":70:44)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":70:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":70:45)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":71:22)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":71:27)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":71:28)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":71:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":72:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":72:14)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":77:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":94:1)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":79:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":79:11)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":80:12)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":80:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":81:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":86:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":81:8)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":82:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":84:23)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":84:30)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":84:33)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":84:43)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":84:44)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":84:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":85:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":85:37)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":85:13)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":85:21)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":85:27)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":85:28)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":85:34)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":85:33)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":87:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":93:5)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":88:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":88:28)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":90:17)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":90:23)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":90:31)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":90:34)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":90:44)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":90:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":90:45)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":91:22)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":91:27)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":91:28)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":91:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":92:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c":92:14)
#loc174 = loc(fused[#loc1, #loc2])
#loc175 = loc(fused[#loc3, #loc4])
#loc176 = loc(fused[#loc5, #loc6])
#loc177 = loc(fused[#loc7, #loc8])
#loc178 = loc(fused[#loc9, #loc10])
#loc179 = loc(fused[#loc11, #loc12])
#loc180 = loc(fused[#loc13, #loc14])
#loc181 = loc(fused[#loc16, #loc15])
#loc182 = loc(fused[#loc17, #loc18])
#loc183 = loc(fused[#loc20, #loc18])
#loc184 = loc(fused[#loc21, #loc23])
#loc185 = loc(fused[#loc24, #loc23])
#loc186 = loc(fused[#loc25, #loc26])
#loc187 = loc(fused[#loc27, #loc28])
#loc188 = loc(fused[#loc29, #loc26])
#loc189 = loc(fused[#loc33, #loc34])
#loc190 = loc(fused[#loc35, #loc36])
#loc191 = loc(fused[#loc40, #loc41])
#loc192 = loc(fused[#loc39, #loc41])
#loc193 = loc(fused[#loc42, #loc43])
#loc194 = loc(fused[#loc50, #loc51])
#loc195 = loc(fused[#loc52, #loc53])
#loc196 = loc(fused[#loc54, #loc55])
#loc197 = loc(fused[#loc56, #loc57])
#loc198 = loc(fused[#loc58, #loc59])
#loc199 = loc(fused[#loc60, #loc61])
#loc200 = loc(fused[#loc66, #loc67])
#loc203 = loc(fused[#loc77, #loc78])
#loc204 = loc(fused[#loc81, #loc82])
#loc205 = loc(fused[#loc85, #loc84])
#loc206 = loc(fused[#loc86, #loc87])
#loc207 = loc(fused[#loc89, #loc90])
#loc208 = loc(fused[#loc91, #loc92])
#loc209 = loc(fused[#loc94, #loc93])
#loc210 = loc(fused[#loc95, #loc96])
#loc211 = loc(fused[#loc98, #loc99, #loc100, #loc96])
#loc212 = loc(fused[#loc104, #loc105])
#loc213 = loc(fused[#loc103, #loc105])
#loc214 = loc(fused[#loc102, #loc106])
#loc215 = loc(fused[#loc107, #loc106])
#loc216 = loc(fused[#loc108, #loc109])
#loc217 = loc(fused[#loc110, #loc111])
#loc218 = loc(fused[#loc112, #loc109])
#loc219 = loc(fused[#loc116, #loc117])
#loc220 = loc(fused[#loc118, #loc119])
#loc221 = loc(fused[#loc123, #loc124])
#loc222 = loc(fused[#loc122, #loc124])
#loc223 = loc(fused[#loc125, #loc126])
#loc224 = loc(fused[#loc133, #loc134])
#loc225 = loc(fused[#loc135, #loc136])
#loc226 = loc(fused[#loc138, #loc137])
#loc227 = loc(fused[#loc139, #loc140])
#loc228 = loc(fused[#loc142, #loc140])
#loc229 = loc(fused[#loc145, #loc146])
#loc230 = loc(fused[#loc144, #loc146])
#loc231 = loc(fused[#loc143, #loc147])
#loc232 = loc(fused[#loc148, #loc147])
#loc233 = loc(fused[#loc149, #loc150])
#loc234 = loc(fused[#loc151, #loc152])
#loc235 = loc(fused[#loc153, #loc150])
#loc236 = loc(fused[#loc157, #loc158])
#loc237 = loc(fused[#loc159, #loc160])
#loc238 = loc(fused[#loc164, #loc165])
#loc239 = loc(fused[#loc163, #loc165])
#loc240 = loc(fused[#loc166, #loc167])
