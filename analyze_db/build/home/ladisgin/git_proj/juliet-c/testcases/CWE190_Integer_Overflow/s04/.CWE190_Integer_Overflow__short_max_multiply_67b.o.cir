!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":27:62)
#loc6 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":27:120)
#loc23 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":43:66)
#loc24 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":43:124)
#loc43 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":55:66)
#loc44 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":55:124)
!ty__CWE190_Integer_Overflow__short_max_multiply_67_structType = !cir.struct<struct "_CWE190_Integer_Overflow__short_max_multiply_67_structType" {!s16i}>
#loc70 = loc(fused[#loc5, #loc6])
#loc77 = loc(fused[#loc23, #loc24])
#loc85 = loc(fused[#loc43, #loc44])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_multiply_67b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc68)
  cir.func @CWE190_Integer_Overflow__short_max_multiply_67b_badSink(%arg0: !ty__CWE190_Integer_Overflow__short_max_multiply_67_structType loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc71)
    %1 = cir.alloca !ty__CWE190_Integer_Overflow__short_max_multiply_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__short_max_multiply_67_structType>, ["myStruct", init] {alignment = 2 : i64} loc(#loc70)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc72)
    cir.store %arg0, %1 : !ty__CWE190_Integer_Overflow__short_max_multiply_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__short_max_multiply_67_structType> loc(#loc11)
    %3 = cir.get_member %1[0] {name = "structFirst"} : !cir.ptr<!ty__CWE190_Integer_Overflow__short_max_multiply_67_structType> -> !cir.ptr<!s16i> loc(#loc12)
    %4 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc10)
    cir.store %4, %2 : !s16i, !cir.ptr<!s16i> loc(#loc72)
    cir.br ^bb1 loc(#loc73)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc15)
    %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc15)
    %7 = cir.const #cir.int<0> : !s32i loc(#loc16)
    %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc74)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc75)
  ^bb2:  // pred: ^bb1
    %9 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc18)
    %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc18)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc18)
    %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc18)
    cir.store %13, %0 : !s16i, !cir.ptr<!s16i> loc(#loc71)
    %14 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc19)
    %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc19)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc20)
    cir.br ^bb3 loc(#loc14)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc4)
  } loc(#loc69)
  cir.func @CWE190_Integer_Overflow__short_max_multiply_67b_goodG2BSink(%arg0: !ty__CWE190_Integer_Overflow__short_max_multiply_67_structType loc(fused[#loc23, #loc24])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc78)
    %1 = cir.alloca !ty__CWE190_Integer_Overflow__short_max_multiply_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__short_max_multiply_67_structType>, ["myStruct", init] {alignment = 2 : i64} loc(#loc77)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc79)
    cir.store %arg0, %1 : !ty__CWE190_Integer_Overflow__short_max_multiply_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__short_max_multiply_67_structType> loc(#loc29)
    %3 = cir.get_member %1[0] {name = "structFirst"} : !cir.ptr<!ty__CWE190_Integer_Overflow__short_max_multiply_67_structType> -> !cir.ptr<!s16i> loc(#loc12)
    %4 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc28)
    cir.store %4, %2 : !s16i, !cir.ptr<!s16i> loc(#loc79)
    cir.br ^bb1 loc(#loc80)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc32)
    %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc32)
    %7 = cir.const #cir.int<0> : !s32i loc(#loc33)
    %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc81)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc82)
  ^bb2:  // pred: ^bb1
    %9 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc35)
    %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc35)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc26)
    %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc35)
    %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc35)
    cir.store %13, %0 : !s16i, !cir.ptr<!s16i> loc(#loc78)
    %14 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc36)
    %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc36)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc37)
    cir.br ^bb3 loc(#loc31)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc31)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc22)
  } loc(#loc76)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc40)
  cir.func @CWE190_Integer_Overflow__short_max_multiply_67b_goodB2GSink(%arg0: !ty__CWE190_Integer_Overflow__short_max_multiply_67_structType loc(fused[#loc43, #loc44])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc86)
    %1 = cir.alloca !ty__CWE190_Integer_Overflow__short_max_multiply_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__short_max_multiply_67_structType>, ["myStruct", init] {alignment = 2 : i64} loc(#loc85)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc87)
    cir.store %arg0, %1 : !ty__CWE190_Integer_Overflow__short_max_multiply_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__short_max_multiply_67_structType> loc(#loc49)
    %3 = cir.get_member %1[0] {name = "structFirst"} : !cir.ptr<!ty__CWE190_Integer_Overflow__short_max_multiply_67_structType> -> !cir.ptr<!s16i> loc(#loc12)
    %4 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc48)
    cir.store %4, %2 : !s16i, !cir.ptr<!s16i> loc(#loc87)
    cir.br ^bb1 loc(#loc88)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc52)
    %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc52)
    %7 = cir.const #cir.int<0> : !s32i loc(#loc53)
    %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc89)
    cir.brcond %8 ^bb2, ^bb8 loc(#loc90)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc91)
  ^bb3:  // pred: ^bb2
    %9 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc57)
    %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc57)
    %11 = cir.const #cir.int<32767> : !s32i loc(#loc58)
    %12 = cir.const #cir.int<2> : !s32i loc(#loc59)
    %13 = cir.binop(div, %11, %12) : !s32i loc(#loc92)
    %14 = cir.cmp(lt, %10, %13) : !s32i, !cir.bool loc(#loc93)
    cir.brcond %14 ^bb4, ^bb5 loc(#loc94)
  ^bb4:  // pred: ^bb3
    %15 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc64)
    %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc64)
    %17 = cir.const #cir.int<2> : !s32i loc(#loc46)
    %18 = cir.binop(mul, %16, %17) nsw : !s32i loc(#loc64)
    %19 = cir.cast(integral, %18 : !s32i), !s16i loc(#loc64)
    cir.store %19, %0 : !s16i, !cir.ptr<!s16i> loc(#loc86)
    %20 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc65)
    %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc65)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc66)
    cir.br ^bb6 loc(#loc62)
  ^bb5:  // pred: ^bb3
    %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc40)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    cir.br ^bb6 loc(#loc56)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc56)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc51)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc51)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc42)
  } loc(#loc84)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_multiply_67b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":27:1)
#loc4 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":36:1)
#loc7 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":33:9)
#loc8 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":33:31)
#loc9 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":29:5)
#loc10 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":29:27)
#loc11 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":28:1)
#loc12 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":22:11)
#loc13 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":30:5)
#loc14 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":35:5)
#loc15 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":30:8)
#loc16 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":30:15)
#loc17 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":31:5)
#loc18 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":33:24)
#loc19 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":34:22)
#loc20 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":34:9)
#loc21 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":43:1)
#loc22 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":52:1)
#loc25 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":49:9)
#loc26 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":49:31)
#loc27 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":45:5)
#loc28 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":45:27)
#loc29 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":44:1)
#loc30 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":46:5)
#loc31 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":51:5)
#loc32 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":46:8)
#loc33 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":46:15)
#loc34 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":47:5)
#loc35 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":49:24)
#loc36 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":50:22)
#loc37 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":50:9)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc40 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":68:23)
#loc41 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":55:1)
#loc42 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":71:1)
#loc45 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":63:13)
#loc46 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":63:35)
#loc47 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":57:5)
#loc48 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":57:27)
#loc49 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":56:1)
#loc50 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":58:5)
#loc51 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":70:5)
#loc52 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":58:8)
#loc53 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":58:15)
#loc54 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":59:5)
#loc55 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":61:9)
#loc56 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":69:9)
#loc57 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":61:13)
#loc58 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":61:21)
#loc59 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":61:30)
#loc60 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":61:31)
#loc61 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":62:9)
#loc62 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":65:9)
#loc63 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":67:9)
#loc64 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":63:28)
#loc65 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":64:26)
#loc66 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":64:13)
#loc67 = loc("CWE190_Integer_Overflow__short_max_multiply_67b.c":68:13)
#loc68 = loc(fused[#loc1, #loc2])
#loc69 = loc(fused[#loc3, #loc4])
#loc71 = loc(fused[#loc7, #loc8])
#loc72 = loc(fused[#loc9, #loc10])
#loc73 = loc(fused[#loc13, #loc14])
#loc74 = loc(fused[#loc15, #loc16])
#loc75 = loc(fused[#loc17, #loc14])
#loc76 = loc(fused[#loc21, #loc22])
#loc78 = loc(fused[#loc25, #loc26])
#loc79 = loc(fused[#loc27, #loc28])
#loc80 = loc(fused[#loc30, #loc31])
#loc81 = loc(fused[#loc32, #loc33])
#loc82 = loc(fused[#loc34, #loc31])
#loc83 = loc(fused[#loc38, #loc39])
#loc84 = loc(fused[#loc41, #loc42])
#loc86 = loc(fused[#loc45, #loc46])
#loc87 = loc(fused[#loc47, #loc48])
#loc88 = loc(fused[#loc50, #loc51])
#loc89 = loc(fused[#loc52, #loc53])
#loc90 = loc(fused[#loc54, #loc51])
#loc91 = loc(fused[#loc55, #loc56])
#loc92 = loc(fused[#loc58, #loc59])
#loc93 = loc(fused[#loc57, #loc60])
#loc94 = loc(fused[#loc61, #loc62, #loc63, #loc56])
