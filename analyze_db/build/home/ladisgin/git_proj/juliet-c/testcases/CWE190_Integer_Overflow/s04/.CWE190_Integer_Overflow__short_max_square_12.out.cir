!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc72 = loc("CWE190_Integer_Overflow__short_max_square_12.c":160:10)
#loc73 = loc("CWE190_Integer_Overflow__short_max_square_12.c":160:14)
#loc74 = loc("CWE190_Integer_Overflow__short_max_square_12.c":160:20)
#loc75 = loc("CWE190_Integer_Overflow__short_max_square_12.c":160:32)
#loc212 = loc(fused[#loc72, #loc73])
#loc213 = loc(fused[#loc74, #loc75])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc186)
  cir.func private @printIntLine(!s32i) loc(#loc187)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc188)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_square_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc190)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc13)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc13)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc191)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc193)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc193)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc17)
      cir.if %6 {
        %7 = cir.const #cir.int<32767> : !s32i loc(#loc22)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc22)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc195)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc24)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc24)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc196)
      } loc(#loc194)
    } loc(#loc192)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc198)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc198)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc28)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc28)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc201)
          %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc37)
          %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc37)
          %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc36)
          %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc36)
          %12 = cir.binop(mul, %9, %11) nsw : !s32i loc(#loc37)
          %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc37)
          cir.store %13, %7 : !s16i, !cir.ptr<!s16i> loc(#loc201)
          %14 = cir.load %7 : !cir.ptr<!s16i>, !s16i loc(#loc38)
          %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc38)
          cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc39)
        } loc(#loc200)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc42)
          %8 = cir.cast(integral, %7 : !s16i), !s64i loc(#loc42)
          %9 = cir.cast(integral, %8 : !s64i), !s32i loc(#loc42)
          %10 = cir.abs %9 poison : !s32i loc(#loc43)
          %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc43)
          %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc44)
          %13 = cir.const #cir.int<32767> : !s32i loc(#loc45)
          %14 = cir.cast(int_to_float, %13 : !s32i), !cir.double loc(#loc45)
          %15 = cir.call @sqrt(%14) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc44)
          %16 = cir.cast(float_to_int, %15 : !cir.double), !s64i loc(#loc44)
          %17 = cir.cmp(le, %11, %16) : !s64i, !cir.bool loc(#loc203)
          cir.if %17 {
            %18 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc205)
            %19 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc52)
            %20 = cir.cast(integral, %19 : !s16i), !s32i loc(#loc52)
            %21 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc51)
            %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc51)
            %23 = cir.binop(mul, %20, %22) nsw : !s32i loc(#loc52)
            %24 = cir.cast(integral, %23 : !s32i), !s16i loc(#loc52)
            cir.store %24, %18 : !s16i, !cir.ptr<!s16i> loc(#loc205)
            %25 = cir.load %18 : !cir.ptr<!s16i>, !s16i loc(#loc53)
            %26 = cir.cast(integral, %25 : !s16i), !s32i loc(#loc53)
            cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc54)
          } else {
            %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc8)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc8)
            cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc55)
          } loc(#loc204)
        } loc(#loc202)
      } loc(#loc199)
    } loc(#loc197)
    cir.return loc(#loc10)
  } loc(#loc189)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_square_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    cir.return loc(#loc57)
  } loc(#loc206)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc209)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc210)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc69)
  cir.func @main(%arg0: !s32i loc(fused[#loc72, #loc73]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc74, #loc75])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc212)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc213)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc71)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc76)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc76)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc77)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc78)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc78)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc79)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc66)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %8 = cir.get_global @CWE190_Integer_Overflow__short_max_square_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc214)
    cir.call @CWE190_Integer_Overflow__short_max_square_12_good() : () -> () loc(#loc81)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc67)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc68)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    %13 = cir.get_global @CWE190_Integer_Overflow__short_max_square_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc215)
    cir.call @CWE190_Integer_Overflow__short_max_square_12_bad() : () -> () loc(#loc85)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc69)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc88)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc216)
    cir.return %17 : !s32i loc(#loc216)
  } loc(#loc211)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc218)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc94)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc94)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc219)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc221)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc221)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc98)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc98)
      cir.if %6 {
        %7 = cir.const #cir.int<32767> : !s32i loc(#loc103)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc103)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc223)
      } else {
        %7 = cir.const #cir.int<32767> : !s32i loc(#loc105)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc105)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc224)
      } loc(#loc222)
    } loc(#loc220)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc226)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc226)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc109)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc109)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc116)
          %8 = cir.cast(integral, %7 : !s16i), !s64i loc(#loc116)
          %9 = cir.cast(integral, %8 : !s64i), !s32i loc(#loc116)
          %10 = cir.abs %9 poison : !s32i loc(#loc117)
          %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc117)
          %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc118)
          %13 = cir.const #cir.int<32767> : !s32i loc(#loc119)
          %14 = cir.cast(int_to_float, %13 : !s32i), !cir.double loc(#loc119)
          %15 = cir.call @sqrt(%14) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc118)
          %16 = cir.cast(float_to_int, %15 : !cir.double), !s64i loc(#loc118)
          %17 = cir.cmp(le, %11, %16) : !s64i, !cir.bool loc(#loc229)
          cir.if %17 {
            %18 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc231)
            %19 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc126)
            %20 = cir.cast(integral, %19 : !s16i), !s32i loc(#loc126)
            %21 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc125)
            %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc125)
            %23 = cir.binop(mul, %20, %22) nsw : !s32i loc(#loc126)
            %24 = cir.cast(integral, %23 : !s32i), !s16i loc(#loc126)
            cir.store %24, %18 : !s16i, !cir.ptr<!s16i> loc(#loc231)
            %25 = cir.load %18 : !cir.ptr<!s16i>, !s16i loc(#loc127)
            %26 = cir.cast(integral, %25 : !s16i), !s32i loc(#loc127)
            cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc128)
          } else {
            %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc129)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc129)
            cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc130)
          } loc(#loc230)
        } loc(#loc228)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc133)
          %8 = cir.cast(integral, %7 : !s16i), !s64i loc(#loc133)
          %9 = cir.cast(integral, %8 : !s64i), !s32i loc(#loc133)
          %10 = cir.abs %9 poison : !s32i loc(#loc134)
          %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc134)
          %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc135)
          %13 = cir.const #cir.int<32767> : !s32i loc(#loc136)
          %14 = cir.cast(int_to_float, %13 : !s32i), !cir.double loc(#loc136)
          %15 = cir.call @sqrt(%14) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc135)
          %16 = cir.cast(float_to_int, %15 : !cir.double), !s64i loc(#loc135)
          %17 = cir.cmp(le, %11, %16) : !s64i, !cir.bool loc(#loc233)
          cir.if %17 {
            %18 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc235)
            %19 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc143)
            %20 = cir.cast(integral, %19 : !s16i), !s32i loc(#loc143)
            %21 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc142)
            %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc142)
            %23 = cir.binop(mul, %20, %22) nsw : !s32i loc(#loc143)
            %24 = cir.cast(integral, %23 : !s32i), !s16i loc(#loc143)
            cir.store %24, %18 : !s16i, !cir.ptr<!s16i> loc(#loc235)
            %25 = cir.load %18 : !cir.ptr<!s16i>, !s16i loc(#loc144)
            %26 = cir.cast(integral, %25 : !s16i), !s32i loc(#loc144)
            cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc145)
          } else {
            %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc146)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc146)
            cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc147)
          } loc(#loc234)
        } loc(#loc232)
      } loc(#loc227)
    } loc(#loc225)
    cir.return loc(#loc91)
  } loc(#loc217)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc237)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc152)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc152)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc238)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc240)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc240)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc156)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc156)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc161)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc161)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc242)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc163)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc163)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc243)
      } loc(#loc241)
    } loc(#loc239)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc245)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc245)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc167)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc167)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc248)
          %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc176)
          %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc176)
          %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc175)
          %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc175)
          %12 = cir.binop(mul, %9, %11) nsw : !s32i loc(#loc176)
          %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc176)
          cir.store %13, %7 : !s16i, !cir.ptr<!s16i> loc(#loc248)
          %14 = cir.load %7 : !cir.ptr<!s16i>, !s16i loc(#loc177)
          %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc177)
          cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc178)
        } loc(#loc247)
      } else {
        cir.scope {
          %7 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc250)
          %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc183)
          %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc183)
          %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc182)
          %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc182)
          %12 = cir.binop(mul, %9, %11) nsw : !s32i loc(#loc183)
          %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc183)
          cir.store %13, %7 : !s16i, !cir.ptr<!s16i> loc(#loc250)
          %14 = cir.load %7 : !cir.ptr<!s16i>, !s16i loc(#loc184)
          %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc184)
          cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc185)
        } loc(#loc249)
      } loc(#loc246)
    } loc(#loc244)
    cir.return loc(#loc149)
  } loc(#loc236)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE190_Integer_Overflow__short_max_square_12.c":56:23)
#loc9 = loc("CWE190_Integer_Overflow__short_max_square_12.c":24:1)
#loc10 = loc("CWE190_Integer_Overflow__short_max_square_12.c":59:1)
#loc11 = loc("CWE190_Integer_Overflow__short_max_square_12.c":26:5)
#loc12 = loc("CWE190_Integer_Overflow__short_max_square_12.c":26:11)
#loc13 = loc("CWE190_Integer_Overflow__short_max_square_12.c":27:12)
#loc14 = loc("CWE190_Integer_Overflow__short_max_square_12.c":27:5)
#loc15 = loc("CWE190_Integer_Overflow__short_max_square_12.c":28:5)
#loc16 = loc("CWE190_Integer_Overflow__short_max_square_12.c":37:5)
#loc17 = loc("CWE190_Integer_Overflow__short_max_square_12.c":28:8)
#loc18 = loc("CWE190_Integer_Overflow__short_max_square_12.c":28:33)
#loc19 = loc("CWE190_Integer_Overflow__short_max_square_12.c":29:5)
#loc20 = loc("CWE190_Integer_Overflow__short_max_square_12.c":32:5)
#loc21 = loc("CWE190_Integer_Overflow__short_max_square_12.c":34:5)
#loc22 = loc("CWE190_Integer_Overflow__short_max_square_12.c":31:16)
#loc23 = loc("CWE190_Integer_Overflow__short_max_square_12.c":31:9)
#loc24 = loc("CWE190_Integer_Overflow__short_max_square_12.c":36:16)
#loc25 = loc("CWE190_Integer_Overflow__short_max_square_12.c":36:9)
#loc26 = loc("CWE190_Integer_Overflow__short_max_square_12.c":38:5)
#loc27 = loc("CWE190_Integer_Overflow__short_max_square_12.c":58:5)
#loc28 = loc("CWE190_Integer_Overflow__short_max_square_12.c":38:8)
#loc29 = loc("CWE190_Integer_Overflow__short_max_square_12.c":38:33)
#loc30 = loc("CWE190_Integer_Overflow__short_max_square_12.c":39:5)
#loc31 = loc("CWE190_Integer_Overflow__short_max_square_12.c":45:5)
#loc32 = loc("CWE190_Integer_Overflow__short_max_square_12.c":47:5)
#loc33 = loc("CWE190_Integer_Overflow__short_max_square_12.c":40:9)
#loc34 = loc("CWE190_Integer_Overflow__short_max_square_12.c":44:9)
#loc35 = loc("CWE190_Integer_Overflow__short_max_square_12.c":42:13)
#loc36 = loc("CWE190_Integer_Overflow__short_max_square_12.c":42:35)
#loc37 = loc("CWE190_Integer_Overflow__short_max_square_12.c":42:28)
#loc38 = loc("CWE190_Integer_Overflow__short_max_square_12.c":43:26)
#loc39 = loc("CWE190_Integer_Overflow__short_max_square_12.c":43:13)
#loc40 = loc("CWE190_Integer_Overflow__short_max_square_12.c":49:9)
#loc41 = loc("CWE190_Integer_Overflow__short_max_square_12.c":57:9)
#loc42 = loc("CWE190_Integer_Overflow__short_max_square_12.c":49:23)
#loc43 = loc("CWE190_Integer_Overflow__short_max_square_12.c":49:13)
#loc44 = loc("CWE190_Integer_Overflow__short_max_square_12.c":49:38)
#loc45 = loc("CWE190_Integer_Overflow__short_max_square_12.c":49:51)
#loc46 = loc("CWE190_Integer_Overflow__short_max_square_12.c":49:59)
#loc47 = loc("CWE190_Integer_Overflow__short_max_square_12.c":50:9)
#loc48 = loc("CWE190_Integer_Overflow__short_max_square_12.c":53:9)
#loc49 = loc("CWE190_Integer_Overflow__short_max_square_12.c":55:9)
#loc50 = loc("CWE190_Integer_Overflow__short_max_square_12.c":51:13)
#loc51 = loc("CWE190_Integer_Overflow__short_max_square_12.c":51:35)
#loc52 = loc("CWE190_Integer_Overflow__short_max_square_12.c":51:28)
#loc53 = loc("CWE190_Integer_Overflow__short_max_square_12.c":52:26)
#loc54 = loc("CWE190_Integer_Overflow__short_max_square_12.c":52:13)
#loc55 = loc("CWE190_Integer_Overflow__short_max_square_12.c":56:13)
#loc56 = loc("CWE190_Integer_Overflow__short_max_square_12.c":145:1)
#loc57 = loc("CWE190_Integer_Overflow__short_max_square_12.c":149:1)
#loc58 = loc("CWE190_Integer_Overflow__short_max_square_12.c":147:5)
#loc59 = loc("CWE190_Integer_Overflow__short_max_square_12.c":147:13)
#loc60 = loc("CWE190_Integer_Overflow__short_max_square_12.c":148:5)
#loc61 = loc("CWE190_Integer_Overflow__short_max_square_12.c":148:13)
#loc62 = loc("/usr/include/stdlib.h":575:1)
#loc63 = loc("/usr/include/stdlib.h":575:41)
#loc64 = loc("/usr/include/time.h":76:1)
#loc65 = loc("/usr/include/time.h":76:38)
#loc66 = loc("CWE190_Integer_Overflow__short_max_square_12.c":165:15)
#loc67 = loc("CWE190_Integer_Overflow__short_max_square_12.c":167:15)
#loc68 = loc("CWE190_Integer_Overflow__short_max_square_12.c":170:15)
#loc69 = loc("CWE190_Integer_Overflow__short_max_square_12.c":172:15)
#loc70 = loc("CWE190_Integer_Overflow__short_max_square_12.c":160:1)
#loc71 = loc("CWE190_Integer_Overflow__short_max_square_12.c":175:1)
#loc76 = loc("CWE190_Integer_Overflow__short_max_square_12.c":161:1)
#loc77 = loc("CWE190_Integer_Overflow__short_max_square_12.c":163:27)
#loc78 = loc("CWE190_Integer_Overflow__short_max_square_12.c":163:22)
#loc79 = loc("CWE190_Integer_Overflow__short_max_square_12.c":163:5)
#loc80 = loc("CWE190_Integer_Overflow__short_max_square_12.c":165:5)
#loc81 = loc("CWE190_Integer_Overflow__short_max_square_12.c":166:5)
#loc82 = loc("CWE190_Integer_Overflow__short_max_square_12.c":166:55)
#loc83 = loc("CWE190_Integer_Overflow__short_max_square_12.c":167:5)
#loc84 = loc("CWE190_Integer_Overflow__short_max_square_12.c":170:5)
#loc85 = loc("CWE190_Integer_Overflow__short_max_square_12.c":171:5)
#loc86 = loc("CWE190_Integer_Overflow__short_max_square_12.c":171:54)
#loc87 = loc("CWE190_Integer_Overflow__short_max_square_12.c":172:5)
#loc88 = loc("CWE190_Integer_Overflow__short_max_square_12.c":174:12)
#loc89 = loc("CWE190_Integer_Overflow__short_max_square_12.c":174:5)
#loc90 = loc("CWE190_Integer_Overflow__short_max_square_12.c":68:1)
#loc91 = loc("CWE190_Integer_Overflow__short_max_square_12.c":108:1)
#loc92 = loc("CWE190_Integer_Overflow__short_max_square_12.c":70:5)
#loc93 = loc("CWE190_Integer_Overflow__short_max_square_12.c":70:11)
#loc94 = loc("CWE190_Integer_Overflow__short_max_square_12.c":71:12)
#loc95 = loc("CWE190_Integer_Overflow__short_max_square_12.c":71:5)
#loc96 = loc("CWE190_Integer_Overflow__short_max_square_12.c":72:5)
#loc97 = loc("CWE190_Integer_Overflow__short_max_square_12.c":81:5)
#loc98 = loc("CWE190_Integer_Overflow__short_max_square_12.c":72:8)
#loc99 = loc("CWE190_Integer_Overflow__short_max_square_12.c":72:33)
#loc100 = loc("CWE190_Integer_Overflow__short_max_square_12.c":73:5)
#loc101 = loc("CWE190_Integer_Overflow__short_max_square_12.c":76:5)
#loc102 = loc("CWE190_Integer_Overflow__short_max_square_12.c":78:5)
#loc103 = loc("CWE190_Integer_Overflow__short_max_square_12.c":75:16)
#loc104 = loc("CWE190_Integer_Overflow__short_max_square_12.c":75:9)
#loc105 = loc("CWE190_Integer_Overflow__short_max_square_12.c":80:16)
#loc106 = loc("CWE190_Integer_Overflow__short_max_square_12.c":80:9)
#loc107 = loc("CWE190_Integer_Overflow__short_max_square_12.c":82:5)
#loc108 = loc("CWE190_Integer_Overflow__short_max_square_12.c":107:5)
#loc109 = loc("CWE190_Integer_Overflow__short_max_square_12.c":82:8)
#loc110 = loc("CWE190_Integer_Overflow__short_max_square_12.c":82:33)
#loc111 = loc("CWE190_Integer_Overflow__short_max_square_12.c":83:5)
#loc112 = loc("CWE190_Integer_Overflow__short_max_square_12.c":94:5)
#loc113 = loc("CWE190_Integer_Overflow__short_max_square_12.c":96:5)
#loc114 = loc("CWE190_Integer_Overflow__short_max_square_12.c":85:9)
#loc115 = loc("CWE190_Integer_Overflow__short_max_square_12.c":93:9)
#loc116 = loc("CWE190_Integer_Overflow__short_max_square_12.c":85:23)
#loc117 = loc("CWE190_Integer_Overflow__short_max_square_12.c":85:13)
#loc118 = loc("CWE190_Integer_Overflow__short_max_square_12.c":85:38)
#loc119 = loc("CWE190_Integer_Overflow__short_max_square_12.c":85:51)
#loc120 = loc("CWE190_Integer_Overflow__short_max_square_12.c":85:59)
#loc121 = loc("CWE190_Integer_Overflow__short_max_square_12.c":86:9)
#loc122 = loc("CWE190_Integer_Overflow__short_max_square_12.c":89:9)
#loc123 = loc("CWE190_Integer_Overflow__short_max_square_12.c":91:9)
#loc124 = loc("CWE190_Integer_Overflow__short_max_square_12.c":87:13)
#loc125 = loc("CWE190_Integer_Overflow__short_max_square_12.c":87:35)
#loc126 = loc("CWE190_Integer_Overflow__short_max_square_12.c":87:28)
#loc127 = loc("CWE190_Integer_Overflow__short_max_square_12.c":88:26)
#loc128 = loc("CWE190_Integer_Overflow__short_max_square_12.c":88:13)
#loc129 = loc("CWE190_Integer_Overflow__short_max_square_12.c":92:23)
#loc130 = loc("CWE190_Integer_Overflow__short_max_square_12.c":92:13)
#loc131 = loc("CWE190_Integer_Overflow__short_max_square_12.c":98:9)
#loc132 = loc("CWE190_Integer_Overflow__short_max_square_12.c":106:9)
#loc133 = loc("CWE190_Integer_Overflow__short_max_square_12.c":98:23)
#loc134 = loc("CWE190_Integer_Overflow__short_max_square_12.c":98:13)
#loc135 = loc("CWE190_Integer_Overflow__short_max_square_12.c":98:38)
#loc136 = loc("CWE190_Integer_Overflow__short_max_square_12.c":98:51)
#loc137 = loc("CWE190_Integer_Overflow__short_max_square_12.c":98:59)
#loc138 = loc("CWE190_Integer_Overflow__short_max_square_12.c":99:9)
#loc139 = loc("CWE190_Integer_Overflow__short_max_square_12.c":102:9)
#loc140 = loc("CWE190_Integer_Overflow__short_max_square_12.c":104:9)
#loc141 = loc("CWE190_Integer_Overflow__short_max_square_12.c":100:13)
#loc142 = loc("CWE190_Integer_Overflow__short_max_square_12.c":100:35)
#loc143 = loc("CWE190_Integer_Overflow__short_max_square_12.c":100:28)
#loc144 = loc("CWE190_Integer_Overflow__short_max_square_12.c":101:26)
#loc145 = loc("CWE190_Integer_Overflow__short_max_square_12.c":101:13)
#loc146 = loc("CWE190_Integer_Overflow__short_max_square_12.c":105:23)
#loc147 = loc("CWE190_Integer_Overflow__short_max_square_12.c":105:13)
#loc148 = loc("CWE190_Integer_Overflow__short_max_square_12.c":113:1)
#loc149 = loc("CWE190_Integer_Overflow__short_max_square_12.c":143:1)
#loc150 = loc("CWE190_Integer_Overflow__short_max_square_12.c":115:5)
#loc151 = loc("CWE190_Integer_Overflow__short_max_square_12.c":115:11)
#loc152 = loc("CWE190_Integer_Overflow__short_max_square_12.c":116:12)
#loc153 = loc("CWE190_Integer_Overflow__short_max_square_12.c":116:5)
#loc154 = loc("CWE190_Integer_Overflow__short_max_square_12.c":117:5)
#loc155 = loc("CWE190_Integer_Overflow__short_max_square_12.c":126:5)
#loc156 = loc("CWE190_Integer_Overflow__short_max_square_12.c":117:8)
#loc157 = loc("CWE190_Integer_Overflow__short_max_square_12.c":117:33)
#loc158 = loc("CWE190_Integer_Overflow__short_max_square_12.c":118:5)
#loc159 = loc("CWE190_Integer_Overflow__short_max_square_12.c":121:5)
#loc160 = loc("CWE190_Integer_Overflow__short_max_square_12.c":123:5)
#loc161 = loc("CWE190_Integer_Overflow__short_max_square_12.c":120:16)
#loc162 = loc("CWE190_Integer_Overflow__short_max_square_12.c":120:9)
#loc163 = loc("CWE190_Integer_Overflow__short_max_square_12.c":125:16)
#loc164 = loc("CWE190_Integer_Overflow__short_max_square_12.c":125:9)
#loc165 = loc("CWE190_Integer_Overflow__short_max_square_12.c":127:5)
#loc166 = loc("CWE190_Integer_Overflow__short_max_square_12.c":142:5)
#loc167 = loc("CWE190_Integer_Overflow__short_max_square_12.c":127:8)
#loc168 = loc("CWE190_Integer_Overflow__short_max_square_12.c":127:33)
#loc169 = loc("CWE190_Integer_Overflow__short_max_square_12.c":128:5)
#loc170 = loc("CWE190_Integer_Overflow__short_max_square_12.c":134:5)
#loc171 = loc("CWE190_Integer_Overflow__short_max_square_12.c":136:5)
#loc172 = loc("CWE190_Integer_Overflow__short_max_square_12.c":129:9)
#loc173 = loc("CWE190_Integer_Overflow__short_max_square_12.c":133:9)
#loc174 = loc("CWE190_Integer_Overflow__short_max_square_12.c":131:13)
#loc175 = loc("CWE190_Integer_Overflow__short_max_square_12.c":131:35)
#loc176 = loc("CWE190_Integer_Overflow__short_max_square_12.c":131:28)
#loc177 = loc("CWE190_Integer_Overflow__short_max_square_12.c":132:26)
#loc178 = loc("CWE190_Integer_Overflow__short_max_square_12.c":132:13)
#loc179 = loc("CWE190_Integer_Overflow__short_max_square_12.c":137:9)
#loc180 = loc("CWE190_Integer_Overflow__short_max_square_12.c":141:9)
#loc181 = loc("CWE190_Integer_Overflow__short_max_square_12.c":139:13)
#loc182 = loc("CWE190_Integer_Overflow__short_max_square_12.c":139:35)
#loc183 = loc("CWE190_Integer_Overflow__short_max_square_12.c":139:28)
#loc184 = loc("CWE190_Integer_Overflow__short_max_square_12.c":140:26)
#loc185 = loc("CWE190_Integer_Overflow__short_max_square_12.c":140:13)
#loc186 = loc(fused[#loc1, #loc2])
#loc187 = loc(fused[#loc3, #loc4])
#loc188 = loc(fused[#loc6, #loc7])
#loc189 = loc(fused[#loc9, #loc10])
#loc190 = loc(fused[#loc11, #loc12])
#loc191 = loc(fused[#loc14, #loc13])
#loc192 = loc(fused[#loc15, #loc16])
#loc193 = loc(fused[#loc17, #loc18])
#loc194 = loc(fused[#loc19, #loc20, #loc21, #loc16])
#loc195 = loc(fused[#loc23, #loc22])
#loc196 = loc(fused[#loc25, #loc24])
#loc197 = loc(fused[#loc26, #loc27])
#loc198 = loc(fused[#loc28, #loc29])
#loc199 = loc(fused[#loc30, #loc31, #loc32, #loc27])
#loc200 = loc(fused[#loc33, #loc34])
#loc201 = loc(fused[#loc35, #loc36])
#loc202 = loc(fused[#loc40, #loc41])
#loc203 = loc(fused[#loc43, #loc46])
#loc204 = loc(fused[#loc47, #loc48, #loc49, #loc41])
#loc205 = loc(fused[#loc50, #loc51])
#loc206 = loc(fused[#loc56, #loc57])
#loc207 = loc(fused[#loc58, #loc59])
#loc208 = loc(fused[#loc60, #loc61])
#loc209 = loc(fused[#loc62, #loc63])
#loc210 = loc(fused[#loc64, #loc65])
#loc211 = loc(fused[#loc70, #loc71])
#loc214 = loc(fused[#loc81, #loc82])
#loc215 = loc(fused[#loc85, #loc86])
#loc216 = loc(fused[#loc89, #loc88])
#loc217 = loc(fused[#loc90, #loc91])
#loc218 = loc(fused[#loc92, #loc93])
#loc219 = loc(fused[#loc95, #loc94])
#loc220 = loc(fused[#loc96, #loc97])
#loc221 = loc(fused[#loc98, #loc99])
#loc222 = loc(fused[#loc100, #loc101, #loc102, #loc97])
#loc223 = loc(fused[#loc104, #loc103])
#loc224 = loc(fused[#loc106, #loc105])
#loc225 = loc(fused[#loc107, #loc108])
#loc226 = loc(fused[#loc109, #loc110])
#loc227 = loc(fused[#loc111, #loc112, #loc113, #loc108])
#loc228 = loc(fused[#loc114, #loc115])
#loc229 = loc(fused[#loc117, #loc120])
#loc230 = loc(fused[#loc121, #loc122, #loc123, #loc115])
#loc231 = loc(fused[#loc124, #loc125])
#loc232 = loc(fused[#loc131, #loc132])
#loc233 = loc(fused[#loc134, #loc137])
#loc234 = loc(fused[#loc138, #loc139, #loc140, #loc132])
#loc235 = loc(fused[#loc141, #loc142])
#loc236 = loc(fused[#loc148, #loc149])
#loc237 = loc(fused[#loc150, #loc151])
#loc238 = loc(fused[#loc153, #loc152])
#loc239 = loc(fused[#loc154, #loc155])
#loc240 = loc(fused[#loc156, #loc157])
#loc241 = loc(fused[#loc158, #loc159, #loc160, #loc155])
#loc242 = loc(fused[#loc162, #loc161])
#loc243 = loc(fused[#loc164, #loc163])
#loc244 = loc(fused[#loc165, #loc166])
#loc245 = loc(fused[#loc167, #loc168])
#loc246 = loc(fused[#loc169, #loc170, #loc171, #loc166])
#loc247 = loc(fused[#loc172, #loc173])
#loc248 = loc(fused[#loc174, #loc175])
#loc249 = loc(fused[#loc179, #loc180])
#loc250 = loc(fused[#loc181, #loc182])
