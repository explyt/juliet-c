!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc64 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":221:10)
#loc65 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":221:14)
#loc66 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":221:20)
#loc67 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":221:32)
#loc265 = loc(fused[#loc64, #loc65])
#loc266 = loc(fused[#loc66, #loc67])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_fscanf_multiply_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc244)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc245)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%hd\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc246)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc8)
  cir.func private @printIntLine(!s32i) loc(#loc247)
  cir.func no_proto @CWE191_Integer_Underflow__short_fscanf_multiply_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc249)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc250)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc17)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc17)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc251)
    cir.br ^bb1 loc(#loc252)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<6> : !s32i loc(#loc21)
    cir.br ^bb2 loc(#loc19)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc19)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc22)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc23)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc245)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc24)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc5)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc5)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc23)
    cir.br ^bb6 loc(#loc25)
  ^bb5:  // pred: ^bb2
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc8)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc8)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc26)
    cir.br ^bb6 loc(#loc27)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc20)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc253)
  ^bb8:  // pred: ^bb7
    %13 = cir.const #cir.int<7> : !s32i loc(#loc30)
    cir.br ^bb9 loc(#loc28)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %13 : !s32i, ^bb16 [
      7: ^bb11
    ] loc(#loc28)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc31)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc254)
  ^bb12:  // pred: ^bb11
    %14 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc34)
    %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc34)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc35)
    %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc255)
    cir.brcond %17 ^bb13, ^bb14 loc(#loc256)
  ^bb13:  // pred: ^bb12
    %18 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc37)
    %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc37)
    %20 = cir.const #cir.int<2> : !s32i loc(#loc14)
    %21 = cir.binop(mul, %19, %20) nsw : !s32i loc(#loc37)
    %22 = cir.cast(integral, %21 : !s32i), !s16i loc(#loc37)
    cir.store %22, %0 : !s16i, !cir.ptr<!s16i> loc(#loc249)
    %23 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc38)
    %24 = cir.cast(integral, %23 : !s16i), !s32i loc(#loc38)
    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc39)
    cir.br ^bb14 loc(#loc33)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc33)
  ^bb15:  // pred: ^bb14
    cir.br ^bb17 loc(#loc40)
  ^bb16:  // pred: ^bb9
    %25 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc41)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc42)
    cir.br ^bb17 loc(#loc43)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc29)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc12)
  } loc(#loc248)
  cir.func no_proto @CWE191_Integer_Underflow__short_fscanf_multiply_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc258)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc259)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc260)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc261)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    cir.return loc(#loc45)
  } loc(#loc257)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc262)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc263)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc61)
  cir.func @main(%arg0: !s32i loc(fused[#loc64, #loc65]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc66, #loc67])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc265)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc266)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc63)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc68)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc69)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc70)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc70)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc71)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc58)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %8 = cir.get_global @CWE191_Integer_Underflow__short_fscanf_multiply_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc267)
    cir.call @CWE191_Integer_Underflow__short_fscanf_multiply_15_good() : () -> () loc(#loc73)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc59)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc60)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %13 = cir.get_global @CWE191_Integer_Underflow__short_fscanf_multiply_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc268)
    cir.call @CWE191_Integer_Underflow__short_fscanf_multiply_15_bad() : () -> () loc(#loc77)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc61)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc80)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc269)
    cir.return %17 : !s32i loc(#loc269)
  } loc(#loc264)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc82)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc271)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc272)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc89)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc89)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc273)
    cir.br ^bb1 loc(#loc274)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<6> : !s32i loc(#loc93)
    cir.br ^bb2 loc(#loc91)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc91)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc94)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc95)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc245)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc96)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc97)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc97)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc95)
    cir.br ^bb6 loc(#loc98)
  ^bb5:  // pred: ^bb2
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc99)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    cir.br ^bb6 loc(#loc101)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc92)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc275)
  ^bb8:  // pred: ^bb7
    %13 = cir.const #cir.int<8> : !s32i loc(#loc104)
    cir.br ^bb9 loc(#loc102)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %13 : !s32i, ^bb12 [
      7: ^bb11
    ] loc(#loc102)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc105)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc106)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc106)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    cir.br ^bb22 loc(#loc108)
  ^bb12:  // pred: ^bb9
    cir.br ^bb13 loc(#loc276)
  ^bb13:  // pred: ^bb12
    %16 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc111)
    %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc111)
    %18 = cir.const #cir.int<0> : !s32i loc(#loc112)
    %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc277)
    cir.brcond %19 ^bb14, ^bb20 loc(#loc278)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc279)
  ^bb15:  // pred: ^bb14
    %20 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc116)
    %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc116)
    %22 = cir.const #cir.int<32767> : !s32i loc(#loc117)
    %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc117)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc117)
    %26 = cir.const #cir.int<2> : !s32i loc(#loc118)
    %27 = cir.binop(div, %25, %26) : !s32i loc(#loc280)
    %28 = cir.cmp(gt, %21, %27) : !s32i, !cir.bool loc(#loc281)
    cir.brcond %28 ^bb16, ^bb17 loc(#loc282)
  ^bb16:  // pred: ^bb15
    %29 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc123)
    %30 = cir.cast(integral, %29 : !s16i), !s32i loc(#loc123)
    %31 = cir.const #cir.int<2> : !s32i loc(#loc86)
    %32 = cir.binop(mul, %30, %31) nsw : !s32i loc(#loc123)
    %33 = cir.cast(integral, %32 : !s32i), !s16i loc(#loc123)
    cir.store %33, %0 : !s16i, !cir.ptr<!s16i> loc(#loc271)
    %34 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc124)
    %35 = cir.cast(integral, %34 : !s16i), !s32i loc(#loc124)
    cir.call @printIntLine(%35) : (!s32i) -> () loc(#loc125)
    cir.br ^bb18 loc(#loc121)
  ^bb17:  // pred: ^bb15
    %36 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc82)
    %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc126)
    cir.br ^bb18 loc(#loc115)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc115)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc110)
  ^bb20:  // 2 preds: ^bb13, ^bb19
    cir.br ^bb21 loc(#loc110)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc127)
  ^bb22:  // 2 preds: ^bb11, ^bb21
    cir.br ^bb23 loc(#loc103)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc84)
  } loc(#loc270)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc284)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc285)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc134)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc134)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc286)
    cir.br ^bb1 loc(#loc287)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<6> : !s32i loc(#loc138)
    cir.br ^bb2 loc(#loc136)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc136)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc139)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc140)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc245)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc141)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc142)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc142)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc140)
    cir.br ^bb6 loc(#loc143)
  ^bb5:  // pred: ^bb2
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc144)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc144)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc145)
    cir.br ^bb6 loc(#loc146)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc137)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc288)
  ^bb8:  // pred: ^bb7
    %13 = cir.const #cir.int<7> : !s32i loc(#loc149)
    cir.br ^bb9 loc(#loc147)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %13 : !s32i, ^bb21 [
      7: ^bb11
    ] loc(#loc147)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc150)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc289)
  ^bb12:  // pred: ^bb11
    %14 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc153)
    %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc153)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc154)
    %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc290)
    cir.brcond %17 ^bb13, ^bb19 loc(#loc291)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc292)
  ^bb14:  // pred: ^bb13
    %18 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc158)
    %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc158)
    %20 = cir.const #cir.int<32767> : !s32i loc(#loc159)
    %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc159)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc159)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc159)
    %24 = cir.const #cir.int<2> : !s32i loc(#loc160)
    %25 = cir.binop(div, %23, %24) : !s32i loc(#loc293)
    %26 = cir.cmp(gt, %19, %25) : !s32i, !cir.bool loc(#loc294)
    cir.brcond %26 ^bb15, ^bb16 loc(#loc295)
  ^bb15:  // pred: ^bb14
    %27 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc165)
    %28 = cir.cast(integral, %27 : !s16i), !s32i loc(#loc165)
    %29 = cir.const #cir.int<2> : !s32i loc(#loc131)
    %30 = cir.binop(mul, %28, %29) nsw : !s32i loc(#loc165)
    %31 = cir.cast(integral, %30 : !s32i), !s16i loc(#loc165)
    cir.store %31, %0 : !s16i, !cir.ptr<!s16i> loc(#loc284)
    %32 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc166)
    %33 = cir.cast(integral, %32 : !s16i), !s32i loc(#loc166)
    cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc167)
    cir.br ^bb17 loc(#loc163)
  ^bb16:  // pred: ^bb14
    %34 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc168)
    %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc168)
    cir.call @printLine(%35) : (!cir.ptr<!s8i>) -> () loc(#loc169)
    cir.br ^bb17 loc(#loc157)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc157)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc152)
  ^bb19:  // 2 preds: ^bb12, ^bb18
    cir.br ^bb20 loc(#loc152)
  ^bb20:  // pred: ^bb19
    cir.br ^bb22 loc(#loc170)
  ^bb21:  // pred: ^bb9
    %36 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc171)
    %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc171)
    cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc172)
    cir.br ^bb22 loc(#loc173)
  ^bb22:  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc148)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc129)
  } loc(#loc283)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc297)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc298)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc180)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc180)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc299)
    cir.br ^bb1 loc(#loc300)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<5> : !s32i loc(#loc184)
    cir.br ^bb2 loc(#loc182)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc182)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc185)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc186)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc186)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc187)
    cir.br ^bb6 loc(#loc188)
  ^bb5:  // pred: ^bb2
    %7 = cir.const #cir.int<2> : !s32i loc(#loc189)
    %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc190)
    %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc190)
    cir.store %9, %1 : !s16i, !cir.ptr<!s16i> loc(#loc301)
    cir.br ^bb6 loc(#loc192)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc183)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc302)
  ^bb8:  // pred: ^bb7
    %10 = cir.const #cir.int<7> : !s32i loc(#loc195)
    cir.br ^bb9 loc(#loc193)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %10 : !s32i, ^bb16 [
      7: ^bb11
    ] loc(#loc193)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc196)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc303)
  ^bb12:  // pred: ^bb11
    %11 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc199)
    %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc199)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc200)
    %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc304)
    cir.brcond %14 ^bb13, ^bb14 loc(#loc305)
  ^bb13:  // pred: ^bb12
    %15 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc202)
    %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc202)
    %17 = cir.const #cir.int<2> : !s32i loc(#loc177)
    %18 = cir.binop(mul, %16, %17) nsw : !s32i loc(#loc202)
    %19 = cir.cast(integral, %18 : !s32i), !s16i loc(#loc202)
    cir.store %19, %0 : !s16i, !cir.ptr<!s16i> loc(#loc297)
    %20 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc203)
    %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc203)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc204)
    cir.br ^bb14 loc(#loc198)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc198)
  ^bb15:  // pred: ^bb14
    cir.br ^bb17 loc(#loc205)
  ^bb16:  // pred: ^bb9
    %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc206)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc206)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc207)
    cir.br ^bb17 loc(#loc208)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc194)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc175)
  } loc(#loc296)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc307)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc308)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc215)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc215)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc309)
    cir.br ^bb1 loc(#loc310)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<6> : !s32i loc(#loc219)
    cir.br ^bb2 loc(#loc217)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc217)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc220)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.const #cir.int<2> : !s32i loc(#loc221)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc222)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc222)
    cir.store %7, %1 : !s16i, !cir.ptr<!s16i> loc(#loc311)
    cir.br ^bb6 loc(#loc224)
  ^bb5:  // pred: ^bb2
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc225)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc225)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc226)
    cir.br ^bb6 loc(#loc227)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc218)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc312)
  ^bb8:  // pred: ^bb7
    %10 = cir.const #cir.int<7> : !s32i loc(#loc230)
    cir.br ^bb9 loc(#loc228)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %10 : !s32i, ^bb16 [
      7: ^bb11
    ] loc(#loc228)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc231)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc313)
  ^bb12:  // pred: ^bb11
    %11 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc234)
    %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc234)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc235)
    %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc314)
    cir.brcond %14 ^bb13, ^bb14 loc(#loc315)
  ^bb13:  // pred: ^bb12
    %15 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc237)
    %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc237)
    %17 = cir.const #cir.int<2> : !s32i loc(#loc212)
    %18 = cir.binop(mul, %16, %17) nsw : !s32i loc(#loc237)
    %19 = cir.cast(integral, %18 : !s32i), !s16i loc(#loc237)
    cir.store %19, %0 : !s16i, !cir.ptr<!s16i> loc(#loc307)
    %20 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc238)
    %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc238)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc239)
    cir.br ^bb14 loc(#loc233)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc233)
  ^bb15:  // pred: ^bb14
    cir.br ^bb17 loc(#loc240)
  ^bb16:  // pred: ^bb9
    %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc241)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc241)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc242)
    cir.br ^bb17 loc(#loc243)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc229)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc210)
  } loc(#loc306)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_fscanf_multiply_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":30:24)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":34:19)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc11 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":22:1)
#loc12 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":52:1)
#loc13 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":43:13)
#loc14 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":43:35)
#loc15 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":24:5)
#loc16 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":24:11)
#loc17 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":25:12)
#loc18 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":25:5)
#loc19 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":26:5)
#loc20 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":36:5)
#loc21 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":26:12)
#loc22 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":28:5)
#loc23 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":30:9)
#loc24 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":30:17)
#loc25 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":31:9)
#loc26 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":34:9)
#loc27 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":35:9)
#loc28 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":37:5)
#loc29 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":51:5)
#loc30 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":37:12)
#loc31 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":39:5)
#loc32 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":40:9)
#loc33 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":45:9)
#loc34 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":40:12)
#loc35 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":40:19)
#loc36 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":41:9)
#loc37 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":43:28)
#loc38 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":44:26)
#loc39 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":44:13)
#loc40 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":46:9)
#loc41 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":49:19)
#loc42 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":49:9)
#loc43 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":50:9)
#loc44 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":204:1)
#loc45 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":210:1)
#loc46 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":206:5)
#loc47 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":206:14)
#loc48 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":207:5)
#loc49 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":207:14)
#loc50 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":208:5)
#loc51 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":208:14)
#loc52 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":209:5)
#loc53 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":209:14)
#loc54 = loc("/usr/include/stdlib.h":575:1)
#loc55 = loc("/usr/include/stdlib.h":575:41)
#loc56 = loc("/usr/include/time.h":76:1)
#loc57 = loc("/usr/include/time.h":76:38)
#loc58 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":226:15)
#loc59 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":228:15)
#loc60 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":231:15)
#loc61 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":233:15)
#loc62 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":221:1)
#loc63 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":236:1)
#loc68 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":222:1)
#loc69 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":224:27)
#loc70 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":224:22)
#loc71 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":224:5)
#loc72 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":226:5)
#loc73 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":227:5)
#loc74 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":227:61)
#loc75 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":228:5)
#loc76 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":231:5)
#loc77 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":232:5)
#loc78 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":232:60)
#loc79 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":233:5)
#loc80 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":235:12)
#loc81 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":235:5)
#loc82 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":91:27)
#loc83 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":59:1)
#loc84 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":96:1)
#loc85 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":86:17)
#loc86 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":86:39)
#loc87 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":61:5)
#loc88 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":61:11)
#loc89 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":62:12)
#loc90 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":62:5)
#loc91 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":63:5)
#loc92 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":73:5)
#loc93 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":63:12)
#loc94 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":65:5)
#loc95 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":67:9)
#loc96 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":67:17)
#loc97 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":67:24)
#loc98 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":68:9)
#loc99 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":71:19)
#loc100 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":71:9)
#loc101 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":72:9)
#loc102 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":74:5)
#loc103 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":95:5)
#loc104 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":74:12)
#loc105 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":76:5)
#loc106 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":78:19)
#loc107 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":78:9)
#loc108 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":79:9)
#loc109 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":81:9)
#loc110 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":93:9)
#loc111 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":81:12)
#loc112 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":81:19)
#loc113 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":82:9)
#loc114 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":84:13)
#loc115 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":92:13)
#loc116 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":84:17)
#loc117 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":84:25)
#loc118 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":84:34)
#loc119 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":84:35)
#loc120 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":85:13)
#loc121 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":88:13)
#loc122 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":90:13)
#loc123 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":86:32)
#loc124 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":87:30)
#loc125 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":87:17)
#loc126 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":91:17)
#loc127 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":94:9)
#loc128 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":99:1)
#loc129 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":136:1)
#loc130 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":122:17)
#loc131 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":122:39)
#loc132 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":101:5)
#loc133 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":101:11)
#loc134 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":102:12)
#loc135 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":102:5)
#loc136 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":103:5)
#loc137 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":113:5)
#loc138 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":103:12)
#loc139 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":105:5)
#loc140 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":107:9)
#loc141 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":107:17)
#loc142 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":107:24)
#loc143 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":108:9)
#loc144 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":111:19)
#loc145 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":111:9)
#loc146 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":112:9)
#loc147 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":114:5)
#loc148 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":135:5)
#loc149 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":114:12)
#loc150 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":116:5)
#loc151 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":117:9)
#loc152 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":129:9)
#loc153 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":117:12)
#loc154 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":117:19)
#loc155 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":118:9)
#loc156 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":120:13)
#loc157 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":128:13)
#loc158 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":120:17)
#loc159 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":120:25)
#loc160 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":120:34)
#loc161 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":120:35)
#loc162 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":121:13)
#loc163 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":124:13)
#loc164 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":126:13)
#loc165 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":122:32)
#loc166 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":123:30)
#loc167 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":123:17)
#loc168 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":127:27)
#loc169 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":127:17)
#loc170 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":130:9)
#loc171 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":133:19)
#loc172 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":133:9)
#loc173 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":134:9)
#loc174 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":139:1)
#loc175 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":169:1)
#loc176 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":160:13)
#loc177 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":160:35)
#loc178 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":141:5)
#loc179 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":141:11)
#loc180 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":142:12)
#loc181 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":142:5)
#loc182 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":143:5)
#loc183 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":153:5)
#loc184 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":143:12)
#loc185 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":145:5)
#loc186 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":147:19)
#loc187 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":147:9)
#loc188 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":148:9)
#loc189 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":151:17)
#loc190 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":151:16)
#loc191 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":151:9)
#loc192 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":152:9)
#loc193 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":154:5)
#loc194 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":168:5)
#loc195 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":154:12)
#loc196 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":156:5)
#loc197 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":157:9)
#loc198 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":162:9)
#loc199 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":157:12)
#loc200 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":157:19)
#loc201 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":158:9)
#loc202 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":160:28)
#loc203 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":161:26)
#loc204 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":161:13)
#loc205 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":163:9)
#loc206 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":166:19)
#loc207 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":166:9)
#loc208 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":167:9)
#loc209 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":172:1)
#loc210 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":202:1)
#loc211 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":193:13)
#loc212 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":193:35)
#loc213 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":174:5)
#loc214 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":174:11)
#loc215 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":175:12)
#loc216 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":175:5)
#loc217 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":176:5)
#loc218 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":186:5)
#loc219 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":176:12)
#loc220 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":178:5)
#loc221 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":180:17)
#loc222 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":180:16)
#loc223 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":180:9)
#loc224 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":181:9)
#loc225 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":184:19)
#loc226 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":184:9)
#loc227 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":185:9)
#loc228 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":187:5)
#loc229 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":201:5)
#loc230 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":187:12)
#loc231 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":189:5)
#loc232 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":190:9)
#loc233 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":195:9)
#loc234 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":190:12)
#loc235 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":190:19)
#loc236 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":191:9)
#loc237 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":193:28)
#loc238 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":194:26)
#loc239 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":194:13)
#loc240 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":196:9)
#loc241 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":199:19)
#loc242 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":199:9)
#loc243 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":200:9)
#loc244 = loc(fused[#loc1, #loc2])
#loc245 = loc(fused[#loc3, #loc4])
#loc246 = loc(fused[#loc6, #loc7])
#loc247 = loc(fused[#loc9, #loc10])
#loc248 = loc(fused[#loc11, #loc12])
#loc249 = loc(fused[#loc13, #loc14])
#loc250 = loc(fused[#loc15, #loc16])
#loc251 = loc(fused[#loc18, #loc17])
#loc252 = loc(fused[#loc19, #loc20])
#loc253 = loc(fused[#loc28, #loc29])
#loc254 = loc(fused[#loc32, #loc33])
#loc255 = loc(fused[#loc34, #loc35])
#loc256 = loc(fused[#loc36, #loc33])
#loc257 = loc(fused[#loc44, #loc45])
#loc258 = loc(fused[#loc46, #loc47])
#loc259 = loc(fused[#loc48, #loc49])
#loc260 = loc(fused[#loc50, #loc51])
#loc261 = loc(fused[#loc52, #loc53])
#loc262 = loc(fused[#loc54, #loc55])
#loc263 = loc(fused[#loc56, #loc57])
#loc264 = loc(fused[#loc62, #loc63])
#loc267 = loc(fused[#loc73, #loc74])
#loc268 = loc(fused[#loc77, #loc78])
#loc269 = loc(fused[#loc81, #loc80])
#loc270 = loc(fused[#loc83, #loc84])
#loc271 = loc(fused[#loc85, #loc86])
#loc272 = loc(fused[#loc87, #loc88])
#loc273 = loc(fused[#loc90, #loc89])
#loc274 = loc(fused[#loc91, #loc92])
#loc275 = loc(fused[#loc102, #loc103])
#loc276 = loc(fused[#loc109, #loc110])
#loc277 = loc(fused[#loc111, #loc112])
#loc278 = loc(fused[#loc113, #loc110])
#loc279 = loc(fused[#loc114, #loc115])
#loc280 = loc(fused[#loc117, #loc118])
#loc281 = loc(fused[#loc116, #loc119])
#loc282 = loc(fused[#loc120, #loc121, #loc122, #loc115])
#loc283 = loc(fused[#loc128, #loc129])
#loc284 = loc(fused[#loc130, #loc131])
#loc285 = loc(fused[#loc132, #loc133])
#loc286 = loc(fused[#loc135, #loc134])
#loc287 = loc(fused[#loc136, #loc137])
#loc288 = loc(fused[#loc147, #loc148])
#loc289 = loc(fused[#loc151, #loc152])
#loc290 = loc(fused[#loc153, #loc154])
#loc291 = loc(fused[#loc155, #loc152])
#loc292 = loc(fused[#loc156, #loc157])
#loc293 = loc(fused[#loc159, #loc160])
#loc294 = loc(fused[#loc158, #loc161])
#loc295 = loc(fused[#loc162, #loc163, #loc164, #loc157])
#loc296 = loc(fused[#loc174, #loc175])
#loc297 = loc(fused[#loc176, #loc177])
#loc298 = loc(fused[#loc178, #loc179])
#loc299 = loc(fused[#loc181, #loc180])
#loc300 = loc(fused[#loc182, #loc183])
#loc301 = loc(fused[#loc191, #loc189])
#loc302 = loc(fused[#loc193, #loc194])
#loc303 = loc(fused[#loc197, #loc198])
#loc304 = loc(fused[#loc199, #loc200])
#loc305 = loc(fused[#loc201, #loc198])
#loc306 = loc(fused[#loc209, #loc210])
#loc307 = loc(fused[#loc211, #loc212])
#loc308 = loc(fused[#loc213, #loc214])
#loc309 = loc(fused[#loc216, #loc215])
#loc310 = loc(fused[#loc217, #loc218])
#loc311 = loc(fused[#loc223, #loc221])
#loc312 = loc(fused[#loc228, #loc229])
#loc313 = loc(fused[#loc232, #loc233])
#loc314 = loc(fused[#loc234, #loc235])
#loc315 = loc(fused[#loc236, #loc233])
