!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc13 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":28:12)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":64:12)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc78)
  cir.func private @printIntLine(!s32i) loc(#loc79)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_multiply_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc81)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc82)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc13)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc13)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc13)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc13)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc13)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc13)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc13)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc13)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc13)
    cir.br ^bb3(%18 : !u32i) loc(#loc13)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc13)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc13)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc13)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc13)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc13)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc13)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc13)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc13)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc13)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc13)
    cir.br ^bb3(%34 : !u32i) loc(#loc13)
  ^bb3(%35: !u32i loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":28:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc13)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc13)
    cir.store %36, %1 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    cir.br ^bb5 loc(#loc85)
  ^bb5:  // pred: ^bb4
    %37 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %38 = cir.const #cir.int<0> : !s32i loc(#loc18)
    %39 = cir.cmp(gt, %37, %38) : !s32i, !cir.bool loc(#loc86)
    cir.brcond %39 ^bb6, ^bb7 loc(#loc87)
  ^bb6:  // pred: ^bb5
    %40 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %41 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %42 = cir.binop(mul, %40, %41) nsw : !s32i loc(#loc20)
    cir.store %42, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    %43 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    cir.call @printIntLine(%43) : (!s32i) -> () loc(#loc22)
    cir.br ^bb7 loc(#loc16)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc6)
  } loc(#loc80)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_multiply_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc89)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc25)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc90)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    cir.return loc(#loc24)
  } loc(#loc88)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc92)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc93)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc35)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc37)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    cir.br ^bb1 loc(#loc96)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc42)
    %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc97)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc98)
  ^bb2:  // pred: ^bb1
    %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    %8 = cir.const #cir.int<2> : !s32i loc(#loc32)
    %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc44)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc46)
    cir.br ^bb3 loc(#loc40)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc40)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc30)
  } loc(#loc91)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc101)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc102)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc56)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc58)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc58)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc58)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc58)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc58)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc58)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc58)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc58)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc58)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc58)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc58)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc58)
    cir.br ^bb3(%18 : !u32i) loc(#loc58)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc58)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc58)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc58)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc58)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc58)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc58)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc58)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc58)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc58)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc58)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc58)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc58)
    cir.br ^bb3(%34 : !u32i) loc(#loc58)
  ^bb3(%35: !u32i loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":64:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc58)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc58)
    cir.store %36, %1 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    cir.br ^bb5 loc(#loc105)
  ^bb5:  // pred: ^bb4
    %37 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    %38 = cir.const #cir.int<0> : !s32i loc(#loc63)
    %39 = cir.cmp(gt, %37, %38) : !s32i, !cir.bool loc(#loc106)
    cir.brcond %39 ^bb6, ^bb12 loc(#loc107)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc108)
  ^bb7:  // pred: ^bb6
    %40 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    %41 = cir.const #cir.int<2147483647> : !s32i loc(#loc68)
    %42 = cir.const #cir.int<2> : !s32i loc(#loc69)
    %43 = cir.binop(div, %41, %42) : !s32i loc(#loc109)
    %44 = cir.cmp(lt, %40, %43) : !s32i, !cir.bool loc(#loc110)
    cir.brcond %44 ^bb8, ^bb9 loc(#loc111)
  ^bb8:  // pred: ^bb7
    %45 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %46 = cir.const #cir.int<2> : !s32i loc(#loc53)
    %47 = cir.binop(mul, %45, %46) nsw : !s32i loc(#loc74)
    cir.store %47, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    %48 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    cir.call @printIntLine(%48) : (!s32i) -> () loc(#loc76)
    cir.br ^bb10 loc(#loc72)
  ^bb9:  // pred: ^bb7
    %49 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc49)
    %50 = cir.cast(array_to_ptrdecay, %49 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%50) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    cir.br ^bb10 loc(#loc66)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc66)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc61)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc61)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc51)
  } loc(#loc100)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":35:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":32:9)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":32:29)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":24:5)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":24:9)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":26:12)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":26:5)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":28:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":29:5)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":34:5)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":29:8)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":29:15)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":30:5)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":32:22)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":33:22)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":33:9)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":80:1)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":84:1)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":82:5)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":82:13)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":83:5)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":83:13)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":42:1)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":55:1)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":52:9)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":52:29)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":44:5)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":44:9)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":46:12)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":46:5)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":48:12)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":48:5)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":49:5)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":54:5)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":49:8)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":49:15)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":50:5)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":52:22)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":53:22)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":53:9)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":75:23)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":58:1)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":78:1)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":70:13)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":70:33)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":60:5)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":60:9)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":62:12)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":62:5)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":64:5)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":65:5)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":77:5)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":65:8)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":65:15)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":66:5)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":68:9)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":76:9)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":68:13)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":68:21)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":68:29)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":68:30)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":69:9)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":72:9)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":74:9)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":70:26)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":71:26)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":71:13)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":75:13)
#loc78 = loc(fused[#loc1, #loc2])
#loc79 = loc(fused[#loc3, #loc4])
#loc80 = loc(fused[#loc5, #loc6])
#loc81 = loc(fused[#loc7, #loc8])
#loc82 = loc(fused[#loc9, #loc10])
#loc83 = loc(fused[#loc12, #loc11])
#loc84 = loc(fused[#loc14, #loc13])
#loc85 = loc(fused[#loc15, #loc16])
#loc86 = loc(fused[#loc17, #loc18])
#loc87 = loc(fused[#loc19, #loc16])
#loc88 = loc(fused[#loc23, #loc24])
#loc89 = loc(fused[#loc25, #loc26])
#loc90 = loc(fused[#loc27, #loc28])
#loc91 = loc(fused[#loc29, #loc30])
#loc92 = loc(fused[#loc31, #loc32])
#loc93 = loc(fused[#loc33, #loc34])
#loc94 = loc(fused[#loc36, #loc35])
#loc95 = loc(fused[#loc38, #loc37])
#loc96 = loc(fused[#loc39, #loc40])
#loc97 = loc(fused[#loc41, #loc42])
#loc98 = loc(fused[#loc43, #loc40])
#loc99 = loc(fused[#loc47, #loc48])
#loc100 = loc(fused[#loc50, #loc51])
#loc101 = loc(fused[#loc52, #loc53])
#loc102 = loc(fused[#loc54, #loc55])
#loc103 = loc(fused[#loc57, #loc56])
#loc104 = loc(fused[#loc59, #loc58])
#loc105 = loc(fused[#loc60, #loc61])
#loc106 = loc(fused[#loc62, #loc63])
#loc107 = loc(fused[#loc64, #loc61])
#loc108 = loc(fused[#loc65, #loc66])
#loc109 = loc(fused[#loc68, #loc69])
#loc110 = loc(fused[#loc67, #loc70])
#loc111 = loc(fused[#loc71, #loc72, #loc73, #loc66])
