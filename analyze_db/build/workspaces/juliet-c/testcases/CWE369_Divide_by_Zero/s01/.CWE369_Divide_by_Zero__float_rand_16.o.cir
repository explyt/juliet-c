!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc99)
  cir.func private @printIntLine(!s32i) loc(#loc100)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc102)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc9)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc103)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc13)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc13)
        cir.condition(%3) loc(#loc13)
      } do {
        cir.scope {
          %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
          %4 = cir.binop(and, %2, %3) : !s32i loc(#loc15)
          %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
          %6 = cir.ternary(%5, true {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc15)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc15)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc15)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc15)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc15)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc15)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc15)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc15)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc15)
            cir.yield %20 : !u32i loc(#loc15)
          }, false {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc15)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc15)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc15)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc15)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc15)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc15)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc15)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc15)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc15)
            %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc15)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc15)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc15)
            %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc15)
            cir.yield %24 : !u32i loc(#loc15)
          }) : (!cir.bool) -> !u32i loc(#loc15)
          %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc15)
          %8 = cir.cast(int_to_float, %7 : !s32i), !cir.float loc(#loc15)
          cir.store %8, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc106)
          cir.break loc(#loc17)
        } loc(#loc105)
        cir.yield loc(#loc12)
      } loc(#loc104)
    } loc(#loc104)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc20)
        cir.condition(%3) loc(#loc20)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc110)
            %3 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc26)
            %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc27)
            %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc27)
            %6 = cir.binop(div, %3, %5) : !cir.double loc(#loc111)
            %7 = cir.cast(float_to_int, %6 : !cir.double), !s32i loc(#loc111)
            cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc110)
            %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc28)
            cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc29)
          } loc(#loc109)
          cir.break loc(#loc30)
        } loc(#loc108)
        cir.yield loc(#loc19)
      } loc(#loc107)
    } loc(#loc107)
    cir.return loc(#loc6)
  } loc(#loc101)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc113)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc114)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc112)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc115)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc39)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc117)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc44)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc118)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc48)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc48)
        cir.condition(%3) loc(#loc48)
      } do {
        cir.scope {
          %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
          %3 = cir.const #cir.int<1> : !s32i loc(#loc50)
          %4 = cir.binop(and, %2, %3) : !s32i loc(#loc50)
          %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc50)
          %6 = cir.ternary(%5, true {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc50)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc50)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc50)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc50)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc50)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc50)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc50)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc50)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc50)
            cir.yield %20 : !u32i loc(#loc50)
          }, false {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc50)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc50)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc50)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc50)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc50)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc50)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc50)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc50)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc50)
            %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc50)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc50)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc50)
            %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc50)
            cir.yield %24 : !u32i loc(#loc50)
          }) : (!cir.bool) -> !u32i loc(#loc50)
          %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc50)
          %8 = cir.cast(int_to_float, %7 : !s32i), !cir.float loc(#loc50)
          cir.store %8, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc121)
          cir.break loc(#loc52)
        } loc(#loc120)
        cir.yield loc(#loc47)
      } loc(#loc119)
    } loc(#loc119)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc55)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc55)
        cir.condition(%3) loc(#loc55)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc59)
            %3 = cir.cast(floating, %2 : !cir.float), !cir.double loc(#loc59)
            %4 = cir.fabs %3 : !cir.double loc(#loc59)
            %5 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc60)
            %6 = cir.cmp(gt, %4, %5) : !cir.double, !cir.bool loc(#loc125)
            cir.if %6 {
              %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc127)
              %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc67)
              %9 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc68)
              %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc68)
              %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc128)
              %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc128)
              cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc127)
              %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc69)
              cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc70)
            } else {
              %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc39)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc39)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc71)
            } loc(#loc126)
          } loc(#loc124)
          cir.break loc(#loc72)
        } loc(#loc123)
        cir.yield loc(#loc54)
      } loc(#loc122)
    } loc(#loc122)
    cir.return loc(#loc41)
  } loc(#loc116)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc130)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc77)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc131)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc81)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc81)
        cir.condition(%3) loc(#loc81)
      } do {
        cir.scope {
          %2 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc83)
          cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc134)
          cir.break loc(#loc85)
        } loc(#loc133)
        cir.yield loc(#loc80)
      } loc(#loc132)
    } loc(#loc132)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc88)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc88)
        cir.condition(%3) loc(#loc88)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc138)
            %3 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc94)
            %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc95)
            %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc95)
            %6 = cir.binop(div, %3, %5) : !cir.double loc(#loc139)
            %7 = cir.cast(float_to_int, %6 : !cir.double), !s32i loc(#loc139)
            cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc138)
            %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc96)
            cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc97)
          } loc(#loc137)
          cir.break loc(#loc98)
        } loc(#loc136)
        cir.yield loc(#loc87)
      } loc(#loc135)
    } loc(#loc135)
    cir.return loc(#loc74)
  } loc(#loc129)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__float_rand_16.c":24:1)
#loc6 = loc("CWE369_Divide_by_Zero__float_rand_16.c":44:1)
#loc7 = loc("CWE369_Divide_by_Zero__float_rand_16.c":26:5)
#loc8 = loc("CWE369_Divide_by_Zero__float_rand_16.c":26:11)
#loc9 = loc("CWE369_Divide_by_Zero__float_rand_16.c":28:12)
#loc10 = loc("CWE369_Divide_by_Zero__float_rand_16.c":28:5)
#loc11 = loc("CWE369_Divide_by_Zero__float_rand_16.c":29:5)
#loc12 = loc("CWE369_Divide_by_Zero__float_rand_16.c":34:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_rand_16.c":29:11)
#loc14 = loc("CWE369_Divide_by_Zero__float_rand_16.c":30:5)
#loc15 = loc("CWE369_Divide_by_Zero__float_rand_16.c":32:23)
#loc16 = loc("CWE369_Divide_by_Zero__float_rand_16.c":32:9)
#loc17 = loc("CWE369_Divide_by_Zero__float_rand_16.c":33:9)
#loc18 = loc("CWE369_Divide_by_Zero__float_rand_16.c":35:5)
#loc19 = loc("CWE369_Divide_by_Zero__float_rand_16.c":43:5)
#loc20 = loc("CWE369_Divide_by_Zero__float_rand_16.c":35:11)
#loc21 = loc("CWE369_Divide_by_Zero__float_rand_16.c":36:5)
#loc22 = loc("CWE369_Divide_by_Zero__float_rand_16.c":37:9)
#loc23 = loc("CWE369_Divide_by_Zero__float_rand_16.c":41:9)
#loc24 = loc("CWE369_Divide_by_Zero__float_rand_16.c":39:13)
#loc25 = loc("CWE369_Divide_by_Zero__float_rand_16.c":39:44)
#loc26 = loc("CWE369_Divide_by_Zero__float_rand_16.c":39:32)
#loc27 = loc("CWE369_Divide_by_Zero__float_rand_16.c":39:40)
#loc28 = loc("CWE369_Divide_by_Zero__float_rand_16.c":40:26)
#loc29 = loc("CWE369_Divide_by_Zero__float_rand_16.c":40:13)
#loc30 = loc("CWE369_Divide_by_Zero__float_rand_16.c":42:9)
#loc31 = loc("CWE369_Divide_by_Zero__float_rand_16.c":101:1)
#loc32 = loc("CWE369_Divide_by_Zero__float_rand_16.c":105:1)
#loc33 = loc("CWE369_Divide_by_Zero__float_rand_16.c":103:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_rand_16.c":103:13)
#loc35 = loc("CWE369_Divide_by_Zero__float_rand_16.c":104:5)
#loc36 = loc("CWE369_Divide_by_Zero__float_rand_16.c":104:13)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE369_Divide_by_Zero__float_rand_16.c":72:23)
#loc40 = loc("CWE369_Divide_by_Zero__float_rand_16.c":51:1)
#loc41 = loc("CWE369_Divide_by_Zero__float_rand_16.c":76:1)
#loc42 = loc("CWE369_Divide_by_Zero__float_rand_16.c":53:5)
#loc43 = loc("CWE369_Divide_by_Zero__float_rand_16.c":53:11)
#loc44 = loc("CWE369_Divide_by_Zero__float_rand_16.c":55:12)
#loc45 = loc("CWE369_Divide_by_Zero__float_rand_16.c":55:5)
#loc46 = loc("CWE369_Divide_by_Zero__float_rand_16.c":56:5)
#loc47 = loc("CWE369_Divide_by_Zero__float_rand_16.c":61:5)
#loc48 = loc("CWE369_Divide_by_Zero__float_rand_16.c":56:11)
#loc49 = loc("CWE369_Divide_by_Zero__float_rand_16.c":57:5)
#loc50 = loc("CWE369_Divide_by_Zero__float_rand_16.c":59:23)
#loc51 = loc("CWE369_Divide_by_Zero__float_rand_16.c":59:9)
#loc52 = loc("CWE369_Divide_by_Zero__float_rand_16.c":60:9)
#loc53 = loc("CWE369_Divide_by_Zero__float_rand_16.c":62:5)
#loc54 = loc("CWE369_Divide_by_Zero__float_rand_16.c":75:5)
#loc55 = loc("CWE369_Divide_by_Zero__float_rand_16.c":62:11)
#loc56 = loc("CWE369_Divide_by_Zero__float_rand_16.c":63:5)
#loc57 = loc("CWE369_Divide_by_Zero__float_rand_16.c":65:9)
#loc58 = loc("CWE369_Divide_by_Zero__float_rand_16.c":73:9)
#loc59 = loc("CWE369_Divide_by_Zero__float_rand_16.c":65:17)
#loc60 = loc("CWE369_Divide_by_Zero__float_rand_16.c":65:25)
#loc61 = loc("CWE369_Divide_by_Zero__float_rand_16.c":65:12)
#loc62 = loc("CWE369_Divide_by_Zero__float_rand_16.c":66:9)
#loc63 = loc("CWE369_Divide_by_Zero__float_rand_16.c":69:9)
#loc64 = loc("CWE369_Divide_by_Zero__float_rand_16.c":71:9)
#loc65 = loc("CWE369_Divide_by_Zero__float_rand_16.c":67:13)
#loc66 = loc("CWE369_Divide_by_Zero__float_rand_16.c":67:44)
#loc67 = loc("CWE369_Divide_by_Zero__float_rand_16.c":67:32)
#loc68 = loc("CWE369_Divide_by_Zero__float_rand_16.c":67:40)
#loc69 = loc("CWE369_Divide_by_Zero__float_rand_16.c":68:26)
#loc70 = loc("CWE369_Divide_by_Zero__float_rand_16.c":68:13)
#loc71 = loc("CWE369_Divide_by_Zero__float_rand_16.c":72:13)
#loc72 = loc("CWE369_Divide_by_Zero__float_rand_16.c":74:9)
#loc73 = loc("CWE369_Divide_by_Zero__float_rand_16.c":79:1)
#loc74 = loc("CWE369_Divide_by_Zero__float_rand_16.c":99:1)
#loc75 = loc("CWE369_Divide_by_Zero__float_rand_16.c":81:5)
#loc76 = loc("CWE369_Divide_by_Zero__float_rand_16.c":81:11)
#loc77 = loc("CWE369_Divide_by_Zero__float_rand_16.c":83:12)
#loc78 = loc("CWE369_Divide_by_Zero__float_rand_16.c":83:5)
#loc79 = loc("CWE369_Divide_by_Zero__float_rand_16.c":84:5)
#loc80 = loc("CWE369_Divide_by_Zero__float_rand_16.c":89:5)
#loc81 = loc("CWE369_Divide_by_Zero__float_rand_16.c":84:11)
#loc82 = loc("CWE369_Divide_by_Zero__float_rand_16.c":85:5)
#loc83 = loc("CWE369_Divide_by_Zero__float_rand_16.c":87:16)
#loc84 = loc("CWE369_Divide_by_Zero__float_rand_16.c":87:9)
#loc85 = loc("CWE369_Divide_by_Zero__float_rand_16.c":88:9)
#loc86 = loc("CWE369_Divide_by_Zero__float_rand_16.c":90:5)
#loc87 = loc("CWE369_Divide_by_Zero__float_rand_16.c":98:5)
#loc88 = loc("CWE369_Divide_by_Zero__float_rand_16.c":90:11)
#loc89 = loc("CWE369_Divide_by_Zero__float_rand_16.c":91:5)
#loc90 = loc("CWE369_Divide_by_Zero__float_rand_16.c":92:9)
#loc91 = loc("CWE369_Divide_by_Zero__float_rand_16.c":96:9)
#loc92 = loc("CWE369_Divide_by_Zero__float_rand_16.c":94:13)
#loc93 = loc("CWE369_Divide_by_Zero__float_rand_16.c":94:44)
#loc94 = loc("CWE369_Divide_by_Zero__float_rand_16.c":94:32)
#loc95 = loc("CWE369_Divide_by_Zero__float_rand_16.c":94:40)
#loc96 = loc("CWE369_Divide_by_Zero__float_rand_16.c":95:26)
#loc97 = loc("CWE369_Divide_by_Zero__float_rand_16.c":95:13)
#loc98 = loc("CWE369_Divide_by_Zero__float_rand_16.c":97:9)
#loc99 = loc(fused[#loc1, #loc2])
#loc100 = loc(fused[#loc3, #loc4])
#loc101 = loc(fused[#loc5, #loc6])
#loc102 = loc(fused[#loc7, #loc8])
#loc103 = loc(fused[#loc10, #loc9])
#loc104 = loc(fused[#loc11, #loc12])
#loc105 = loc(fused[#loc14, #loc12])
#loc106 = loc(fused[#loc16, #loc15])
#loc107 = loc(fused[#loc18, #loc19])
#loc108 = loc(fused[#loc21, #loc19])
#loc109 = loc(fused[#loc22, #loc23])
#loc110 = loc(fused[#loc24, #loc25])
#loc111 = loc(fused[#loc26, #loc27])
#loc112 = loc(fused[#loc31, #loc32])
#loc113 = loc(fused[#loc33, #loc34])
#loc114 = loc(fused[#loc35, #loc36])
#loc115 = loc(fused[#loc37, #loc38])
#loc116 = loc(fused[#loc40, #loc41])
#loc117 = loc(fused[#loc42, #loc43])
#loc118 = loc(fused[#loc45, #loc44])
#loc119 = loc(fused[#loc46, #loc47])
#loc120 = loc(fused[#loc49, #loc47])
#loc121 = loc(fused[#loc51, #loc50])
#loc122 = loc(fused[#loc53, #loc54])
#loc123 = loc(fused[#loc56, #loc54])
#loc124 = loc(fused[#loc57, #loc58])
#loc125 = loc(fused[#loc61, #loc60])
#loc126 = loc(fused[#loc62, #loc63, #loc64, #loc58])
#loc127 = loc(fused[#loc65, #loc66])
#loc128 = loc(fused[#loc67, #loc68])
#loc129 = loc(fused[#loc73, #loc74])
#loc130 = loc(fused[#loc75, #loc76])
#loc131 = loc(fused[#loc78, #loc77])
#loc132 = loc(fused[#loc79, #loc80])
#loc133 = loc(fused[#loc82, #loc80])
#loc134 = loc(fused[#loc84, #loc83])
#loc135 = loc(fused[#loc86, #loc87])
#loc136 = loc(fused[#loc89, #loc87])
#loc137 = loc(fused[#loc90, #loc91])
#loc138 = loc(fused[#loc92, #loc93])
#loc139 = loc(fused[#loc94, #loc95])
