!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc103)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc104)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc105)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc107)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc12)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc109)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc19)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc112)
        cir.condition(%4) loc(#loc23)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc115)
            %3 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc116)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc30)
            %5 = cir.cast(int_to_float, %4 : !s32i), !cir.double loc(#loc30)
            cir.store %5, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc116)
            cir.scope {
              %10 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc33)
              %11 = cir.const #cir.int<256> : !s32i loc(#loc34)
              %12 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc104)
              %13 = cir.load %12 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc35)
              %14 = cir.call @fgets(%10, %11, %13) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc36)
              %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc37)
              %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc37)
              %17 = cir.cmp(ne, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc118)
              cir.if %17 {
                %18 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc41)
                %19 = cir.call @atof(%18) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc42)
                cir.store %19, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc120)
              } else {
                %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
                %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc45)
              } loc(#loc119)
            } loc(#loc117)
            %6 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc46)
            %7 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc47)
            %8 = cir.call @sqrt(%7) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc46)
            %9 = cir.cast(float_to_int, %8 : !cir.double), !s32i loc(#loc46)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc48)
          } loc(#loc114)
        } loc(#loc113)
        cir.yield loc(#loc18)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc50)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc121)
        cir.yield loc(#loc110)
      } loc(#loc110)
    } loc(#loc110)
    cir.return loc(#loc14)
  } loc(#loc108)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc123)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc53)
    cir.return loc(#loc52)
  } loc(#loc122)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Value is negative\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc55)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc125)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc62)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc127)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc65)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc128)
        cir.condition(%4) loc(#loc66)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc131)
            %3 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc132)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc73)
            %5 = cir.cast(int_to_float, %4 : !s32i), !cir.double loc(#loc73)
            cir.store %5, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc132)
            cir.scope {
              %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc76)
              %7 = cir.const #cir.int<256> : !s32i loc(#loc77)
              %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc104)
              %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc78)
              %10 = cir.call @fgets(%6, %7, %9) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc79)
              %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc80)
              %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc80)
              %13 = cir.cmp(ne, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc134)
              cir.if %13 {
                %14 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc84)
                %15 = cir.call @atof(%14) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc85)
                cir.store %15, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc136)
              } else {
                %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc88)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc88)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc89)
              } loc(#loc135)
            } loc(#loc133)
            cir.scope {
              %6 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc92)
              %7 = cir.const #cir.int<0> : !s32i loc(#loc93)
              %8 = cir.cast(int_to_float, %7 : !s32i), !cir.double loc(#loc93)
              %9 = cir.cmp(lt, %6, %8) : !cir.double, !cir.bool loc(#loc138)
              cir.if %9 {
                %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc55)
                %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc55)
                cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc97)
              } else {
                %10 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc98)
                %11 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc99)
                %12 = cir.call @sqrt(%11) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc98)
                %13 = cir.cast(float_to_int, %12 : !cir.double), !s32i loc(#loc98)
                cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc100)
              } loc(#loc139)
            } loc(#loc137)
          } loc(#loc130)
        } loc(#loc129)
        cir.yield loc(#loc61)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc102)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc140)
        cir.yield loc(#loc126)
      } loc(#loc126)
    } loc(#loc126)
    cir.return loc(#loc57)
  } loc(#loc124)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":102:1)
#loc6 = loc("/usr/include/stdlib.h":103:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":42:27)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc13 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":23:1)
#loc14 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":48:1)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":25:5)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":25:9)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":26:5)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":47:5)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":26:13)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":26:9)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":26:16)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":26:20)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":26:18)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":27:5)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":28:9)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":46:9)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":29:13)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":29:45)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":30:13)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":30:35)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":35:13)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":43:13)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":35:23)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":35:36)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":35:53)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":35:17)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":35:63)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":36:13)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":39:13)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":41:13)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":38:37)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":38:32)
#loc43 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":38:17)
#loc44 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":38:48)
#loc45 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":42:17)
#loc46 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":45:32)
#loc47 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":45:37)
#loc48 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":45:13)
#loc49 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":26:24)
#loc50 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":26:23)
#loc51 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":90:1)
#loc52 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":93:1)
#loc53 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":92:5)
#loc54 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":92:11)
#loc55 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":80:27)
#loc56 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":55:1)
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":88:1)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":57:5)
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":57:9)
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":58:5)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":87:5)
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":58:13)
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":58:9)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":58:16)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":58:20)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":58:18)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":59:5)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":60:9)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":86:9)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":61:13)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":61:45)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":62:13)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":62:35)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":67:13)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":75:13)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":67:23)
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":67:36)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":67:53)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":67:17)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":67:63)
#loc81 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":68:13)
#loc82 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":71:13)
#loc83 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":73:13)
#loc84 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":70:37)
#loc85 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":70:32)
#loc86 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":70:17)
#loc87 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":70:48)
#loc88 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":74:27)
#loc89 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":74:17)
#loc90 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":78:13)
#loc91 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":85:13)
#loc92 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":78:17)
#loc93 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":78:32)
#loc94 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":79:13)
#loc95 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":81:13)
#loc96 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":83:13)
#loc97 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":80:17)
#loc98 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":84:36)
#loc99 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":84:41)
#loc100 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":84:17)
#loc101 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":58:24)
#loc102 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17.c":58:23)
#loc103 = loc(fused[#loc1, #loc2])
#loc104 = loc(fused[#loc3, #loc4])
#loc105 = loc(fused[#loc5, #loc6])
#loc106 = loc(fused[#loc7, #loc8])
#loc107 = loc(fused[#loc10, #loc11])
#loc108 = loc(fused[#loc13, #loc14])
#loc109 = loc(fused[#loc15, #loc16])
#loc110 = loc(fused[#loc17, #loc18])
#loc111 = loc(fused[#loc20, #loc19])
#loc112 = loc(fused[#loc21, #loc22])
#loc113 = loc(fused[#loc24, #loc18])
#loc114 = loc(fused[#loc25, #loc26])
#loc115 = loc(fused[#loc27, #loc28])
#loc116 = loc(fused[#loc29, #loc30])
#loc117 = loc(fused[#loc31, #loc32])
#loc118 = loc(fused[#loc36, #loc37])
#loc119 = loc(fused[#loc38, #loc39, #loc40, #loc32])
#loc120 = loc(fused[#loc43, #loc44])
#loc121 = loc(fused[#loc50, #loc49])
#loc122 = loc(fused[#loc51, #loc52])
#loc123 = loc(fused[#loc53, #loc54])
#loc124 = loc(fused[#loc56, #loc57])
#loc125 = loc(fused[#loc58, #loc59])
#loc126 = loc(fused[#loc60, #loc61])
#loc127 = loc(fused[#loc63, #loc62])
#loc128 = loc(fused[#loc64, #loc65])
#loc129 = loc(fused[#loc67, #loc61])
#loc130 = loc(fused[#loc68, #loc69])
#loc131 = loc(fused[#loc70, #loc71])
#loc132 = loc(fused[#loc72, #loc73])
#loc133 = loc(fused[#loc74, #loc75])
#loc134 = loc(fused[#loc79, #loc80])
#loc135 = loc(fused[#loc81, #loc82, #loc83, #loc75])
#loc136 = loc(fused[#loc86, #loc87])
#loc137 = loc(fused[#loc90, #loc91])
#loc138 = loc(fused[#loc92, #loc93])
#loc139 = loc(fused[#loc94, #loc95, #loc96, #loc91])
#loc140 = loc(fused[#loc102, #loc101])
