!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc69 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":161:10)
#loc70 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":161:14)
#loc71 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":161:20)
#loc72 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":161:32)
#loc205 = loc(fused[#loc69, #loc70])
#loc206 = loc(fused[#loc71, #loc72])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_sub_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc179)
  cir.func private @printIntLine(!s32i) loc(#loc180)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc181)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE191_Integer_Underflow__int_min_sub_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc183)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc186)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc186)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc16)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc16)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc21)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc21)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc21)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc23)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc24)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
      } loc(#loc187)
    } loc(#loc185)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc191)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc191)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc28)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc28)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc194)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc36)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc37)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc194)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc38)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc39)
        } loc(#loc193)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc43)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc43)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc43)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc43)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc196)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc198)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc48)
            %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc49)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc198)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc50)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc51)
          } else {
            %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc7)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc7)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc52)
          } loc(#loc197)
        } loc(#loc195)
      } loc(#loc192)
    } loc(#loc190)
    cir.return loc(#loc9)
  } loc(#loc182)
  cir.func no_proto @CWE191_Integer_Underflow__int_min_sub_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc200)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc55)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    cir.return loc(#loc54)
  } loc(#loc199)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc202)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc203)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc66)
  cir.func @main(%arg0: !s32i loc(fused[#loc69, #loc70]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc71, #loc72])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc206)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc68)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc73)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc73)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc74)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc75)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc75)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc76)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc63)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %8 = cir.get_global @CWE191_Integer_Underflow__int_min_sub_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call @CWE191_Integer_Underflow__int_min_sub_12_good() : () -> () loc(#loc78)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc64)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc65)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    %13 = cir.get_global @CWE191_Integer_Underflow__int_min_sub_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call @CWE191_Integer_Underflow__int_min_sub_12_bad() : () -> () loc(#loc82)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc66)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc85)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc209)
    cir.return %17 : !s32i loc(#loc209)
  } loc(#loc204)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc211)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc91)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc214)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc214)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc95)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc95)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc100)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc100)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc100)
        %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc100)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
      } else {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc102)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc102)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc102)
        %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc102)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc217)
      } loc(#loc215)
    } loc(#loc213)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc219)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc219)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc106)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc106)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc114)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc114)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc114)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc114)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc222)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc224)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc120)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc119)
            %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc120)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc224)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc121)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc122)
          } else {
            %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc123)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc123)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc124)
          } loc(#loc223)
        } loc(#loc221)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc127)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc128)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc128)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc128)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc128)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc226)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc228)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc134)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc133)
            %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc134)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc228)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc135)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc136)
          } else {
            %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc137)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc137)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc138)
          } loc(#loc227)
        } loc(#loc225)
      } loc(#loc220)
    } loc(#loc218)
    cir.return loc(#loc88)
  } loc(#loc210)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc230)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc143)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc231)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc233)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc233)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc147)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc147)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc152)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc153)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc235)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc155)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc156)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc236)
      } loc(#loc234)
    } loc(#loc232)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc238)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc238)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc160)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc160)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc241)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc169)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc168)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc169)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc241)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc170)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc171)
        } loc(#loc240)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc243)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc176)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc175)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc176)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc243)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc177)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc178)
        } loc(#loc242)
      } loc(#loc239)
    } loc(#loc237)
    cir.return loc(#loc140)
  } loc(#loc229)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_sub_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":55:23)
#loc8 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":22:1)
#loc9 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":58:1)
#loc10 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":24:5)
#loc11 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":24:9)
#loc12 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":26:12)
#loc13 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":26:5)
#loc14 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":27:5)
#loc15 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":36:5)
#loc16 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":27:8)
#loc17 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":27:33)
#loc18 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":28:5)
#loc19 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":31:5)
#loc20 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":33:5)
#loc21 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":30:16)
#loc22 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":30:9)
#loc23 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":35:17)
#loc24 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":35:16)
#loc25 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":35:9)
#loc26 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":37:5)
#loc27 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":57:5)
#loc28 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":37:8)
#loc29 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":37:33)
#loc30 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":38:5)
#loc31 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":44:5)
#loc32 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":46:5)
#loc33 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":39:9)
#loc34 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":43:9)
#loc35 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":41:13)
#loc36 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":41:33)
#loc37 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":41:26)
#loc38 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":42:26)
#loc39 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":42:13)
#loc40 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":48:9)
#loc41 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":56:9)
#loc42 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":48:13)
#loc43 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":48:20)
#loc44 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":49:9)
#loc45 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":52:9)
#loc46 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":54:9)
#loc47 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":50:13)
#loc48 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":50:33)
#loc49 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":50:26)
#loc50 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":51:26)
#loc51 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":51:13)
#loc52 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":55:13)
#loc53 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":146:1)
#loc54 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":150:1)
#loc55 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":148:5)
#loc56 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":148:13)
#loc57 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":149:5)
#loc58 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":149:13)
#loc59 = loc("/usr/include/stdlib.h":575:1)
#loc60 = loc("/usr/include/stdlib.h":575:41)
#loc61 = loc("/usr/include/time.h":76:1)
#loc62 = loc("/usr/include/time.h":76:38)
#loc63 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":166:15)
#loc64 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":168:15)
#loc65 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":171:15)
#loc66 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":173:15)
#loc67 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":161:1)
#loc68 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":176:1)
#loc73 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":162:1)
#loc74 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":164:27)
#loc75 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":164:22)
#loc76 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":164:5)
#loc77 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":166:5)
#loc78 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":167:5)
#loc79 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":167:51)
#loc80 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":168:5)
#loc81 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":171:5)
#loc82 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":172:5)
#loc83 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":172:50)
#loc84 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":173:5)
#loc85 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":175:12)
#loc86 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":175:5)
#loc87 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":67:1)
#loc88 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":108:1)
#loc89 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":69:5)
#loc90 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":69:9)
#loc91 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":71:12)
#loc92 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":71:5)
#loc93 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":72:5)
#loc94 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":81:5)
#loc95 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":72:8)
#loc96 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":72:33)
#loc97 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":73:5)
#loc98 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":76:5)
#loc99 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":78:5)
#loc100 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":75:16)
#loc101 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":75:9)
#loc102 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":80:16)
#loc103 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":80:9)
#loc104 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":82:5)
#loc105 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":107:5)
#loc106 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":82:8)
#loc107 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":82:33)
#loc108 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":83:5)
#loc109 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":94:5)
#loc110 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":96:5)
#loc111 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":85:9)
#loc112 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":93:9)
#loc113 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":85:13)
#loc114 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":85:20)
#loc115 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":86:9)
#loc116 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":89:9)
#loc117 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":91:9)
#loc118 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":87:13)
#loc119 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":87:33)
#loc120 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":87:26)
#loc121 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":88:26)
#loc122 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":88:13)
#loc123 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":92:23)
#loc124 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":92:13)
#loc125 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":98:9)
#loc126 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":106:9)
#loc127 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":98:13)
#loc128 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":98:20)
#loc129 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":99:9)
#loc130 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":102:9)
#loc131 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":104:9)
#loc132 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":100:13)
#loc133 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":100:33)
#loc134 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":100:26)
#loc135 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":101:26)
#loc136 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":101:13)
#loc137 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":105:23)
#loc138 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":105:13)
#loc139 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":113:1)
#loc140 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":144:1)
#loc141 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":115:5)
#loc142 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":115:9)
#loc143 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":117:12)
#loc144 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":117:5)
#loc145 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":118:5)
#loc146 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":127:5)
#loc147 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":118:8)
#loc148 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":118:33)
#loc149 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":119:5)
#loc150 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":122:5)
#loc151 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":124:5)
#loc152 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":121:17)
#loc153 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":121:16)
#loc154 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":121:9)
#loc155 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":126:17)
#loc156 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":126:16)
#loc157 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":126:9)
#loc158 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":128:5)
#loc159 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":143:5)
#loc160 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":128:8)
#loc161 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":128:33)
#loc162 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":129:5)
#loc163 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":135:5)
#loc164 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":137:5)
#loc165 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":130:9)
#loc166 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":134:9)
#loc167 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":132:13)
#loc168 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":132:33)
#loc169 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":132:26)
#loc170 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":133:26)
#loc171 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":133:13)
#loc172 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":138:9)
#loc173 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":142:9)
#loc174 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":140:13)
#loc175 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":140:33)
#loc176 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":140:26)
#loc177 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":141:26)
#loc178 = loc("CWE191_Integer_Underflow__int_min_sub_12.c":141:13)
#loc179 = loc(fused[#loc1, #loc2])
#loc180 = loc(fused[#loc3, #loc4])
#loc181 = loc(fused[#loc5, #loc6])
#loc182 = loc(fused[#loc8, #loc9])
#loc183 = loc(fused[#loc10, #loc11])
#loc184 = loc(fused[#loc13, #loc12])
#loc185 = loc(fused[#loc14, #loc15])
#loc186 = loc(fused[#loc16, #loc17])
#loc187 = loc(fused[#loc18, #loc19, #loc20, #loc15])
#loc188 = loc(fused[#loc22, #loc21])
#loc189 = loc(fused[#loc25, #loc23])
#loc190 = loc(fused[#loc26, #loc27])
#loc191 = loc(fused[#loc28, #loc29])
#loc192 = loc(fused[#loc30, #loc31, #loc32, #loc27])
#loc193 = loc(fused[#loc33, #loc34])
#loc194 = loc(fused[#loc35, #loc36])
#loc195 = loc(fused[#loc40, #loc41])
#loc196 = loc(fused[#loc42, #loc43])
#loc197 = loc(fused[#loc44, #loc45, #loc46, #loc41])
#loc198 = loc(fused[#loc47, #loc48])
#loc199 = loc(fused[#loc53, #loc54])
#loc200 = loc(fused[#loc55, #loc56])
#loc201 = loc(fused[#loc57, #loc58])
#loc202 = loc(fused[#loc59, #loc60])
#loc203 = loc(fused[#loc61, #loc62])
#loc204 = loc(fused[#loc67, #loc68])
#loc207 = loc(fused[#loc78, #loc79])
#loc208 = loc(fused[#loc82, #loc83])
#loc209 = loc(fused[#loc86, #loc85])
#loc210 = loc(fused[#loc87, #loc88])
#loc211 = loc(fused[#loc89, #loc90])
#loc212 = loc(fused[#loc92, #loc91])
#loc213 = loc(fused[#loc93, #loc94])
#loc214 = loc(fused[#loc95, #loc96])
#loc215 = loc(fused[#loc97, #loc98, #loc99, #loc94])
#loc216 = loc(fused[#loc101, #loc100])
#loc217 = loc(fused[#loc103, #loc102])
#loc218 = loc(fused[#loc104, #loc105])
#loc219 = loc(fused[#loc106, #loc107])
#loc220 = loc(fused[#loc108, #loc109, #loc110, #loc105])
#loc221 = loc(fused[#loc111, #loc112])
#loc222 = loc(fused[#loc113, #loc114])
#loc223 = loc(fused[#loc115, #loc116, #loc117, #loc112])
#loc224 = loc(fused[#loc118, #loc119])
#loc225 = loc(fused[#loc125, #loc126])
#loc226 = loc(fused[#loc127, #loc128])
#loc227 = loc(fused[#loc129, #loc130, #loc131, #loc126])
#loc228 = loc(fused[#loc132, #loc133])
#loc229 = loc(fused[#loc139, #loc140])
#loc230 = loc(fused[#loc141, #loc142])
#loc231 = loc(fused[#loc144, #loc143])
#loc232 = loc(fused[#loc145, #loc146])
#loc233 = loc(fused[#loc147, #loc148])
#loc234 = loc(fused[#loc149, #loc150, #loc151, #loc146])
#loc235 = loc(fused[#loc154, #loc152])
#loc236 = loc(fused[#loc157, #loc155])
#loc237 = loc(fused[#loc158, #loc159])
#loc238 = loc(fused[#loc160, #loc161])
#loc239 = loc(fused[#loc162, #loc163, #loc164, #loc159])
#loc240 = loc(fused[#loc165, #loc166])
#loc241 = loc(fused[#loc167, #loc168])
#loc242 = loc(fused[#loc172, #loc173])
#loc243 = loc(fused[#loc174, #loc175])
