!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc3 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":25:23)
#loc4 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":25:28)
#loc29 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":50:27)
#loc30 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":50:32)
#loc53 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":71:27)
#loc54 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":71:32)
#loc102 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":117:10)
#loc103 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":117:14)
#loc104 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":117:20)
#loc105 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":117:32)
#loc119 = loc(fused[#loc3, #loc4])
#loc130 = loc(fused[#loc29, #loc30])
#loc140 = loc(fused[#loc53, #loc54])
#loc158 = loc(fused[#loc102, #loc103])
#loc159 = loc(fused[#loc104, #loc105])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func internal private @_ZN44CWE190_Integer_Overflow__int_max_multiply_43L9badSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc3, #loc4])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc119)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc5)
    %1 = cir.const #cir.int<2147483647> : !s32i loc(#loc6)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc7)
    cir.store %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    cir.return loc(#loc2)
  } loc(#loc118)
  cir.func private @printIntLine(!s32i) loc(#loc121)
  cir.func @_ZN44CWE190_Integer_Overflow__int_max_multiply_433badEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc123)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc124)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    cir.call @_ZN44CWE190_Integer_Overflow__int_max_multiply_43L9badSourceERi(%1) : (!cir.ptr<!s32i>) -> () loc(#loc18)
    cir.br ^bb1 loc(#loc126)
  ^bb1:  // pred: ^bb0
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc22)
    %5 = cir.cmp(gt, %3, %4) : !s32i, !cir.bool loc(#loc127)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc128)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc13)
    %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc24)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc26)
    cir.br ^bb3 loc(#loc20)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc20)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc11)
  } loc(#loc122)
  cir.func internal private @_ZN44CWE190_Integer_Overflow__int_max_multiply_43L13goodG2BSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc29, #loc30])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc130)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc31)
    %1 = cir.const #cir.int<2> : !s32i loc(#loc32)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
    cir.store %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    cir.return loc(#loc28)
  } loc(#loc129)
  cir.func internal private @_ZN44CWE190_Integer_Overflow__int_max_multiply_43L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc133)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc134)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc40)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    cir.call @_ZN44CWE190_Integer_Overflow__int_max_multiply_43L13goodG2BSourceERi(%1) : (!cir.ptr<!s32i>) -> () loc(#loc42)
    cir.br ^bb1 loc(#loc136)
  ^bb1:  // pred: ^bb0
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc45)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc46)
    %5 = cir.cmp(gt, %3, %4) : !s32i, !cir.bool loc(#loc137)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc138)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc37)
    %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc48)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc133)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc50)
    cir.br ^bb3 loc(#loc44)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc44)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc35)
  } loc(#loc132)
  cir.func internal private @_ZN44CWE190_Integer_Overflow__int_max_multiply_43L13goodB2GSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc53, #loc54])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc140)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc55)
    %1 = cir.const #cir.int<2147483647> : !s32i loc(#loc56)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
    cir.store %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    cir.return loc(#loc52)
  } loc(#loc139)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc58)
  cir.func internal private @_ZN44CWE190_Integer_Overflow__int_max_multiply_43L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc143)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc144)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc65)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    cir.call @_ZN44CWE190_Integer_Overflow__int_max_multiply_43L13goodB2GSourceERi(%1) : (!cir.ptr<!s32i>) -> () loc(#loc67)
    cir.br ^bb1 loc(#loc146)
  ^bb1:  // pred: ^bb0
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc71)
    %5 = cir.cmp(gt, %3, %4) : !s32i, !cir.bool loc(#loc147)
    cir.brcond %5 ^bb2, ^bb8 loc(#loc148)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc149)
  ^bb3:  // pred: ^bb2
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc76)
    %8 = cir.const #cir.int<2> : !s32i loc(#loc77)
    %9 = cir.binop(div, %7, %8) : !s32i loc(#loc150)
    %10 = cir.cmp(lt, %6, %9) : !s32i, !cir.bool loc(#loc151)
    cir.brcond %10 ^bb4, ^bb5 loc(#loc152)
  ^bb4:  // pred: ^bb3
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    %12 = cir.const #cir.int<2> : !s32i loc(#loc62)
    %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc82)
    cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc143)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc84)
    cir.br ^bb6 loc(#loc80)
  ^bb5:  // pred: ^bb3
    %15 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc58)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    cir.br ^bb6 loc(#loc74)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc74)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc69)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc69)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc60)
  } loc(#loc142)
  cir.func @_ZN44CWE190_Integer_Overflow__int_max_multiply_434goodEv() extra(#fn_attr) {
    cir.call @_ZN44CWE190_Integer_Overflow__int_max_multiply_43L7goodG2BEv() : () -> () loc(#loc88)
    cir.call @_ZN44CWE190_Integer_Overflow__int_max_multiply_43L7goodB2GEv() : () -> () loc(#loc89)
    cir.return loc(#loc87)
  } loc(#loc153)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc154)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc155)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc156)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc96)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc97)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc99)
  cir.func @main(%arg0: !s32i loc(fused[#loc102, #loc103]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc104, #loc105])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc159)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc101)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc106)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc107)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc108)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc108)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc109)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc96)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc96)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    cir.call @_ZN44CWE190_Integer_Overflow__int_max_multiply_434goodEv() : () -> () loc(#loc111)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc97)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc97)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc98)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc98)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc113)
    cir.call @_ZN44CWE190_Integer_Overflow__int_max_multiply_433badEv() : () -> () loc(#loc114)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc99)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc115)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc116)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    cir.return %15 : !s32i loc(#loc160)
  } loc(#loc157)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_43.cpp":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":25:1)
#loc2 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":29:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":26:1)
#loc6 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":28:12)
#loc7 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":28:5)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":31:1)
#loc11 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":43:1)
#loc12 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":40:9)
#loc13 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":40:29)
#loc14 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":33:5)
#loc15 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":33:9)
#loc16 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":35:12)
#loc17 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":35:5)
#loc18 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":36:5)
#loc19 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":37:5)
#loc20 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":42:5)
#loc21 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":37:8)
#loc22 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":37:15)
#loc23 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":38:5)
#loc24 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":40:22)
#loc25 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":41:22)
#loc26 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":41:9)
#loc27 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":50:1)
#loc28 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":54:1)
#loc31 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":51:1)
#loc32 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":53:12)
#loc33 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":53:5)
#loc34 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":56:1)
#loc35 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":68:1)
#loc36 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":65:9)
#loc37 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":65:29)
#loc38 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":58:5)
#loc39 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":58:9)
#loc40 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":60:12)
#loc41 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":60:5)
#loc42 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":61:5)
#loc43 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":62:5)
#loc44 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":67:5)
#loc45 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":62:8)
#loc46 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":62:15)
#loc47 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":63:5)
#loc48 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":65:22)
#loc49 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":66:22)
#loc50 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":66:9)
#loc51 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":71:1)
#loc52 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":75:1)
#loc55 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":72:1)
#loc56 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":74:12)
#loc57 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":74:5)
#loc58 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":93:23)
#loc59 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":77:1)
#loc60 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":96:1)
#loc61 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":88:13)
#loc62 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":88:33)
#loc63 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":79:5)
#loc64 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":79:9)
#loc65 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":81:12)
#loc66 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":81:5)
#loc67 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":82:5)
#loc68 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":83:5)
#loc69 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":95:5)
#loc70 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":83:8)
#loc71 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":83:15)
#loc72 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":84:5)
#loc73 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":86:9)
#loc74 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":94:9)
#loc75 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":86:13)
#loc76 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":86:21)
#loc77 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":86:29)
#loc78 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":86:30)
#loc79 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":87:9)
#loc80 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":90:9)
#loc81 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":92:9)
#loc82 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":88:26)
#loc83 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":89:26)
#loc84 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":89:13)
#loc85 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":93:13)
#loc86 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":98:1)
#loc87 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":102:1)
#loc88 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":100:5)
#loc89 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":101:5)
#loc90 = loc("/usr/include/stdlib.h":575:1)
#loc91 = loc("/usr/include/stdlib.h":575:41)
#loc92 = loc("/usr/include/time.h":76:1)
#loc93 = loc("/usr/include/time.h":76:38)
#loc94 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc95 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc96 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":122:15)
#loc97 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":124:15)
#loc98 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":127:15)
#loc99 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":129:15)
#loc100 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":117:1)
#loc101 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":132:1)
#loc106 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":118:1)
#loc107 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":120:27)
#loc108 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":120:22)
#loc109 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":120:5)
#loc110 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":122:5)
#loc111 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":123:5)
#loc112 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":124:5)
#loc113 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":127:5)
#loc114 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":128:5)
#loc115 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":129:5)
#loc116 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":131:12)
#loc117 = loc("CWE190_Integer_Overflow__int_max_multiply_43.cpp":131:5)
#loc118 = loc(fused[#loc1, #loc2])
#loc120 = loc(fused[#loc7, #loc6])
#loc121 = loc(fused[#loc8, #loc9])
#loc122 = loc(fused[#loc10, #loc11])
#loc123 = loc(fused[#loc12, #loc13])
#loc124 = loc(fused[#loc14, #loc15])
#loc125 = loc(fused[#loc17, #loc16])
#loc126 = loc(fused[#loc19, #loc20])
#loc127 = loc(fused[#loc21, #loc22])
#loc128 = loc(fused[#loc23, #loc20])
#loc129 = loc(fused[#loc27, #loc28])
#loc131 = loc(fused[#loc33, #loc32])
#loc132 = loc(fused[#loc34, #loc35])
#loc133 = loc(fused[#loc36, #loc37])
#loc134 = loc(fused[#loc38, #loc39])
#loc135 = loc(fused[#loc41, #loc40])
#loc136 = loc(fused[#loc43, #loc44])
#loc137 = loc(fused[#loc45, #loc46])
#loc138 = loc(fused[#loc47, #loc44])
#loc139 = loc(fused[#loc51, #loc52])
#loc141 = loc(fused[#loc57, #loc56])
#loc142 = loc(fused[#loc59, #loc60])
#loc143 = loc(fused[#loc61, #loc62])
#loc144 = loc(fused[#loc63, #loc64])
#loc145 = loc(fused[#loc66, #loc65])
#loc146 = loc(fused[#loc68, #loc69])
#loc147 = loc(fused[#loc70, #loc71])
#loc148 = loc(fused[#loc72, #loc69])
#loc149 = loc(fused[#loc73, #loc74])
#loc150 = loc(fused[#loc76, #loc77])
#loc151 = loc(fused[#loc75, #loc78])
#loc152 = loc(fused[#loc79, #loc80, #loc81, #loc74])
#loc153 = loc(fused[#loc86, #loc87])
#loc154 = loc(fused[#loc90, #loc91])
#loc155 = loc(fused[#loc92, #loc93])
#loc156 = loc(fused[#loc94, #loc95])
#loc157 = loc(fused[#loc100, #loc101])
#loc160 = loc(fused[#loc117, #loc116])
