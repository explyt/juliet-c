!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc23 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":29:16)
module @"/workspaces/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc62)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc63)
  cir.func private @printShortLine(!s16i) loc(#loc64)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__int_rand_to_short_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["shortData", init] {alignment = 2 : i64} loc(#loc66)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc67)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc14)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    cir.br ^bb1 loc(#loc69)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc70)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc70)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc18)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc71)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc23)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc23)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc23)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc23)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc23)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc23)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc23)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc23)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc23)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc23)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc23)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc23)
    cir.br ^bb5(%23 : !u32i) loc(#loc23)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc23)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc23)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc23)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc23)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc23)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc23)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc23)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc23)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc23)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc23)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc23)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc23)
    cir.br ^bb5(%39 : !u32i) loc(#loc23)
  ^bb5(%40: !u32i loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":29:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc23)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc23)
    cir.store %41, %1 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    cir.br ^bb8 loc(#loc21)
  ^bb7:  // pred: ^bb1
    %42 = cir.const #cir.int<127> : !s32i loc(#loc25)
    %43 = cir.const #cir.int<5> : !s32i loc(#loc26)
    %44 = cir.binop(sub, %42, %43) nsw : !s32i loc(#loc25)
    cir.store %44, %1 : !s32i, !cir.ptr<!s32i> loc(#loc73)
    cir.br ^bb8 loc(#loc17)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc17)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc74)
  ^bb10:  // pred: ^bb9
    %45 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    %46 = cir.cast(integral, %45 : !s32i), !s16i loc(#loc10)
    cir.store %46, %0 : !s16i, !cir.ptr<!s16i> loc(#loc66)
    %47 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc30)
    cir.call @printShortLine(%47) : (!s16i) -> () loc(#loc31)
    cir.br ^bb11 loc(#loc29)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc8)
  } loc(#loc65)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__int_rand_to_short_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc76)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc33)
  } loc(#loc75)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["shortData", init] {alignment = 2 : i64} loc(#loc78)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc79)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc43)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    cir.br ^bb1 loc(#loc81)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc82)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc82)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc47)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc47)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc83)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<127> : !s32i loc(#loc52)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc53)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc52)
    cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    cir.br ^bb4 loc(#loc50)
  ^bb3:  // pred: ^bb1
    %11 = cir.const #cir.int<127> : !s32i loc(#loc55)
    %12 = cir.const #cir.int<5> : !s32i loc(#loc56)
    %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc55)
    cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    cir.br ^bb4 loc(#loc46)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc46)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc86)
  ^bb6:  // pred: ^bb5
    %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    %15 = cir.cast(integral, %14 : !s32i), !s16i loc(#loc39)
    cir.store %15, %0 : !s16i, !cir.ptr<!s16i> loc(#loc78)
    %16 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc60)
    cir.call @printShortLine(%16) : (!s16i) -> () loc(#loc61)
    cir.br ^bb7 loc(#loc59)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc37)
  } loc(#loc77)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":20:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":20:39)
#loc7 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":21:1)
#loc8 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":41:1)
#loc9 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":38:9)
#loc10 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":38:34)
#loc11 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":23:5)
#loc12 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":23:9)
#loc13 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":25:13)
#loc14 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":25:12)
#loc15 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":25:5)
#loc16 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":26:5)
#loc17 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":35:5)
#loc18 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":26:8)
#loc19 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":26:33)
#loc20 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":27:5)
#loc21 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":30:5)
#loc22 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":32:5)
#loc24 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":29:9)
#loc25 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":34:16)
#loc26 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":34:25)
#loc27 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":34:9)
#loc28 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":36:5)
#loc29 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":40:5)
#loc30 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":39:24)
#loc31 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":39:9)
#loc32 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":71:1)
#loc33 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":74:1)
#loc34 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":73:5)
#loc35 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":73:13)
#loc36 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":49:1)
#loc37 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":69:1)
#loc38 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":66:9)
#loc39 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":66:34)
#loc40 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":51:5)
#loc41 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":51:9)
#loc42 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":53:13)
#loc43 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":53:12)
#loc44 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":53:5)
#loc45 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":54:5)
#loc46 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":63:5)
#loc47 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":54:8)
#loc48 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":54:33)
#loc49 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":55:5)
#loc50 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":58:5)
#loc51 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":60:5)
#loc52 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":57:16)
#loc53 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":57:25)
#loc54 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":57:9)
#loc55 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":62:16)
#loc56 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":62:25)
#loc57 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":62:9)
#loc58 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":64:5)
#loc59 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":68:5)
#loc60 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":67:24)
#loc61 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_12.c":67:9)
#loc62 = loc(fused[#loc1, #loc2])
#loc63 = loc(fused[#loc3, #loc4])
#loc64 = loc(fused[#loc5, #loc6])
#loc65 = loc(fused[#loc7, #loc8])
#loc66 = loc(fused[#loc9, #loc10])
#loc67 = loc(fused[#loc11, #loc12])
#loc68 = loc(fused[#loc15, #loc13])
#loc69 = loc(fused[#loc16, #loc17])
#loc70 = loc(fused[#loc18, #loc19])
#loc71 = loc(fused[#loc20, #loc21, #loc22, #loc17])
#loc72 = loc(fused[#loc24, #loc23])
#loc73 = loc(fused[#loc27, #loc26])
#loc74 = loc(fused[#loc28, #loc29])
#loc75 = loc(fused[#loc32, #loc33])
#loc76 = loc(fused[#loc34, #loc35])
#loc77 = loc(fused[#loc36, #loc37])
#loc78 = loc(fused[#loc38, #loc39])
#loc79 = loc(fused[#loc40, #loc41])
#loc80 = loc(fused[#loc44, #loc42])
#loc81 = loc(fused[#loc45, #loc46])
#loc82 = loc(fused[#loc47, #loc48])
#loc83 = loc(fused[#loc49, #loc50, #loc51, #loc46])
#loc84 = loc(fused[#loc54, #loc53])
#loc85 = loc(fused[#loc57, #loc56])
#loc86 = loc(fused[#loc58, #loc59])
