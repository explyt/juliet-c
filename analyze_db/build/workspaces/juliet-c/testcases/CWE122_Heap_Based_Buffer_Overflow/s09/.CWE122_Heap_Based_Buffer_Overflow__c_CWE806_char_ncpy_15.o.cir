!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc184)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc185)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc186)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc187)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc188)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc189)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc191)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc18)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc19)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc19)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc192)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc193)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc18)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc194)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc195)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc27)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc197)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc29)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc30)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc31)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc29)
      } loc(#loc198)
    } loc(#loc196)
    cir.scope {
      %8 = cir.const #cir.int<6> : !s32i loc(#loc34)
      cir.switch (%8 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc36)
          %11 = cir.const #cir.int<65> : !s32i loc(#loc37)
          %12 = cir.const #cir.int<100> : !s32i loc(#loc38)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc39)
          %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc38)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc38)
          cir.libc.memset %15 bytes from %10 set to %11 : !cir.ptr<!void>, !s32i, !u64i loc(#loc200)
          %16 = cir.const #cir.int<0> : !s32i loc(#loc42)
          %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc42)
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
          %19 = cir.const #cir.int<100> : !s32i loc(#loc44)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc45)
          %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc44)
          %22 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc46)
          cir.store %17, %22 : !s8i, !cir.ptr<!s8i> loc(#loc201)
          cir.break loc(#loc47)
        } loc(#loc35)
        cir.case(default, []) {
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc49)
          cir.break loc(#loc50)
        } loc(#loc48)
        cir.yield loc(#loc32)
      } loc(#loc32)
    } loc(#loc199)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc203)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc203)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc203)
      %10 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc55)
      %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc56)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
      %13 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc58)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
      %15 = cir.call @strlen(%14) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc58)
      %16 = cir.call @strncpy(%11, %12, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc55)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc60)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc60)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc61)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc62)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc61)
      %22 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc63)
      %23 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc63)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc204)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc65)
      %25 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc66)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc67)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc66)
    } loc(#loc202)
    cir.return loc(#loc15)
  } loc(#loc190)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc206)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc70)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc207)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc72)
    cir.return loc(#loc69)
  } loc(#loc205)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc209)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc78)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc79)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc79)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc210)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc211)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc78)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc212)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc213)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc86)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc87)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc87)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc215)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc89)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc90)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc91)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc89)
      } loc(#loc216)
    } loc(#loc214)
    cir.scope {
      %8 = cir.const #cir.int<5> : !s32i loc(#loc94)
      cir.switch (%8 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc96)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc96)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc97)
          cir.break loc(#loc98)
        } loc(#loc95)
        cir.case(default, []) {
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc100)
          %11 = cir.const #cir.int<65> : !s32i loc(#loc101)
          %12 = cir.const #cir.int<50> : !s32i loc(#loc102)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc103)
          %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc102)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc102)
          cir.libc.memset %15 bytes from %10 set to %11 : !cir.ptr<!void>, !s32i, !u64i loc(#loc218)
          %16 = cir.const #cir.int<0> : !s32i loc(#loc106)
          %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc106)
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
          %19 = cir.const #cir.int<50> : !s32i loc(#loc108)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc109)
          %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc108)
          %22 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc110)
          cir.store %17, %22 : !s8i, !cir.ptr<!s8i> loc(#loc219)
          cir.break loc(#loc111)
        } loc(#loc99)
        cir.yield loc(#loc92)
      } loc(#loc92)
    } loc(#loc217)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc221)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc221)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc221)
      %10 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc116)
      %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc117)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
      %13 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc119)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
      %15 = cir.call @strlen(%14) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc119)
      %16 = cir.call @strncpy(%11, %12, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc116)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc121)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc121)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc122)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc123)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc122)
      %22 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc124)
      %23 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc124)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc222)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc126)
      %25 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc127)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc128)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc127)
    } loc(#loc220)
    cir.return loc(#loc75)
  } loc(#loc208)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc224)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc133)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc134)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc134)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc225)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc226)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc133)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc227)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc228)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc142)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc142)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc230)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc144)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc145)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc146)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc144)
      } loc(#loc231)
    } loc(#loc229)
    cir.scope {
      %8 = cir.const #cir.int<6> : !s32i loc(#loc149)
      cir.switch (%8 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc151)
          %11 = cir.const #cir.int<65> : !s32i loc(#loc152)
          %12 = cir.const #cir.int<50> : !s32i loc(#loc153)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc154)
          %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc153)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc153)
          cir.libc.memset %15 bytes from %10 set to %11 : !cir.ptr<!void>, !s32i, !u64i loc(#loc233)
          %16 = cir.const #cir.int<0> : !s32i loc(#loc157)
          %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc157)
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc158)
          %19 = cir.const #cir.int<50> : !s32i loc(#loc159)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc160)
          %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc159)
          %22 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc161)
          cir.store %17, %22 : !s8i, !cir.ptr<!s8i> loc(#loc234)
          cir.break loc(#loc162)
        } loc(#loc150)
        cir.case(default, []) {
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc164)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc164)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc165)
          cir.break loc(#loc166)
        } loc(#loc163)
        cir.yield loc(#loc147)
      } loc(#loc147)
    } loc(#loc232)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc236)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc236)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc236)
      %10 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc171)
      %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc172)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc173)
      %13 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc174)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc175)
      %15 = cir.call @strlen(%14) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc174)
      %16 = cir.call @strncpy(%11, %12, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc171)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc176)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc176)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc177)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc178)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc177)
      %22 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc179)
      %23 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc179)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc237)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc180)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc181)
      %25 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc182)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc183)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc183)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc182)
    } loc(#loc235)
    cir.return loc(#loc130)
  } loc(#loc223)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":37:19)
#loc8 = loc("/usr/include/string.h":144:1)
#loc9 = loc("/usr/include/string.h":146:14)
#loc10 = loc("/usr/include/string.h":407:1)
#loc11 = loc("/usr/include/string.h":408:33)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":23:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":48:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":25:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":25:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":26:20)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":26:27)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":26:31)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":26:42)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":26:43)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":26:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":27:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":27:33)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":27:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":27:17)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":27:23)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":27:24)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":27:30)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":27:29)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":28:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":39:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":28:12)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":30:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":32:16)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":32:22)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":32:27)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":32:31)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":32:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":32:32)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":33:23)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":33:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":33:14)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":33:18)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":33:19)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":34:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":35:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":37:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":38:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":40:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":47:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":41:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":41:25)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":43:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":43:17)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":43:23)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":43:29)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":43:36)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":44:22)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":44:14)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":44:17)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":44:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":45:19)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":45:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":46:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":46:14)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":110:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":114:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":112:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":112:14)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":113:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":113:14)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":55:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":80:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":57:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":57:12)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":58:20)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":58:27)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":58:31)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":58:42)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":58:43)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":58:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":59:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":59:33)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":59:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":59:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":59:23)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":59:24)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":59:30)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":59:29)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":60:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":71:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":60:12)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":62:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":64:19)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":64:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":65:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":66:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":68:16)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":68:22)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":68:27)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":68:30)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":68:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":68:31)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":69:22)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":69:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":69:14)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":69:17)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":69:18)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":70:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":72:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":79:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":73:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":73:25)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":75:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":75:17)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":75:23)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":75:29)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":75:36)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":76:22)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":76:14)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":76:17)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":76:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":77:19)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":77:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":78:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":78:14)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":83:1)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":108:1)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":85:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":85:12)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":86:20)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":86:27)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":86:31)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":86:42)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":86:43)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":86:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":87:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":87:33)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":87:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":87:17)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":87:23)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":87:24)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":87:30)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":87:29)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":88:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":99:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":88:12)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":90:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":92:16)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":92:22)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":92:27)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":92:30)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":92:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":92:31)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":93:22)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":93:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":93:14)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":93:17)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":93:18)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":94:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":95:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":97:19)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":97:9)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":98:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":100:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":107:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":101:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":101:25)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":103:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":103:17)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":103:23)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":103:29)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":103:36)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":104:22)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":104:14)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":104:17)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":104:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":105:19)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":105:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":106:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c":106:14)
#loc184 = loc(fused[#loc1, #loc2])
#loc185 = loc(fused[#loc3, #loc4])
#loc186 = loc(fused[#loc5, #loc6])
#loc187 = loc(fused[#loc8, #loc9])
#loc188 = loc(fused[#loc10, #loc11])
#loc189 = loc(fused[#loc12, #loc13])
#loc190 = loc(fused[#loc14, #loc15])
#loc191 = loc(fused[#loc16, #loc17])
#loc192 = loc(fused[#loc20, #loc21])
#loc193 = loc(fused[#loc19, #loc21])
#loc194 = loc(fused[#loc18, #loc22])
#loc195 = loc(fused[#loc23, #loc22])
#loc196 = loc(fused[#loc24, #loc25])
#loc197 = loc(fused[#loc26, #loc27])
#loc198 = loc(fused[#loc28, #loc25])
#loc199 = loc(fused[#loc32, #loc33])
#loc200 = loc(fused[#loc40, #loc41])
#loc201 = loc(fused[#loc43, #loc42])
#loc202 = loc(fused[#loc51, #loc52])
#loc203 = loc(fused[#loc53, #loc54])
#loc204 = loc(fused[#loc63, #loc60])
#loc205 = loc(fused[#loc68, #loc69])
#loc206 = loc(fused[#loc70, #loc71])
#loc207 = loc(fused[#loc72, #loc73])
#loc208 = loc(fused[#loc74, #loc75])
#loc209 = loc(fused[#loc76, #loc77])
#loc210 = loc(fused[#loc80, #loc81])
#loc211 = loc(fused[#loc79, #loc81])
#loc212 = loc(fused[#loc78, #loc82])
#loc213 = loc(fused[#loc83, #loc82])
#loc214 = loc(fused[#loc84, #loc85])
#loc215 = loc(fused[#loc86, #loc87])
#loc216 = loc(fused[#loc88, #loc85])
#loc217 = loc(fused[#loc92, #loc93])
#loc218 = loc(fused[#loc104, #loc105])
#loc219 = loc(fused[#loc107, #loc106])
#loc220 = loc(fused[#loc112, #loc113])
#loc221 = loc(fused[#loc114, #loc115])
#loc222 = loc(fused[#loc124, #loc121])
#loc223 = loc(fused[#loc129, #loc130])
#loc224 = loc(fused[#loc131, #loc132])
#loc225 = loc(fused[#loc135, #loc136])
#loc226 = loc(fused[#loc134, #loc136])
#loc227 = loc(fused[#loc133, #loc137])
#loc228 = loc(fused[#loc138, #loc137])
#loc229 = loc(fused[#loc139, #loc140])
#loc230 = loc(fused[#loc141, #loc142])
#loc231 = loc(fused[#loc143, #loc140])
#loc232 = loc(fused[#loc147, #loc148])
#loc233 = loc(fused[#loc155, #loc156])
#loc234 = loc(fused[#loc158, #loc157])
#loc235 = loc(fused[#loc167, #loc168])
#loc236 = loc(fused[#loc169, #loc170])
#loc237 = loc(fused[#loc179, #loc176])
