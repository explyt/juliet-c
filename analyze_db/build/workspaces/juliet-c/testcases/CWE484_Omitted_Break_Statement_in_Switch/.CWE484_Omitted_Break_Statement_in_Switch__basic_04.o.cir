!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE484_Omitted_Break_Statement_in_Switch/CWE484_Omitted_Break_Statement_in_Switch__basic_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc107)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc108)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc6)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"2\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Invalid Number\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE484_Omitted_Break_Statement_in_Switch__basic_04_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc13)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc113)
          %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %4 = cir.const #cir.int<3> : !s32i loc(#loc20)
          %5 = cir.binop(rem, %3, %4) : !s32i loc(#loc114)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc113)
          cir.scope {
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc23)
            cir.switch (%6 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc5)
                %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc5)
                cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc25)
                cir.yield loc(#loc24)
              } loc(#loc24)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc6)
                %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc6)
                cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc27)
                cir.break loc(#loc28)
              } loc(#loc26)
              cir.case(equal, [#cir.int<2> : !s32i]) {
                %7 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc7)
                %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc7)
                cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc30)
                cir.break loc(#loc31)
              } loc(#loc29)
              cir.case(default, []) {
                %7 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc8)
                %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc8)
                cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc33)
                cir.break loc(#loc34)
              } loc(#loc32)
              cir.yield loc(#loc21)
            } loc(#loc21)
          } loc(#loc115)
        } loc(#loc112)
      } loc(#loc111)
    } loc(#loc110)
    cir.return loc(#loc10)
  } loc(#loc109)
  cir.func no_proto @CWE484_Omitted_Break_Statement_in_Switch__basic_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc117)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc118)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc116)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc41)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<0> : !s32i loc(#loc46)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc46)
      cir.if %1 {
        %2 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc41)
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc41)
        cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc50)
      } else {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc123)
          %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
          %4 = cir.const #cir.int<3> : !s32i loc(#loc56)
          %5 = cir.binop(rem, %3, %4) : !s32i loc(#loc124)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc123)
          cir.scope {
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc59)
            cir.switch (%6 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc61)
                %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc61)
                cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc62)
                cir.break loc(#loc63)
              } loc(#loc60)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc65)
                %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc65)
                cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc66)
                cir.break loc(#loc67)
              } loc(#loc64)
              cir.case(equal, [#cir.int<2> : !s32i]) {
                %7 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc69)
                %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc69)
                cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc70)
                cir.break loc(#loc71)
              } loc(#loc68)
              cir.case(default, []) {
                %7 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc73)
                %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc73)
                cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc74)
                cir.break loc(#loc75)
              } loc(#loc72)
              cir.yield loc(#loc57)
            } loc(#loc57)
          } loc(#loc125)
        } loc(#loc122)
      } loc(#loc121)
    } loc(#loc120)
    cir.return loc(#loc43)
  } loc(#loc119)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc80)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc80)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc130)
          %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
          %4 = cir.const #cir.int<3> : !s32i loc(#loc87)
          %5 = cir.binop(rem, %3, %4) : !s32i loc(#loc131)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc130)
          cir.scope {
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc90)
            cir.switch (%6 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc92)
                %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc92)
                cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc93)
                cir.break loc(#loc94)
              } loc(#loc91)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc96)
                %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc96)
                cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc97)
                cir.break loc(#loc98)
              } loc(#loc95)
              cir.case(equal, [#cir.int<2> : !s32i]) {
                %7 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc100)
                %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc100)
                cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc101)
                cir.break loc(#loc102)
              } loc(#loc99)
              cir.case(default, []) {
                %7 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc104)
                %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc104)
                cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc105)
                cir.break loc(#loc106)
              } loc(#loc103)
              cir.yield loc(#loc88)
            } loc(#loc88)
          } loc(#loc132)
        } loc(#loc129)
      } loc(#loc128)
    } loc(#loc127)
    cir.return loc(#loc77)
  } loc(#loc126)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE484_Omitted_Break_Statement_in_Switch/CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":36:27)
#loc6 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":38:27)
#loc7 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":41:27)
#loc8 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":44:27)
#loc9 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":26:1)
#loc10 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":49:1)
#loc11 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":28:5)
#loc12 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":48:5)
#loc13 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":28:8)
#loc14 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":29:5)
#loc15 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":30:9)
#loc16 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":47:9)
#loc17 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":31:13)
#loc18 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":31:32)
#loc19 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":31:22)
#loc20 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":31:31)
#loc21 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":33:13)
#loc22 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":46:13)
#loc23 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":33:21)
#loc24 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":35:13)
#loc25 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":36:17)
#loc26 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":37:13)
#loc27 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":38:17)
#loc28 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":39:17)
#loc29 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":40:13)
#loc30 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":41:17)
#loc31 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":42:17)
#loc32 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":43:13)
#loc33 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":44:17)
#loc34 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":45:17)
#loc35 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":116:1)
#loc36 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":120:1)
#loc37 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":118:5)
#loc38 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":118:11)
#loc39 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":119:5)
#loc40 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":119:11)
#loc41 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":61:19)
#loc42 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":56:1)
#loc43 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":86:1)
#loc44 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":58:5)
#loc45 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":85:5)
#loc46 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":58:8)
#loc47 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":59:5)
#loc48 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":62:5)
#loc49 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":64:5)
#loc50 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":61:9)
#loc51 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":65:9)
#loc52 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":84:9)
#loc53 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":66:13)
#loc54 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":66:32)
#loc55 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":66:22)
#loc56 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":66:31)
#loc57 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":69:13)
#loc58 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":83:13)
#loc59 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":69:21)
#loc60 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":71:13)
#loc61 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":72:27)
#loc62 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":72:17)
#loc63 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":73:17)
#loc64 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":74:13)
#loc65 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":75:27)
#loc66 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":75:17)
#loc67 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":76:17)
#loc68 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":77:13)
#loc69 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":78:27)
#loc70 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":78:17)
#loc71 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":79:17)
#loc72 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":80:13)
#loc73 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":81:27)
#loc74 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":81:17)
#loc75 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":82:17)
#loc76 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":89:1)
#loc77 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":114:1)
#loc78 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":91:5)
#loc79 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":113:5)
#loc80 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":91:8)
#loc81 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":92:5)
#loc82 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":93:9)
#loc83 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":112:9)
#loc84 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":94:13)
#loc85 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":94:32)
#loc86 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":94:22)
#loc87 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":94:31)
#loc88 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":97:13)
#loc89 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":111:13)
#loc90 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":97:21)
#loc91 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":99:13)
#loc92 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":100:27)
#loc93 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":100:17)
#loc94 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":101:17)
#loc95 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":102:13)
#loc96 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":103:27)
#loc97 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":103:17)
#loc98 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":104:17)
#loc99 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":105:13)
#loc100 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":106:27)
#loc101 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":106:17)
#loc102 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":107:17)
#loc103 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":108:13)
#loc104 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":109:27)
#loc105 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":109:17)
#loc106 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_04.c":110:17)
#loc107 = loc(fused[#loc1, #loc2])
#loc108 = loc(fused[#loc3, #loc4])
#loc109 = loc(fused[#loc9, #loc10])
#loc110 = loc(fused[#loc11, #loc12])
#loc111 = loc(fused[#loc14, #loc12])
#loc112 = loc(fused[#loc15, #loc16])
#loc113 = loc(fused[#loc17, #loc18])
#loc114 = loc(fused[#loc19, #loc20])
#loc115 = loc(fused[#loc21, #loc22])
#loc116 = loc(fused[#loc35, #loc36])
#loc117 = loc(fused[#loc37, #loc38])
#loc118 = loc(fused[#loc39, #loc40])
#loc119 = loc(fused[#loc42, #loc43])
#loc120 = loc(fused[#loc44, #loc45])
#loc121 = loc(fused[#loc47, #loc48, #loc49, #loc45])
#loc122 = loc(fused[#loc51, #loc52])
#loc123 = loc(fused[#loc53, #loc54])
#loc124 = loc(fused[#loc55, #loc56])
#loc125 = loc(fused[#loc57, #loc58])
#loc126 = loc(fused[#loc76, #loc77])
#loc127 = loc(fused[#loc78, #loc79])
#loc128 = loc(fused[#loc81, #loc79])
#loc129 = loc(fused[#loc82, #loc83])
#loc130 = loc(fused[#loc84, #loc85])
#loc131 = loc(fused[#loc86, #loc87])
#loc132 = loc(fused[#loc88, #loc89])
