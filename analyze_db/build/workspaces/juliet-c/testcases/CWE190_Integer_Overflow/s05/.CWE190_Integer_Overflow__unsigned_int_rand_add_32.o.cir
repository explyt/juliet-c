!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_add_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc116)
  cir.func private @printUnsignedLine(!u32i) loc(#loc117)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_add_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc119)
    %1 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc120)
    %2 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc121)
    cir.store %0, %1 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc120)
    cir.store %0, %2 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc121)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc13)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc13)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc122)
    cir.scope {
      %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc124)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc18)
      %7 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc19)
      cir.store %7, %5 : !u32i, !cir.ptr<!u32i> loc(#loc124)
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc20)
      %10 = cir.binop(and, %8, %9) : !s32i loc(#loc20)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc20)
      %12 = cir.ternary(%11, true {
        %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc20)
        %19 = cir.const #cir.int<30> : !s32i loc(#loc20)
        %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc20)
        %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc20)
        %23 = cir.const #cir.int<15> : !s32i loc(#loc20)
        %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc20)
        %25 = cir.binop(xor, %20, %24) : !u32i loc(#loc20)
        %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc20)
        %28 = cir.binop(xor, %25, %27) : !u32i loc(#loc20)
        cir.yield %28 : !u32i loc(#loc20)
      }, false {
        %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc20)
        %19 = cir.const #cir.int<30> : !s32i loc(#loc20)
        %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc20)
        %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc20)
        %23 = cir.const #cir.int<15> : !s32i loc(#loc20)
        %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc20)
        %25 = cir.binop(xor, %20, %24) : !u32i loc(#loc20)
        %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc20)
        %28 = cir.binop(xor, %25, %27) : !u32i loc(#loc20)
        %29 = cir.unary(minus, %28) : !u32i, !u32i loc(#loc20)
        %30 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc20)
        %32 = cir.binop(sub, %29, %31) : !u32i loc(#loc20)
        cir.yield %32 : !u32i loc(#loc20)
      }) : (!cir.bool) -> !u32i loc(#loc20)
      %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc20)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc20)
      cir.store %14, %5 : !u32i, !cir.ptr<!u32i> loc(#loc125)
      %15 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc22)
      %16 = cir.load deref %1 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc23)
      cir.store %15, %16 : !u32i, !cir.ptr<!u32i> loc(#loc126)
    } loc(#loc123)
    cir.scope {
      %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc128)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc28)
      %7 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc29)
      cir.store %7, %5 : !u32i, !cir.ptr<!u32i> loc(#loc128)
      cir.scope {
        %8 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc130)
        %9 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc34)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc33)
        %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc33)
        %12 = cir.binop(add, %9, %11) : !u32i loc(#loc131)
        cir.store %12, %8 : !u32i, !cir.ptr<!u32i> loc(#loc130)
        %13 = cir.load %8 : !cir.ptr<!u32i>, !u32i loc(#loc35)
        cir.call @printUnsignedLine(%13) : (!u32i) -> () loc(#loc36)
      } loc(#loc129)
    } loc(#loc127)
    cir.return loc(#loc6)
  } loc(#loc118)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_add_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc133)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc134)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    cir.return loc(#loc38)
  } loc(#loc132)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc136)
    %1 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc137)
    %2 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc138)
    cir.store %0, %1 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc137)
    cir.store %0, %2 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc138)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc51)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc51)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc139)
    cir.scope {
      %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc141)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc56)
      %7 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc57)
      cir.store %7, %5 : !u32i, !cir.ptr<!u32i> loc(#loc141)
      %8 = cir.const #cir.int<2> : !s32i loc(#loc58)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc58)
      cir.store %9, %5 : !u32i, !cir.ptr<!u32i> loc(#loc142)
      %10 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc60)
      %11 = cir.load deref %1 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc61)
      cir.store %10, %11 : !u32i, !cir.ptr<!u32i> loc(#loc143)
    } loc(#loc140)
    cir.scope {
      %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc145)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc66)
      %7 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc67)
      cir.store %7, %5 : !u32i, !cir.ptr<!u32i> loc(#loc145)
      cir.scope {
        %8 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc147)
        %9 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc72)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc71)
        %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc71)
        %12 = cir.binop(add, %9, %11) : !u32i loc(#loc148)
        cir.store %12, %8 : !u32i, !cir.ptr<!u32i> loc(#loc147)
        %13 = cir.load %8 : !cir.ptr<!u32i>, !u32i loc(#loc73)
        cir.call @printUnsignedLine(%13) : (!u32i) -> () loc(#loc74)
      } loc(#loc146)
    } loc(#loc144)
    cir.return loc(#loc44)
  } loc(#loc135)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc149)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc77)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc151)
    %1 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc152)
    %2 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc153)
    cir.store %0, %1 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc152)
    cir.store %0, %2 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc153)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc86)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc86)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc154)
    cir.scope {
      %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc156)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc91)
      %7 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc92)
      cir.store %7, %5 : !u32i, !cir.ptr<!u32i> loc(#loc156)
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc93)
      %10 = cir.binop(and, %8, %9) : !s32i loc(#loc93)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc93)
      %12 = cir.ternary(%11, true {
        %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
        %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc93)
        %19 = cir.const #cir.int<30> : !s32i loc(#loc93)
        %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc93)
        %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
        %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc93)
        %23 = cir.const #cir.int<15> : !s32i loc(#loc93)
        %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc93)
        %25 = cir.binop(xor, %20, %24) : !u32i loc(#loc93)
        %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
        %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc93)
        %28 = cir.binop(xor, %25, %27) : !u32i loc(#loc93)
        cir.yield %28 : !u32i loc(#loc93)
      }, false {
        %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
        %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc93)
        %19 = cir.const #cir.int<30> : !s32i loc(#loc93)
        %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc93)
        %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
        %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc93)
        %23 = cir.const #cir.int<15> : !s32i loc(#loc93)
        %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc93)
        %25 = cir.binop(xor, %20, %24) : !u32i loc(#loc93)
        %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
        %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc93)
        %28 = cir.binop(xor, %25, %27) : !u32i loc(#loc93)
        %29 = cir.unary(minus, %28) : !u32i, !u32i loc(#loc93)
        %30 = cir.const #cir.int<1> : !s32i loc(#loc93)
        %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc93)
        %32 = cir.binop(sub, %29, %31) : !u32i loc(#loc93)
        cir.yield %32 : !u32i loc(#loc93)
      }) : (!cir.bool) -> !u32i loc(#loc93)
      %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc93)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc93)
      cir.store %14, %5 : !u32i, !cir.ptr<!u32i> loc(#loc157)
      %15 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc95)
      %16 = cir.load deref %1 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc96)
      cir.store %15, %16 : !u32i, !cir.ptr<!u32i> loc(#loc158)
    } loc(#loc155)
    cir.scope {
      %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc160)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc101)
      %7 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc102)
      cir.store %7, %5 : !u32i, !cir.ptr<!u32i> loc(#loc160)
      cir.scope {
        %8 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc105)
        %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc106)
        %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc106)
        %11 = cir.const #cir.int<2> : !u32i loc(#loc106)
        %12 = cir.binop(mul, %10, %11) : !u32i loc(#loc106)
        %13 = cir.const #cir.int<1> : !u32i loc(#loc106)
        %14 = cir.binop(add, %12, %13) : !u32i loc(#loc106)
        %15 = cir.cmp(lt, %8, %14) : !u32i, !cir.bool loc(#loc162)
        cir.if %15 {
          %16 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc164)
          %17 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc112)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc111)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc111)
          %20 = cir.binop(add, %17, %19) : !u32i loc(#loc165)
          cir.store %20, %16 : !u32i, !cir.ptr<!u32i> loc(#loc164)
          %21 = cir.load %16 : !cir.ptr<!u32i>, !u32i loc(#loc113)
          cir.call @printUnsignedLine(%21) : (!u32i) -> () loc(#loc114)
        } else {
          %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc77)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc77)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc115)
        } loc(#loc163)
      } loc(#loc161)
    } loc(#loc159)
    cir.return loc(#loc79)
  } loc(#loc150)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":42:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":24:5)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":24:18)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":25:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":25:31)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":26:5)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":26:31)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":27:12)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":27:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":28:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":33:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":29:9)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":29:30)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":29:29)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":31:30)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":31:9)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":32:21)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":32:10)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":32:9)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":34:5)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":41:5)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":35:9)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":35:30)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":35:29)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":36:9)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":40:9)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":38:13)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":38:42)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":38:35)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":39:31)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":39:13)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":99:1)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":103:1)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":101:5)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":101:13)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":102:5)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":102:13)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":49:1)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":69:1)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":51:5)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":51:18)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":52:5)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":52:31)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":53:5)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":53:31)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":54:12)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":54:5)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":55:5)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":60:5)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":56:9)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":56:30)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":56:29)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":58:16)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":58:9)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":59:21)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":59:10)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":59:9)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":61:5)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":68:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":62:9)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":62:30)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":62:29)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":63:9)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":67:9)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":65:13)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":65:42)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":65:35)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":66:31)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":66:13)
#loc75 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc76 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":94:23)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":72:1)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":97:1)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":74:5)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":74:18)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":75:5)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":75:31)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":76:5)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":76:31)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":77:12)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":77:5)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":78:5)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":83:5)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":79:9)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":79:30)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":79:29)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":81:30)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":81:9)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":82:21)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":82:10)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":82:9)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":84:5)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":96:5)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":85:9)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":85:30)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":85:29)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":87:9)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":95:9)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":87:13)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":87:20)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":88:9)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":91:9)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":93:9)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":89:13)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":89:42)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":89:35)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":90:31)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":90:13)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_32.c":94:13)
#loc116 = loc(fused[#loc1, #loc2])
#loc117 = loc(fused[#loc3, #loc4])
#loc118 = loc(fused[#loc5, #loc6])
#loc119 = loc(fused[#loc7, #loc8])
#loc120 = loc(fused[#loc9, #loc10])
#loc121 = loc(fused[#loc11, #loc12])
#loc122 = loc(fused[#loc14, #loc13])
#loc123 = loc(fused[#loc15, #loc16])
#loc124 = loc(fused[#loc17, #loc18])
#loc125 = loc(fused[#loc21, #loc20])
#loc126 = loc(fused[#loc24, #loc22])
#loc127 = loc(fused[#loc25, #loc26])
#loc128 = loc(fused[#loc27, #loc28])
#loc129 = loc(fused[#loc30, #loc31])
#loc130 = loc(fused[#loc32, #loc33])
#loc131 = loc(fused[#loc34, #loc33])
#loc132 = loc(fused[#loc37, #loc38])
#loc133 = loc(fused[#loc39, #loc40])
#loc134 = loc(fused[#loc41, #loc42])
#loc135 = loc(fused[#loc43, #loc44])
#loc136 = loc(fused[#loc45, #loc46])
#loc137 = loc(fused[#loc47, #loc48])
#loc138 = loc(fused[#loc49, #loc50])
#loc139 = loc(fused[#loc52, #loc51])
#loc140 = loc(fused[#loc53, #loc54])
#loc141 = loc(fused[#loc55, #loc56])
#loc142 = loc(fused[#loc59, #loc58])
#loc143 = loc(fused[#loc62, #loc60])
#loc144 = loc(fused[#loc63, #loc64])
#loc145 = loc(fused[#loc65, #loc66])
#loc146 = loc(fused[#loc68, #loc69])
#loc147 = loc(fused[#loc70, #loc71])
#loc148 = loc(fused[#loc72, #loc71])
#loc149 = loc(fused[#loc75, #loc76])
#loc150 = loc(fused[#loc78, #loc79])
#loc151 = loc(fused[#loc80, #loc81])
#loc152 = loc(fused[#loc82, #loc83])
#loc153 = loc(fused[#loc84, #loc85])
#loc154 = loc(fused[#loc87, #loc86])
#loc155 = loc(fused[#loc88, #loc89])
#loc156 = loc(fused[#loc90, #loc91])
#loc157 = loc(fused[#loc94, #loc93])
#loc158 = loc(fused[#loc97, #loc95])
#loc159 = loc(fused[#loc98, #loc99])
#loc160 = loc(fused[#loc100, #loc101])
#loc161 = loc(fused[#loc103, #loc104])
#loc162 = loc(fused[#loc105, #loc106])
#loc163 = loc(fused[#loc107, #loc108, #loc109, #loc104])
#loc164 = loc(fused[#loc110, #loc111])
#loc165 = loc(fused[#loc112, #loc111])
