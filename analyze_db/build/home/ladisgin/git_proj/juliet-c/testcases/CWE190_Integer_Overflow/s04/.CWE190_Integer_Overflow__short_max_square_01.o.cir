!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc67)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_square_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc69)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc70)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc9)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc9)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc71)
    %4 = cir.const #cir.int<32767> : !s32i loc(#loc11)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc11)
    cir.store %5, %1 : !s16i, !cir.ptr<!s16i> loc(#loc72)
    cir.br ^bb1 loc(#loc73)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc15)
    %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc15)
    %8 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc6)
    %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc6)
    %10 = cir.binop(mul, %7, %9) nsw : !s32i loc(#loc15)
    %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc15)
    cir.store %11, %0 : !s16i, !cir.ptr<!s16i> loc(#loc69)
    %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc16)
    %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc16)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc17)
    cir.br ^bb2 loc(#loc14)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc4)
  } loc(#loc68)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_square_01_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc75)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc20)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc76)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc22)
    cir.return loc(#loc19)
  } loc(#loc74)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc78)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc79)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc30)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc30)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc80)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc32)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc32)
    cir.store %5, %1 : !s16i, !cir.ptr<!s16i> loc(#loc81)
    cir.br ^bb1 loc(#loc82)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc36)
    %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc36)
    %8 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc27)
    %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc27)
    %10 = cir.binop(mul, %7, %9) nsw : !s32i loc(#loc36)
    %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc36)
    cir.store %11, %0 : !s16i, !cir.ptr<!s16i> loc(#loc78)
    %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc37)
    %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc37)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc38)
    cir.br ^bb2 loc(#loc35)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc25)
  } loc(#loc77)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc39)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc42)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc85)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc86)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc49)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc49)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc87)
    %4 = cir.const #cir.int<32767> : !s32i loc(#loc51)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc51)
    cir.store %5, %1 : !s16i, !cir.ptr<!s16i> loc(#loc88)
    cir.br ^bb1 loc(#loc89)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc55)
    %7 = cir.cast(integral, %6 : !s16i), !s64i loc(#loc55)
    %8 = cir.cast(integral, %7 : !s64i), !s32i loc(#loc55)
    %9 = cir.abs %8 poison : !s32i loc(#loc56)
    %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc56)
    %11 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc57)
    %12 = cir.const #cir.int<32767> : !s32i loc(#loc58)
    %13 = cir.cast(int_to_float, %12 : !s32i), !cir.double loc(#loc58)
    %14 = cir.call @sqrt(%13) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc57)
    %15 = cir.cast(float_to_int, %14 : !cir.double), !s64i loc(#loc57)
    %16 = cir.cmp(le, %10, %15) : !s64i, !cir.bool loc(#loc90)
    cir.brcond %16 ^bb2, ^bb3 loc(#loc91)
  ^bb2:  // pred: ^bb1
    %17 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc63)
    %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc63)
    %19 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc46)
    %20 = cir.cast(integral, %19 : !s16i), !s32i loc(#loc46)
    %21 = cir.binop(mul, %18, %20) nsw : !s32i loc(#loc63)
    %22 = cir.cast(integral, %21 : !s32i), !s16i loc(#loc63)
    cir.store %22, %0 : !s16i, !cir.ptr<!s16i> loc(#loc85)
    %23 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc64)
    %24 = cir.cast(integral, %23 : !s16i), !s32i loc(#loc64)
    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc65)
    cir.br ^bb4 loc(#loc61)
  ^bb3:  // pred: ^bb1
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc42)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    cir.br ^bb4 loc(#loc54)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc54)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc44)
  } loc(#loc84)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_01.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__short_max_square_01.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__short_max_square_01.c":35:1)
#loc5 = loc("CWE190_Integer_Overflow__short_max_square_01.c":32:9)
#loc6 = loc("CWE190_Integer_Overflow__short_max_square_01.c":32:31)
#loc7 = loc("CWE190_Integer_Overflow__short_max_square_01.c":26:5)
#loc8 = loc("CWE190_Integer_Overflow__short_max_square_01.c":26:11)
#loc9 = loc("CWE190_Integer_Overflow__short_max_square_01.c":27:12)
#loc10 = loc("CWE190_Integer_Overflow__short_max_square_01.c":27:5)
#loc11 = loc("CWE190_Integer_Overflow__short_max_square_01.c":29:12)
#loc12 = loc("CWE190_Integer_Overflow__short_max_square_01.c":29:5)
#loc13 = loc("CWE190_Integer_Overflow__short_max_square_01.c":30:5)
#loc14 = loc("CWE190_Integer_Overflow__short_max_square_01.c":34:5)
#loc15 = loc("CWE190_Integer_Overflow__short_max_square_01.c":32:24)
#loc16 = loc("CWE190_Integer_Overflow__short_max_square_01.c":33:22)
#loc17 = loc("CWE190_Integer_Overflow__short_max_square_01.c":33:9)
#loc18 = loc("CWE190_Integer_Overflow__short_max_square_01.c":74:1)
#loc19 = loc("CWE190_Integer_Overflow__short_max_square_01.c":78:1)
#loc20 = loc("CWE190_Integer_Overflow__short_max_square_01.c":76:5)
#loc21 = loc("CWE190_Integer_Overflow__short_max_square_01.c":76:13)
#loc22 = loc("CWE190_Integer_Overflow__short_max_square_01.c":77:5)
#loc23 = loc("CWE190_Integer_Overflow__short_max_square_01.c":77:13)
#loc24 = loc("CWE190_Integer_Overflow__short_max_square_01.c":42:1)
#loc25 = loc("CWE190_Integer_Overflow__short_max_square_01.c":53:1)
#loc26 = loc("CWE190_Integer_Overflow__short_max_square_01.c":50:9)
#loc27 = loc("CWE190_Integer_Overflow__short_max_square_01.c":50:31)
#loc28 = loc("CWE190_Integer_Overflow__short_max_square_01.c":44:5)
#loc29 = loc("CWE190_Integer_Overflow__short_max_square_01.c":44:11)
#loc30 = loc("CWE190_Integer_Overflow__short_max_square_01.c":45:12)
#loc31 = loc("CWE190_Integer_Overflow__short_max_square_01.c":45:5)
#loc32 = loc("CWE190_Integer_Overflow__short_max_square_01.c":47:12)
#loc33 = loc("CWE190_Integer_Overflow__short_max_square_01.c":47:5)
#loc34 = loc("CWE190_Integer_Overflow__short_max_square_01.c":48:5)
#loc35 = loc("CWE190_Integer_Overflow__short_max_square_01.c":52:5)
#loc36 = loc("CWE190_Integer_Overflow__short_max_square_01.c":50:24)
#loc37 = loc("CWE190_Integer_Overflow__short_max_square_01.c":51:22)
#loc38 = loc("CWE190_Integer_Overflow__short_max_square_01.c":51:9)
#loc39 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE190_Integer_Overflow__short_max_square_01.c":70:19)
#loc43 = loc("CWE190_Integer_Overflow__short_max_square_01.c":56:1)
#loc44 = loc("CWE190_Integer_Overflow__short_max_square_01.c":72:1)
#loc45 = loc("CWE190_Integer_Overflow__short_max_square_01.c":65:9)
#loc46 = loc("CWE190_Integer_Overflow__short_max_square_01.c":65:31)
#loc47 = loc("CWE190_Integer_Overflow__short_max_square_01.c":58:5)
#loc48 = loc("CWE190_Integer_Overflow__short_max_square_01.c":58:11)
#loc49 = loc("CWE190_Integer_Overflow__short_max_square_01.c":59:12)
#loc50 = loc("CWE190_Integer_Overflow__short_max_square_01.c":59:5)
#loc51 = loc("CWE190_Integer_Overflow__short_max_square_01.c":61:12)
#loc52 = loc("CWE190_Integer_Overflow__short_max_square_01.c":61:5)
#loc53 = loc("CWE190_Integer_Overflow__short_max_square_01.c":63:5)
#loc54 = loc("CWE190_Integer_Overflow__short_max_square_01.c":71:5)
#loc55 = loc("CWE190_Integer_Overflow__short_max_square_01.c":63:19)
#loc56 = loc("CWE190_Integer_Overflow__short_max_square_01.c":63:9)
#loc57 = loc("CWE190_Integer_Overflow__short_max_square_01.c":63:34)
#loc58 = loc("CWE190_Integer_Overflow__short_max_square_01.c":63:47)
#loc59 = loc("CWE190_Integer_Overflow__short_max_square_01.c":63:55)
#loc60 = loc("CWE190_Integer_Overflow__short_max_square_01.c":64:5)
#loc61 = loc("CWE190_Integer_Overflow__short_max_square_01.c":67:5)
#loc62 = loc("CWE190_Integer_Overflow__short_max_square_01.c":69:5)
#loc63 = loc("CWE190_Integer_Overflow__short_max_square_01.c":65:24)
#loc64 = loc("CWE190_Integer_Overflow__short_max_square_01.c":66:22)
#loc65 = loc("CWE190_Integer_Overflow__short_max_square_01.c":66:9)
#loc66 = loc("CWE190_Integer_Overflow__short_max_square_01.c":70:9)
#loc67 = loc(fused[#loc1, #loc2])
#loc68 = loc(fused[#loc3, #loc4])
#loc69 = loc(fused[#loc5, #loc6])
#loc70 = loc(fused[#loc7, #loc8])
#loc71 = loc(fused[#loc10, #loc9])
#loc72 = loc(fused[#loc12, #loc11])
#loc73 = loc(fused[#loc13, #loc14])
#loc74 = loc(fused[#loc18, #loc19])
#loc75 = loc(fused[#loc20, #loc21])
#loc76 = loc(fused[#loc22, #loc23])
#loc77 = loc(fused[#loc24, #loc25])
#loc78 = loc(fused[#loc26, #loc27])
#loc79 = loc(fused[#loc28, #loc29])
#loc80 = loc(fused[#loc31, #loc30])
#loc81 = loc(fused[#loc33, #loc32])
#loc82 = loc(fused[#loc34, #loc35])
#loc83 = loc(fused[#loc40, #loc41])
#loc84 = loc(fused[#loc43, #loc44])
#loc85 = loc(fused[#loc45, #loc46])
#loc86 = loc(fused[#loc47, #loc48])
#loc87 = loc(fused[#loc50, #loc49])
#loc88 = loc(fused[#loc52, #loc51])
#loc89 = loc(fused[#loc53, #loc54])
#loc90 = loc(fused[#loc56, #loc59])
#loc91 = loc(fused[#loc60, #loc61, #loc62, #loc54])
