!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc75 = loc("CWE390_Error_Without_Action__sqrt_12.c":109:10)
#loc76 = loc("CWE390_Error_Without_Action__sqrt_12.c":109:14)
#loc77 = loc("CWE390_Error_Without_Action__sqrt_12.c":109:20)
#loc78 = loc("CWE390_Error_Without_Action__sqrt_12.c":109:32)
#loc174 = loc(fused[#loc75, #loc76])
#loc175 = loc(fused[#loc77, #loc78])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc146)
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc147)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc5)
  cir.func private @printDoubleLine(!cir.double) loc(#loc148)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc149)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc10)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc150)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc152)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc153)
    cir.br ^bb1 loc(#loc154)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc155)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc155)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc21)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %5 ^bb2, ^bb9 loc(#loc156)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc157)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<0> : !s32i loc(#loc28)
    %7 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc29)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    %8 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc30)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc32)
    %11 = cir.cast(int_to_float, %10 : !s32i), !cir.double loc(#loc32)
    %12 = cir.call @sqrt(%11) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc30)
    cir.store %12, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc159)
    cir.br ^bb4 loc(#loc160)
  ^bb4:  // pred: ^bb3
    %13 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc37)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    %15 = cir.const #cir.int<33> : !s32i loc(#loc38)
    %16 = cir.cmp(eq, %14, %15) : !s32i, !cir.bool loc(#loc161)
    cir.brcond %16 ^bb5, ^bb6 loc(#loc162)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc36)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc36)
  ^bb7:  // pred: ^bb6
    %17 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc40)
    cir.call @printDoubleLine(%17) : (!cir.double) -> () loc(#loc41)
    cir.br ^bb8 loc(#loc27)
  ^bb8:  // pred: ^bb7
    cir.br ^bb16 loc(#loc24)
  ^bb9:  // pred: ^bb1
    cir.br ^bb10 loc(#loc163)
  ^bb10:  // pred: ^bb9
    %18 = cir.const #cir.int<0> : !s32i loc(#loc44)
    %19 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc45)
    cir.store %18, %19 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    %20 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc46)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc48)
    %23 = cir.cast(int_to_float, %22 : !s32i), !cir.double loc(#loc48)
    %24 = cir.call @sqrt(%23) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc46)
    cir.store %24, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc165)
    cir.br ^bb11 loc(#loc166)
  ^bb11:  // pred: ^bb10
    %25 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc53)
    %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    %27 = cir.const #cir.int<33> : !s32i loc(#loc54)
    %28 = cir.cmp(eq, %26, %27) : !s32i, !cir.bool loc(#loc167)
    cir.brcond %28 ^bb12, ^bb13 loc(#loc168)
  ^bb12:  // pred: ^bb11
    %29 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc10)
    %30 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc10)
    cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %31 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc57)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc58)
    cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc57)
    cir.br ^bb13 loc(#loc52)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc52)
  ^bb14:  // pred: ^bb13
    %33 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc59)
    cir.call @printDoubleLine(%33) : (!cir.double) -> () loc(#loc60)
    cir.br ^bb15 loc(#loc43)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc20)
  ^bb16:  // 2 preds: ^bb8, ^bb15
    cir.br ^bb17 loc(#loc20)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc14)
  } loc(#loc151)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc170)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    cir.return loc(#loc62)
  } loc(#loc169)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc171)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc72)
  cir.func @main(%arg0: !s32i loc(fused[#loc75, #loc76]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc77, #loc78])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc174)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc175)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc74)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc79)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc80)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc81)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc81)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc82)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc69)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %8 = cir.get_global @CWE390_Error_Without_Action__sqrt_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call @CWE390_Error_Without_Action__sqrt_12_good() : () -> () loc(#loc84)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc70)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc71)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %13 = cir.get_global @CWE390_Error_Without_Action__sqrt_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc177)
    cir.call @CWE390_Error_Without_Action__sqrt_12_bad() : () -> () loc(#loc88)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc72)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc91)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc178)
    cir.return %17 : !s32i loc(#loc178)
  } loc(#loc173)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc180)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc181)
    cir.br ^bb1 loc(#loc182)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc183)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc183)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc101)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc101)
    cir.brcond %5 ^bb2, ^bb9 loc(#loc184)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc185)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<0> : !s32i loc(#loc108)
    %7 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc109)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    %8 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc110)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc112)
    %11 = cir.cast(int_to_float, %10 : !s32i), !cir.double loc(#loc112)
    %12 = cir.call @sqrt(%11) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc110)
    cir.store %12, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc187)
    cir.br ^bb4 loc(#loc188)
  ^bb4:  // pred: ^bb3
    %13 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc117)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    %15 = cir.const #cir.int<33> : !s32i loc(#loc118)
    %16 = cir.cmp(eq, %14, %15) : !s32i, !cir.bool loc(#loc189)
    cir.brcond %16 ^bb5, ^bb6 loc(#loc190)
  ^bb5:  // pred: ^bb4
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc120)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc120)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc122)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc123)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc122)
    cir.br ^bb6 loc(#loc116)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc116)
  ^bb7:  // pred: ^bb6
    %21 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc124)
    cir.call @printDoubleLine(%21) : (!cir.double) -> () loc(#loc125)
    cir.br ^bb8 loc(#loc107)
  ^bb8:  // pred: ^bb7
    cir.br ^bb16 loc(#loc104)
  ^bb9:  // pred: ^bb1
    cir.br ^bb10 loc(#loc191)
  ^bb10:  // pred: ^bb9
    %22 = cir.const #cir.int<0> : !s32i loc(#loc128)
    %23 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc129)
    cir.store %22, %23 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    %24 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc130)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc131)
    %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc132)
    %27 = cir.cast(int_to_float, %26 : !s32i), !cir.double loc(#loc132)
    %28 = cir.call @sqrt(%27) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc130)
    cir.store %28, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc193)
    cir.br ^bb11 loc(#loc194)
  ^bb11:  // pred: ^bb10
    %29 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc137)
    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    %31 = cir.const #cir.int<33> : !s32i loc(#loc138)
    %32 = cir.cmp(eq, %30, %31) : !s32i, !cir.bool loc(#loc195)
    cir.brcond %32 ^bb12, ^bb13 loc(#loc196)
  ^bb12:  // pred: ^bb11
    %33 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc140)
    %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc140)
    cir.call @printLine(%34) : (!cir.ptr<!s8i>) -> () loc(#loc141)
    %35 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc142)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc143)
    cir.call @exit(%36) : (!s32i) -> () extra(#fn_attr) loc(#loc142)
    cir.br ^bb13 loc(#loc136)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc136)
  ^bb14:  // pred: ^bb13
    %37 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc144)
    cir.call @printDoubleLine(%37) : (!cir.double) -> () loc(#loc145)
    cir.br ^bb15 loc(#loc127)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc100)
  ^bb16:  // 2 preds: ^bb8, ^bb15
    cir.br ^bb17 loc(#loc100)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc94)
  } loc(#loc179)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/errno.h":37:1)
#loc4 = loc("/usr/include/errno.h":37:45)
#loc5 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE390_Error_Without_Action__sqrt_12.c":48:27)
#loc11 = loc("/usr/include/stdlib.h":756:1)
#loc12 = loc("/usr/include/stdlib.h":756:70)
#loc13 = loc("CWE390_Error_Without_Action__sqrt_12.c":23:1)
#loc14 = loc("CWE390_Error_Without_Action__sqrt_12.c":54:1)
#loc15 = loc("CWE390_Error_Without_Action__sqrt_12.c":28:13)
#loc16 = loc("CWE390_Error_Without_Action__sqrt_12.c":28:20)
#loc17 = loc("CWE390_Error_Without_Action__sqrt_12.c":42:13)
#loc18 = loc("CWE390_Error_Without_Action__sqrt_12.c":42:20)
#loc19 = loc("CWE390_Error_Without_Action__sqrt_12.c":25:5)
#loc20 = loc("CWE390_Error_Without_Action__sqrt_12.c":53:5)
#loc21 = loc("CWE390_Error_Without_Action__sqrt_12.c":25:8)
#loc22 = loc("CWE390_Error_Without_Action__sqrt_12.c":25:33)
#loc23 = loc("CWE390_Error_Without_Action__sqrt_12.c":26:5)
#loc24 = loc("CWE390_Error_Without_Action__sqrt_12.c":38:5)
#loc25 = loc("CWE390_Error_Without_Action__sqrt_12.c":40:5)
#loc26 = loc("CWE390_Error_Without_Action__sqrt_12.c":27:9)
#loc27 = loc("CWE390_Error_Without_Action__sqrt_12.c":37:9)
#loc28 = loc("CWE390_Error_Without_Action__sqrt_12.c":29:21)
#loc29 = loc("CWE390_Error_Without_Action__sqrt_12.c":29:13)
#loc30 = loc("CWE390_Error_Without_Action__sqrt_12.c":30:36)
#loc31 = loc("CWE390_Error_Without_Action__sqrt_12.c":30:50)
#loc32 = loc("CWE390_Error_Without_Action__sqrt_12.c":30:49)
#loc33 = loc("CWE390_Error_Without_Action__sqrt_12.c":30:13)
#loc34 = loc("CWE390_Error_Without_Action__sqrt_12.c":30:51)
#loc35 = loc("CWE390_Error_Without_Action__sqrt_12.c":32:13)
#loc36 = loc("CWE390_Error_Without_Action__sqrt_12.c":35:13)
#loc37 = loc("CWE390_Error_Without_Action__sqrt_12.c":32:17)
#loc38 = loc("CWE390_Error_Without_Action__sqrt_12.c":32:26)
#loc39 = loc("CWE390_Error_Without_Action__sqrt_12.c":33:13)
#loc40 = loc("CWE390_Error_Without_Action__sqrt_12.c":36:29)
#loc41 = loc("CWE390_Error_Without_Action__sqrt_12.c":36:13)
#loc42 = loc("CWE390_Error_Without_Action__sqrt_12.c":41:9)
#loc43 = loc("CWE390_Error_Without_Action__sqrt_12.c":52:9)
#loc44 = loc("CWE390_Error_Without_Action__sqrt_12.c":43:21)
#loc45 = loc("CWE390_Error_Without_Action__sqrt_12.c":43:13)
#loc46 = loc("CWE390_Error_Without_Action__sqrt_12.c":44:36)
#loc47 = loc("CWE390_Error_Without_Action__sqrt_12.c":44:50)
#loc48 = loc("CWE390_Error_Without_Action__sqrt_12.c":44:49)
#loc49 = loc("CWE390_Error_Without_Action__sqrt_12.c":44:13)
#loc50 = loc("CWE390_Error_Without_Action__sqrt_12.c":44:51)
#loc51 = loc("CWE390_Error_Without_Action__sqrt_12.c":46:13)
#loc52 = loc("CWE390_Error_Without_Action__sqrt_12.c":50:13)
#loc53 = loc("CWE390_Error_Without_Action__sqrt_12.c":46:17)
#loc54 = loc("CWE390_Error_Without_Action__sqrt_12.c":46:26)
#loc55 = loc("CWE390_Error_Without_Action__sqrt_12.c":47:13)
#loc56 = loc("CWE390_Error_Without_Action__sqrt_12.c":48:17)
#loc57 = loc("CWE390_Error_Without_Action__sqrt_12.c":49:17)
#loc58 = loc("CWE390_Error_Without_Action__sqrt_12.c":49:22)
#loc59 = loc("CWE390_Error_Without_Action__sqrt_12.c":51:29)
#loc60 = loc("CWE390_Error_Without_Action__sqrt_12.c":51:13)
#loc61 = loc("CWE390_Error_Without_Action__sqrt_12.c":95:1)
#loc62 = loc("CWE390_Error_Without_Action__sqrt_12.c":98:1)
#loc63 = loc("CWE390_Error_Without_Action__sqrt_12.c":97:5)
#loc64 = loc("CWE390_Error_Without_Action__sqrt_12.c":97:11)
#loc65 = loc("/usr/include/stdlib.h":575:1)
#loc66 = loc("/usr/include/stdlib.h":575:41)
#loc67 = loc("/usr/include/time.h":76:1)
#loc68 = loc("/usr/include/time.h":76:38)
#loc69 = loc("CWE390_Error_Without_Action__sqrt_12.c":114:15)
#loc70 = loc("CWE390_Error_Without_Action__sqrt_12.c":116:15)
#loc71 = loc("CWE390_Error_Without_Action__sqrt_12.c":119:15)
#loc72 = loc("CWE390_Error_Without_Action__sqrt_12.c":121:15)
#loc73 = loc("CWE390_Error_Without_Action__sqrt_12.c":109:1)
#loc74 = loc("CWE390_Error_Without_Action__sqrt_12.c":124:1)
#loc79 = loc("CWE390_Error_Without_Action__sqrt_12.c":110:1)
#loc80 = loc("CWE390_Error_Without_Action__sqrt_12.c":112:27)
#loc81 = loc("CWE390_Error_Without_Action__sqrt_12.c":112:22)
#loc82 = loc("CWE390_Error_Without_Action__sqrt_12.c":112:5)
#loc83 = loc("CWE390_Error_Without_Action__sqrt_12.c":114:5)
#loc84 = loc("CWE390_Error_Without_Action__sqrt_12.c":115:5)
#loc85 = loc("CWE390_Error_Without_Action__sqrt_12.c":115:47)
#loc86 = loc("CWE390_Error_Without_Action__sqrt_12.c":116:5)
#loc87 = loc("CWE390_Error_Without_Action__sqrt_12.c":119:5)
#loc88 = loc("CWE390_Error_Without_Action__sqrt_12.c":120:5)
#loc89 = loc("CWE390_Error_Without_Action__sqrt_12.c":120:46)
#loc90 = loc("CWE390_Error_Without_Action__sqrt_12.c":121:5)
#loc91 = loc("CWE390_Error_Without_Action__sqrt_12.c":123:12)
#loc92 = loc("CWE390_Error_Without_Action__sqrt_12.c":123:5)
#loc93 = loc("CWE390_Error_Without_Action__sqrt_12.c":61:1)
#loc94 = loc("CWE390_Error_Without_Action__sqrt_12.c":93:1)
#loc95 = loc("CWE390_Error_Without_Action__sqrt_12.c":66:13)
#loc96 = loc("CWE390_Error_Without_Action__sqrt_12.c":66:20)
#loc97 = loc("CWE390_Error_Without_Action__sqrt_12.c":81:13)
#loc98 = loc("CWE390_Error_Without_Action__sqrt_12.c":81:20)
#loc99 = loc("CWE390_Error_Without_Action__sqrt_12.c":63:5)
#loc100 = loc("CWE390_Error_Without_Action__sqrt_12.c":92:5)
#loc101 = loc("CWE390_Error_Without_Action__sqrt_12.c":63:8)
#loc102 = loc("CWE390_Error_Without_Action__sqrt_12.c":63:33)
#loc103 = loc("CWE390_Error_Without_Action__sqrt_12.c":64:5)
#loc104 = loc("CWE390_Error_Without_Action__sqrt_12.c":77:5)
#loc105 = loc("CWE390_Error_Without_Action__sqrt_12.c":79:5)
#loc106 = loc("CWE390_Error_Without_Action__sqrt_12.c":65:9)
#loc107 = loc("CWE390_Error_Without_Action__sqrt_12.c":76:9)
#loc108 = loc("CWE390_Error_Without_Action__sqrt_12.c":67:21)
#loc109 = loc("CWE390_Error_Without_Action__sqrt_12.c":67:13)
#loc110 = loc("CWE390_Error_Without_Action__sqrt_12.c":68:36)
#loc111 = loc("CWE390_Error_Without_Action__sqrt_12.c":68:50)
#loc112 = loc("CWE390_Error_Without_Action__sqrt_12.c":68:49)
#loc113 = loc("CWE390_Error_Without_Action__sqrt_12.c":68:13)
#loc114 = loc("CWE390_Error_Without_Action__sqrt_12.c":68:51)
#loc115 = loc("CWE390_Error_Without_Action__sqrt_12.c":70:13)
#loc116 = loc("CWE390_Error_Without_Action__sqrt_12.c":74:13)
#loc117 = loc("CWE390_Error_Without_Action__sqrt_12.c":70:17)
#loc118 = loc("CWE390_Error_Without_Action__sqrt_12.c":70:26)
#loc119 = loc("CWE390_Error_Without_Action__sqrt_12.c":71:13)
#loc120 = loc("CWE390_Error_Without_Action__sqrt_12.c":72:27)
#loc121 = loc("CWE390_Error_Without_Action__sqrt_12.c":72:17)
#loc122 = loc("CWE390_Error_Without_Action__sqrt_12.c":73:17)
#loc123 = loc("CWE390_Error_Without_Action__sqrt_12.c":73:22)
#loc124 = loc("CWE390_Error_Without_Action__sqrt_12.c":75:29)
#loc125 = loc("CWE390_Error_Without_Action__sqrt_12.c":75:13)
#loc126 = loc("CWE390_Error_Without_Action__sqrt_12.c":80:9)
#loc127 = loc("CWE390_Error_Without_Action__sqrt_12.c":91:9)
#loc128 = loc("CWE390_Error_Without_Action__sqrt_12.c":82:21)
#loc129 = loc("CWE390_Error_Without_Action__sqrt_12.c":82:13)
#loc130 = loc("CWE390_Error_Without_Action__sqrt_12.c":83:36)
#loc131 = loc("CWE390_Error_Without_Action__sqrt_12.c":83:50)
#loc132 = loc("CWE390_Error_Without_Action__sqrt_12.c":83:49)
#loc133 = loc("CWE390_Error_Without_Action__sqrt_12.c":83:13)
#loc134 = loc("CWE390_Error_Without_Action__sqrt_12.c":83:51)
#loc135 = loc("CWE390_Error_Without_Action__sqrt_12.c":85:13)
#loc136 = loc("CWE390_Error_Without_Action__sqrt_12.c":89:13)
#loc137 = loc("CWE390_Error_Without_Action__sqrt_12.c":85:17)
#loc138 = loc("CWE390_Error_Without_Action__sqrt_12.c":85:26)
#loc139 = loc("CWE390_Error_Without_Action__sqrt_12.c":86:13)
#loc140 = loc("CWE390_Error_Without_Action__sqrt_12.c":87:27)
#loc141 = loc("CWE390_Error_Without_Action__sqrt_12.c":87:17)
#loc142 = loc("CWE390_Error_Without_Action__sqrt_12.c":88:17)
#loc143 = loc("CWE390_Error_Without_Action__sqrt_12.c":88:22)
#loc144 = loc("CWE390_Error_Without_Action__sqrt_12.c":90:29)
#loc145 = loc("CWE390_Error_Without_Action__sqrt_12.c":90:13)
#loc146 = loc(fused[#loc1, #loc2])
#loc147 = loc(fused[#loc3, #loc4])
#loc148 = loc(fused[#loc6, #loc7])
#loc149 = loc(fused[#loc8, #loc9])
#loc150 = loc(fused[#loc11, #loc12])
#loc151 = loc(fused[#loc13, #loc14])
#loc152 = loc(fused[#loc15, #loc16])
#loc153 = loc(fused[#loc17, #loc18])
#loc154 = loc(fused[#loc19, #loc20])
#loc155 = loc(fused[#loc21, #loc22])
#loc156 = loc(fused[#loc23, #loc24, #loc25, #loc20])
#loc157 = loc(fused[#loc26, #loc27])
#loc158 = loc(fused[#loc29, #loc28])
#loc159 = loc(fused[#loc33, #loc34])
#loc160 = loc(fused[#loc35, #loc36])
#loc161 = loc(fused[#loc37, #loc38])
#loc162 = loc(fused[#loc39, #loc36])
#loc163 = loc(fused[#loc42, #loc43])
#loc164 = loc(fused[#loc45, #loc44])
#loc165 = loc(fused[#loc49, #loc50])
#loc166 = loc(fused[#loc51, #loc52])
#loc167 = loc(fused[#loc53, #loc54])
#loc168 = loc(fused[#loc55, #loc52])
#loc169 = loc(fused[#loc61, #loc62])
#loc170 = loc(fused[#loc63, #loc64])
#loc171 = loc(fused[#loc65, #loc66])
#loc172 = loc(fused[#loc67, #loc68])
#loc173 = loc(fused[#loc73, #loc74])
#loc176 = loc(fused[#loc84, #loc85])
#loc177 = loc(fused[#loc88, #loc89])
#loc178 = loc(fused[#loc92, #loc91])
#loc179 = loc(fused[#loc93, #loc94])
#loc180 = loc(fused[#loc95, #loc96])
#loc181 = loc(fused[#loc97, #loc98])
#loc182 = loc(fused[#loc99, #loc100])
#loc183 = loc(fused[#loc101, #loc102])
#loc184 = loc(fused[#loc103, #loc104, #loc105, #loc100])
#loc185 = loc(fused[#loc106, #loc107])
#loc186 = loc(fused[#loc109, #loc108])
#loc187 = loc(fused[#loc113, #loc114])
#loc188 = loc(fused[#loc115, #loc116])
#loc189 = loc(fused[#loc117, #loc118])
#loc190 = loc(fused[#loc119, #loc116])
#loc191 = loc(fused[#loc126, #loc127])
#loc192 = loc(fused[#loc129, #loc128])
#loc193 = loc(fused[#loc133, #loc134])
#loc194 = loc(fused[#loc135, #loc136])
#loc195 = loc(fused[#loc137, #loc138])
#loc196 = loc(fused[#loc139, #loc136])
