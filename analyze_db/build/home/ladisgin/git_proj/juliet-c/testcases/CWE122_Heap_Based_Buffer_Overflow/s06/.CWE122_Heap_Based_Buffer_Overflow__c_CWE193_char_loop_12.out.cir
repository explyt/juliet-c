!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":111:10)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":111:14)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":111:20)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":111:32)
#loc241 = loc(fused[#loc104, #loc105])
#loc242 = loc(fused[#loc106, #loc107])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.goodG2B.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc197)
  cir.global "private" constant cir_private @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc198)
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc199)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc200)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc201)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc202)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc203)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc204)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc206)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc21)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc207)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc209)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc209)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc25)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc25)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc30)
        %7 = cir.const #cir.int<10> : !s32i loc(#loc31)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc31)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc211)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc212)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc30)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc213)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc214)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc39)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc39)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc216)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc41)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc42)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc43)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc41)
          } loc(#loc217)
        } loc(#loc215)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc44)
        %7 = cir.const #cir.int<10> : !s32i loc(#loc45)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc46)
        %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc45)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc45)
        %11 = cir.const #cir.int<1> : !u64i loc(#loc218)
        %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc219)
        %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc44)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc220)
        cir.store %14, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc221)
        cir.scope {
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
          %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc55)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc55)
          %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc223)
          cir.if %18 {
            %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc57)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc58)
            %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc59)
            cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc57)
          } loc(#loc224)
        } loc(#loc222)
      } loc(#loc210)
    } loc(#loc208)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc198)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc226)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc227)
      %5 = cir.get_global @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc198)
      cir.copy %5 to %2 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc198)
      %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc65)
      %7 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc66)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc65)
      cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc228)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc71)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc71)
        cir.store %14, %3 : !u64i, !cir.ptr<!u64i> loc(#loc230)
        cir.for : cond {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc73)
          %16 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc74)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc75)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc75)
          %19 = cir.binop(add, %16, %18) : !u64i loc(#loc231)
          %20 = cir.cmp(lt, %15, %19) : !u64i, !cir.bool loc(#loc232)
          cir.condition(%20) loc(#loc76)
        } body {
          cir.scope {
            %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc78)
            %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc79)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !u64i), !cir.ptr<!s8i> loc(#loc79)
            %18 = cir.load %17 : !cir.ptr<!s8i>, !s8i loc(#loc79)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
            %20 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc81)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %20 : !u64i), !cir.ptr<!s8i> loc(#loc82)
            cir.store %18, %21 : !s8i, !cir.ptr<!s8i> loc(#loc234)
          } loc(#loc233)
          cir.yield loc(#loc70)
        } step {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc84)
          %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc85)
          cir.store %16, %3 : !u64i, !cir.ptr<!u64i> loc(#loc235)
          cir.yield loc(#loc229)
        } loc(#loc229)
      } loc(#loc229)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc86)
      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc87)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc88)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc89)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc88)
    } loc(#loc225)
    cir.return loc(#loc18)
  } loc(#loc205)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc237)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc92)
    cir.return loc(#loc91)
  } loc(#loc236)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc238)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc239)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc101)
  cir.func @main(%arg0: !s32i loc(fused[#loc104, #loc105]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc106, #loc107])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc241)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc242)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc103)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc108)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc109)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc110)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc110)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc111)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc98)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc98)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc243)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12_good() : () -> () loc(#loc113)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc99)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc115)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc100)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc100)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc244)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12_bad() : () -> () loc(#loc117)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc101)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc119)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc120)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc245)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc245)
    cir.return %17 : !s32i loc(#loc245)
  } loc(#loc240)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc247)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc126)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc248)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc250)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc250)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc130)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc130)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc135)
        %7 = cir.const #cir.int<10> : !s32i loc(#loc136)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc137)
        %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc136)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc136)
        %11 = cir.const #cir.int<1> : !u64i loc(#loc252)
        %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc253)
        %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc135)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc254)
        cir.store %14, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc255)
        cir.scope {
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
          %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc146)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc146)
          %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc257)
          cir.if %18 {
            %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc148)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc149)
            %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc150)
            cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc148)
          } loc(#loc258)
        } loc(#loc256)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc151)
        %7 = cir.const #cir.int<10> : !s32i loc(#loc152)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc153)
        %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc152)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc152)
        %11 = cir.const #cir.int<1> : !u64i loc(#loc259)
        %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc260)
        %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc151)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc261)
        cir.store %14, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc262)
        cir.scope {
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc161)
          %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc162)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc162)
          %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc264)
          cir.if %18 {
            %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc164)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc165)
            %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc166)
            cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc164)
          } loc(#loc265)
        } loc(#loc263)
      } loc(#loc251)
    } loc(#loc249)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc197)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc267)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc268)
      %5 = cir.get_global @__const.goodG2B.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc197)
      cir.copy %5 to %2 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc197)
      %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc172)
      %7 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc173)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc172)
      cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc269)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc178)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc178)
        cir.store %14, %3 : !u64i, !cir.ptr<!u64i> loc(#loc271)
        cir.for : cond {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc180)
          %16 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc181)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc182)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc182)
          %19 = cir.binop(add, %16, %18) : !u64i loc(#loc272)
          %20 = cir.cmp(lt, %15, %19) : !u64i, !cir.bool loc(#loc273)
          cir.condition(%20) loc(#loc183)
        } body {
          cir.scope {
            %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc185)
            %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc186)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !u64i), !cir.ptr<!s8i> loc(#loc186)
            %18 = cir.load %17 : !cir.ptr<!s8i>, !s8i loc(#loc186)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc187)
            %20 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc188)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %20 : !u64i), !cir.ptr<!s8i> loc(#loc189)
            cir.store %18, %21 : !s8i, !cir.ptr<!s8i> loc(#loc275)
          } loc(#loc274)
          cir.yield loc(#loc177)
        } step {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc191)
          %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc192)
          cir.store %16, %3 : !u64i, !cir.ptr<!u64i> loc(#loc276)
          cir.yield loc(#loc270)
        } loc(#loc270)
      } loc(#loc270)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc193)
      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc194)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc195)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc196)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc196)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc195)
    } loc(#loc266)
    cir.return loc(#loc123)
  } loc(#loc246)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":82:9)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":82:29)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":45:9)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":45:29)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc7 = loc("/usr/include/stdlib.h":672:1)
#loc8 = loc("/usr/include/stdlib.h":672:45)
#loc9 = loc("/usr/include/stdlib.h":756:1)
#loc10 = loc("/usr/include/stdlib.h":756:70)
#loc11 = loc("/usr/include/string.h":407:1)
#loc12 = loc("/usr/include/string.h":408:33)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":28:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":57:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":30:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":30:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":31:12)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":31:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":32:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":43:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":32:8)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":32:33)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":33:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":37:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":39:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":35:24)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":35:31)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":35:34)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":35:45)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":35:46)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":35:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":36:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":36:37)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":36:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":36:21)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":36:27)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":36:28)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":36:34)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":36:33)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":41:24)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":41:32)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":41:35)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":41:38)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":41:49)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":41:31)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":41:50)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":41:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":42:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":42:37)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":42:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":42:21)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":42:27)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":42:28)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":42:34)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":42:33)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":44:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":56:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":46:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":46:16)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":46:19)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":47:21)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":47:28)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":47:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":47:34)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":50:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":53:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":50:18)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":50:14)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":50:21)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":50:25)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":50:37)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":50:23)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":51:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":52:30)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":52:23)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":52:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":52:18)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":52:19)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":52:31)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":50:41)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":50:40)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":54:19)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":54:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":55:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":55:14)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":96:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":99:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":98:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":98:13)
#loc94 = loc("/usr/include/stdlib.h":575:1)
#loc95 = loc("/usr/include/stdlib.h":575:41)
#loc96 = loc("/usr/include/time.h":76:1)
#loc97 = loc("/usr/include/time.h":76:38)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":116:15)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":118:15)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":121:15)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":123:15)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":111:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":126:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":112:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":114:27)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":114:22)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":114:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":116:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":117:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":117:67)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":118:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":121:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":122:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":122:66)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":123:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":125:12)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":125:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":65:1)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":94:1)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":67:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":67:12)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":68:12)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":68:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":69:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":80:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":69:8)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":69:33)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":70:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":74:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":76:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":72:24)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":72:32)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":72:35)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":72:38)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":72:49)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":72:31)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":72:50)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":72:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":73:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":73:37)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":73:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":73:21)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":73:27)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":73:28)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":73:34)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":73:33)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":78:24)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":78:32)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":78:35)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":78:38)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":78:49)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":78:31)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":78:50)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":78:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":79:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":79:37)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":79:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":79:21)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":79:27)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":79:28)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":79:34)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":79:33)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":81:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":93:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":83:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":83:16)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":83:19)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":84:21)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":84:28)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":84:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":84:34)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":87:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":90:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":87:18)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":87:14)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":87:21)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":87:25)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":87:37)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":87:23)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":88:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":89:30)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":89:23)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":89:13)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":89:18)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":89:19)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":89:31)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":87:41)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":87:40)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":91:19)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":91:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":92:9)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c":92:14)
#loc197 = loc(fused[#loc1, #loc2])
#loc198 = loc(fused[#loc3, #loc4])
#loc199 = loc(fused[#loc5, #loc6])
#loc200 = loc(fused[#loc7, #loc8])
#loc201 = loc(fused[#loc9, #loc10])
#loc202 = loc(fused[#loc11, #loc12])
#loc203 = loc(fused[#loc13, #loc14])
#loc204 = loc(fused[#loc15, #loc16])
#loc205 = loc(fused[#loc17, #loc18])
#loc206 = loc(fused[#loc19, #loc20])
#loc207 = loc(fused[#loc22, #loc21])
#loc208 = loc(fused[#loc23, #loc24])
#loc209 = loc(fused[#loc25, #loc26])
#loc210 = loc(fused[#loc27, #loc28, #loc29, #loc24])
#loc211 = loc(fused[#loc32, #loc33])
#loc212 = loc(fused[#loc31, #loc33])
#loc213 = loc(fused[#loc30, #loc34])
#loc214 = loc(fused[#loc35, #loc34])
#loc215 = loc(fused[#loc36, #loc37])
#loc216 = loc(fused[#loc38, #loc39])
#loc217 = loc(fused[#loc40, #loc37])
#loc218 = loc(fused[#loc47, #loc48])
#loc219 = loc(fused[#loc49, #loc48])
#loc220 = loc(fused[#loc44, #loc50])
#loc221 = loc(fused[#loc51, #loc50])
#loc222 = loc(fused[#loc52, #loc53])
#loc223 = loc(fused[#loc54, #loc55])
#loc224 = loc(fused[#loc56, #loc53])
#loc225 = loc(fused[#loc60, #loc61])
#loc226 = loc(fused[#loc62, #loc63])
#loc227 = loc(fused[#loc62, #loc64])
#loc228 = loc(fused[#loc67, #loc68])
#loc229 = loc(fused[#loc69, #loc70])
#loc230 = loc(fused[#loc72, #loc71])
#loc231 = loc(fused[#loc74, #loc75])
#loc232 = loc(fused[#loc73, #loc75])
#loc233 = loc(fused[#loc77, #loc70])
#loc234 = loc(fused[#loc80, #loc83])
#loc235 = loc(fused[#loc85, #loc84])
#loc236 = loc(fused[#loc90, #loc91])
#loc237 = loc(fused[#loc92, #loc93])
#loc238 = loc(fused[#loc94, #loc95])
#loc239 = loc(fused[#loc96, #loc97])
#loc240 = loc(fused[#loc102, #loc103])
#loc243 = loc(fused[#loc113, #loc114])
#loc244 = loc(fused[#loc117, #loc118])
#loc245 = loc(fused[#loc121, #loc120])
#loc246 = loc(fused[#loc122, #loc123])
#loc247 = loc(fused[#loc124, #loc125])
#loc248 = loc(fused[#loc127, #loc126])
#loc249 = loc(fused[#loc128, #loc129])
#loc250 = loc(fused[#loc130, #loc131])
#loc251 = loc(fused[#loc132, #loc133, #loc134, #loc129])
#loc252 = loc(fused[#loc138, #loc139])
#loc253 = loc(fused[#loc140, #loc139])
#loc254 = loc(fused[#loc135, #loc141])
#loc255 = loc(fused[#loc142, #loc141])
#loc256 = loc(fused[#loc143, #loc144])
#loc257 = loc(fused[#loc145, #loc146])
#loc258 = loc(fused[#loc147, #loc144])
#loc259 = loc(fused[#loc154, #loc155])
#loc260 = loc(fused[#loc156, #loc155])
#loc261 = loc(fused[#loc151, #loc157])
#loc262 = loc(fused[#loc158, #loc157])
#loc263 = loc(fused[#loc159, #loc160])
#loc264 = loc(fused[#loc161, #loc162])
#loc265 = loc(fused[#loc163, #loc160])
#loc266 = loc(fused[#loc167, #loc168])
#loc267 = loc(fused[#loc169, #loc170])
#loc268 = loc(fused[#loc169, #loc171])
#loc269 = loc(fused[#loc174, #loc175])
#loc270 = loc(fused[#loc176, #loc177])
#loc271 = loc(fused[#loc179, #loc178])
#loc272 = loc(fused[#loc181, #loc182])
#loc273 = loc(fused[#loc180, #loc182])
#loc274 = loc(fused[#loc184, #loc177])
#loc275 = loc(fused[#loc187, #loc190])
#loc276 = loc(fused[#loc192, #loc191])
