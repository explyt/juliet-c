!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodB2G2.myString = #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc187)
  cir.global "private" constant cir_private @__const.goodB2G1.myString = #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc188)
  cir.global "private" constant cir_private @__const.CWE401_Memory_Leak__strdup_char_15_bad.myString = #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc189)
  cir.func private @strdup(!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc190)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc191)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc11)
  cir.func no_proto @CWE401_Memory_Leak__strdup_char_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc193)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc16)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc194)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc20)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc189)
            %4 = cir.get_global @__const.CWE401_Memory_Leak__strdup_char_15_bad.myString : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc189)
            cir.copy %4 to %3 : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc189)
            %5 = cir.get_global @strdup : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc24)
            %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc25)
            %7 = cir.call @strdup(%6) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc24)
            cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc197)
            %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc29)
          } loc(#loc196)
          cir.break loc(#loc30)
        } loc(#loc21)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc11)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc11)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc32)
          cir.break loc(#loc33)
        } loc(#loc31)
        cir.yield loc(#loc18)
      } loc(#loc18)
    } loc(#loc195)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc36)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.break loc(#loc38)
        } loc(#loc37)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc40)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc40)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc41)
          cir.break loc(#loc42)
        } loc(#loc39)
        cir.yield loc(#loc34)
      } loc(#loc34)
    } loc(#loc198)
    cir.return loc(#loc13)
  } loc(#loc192)
  cir.func no_proto @CWE401_Memory_Leak__strdup_char_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc200)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc201)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc202)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc49)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc203)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc51)
    cir.return loc(#loc44)
  } loc(#loc199)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc204)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc206)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc59)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc207)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc63)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc188)
            %4 = cir.get_global @__const.goodB2G1.myString : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc188)
            cir.copy %4 to %3 : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc188)
            %5 = cir.get_global @strdup : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc67)
            %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc68)
            %7 = cir.call @strdup(%6) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc67)
            cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc210)
            %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc72)
          } loc(#loc209)
          cir.break loc(#loc73)
        } loc(#loc64)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc75)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc75)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc76)
          cir.break loc(#loc77)
        } loc(#loc74)
        cir.yield loc(#loc61)
      } loc(#loc61)
    } loc(#loc208)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc80)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc82)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc82)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc83)
          cir.break loc(#loc84)
        } loc(#loc81)
        cir.case(default, []) {
          %3 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc86)
          %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
          %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc87)
          cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc86)
          cir.break loc(#loc88)
        } loc(#loc85)
        cir.yield loc(#loc78)
      } loc(#loc78)
    } loc(#loc211)
    cir.return loc(#loc56)
  } loc(#loc205)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc213)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc93)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc214)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc97)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc187)
            %4 = cir.get_global @__const.goodB2G2.myString : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc187)
            cir.copy %4 to %3 : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc187)
            %5 = cir.get_global @strdup : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc101)
            %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc102)
            %7 = cir.call @strdup(%6) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc101)
            cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc217)
            %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc106)
          } loc(#loc216)
          cir.break loc(#loc107)
        } loc(#loc98)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc109)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc109)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc110)
          cir.break loc(#loc111)
        } loc(#loc108)
        cir.yield loc(#loc95)
      } loc(#loc95)
    } loc(#loc215)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc114)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %3 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc116)
          %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
          %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc117)
          cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc116)
          cir.break loc(#loc118)
        } loc(#loc115)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc120)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc120)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc121)
          cir.break loc(#loc122)
        } loc(#loc119)
        cir.yield loc(#loc112)
      } loc(#loc112)
    } loc(#loc218)
    cir.return loc(#loc90)
  } loc(#loc212)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc219)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"a string\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc125)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc221)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc130)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc222)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc134)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc136)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc136)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc137)
          cir.break loc(#loc138)
        } loc(#loc135)
        cir.case(default, []) {
          %3 = cir.const #cir.int<100> : !s32i loc(#loc140)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc140)
          %5 = cir.const #cir.int<1> : !u64i loc(#loc140)
          %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc140)
          %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc140)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc140)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc140)
          cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc224)
          %10 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc142)
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
          %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc125)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc125)
          %14 = cir.call @strcpy(%11, %13) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc142)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc144)
          cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc145)
          cir.break loc(#loc146)
        } loc(#loc139)
        cir.yield loc(#loc132)
      } loc(#loc132)
    } loc(#loc223)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc149)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.break loc(#loc151)
        } loc(#loc150)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc153)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc153)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc154)
          cir.break loc(#loc155)
        } loc(#loc152)
        cir.yield loc(#loc147)
      } loc(#loc147)
    } loc(#loc225)
    cir.return loc(#loc127)
  } loc(#loc220)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc227)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc160)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc228)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc164)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.const #cir.int<100> : !s32i loc(#loc166)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc166)
          %5 = cir.const #cir.int<1> : !u64i loc(#loc166)
          %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc166)
          %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc166)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc166)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc166)
          cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc230)
          %10 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc168)
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc169)
          %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc170)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc170)
          %14 = cir.call @strcpy(%11, %13) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc168)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc171)
          cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc172)
          cir.break loc(#loc173)
        } loc(#loc165)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc175)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc175)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc176)
          cir.break loc(#loc177)
        } loc(#loc174)
        cir.yield loc(#loc162)
      } loc(#loc162)
    } loc(#loc229)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc180)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.break loc(#loc182)
        } loc(#loc181)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc184)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc184)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc185)
          cir.break loc(#loc186)
        } loc(#loc183)
        cir.yield loc(#loc178)
      } loc(#loc178)
    } loc(#loc231)
    cir.return loc(#loc157)
  } loc(#loc226)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_15.c":0:0)
#loc1 = loc("CWE401_Memory_Leak__strdup_char_15.c":105:9)
#loc2 = loc("CWE401_Memory_Leak__strdup_char_15.c":105:27)
#loc3 = loc("CWE401_Memory_Leak__strdup_char_15.c":71:9)
#loc4 = loc("CWE401_Memory_Leak__strdup_char_15.c":71:27)
#loc5 = loc("CWE401_Memory_Leak__strdup_char_15.c":32:9)
#loc6 = loc("CWE401_Memory_Leak__strdup_char_15.c":32:27)
#loc7 = loc("/usr/include/string.h":187:1)
#loc8 = loc("/usr/include/string.h":188:35)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE401_Memory_Leak__strdup_char_15.c":41:19)
#loc12 = loc("CWE401_Memory_Leak__strdup_char_15.c":24:1)
#loc13 = loc("CWE401_Memory_Leak__strdup_char_15.c":56:1)
#loc14 = loc("CWE401_Memory_Leak__strdup_char_15.c":26:5)
#loc15 = loc("CWE401_Memory_Leak__strdup_char_15.c":26:12)
#loc16 = loc("CWE401_Memory_Leak__strdup_char_15.c":27:12)
#loc17 = loc("CWE401_Memory_Leak__strdup_char_15.c":27:5)
#loc18 = loc("CWE401_Memory_Leak__strdup_char_15.c":28:5)
#loc19 = loc("CWE401_Memory_Leak__strdup_char_15.c":43:5)
#loc20 = loc("CWE401_Memory_Leak__strdup_char_15.c":28:12)
#loc21 = loc("CWE401_Memory_Leak__strdup_char_15.c":30:5)
#loc22 = loc("CWE401_Memory_Leak__strdup_char_15.c":31:5)
#loc23 = loc("CWE401_Memory_Leak__strdup_char_15.c":37:5)
#loc24 = loc("CWE401_Memory_Leak__strdup_char_15.c":34:16)
#loc25 = loc("CWE401_Memory_Leak__strdup_char_15.c":34:23)
#loc26 = loc("CWE401_Memory_Leak__strdup_char_15.c":34:9)
#loc27 = loc("CWE401_Memory_Leak__strdup_char_15.c":34:31)
#loc28 = loc("CWE401_Memory_Leak__strdup_char_15.c":36:19)
#loc29 = loc("CWE401_Memory_Leak__strdup_char_15.c":36:9)
#loc30 = loc("CWE401_Memory_Leak__strdup_char_15.c":38:5)
#loc31 = loc("CWE401_Memory_Leak__strdup_char_15.c":39:5)
#loc32 = loc("CWE401_Memory_Leak__strdup_char_15.c":41:9)
#loc33 = loc("CWE401_Memory_Leak__strdup_char_15.c":42:9)
#loc34 = loc("CWE401_Memory_Leak__strdup_char_15.c":44:5)
#loc35 = loc("CWE401_Memory_Leak__strdup_char_15.c":55:5)
#loc36 = loc("CWE401_Memory_Leak__strdup_char_15.c":44:12)
#loc37 = loc("CWE401_Memory_Leak__strdup_char_15.c":46:5)
#loc38 = loc("CWE401_Memory_Leak__strdup_char_15.c":50:9)
#loc39 = loc("CWE401_Memory_Leak__strdup_char_15.c":51:5)
#loc40 = loc("CWE401_Memory_Leak__strdup_char_15.c":53:19)
#loc41 = loc("CWE401_Memory_Leak__strdup_char_15.c":53:9)
#loc42 = loc("CWE401_Memory_Leak__strdup_char_15.c":54:9)
#loc43 = loc("CWE401_Memory_Leak__strdup_char_15.c":196:1)
#loc44 = loc("CWE401_Memory_Leak__strdup_char_15.c":202:1)
#loc45 = loc("CWE401_Memory_Leak__strdup_char_15.c":198:5)
#loc46 = loc("CWE401_Memory_Leak__strdup_char_15.c":198:14)
#loc47 = loc("CWE401_Memory_Leak__strdup_char_15.c":199:5)
#loc48 = loc("CWE401_Memory_Leak__strdup_char_15.c":199:14)
#loc49 = loc("CWE401_Memory_Leak__strdup_char_15.c":200:5)
#loc50 = loc("CWE401_Memory_Leak__strdup_char_15.c":200:14)
#loc51 = loc("CWE401_Memory_Leak__strdup_char_15.c":201:5)
#loc52 = loc("CWE401_Memory_Leak__strdup_char_15.c":201:14)
#loc53 = loc("/usr/include/stdlib.h":687:1)
#loc54 = loc("/usr/include/stdlib.h":687:32)
#loc55 = loc("CWE401_Memory_Leak__strdup_char_15.c":63:1)
#loc56 = loc("CWE401_Memory_Leak__strdup_char_15.c":94:1)
#loc57 = loc("CWE401_Memory_Leak__strdup_char_15.c":65:5)
#loc58 = loc("CWE401_Memory_Leak__strdup_char_15.c":65:12)
#loc59 = loc("CWE401_Memory_Leak__strdup_char_15.c":66:12)
#loc60 = loc("CWE401_Memory_Leak__strdup_char_15.c":66:5)
#loc61 = loc("CWE401_Memory_Leak__strdup_char_15.c":67:5)
#loc62 = loc("CWE401_Memory_Leak__strdup_char_15.c":82:5)
#loc63 = loc("CWE401_Memory_Leak__strdup_char_15.c":67:12)
#loc64 = loc("CWE401_Memory_Leak__strdup_char_15.c":69:5)
#loc65 = loc("CWE401_Memory_Leak__strdup_char_15.c":70:5)
#loc66 = loc("CWE401_Memory_Leak__strdup_char_15.c":76:5)
#loc67 = loc("CWE401_Memory_Leak__strdup_char_15.c":73:16)
#loc68 = loc("CWE401_Memory_Leak__strdup_char_15.c":73:23)
#loc69 = loc("CWE401_Memory_Leak__strdup_char_15.c":73:9)
#loc70 = loc("CWE401_Memory_Leak__strdup_char_15.c":73:31)
#loc71 = loc("CWE401_Memory_Leak__strdup_char_15.c":75:19)
#loc72 = loc("CWE401_Memory_Leak__strdup_char_15.c":75:9)
#loc73 = loc("CWE401_Memory_Leak__strdup_char_15.c":77:5)
#loc74 = loc("CWE401_Memory_Leak__strdup_char_15.c":78:5)
#loc75 = loc("CWE401_Memory_Leak__strdup_char_15.c":80:19)
#loc76 = loc("CWE401_Memory_Leak__strdup_char_15.c":80:9)
#loc77 = loc("CWE401_Memory_Leak__strdup_char_15.c":81:9)
#loc78 = loc("CWE401_Memory_Leak__strdup_char_15.c":83:5)
#loc79 = loc("CWE401_Memory_Leak__strdup_char_15.c":93:5)
#loc80 = loc("CWE401_Memory_Leak__strdup_char_15.c":83:12)
#loc81 = loc("CWE401_Memory_Leak__strdup_char_15.c":85:5)
#loc82 = loc("CWE401_Memory_Leak__strdup_char_15.c":87:19)
#loc83 = loc("CWE401_Memory_Leak__strdup_char_15.c":87:9)
#loc84 = loc("CWE401_Memory_Leak__strdup_char_15.c":88:9)
#loc85 = loc("CWE401_Memory_Leak__strdup_char_15.c":89:5)
#loc86 = loc("CWE401_Memory_Leak__strdup_char_15.c":91:9)
#loc87 = loc("CWE401_Memory_Leak__strdup_char_15.c":91:14)
#loc88 = loc("CWE401_Memory_Leak__strdup_char_15.c":92:9)
#loc89 = loc("CWE401_Memory_Leak__strdup_char_15.c":97:1)
#loc90 = loc("CWE401_Memory_Leak__strdup_char_15.c":128:1)
#loc91 = loc("CWE401_Memory_Leak__strdup_char_15.c":99:5)
#loc92 = loc("CWE401_Memory_Leak__strdup_char_15.c":99:12)
#loc93 = loc("CWE401_Memory_Leak__strdup_char_15.c":100:12)
#loc94 = loc("CWE401_Memory_Leak__strdup_char_15.c":100:5)
#loc95 = loc("CWE401_Memory_Leak__strdup_char_15.c":101:5)
#loc96 = loc("CWE401_Memory_Leak__strdup_char_15.c":116:5)
#loc97 = loc("CWE401_Memory_Leak__strdup_char_15.c":101:12)
#loc98 = loc("CWE401_Memory_Leak__strdup_char_15.c":103:5)
#loc99 = loc("CWE401_Memory_Leak__strdup_char_15.c":104:5)
#loc100 = loc("CWE401_Memory_Leak__strdup_char_15.c":110:5)
#loc101 = loc("CWE401_Memory_Leak__strdup_char_15.c":107:16)
#loc102 = loc("CWE401_Memory_Leak__strdup_char_15.c":107:23)
#loc103 = loc("CWE401_Memory_Leak__strdup_char_15.c":107:9)
#loc104 = loc("CWE401_Memory_Leak__strdup_char_15.c":107:31)
#loc105 = loc("CWE401_Memory_Leak__strdup_char_15.c":109:19)
#loc106 = loc("CWE401_Memory_Leak__strdup_char_15.c":109:9)
#loc107 = loc("CWE401_Memory_Leak__strdup_char_15.c":111:5)
#loc108 = loc("CWE401_Memory_Leak__strdup_char_15.c":112:5)
#loc109 = loc("CWE401_Memory_Leak__strdup_char_15.c":114:19)
#loc110 = loc("CWE401_Memory_Leak__strdup_char_15.c":114:9)
#loc111 = loc("CWE401_Memory_Leak__strdup_char_15.c":115:9)
#loc112 = loc("CWE401_Memory_Leak__strdup_char_15.c":117:5)
#loc113 = loc("CWE401_Memory_Leak__strdup_char_15.c":127:5)
#loc114 = loc("CWE401_Memory_Leak__strdup_char_15.c":117:12)
#loc115 = loc("CWE401_Memory_Leak__strdup_char_15.c":119:5)
#loc116 = loc("CWE401_Memory_Leak__strdup_char_15.c":121:9)
#loc117 = loc("CWE401_Memory_Leak__strdup_char_15.c":121:14)
#loc118 = loc("CWE401_Memory_Leak__strdup_char_15.c":122:9)
#loc119 = loc("CWE401_Memory_Leak__strdup_char_15.c":123:5)
#loc120 = loc("CWE401_Memory_Leak__strdup_char_15.c":125:19)
#loc121 = loc("CWE401_Memory_Leak__strdup_char_15.c":125:9)
#loc122 = loc("CWE401_Memory_Leak__strdup_char_15.c":126:9)
#loc123 = loc("/usr/include/string.h":141:1)
#loc124 = loc("/usr/include/string.h":142:14)
#loc125 = loc("CWE401_Memory_Leak__strdup_char_15.c":145:22)
#loc126 = loc("CWE401_Memory_Leak__strdup_char_15.c":131:1)
#loc127 = loc("CWE401_Memory_Leak__strdup_char_15.c":161:1)
#loc128 = loc("CWE401_Memory_Leak__strdup_char_15.c":133:5)
#loc129 = loc("CWE401_Memory_Leak__strdup_char_15.c":133:12)
#loc130 = loc("CWE401_Memory_Leak__strdup_char_15.c":134:12)
#loc131 = loc("CWE401_Memory_Leak__strdup_char_15.c":134:5)
#loc132 = loc("CWE401_Memory_Leak__strdup_char_15.c":135:5)
#loc133 = loc("CWE401_Memory_Leak__strdup_char_15.c":148:5)
#loc134 = loc("CWE401_Memory_Leak__strdup_char_15.c":135:12)
#loc135 = loc("CWE401_Memory_Leak__strdup_char_15.c":137:5)
#loc136 = loc("CWE401_Memory_Leak__strdup_char_15.c":139:19)
#loc137 = loc("CWE401_Memory_Leak__strdup_char_15.c":139:9)
#loc138 = loc("CWE401_Memory_Leak__strdup_char_15.c":140:9)
#loc139 = loc("CWE401_Memory_Leak__strdup_char_15.c":141:5)
#loc140 = loc("CWE401_Memory_Leak__strdup_char_15.c":143:24)
#loc141 = loc("CWE401_Memory_Leak__strdup_char_15.c":143:9)
#loc142 = loc("CWE401_Memory_Leak__strdup_char_15.c":145:9)
#loc143 = loc("CWE401_Memory_Leak__strdup_char_15.c":145:16)
#loc144 = loc("CWE401_Memory_Leak__strdup_char_15.c":146:19)
#loc145 = loc("CWE401_Memory_Leak__strdup_char_15.c":146:9)
#loc146 = loc("CWE401_Memory_Leak__strdup_char_15.c":147:9)
#loc147 = loc("CWE401_Memory_Leak__strdup_char_15.c":149:5)
#loc148 = loc("CWE401_Memory_Leak__strdup_char_15.c":160:5)
#loc149 = loc("CWE401_Memory_Leak__strdup_char_15.c":149:12)
#loc150 = loc("CWE401_Memory_Leak__strdup_char_15.c":151:5)
#loc151 = loc("CWE401_Memory_Leak__strdup_char_15.c":155:9)
#loc152 = loc("CWE401_Memory_Leak__strdup_char_15.c":156:5)
#loc153 = loc("CWE401_Memory_Leak__strdup_char_15.c":158:19)
#loc154 = loc("CWE401_Memory_Leak__strdup_char_15.c":158:9)
#loc155 = loc("CWE401_Memory_Leak__strdup_char_15.c":159:9)
#loc156 = loc("CWE401_Memory_Leak__strdup_char_15.c":164:1)
#loc157 = loc("CWE401_Memory_Leak__strdup_char_15.c":194:1)
#loc158 = loc("CWE401_Memory_Leak__strdup_char_15.c":166:5)
#loc159 = loc("CWE401_Memory_Leak__strdup_char_15.c":166:12)
#loc160 = loc("CWE401_Memory_Leak__strdup_char_15.c":167:12)
#loc161 = loc("CWE401_Memory_Leak__strdup_char_15.c":167:5)
#loc162 = loc("CWE401_Memory_Leak__strdup_char_15.c":168:5)
#loc163 = loc("CWE401_Memory_Leak__strdup_char_15.c":181:5)
#loc164 = loc("CWE401_Memory_Leak__strdup_char_15.c":168:12)
#loc165 = loc("CWE401_Memory_Leak__strdup_char_15.c":170:5)
#loc166 = loc("CWE401_Memory_Leak__strdup_char_15.c":172:24)
#loc167 = loc("CWE401_Memory_Leak__strdup_char_15.c":172:9)
#loc168 = loc("CWE401_Memory_Leak__strdup_char_15.c":174:9)
#loc169 = loc("CWE401_Memory_Leak__strdup_char_15.c":174:16)
#loc170 = loc("CWE401_Memory_Leak__strdup_char_15.c":174:22)
#loc171 = loc("CWE401_Memory_Leak__strdup_char_15.c":175:19)
#loc172 = loc("CWE401_Memory_Leak__strdup_char_15.c":175:9)
#loc173 = loc("CWE401_Memory_Leak__strdup_char_15.c":176:9)
#loc174 = loc("CWE401_Memory_Leak__strdup_char_15.c":177:5)
#loc175 = loc("CWE401_Memory_Leak__strdup_char_15.c":179:19)
#loc176 = loc("CWE401_Memory_Leak__strdup_char_15.c":179:9)
#loc177 = loc("CWE401_Memory_Leak__strdup_char_15.c":180:9)
#loc178 = loc("CWE401_Memory_Leak__strdup_char_15.c":182:5)
#loc179 = loc("CWE401_Memory_Leak__strdup_char_15.c":193:5)
#loc180 = loc("CWE401_Memory_Leak__strdup_char_15.c":182:12)
#loc181 = loc("CWE401_Memory_Leak__strdup_char_15.c":184:5)
#loc182 = loc("CWE401_Memory_Leak__strdup_char_15.c":188:9)
#loc183 = loc("CWE401_Memory_Leak__strdup_char_15.c":189:5)
#loc184 = loc("CWE401_Memory_Leak__strdup_char_15.c":191:19)
#loc185 = loc("CWE401_Memory_Leak__strdup_char_15.c":191:9)
#loc186 = loc("CWE401_Memory_Leak__strdup_char_15.c":192:9)
#loc187 = loc(fused[#loc1, #loc2])
#loc188 = loc(fused[#loc3, #loc4])
#loc189 = loc(fused[#loc5, #loc6])
#loc190 = loc(fused[#loc7, #loc8])
#loc191 = loc(fused[#loc9, #loc10])
#loc192 = loc(fused[#loc12, #loc13])
#loc193 = loc(fused[#loc14, #loc15])
#loc194 = loc(fused[#loc17, #loc16])
#loc195 = loc(fused[#loc18, #loc19])
#loc196 = loc(fused[#loc22, #loc23])
#loc197 = loc(fused[#loc26, #loc27])
#loc198 = loc(fused[#loc34, #loc35])
#loc199 = loc(fused[#loc43, #loc44])
#loc200 = loc(fused[#loc45, #loc46])
#loc201 = loc(fused[#loc47, #loc48])
#loc202 = loc(fused[#loc49, #loc50])
#loc203 = loc(fused[#loc51, #loc52])
#loc204 = loc(fused[#loc53, #loc54])
#loc205 = loc(fused[#loc55, #loc56])
#loc206 = loc(fused[#loc57, #loc58])
#loc207 = loc(fused[#loc60, #loc59])
#loc208 = loc(fused[#loc61, #loc62])
#loc209 = loc(fused[#loc65, #loc66])
#loc210 = loc(fused[#loc69, #loc70])
#loc211 = loc(fused[#loc78, #loc79])
#loc212 = loc(fused[#loc89, #loc90])
#loc213 = loc(fused[#loc91, #loc92])
#loc214 = loc(fused[#loc94, #loc93])
#loc215 = loc(fused[#loc95, #loc96])
#loc216 = loc(fused[#loc99, #loc100])
#loc217 = loc(fused[#loc103, #loc104])
#loc218 = loc(fused[#loc112, #loc113])
#loc219 = loc(fused[#loc123, #loc124])
#loc220 = loc(fused[#loc126, #loc127])
#loc221 = loc(fused[#loc128, #loc129])
#loc222 = loc(fused[#loc131, #loc130])
#loc223 = loc(fused[#loc132, #loc133])
#loc224 = loc(fused[#loc141, #loc140])
#loc225 = loc(fused[#loc147, #loc148])
#loc226 = loc(fused[#loc156, #loc157])
#loc227 = loc(fused[#loc158, #loc159])
#loc228 = loc(fused[#loc161, #loc160])
#loc229 = loc(fused[#loc162, #loc163])
#loc230 = loc(fused[#loc167, #loc166])
#loc231 = loc(fused[#loc178, #loc179])
