!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE194_Unexpected_Sign_Extension/s02/CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc99)
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc100)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc101)
  cir.func @_ZN49CWE194_Unexpected_Sign_Extension__rand_strncpy_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc103)
    %1 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc104)
    cir.store %0, %1 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc12)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc13)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc13)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc105)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc15)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc15)
    %8 = cir.ternary(%7, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc15)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc15)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc15)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc15)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc15)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc15)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc15)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc15)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc15)
      cir.yield %22 : !u32i loc(#loc15)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc15)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc15)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc15)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc15)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc15)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc15)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc15)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc15)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc15)
      %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc15)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc15)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc15)
      %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc15)
      cir.yield %26 : !u32i loc(#loc15)
    }) : (!cir.bool) -> !u32i loc(#loc15)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc15)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc15)
    cir.store %10, %0 : !s16i, !cir.ptr<!s16i> loc(#loc106)
    cir.scope {
      %11 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc108)
      %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc20)
      %13 = cir.load %12 : !cir.ptr<!s16i>, !s16i loc(#loc20)
      cir.store %13, %11 : !s16i, !cir.ptr<!s16i> loc(#loc108)
      cir.scope {
        %14 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc110)
        %15 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dest"] {alignment = 16 : i64} loc(#loc111)
        %16 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc111)
        cir.store %16, %15 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc111)
        %17 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc27)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc27)
        %19 = cir.const #cir.int<65> : !s8i loc(#loc28)
        %20 = cir.cast(integral, %19 : !s8i), !s32i loc(#loc28)
        %21 = cir.const #cir.int<100> : !s32i loc(#loc29)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc30)
        %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc29)
        %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc29)
        cir.libc.memset %24 bytes from %18 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc112)
        %25 = cir.const #cir.int<0> : !s8i loc(#loc33)
        %26 = cir.const #cir.int<100> : !s32i loc(#loc34)
        %27 = cir.const #cir.int<1> : !s32i loc(#loc35)
        %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc34)
        %29 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc36)
        %30 = cir.ptr_stride(%29 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc36)
        cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc113)
        cir.scope {
          %32 = cir.load %11 : !cir.ptr<!s16i>, !s16i loc(#loc39)
          %33 = cir.cast(integral, %32 : !s16i), !s32i loc(#loc39)
          %34 = cir.const #cir.int<100> : !s32i loc(#loc40)
          %35 = cir.cmp(lt, %33, %34) : !s32i, !cir.bool loc(#loc115)
          cir.if %35 {
            %36 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc42)
            %37 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc43)
            %38 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc44)
            %39 = cir.load %11 : !cir.ptr<!s16i>, !s16i loc(#loc45)
            %40 = cir.cast(integral, %39 : !s16i), !u64i loc(#loc45)
            %41 = cir.call @strncpy(%37, %38, %40) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc42)
            %42 = cir.const #cir.int<0> : !s8i loc(#loc46)
            %43 = cir.load %11 : !cir.ptr<!s16i>, !s16i loc(#loc47)
            %44 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc48)
            %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !s16i), !cir.ptr<!s8i> loc(#loc48)
            cir.store %42, %45 : !s8i, !cir.ptr<!s8i> loc(#loc117)
          } loc(#loc116)
        } loc(#loc114)
        %31 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc49)
        cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc50)
      } loc(#loc109)
    } loc(#loc107)
    cir.return loc(#loc8)
  } loc(#loc102)
  cir.func internal private @_ZN49CWE194_Unexpected_Sign_Extension__rand_strncpy_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc119)
    %1 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc120)
    cir.store %0, %1 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc56)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc57)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc57)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc121)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc59)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc59)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc59)
    cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc122)
    cir.scope {
      %8 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc124)
      %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc65)
      %10 = cir.load %9 : !cir.ptr<!s16i>, !s16i loc(#loc65)
      cir.store %10, %8 : !s16i, !cir.ptr<!s16i> loc(#loc124)
      cir.scope {
        %11 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc126)
        %12 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dest"] {alignment = 16 : i64} loc(#loc127)
        %13 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc127)
        cir.store %13, %12 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc127)
        %14 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc72)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc72)
        %16 = cir.const #cir.int<65> : !s8i loc(#loc73)
        %17 = cir.cast(integral, %16 : !s8i), !s32i loc(#loc73)
        %18 = cir.const #cir.int<100> : !s32i loc(#loc74)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc75)
        %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc74)
        %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc74)
        cir.libc.memset %21 bytes from %15 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc128)
        %22 = cir.const #cir.int<0> : !s8i loc(#loc78)
        %23 = cir.const #cir.int<100> : !s32i loc(#loc79)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc80)
        %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc79)
        %26 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc81)
        %27 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc81)
        cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc129)
        cir.scope {
          %29 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc84)
          %30 = cir.cast(integral, %29 : !s16i), !s32i loc(#loc84)
          %31 = cir.const #cir.int<100> : !s32i loc(#loc85)
          %32 = cir.cmp(lt, %30, %31) : !s32i, !cir.bool loc(#loc131)
          cir.if %32 {
            %33 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc87)
            %34 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc88)
            %35 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc89)
            %36 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc90)
            %37 = cir.cast(integral, %36 : !s16i), !u64i loc(#loc90)
            %38 = cir.call @strncpy(%34, %35, %37) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc87)
            %39 = cir.const #cir.int<0> : !s8i loc(#loc91)
            %40 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc92)
            %41 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc93)
            %42 = cir.ptr_stride(%41 : !cir.ptr<!s8i>, %40 : !s16i), !cir.ptr<!s8i> loc(#loc93)
            cir.store %39, %42 : !s8i, !cir.ptr<!s8i> loc(#loc133)
          } loc(#loc132)
        } loc(#loc130)
        %28 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc94)
        cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc95)
      } loc(#loc125)
    } loc(#loc123)
    cir.return loc(#loc52)
  } loc(#loc118)
  cir.func @_ZN49CWE194_Unexpected_Sign_Extension__rand_strncpy_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN49CWE194_Unexpected_Sign_Extension__rand_strncpy_33L7goodG2BEv() : () -> () loc(#loc98)
    cir.return loc(#loc97)
  } loc(#loc134)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE194_Unexpected_Sign_Extension/s02/CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/string.h":144:1)
#loc4 = loc("/usr/include/string.h":146:14)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":24:1)
#loc8 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":49:1)
#loc9 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":26:5)
#loc10 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":26:11)
#loc11 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":27:5)
#loc12 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":27:22)
#loc13 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":29:12)
#loc14 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":29:5)
#loc15 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":31:19)
#loc16 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":31:5)
#loc17 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":32:5)
#loc18 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":48:5)
#loc19 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":33:9)
#loc20 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":33:22)
#loc21 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":34:9)
#loc22 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":47:9)
#loc23 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":35:13)
#loc24 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":35:28)
#loc25 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":36:13)
#loc26 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":36:30)
#loc27 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":37:20)
#loc28 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":37:28)
#loc29 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":37:33)
#loc30 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":37:37)
#loc31 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":37:13)
#loc32 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":37:38)
#loc33 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":38:29)
#loc34 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":38:20)
#loc35 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":38:24)
#loc36 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":38:13)
#loc37 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":39:13)
#loc38 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":45:13)
#loc39 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":39:17)
#loc40 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":39:24)
#loc41 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":40:13)
#loc42 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":43:17)
#loc43 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":43:25)
#loc44 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":43:31)
#loc45 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":43:39)
#loc46 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":44:30)
#loc47 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":44:22)
#loc48 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":44:17)
#loc49 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":46:23)
#loc50 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":46:13)
#loc51 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":56:1)
#loc52 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":81:1)
#loc53 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":58:5)
#loc54 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":58:11)
#loc55 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":59:5)
#loc56 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":59:22)
#loc57 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":61:12)
#loc58 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":61:5)
#loc59 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":63:12)
#loc60 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":63:16)
#loc61 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":63:5)
#loc62 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":64:5)
#loc63 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":80:5)
#loc64 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":65:9)
#loc65 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":65:22)
#loc66 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":66:9)
#loc67 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":79:9)
#loc68 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":67:13)
#loc69 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":67:28)
#loc70 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":68:13)
#loc71 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":68:30)
#loc72 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":69:20)
#loc73 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":69:28)
#loc74 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":69:33)
#loc75 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":69:37)
#loc76 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":69:13)
#loc77 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":69:38)
#loc78 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":70:29)
#loc79 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":70:20)
#loc80 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":70:24)
#loc81 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":70:13)
#loc82 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":71:13)
#loc83 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":77:13)
#loc84 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":71:17)
#loc85 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":71:24)
#loc86 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":72:13)
#loc87 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":75:17)
#loc88 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":75:25)
#loc89 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":75:31)
#loc90 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":75:39)
#loc91 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":76:30)
#loc92 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":76:22)
#loc93 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":76:17)
#loc94 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":78:23)
#loc95 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":78:13)
#loc96 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":83:1)
#loc97 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":86:1)
#loc98 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_33.cpp":85:5)
#loc99 = loc(fused[#loc1, #loc2])
#loc100 = loc(fused[#loc3, #loc4])
#loc101 = loc(fused[#loc5, #loc6])
#loc102 = loc(fused[#loc7, #loc8])
#loc103 = loc(fused[#loc9, #loc10])
#loc104 = loc(fused[#loc11, #loc12])
#loc105 = loc(fused[#loc14, #loc13])
#loc106 = loc(fused[#loc16, #loc15])
#loc107 = loc(fused[#loc17, #loc18])
#loc108 = loc(fused[#loc19, #loc20])
#loc109 = loc(fused[#loc21, #loc22])
#loc110 = loc(fused[#loc23, #loc24])
#loc111 = loc(fused[#loc25, #loc26])
#loc112 = loc(fused[#loc31, #loc32])
#loc113 = loc(fused[#loc36, #loc33])
#loc114 = loc(fused[#loc37, #loc38])
#loc115 = loc(fused[#loc39, #loc40])
#loc116 = loc(fused[#loc41, #loc38])
#loc117 = loc(fused[#loc48, #loc46])
#loc118 = loc(fused[#loc51, #loc52])
#loc119 = loc(fused[#loc53, #loc54])
#loc120 = loc(fused[#loc55, #loc56])
#loc121 = loc(fused[#loc58, #loc57])
#loc122 = loc(fused[#loc61, #loc60])
#loc123 = loc(fused[#loc62, #loc63])
#loc124 = loc(fused[#loc64, #loc65])
#loc125 = loc(fused[#loc66, #loc67])
#loc126 = loc(fused[#loc68, #loc69])
#loc127 = loc(fused[#loc70, #loc71])
#loc128 = loc(fused[#loc76, #loc77])
#loc129 = loc(fused[#loc81, #loc78])
#loc130 = loc(fused[#loc82, #loc83])
#loc131 = loc(fused[#loc84, #loc85])
#loc132 = loc(fused[#loc86, #loc83])
#loc133 = loc(fused[#loc93, #loc91])
#loc134 = loc(fused[#loc96, #loc97])
