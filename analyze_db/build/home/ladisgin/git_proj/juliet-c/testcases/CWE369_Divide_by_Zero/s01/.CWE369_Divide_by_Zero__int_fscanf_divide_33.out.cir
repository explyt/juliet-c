!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc88 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":101:10)
#loc89 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":101:14)
#loc90 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":101:20)
#loc91 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":101:32)
#loc137 = loc(fused[#loc88, #loc89])
#loc138 = loc(fused[#loc90, #loc91])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc23_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc104)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc106)
  cir.func @_ZN43CWE369_Divide_by_Zero__int_fscanf_divide_333badEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc108)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc109)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc13)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc15)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    %4 = cir.get_global @__isoc23_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc17)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc105)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc18)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %9 = cir.call @__isoc23_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc17)
    cir.scope {
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc112)
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      cir.store %12, %10 : !s32i, !cir.ptr<!s32i> loc(#loc112)
      %13 = cir.const #cir.int<100> : !s32i loc(#loc23)
      %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc24)
      %15 = cir.binop(div, %13, %14) : !s32i loc(#loc113)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc25)
    } loc(#loc111)
    cir.return loc(#loc9)
  } loc(#loc107)
  cir.func internal private @_ZN43CWE369_Divide_by_Zero__int_fscanf_divide_33L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc115)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc116)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc31)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc33)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    %4 = cir.const #cir.int<7> : !s32i loc(#loc35)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc120)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc40)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc40)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc120)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc41)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc42)
      %10 = cir.binop(div, %8, %9) : !s32i loc(#loc121)
      cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc43)
    } loc(#loc119)
    cir.return loc(#loc27)
  } loc(#loc114)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc44)
  cir.func internal private @_ZN43CWE369_Divide_by_Zero__int_fscanf_divide_33L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc123)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc124)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc50)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc52)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %4 = cir.get_global @__isoc23_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc54)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc105)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc55)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc56)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc56)
    %9 = cir.call @__isoc23_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc54)
    cir.scope {
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc127)
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc60)
      cir.store %12, %10 : !s32i, !cir.ptr<!s32i> loc(#loc127)
      cir.scope {
        %13 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc63)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc64)
        %15 = cir.cmp(ne, %13, %14) : !s32i, !cir.bool loc(#loc129)
        cir.if %15 {
          %16 = cir.const #cir.int<100> : !s32i loc(#loc68)
          %17 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc69)
          %18 = cir.binop(div, %16, %17) : !s32i loc(#loc131)
          cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc70)
        } else {
          %16 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc44)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc44)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc71)
        } loc(#loc130)
      } loc(#loc128)
    } loc(#loc126)
    cir.return loc(#loc46)
  } loc(#loc122)
  cir.func @_ZN43CWE369_Divide_by_Zero__int_fscanf_divide_334goodEv() extra(#fn_attr) {
    cir.call @_ZN43CWE369_Divide_by_Zero__int_fscanf_divide_33L7goodG2BEv() : () -> () loc(#loc74)
    cir.call @_ZN43CWE369_Divide_by_Zero__int_fscanf_divide_33L7goodB2GEv() : () -> () loc(#loc75)
    cir.return loc(#loc73)
  } loc(#loc132)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc133)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc134)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc135)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc85)
  cir.func @main(%arg0: !s32i loc(fused[#loc88, #loc89]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc90, #loc91])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc137)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc138)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc87)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc92)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc93)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc94)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc94)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc95)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc82)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    cir.call @_ZN43CWE369_Divide_by_Zero__int_fscanf_divide_334goodEv() : () -> () loc(#loc97)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc83)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc83)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc84)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc84)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    cir.call @_ZN43CWE369_Divide_by_Zero__int_fscanf_divide_333badEv() : () -> () loc(#loc100)
    %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc85)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc85)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc102)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    cir.return %15 : !s32i loc(#loc139)
  } loc(#loc136)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":0:0)
#loc1 = loc("/usr/include/stdio.h":442:1)
#loc2 = loc("/usr/include/stdio.h":444:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":32:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":25:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":38:1)
#loc10 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":27:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":27:9)
#loc12 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":28:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":28:20)
#loc14 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":30:13)
#loc15 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":30:12)
#loc16 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":30:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":32:5)
#loc18 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":32:12)
#loc19 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":33:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":37:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":34:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":34:20)
#loc23 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":36:22)
#loc24 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":36:28)
#loc25 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":36:9)
#loc26 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":45:1)
#loc27 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":58:1)
#loc28 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":47:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":47:9)
#loc30 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":48:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":48:20)
#loc32 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":50:13)
#loc33 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":50:12)
#loc34 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":50:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":52:12)
#loc36 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":52:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":53:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":57:5)
#loc39 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":54:9)
#loc40 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":54:20)
#loc41 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":56:22)
#loc42 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":56:28)
#loc43 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":56:9)
#loc44 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":78:23)
#loc45 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":61:1)
#loc46 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":81:1)
#loc47 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":63:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":63:9)
#loc49 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":64:5)
#loc50 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":64:20)
#loc51 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":66:13)
#loc52 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":66:12)
#loc53 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":66:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":68:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":68:12)
#loc56 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":68:19)
#loc57 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":69:5)
#loc58 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":80:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":70:9)
#loc60 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":70:20)
#loc61 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":72:9)
#loc62 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":79:9)
#loc63 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":72:13)
#loc64 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":72:21)
#loc65 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":73:9)
#loc66 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":75:9)
#loc67 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":77:9)
#loc68 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":74:26)
#loc69 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":74:32)
#loc70 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":74:13)
#loc71 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":78:13)
#loc72 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":83:1)
#loc73 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":87:1)
#loc74 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":85:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":86:5)
#loc76 = loc("/usr/include/stdlib.h":575:1)
#loc77 = loc("/usr/include/stdlib.h":575:41)
#loc78 = loc("/usr/include/time.h":76:1)
#loc79 = loc("/usr/include/time.h":76:38)
#loc80 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc81 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc82 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":106:15)
#loc83 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":108:15)
#loc84 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":111:15)
#loc85 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":113:15)
#loc86 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":101:1)
#loc87 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":116:1)
#loc92 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":102:1)
#loc93 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":104:27)
#loc94 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":104:22)
#loc95 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":104:5)
#loc96 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":106:5)
#loc97 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":107:5)
#loc98 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":108:5)
#loc99 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":111:5)
#loc100 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":112:5)
#loc101 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":113:5)
#loc102 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":115:12)
#loc103 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_33.cpp":115:5)
#loc104 = loc(fused[#loc1, #loc2])
#loc105 = loc(fused[#loc3, #loc4])
#loc106 = loc(fused[#loc6, #loc7])
#loc107 = loc(fused[#loc8, #loc9])
#loc108 = loc(fused[#loc10, #loc11])
#loc109 = loc(fused[#loc12, #loc13])
#loc110 = loc(fused[#loc16, #loc14])
#loc111 = loc(fused[#loc19, #loc20])
#loc112 = loc(fused[#loc21, #loc22])
#loc113 = loc(fused[#loc23, #loc24])
#loc114 = loc(fused[#loc26, #loc27])
#loc115 = loc(fused[#loc28, #loc29])
#loc116 = loc(fused[#loc30, #loc31])
#loc117 = loc(fused[#loc34, #loc32])
#loc118 = loc(fused[#loc36, #loc35])
#loc119 = loc(fused[#loc37, #loc38])
#loc120 = loc(fused[#loc39, #loc40])
#loc121 = loc(fused[#loc41, #loc42])
#loc122 = loc(fused[#loc45, #loc46])
#loc123 = loc(fused[#loc47, #loc48])
#loc124 = loc(fused[#loc49, #loc50])
#loc125 = loc(fused[#loc53, #loc51])
#loc126 = loc(fused[#loc57, #loc58])
#loc127 = loc(fused[#loc59, #loc60])
#loc128 = loc(fused[#loc61, #loc62])
#loc129 = loc(fused[#loc63, #loc64])
#loc130 = loc(fused[#loc65, #loc66, #loc67, #loc62])
#loc131 = loc(fused[#loc68, #loc69])
#loc132 = loc(fused[#loc72, #loc73])
#loc133 = loc(fused[#loc76, #loc77])
#loc134 = loc(fused[#loc78, #loc79])
#loc135 = loc(fused[#loc80, #loc81])
#loc136 = loc(fused[#loc86, #loc87])
#loc139 = loc(fused[#loc103, #loc102])
