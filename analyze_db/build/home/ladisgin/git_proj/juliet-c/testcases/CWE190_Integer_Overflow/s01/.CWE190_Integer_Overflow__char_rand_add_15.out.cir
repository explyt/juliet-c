!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc60 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":212:10)
#loc61 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":212:14)
#loc62 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":212:20)
#loc63 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":212:32)
#loc243 = loc(fused[#loc60, #loc61])
#loc244 = loc(fused[#loc62, #loc63])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_add_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc224)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc225)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printHexCharLine(!s8i) loc(#loc226)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_add_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc228)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc12)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc12)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc229)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc16)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc18)
          %6 = cir.binop(and, %4, %5) : !s32i loc(#loc18)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc18)
          %8 = cir.ternary(%7, true {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc18)
            %13 = cir.const #cir.int<30> : !s32i loc(#loc18)
            %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc18)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc18)
            %17 = cir.const #cir.int<15> : !s32i loc(#loc18)
            %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc18)
            %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc18)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc18)
            %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc18)
            cir.yield %22 : !u32i loc(#loc18)
          }, false {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc18)
            %13 = cir.const #cir.int<30> : !s32i loc(#loc18)
            %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc18)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc18)
            %17 = cir.const #cir.int<15> : !s32i loc(#loc18)
            %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc18)
            %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc18)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc18)
            %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc18)
            %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc18)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc18)
            %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc18)
            %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc18)
            cir.yield %26 : !u32i loc(#loc18)
          }) : (!cir.bool) -> !u32i loc(#loc18)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc18)
          %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc18)
          cir.store %10, %0 : !s8i, !cir.ptr<!s8i> loc(#loc231)
          cir.break loc(#loc20)
        } loc(#loc17)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc22)
          cir.break loc(#loc23)
        } loc(#loc21)
        cir.yield loc(#loc14)
      } loc(#loc14)
    } loc(#loc230)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc26)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc234)
            %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc32)
            %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc32)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc31)
            %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc32)
            %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc32)
            cir.store %9, %4 : !s8i, !cir.ptr<!s8i> loc(#loc234)
            %10 = cir.load %4 : !cir.ptr<!s8i>, !s8i loc(#loc33)
            cir.call @printHexCharLine(%10) : (!s8i) -> () loc(#loc34)
          } loc(#loc233)
          cir.break loc(#loc35)
        } loc(#loc27)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc37)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc37)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc38)
          cir.break loc(#loc39)
        } loc(#loc36)
        cir.yield loc(#loc24)
      } loc(#loc24)
    } loc(#loc232)
    cir.return loc(#loc9)
  } loc(#loc227)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_add_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc236)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc237)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc238)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc239)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc41)
  } loc(#loc235)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc240)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc241)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc57)
  cir.func @main(%arg0: !s32i loc(fused[#loc60, #loc61]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc62, #loc63])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc243)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc244)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc59)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc64)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc65)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc66)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc66)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc67)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc54)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %8 = cir.get_global @CWE190_Integer_Overflow__char_rand_add_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc245)
    cir.call @CWE190_Integer_Overflow__char_rand_add_15_good() : () -> () loc(#loc69)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc55)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc56)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %13 = cir.get_global @CWE190_Integer_Overflow__char_rand_add_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc246)
    cir.call @CWE190_Integer_Overflow__char_rand_add_15_bad() : () -> () loc(#loc73)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc57)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc76)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc247)
    cir.return %17 : !s32i loc(#loc247)
  } loc(#loc242)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc78)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc249)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc83)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc83)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc250)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc87)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc89)
          %6 = cir.binop(and, %4, %5) : !s32i loc(#loc89)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc89)
          %8 = cir.ternary(%7, true {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc89)
            %13 = cir.const #cir.int<30> : !s32i loc(#loc89)
            %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc89)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
            %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc89)
            %17 = cir.const #cir.int<15> : !s32i loc(#loc89)
            %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc89)
            %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc89)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc89)
            %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc89)
            cir.yield %22 : !u32i loc(#loc89)
          }, false {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc89)
            %13 = cir.const #cir.int<30> : !s32i loc(#loc89)
            %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc89)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
            %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc89)
            %17 = cir.const #cir.int<15> : !s32i loc(#loc89)
            %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc89)
            %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc89)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc89)
            %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc89)
            %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc89)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc89)
            %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc89)
            %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc89)
            cir.yield %26 : !u32i loc(#loc89)
          }) : (!cir.bool) -> !u32i loc(#loc89)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc89)
          %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc89)
          cir.store %10, %0 : !s8i, !cir.ptr<!s8i> loc(#loc252)
          cir.break loc(#loc91)
        } loc(#loc88)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc93)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc93)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc94)
          cir.break loc(#loc95)
        } loc(#loc92)
        cir.yield loc(#loc85)
      } loc(#loc85)
    } loc(#loc251)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc98)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc100)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc100)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc101)
          cir.break loc(#loc102)
        } loc(#loc99)
        cir.case(default, []) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc106)
            %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc106)
            %6 = cir.const #cir.int<127> : !s32i loc(#loc107)
            %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc255)
            cir.if %7 {
              %8 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc257)
              %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc113)
              %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc113)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc112)
              %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc113)
              %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc113)
              cir.store %13, %8 : !s8i, !cir.ptr<!s8i> loc(#loc257)
              %14 = cir.load %8 : !cir.ptr<!s8i>, !s8i loc(#loc114)
              cir.call @printHexCharLine(%14) : (!s8i) -> () loc(#loc115)
            } else {
              %8 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc78)
              %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc78)
              cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc116)
            } loc(#loc256)
          } loc(#loc254)
          cir.break loc(#loc117)
        } loc(#loc103)
        cir.yield loc(#loc96)
      } loc(#loc96)
    } loc(#loc253)
    cir.return loc(#loc80)
  } loc(#loc248)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc259)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc122)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc122)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc260)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc126)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc128)
          %6 = cir.binop(and, %4, %5) : !s32i loc(#loc128)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc128)
          %8 = cir.ternary(%7, true {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc128)
            %13 = cir.const #cir.int<30> : !s32i loc(#loc128)
            %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc128)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
            %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc128)
            %17 = cir.const #cir.int<15> : !s32i loc(#loc128)
            %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc128)
            %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc128)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc128)
            %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc128)
            cir.yield %22 : !u32i loc(#loc128)
          }, false {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc128)
            %13 = cir.const #cir.int<30> : !s32i loc(#loc128)
            %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc128)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
            %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc128)
            %17 = cir.const #cir.int<15> : !s32i loc(#loc128)
            %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc128)
            %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc128)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc128)
            %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc128)
            %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc128)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc128)
            %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc128)
            %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc128)
            cir.yield %26 : !u32i loc(#loc128)
          }) : (!cir.bool) -> !u32i loc(#loc128)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc128)
          %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc128)
          cir.store %10, %0 : !s8i, !cir.ptr<!s8i> loc(#loc262)
          cir.break loc(#loc130)
        } loc(#loc127)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc132)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc132)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc133)
          cir.break loc(#loc134)
        } loc(#loc131)
        cir.yield loc(#loc124)
      } loc(#loc124)
    } loc(#loc261)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc137)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc141)
            %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc141)
            %6 = cir.const #cir.int<127> : !s32i loc(#loc142)
            %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc265)
            cir.if %7 {
              %8 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc267)
              %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc148)
              %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc148)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc147)
              %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc148)
              %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc148)
              cir.store %13, %8 : !s8i, !cir.ptr<!s8i> loc(#loc267)
              %14 = cir.load %8 : !cir.ptr<!s8i>, !s8i loc(#loc149)
              cir.call @printHexCharLine(%14) : (!s8i) -> () loc(#loc150)
            } else {
              %8 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc151)
              %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc151)
              cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc152)
            } loc(#loc266)
          } loc(#loc264)
          cir.break loc(#loc153)
        } loc(#loc138)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc155)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc155)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc156)
          cir.break loc(#loc157)
        } loc(#loc154)
        cir.yield loc(#loc135)
      } loc(#loc135)
    } loc(#loc263)
    cir.return loc(#loc119)
  } loc(#loc258)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc269)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc162)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc162)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc270)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc166)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc168)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc168)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc169)
          cir.break loc(#loc170)
        } loc(#loc167)
        cir.case(default, []) {
          %4 = cir.const #cir.int<2> : !s32i loc(#loc172)
          %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc172)
          cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc272)
          cir.break loc(#loc174)
        } loc(#loc171)
        cir.yield loc(#loc164)
      } loc(#loc164)
    } loc(#loc271)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc177)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc275)
            %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc183)
            %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc183)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc182)
            %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc183)
            %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc183)
            cir.store %9, %4 : !s8i, !cir.ptr<!s8i> loc(#loc275)
            %10 = cir.load %4 : !cir.ptr<!s8i>, !s8i loc(#loc184)
            cir.call @printHexCharLine(%10) : (!s8i) -> () loc(#loc185)
          } loc(#loc274)
          cir.break loc(#loc186)
        } loc(#loc178)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc188)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc188)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc189)
          cir.break loc(#loc190)
        } loc(#loc187)
        cir.yield loc(#loc175)
      } loc(#loc175)
    } loc(#loc273)
    cir.return loc(#loc159)
  } loc(#loc268)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc277)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc195)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc195)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc278)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc199)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<2> : !s32i loc(#loc201)
          %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc201)
          cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc280)
          cir.break loc(#loc203)
        } loc(#loc200)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc205)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc205)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc206)
          cir.break loc(#loc207)
        } loc(#loc204)
        cir.yield loc(#loc197)
      } loc(#loc197)
    } loc(#loc279)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc210)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc283)
            %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc216)
            %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc216)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc215)
            %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc216)
            %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc216)
            cir.store %9, %4 : !s8i, !cir.ptr<!s8i> loc(#loc283)
            %10 = cir.load %4 : !cir.ptr<!s8i>, !s8i loc(#loc217)
            cir.call @printHexCharLine(%10) : (!s8i) -> () loc(#loc218)
          } loc(#loc282)
          cir.break loc(#loc219)
        } loc(#loc211)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc221)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc221)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc222)
          cir.break loc(#loc223)
        } loc(#loc220)
        cir.yield loc(#loc208)
      } loc(#loc208)
    } loc(#loc281)
    cir.return loc(#loc192)
  } loc(#loc276)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_add_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":34:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc8 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":51:1)
#loc10 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":24:5)
#loc11 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":24:10)
#loc12 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":25:12)
#loc13 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":25:5)
#loc14 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":36:5)
#loc16 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":26:12)
#loc17 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":28:5)
#loc18 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":30:22)
#loc19 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":30:9)
#loc20 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":31:9)
#loc21 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":32:5)
#loc22 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":34:9)
#loc23 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":35:9)
#loc24 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":37:5)
#loc25 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":50:5)
#loc26 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":37:12)
#loc27 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":39:5)
#loc28 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":40:5)
#loc29 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":44:5)
#loc30 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":42:9)
#loc31 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":42:30)
#loc32 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":42:23)
#loc33 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":43:26)
#loc34 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":43:9)
#loc35 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":45:5)
#loc36 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":46:5)
#loc37 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":48:19)
#loc38 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":48:9)
#loc39 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":49:9)
#loc40 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":195:1)
#loc41 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":201:1)
#loc42 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":197:5)
#loc43 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":197:14)
#loc44 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":198:5)
#loc45 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":198:14)
#loc46 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":199:5)
#loc47 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":199:14)
#loc48 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":200:5)
#loc49 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":200:14)
#loc50 = loc("/usr/include/stdlib.h":575:1)
#loc51 = loc("/usr/include/stdlib.h":575:41)
#loc52 = loc("/usr/include/time.h":76:1)
#loc53 = loc("/usr/include/time.h":76:38)
#loc54 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":217:15)
#loc55 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":219:15)
#loc56 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":222:15)
#loc57 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":224:15)
#loc58 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":212:1)
#loc59 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":227:1)
#loc64 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":213:1)
#loc65 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":215:27)
#loc66 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":215:22)
#loc67 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":215:5)
#loc68 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":217:5)
#loc69 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":218:5)
#loc70 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":218:52)
#loc71 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":219:5)
#loc72 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":222:5)
#loc73 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":223:5)
#loc74 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":223:51)
#loc75 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":224:5)
#loc76 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":226:12)
#loc77 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":226:5)
#loc78 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":88:23)
#loc79 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":58:1)
#loc80 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":92:1)
#loc81 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":60:5)
#loc82 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":60:10)
#loc83 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":61:12)
#loc84 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":61:5)
#loc85 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":62:5)
#loc86 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":72:5)
#loc87 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":62:12)
#loc88 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":64:5)
#loc89 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":66:22)
#loc90 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":66:9)
#loc91 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":67:9)
#loc92 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":68:5)
#loc93 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":70:19)
#loc94 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":70:9)
#loc95 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":71:9)
#loc96 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":73:5)
#loc97 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":91:5)
#loc98 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":73:12)
#loc99 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":75:5)
#loc100 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":77:19)
#loc101 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":77:9)
#loc102 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":78:9)
#loc103 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":79:5)
#loc104 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":81:9)
#loc105 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":89:9)
#loc106 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":81:13)
#loc107 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":81:20)
#loc108 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":82:9)
#loc109 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":85:9)
#loc110 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":87:9)
#loc111 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":83:13)
#loc112 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":83:34)
#loc113 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":83:27)
#loc114 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":84:30)
#loc115 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":84:13)
#loc116 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":88:13)
#loc117 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":90:9)
#loc118 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":95:1)
#loc119 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":129:1)
#loc120 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":97:5)
#loc121 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":97:10)
#loc122 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":98:12)
#loc123 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":98:5)
#loc124 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":99:5)
#loc125 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":109:5)
#loc126 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":99:12)
#loc127 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":101:5)
#loc128 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":103:22)
#loc129 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":103:9)
#loc130 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":104:9)
#loc131 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":105:5)
#loc132 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":107:19)
#loc133 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":107:9)
#loc134 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":108:9)
#loc135 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":110:5)
#loc136 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":128:5)
#loc137 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":110:12)
#loc138 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":112:5)
#loc139 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":114:9)
#loc140 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":122:9)
#loc141 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":114:13)
#loc142 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":114:20)
#loc143 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":115:9)
#loc144 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":118:9)
#loc145 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":120:9)
#loc146 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":116:13)
#loc147 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":116:34)
#loc148 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":116:27)
#loc149 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":117:30)
#loc150 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":117:13)
#loc151 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":121:23)
#loc152 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":121:13)
#loc153 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":123:9)
#loc154 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":124:5)
#loc155 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":126:19)
#loc156 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":126:9)
#loc157 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":127:9)
#loc158 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":132:1)
#loc159 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":161:1)
#loc160 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":134:5)
#loc161 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":134:10)
#loc162 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":135:12)
#loc163 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":135:5)
#loc164 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":136:5)
#loc165 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":146:5)
#loc166 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":136:12)
#loc167 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":138:5)
#loc168 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":140:19)
#loc169 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":140:9)
#loc170 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":141:9)
#loc171 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":142:5)
#loc172 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":144:16)
#loc173 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":144:9)
#loc174 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":145:9)
#loc175 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":147:5)
#loc176 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":160:5)
#loc177 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":147:12)
#loc178 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":149:5)
#loc179 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":150:5)
#loc180 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":154:5)
#loc181 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":152:9)
#loc182 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":152:30)
#loc183 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":152:23)
#loc184 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":153:26)
#loc185 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":153:9)
#loc186 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":155:5)
#loc187 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":156:5)
#loc188 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":158:19)
#loc189 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":158:9)
#loc190 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":159:9)
#loc191 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":164:1)
#loc192 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":193:1)
#loc193 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":166:5)
#loc194 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":166:10)
#loc195 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":167:12)
#loc196 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":167:5)
#loc197 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":168:5)
#loc198 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":178:5)
#loc199 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":168:12)
#loc200 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":170:5)
#loc201 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":172:16)
#loc202 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":172:9)
#loc203 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":173:9)
#loc204 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":174:5)
#loc205 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":176:19)
#loc206 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":176:9)
#loc207 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":177:9)
#loc208 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":179:5)
#loc209 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":192:5)
#loc210 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":179:12)
#loc211 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":181:5)
#loc212 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":182:5)
#loc213 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":186:5)
#loc214 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":184:9)
#loc215 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":184:30)
#loc216 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":184:23)
#loc217 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":185:26)
#loc218 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":185:9)
#loc219 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":187:5)
#loc220 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":188:5)
#loc221 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":190:19)
#loc222 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":190:9)
#loc223 = loc("CWE190_Integer_Overflow__char_rand_add_15.c":191:9)
#loc224 = loc(fused[#loc1, #loc2])
#loc225 = loc(fused[#loc3, #loc4])
#loc226 = loc(fused[#loc6, #loc7])
#loc227 = loc(fused[#loc8, #loc9])
#loc228 = loc(fused[#loc10, #loc11])
#loc229 = loc(fused[#loc13, #loc12])
#loc230 = loc(fused[#loc14, #loc15])
#loc231 = loc(fused[#loc19, #loc18])
#loc232 = loc(fused[#loc24, #loc25])
#loc233 = loc(fused[#loc28, #loc29])
#loc234 = loc(fused[#loc30, #loc31])
#loc235 = loc(fused[#loc40, #loc41])
#loc236 = loc(fused[#loc42, #loc43])
#loc237 = loc(fused[#loc44, #loc45])
#loc238 = loc(fused[#loc46, #loc47])
#loc239 = loc(fused[#loc48, #loc49])
#loc240 = loc(fused[#loc50, #loc51])
#loc241 = loc(fused[#loc52, #loc53])
#loc242 = loc(fused[#loc58, #loc59])
#loc245 = loc(fused[#loc69, #loc70])
#loc246 = loc(fused[#loc73, #loc74])
#loc247 = loc(fused[#loc77, #loc76])
#loc248 = loc(fused[#loc79, #loc80])
#loc249 = loc(fused[#loc81, #loc82])
#loc250 = loc(fused[#loc84, #loc83])
#loc251 = loc(fused[#loc85, #loc86])
#loc252 = loc(fused[#loc90, #loc89])
#loc253 = loc(fused[#loc96, #loc97])
#loc254 = loc(fused[#loc104, #loc105])
#loc255 = loc(fused[#loc106, #loc107])
#loc256 = loc(fused[#loc108, #loc109, #loc110, #loc105])
#loc257 = loc(fused[#loc111, #loc112])
#loc258 = loc(fused[#loc118, #loc119])
#loc259 = loc(fused[#loc120, #loc121])
#loc260 = loc(fused[#loc123, #loc122])
#loc261 = loc(fused[#loc124, #loc125])
#loc262 = loc(fused[#loc129, #loc128])
#loc263 = loc(fused[#loc135, #loc136])
#loc264 = loc(fused[#loc139, #loc140])
#loc265 = loc(fused[#loc141, #loc142])
#loc266 = loc(fused[#loc143, #loc144, #loc145, #loc140])
#loc267 = loc(fused[#loc146, #loc147])
#loc268 = loc(fused[#loc158, #loc159])
#loc269 = loc(fused[#loc160, #loc161])
#loc270 = loc(fused[#loc163, #loc162])
#loc271 = loc(fused[#loc164, #loc165])
#loc272 = loc(fused[#loc173, #loc172])
#loc273 = loc(fused[#loc175, #loc176])
#loc274 = loc(fused[#loc179, #loc180])
#loc275 = loc(fused[#loc181, #loc182])
#loc276 = loc(fused[#loc191, #loc192])
#loc277 = loc(fused[#loc193, #loc194])
#loc278 = loc(fused[#loc196, #loc195])
#loc279 = loc(fused[#loc197, #loc198])
#loc280 = loc(fused[#loc202, #loc201])
#loc281 = loc(fused[#loc208, #loc209])
#loc282 = loc(fused[#loc212, #loc213])
#loc283 = loc(fused[#loc214, #loc215])
