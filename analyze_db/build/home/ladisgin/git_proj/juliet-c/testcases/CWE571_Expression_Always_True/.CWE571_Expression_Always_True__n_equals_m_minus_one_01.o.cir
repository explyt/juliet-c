!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE571_Expression_Always_True/CWE571_Expression_Always_True__n_equals_m_minus_one_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Always prints\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE571_Expression_Always_True__n_equals_m_minus_one_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand1", init] {alignment = 4 : i64} loc(#loc41)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand2", init] {alignment = 4 : i64} loc(#loc42)
    %2 = cir.const #cir.int<30> : !s32i loc(#loc7)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc41)
    %3 = cir.const #cir.int<31> : !s32i loc(#loc9)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc42)
    cir.br ^bb1 loc(#loc43)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc13)
    %8 = cir.cmp(eq, %4, %7) : !s32i, !cir.bool loc(#loc44)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc45)
  ^bb2:  // pred: ^bb1
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc3)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc3)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc17)
    cir.br ^bb3 loc(#loc11)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc11)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc5)
  } loc(#loc40)
  cir.func no_proto @CWE571_Expression_Always_True__n_equals_m_minus_one_01_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc47)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc20)
    cir.return loc(#loc19)
  } loc(#loc46)
  cir.func private @rand() -> !s32i extra(#fn_attr1) loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Sometimes prints\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc24)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand1", init] {alignment = 4 : i64} loc(#loc50)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand2", init] {alignment = 4 : i64} loc(#loc51)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc31)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc50)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc32)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    cir.br ^bb1 loc(#loc52)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc53)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc54)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc24)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc24)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc38)
    cir.br ^bb3 loc(#loc34)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc34)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc26)
  } loc(#loc49)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE571_Expression_Always_True/CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":18:19)
#loc4 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":10:1)
#loc5 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":20:1)
#loc6 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":12:5)
#loc7 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":12:20)
#loc8 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":13:5)
#loc9 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":13:20)
#loc10 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":16:5)
#loc11 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":19:5)
#loc12 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":16:9)
#loc13 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":16:22)
#loc14 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":16:33)
#loc15 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":16:34)
#loc16 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":17:5)
#loc17 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":18:9)
#loc18 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":40:1)
#loc19 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":43:1)
#loc20 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":42:5)
#loc21 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":42:11)
#loc22 = loc("/usr/include/stdlib.h":573:1)
#loc23 = loc("/usr/include/stdlib.h":573:24)
#loc24 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":36:19)
#loc25 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":27:1)
#loc26 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":38:1)
#loc27 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":30:5)
#loc28 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":30:25)
#loc29 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":31:5)
#loc30 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":31:25)
#loc31 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":30:20)
#loc32 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":31:20)
#loc33 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":34:5)
#loc34 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":37:5)
#loc35 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":34:8)
#loc36 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":34:20)
#loc37 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":35:2)
#loc38 = loc("CWE571_Expression_Always_True__n_equals_m_minus_one_01.c":36:9)
#loc39 = loc(fused[#loc1, #loc2])
#loc40 = loc(fused[#loc4, #loc5])
#loc41 = loc(fused[#loc6, #loc7])
#loc42 = loc(fused[#loc8, #loc9])
#loc43 = loc(fused[#loc10, #loc11])
#loc44 = loc(fused[#loc12, #loc15])
#loc45 = loc(fused[#loc16, #loc11])
#loc46 = loc(fused[#loc18, #loc19])
#loc47 = loc(fused[#loc20, #loc21])
#loc48 = loc(fused[#loc22, #loc23])
#loc49 = loc(fused[#loc25, #loc26])
#loc50 = loc(fused[#loc27, #loc28])
#loc51 = loc(fused[#loc29, #loc30])
#loc52 = loc(fused[#loc33, #loc34])
#loc53 = loc(fused[#loc35, #loc36])
#loc54 = loc(fused[#loc37, #loc34])
