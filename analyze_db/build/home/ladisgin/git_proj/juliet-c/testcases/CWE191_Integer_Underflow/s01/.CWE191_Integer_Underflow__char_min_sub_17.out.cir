!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc59 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":108:10)
#loc60 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":108:14)
#loc61 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":108:20)
#loc62 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":108:32)
#loc187 = loc(fused[#loc59, #loc60])
#loc188 = loc(fused[#loc61, #loc62])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_min_sub_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printHexCharLine(!s8i) loc(#loc161)
  cir.func no_proto @CWE191_Integer_Underflow__char_min_sub_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc163)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc164)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc165)
    %3 = cir.const #cir.int<32> : !s32i loc(#loc10)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc10)
    cir.store %4, %2 : !s8i, !cir.ptr<!s8i> loc(#loc166)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc14)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc168)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc169)
        cir.condition(%8) loc(#loc18)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<127> : !s32i loc(#loc20)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc20)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc20)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc20)
          %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc20)
          cir.store %10, %2 : !s8i, !cir.ptr<!s8i> loc(#loc171)
        } loc(#loc170)
        cir.yield loc(#loc13)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc23)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc172)
        cir.yield loc(#loc167)
      } loc(#loc167)
    } loc(#loc167)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc26)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc174)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc28)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc175)
        cir.condition(%8) loc(#loc30)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc178)
            %7 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc36)
            %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc36)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc35)
            %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc36)
            %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc36)
            cir.store %11, %6 : !s8i, !cir.ptr<!s8i> loc(#loc178)
            %12 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc37)
            cir.call @printHexCharLine(%12) : (!s8i) -> () loc(#loc38)
          } loc(#loc177)
        } loc(#loc176)
        cir.yield loc(#loc25)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc39)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc40)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc179)
        cir.yield loc(#loc173)
      } loc(#loc173)
    } loc(#loc173)
    cir.return loc(#loc4)
  } loc(#loc162)
  cir.func no_proto @CWE191_Integer_Underflow__char_min_sub_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc182)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    cir.return loc(#loc42)
  } loc(#loc180)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc183)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc184)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc185)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc56)
  cir.func @main(%arg0: !s32i loc(fused[#loc59, #loc60]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc61, #loc62])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc187)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc188)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc58)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc63)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc64)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc65)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc65)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc66)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc53)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %8 = cir.get_global @CWE191_Integer_Underflow__char_min_sub_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc189)
    cir.call @CWE191_Integer_Underflow__char_min_sub_17_good() : () -> () loc(#loc68)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc54)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc55)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %13 = cir.get_global @CWE191_Integer_Underflow__char_min_sub_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc190)
    cir.call @CWE191_Integer_Underflow__char_min_sub_17_bad() : () -> () loc(#loc72)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc56)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc75)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc191)
    cir.return %17 : !s32i loc(#loc191)
  } loc(#loc186)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc77)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc193)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc194)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc195)
    %3 = cir.const #cir.int<32> : !s32i loc(#loc85)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc85)
    cir.store %4, %2 : !s8i, !cir.ptr<!s8i> loc(#loc196)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc89)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc198)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc92)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc199)
        cir.condition(%8) loc(#loc93)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<127> : !s32i loc(#loc95)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc95)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc95)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc95)
          %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc95)
          cir.store %10, %2 : !s8i, !cir.ptr<!s8i> loc(#loc201)
        } loc(#loc200)
        cir.yield loc(#loc88)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc98)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
        cir.yield loc(#loc197)
      } loc(#loc197)
    } loc(#loc197)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc101)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc204)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc103)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc104)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc205)
        cir.condition(%8) loc(#loc105)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc109)
            %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc109)
            %8 = cir.const #cir.int<127> : !s32i loc(#loc110)
            %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc110)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc110)
            %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc110)
            %12 = cir.cmp(gt, %7, %11) : !s32i, !cir.bool loc(#loc208)
            cir.if %12 {
              %13 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc210)
              %14 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc116)
              %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc116)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc115)
              %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc116)
              %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc116)
              cir.store %18, %13 : !s8i, !cir.ptr<!s8i> loc(#loc210)
              %19 = cir.load %13 : !cir.ptr<!s8i>, !s8i loc(#loc117)
              cir.call @printHexCharLine(%19) : (!s8i) -> () loc(#loc118)
            } else {
              %13 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc77)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc77)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc119)
            } loc(#loc209)
          } loc(#loc207)
        } loc(#loc206)
        cir.yield loc(#loc100)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc120)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc121)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc211)
        cir.yield loc(#loc203)
      } loc(#loc203)
    } loc(#loc203)
    cir.return loc(#loc79)
  } loc(#loc192)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc214)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc215)
    %3 = cir.const #cir.int<32> : !s32i loc(#loc129)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc129)
    cir.store %4, %2 : !s8i, !cir.ptr<!s8i> loc(#loc216)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc133)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc135)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc136)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc219)
        cir.condition(%8) loc(#loc137)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<2> : !s32i loc(#loc139)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc140)
          %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc140)
          cir.store %8, %2 : !s8i, !cir.ptr<!s8i> loc(#loc221)
        } loc(#loc220)
        cir.yield loc(#loc132)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc142)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc143)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc222)
        cir.yield loc(#loc217)
      } loc(#loc217)
    } loc(#loc217)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc146)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc224)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc148)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc149)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc225)
        cir.condition(%8) loc(#loc150)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc228)
            %7 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc156)
            %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc156)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc155)
            %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc156)
            %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc156)
            cir.store %11, %6 : !s8i, !cir.ptr<!s8i> loc(#loc228)
            %12 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc157)
            cir.call @printHexCharLine(%12) : (!s8i) -> () loc(#loc158)
          } loc(#loc227)
        } loc(#loc226)
        cir.yield loc(#loc145)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc159)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc160)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc229)
        cir.yield loc(#loc223)
      } loc(#loc223)
    } loc(#loc223)
    cir.return loc(#loc123)
  } loc(#loc212)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_min_sub_17.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc3 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":40:1)
#loc5 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":24:5)
#loc6 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":24:9)
#loc7 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":24:11)
#loc8 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":25:5)
#loc9 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":25:10)
#loc10 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":26:12)
#loc11 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":26:5)
#loc12 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":27:5)
#loc13 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":31:5)
#loc14 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":27:13)
#loc15 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":27:9)
#loc16 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":27:16)
#loc17 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":27:20)
#loc18 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":27:18)
#loc19 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":28:5)
#loc20 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":30:16)
#loc21 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":30:9)
#loc22 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":27:24)
#loc23 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":27:23)
#loc24 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":32:5)
#loc25 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":39:5)
#loc26 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":32:13)
#loc27 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":32:9)
#loc28 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":32:16)
#loc29 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":32:20)
#loc30 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":32:18)
#loc31 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":33:5)
#loc32 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":34:9)
#loc33 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":38:9)
#loc34 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":36:13)
#loc35 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":36:34)
#loc36 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":36:27)
#loc37 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":37:30)
#loc38 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":37:13)
#loc39 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":32:24)
#loc40 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":32:23)
#loc41 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":93:1)
#loc42 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":97:1)
#loc43 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":95:5)
#loc44 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":95:13)
#loc45 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":96:5)
#loc46 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":96:13)
#loc47 = loc("/usr/include/stdlib.h":575:1)
#loc48 = loc("/usr/include/stdlib.h":575:41)
#loc49 = loc("/usr/include/time.h":76:1)
#loc50 = loc("/usr/include/time.h":76:38)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc53 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":113:15)
#loc54 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":115:15)
#loc55 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":118:15)
#loc56 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":120:15)
#loc57 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":108:1)
#loc58 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":123:1)
#loc63 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":109:1)
#loc64 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":111:27)
#loc65 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":111:22)
#loc66 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":111:5)
#loc67 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":113:5)
#loc68 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":114:5)
#loc69 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":114:52)
#loc70 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":115:5)
#loc71 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":118:5)
#loc72 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":119:5)
#loc73 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":119:51)
#loc74 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":120:5)
#loc75 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":122:12)
#loc76 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":122:5)
#loc77 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":67:23)
#loc78 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":47:1)
#loc79 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":70:1)
#loc80 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":49:5)
#loc81 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":49:9)
#loc82 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":49:11)
#loc83 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":50:5)
#loc84 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":50:10)
#loc85 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":51:12)
#loc86 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":51:5)
#loc87 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":52:5)
#loc88 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":56:5)
#loc89 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":52:13)
#loc90 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":52:9)
#loc91 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":52:16)
#loc92 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":52:20)
#loc93 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":52:18)
#loc94 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":53:5)
#loc95 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":55:16)
#loc96 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":55:9)
#loc97 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":52:24)
#loc98 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":52:23)
#loc99 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":57:5)
#loc100 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":69:5)
#loc101 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":57:13)
#loc102 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":57:9)
#loc103 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":57:16)
#loc104 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":57:20)
#loc105 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":57:18)
#loc106 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":58:5)
#loc107 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":60:9)
#loc108 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":68:9)
#loc109 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":60:13)
#loc110 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":60:20)
#loc111 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":61:9)
#loc112 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":64:9)
#loc113 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":66:9)
#loc114 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":62:13)
#loc115 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":62:34)
#loc116 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":62:27)
#loc117 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":63:30)
#loc118 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":63:13)
#loc119 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":67:13)
#loc120 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":57:24)
#loc121 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":57:23)
#loc122 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":73:1)
#loc123 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":91:1)
#loc124 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":75:5)
#loc125 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":75:9)
#loc126 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":75:11)
#loc127 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":76:5)
#loc128 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":76:10)
#loc129 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":77:12)
#loc130 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":77:5)
#loc131 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":78:5)
#loc132 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":82:5)
#loc133 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":78:13)
#loc134 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":78:9)
#loc135 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":78:16)
#loc136 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":78:20)
#loc137 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":78:18)
#loc138 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":79:5)
#loc139 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":81:17)
#loc140 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":81:16)
#loc141 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":81:9)
#loc142 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":78:24)
#loc143 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":78:23)
#loc144 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":83:5)
#loc145 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":90:5)
#loc146 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":83:13)
#loc147 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":83:9)
#loc148 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":83:16)
#loc149 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":83:20)
#loc150 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":83:18)
#loc151 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":84:5)
#loc152 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":85:9)
#loc153 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":89:9)
#loc154 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":87:13)
#loc155 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":87:34)
#loc156 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":87:27)
#loc157 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":88:30)
#loc158 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":88:13)
#loc159 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":83:24)
#loc160 = loc("CWE191_Integer_Underflow__char_min_sub_17.c":83:23)
#loc161 = loc(fused[#loc1, #loc2])
#loc162 = loc(fused[#loc3, #loc4])
#loc163 = loc(fused[#loc5, #loc6])
#loc164 = loc(fused[#loc5, #loc7])
#loc165 = loc(fused[#loc8, #loc9])
#loc166 = loc(fused[#loc11, #loc10])
#loc167 = loc(fused[#loc12, #loc13])
#loc168 = loc(fused[#loc15, #loc14])
#loc169 = loc(fused[#loc16, #loc17])
#loc170 = loc(fused[#loc19, #loc13])
#loc171 = loc(fused[#loc21, #loc20])
#loc172 = loc(fused[#loc23, #loc22])
#loc173 = loc(fused[#loc24, #loc25])
#loc174 = loc(fused[#loc27, #loc26])
#loc175 = loc(fused[#loc28, #loc29])
#loc176 = loc(fused[#loc31, #loc25])
#loc177 = loc(fused[#loc32, #loc33])
#loc178 = loc(fused[#loc34, #loc35])
#loc179 = loc(fused[#loc40, #loc39])
#loc180 = loc(fused[#loc41, #loc42])
#loc181 = loc(fused[#loc43, #loc44])
#loc182 = loc(fused[#loc45, #loc46])
#loc183 = loc(fused[#loc47, #loc48])
#loc184 = loc(fused[#loc49, #loc50])
#loc185 = loc(fused[#loc51, #loc52])
#loc186 = loc(fused[#loc57, #loc58])
#loc189 = loc(fused[#loc68, #loc69])
#loc190 = loc(fused[#loc72, #loc73])
#loc191 = loc(fused[#loc76, #loc75])
#loc192 = loc(fused[#loc78, #loc79])
#loc193 = loc(fused[#loc80, #loc81])
#loc194 = loc(fused[#loc80, #loc82])
#loc195 = loc(fused[#loc83, #loc84])
#loc196 = loc(fused[#loc86, #loc85])
#loc197 = loc(fused[#loc87, #loc88])
#loc198 = loc(fused[#loc90, #loc89])
#loc199 = loc(fused[#loc91, #loc92])
#loc200 = loc(fused[#loc94, #loc88])
#loc201 = loc(fused[#loc96, #loc95])
#loc202 = loc(fused[#loc98, #loc97])
#loc203 = loc(fused[#loc99, #loc100])
#loc204 = loc(fused[#loc102, #loc101])
#loc205 = loc(fused[#loc103, #loc104])
#loc206 = loc(fused[#loc106, #loc100])
#loc207 = loc(fused[#loc107, #loc108])
#loc208 = loc(fused[#loc109, #loc110])
#loc209 = loc(fused[#loc111, #loc112, #loc113, #loc108])
#loc210 = loc(fused[#loc114, #loc115])
#loc211 = loc(fused[#loc121, #loc120])
#loc212 = loc(fused[#loc122, #loc123])
#loc213 = loc(fused[#loc124, #loc125])
#loc214 = loc(fused[#loc124, #loc126])
#loc215 = loc(fused[#loc127, #loc128])
#loc216 = loc(fused[#loc130, #loc129])
#loc217 = loc(fused[#loc131, #loc132])
#loc218 = loc(fused[#loc134, #loc133])
#loc219 = loc(fused[#loc135, #loc136])
#loc220 = loc(fused[#loc138, #loc132])
#loc221 = loc(fused[#loc141, #loc139])
#loc222 = loc(fused[#loc143, #loc142])
#loc223 = loc(fused[#loc144, #loc145])
#loc224 = loc(fused[#loc147, #loc146])
#loc225 = loc(fused[#loc148, #loc149])
#loc226 = loc(fused[#loc151, #loc145])
#loc227 = loc(fused[#loc152, #loc153])
#loc228 = loc(fused[#loc154, #loc155])
#loc229 = loc(fused[#loc160, #loc159])
