!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType = !cir.record<struct "_CWE400_Resource_Exhaustion__rand_sleep_67_structType" {!s32i}>
module @"/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_67a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc58)
  cir.func private @CWE400_Resource_Exhaustion__rand_sleep_67b_badSink(!ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType) loc(#loc59)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_67_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc61)
    %1 = cir.alloca !ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType, !cir.ptr<!ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType>, ["myStruct"] {alignment = 4 : i64} loc(#loc62)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc12)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc14)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc14)
    %8 = cir.ternary(%7, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc14)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc14)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc14)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc14)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc14)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc14)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc14)
      cir.yield %24 : !u32i loc(#loc14)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc14)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc14)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc14)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc14)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc14)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc14)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc14)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc14)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc14)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc14)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc14)
      cir.yield %28 : !u32i loc(#loc14)
    }) : (!cir.bool) -> !u32i loc(#loc14)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc14)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    %11 = cir.get_member %1[0] {name = "structFirst"} : !cir.ptr<!ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType> -> !cir.ptr<!s32i> loc(#loc17)
    cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    %12 = cir.load %1 : !cir.ptr<!ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType>, !ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType loc(#loc19)
    cir.call @CWE400_Resource_Exhaustion__rand_sleep_67b_badSink(%12) : (!ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType) -> () loc(#loc19)
    cir.return loc(#loc6)
  } loc(#loc60)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_67_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc67)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc22)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc68)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc24)
    cir.return loc(#loc21)
  } loc(#loc66)
  cir.func private @CWE400_Resource_Exhaustion__rand_sleep_67b_goodG2BSink(!ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType) loc(#loc69)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc71)
    %1 = cir.alloca !ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType, !cir.ptr<!ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType>, ["myStruct"] {alignment = 4 : i64} loc(#loc72)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc35)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc73)
    %4 = cir.const #cir.int<20> : !s32i loc(#loc37)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc74)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    %6 = cir.get_member %1[0] {name = "structFirst"} : !cir.ptr<!ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType> -> !cir.ptr<!s32i> loc(#loc17)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc75)
    %7 = cir.load %1 : !cir.ptr<!ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType>, !ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType loc(#loc41)
    cir.call @CWE400_Resource_Exhaustion__rand_sleep_67b_goodG2BSink(%7) : (!ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType) -> () loc(#loc41)
    cir.return loc(#loc29)
  } loc(#loc70)
  cir.func private @CWE400_Resource_Exhaustion__rand_sleep_67b_goodB2GSink(!ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType) loc(#loc76)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc78)
    %1 = cir.alloca !ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType, !cir.ptr<!ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType>, ["myStruct"] {alignment = 4 : i64} loc(#loc79)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc51)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc53)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc53)
    %8 = cir.ternary(%7, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc53)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc53)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc53)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc53)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc53)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc53)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc53)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc53)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc53)
      cir.yield %24 : !u32i loc(#loc53)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc53)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc53)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc53)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc53)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc53)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc53)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc53)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc53)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc53)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc53)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc53)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc53)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc53)
      cir.yield %28 : !u32i loc(#loc53)
    }) : (!cir.bool) -> !u32i loc(#loc53)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc53)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    %11 = cir.get_member %1[0] {name = "structFirst"} : !cir.ptr<!ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType> -> !cir.ptr<!s32i> loc(#loc17)
    cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    %12 = cir.load %1 : !cir.ptr<!ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType>, !ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType loc(#loc57)
    cir.call @CWE400_Resource_Exhaustion__rand_sleep_67b_goodB2GSink(%12) : (!ty__CWE400_Resource_Exhaustion__rand_sleep_67_structType) -> () loc(#loc57)
    cir.return loc(#loc45)
  } loc(#loc77)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_67a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":36:1)
#loc4 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":36:118)
#loc5 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":38:1)
#loc6 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":48:1)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":40:5)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":40:9)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":41:5)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":41:58)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":43:14)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":43:13)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":43:5)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":45:13)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":45:5)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":46:28)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":30:9)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":46:5)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":47:5)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":84:1)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":88:1)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":86:5)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":86:13)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":87:5)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":87:13)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":55:1)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":55:122)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":57:1)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":67:1)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":59:5)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":59:9)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":60:5)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":60:58)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":62:14)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":62:13)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":62:5)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":64:13)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":64:5)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":65:28)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":65:5)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":66:5)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":70:1)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":70:122)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":72:1)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":82:1)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":74:5)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":74:9)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":75:5)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":75:58)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":77:14)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":77:13)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":77:5)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":79:13)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":79:5)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":80:28)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":80:5)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_sleep_67a.c":81:5)
#loc58 = loc(fused[#loc1, #loc2])
#loc59 = loc(fused[#loc3, #loc4])
#loc60 = loc(fused[#loc5, #loc6])
#loc61 = loc(fused[#loc7, #loc8])
#loc62 = loc(fused[#loc9, #loc10])
#loc63 = loc(fused[#loc13, #loc11])
#loc64 = loc(fused[#loc15, #loc14])
#loc65 = loc(fused[#loc18, #loc16])
#loc66 = loc(fused[#loc20, #loc21])
#loc67 = loc(fused[#loc22, #loc23])
#loc68 = loc(fused[#loc24, #loc25])
#loc69 = loc(fused[#loc26, #loc27])
#loc70 = loc(fused[#loc28, #loc29])
#loc71 = loc(fused[#loc30, #loc31])
#loc72 = loc(fused[#loc32, #loc33])
#loc73 = loc(fused[#loc36, #loc34])
#loc74 = loc(fused[#loc38, #loc37])
#loc75 = loc(fused[#loc40, #loc39])
#loc76 = loc(fused[#loc42, #loc43])
#loc77 = loc(fused[#loc44, #loc45])
#loc78 = loc(fused[#loc46, #loc47])
#loc79 = loc(fused[#loc48, #loc49])
#loc80 = loc(fused[#loc52, #loc50])
#loc81 = loc(fused[#loc54, #loc53])
#loc82 = loc(fused[#loc56, #loc55])
