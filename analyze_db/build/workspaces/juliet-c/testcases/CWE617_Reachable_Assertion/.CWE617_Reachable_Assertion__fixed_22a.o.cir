!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_22a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global external dsolocal @CWE617_Reachable_Assertion__fixed_22_badGlobal = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc63)
  cir.func private @CWE617_Reachable_Assertion__fixed_22_badSource(!s32i) -> !s32i loc(#loc64)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__fixed_22a.c\00" : !cir.array<!s8i x 40>> : !cir.array<!s8i x 40> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__fixed_22_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_22_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc67)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %4 = cir.get_global @CWE617_Reachable_Assertion__fixed_22_badGlobal : !cir.ptr<!s32i> loc(#loc63)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %6 = cir.call @CWE617_Reachable_Assertion__fixed_22_badSource(%5) : (!s32i) -> !s32i loc(#loc18)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc70)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc7)
    cir.scope {
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc7)
        %9 = cir.const #cir.int<5> : !s32i loc(#loc7)
        %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc7)
        cir.if %10 {
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc7)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc7)
          %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 40>> loc(#loc7)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 40>>), !cir.ptr<!s8i> loc(#loc7)
          %15 = cir.const #cir.int<38> : !s32i loc(#loc7)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc7)
          %17 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc7)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc7)
        } loc(#loc7)
      } loc(#loc7)
    } loc(#loc7)
    cir.return loc(#loc9)
  } loc(#loc66)
  cir.global external dsolocal @CWE617_Reachable_Assertion__fixed_22_goodG2B1Global = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc71)
  cir.global external dsolocal @CWE617_Reachable_Assertion__fixed_22_goodG2B2Global = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc72)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_22_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc74)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc75)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc73)
  cir.func private @CWE617_Reachable_Assertion__fixed_22_goodG2B1Source(!s32i) -> !s32i loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc33)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc78)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc39)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc41)
    %4 = cir.get_global @CWE617_Reachable_Assertion__fixed_22_goodG2B1Global : !cir.ptr<!s32i> loc(#loc71)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc43)
    %6 = cir.call @CWE617_Reachable_Assertion__fixed_22_goodG2B1Source(%5) : (!s32i) -> !s32i loc(#loc44)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc33)
    cir.scope {
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
        %9 = cir.const #cir.int<5> : !s32i loc(#loc33)
        %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc33)
        cir.if %10 {
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc33)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc33)
          %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 40>> loc(#loc33)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 40>>), !cir.ptr<!s8i> loc(#loc33)
          %15 = cir.const #cir.int<60> : !s32i loc(#loc33)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc33)
          %17 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc33)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc33)
          cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc33)
        } loc(#loc33)
      } loc(#loc33)
    } loc(#loc33)
    cir.return loc(#loc35)
  } loc(#loc77)
  cir.func private @CWE617_Reachable_Assertion__fixed_22_goodG2B2Source(!s32i) -> !s32i loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc84)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc55)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %4 = cir.get_global @CWE617_Reachable_Assertion__fixed_22_goodG2B2Global : !cir.ptr<!s32i> loc(#loc72)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc86)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    %6 = cir.call @CWE617_Reachable_Assertion__fixed_22_goodG2B2Source(%5) : (!s32i) -> !s32i loc(#loc60)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc49)
    cir.scope {
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
        %9 = cir.const #cir.int<5> : !s32i loc(#loc49)
        %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc49)
        cir.if %10 {
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc49)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc49)
          %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 40>> loc(#loc49)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 40>>), !cir.ptr<!s8i> loc(#loc49)
          %15 = cir.const #cir.int<74> : !s32i loc(#loc49)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc49)
          %17 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc49)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc49)
          cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc49)
        } loc(#loc49)
      } loc(#loc49)
    } loc(#loc49)
    cir.return loc(#loc51)
  } loc(#loc83)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_22a.c":0:0)
#loc1 = loc("CWE617_Reachable_Assertion__fixed_22a.c":26:1)
#loc2 = loc("CWE617_Reachable_Assertion__fixed_22a.c":26:54)
#loc3 = loc("CWE617_Reachable_Assertion__fixed_22a.c":28:1)
#loc4 = loc("CWE617_Reachable_Assertion__fixed_22a.c":28:60)
#loc5 = loc("/usr/include/assert.h":69:1)
#loc6 = loc("/usr/include/assert.h":71:43)
#loc7 = loc("CWE617_Reachable_Assertion__fixed_22a.c":38:5)
#loc8 = loc("CWE617_Reachable_Assertion__fixed_22a.c":30:1)
#loc9 = loc("CWE617_Reachable_Assertion__fixed_22a.c":39:1)
#loc10 = loc("CWE617_Reachable_Assertion__fixed_22a.c":32:5)
#loc11 = loc("CWE617_Reachable_Assertion__fixed_22a.c":32:9)
#loc12 = loc("CWE617_Reachable_Assertion__fixed_22a.c":34:13)
#loc13 = loc("CWE617_Reachable_Assertion__fixed_22a.c":34:12)
#loc14 = loc("CWE617_Reachable_Assertion__fixed_22a.c":34:5)
#loc15 = loc("CWE617_Reachable_Assertion__fixed_22a.c":35:54)
#loc16 = loc("CWE617_Reachable_Assertion__fixed_22a.c":35:5)
#loc17 = loc("CWE617_Reachable_Assertion__fixed_22a.c":36:59)
#loc18 = loc("CWE617_Reachable_Assertion__fixed_22a.c":36:12)
#loc19 = loc("CWE617_Reachable_Assertion__fixed_22a.c":36:5)
#loc20 = loc("CWE617_Reachable_Assertion__fixed_22a.c":36:63)
#loc21 = loc("CWE617_Reachable_Assertion__fixed_22a.c":46:1)
#loc22 = loc("CWE617_Reachable_Assertion__fixed_22a.c":46:59)
#loc23 = loc("CWE617_Reachable_Assertion__fixed_22a.c":47:1)
#loc24 = loc("CWE617_Reachable_Assertion__fixed_22a.c":47:59)
#loc25 = loc("CWE617_Reachable_Assertion__fixed_22a.c":77:1)
#loc26 = loc("CWE617_Reachable_Assertion__fixed_22a.c":81:1)
#loc27 = loc("CWE617_Reachable_Assertion__fixed_22a.c":79:5)
#loc28 = loc("CWE617_Reachable_Assertion__fixed_22a.c":79:14)
#loc29 = loc("CWE617_Reachable_Assertion__fixed_22a.c":80:5)
#loc30 = loc("CWE617_Reachable_Assertion__fixed_22a.c":80:14)
#loc31 = loc("CWE617_Reachable_Assertion__fixed_22a.c":50:1)
#loc32 = loc("CWE617_Reachable_Assertion__fixed_22a.c":50:65)
#loc33 = loc("CWE617_Reachable_Assertion__fixed_22a.c":60:5)
#loc34 = loc("CWE617_Reachable_Assertion__fixed_22a.c":52:1)
#loc35 = loc("CWE617_Reachable_Assertion__fixed_22a.c":61:1)
#loc36 = loc("CWE617_Reachable_Assertion__fixed_22a.c":54:5)
#loc37 = loc("CWE617_Reachable_Assertion__fixed_22a.c":54:9)
#loc38 = loc("CWE617_Reachable_Assertion__fixed_22a.c":56:13)
#loc39 = loc("CWE617_Reachable_Assertion__fixed_22a.c":56:12)
#loc40 = loc("CWE617_Reachable_Assertion__fixed_22a.c":56:5)
#loc41 = loc("CWE617_Reachable_Assertion__fixed_22a.c":57:59)
#loc42 = loc("CWE617_Reachable_Assertion__fixed_22a.c":57:5)
#loc43 = loc("CWE617_Reachable_Assertion__fixed_22a.c":58:64)
#loc44 = loc("CWE617_Reachable_Assertion__fixed_22a.c":58:12)
#loc45 = loc("CWE617_Reachable_Assertion__fixed_22a.c":58:5)
#loc46 = loc("CWE617_Reachable_Assertion__fixed_22a.c":58:68)
#loc47 = loc("CWE617_Reachable_Assertion__fixed_22a.c":64:1)
#loc48 = loc("CWE617_Reachable_Assertion__fixed_22a.c":64:65)
#loc49 = loc("CWE617_Reachable_Assertion__fixed_22a.c":74:5)
#loc50 = loc("CWE617_Reachable_Assertion__fixed_22a.c":66:1)
#loc51 = loc("CWE617_Reachable_Assertion__fixed_22a.c":75:1)
#loc52 = loc("CWE617_Reachable_Assertion__fixed_22a.c":68:5)
#loc53 = loc("CWE617_Reachable_Assertion__fixed_22a.c":68:9)
#loc54 = loc("CWE617_Reachable_Assertion__fixed_22a.c":70:13)
#loc55 = loc("CWE617_Reachable_Assertion__fixed_22a.c":70:12)
#loc56 = loc("CWE617_Reachable_Assertion__fixed_22a.c":70:5)
#loc57 = loc("CWE617_Reachable_Assertion__fixed_22a.c":71:59)
#loc58 = loc("CWE617_Reachable_Assertion__fixed_22a.c":71:5)
#loc59 = loc("CWE617_Reachable_Assertion__fixed_22a.c":72:64)
#loc60 = loc("CWE617_Reachable_Assertion__fixed_22a.c":72:12)
#loc61 = loc("CWE617_Reachable_Assertion__fixed_22a.c":72:5)
#loc62 = loc("CWE617_Reachable_Assertion__fixed_22a.c":72:68)
#loc63 = loc(fused[#loc1, #loc2])
#loc64 = loc(fused[#loc3, #loc4])
#loc65 = loc(fused[#loc5, #loc6])
#loc66 = loc(fused[#loc8, #loc9])
#loc67 = loc(fused[#loc10, #loc11])
#loc68 = loc(fused[#loc14, #loc12])
#loc69 = loc(fused[#loc16, #loc15])
#loc70 = loc(fused[#loc19, #loc20])
#loc71 = loc(fused[#loc21, #loc22])
#loc72 = loc(fused[#loc23, #loc24])
#loc73 = loc(fused[#loc25, #loc26])
#loc74 = loc(fused[#loc27, #loc28])
#loc75 = loc(fused[#loc29, #loc30])
#loc76 = loc(fused[#loc31, #loc32])
#loc77 = loc(fused[#loc34, #loc35])
#loc78 = loc(fused[#loc36, #loc37])
#loc79 = loc(fused[#loc40, #loc38])
#loc80 = loc(fused[#loc42, #loc41])
#loc81 = loc(fused[#loc45, #loc46])
#loc82 = loc(fused[#loc47, #loc48])
#loc83 = loc(fused[#loc50, #loc51])
#loc84 = loc(fused[#loc52, #loc53])
#loc85 = loc(fused[#loc56, #loc54])
#loc86 = loc(fused[#loc58, #loc57])
#loc87 = loc(fused[#loc61, #loc62])
