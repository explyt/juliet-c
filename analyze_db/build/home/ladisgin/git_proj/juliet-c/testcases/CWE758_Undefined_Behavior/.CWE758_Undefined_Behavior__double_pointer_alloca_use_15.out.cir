!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc42 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":111:10)
#loc43 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":111:14)
#loc44 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":111:20)
#loc45 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":111:32)
#loc165 = loc(fused[#loc42, #loc43])
#loc166 = loc(fused[#loc44, #loc45])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE758_Undefined_Behavior/CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printDoubleLine(!cir.double) loc(#loc152)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc153)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE758_Undefined_Behavior__double_pointer_alloca_use_15_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc10)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, ["pointer", init] {alignment = 8 : i64} loc(#loc157)
            %2 = cir.const #cir.int<8> : !u64i loc(#loc15)
            %3 = cir.alloca !u8i, !cir.ptr<!u8i>, %2 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc15)
            %4 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data", init] {alignment = 8 : i64} loc(#loc158)
            %5 = cir.cast(bitcast, %3 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc15)
            %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!cir.double>> loc(#loc15)
            cir.store %6, %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>> loc(#loc157)
            %7 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc17)
            %8 = cir.load %7 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc18)
            cir.store %8, %4 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc158)
            %9 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc19)
            %10 = cir.load %9 : !cir.ptr<!cir.double>, !cir.double loc(#loc20)
            cir.call @printDoubleLine(%10) : (!cir.double) -> () loc(#loc21)
          } loc(#loc156)
          cir.break loc(#loc22)
        } loc(#loc11)
        cir.case(default, []) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc24)
          cir.break loc(#loc25)
        } loc(#loc23)
        cir.yield loc(#loc8)
      } loc(#loc8)
    } loc(#loc155)
    cir.return loc(#loc7)
  } loc(#loc154)
  cir.func no_proto @CWE758_Undefined_Behavior__double_pointer_alloca_use_15_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc160)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc161)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc159)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc162)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc163)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc39)
  cir.func @main(%arg0: !s32i loc(fused[#loc42, #loc43]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc44, #loc45])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc165)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc166)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc41)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc46)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc46)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc47)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc48)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc48)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc49)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc36)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    %8 = cir.get_global @CWE758_Undefined_Behavior__double_pointer_alloca_use_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc167)
    cir.call @CWE758_Undefined_Behavior__double_pointer_alloca_use_15_good() : () -> () loc(#loc51)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc38)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %13 = cir.get_global @CWE758_Undefined_Behavior__double_pointer_alloca_use_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc168)
    cir.call @CWE758_Undefined_Behavior__double_pointer_alloca_use_15_bad() : () -> () loc(#loc55)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc39)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc58)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc169)
    cir.return %17 : !s32i loc(#loc169)
  } loc(#loc164)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc170)
  cir.func private @exit(!s32i) extra(#fn_attr1) loc(#loc171)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc68)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc70)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc70)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc71)
          cir.break loc(#loc72)
        } loc(#loc69)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc175)
            %2 = cir.alloca !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, ["pointer", init] {alignment = 8 : i64} loc(#loc176)
            %3 = cir.const #cir.int<8> : !u64i loc(#loc79)
            %4 = cir.alloca !u8i, !cir.ptr<!u8i>, %3 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc79)
            %5 = cir.cast(bitcast, %4 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc79)
            %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!cir.double>> loc(#loc79)
            cir.store %6, %2 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>> loc(#loc176)
            %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc80)
            %8 = cir.const #cir.int<8> : !u64i loc(#loc177)
            %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc80)
            %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc178)
            cir.store %10, %1 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc179)
            cir.scope {
              %15 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc87)
              %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc88)
              %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc88)
              %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!cir.double>, !cir.bool loc(#loc181)
              cir.if %18 {
                %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc90)
                %20 = cir.const #cir.int<1> : !s32i loc(#loc91)
                %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc92)
                cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr1) loc(#loc90)
              } loc(#loc182)
            } loc(#loc180)
            %11 = cir.const #cir.fp<5.000000e+00> : !cir.double loc(#loc93)
            %12 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc94)
            cir.store %11, %12 : !cir.double, !cir.ptr<!cir.double> loc(#loc183)
            %13 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc96)
            %14 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc97)
            cir.store %13, %14 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc184)
            cir.scope {
              %15 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data", init] {alignment = 8 : i64} loc(#loc186)
              %16 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc102)
              %17 = cir.load %16 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc103)
              cir.store %17, %15 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc186)
              %18 = cir.load deref %15 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc104)
              %19 = cir.load %18 : !cir.ptr<!cir.double>, !cir.double loc(#loc105)
              cir.call @printDoubleLine(%19) : (!cir.double) -> () loc(#loc106)
            } loc(#loc185)
          } loc(#loc174)
          cir.break loc(#loc107)
        } loc(#loc73)
        cir.yield loc(#loc66)
      } loc(#loc66)
    } loc(#loc173)
    cir.return loc(#loc65)
  } loc(#loc172)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc112)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc190)
            %2 = cir.alloca !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, ["pointer", init] {alignment = 8 : i64} loc(#loc191)
            %3 = cir.const #cir.int<8> : !u64i loc(#loc119)
            %4 = cir.alloca !u8i, !cir.ptr<!u8i>, %3 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc119)
            %5 = cir.cast(bitcast, %4 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc119)
            %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!cir.double>> loc(#loc119)
            cir.store %6, %2 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>> loc(#loc191)
            %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc120)
            %8 = cir.const #cir.int<8> : !u64i loc(#loc192)
            %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc120)
            %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc193)
            cir.store %10, %1 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc194)
            cir.scope {
              %15 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc127)
              %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc128)
              %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc128)
              %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!cir.double>, !cir.bool loc(#loc196)
              cir.if %18 {
                %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc130)
                %20 = cir.const #cir.int<1> : !s32i loc(#loc131)
                %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc132)
                cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr1) loc(#loc130)
              } loc(#loc197)
            } loc(#loc195)
            %11 = cir.const #cir.fp<5.000000e+00> : !cir.double loc(#loc133)
            %12 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc134)
            cir.store %11, %12 : !cir.double, !cir.ptr<!cir.double> loc(#loc198)
            %13 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc136)
            %14 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc137)
            cir.store %13, %14 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc199)
            cir.scope {
              %15 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data", init] {alignment = 8 : i64} loc(#loc201)
              %16 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc142)
              %17 = cir.load %16 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc143)
              cir.store %17, %15 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc201)
              %18 = cir.load deref %15 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc144)
              %19 = cir.load %18 : !cir.ptr<!cir.double>, !cir.double loc(#loc145)
              cir.call @printDoubleLine(%19) : (!cir.double) -> () loc(#loc146)
            } loc(#loc200)
          } loc(#loc189)
          cir.break loc(#loc147)
        } loc(#loc113)
        cir.case(default, []) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc149)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc149)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc150)
          cir.break loc(#loc151)
        } loc(#loc148)
        cir.yield loc(#loc110)
      } loc(#loc110)
    } loc(#loc188)
    cir.return loc(#loc109)
  } loc(#loc187)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE758_Undefined_Behavior/CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":33:19)
#loc6 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":20:1)
#loc7 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":36:1)
#loc8 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":22:5)
#loc9 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":35:5)
#loc10 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":22:12)
#loc11 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":24:5)
#loc12 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":25:5)
#loc13 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":29:5)
#loc14 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":26:9)
#loc15 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":26:42)
#loc16 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":27:9)
#loc17 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":27:26)
#loc18 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":27:25)
#loc19 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":28:26)
#loc20 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":28:25)
#loc21 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":28:9)
#loc22 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":30:5)
#loc23 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":31:5)
#loc24 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":33:9)
#loc25 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":34:9)
#loc26 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":96:1)
#loc27 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":100:1)
#loc28 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":98:5)
#loc29 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":98:11)
#loc30 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":99:5)
#loc31 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":99:11)
#loc32 = loc("/usr/include/stdlib.h":575:1)
#loc33 = loc("/usr/include/stdlib.h":575:41)
#loc34 = loc("/usr/include/time.h":76:1)
#loc35 = loc("/usr/include/time.h":76:38)
#loc36 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":116:15)
#loc37 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":118:15)
#loc38 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":121:15)
#loc39 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":123:15)
#loc40 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":111:1)
#loc41 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":126:1)
#loc46 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":112:1)
#loc47 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":114:27)
#loc48 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":114:22)
#loc49 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":114:5)
#loc50 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":116:5)
#loc51 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":117:5)
#loc52 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":117:66)
#loc53 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":118:5)
#loc54 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":121:5)
#loc55 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":122:5)
#loc56 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":122:65)
#loc57 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":123:5)
#loc58 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":125:12)
#loc59 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":125:5)
#loc60 = loc("/usr/include/stdlib.h":672:1)
#loc61 = loc("/usr/include/stdlib.h":672:45)
#loc62 = loc("/usr/include/stdlib.h":756:1)
#loc63 = loc("/usr/include/stdlib.h":756:70)
#loc64 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":43:1)
#loc65 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":67:1)
#loc66 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":45:5)
#loc67 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":66:5)
#loc68 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":45:12)
#loc69 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":47:5)
#loc70 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":49:19)
#loc71 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":49:9)
#loc72 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":50:9)
#loc73 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":51:5)
#loc74 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":52:5)
#loc75 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":64:5)
#loc76 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":53:9)
#loc77 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":53:18)
#loc78 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":54:9)
#loc79 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":54:42)
#loc80 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":56:26)
#loc81 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":56:33)
#loc82 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":56:46)
#loc83 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":56:47)
#loc84 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":56:9)
#loc85 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":57:9)
#loc86 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":57:37)
#loc87 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":57:13)
#loc88 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":57:21)
#loc89 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":57:27)
#loc90 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":57:28)
#loc91 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":57:34)
#loc92 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":57:33)
#loc93 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":58:17)
#loc94 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":58:10)
#loc95 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":58:9)
#loc96 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":59:20)
#loc97 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":59:10)
#loc98 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":59:9)
#loc99 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":60:9)
#loc100 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":63:9)
#loc101 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":61:13)
#loc102 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":61:30)
#loc103 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":61:29)
#loc104 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":62:30)
#loc105 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":62:29)
#loc106 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":62:13)
#loc107 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":65:5)
#loc108 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":70:1)
#loc109 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":94:1)
#loc110 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":72:5)
#loc111 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":93:5)
#loc112 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":72:12)
#loc113 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":74:5)
#loc114 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":75:5)
#loc115 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":87:5)
#loc116 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":76:9)
#loc117 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":76:18)
#loc118 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":77:9)
#loc119 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":77:42)
#loc120 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":79:26)
#loc121 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":79:33)
#loc122 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":79:46)
#loc123 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":79:47)
#loc124 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":79:9)
#loc125 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":80:9)
#loc126 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":80:37)
#loc127 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":80:13)
#loc128 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":80:21)
#loc129 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":80:27)
#loc130 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":80:28)
#loc131 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":80:34)
#loc132 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":80:33)
#loc133 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":81:17)
#loc134 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":81:10)
#loc135 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":81:9)
#loc136 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":82:20)
#loc137 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":82:10)
#loc138 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":82:9)
#loc139 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":83:9)
#loc140 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":86:9)
#loc141 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":84:13)
#loc142 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":84:30)
#loc143 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":84:29)
#loc144 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":85:30)
#loc145 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":85:29)
#loc146 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":85:13)
#loc147 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":88:5)
#loc148 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":89:5)
#loc149 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":91:19)
#loc150 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":91:9)
#loc151 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c":92:9)
#loc152 = loc(fused[#loc1, #loc2])
#loc153 = loc(fused[#loc3, #loc4])
#loc154 = loc(fused[#loc6, #loc7])
#loc155 = loc(fused[#loc8, #loc9])
#loc156 = loc(fused[#loc12, #loc13])
#loc157 = loc(fused[#loc14, #loc15])
#loc158 = loc(fused[#loc16, #loc17])
#loc159 = loc(fused[#loc26, #loc27])
#loc160 = loc(fused[#loc28, #loc29])
#loc161 = loc(fused[#loc30, #loc31])
#loc162 = loc(fused[#loc32, #loc33])
#loc163 = loc(fused[#loc34, #loc35])
#loc164 = loc(fused[#loc40, #loc41])
#loc167 = loc(fused[#loc51, #loc52])
#loc168 = loc(fused[#loc55, #loc56])
#loc169 = loc(fused[#loc59, #loc58])
#loc170 = loc(fused[#loc60, #loc61])
#loc171 = loc(fused[#loc62, #loc63])
#loc172 = loc(fused[#loc64, #loc65])
#loc173 = loc(fused[#loc66, #loc67])
#loc174 = loc(fused[#loc74, #loc75])
#loc175 = loc(fused[#loc76, #loc77])
#loc176 = loc(fused[#loc78, #loc79])
#loc177 = loc(fused[#loc81, #loc82])
#loc178 = loc(fused[#loc80, #loc83])
#loc179 = loc(fused[#loc84, #loc83])
#loc180 = loc(fused[#loc85, #loc86])
#loc181 = loc(fused[#loc87, #loc88])
#loc182 = loc(fused[#loc89, #loc86])
#loc183 = loc(fused[#loc95, #loc93])
#loc184 = loc(fused[#loc98, #loc96])
#loc185 = loc(fused[#loc99, #loc100])
#loc186 = loc(fused[#loc101, #loc102])
#loc187 = loc(fused[#loc108, #loc109])
#loc188 = loc(fused[#loc110, #loc111])
#loc189 = loc(fused[#loc114, #loc115])
#loc190 = loc(fused[#loc116, #loc117])
#loc191 = loc(fused[#loc118, #loc119])
#loc192 = loc(fused[#loc121, #loc122])
#loc193 = loc(fused[#loc120, #loc123])
#loc194 = loc(fused[#loc124, #loc123])
#loc195 = loc(fused[#loc125, #loc126])
#loc196 = loc(fused[#loc127, #loc128])
#loc197 = loc(fused[#loc129, #loc126])
#loc198 = loc(fused[#loc135, #loc133])
#loc199 = loc(fused[#loc138, #loc136])
#loc200 = loc(fused[#loc139, #loc140])
#loc201 = loc(fused[#loc141, #loc142])
