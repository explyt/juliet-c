!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @putc(!s32i, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc73)
  cir.global "private" external @stdout : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc74)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"putc failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc13)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.const #cir.int<65> : !s32i loc(#loc17)
            %2 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc74)
            %3 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc18)
            %4 = cir.call @putc(%1, %3) : (!s32i, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc19)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc20)
            %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc79)
            cir.if %6 {
              %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc7)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc7)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc22)
            } loc(#loc80)
          } loc(#loc78)
          cir.break loc(#loc23)
        } loc(#loc14)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc8)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc8)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc25)
          cir.break loc(#loc26)
        } loc(#loc24)
        cir.yield loc(#loc11)
      } loc(#loc11)
    } loc(#loc77)
    cir.return loc(#loc10)
  } loc(#loc76)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc82)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc83)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc81)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc37)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc39)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc39)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc40)
          cir.break loc(#loc41)
        } loc(#loc38)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.const #cir.int<65> : !s32i loc(#loc45)
            %2 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc74)
            %3 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc46)
            %4 = cir.call @putc(%1, %3) : (!s32i, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc47)
            %5 = cir.const #cir.int<1> : !s32i loc(#loc48)
            %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc48)
            %7 = cir.cmp(eq, %4, %6) : !s32i, !cir.bool loc(#loc87)
            cir.if %7 {
              %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc50)
              %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc50)
              cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc51)
            } loc(#loc88)
          } loc(#loc86)
          cir.break loc(#loc52)
        } loc(#loc42)
        cir.yield loc(#loc35)
      } loc(#loc35)
    } loc(#loc85)
    cir.return loc(#loc34)
  } loc(#loc84)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc57)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.const #cir.int<65> : !s32i loc(#loc61)
            %2 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc74)
            %3 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc62)
            %4 = cir.call @putc(%1, %3) : (!s32i, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc63)
            %5 = cir.const #cir.int<1> : !s32i loc(#loc64)
            %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc64)
            %7 = cir.cmp(eq, %4, %6) : !s32i, !cir.bool loc(#loc92)
            cir.if %7 {
              %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc66)
              %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc66)
              cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc67)
            } loc(#loc93)
          } loc(#loc91)
          cir.break loc(#loc68)
        } loc(#loc58)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc70)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc70)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc71)
          cir.break loc(#loc72)
        } loc(#loc69)
        cir.yield loc(#loc55)
      } loc(#loc55)
    } loc(#loc90)
    cir.return loc(#loc54)
  } loc(#loc89)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":612:1)
#loc2 = loc("/usr/include/stdio.h":612:43)
#loc3 = loc("/usr/include/stdio.h":150:1)
#loc4 = loc("/usr/include/stdio.h":150:14)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":33:23)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":38:19)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":24:1)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":41:1)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":26:5)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":40:5)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":26:12)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":28:5)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":31:9)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":34:9)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":31:23)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":31:28)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":31:13)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":31:39)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":32:9)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":33:13)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":35:9)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":36:5)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":38:9)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":39:9)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":85:1)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":89:1)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":87:5)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":87:11)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":88:5)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":88:11)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":48:1)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":64:1)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":50:5)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":63:5)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":50:12)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":52:5)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":54:19)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":54:9)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":55:9)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":56:5)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":58:9)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":61:9)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":58:23)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":58:28)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":58:13)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":58:39)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":59:9)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":60:23)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":60:13)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":62:9)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":67:1)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":83:1)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":69:5)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":82:5)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":69:12)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":71:5)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":73:9)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":76:9)
#loc61 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":73:23)
#loc62 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":73:28)
#loc63 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":73:13)
#loc64 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":73:39)
#loc65 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":74:9)
#loc66 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":75:23)
#loc67 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":75:13)
#loc68 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":77:9)
#loc69 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":78:5)
#loc70 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":80:19)
#loc71 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":80:9)
#loc72 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_15.c":81:9)
#loc73 = loc(fused[#loc1, #loc2])
#loc74 = loc(fused[#loc3, #loc4])
#loc75 = loc(fused[#loc5, #loc6])
#loc76 = loc(fused[#loc9, #loc10])
#loc77 = loc(fused[#loc11, #loc12])
#loc78 = loc(fused[#loc15, #loc16])
#loc79 = loc(fused[#loc19, #loc20])
#loc80 = loc(fused[#loc21, #loc16])
#loc81 = loc(fused[#loc27, #loc28])
#loc82 = loc(fused[#loc29, #loc30])
#loc83 = loc(fused[#loc31, #loc32])
#loc84 = loc(fused[#loc33, #loc34])
#loc85 = loc(fused[#loc35, #loc36])
#loc86 = loc(fused[#loc43, #loc44])
#loc87 = loc(fused[#loc47, #loc48])
#loc88 = loc(fused[#loc49, #loc44])
#loc89 = loc(fused[#loc53, #loc54])
#loc90 = loc(fused[#loc55, #loc56])
#loc91 = loc(fused[#loc59, #loc60])
#loc92 = loc(fused[#loc63, #loc64])
#loc93 = loc(fused[#loc65, #loc60])
