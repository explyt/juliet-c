!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execl_13.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" constant cir_private @__const.goodG2B2.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc224)
  cir.global "private" constant cir_private @__const.goodG2B1.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc225)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_connect_socket_execl_13_bad.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc226)
  cir.global "private" constant external @GLOBAL_CONST_FIVE : !s32i {alignment = 4 : i64} loc(#loc227)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc228)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc229)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc230)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc15)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc231)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc232)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc233)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc234)
  cir.func private @close(!s32i) -> !s32i loc(#loc235)
  cir.func private @execl(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc236)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"/bin/sh\00" : !cir.array<!s8i x 8>> : !cir.array<!s8i x 8> {alignment = 1 : i64} loc(#loc28)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc29)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execl_13_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc238)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc226)
    %2 = cir.get_global @__const.CWE78_OS_Command_Injection__char_connect_socket_execl_13_bad.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc226)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc226)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc34)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc239)
    cir.scope {
      %13 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc227)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc38)
      %15 = cir.const #cir.int<5> : !s32i loc(#loc39)
      %16 = cir.cmp(eq, %14, %15) : !s32i, !cir.bool loc(#loc241)
      cir.if %16 {
        cir.scope {
          %17 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc244)
          %18 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc245)
          %19 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc246)
          %20 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc247)
          %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc248)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc50)
          %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc50)
          cir.store %23, %20 : !s32i, !cir.ptr<!s32i> loc(#loc247)
          %24 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc53)
          %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
          %26 = cir.call @strlen(%25) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc53)
          cir.store %26, %21 : !u64i, !cir.ptr<!u64i> loc(#loc248)
          cir.scope {
            cir.do {
              cir.scope {
                %27 = cir.const #cir.int<2> : !s32i loc(#loc59)
                %28 = cir.const #cir.int<1> : !s32i loc(#loc60)
                %29 = cir.const #cir.int<6> : !s32i loc(#loc61)
                %30 = cir.call @socket(%27, %28, %29) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc62)
                cir.store %30, %20 : !s32i, !cir.ptr<!s32i> loc(#loc251)
                cir.scope {
                  %81 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc67)
                  %82 = cir.const #cir.int<1> : !s32i loc(#loc68)
                  %83 = cir.unary(minus, %82) nsw : !s32i, !s32i loc(#loc68)
                  %84 = cir.cmp(eq, %81, %83) : !s32i, !cir.bool loc(#loc253)
                  cir.if %84 {
                    cir.break loc(#loc70)
                  } loc(#loc254)
                } loc(#loc252)
                %31 = cir.cast(bitcast, %18 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc255)
                %32 = cir.const #cir.int<0> : !s32i loc(#loc73)
                %33 = cir.const #cir.int<16> : !u64i loc(#loc256)
                cir.libc.memset %33 bytes from %31 set to %32 : !cir.ptr<!void>, !s32i, !u64i loc(#loc257)
                %34 = cir.const #cir.int<2> : !s32i loc(#loc78)
                %35 = cir.cast(integral, %34 : !s32i), !u16i loc(#loc78)
                %36 = cir.get_member %18[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
                cir.store %35, %36 : !u16i, !cir.ptr<!u16i> loc(#loc258)
                %37 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc15)
                %38 = cir.cast(array_to_ptrdecay, %37 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc15)
                %39 = cir.call @inet_addr(%38) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc81)
                %40 = cir.get_member %18[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc82)
                %41 = cir.get_member %40[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc83)
                cir.store %39, %41 : !u32i, !cir.ptr<!u32i> loc(#loc259)
                %42 = cir.const #cir.int<27015> : !s32i loc(#loc86)
                %43 = cir.cast(integral, %42 : !s32i), !u16i loc(#loc86)
                %44 = cir.call @htons(%43) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc87)
                %45 = cir.get_member %18[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc88)
                cir.store %44, %45 : !u16i, !cir.ptr<!u16i> loc(#loc260)
                cir.scope {
                  %81 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc93)
                  %82 = cir.cast(bitcast, %18 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc262)
                  %83 = cir.const #cir.int<16> : !u64i loc(#loc263)
                  %84 = cir.cast(integral, %83 : !u64i), !u32i loc(#loc263)
                  %85 = cir.call @connect(%81, %82, %84) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc98)
                  %86 = cir.const #cir.int<1> : !s32i loc(#loc99)
                  %87 = cir.unary(minus, %86) nsw : !s32i, !s32i loc(#loc99)
                  %88 = cir.cmp(eq, %85, %87) : !s32i, !cir.bool loc(#loc264)
                  cir.if %88 {
                    cir.break loc(#loc101)
                  } loc(#loc265)
                } loc(#loc261)
                %46 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc103)
                %48 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc104)
                %49 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc105)
                %50 = cir.cast(bitcast, %49 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc266)
                %51 = cir.const #cir.int<1> : !u64i loc(#loc267)
                %52 = cir.const #cir.int<100> : !s32i loc(#loc110)
                %53 = cir.cast(integral, %52 : !s32i), !u64i loc(#loc110)
                %54 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc111)
                %55 = cir.binop(sub, %53, %54) : !u64i loc(#loc268)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc112)
                %57 = cir.cast(integral, %56 : !s32i), !u64i loc(#loc112)
                %58 = cir.binop(sub, %55, %57) : !u64i loc(#loc269)
                %59 = cir.binop(mul, %51, %58) : !u64i loc(#loc270)
                %60 = cir.const #cir.int<0> : !s32i loc(#loc114)
                %61 = cir.call @recv(%46, %50, %59, %60) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc115)
                %62 = cir.cast(integral, %61 : !s64i), !s32i loc(#loc115)
                cir.store %62, %17 : !s32i, !cir.ptr<!s32i> loc(#loc271)
                cir.scope {
                  %81 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc120)
                  %82 = cir.const #cir.int<1> : !s32i loc(#loc121)
                  %83 = cir.unary(minus, %82) nsw : !s32i, !s32i loc(#loc121)
                  %84 = cir.cmp(eq, %81, %83) : !s32i, !cir.bool loc(#loc273)
                  %85 = cir.ternary(%84, true {
                    %86 = cir.const #true loc(#loc122)
                    cir.yield %86 : !cir.bool loc(#loc122)
                  }, false {
                    %86 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc123)
                    %87 = cir.const #cir.int<0> : !s32i loc(#loc124)
                    %88 = cir.cmp(eq, %86, %87) : !s32i, !cir.bool loc(#loc274)
                    %89 = cir.ternary(%88, true {
                      %90 = cir.const #true loc(#loc122)
                      cir.yield %90 : !cir.bool loc(#loc122)
                    }, false {
                      %90 = cir.const #false loc(#loc122)
                      cir.yield %90 : !cir.bool loc(#loc122)
                    }) : (!cir.bool) -> !cir.bool loc(#loc122)
                    cir.yield %89 : !cir.bool loc(#loc122)
                  }) : (!cir.bool) -> !cir.bool loc(#loc122)
                  cir.if %85 {
                    cir.break loc(#loc126)
                  } loc(#loc275)
                } loc(#loc272)
                %63 = cir.const #cir.int<0> : !s32i loc(#loc127)
                %64 = cir.cast(integral, %63 : !s32i), !s8i loc(#loc127)
                %65 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
                %66 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc129)
                %67 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc130)
                %68 = cir.cast(integral, %67 : !s32i), !u64i loc(#loc130)
                %69 = cir.const #cir.int<1> : !u64i loc(#loc276)
                %70 = cir.binop(div, %68, %69) : !u64i loc(#loc277)
                %71 = cir.binop(add, %66, %70) : !u64i loc(#loc278)
                %72 = cir.ptr_stride(%65 : !cir.ptr<!s8i>, %71 : !u64i), !cir.ptr<!s8i> loc(#loc133)
                cir.store %64, %72 : !s8i, !cir.ptr<!s8i> loc(#loc279)
                %73 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc134)
                %74 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
                %75 = cir.const #cir.int<13> : !s32i loc(#loc136)
                %76 = cir.call @strchr(%74, %75) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc134)
                cir.store %76, %19 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc280)
                cir.scope {
                  %81 = cir.load %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
                  %82 = cir.cast(ptr_to_bool, %81 : !cir.ptr<!s8i>), !cir.bool loc(#loc141)
                  cir.if %82 {
                    %83 = cir.const #cir.int<0> : !s32i loc(#loc143)
                    %84 = cir.cast(integral, %83 : !s32i), !s8i loc(#loc143)
                    %85 = cir.load deref %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc144)
                    cir.store %84, %85 : !s8i, !cir.ptr<!s8i> loc(#loc283)
                  } loc(#loc282)
                } loc(#loc281)
                %77 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc146)
                %78 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc147)
                %79 = cir.const #cir.int<10> : !s32i loc(#loc148)
                %80 = cir.call @strchr(%78, %79) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc146)
                cir.store %80, %19 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc284)
                cir.scope {
                  %81 = cir.load %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
                  %82 = cir.cast(ptr_to_bool, %81 : !cir.ptr<!s8i>), !cir.bool loc(#loc153)
                  cir.if %82 {
                    %83 = cir.const #cir.int<0> : !s32i loc(#loc155)
                    %84 = cir.cast(integral, %83 : !s32i), !s8i loc(#loc155)
                    %85 = cir.load deref %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
                    cir.store %84, %85 : !s8i, !cir.ptr<!s8i> loc(#loc287)
                  } loc(#loc286)
                } loc(#loc285)
              } loc(#loc250)
              cir.yield loc(#loc56)
            } while {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc158)
              %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc158)
              cir.condition(%28) loc(#loc158)
            } loc(#loc249)
          } loc(#loc249)
          cir.scope {
            %27 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc161)
            %28 = cir.const #cir.int<1> : !s32i loc(#loc162)
            %29 = cir.unary(minus, %28) nsw : !s32i, !s32i loc(#loc162)
            %30 = cir.cmp(ne, %27, %29) : !s32i, !cir.bool loc(#loc289)
            cir.if %30 {
              %31 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc164)
              %32 = cir.call @close(%31) : (!s32i) -> !s32i loc(#loc165)
            } loc(#loc290)
          } loc(#loc288)
        } loc(#loc243)
      } loc(#loc242)
    } loc(#loc240)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc28)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc28)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc166)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc166)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc29)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc29)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc167)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc168)
    %12 = cir.call @execl(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc169)
    cir.return loc(#loc31)
  } loc(#loc237)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execl_13_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc292)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc172)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc293)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc174)
    cir.return loc(#loc171)
  } loc(#loc291)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc294)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc178)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc295)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc181)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc297)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc225)
    %2 = cir.get_global @__const.goodG2B1.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc225)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc225)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc186)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc298)
    cir.scope {
      %13 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc227)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc190)
      %15 = cir.const #cir.int<5> : !s32i loc(#loc191)
      %16 = cir.cmp(ne, %14, %15) : !s32i, !cir.bool loc(#loc300)
      cir.if %16 {
        %17 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc178)
        %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc178)
        cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc195)
      } else {
        %17 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc196)
        %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc197)
        %19 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc181)
        %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc181)
        %21 = cir.call @strcat(%18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc196)
      } loc(#loc301)
    } loc(#loc299)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc198)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc198)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc199)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc199)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc200)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc200)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc201)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc202)
    %12 = cir.call @execl(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc203)
    cir.return loc(#loc183)
  } loc(#loc296)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc303)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc224)
    %2 = cir.get_global @__const.goodG2B2.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc224)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc224)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc208)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc304)
    cir.scope {
      %13 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc227)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc212)
      %15 = cir.const #cir.int<5> : !s32i loc(#loc213)
      %16 = cir.cmp(eq, %14, %15) : !s32i, !cir.bool loc(#loc306)
      cir.if %16 {
        %17 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc215)
        %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc216)
        %19 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc217)
        %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc217)
        %21 = cir.call @strcat(%18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc215)
      } loc(#loc307)
    } loc(#loc305)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc218)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc218)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc219)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc219)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc220)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc220)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc221)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc222)
    %12 = cir.call @execl(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc223)
    cir.return loc(#loc205)
  } loc(#loc302)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":174:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":174:28)
#loc3 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":153:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":153:28)
#loc5 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":68:5)
#loc6 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":68:28)
#loc7 = loc("../../../testcasesupport/std_testcase.h":111:1)
#loc8 = loc("../../../testcasesupport/std_testcase.h":111:18)
#loc9 = loc("/usr/include/string.h":407:1)
#loc10 = loc("/usr/include/string.h":408:33)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc13 = loc("/usr/include/arpa/inet.h":34:1)
#loc14 = loc("/usr/include/arpa/inet.h":34:47)
#loc15 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":99:53)
#loc16 = loc("/usr/include/netinet/in.h":402:1)
#loc17 = loc("/usr/include/netinet/in.h":403:40)
#loc18 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc19 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc20 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc21 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc22 = loc("/usr/include/string.h":246:1)
#loc23 = loc("/usr/include/string.h":247:33)
#loc24 = loc("/usr/include/unistd.h":358:1)
#loc25 = loc("/usr/include/unistd.h":358:27)
#loc26 = loc("/usr/include/unistd.h":594:1)
#loc27 = loc("/usr/include/unistd.h":595:14)
#loc28 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":142:11)
#loc29 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":142:47)
#loc30 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":65:1)
#loc31 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":143:1)
#loc32 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":67:5)
#loc33 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":67:12)
#loc34 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":69:12)
#loc35 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":69:5)
#loc36 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":70:5)
#loc37 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":139:5)
#loc38 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":70:8)
#loc39 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":70:27)
#loc40 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":71:5)
#loc41 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":72:9)
#loc42 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":138:9)
#loc43 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":77:13)
#loc44 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":77:17)
#loc45 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":78:13)
#loc46 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":78:32)
#loc47 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":79:13)
#loc48 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":79:19)
#loc49 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":80:13)
#loc50 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":80:36)
#loc51 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":81:13)
#loc52 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":81:41)
#loc53 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":81:30)
#loc54 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":81:37)
#loc55 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":82:13)
#loc56 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":127:21)
#loc57 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":83:13)
#loc58 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":126:13)
#loc59 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":92:40)
#loc60 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":92:49)
#loc61 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":92:62)
#loc62 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":92:33)
#loc63 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":92:17)
#loc64 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":92:73)
#loc65 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":93:17)
#loc66 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":96:17)
#loc67 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":93:21)
#loc68 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":93:38)
#loc69 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":94:17)
#loc70 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":95:21)
#loc71 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":97:24)
#loc72 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":97:25)
#loc73 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":97:34)
#loc74 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":97:37)
#loc75 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":97:51)
#loc76 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":97:17)
#loc77 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":97:52)
#loc78 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":98:38)
#loc79 = loc("/usr/include/netinet/in.h":249:5)
#loc80 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":98:17)
#loc81 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":99:43)
#loc82 = loc("/usr/include/netinet/in.h":251:20)
#loc83 = loc("/usr/include/netinet/in.h":33:15)
#loc84 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":99:17)
#loc85 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":99:63)
#loc86 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":100:42)
#loc87 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":100:36)
#loc88 = loc("/usr/include/netinet/in.h":250:15)
#loc89 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":100:17)
#loc90 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":100:50)
#loc91 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":101:17)
#loc92 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":104:17)
#loc93 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":101:29)
#loc94 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":101:62)
#loc95 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":101:63)
#loc96 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":101:72)
#loc97 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":101:86)
#loc98 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":101:21)
#loc99 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":101:92)
#loc100 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":102:17)
#loc101 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":103:21)
#loc102 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":108:35)
#loc103 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":108:59)
#loc104 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":108:66)
#loc105 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":108:64)
#loc106 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":108:50)
#loc107 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":108:73)
#loc108 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":108:76)
#loc109 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":108:87)
#loc110 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":108:92)
#loc111 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":108:98)
#loc112 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":108:108)
#loc113 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":108:109)
#loc114 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":108:112)
#loc115 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":108:30)
#loc116 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":108:17)
#loc117 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":108:113)
#loc118 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":109:17)
#loc119 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":112:17)
#loc120 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":109:21)
#loc121 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":109:35)
#loc122 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":109:48)
#loc123 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":109:51)
#loc124 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":109:65)
#loc125 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":110:17)
#loc126 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":111:21)
#loc127 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":114:61)
#loc128 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":114:17)
#loc129 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":114:22)
#loc130 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":114:32)
#loc131 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":114:45)
#loc132 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":114:56)
#loc133 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":114:57)
#loc134 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":116:27)
#loc135 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":116:34)
#loc136 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":116:40)
#loc137 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":116:17)
#loc138 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":116:44)
#loc139 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":117:17)
#loc140 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":120:17)
#loc141 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":117:21)
#loc142 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":118:17)
#loc143 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":119:32)
#loc144 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":119:22)
#loc145 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":119:21)
#loc146 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":121:27)
#loc147 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":121:34)
#loc148 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":121:40)
#loc149 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":121:17)
#loc150 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":121:44)
#loc151 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":122:17)
#loc152 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":125:17)
#loc153 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":122:21)
#loc154 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":123:17)
#loc155 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":124:32)
#loc156 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":124:22)
#loc157 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":124:21)
#loc158 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":127:20)
#loc159 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":128:13)
#loc160 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":131:13)
#loc161 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":128:17)
#loc162 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":128:34)
#loc163 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":129:13)
#loc164 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":130:30)
#loc165 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":130:17)
#loc166 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":142:29)
#loc167 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":142:61)
#loc168 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":142:75)
#loc169 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":142:5)
#loc170 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":186:1)
#loc171 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":190:1)
#loc172 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":188:5)
#loc173 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":188:14)
#loc174 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":189:5)
#loc175 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":189:14)
#loc176 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc177 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc178 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":158:19)
#loc179 = loc("/usr/include/string.h":149:1)
#loc180 = loc("/usr/include/string.h":150:14)
#loc181 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":163:22)
#loc182 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":150:1)
#loc183 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":168:1)
#loc184 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":152:5)
#loc185 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":152:12)
#loc186 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":154:12)
#loc187 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":154:5)
#loc188 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":155:5)
#loc189 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":164:5)
#loc190 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":155:8)
#loc191 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":155:27)
#loc192 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":156:5)
#loc193 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":159:5)
#loc194 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":161:5)
#loc195 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":158:9)
#loc196 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":163:9)
#loc197 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":163:16)
#loc198 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":167:11)
#loc199 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":167:29)
#loc200 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":167:47)
#loc201 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":167:61)
#loc202 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":167:75)
#loc203 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":167:5)
#loc204 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":171:1)
#loc205 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":184:1)
#loc206 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":173:5)
#loc207 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":173:12)
#loc208 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":175:12)
#loc209 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":175:5)
#loc210 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":176:5)
#loc211 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":180:5)
#loc212 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":176:8)
#loc213 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":176:27)
#loc214 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":177:5)
#loc215 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":179:9)
#loc216 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":179:16)
#loc217 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":179:22)
#loc218 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":183:11)
#loc219 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":183:29)
#loc220 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":183:47)
#loc221 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":183:61)
#loc222 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":183:75)
#loc223 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_13.c":183:5)
#loc224 = loc(fused[#loc1, #loc2])
#loc225 = loc(fused[#loc3, #loc4])
#loc226 = loc(fused[#loc5, #loc6])
#loc227 = loc(fused[#loc7, #loc8])
#loc228 = loc(fused[#loc9, #loc10])
#loc229 = loc(fused[#loc11, #loc12])
#loc230 = loc(fused[#loc13, #loc14])
#loc231 = loc(fused[#loc16, #loc17])
#loc232 = loc(fused[#loc18, #loc19])
#loc233 = loc(fused[#loc20, #loc21])
#loc234 = loc(fused[#loc22, #loc23])
#loc235 = loc(fused[#loc24, #loc25])
#loc236 = loc(fused[#loc26, #loc27])
#loc237 = loc(fused[#loc30, #loc31])
#loc238 = loc(fused[#loc32, #loc33])
#loc239 = loc(fused[#loc35, #loc34])
#loc240 = loc(fused[#loc36, #loc37])
#loc241 = loc(fused[#loc38, #loc39])
#loc242 = loc(fused[#loc40, #loc37])
#loc243 = loc(fused[#loc41, #loc42])
#loc244 = loc(fused[#loc43, #loc44])
#loc245 = loc(fused[#loc45, #loc46])
#loc246 = loc(fused[#loc47, #loc48])
#loc247 = loc(fused[#loc49, #loc50])
#loc248 = loc(fused[#loc51, #loc52])
#loc249 = loc(fused[#loc55, #loc56])
#loc250 = loc(fused[#loc57, #loc58])
#loc251 = loc(fused[#loc63, #loc64])
#loc252 = loc(fused[#loc65, #loc66])
#loc253 = loc(fused[#loc67, #loc68])
#loc254 = loc(fused[#loc69, #loc66])
#loc255 = loc(fused[#loc71, #loc72])
#loc256 = loc(fused[#loc74, #loc75])
#loc257 = loc(fused[#loc76, #loc77])
#loc258 = loc(fused[#loc80, #loc78])
#loc259 = loc(fused[#loc84, #loc85])
#loc260 = loc(fused[#loc89, #loc90])
#loc261 = loc(fused[#loc91, #loc92])
#loc262 = loc(fused[#loc94, #loc95])
#loc263 = loc(fused[#loc96, #loc97])
#loc264 = loc(fused[#loc98, #loc99])
#loc265 = loc(fused[#loc100, #loc92])
#loc266 = loc(fused[#loc106, #loc107])
#loc267 = loc(fused[#loc108, #loc109])
#loc268 = loc(fused[#loc110, #loc111])
#loc269 = loc(fused[#loc110, #loc112])
#loc270 = loc(fused[#loc108, #loc113])
#loc271 = loc(fused[#loc116, #loc117])
#loc272 = loc(fused[#loc118, #loc119])
#loc273 = loc(fused[#loc120, #loc121])
#loc274 = loc(fused[#loc123, #loc124])
#loc275 = loc(fused[#loc125, #loc119])
#loc276 = loc(fused[#loc131, #loc132])
#loc277 = loc(fused[#loc130, #loc132])
#loc278 = loc(fused[#loc129, #loc132])
#loc279 = loc(fused[#loc128, #loc127])
#loc280 = loc(fused[#loc137, #loc138])
#loc281 = loc(fused[#loc139, #loc140])
#loc282 = loc(fused[#loc142, #loc140])
#loc283 = loc(fused[#loc145, #loc143])
#loc284 = loc(fused[#loc149, #loc150])
#loc285 = loc(fused[#loc151, #loc152])
#loc286 = loc(fused[#loc154, #loc152])
#loc287 = loc(fused[#loc157, #loc155])
#loc288 = loc(fused[#loc159, #loc160])
#loc289 = loc(fused[#loc161, #loc162])
#loc290 = loc(fused[#loc163, #loc160])
#loc291 = loc(fused[#loc170, #loc171])
#loc292 = loc(fused[#loc172, #loc173])
#loc293 = loc(fused[#loc174, #loc175])
#loc294 = loc(fused[#loc176, #loc177])
#loc295 = loc(fused[#loc179, #loc180])
#loc296 = loc(fused[#loc182, #loc183])
#loc297 = loc(fused[#loc184, #loc185])
#loc298 = loc(fused[#loc187, #loc186])
#loc299 = loc(fused[#loc188, #loc189])
#loc300 = loc(fused[#loc190, #loc191])
#loc301 = loc(fused[#loc192, #loc193, #loc194, #loc189])
#loc302 = loc(fused[#loc204, #loc205])
#loc303 = loc(fused[#loc206, #loc207])
#loc304 = loc(fused[#loc209, #loc208])
#loc305 = loc(fused[#loc210, #loc211])
#loc306 = loc(fused[#loc212, #loc213])
#loc307 = loc(fused[#loc214, #loc211])
