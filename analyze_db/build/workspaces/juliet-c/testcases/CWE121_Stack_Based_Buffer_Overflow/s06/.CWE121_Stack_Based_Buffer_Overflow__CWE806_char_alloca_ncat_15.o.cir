!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc142)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private @strncat(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc143)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc144)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc146)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc147)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc13)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc13)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc13)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc13)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc13)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc13)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc13)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc147)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc14)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc148)
    cir.scope {
      %10 = cir.const #cir.int<6> : !s32i loc(#loc18)
      cir.switch (%10 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
          %13 = cir.const #cir.int<65> : !s32i loc(#loc21)
          %14 = cir.const #cir.int<100> : !s32i loc(#loc22)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc23)
          %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc22)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc22)
          cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc150)
          %18 = cir.const #cir.int<0> : !s32i loc(#loc26)
          %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc26)
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
          %21 = cir.const #cir.int<100> : !s32i loc(#loc28)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc29)
          %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc28)
          %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc30)
          cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc151)
          cir.break loc(#loc31)
        } loc(#loc19)
        cir.case(default, []) {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc33)
          cir.break loc(#loc34)
        } loc(#loc32)
        cir.yield loc(#loc16)
      } loc(#loc16)
    } loc(#loc149)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc153)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc153)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc153)
      %12 = cir.get_global @strncat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc39)
      %13 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc40)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
      %15 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc42)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
      %17 = cir.call @strlen(%16) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc42)
      %18 = cir.call @strncat(%13, %14, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc39)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc44)
      %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc44)
      %21 = cir.const #cir.int<50> : !s32i loc(#loc45)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc46)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc45)
      %24 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc47)
      %25 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc47)
      cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc154)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    } loc(#loc152)
    cir.return loc(#loc9)
  } loc(#loc145)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc156)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc52)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc157)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc54)
    cir.return loc(#loc51)
  } loc(#loc155)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc159)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc160)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc61)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc61)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc61)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc61)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc61)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc61)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc61)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc160)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc161)
    cir.scope {
      %10 = cir.const #cir.int<5> : !s32i loc(#loc66)
      cir.switch (%10 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc68)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc68)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc69)
          cir.break loc(#loc70)
        } loc(#loc67)
        cir.case(default, []) {
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc72)
          %13 = cir.const #cir.int<65> : !s32i loc(#loc73)
          %14 = cir.const #cir.int<50> : !s32i loc(#loc74)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc75)
          %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc74)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc74)
          cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc163)
          %18 = cir.const #cir.int<0> : !s32i loc(#loc78)
          %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc78)
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
          %21 = cir.const #cir.int<50> : !s32i loc(#loc80)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc81)
          %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc80)
          %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc82)
          cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc164)
          cir.break loc(#loc83)
        } loc(#loc71)
        cir.yield loc(#loc64)
      } loc(#loc64)
    } loc(#loc162)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc166)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc166)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc166)
      %12 = cir.get_global @strncat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc88)
      %13 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc89)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc90)
      %15 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc91)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc92)
      %17 = cir.call @strlen(%16) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc91)
      %18 = cir.call @strncat(%13, %14, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc88)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc93)
      %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc93)
      %21 = cir.const #cir.int<50> : !s32i loc(#loc94)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc95)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc94)
      %24 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc96)
      %25 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc96)
      cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc167)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    } loc(#loc165)
    cir.return loc(#loc57)
  } loc(#loc158)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc169)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc170)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc104)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc104)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc104)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc104)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc104)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc104)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc104)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc170)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc171)
    cir.scope {
      %10 = cir.const #cir.int<6> : !s32i loc(#loc109)
      cir.switch (%10 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc111)
          %13 = cir.const #cir.int<65> : !s32i loc(#loc112)
          %14 = cir.const #cir.int<50> : !s32i loc(#loc113)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc114)
          %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc113)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc113)
          cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc173)
          %18 = cir.const #cir.int<0> : !s32i loc(#loc117)
          %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc117)
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
          %21 = cir.const #cir.int<50> : !s32i loc(#loc119)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc120)
          %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc119)
          %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc121)
          cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc174)
          cir.break loc(#loc122)
        } loc(#loc110)
        cir.case(default, []) {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc124)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc124)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc125)
          cir.break loc(#loc126)
        } loc(#loc123)
        cir.yield loc(#loc107)
      } loc(#loc107)
    } loc(#loc172)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc176)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc176)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc176)
      %12 = cir.get_global @strncat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc131)
      %13 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc132)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
      %15 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc134)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
      %17 = cir.call @strlen(%16) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc134)
      %18 = cir.call @strncat(%13, %14, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc131)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc136)
      %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc136)
      %21 = cir.const #cir.int<50> : !s32i loc(#loc137)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc138)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc137)
      %24 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc139)
      %25 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc139)
      cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc177)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc140)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc141)
    } loc(#loc175)
    cir.return loc(#loc100)
  } loc(#loc168)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":37:19)
#loc4 = loc("/usr/include/string.h":152:1)
#loc5 = loc("/usr/include/string.h":153:29)
#loc6 = loc("/usr/include/string.h":407:1)
#loc7 = loc("/usr/include/string.h":408:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":23:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":47:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":25:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":25:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":26:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":26:33)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":27:12)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":27:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":28:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":39:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":28:12)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":30:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":32:16)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":32:22)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":32:27)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":32:31)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":32:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":32:32)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":33:23)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":33:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":33:14)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":33:18)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":33:19)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":34:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":35:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":37:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":38:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":40:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":46:5)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":41:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":41:25)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":43:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":43:17)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":43:23)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":43:29)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":43:36)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":44:22)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":44:14)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":44:17)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":44:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":45:19)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":45:9)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":107:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":111:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":109:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":109:14)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":110:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":110:14)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":54:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":78:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":56:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":56:12)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":57:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":57:33)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":58:12)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":58:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":59:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":70:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":59:12)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":61:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":63:19)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":63:9)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":64:9)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":65:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":67:16)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":67:22)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":67:27)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":67:30)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":67:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":67:31)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":68:22)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":68:9)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":68:14)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":68:17)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":68:18)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":69:9)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":71:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":77:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":72:9)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":72:25)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":74:9)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":74:17)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":74:23)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":74:29)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":74:36)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":75:22)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":75:14)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":75:17)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":75:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":76:19)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":76:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":81:1)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":105:1)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":83:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":83:12)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":84:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":84:33)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":85:12)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":85:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":86:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":97:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":86:12)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":88:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":90:16)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":90:22)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":90:27)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":90:30)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":90:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":90:31)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":91:22)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":91:9)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":91:14)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":91:17)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":91:18)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":92:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":93:5)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":95:19)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":95:9)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":96:9)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":98:5)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":104:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":99:9)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":99:25)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":101:9)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":101:17)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":101:23)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":101:29)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":101:36)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":102:22)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":102:14)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":102:17)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":102:9)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":103:19)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c":103:9)
#loc142 = loc(fused[#loc1, #loc2])
#loc143 = loc(fused[#loc4, #loc5])
#loc144 = loc(fused[#loc6, #loc7])
#loc145 = loc(fused[#loc8, #loc9])
#loc146 = loc(fused[#loc10, #loc11])
#loc147 = loc(fused[#loc12, #loc13])
#loc148 = loc(fused[#loc15, #loc14])
#loc149 = loc(fused[#loc16, #loc17])
#loc150 = loc(fused[#loc24, #loc25])
#loc151 = loc(fused[#loc27, #loc26])
#loc152 = loc(fused[#loc35, #loc36])
#loc153 = loc(fused[#loc37, #loc38])
#loc154 = loc(fused[#loc47, #loc44])
#loc155 = loc(fused[#loc50, #loc51])
#loc156 = loc(fused[#loc52, #loc53])
#loc157 = loc(fused[#loc54, #loc55])
#loc158 = loc(fused[#loc56, #loc57])
#loc159 = loc(fused[#loc58, #loc59])
#loc160 = loc(fused[#loc60, #loc61])
#loc161 = loc(fused[#loc63, #loc62])
#loc162 = loc(fused[#loc64, #loc65])
#loc163 = loc(fused[#loc76, #loc77])
#loc164 = loc(fused[#loc79, #loc78])
#loc165 = loc(fused[#loc84, #loc85])
#loc166 = loc(fused[#loc86, #loc87])
#loc167 = loc(fused[#loc96, #loc93])
#loc168 = loc(fused[#loc99, #loc100])
#loc169 = loc(fused[#loc101, #loc102])
#loc170 = loc(fused[#loc103, #loc104])
#loc171 = loc(fused[#loc106, #loc105])
#loc172 = loc(fused[#loc107, #loc108])
#loc173 = loc(fused[#loc115, #loc116])
#loc174 = loc(fused[#loc118, #loc117])
#loc175 = loc(fused[#loc127, #loc128])
#loc176 = loc(fused[#loc129, #loc130])
#loc177 = loc(fused[#loc139, #loc136])
