!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc201 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":308:10)
#loc202 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":308:14)
#loc203 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":308:20)
#loc204 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":308:32)
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc507 = loc(fused[#loc201, #loc202])
#loc508 = loc(fused[#loc203, #loc204])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__hostname_based_logic_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc427)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc428)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc429)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc430)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc431)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc432)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc433)
  cir.func private @getnameinfo(!cir.ptr<!ty_sockaddr>, !u32i, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>, !u32i, !s32i) -> !s32i loc(#loc434)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc435)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"admin.google.com\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc19)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc436)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc22)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc23)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc437)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc26)
  cir.func private @close(!s32i) -> !s32i loc(#loc438)
  cir.func no_proto @CWE510_Trapdoor__hostname_based_logic_05_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc427)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc33)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc443)
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc444)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc445)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc446)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc447)
          %8 = cir.alloca !cir.array<!s8i x 1025>, !cir.ptr<!cir.array<!s8i x 1025>>, ["hostname"] {alignment = 16 : i64} loc(#loc448)
          %9 = cir.alloca !cir.array<!s8i x 32>, !cir.ptr<!cir.array<!s8i x 32>>, ["servInfo"] {alignment = 16 : i64} loc(#loc449)
          %10 = cir.const #cir.int<16> : !u64i loc(#loc450)
          %11 = cir.cast(integral, %10 : !u64i), !s32i loc(#loc450)
          cir.store %11, %5 : !s32i, !cir.ptr<!s32i> loc(#loc445)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc43)
          %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc43)
          cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc446)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc45)
          %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc45)
          cir.store %15, %7 : !s32i, !cir.ptr<!s32i> loc(#loc447)
          cir.scope {
            cir.do {
              %16 = cir.const #cir.int<2> : !s32i loc(#loc53)
              %17 = cir.const #cir.int<1> : !s32i loc(#loc54)
              %18 = cir.const #cir.int<6> : !s32i loc(#loc55)
              %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc56)
              cir.store %19, %6 : !s32i, !cir.ptr<!s32i> loc(#loc452)
              cir.scope {
                %38 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc61)
                %39 = cir.const #cir.int<1> : !s32i loc(#loc62)
                %40 = cir.unary(minus, %39) : !s32i, !s32i loc(#loc62)
                %41 = cir.cmp(eq, %38, %40) : !s32i, !cir.bool loc(#loc454)
                cir.if %41 {
                  cir.break loc(#loc64)
                } loc(#loc455)
              } loc(#loc453)
              %20 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc456)
              %21 = cir.const #cir.int<0> : !s32i loc(#loc67)
              %22 = cir.const #cir.int<16> : !u64i loc(#loc457)
              cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc458)
              %23 = cir.const #cir.int<2> : !s32i loc(#loc72)
              %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc72)
              %25 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
              cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc459)
              %26 = cir.const #cir.int<0> : !s32i loc(#loc75)
              %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc75)
              %28 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
              %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc77)
              cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc460)
              %30 = cir.const #cir.int<20000> : !s32i loc(#loc79)
              %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc79)
              %32 = cir.call @htons(%31) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc80)
              %33 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc81)
              cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc461)
              cir.scope {
                %38 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc86)
                %39 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc463)
                %40 = cir.const #cir.int<16> : !u64i loc(#loc464)
                %41 = cir.cast(integral, %40 : !u64i), !u32i loc(#loc464)
                %42 = cir.call @bind(%38, %39, %41) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc91)
                %43 = cir.const #cir.int<1> : !s32i loc(#loc92)
                %44 = cir.unary(minus, %43) : !s32i, !s32i loc(#loc92)
                %45 = cir.cmp(eq, %42, %44) : !s32i, !cir.bool loc(#loc465)
                cir.if %45 {
                  cir.break loc(#loc94)
                } loc(#loc466)
              } loc(#loc462)
              cir.scope {
                %38 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                %39 = cir.const #cir.int<5> : !s32i loc(#loc98)
                %40 = cir.call @listen(%38, %39) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc99)
                %41 = cir.const #cir.int<1> : !s32i loc(#loc100)
                %42 = cir.unary(minus, %41) : !s32i, !s32i loc(#loc100)
                %43 = cir.cmp(eq, %40, %42) : !s32i, !cir.bool loc(#loc468)
                cir.if %43 {
                  cir.break loc(#loc102)
                } loc(#loc469)
              } loc(#loc467)
              %34 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc103)
              %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc104)
              %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc105)
              %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc106)
              cir.store %37, %7 : !s32i, !cir.ptr<!s32i> loc(#loc470)
              cir.scope {
                %38 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc111)
                %39 = cir.const #cir.int<1> : !s32i loc(#loc112)
                %40 = cir.unary(minus, %39) : !s32i, !s32i loc(#loc112)
                %41 = cir.cmp(eq, %38, %40) : !s32i, !cir.bool loc(#loc472)
                cir.if %41 {
                  cir.break loc(#loc114)
                } loc(#loc473)
              } loc(#loc471)
              cir.scope {
                %38 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                %39 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc475)
                %40 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc476)
                %41 = cir.call @getsockname(%38, %39, %40) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc122)
                %42 = cir.const #cir.int<1> : !s32i loc(#loc123)
                %43 = cir.unary(minus, %42) : !s32i, !s32i loc(#loc124)
                %44 = cir.cmp(eq, %41, %43) : !s32i, !cir.bool loc(#loc477)
                cir.if %44 {
                  cir.break loc(#loc126)
                } loc(#loc478)
              } loc(#loc474)
              cir.scope {
                %38 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc480)
                %39 = cir.const #cir.int<16> : !u64i loc(#loc481)
                %40 = cir.cast(integral, %39 : !u64i), !u32i loc(#loc481)
                %41 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 1025>>), !cir.ptr<!s8i> loc(#loc133)
                %42 = cir.const #cir.int<1025> : !s32i loc(#loc134)
                %43 = cir.cast(integral, %42 : !s32i), !u32i loc(#loc134)
                %44 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc135)
                %45 = cir.const #cir.int<32> : !s32i loc(#loc136)
                %46 = cir.cast(integral, %45 : !s32i), !u32i loc(#loc136)
                %47 = cir.const #cir.int<2> : !s32i loc(#loc137)
                %48 = cir.call @getnameinfo(%38, %40, %41, %43, %44, %46, %47) : (!cir.ptr<!ty_sockaddr>, !u32i, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>, !u32i, !s32i) -> !s32i loc(#loc138)
                %49 = cir.const #cir.int<0> : !s32i loc(#loc139)
                %50 = cir.cmp(ne, %48, %49) : !s32i, !cir.bool loc(#loc482)
                cir.if %50 {
                  cir.break loc(#loc141)
                } loc(#loc483)
              } loc(#loc479)
              cir.scope {
                %38 = cir.get_global @strcmp : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc144)
                %39 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc19)
                %40 = cir.cast(array_to_ptrdecay, %39 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc19)
                %41 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 1025>>), !cir.ptr<!s8i> loc(#loc145)
                %42 = cir.call @strcmp(%40, %41) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc144)
                %43 = cir.const #cir.int<0> : !s32i loc(#loc146)
                %44 = cir.cmp(eq, %42, %43) : !s32i, !cir.bool loc(#loc485)
                cir.if %44 {
                  cir.scope {
                    %45 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc152)
                    %46 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc22)
                    %47 = cir.cast(array_to_ptrdecay, %46 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc22)
                    %48 = cir.cast(bitcast, %47 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc22)
                    %49 = cir.const #cir.int<15> : !u64i loc(#loc488)
                    %50 = cir.const #cir.int<0> : !s32i loc(#loc155)
                    %51 = cir.call @send(%45, %48, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc156)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc157)
                    %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc157)
                    %54 = cir.cast(integral, %53 : !s32i), !s64i loc(#loc157)
                    %55 = cir.cmp(eq, %51, %54) : !s64i, !cir.bool loc(#loc489)
                    cir.if %55 {
                      cir.break loc(#loc159)
                    } loc(#loc490)
                  } loc(#loc487)
                } else {
                  cir.scope {
                    %45 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc162)
                    %46 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc23)
                    %47 = cir.cast(array_to_ptrdecay, %46 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc23)
                    %48 = cir.cast(bitcast, %47 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc23)
                    %49 = cir.const #cir.int<8> : !u64i loc(#loc492)
                    %50 = cir.const #cir.int<0> : !s32i loc(#loc165)
                    %51 = cir.call @send(%45, %48, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc166)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc167)
                    %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc167)
                    %54 = cir.cast(integral, %53 : !s32i), !s64i loc(#loc167)
                    %55 = cir.cmp(eq, %51, %54) : !s64i, !cir.bool loc(#loc493)
                    cir.if %55 {
                      %56 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc26)
                      %57 = cir.cast(array_to_ptrdecay, %56 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc26)
                      cir.call @printLine(%57) : (!cir.ptr<!s8i>) -> () loc(#loc169)
                    } loc(#loc494)
                  } loc(#loc491)
                } loc(#loc486)
              } loc(#loc484)
              cir.yield loc(#loc52)
            } while {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc170)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc170)
              cir.condition(%17) loc(#loc170)
            } loc(#loc451)
          } loc(#loc451)
          cir.scope {
            %16 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc173)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc174)
            %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc174)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc496)
            cir.if %19 {
              %20 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc176)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc177)
            } loc(#loc497)
          } loc(#loc495)
          cir.scope {
            %16 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc180)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc181)
            %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc181)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc499)
            cir.if %19 {
              %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc183)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc184)
            } loc(#loc500)
          } loc(#loc498)
        } loc(#loc442)
      } loc(#loc441)
    } loc(#loc440)
    cir.return loc(#loc30)
  } loc(#loc439)
  cir.func no_proto @CWE510_Trapdoor__hostname_based_logic_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc502)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc187)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc503)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc189)
    cir.return loc(#loc186)
  } loc(#loc501)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc504)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc505)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc196)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc197)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc198)
  cir.func @main(%arg0: !s32i loc(fused[#loc201, #loc202]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc203, #loc204])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc507)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc508)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc200)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc205)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc206)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc207)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc207)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc208)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc195)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc195)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc209)
    %8 = cir.get_global @CWE510_Trapdoor__hostname_based_logic_05_good : !cir.ptr<!cir.func<!void ()>> loc(#loc509)
    cir.call @CWE510_Trapdoor__hostname_based_logic_05_good() : () -> () loc(#loc210)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc196)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc196)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc212)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc197)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc197)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc213)
    %13 = cir.get_global @CWE510_Trapdoor__hostname_based_logic_05_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc510)
    cir.call @CWE510_Trapdoor__hostname_based_logic_05_bad() : () -> () loc(#loc214)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc198)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc198)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc216)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc217)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc511)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc511)
    cir.return %17 : !s32i loc(#loc511)
  } loc(#loc506)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc512)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc221)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc512)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc226)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc226)
      cir.if %2 {
        %3 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc221)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc221)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc230)
      } else {
        cir.scope {
          %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc517)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc518)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc519)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc236)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc236)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc518)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc238)
          %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc238)
          cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc519)
          cir.scope {
            cir.do {
              %10 = cir.const #cir.int<2> : !s32i loc(#loc241)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc242)
              %12 = cir.const #cir.int<6> : !s32i loc(#loc243)
              %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc244)
              cir.store %13, %4 : !s32i, !cir.ptr<!s32i> loc(#loc521)
              cir.scope {
                %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc249)
                %33 = cir.const #cir.int<1> : !s32i loc(#loc250)
                %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc250)
                %35 = cir.cmp(eq, %32, %34) : !s32i, !cir.bool loc(#loc523)
                cir.if %35 {
                  cir.break loc(#loc252)
                } loc(#loc524)
              } loc(#loc522)
              %14 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc525)
              %15 = cir.const #cir.int<0> : !s32i loc(#loc255)
              %16 = cir.const #cir.int<16> : !u64i loc(#loc526)
              cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc527)
              %17 = cir.const #cir.int<2> : !s32i loc(#loc260)
              %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc260)
              %19 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
              cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc528)
              %20 = cir.const #cir.int<0> : !s32i loc(#loc262)
              %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc262)
              %22 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
              %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc77)
              cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc529)
              %24 = cir.const #cir.int<20000> : !s32i loc(#loc264)
              %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc264)
              %26 = cir.call @htons(%25) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc265)
              %27 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc81)
              cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc530)
              cir.scope {
                %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc270)
                %33 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc532)
                %34 = cir.const #cir.int<16> : !u64i loc(#loc533)
                %35 = cir.cast(integral, %34 : !u64i), !u32i loc(#loc533)
                %36 = cir.call @bind(%32, %33, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc275)
                %37 = cir.const #cir.int<1> : !s32i loc(#loc276)
                %38 = cir.unary(minus, %37) : !s32i, !s32i loc(#loc276)
                %39 = cir.cmp(eq, %36, %38) : !s32i, !cir.bool loc(#loc534)
                cir.if %39 {
                  cir.break loc(#loc278)
                } loc(#loc535)
              } loc(#loc531)
              cir.scope {
                %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc281)
                %33 = cir.const #cir.int<5> : !s32i loc(#loc282)
                %34 = cir.call @listen(%32, %33) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc283)
                %35 = cir.const #cir.int<1> : !s32i loc(#loc284)
                %36 = cir.unary(minus, %35) : !s32i, !s32i loc(#loc284)
                %37 = cir.cmp(eq, %34, %36) : !s32i, !cir.bool loc(#loc537)
                cir.if %37 {
                  cir.break loc(#loc286)
                } loc(#loc538)
              } loc(#loc536)
              %28 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc287)
              %29 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc288)
              %30 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc289)
              %31 = cir.call @accept(%28, %29, %30) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc290)
              cir.store %31, %5 : !s32i, !cir.ptr<!s32i> loc(#loc539)
              cir.scope {
                %32 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc295)
                %33 = cir.const #cir.int<1> : !s32i loc(#loc296)
                %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc296)
                %35 = cir.cmp(eq, %32, %34) : !s32i, !cir.bool loc(#loc541)
                cir.if %35 {
                  cir.break loc(#loc298)
                } loc(#loc542)
              } loc(#loc540)
              cir.scope {
                %32 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc301)
                %33 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc302)
                %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc302)
                %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc302)
                %36 = cir.const #cir.int<8> : !u64i loc(#loc544)
                %37 = cir.const #cir.int<0> : !s32i loc(#loc305)
                %38 = cir.call @send(%32, %35, %36, %37) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc306)
                %39 = cir.const #cir.int<1> : !s32i loc(#loc307)
                %40 = cir.unary(minus, %39) : !s32i, !s32i loc(#loc307)
                %41 = cir.cast(integral, %40 : !s32i), !s64i loc(#loc307)
                %42 = cir.cmp(eq, %38, %41) : !s64i, !cir.bool loc(#loc545)
                cir.if %42 {
                  %43 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc309)
                  %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc309)
                  cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc310)
                } loc(#loc546)
              } loc(#loc543)
              cir.yield loc(#loc240)
            } while {
              %10 = cir.const #cir.int<0> : !s32i loc(#loc311)
              %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc311)
              cir.condition(%11) loc(#loc311)
            } loc(#loc520)
          } loc(#loc520)
          cir.scope {
            %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc314)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc315)
            %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc315)
            %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc548)
            cir.if %13 {
              %14 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc317)
              %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc318)
            } loc(#loc549)
          } loc(#loc547)
          cir.scope {
            %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc321)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc322)
            %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc322)
            %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc551)
            cir.if %13 {
              %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc324)
              %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc325)
            } loc(#loc552)
          } loc(#loc550)
        } loc(#loc516)
      } loc(#loc515)
    } loc(#loc514)
    cir.return loc(#loc223)
  } loc(#loc513)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc427)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc330)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc330)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc557)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc558)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc559)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc337)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc337)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc558)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc339)
          %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc339)
          cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc559)
          cir.scope {
            cir.do {
              %10 = cir.const #cir.int<2> : !s32i loc(#loc342)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc343)
              %12 = cir.const #cir.int<6> : !s32i loc(#loc344)
              %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc345)
              cir.store %13, %4 : !s32i, !cir.ptr<!s32i> loc(#loc561)
              cir.scope {
                %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc350)
                %33 = cir.const #cir.int<1> : !s32i loc(#loc351)
                %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc351)
                %35 = cir.cmp(eq, %32, %34) : !s32i, !cir.bool loc(#loc563)
                cir.if %35 {
                  cir.break loc(#loc353)
                } loc(#loc564)
              } loc(#loc562)
              %14 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc565)
              %15 = cir.const #cir.int<0> : !s32i loc(#loc356)
              %16 = cir.const #cir.int<16> : !u64i loc(#loc566)
              cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc567)
              %17 = cir.const #cir.int<2> : !s32i loc(#loc361)
              %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc361)
              %19 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
              cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc568)
              %20 = cir.const #cir.int<0> : !s32i loc(#loc363)
              %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc363)
              %22 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
              %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc77)
              cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc569)
              %24 = cir.const #cir.int<20000> : !s32i loc(#loc365)
              %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc365)
              %26 = cir.call @htons(%25) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc366)
              %27 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc81)
              cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc570)
              cir.scope {
                %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc371)
                %33 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc572)
                %34 = cir.const #cir.int<16> : !u64i loc(#loc573)
                %35 = cir.cast(integral, %34 : !u64i), !u32i loc(#loc573)
                %36 = cir.call @bind(%32, %33, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc376)
                %37 = cir.const #cir.int<1> : !s32i loc(#loc377)
                %38 = cir.unary(minus, %37) : !s32i, !s32i loc(#loc377)
                %39 = cir.cmp(eq, %36, %38) : !s32i, !cir.bool loc(#loc574)
                cir.if %39 {
                  cir.break loc(#loc379)
                } loc(#loc575)
              } loc(#loc571)
              cir.scope {
                %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc382)
                %33 = cir.const #cir.int<5> : !s32i loc(#loc383)
                %34 = cir.call @listen(%32, %33) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc384)
                %35 = cir.const #cir.int<1> : !s32i loc(#loc385)
                %36 = cir.unary(minus, %35) : !s32i, !s32i loc(#loc385)
                %37 = cir.cmp(eq, %34, %36) : !s32i, !cir.bool loc(#loc577)
                cir.if %37 {
                  cir.break loc(#loc387)
                } loc(#loc578)
              } loc(#loc576)
              %28 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc388)
              %29 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc389)
              %30 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc390)
              %31 = cir.call @accept(%28, %29, %30) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc391)
              cir.store %31, %5 : !s32i, !cir.ptr<!s32i> loc(#loc579)
              cir.scope {
                %32 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc396)
                %33 = cir.const #cir.int<1> : !s32i loc(#loc397)
                %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc397)
                %35 = cir.cmp(eq, %32, %34) : !s32i, !cir.bool loc(#loc581)
                cir.if %35 {
                  cir.break loc(#loc399)
                } loc(#loc582)
              } loc(#loc580)
              cir.scope {
                %32 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc402)
                %33 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc403)
                %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc403)
                %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc403)
                %36 = cir.const #cir.int<8> : !u64i loc(#loc584)
                %37 = cir.const #cir.int<0> : !s32i loc(#loc406)
                %38 = cir.call @send(%32, %35, %36, %37) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc407)
                %39 = cir.const #cir.int<1> : !s32i loc(#loc408)
                %40 = cir.unary(minus, %39) : !s32i, !s32i loc(#loc408)
                %41 = cir.cast(integral, %40 : !s32i), !s64i loc(#loc408)
                %42 = cir.cmp(eq, %38, %41) : !s64i, !cir.bool loc(#loc585)
                cir.if %42 {
                  %43 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc410)
                  %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc410)
                  cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc411)
                } loc(#loc586)
              } loc(#loc583)
              cir.yield loc(#loc341)
            } while {
              %10 = cir.const #cir.int<0> : !s32i loc(#loc412)
              %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc412)
              cir.condition(%11) loc(#loc412)
            } loc(#loc560)
          } loc(#loc560)
          cir.scope {
            %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc415)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc416)
            %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc416)
            %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc588)
            cir.if %13 {
              %14 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc418)
              %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc419)
            } loc(#loc589)
          } loc(#loc587)
          cir.scope {
            %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc422)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc423)
            %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc423)
            %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc591)
            cir.if %13 {
              %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc425)
              %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc426)
            } loc(#loc592)
          } loc(#loc590)
        } loc(#loc556)
      } loc(#loc555)
    } loc(#loc554)
    cir.return loc(#loc327)
  } loc(#loc553)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__hostname_based_logic_05.c":0:0)
#loc1 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":48:1)
#loc2 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":48:25)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":404:1)
#loc6 = loc("/usr/include/netinet/in.h":405:40)
#loc7 = loc("/usr/include/sys/socket.h":112:1)
#loc8 = loc("/usr/include/sys/socket.h":113:6)
#loc9 = loc("/usr/include/sys/socket.h":296:1)
#loc10 = loc("/usr/include/sys/socket.h":296:39)
#loc11 = loc("/usr/include/sys/socket.h":306:1)
#loc12 = loc("/usr/include/sys/socket.h":307:38)
#loc13 = loc("/usr/include/sys/socket.h":116:1)
#loc14 = loc("/usr/include/sys/socket.h":117:33)
#loc15 = loc("/usr/include/netdb.h":675:1)
#loc16 = loc("/usr/include/netdb.h":678:36)
#loc17 = loc("/usr/include/string.h":156:1)
#loc18 = loc("/usr/include/string.h":157:33)
#loc19 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":111:28)
#loc20 = loc("/usr/include/sys/socket.h":138:1)
#loc21 = loc("/usr/include/sys/socket.h":138:74)
#loc22 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":113:44)
#loc23 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":121:44)
#loc24 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc25 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc26 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":123:35)
#loc27 = loc("/usr/include/unistd.h":358:1)
#loc28 = loc("/usr/include/unistd.h":358:27)
#loc29 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":53:1)
#loc30 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":144:1)
#loc31 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":55:5)
#loc32 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":143:5)
#loc33 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":55:8)
#loc34 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":56:5)
#loc35 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":57:9)
#loc36 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":142:9)
#loc37 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":62:13)
#loc38 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":62:32)
#loc39 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":62:41)
#loc40 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":63:13)
#loc41 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":63:56)
#loc42 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":64:13)
#loc43 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":64:35)
#loc44 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":65:13)
#loc45 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":65:35)
#loc46 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":66:13)
#loc47 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":66:37)
#loc48 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":67:13)
#loc49 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":67:37)
#loc50 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":63:36)
#loc51 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":68:13)
#loc52 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":127:21)
#loc53 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":77:39)
#loc54 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":77:48)
#loc55 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":77:61)
#loc56 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":77:32)
#loc57 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":77:17)
#loc58 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":77:72)
#loc59 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":78:17)
#loc60 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":81:17)
#loc61 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":78:21)
#loc62 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":78:37)
#loc63 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":79:17)
#loc64 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":80:21)
#loc65 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":82:24)
#loc66 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":82:25)
#loc67 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":82:34)
#loc68 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":82:37)
#loc69 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":82:51)
#loc70 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":82:17)
#loc71 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":82:52)
#loc72 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":83:38)
#loc73 = loc("/usr/include/netinet/in.h":249:5)
#loc74 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":83:17)
#loc75 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":84:43)
#loc76 = loc("/usr/include/netinet/in.h":251:20)
#loc77 = loc("/usr/include/netinet/in.h":33:15)
#loc78 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":84:17)
#loc79 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":85:42)
#loc80 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":85:36)
#loc81 = loc("/usr/include/netinet/in.h":250:15)
#loc82 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":85:17)
#loc83 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":85:47)
#loc84 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":86:17)
#loc85 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":89:17)
#loc86 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":86:26)
#loc87 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":86:58)
#loc88 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":86:59)
#loc89 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":86:68)
#loc90 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":86:82)
#loc91 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":86:21)
#loc92 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":86:88)
#loc93 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":87:17)
#loc94 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":88:21)
#loc95 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":90:17)
#loc96 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":93:17)
#loc97 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":90:28)
#loc98 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":90:42)
#loc99 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":90:21)
#loc100 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":90:48)
#loc101 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":91:17)
#loc102 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":92:21)
#loc103 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":94:39)
#loc104 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":94:53)
#loc105 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":94:59)
#loc106 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":94:32)
#loc107 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":94:17)
#loc108 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":94:63)
#loc109 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":95:17)
#loc110 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":98:17)
#loc111 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":95:21)
#loc112 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":95:37)
#loc113 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":96:17)
#loc114 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":97:21)
#loc115 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":99:17)
#loc116 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":102:17)
#loc117 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":99:33)
#loc118 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":99:66)
#loc119 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":99:67)
#loc120 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":99:82)
#loc121 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":99:83)
#loc122 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":99:21)
#loc123 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":99:105)
#loc124 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":99:104)
#loc125 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":100:17)
#loc126 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":101:21)
#loc127 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":103:17)
#loc128 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":109:17)
#loc129 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":103:52)
#loc130 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":103:53)
#loc131 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":104:33)
#loc132 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":104:55)
#loc133 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":105:33)
#loc134 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":106:33)
#loc135 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":106:45)
#loc136 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":106:55)
#loc137 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":106:67)
#loc138 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":103:21)
#loc139 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":106:86)
#loc140 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":107:17)
#loc141 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":108:21)
#loc142 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":111:17)
#loc143 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":125:17)
#loc144 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":111:21)
#loc145 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":111:48)
#loc146 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":111:61)
#loc147 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":112:17)
#loc148 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":118:17)
#loc149 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":120:17)
#loc150 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":113:21)
#loc151 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":117:21)
#loc152 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":113:30)
#loc153 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":113:59)
#loc154 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":113:79)
#loc155 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":113:82)
#loc156 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":113:25)
#loc157 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":113:89)
#loc158 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":114:21)
#loc159 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":116:25)
#loc160 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":121:21)
#loc161 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":124:21)
#loc162 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":121:30)
#loc163 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":121:61)
#loc164 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":121:83)
#loc165 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":121:86)
#loc166 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":121:25)
#loc167 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":121:92)
#loc168 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":122:21)
#loc169 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":123:25)
#loc170 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":127:20)
#loc171 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":128:13)
#loc172 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":131:13)
#loc173 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":128:17)
#loc174 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":128:33)
#loc175 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":129:13)
#loc176 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":130:30)
#loc177 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":130:17)
#loc178 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":132:13)
#loc179 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":135:13)
#loc180 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":132:17)
#loc181 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":132:33)
#loc182 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":133:13)
#loc183 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":134:30)
#loc184 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":134:17)
#loc185 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":293:1)
#loc186 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":297:1)
#loc187 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":295:5)
#loc188 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":295:11)
#loc189 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":296:5)
#loc190 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":296:11)
#loc191 = loc("/usr/include/stdlib.h":575:1)
#loc192 = loc("/usr/include/stdlib.h":575:41)
#loc193 = loc("/usr/include/time.h":76:1)
#loc194 = loc("/usr/include/time.h":76:38)
#loc195 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":313:15)
#loc196 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":315:15)
#loc197 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":318:15)
#loc198 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":320:15)
#loc199 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":308:1)
#loc200 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":323:1)
#loc205 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":309:1)
#loc206 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":311:27)
#loc207 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":311:22)
#loc208 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":311:5)
#loc209 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":313:5)
#loc210 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":314:5)
#loc211 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":314:51)
#loc212 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":315:5)
#loc213 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":318:5)
#loc214 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":319:5)
#loc215 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":319:50)
#loc216 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":320:5)
#loc217 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":322:12)
#loc218 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":322:5)
#loc219 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":49:1)
#loc220 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":49:26)
#loc221 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":156:19)
#loc222 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":151:1)
#loc223 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":222:1)
#loc224 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":153:5)
#loc225 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":221:5)
#loc226 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":153:8)
#loc227 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":154:5)
#loc228 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":157:5)
#loc229 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":159:5)
#loc230 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":156:9)
#loc231 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":160:9)
#loc232 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":220:9)
#loc233 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":165:13)
#loc234 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":165:32)
#loc235 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":166:13)
#loc236 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":166:35)
#loc237 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":167:13)
#loc238 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":167:35)
#loc239 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":168:13)
#loc240 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":205:21)
#loc241 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":177:39)
#loc242 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":177:48)
#loc243 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":177:61)
#loc244 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":177:32)
#loc245 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":177:17)
#loc246 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":177:72)
#loc247 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":178:17)
#loc248 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":181:17)
#loc249 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":178:21)
#loc250 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":178:37)
#loc251 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":179:17)
#loc252 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":180:21)
#loc253 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":182:24)
#loc254 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":182:25)
#loc255 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":182:34)
#loc256 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":182:37)
#loc257 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":182:51)
#loc258 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":182:17)
#loc259 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":182:52)
#loc260 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":183:38)
#loc261 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":183:17)
#loc262 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":184:43)
#loc263 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":184:17)
#loc264 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":185:42)
#loc265 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":185:36)
#loc266 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":185:17)
#loc267 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":185:47)
#loc268 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":186:17)
#loc269 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":189:17)
#loc270 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":186:26)
#loc271 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":186:58)
#loc272 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":186:59)
#loc273 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":186:68)
#loc274 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":186:82)
#loc275 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":186:21)
#loc276 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":186:88)
#loc277 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":187:17)
#loc278 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":188:21)
#loc279 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":190:17)
#loc280 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":193:17)
#loc281 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":190:28)
#loc282 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":190:42)
#loc283 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":190:21)
#loc284 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":190:48)
#loc285 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":191:17)
#loc286 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":192:21)
#loc287 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":194:39)
#loc288 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":194:53)
#loc289 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":194:59)
#loc290 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":194:32)
#loc291 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":194:17)
#loc292 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":194:63)
#loc293 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":195:17)
#loc294 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":198:17)
#loc295 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":195:21)
#loc296 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":195:37)
#loc297 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":196:17)
#loc298 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":197:21)
#loc299 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":200:17)
#loc300 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":203:17)
#loc301 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":200:26)
#loc302 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":200:40)
#loc303 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":200:57)
#loc304 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":200:79)
#loc305 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":200:82)
#loc306 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":200:21)
#loc307 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":200:88)
#loc308 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":201:17)
#loc309 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":202:31)
#loc310 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":202:21)
#loc311 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":205:20)
#loc312 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":206:13)
#loc313 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":209:13)
#loc314 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":206:17)
#loc315 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":206:33)
#loc316 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":207:13)
#loc317 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":208:30)
#loc318 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":208:17)
#loc319 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":210:13)
#loc320 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":213:13)
#loc321 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":210:17)
#loc322 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":210:33)
#loc323 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":211:13)
#loc324 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":212:30)
#loc325 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":212:17)
#loc326 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":225:1)
#loc327 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":291:1)
#loc328 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":227:5)
#loc329 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":290:5)
#loc330 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":227:8)
#loc331 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":228:5)
#loc332 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":229:9)
#loc333 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":289:9)
#loc334 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":234:13)
#loc335 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":234:32)
#loc336 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":235:13)
#loc337 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":235:35)
#loc338 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":236:13)
#loc339 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":236:35)
#loc340 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":237:13)
#loc341 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":274:21)
#loc342 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":246:39)
#loc343 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":246:48)
#loc344 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":246:61)
#loc345 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":246:32)
#loc346 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":246:17)
#loc347 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":246:72)
#loc348 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":247:17)
#loc349 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":250:17)
#loc350 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":247:21)
#loc351 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":247:37)
#loc352 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":248:17)
#loc353 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":249:21)
#loc354 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":251:24)
#loc355 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":251:25)
#loc356 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":251:34)
#loc357 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":251:37)
#loc358 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":251:51)
#loc359 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":251:17)
#loc360 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":251:52)
#loc361 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":252:38)
#loc362 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":252:17)
#loc363 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":253:43)
#loc364 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":253:17)
#loc365 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":254:42)
#loc366 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":254:36)
#loc367 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":254:17)
#loc368 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":254:47)
#loc369 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":255:17)
#loc370 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":258:17)
#loc371 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":255:26)
#loc372 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":255:58)
#loc373 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":255:59)
#loc374 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":255:68)
#loc375 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":255:82)
#loc376 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":255:21)
#loc377 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":255:88)
#loc378 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":256:17)
#loc379 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":257:21)
#loc380 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":259:17)
#loc381 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":262:17)
#loc382 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":259:28)
#loc383 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":259:42)
#loc384 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":259:21)
#loc385 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":259:48)
#loc386 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":260:17)
#loc387 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":261:21)
#loc388 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":263:39)
#loc389 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":263:53)
#loc390 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":263:59)
#loc391 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":263:32)
#loc392 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":263:17)
#loc393 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":263:63)
#loc394 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":264:17)
#loc395 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":267:17)
#loc396 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":264:21)
#loc397 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":264:37)
#loc398 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":265:17)
#loc399 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":266:21)
#loc400 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":269:17)
#loc401 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":272:17)
#loc402 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":269:26)
#loc403 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":269:40)
#loc404 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":269:57)
#loc405 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":269:79)
#loc406 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":269:82)
#loc407 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":269:21)
#loc408 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":269:88)
#loc409 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":270:17)
#loc410 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":271:31)
#loc411 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":271:21)
#loc412 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":274:20)
#loc413 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":275:13)
#loc414 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":278:13)
#loc415 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":275:17)
#loc416 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":275:33)
#loc417 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":276:13)
#loc418 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":277:30)
#loc419 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":277:17)
#loc420 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":279:13)
#loc421 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":282:13)
#loc422 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":279:17)
#loc423 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":279:33)
#loc424 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":280:13)
#loc425 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":281:30)
#loc426 = loc("CWE510_Trapdoor__hostname_based_logic_05.c":281:17)
#loc427 = loc(fused[#loc1, #loc2])
#loc428 = loc(fused[#loc3, #loc4])
#loc429 = loc(fused[#loc5, #loc6])
#loc430 = loc(fused[#loc7, #loc8])
#loc431 = loc(fused[#loc9, #loc10])
#loc432 = loc(fused[#loc11, #loc12])
#loc433 = loc(fused[#loc13, #loc14])
#loc434 = loc(fused[#loc15, #loc16])
#loc435 = loc(fused[#loc17, #loc18])
#loc436 = loc(fused[#loc20, #loc21])
#loc437 = loc(fused[#loc24, #loc25])
#loc438 = loc(fused[#loc27, #loc28])
#loc439 = loc(fused[#loc29, #loc30])
#loc440 = loc(fused[#loc31, #loc32])
#loc441 = loc(fused[#loc34, #loc32])
#loc442 = loc(fused[#loc35, #loc36])
#loc443 = loc(fused[#loc37, #loc38])
#loc444 = loc(fused[#loc37, #loc39])
#loc445 = loc(fused[#loc40, #loc41])
#loc446 = loc(fused[#loc42, #loc43])
#loc447 = loc(fused[#loc44, #loc45])
#loc448 = loc(fused[#loc46, #loc47])
#loc449 = loc(fused[#loc48, #loc49])
#loc450 = loc(fused[#loc50, #loc41])
#loc451 = loc(fused[#loc51, #loc52])
#loc452 = loc(fused[#loc57, #loc58])
#loc453 = loc(fused[#loc59, #loc60])
#loc454 = loc(fused[#loc61, #loc62])
#loc455 = loc(fused[#loc63, #loc60])
#loc456 = loc(fused[#loc65, #loc66])
#loc457 = loc(fused[#loc68, #loc69])
#loc458 = loc(fused[#loc70, #loc71])
#loc459 = loc(fused[#loc74, #loc72])
#loc460 = loc(fused[#loc78, #loc75])
#loc461 = loc(fused[#loc82, #loc83])
#loc462 = loc(fused[#loc84, #loc85])
#loc463 = loc(fused[#loc87, #loc88])
#loc464 = loc(fused[#loc89, #loc90])
#loc465 = loc(fused[#loc91, #loc92])
#loc466 = loc(fused[#loc93, #loc85])
#loc467 = loc(fused[#loc95, #loc96])
#loc468 = loc(fused[#loc99, #loc100])
#loc469 = loc(fused[#loc101, #loc96])
#loc470 = loc(fused[#loc107, #loc108])
#loc471 = loc(fused[#loc109, #loc110])
#loc472 = loc(fused[#loc111, #loc112])
#loc473 = loc(fused[#loc113, #loc110])
#loc474 = loc(fused[#loc115, #loc116])
#loc475 = loc(fused[#loc118, #loc119])
#loc476 = loc(fused[#loc120, #loc121])
#loc477 = loc(fused[#loc122, #loc123])
#loc478 = loc(fused[#loc125, #loc116])
#loc479 = loc(fused[#loc127, #loc128])
#loc480 = loc(fused[#loc129, #loc130])
#loc481 = loc(fused[#loc131, #loc132])
#loc482 = loc(fused[#loc138, #loc139])
#loc483 = loc(fused[#loc140, #loc128])
#loc484 = loc(fused[#loc142, #loc143])
#loc485 = loc(fused[#loc144, #loc146])
#loc486 = loc(fused[#loc147, #loc148, #loc149, #loc143])
#loc487 = loc(fused[#loc150, #loc151])
#loc488 = loc(fused[#loc153, #loc154])
#loc489 = loc(fused[#loc156, #loc157])
#loc490 = loc(fused[#loc158, #loc151])
#loc491 = loc(fused[#loc160, #loc161])
#loc492 = loc(fused[#loc163, #loc164])
#loc493 = loc(fused[#loc166, #loc167])
#loc494 = loc(fused[#loc168, #loc161])
#loc495 = loc(fused[#loc171, #loc172])
#loc496 = loc(fused[#loc173, #loc174])
#loc497 = loc(fused[#loc175, #loc172])
#loc498 = loc(fused[#loc178, #loc179])
#loc499 = loc(fused[#loc180, #loc181])
#loc500 = loc(fused[#loc182, #loc179])
#loc501 = loc(fused[#loc185, #loc186])
#loc502 = loc(fused[#loc187, #loc188])
#loc503 = loc(fused[#loc189, #loc190])
#loc504 = loc(fused[#loc191, #loc192])
#loc505 = loc(fused[#loc193, #loc194])
#loc506 = loc(fused[#loc199, #loc200])
#loc509 = loc(fused[#loc210, #loc211])
#loc510 = loc(fused[#loc214, #loc215])
#loc511 = loc(fused[#loc218, #loc217])
#loc512 = loc(fused[#loc219, #loc220])
#loc513 = loc(fused[#loc222, #loc223])
#loc514 = loc(fused[#loc224, #loc225])
#loc515 = loc(fused[#loc227, #loc228, #loc229, #loc225])
#loc516 = loc(fused[#loc231, #loc232])
#loc517 = loc(fused[#loc233, #loc234])
#loc518 = loc(fused[#loc235, #loc236])
#loc519 = loc(fused[#loc237, #loc238])
#loc520 = loc(fused[#loc239, #loc240])
#loc521 = loc(fused[#loc245, #loc246])
#loc522 = loc(fused[#loc247, #loc248])
#loc523 = loc(fused[#loc249, #loc250])
#loc524 = loc(fused[#loc251, #loc248])
#loc525 = loc(fused[#loc253, #loc254])
#loc526 = loc(fused[#loc256, #loc257])
#loc527 = loc(fused[#loc258, #loc259])
#loc528 = loc(fused[#loc261, #loc260])
#loc529 = loc(fused[#loc263, #loc262])
#loc530 = loc(fused[#loc266, #loc267])
#loc531 = loc(fused[#loc268, #loc269])
#loc532 = loc(fused[#loc271, #loc272])
#loc533 = loc(fused[#loc273, #loc274])
#loc534 = loc(fused[#loc275, #loc276])
#loc535 = loc(fused[#loc277, #loc269])
#loc536 = loc(fused[#loc279, #loc280])
#loc537 = loc(fused[#loc283, #loc284])
#loc538 = loc(fused[#loc285, #loc280])
#loc539 = loc(fused[#loc291, #loc292])
#loc540 = loc(fused[#loc293, #loc294])
#loc541 = loc(fused[#loc295, #loc296])
#loc542 = loc(fused[#loc297, #loc294])
#loc543 = loc(fused[#loc299, #loc300])
#loc544 = loc(fused[#loc303, #loc304])
#loc545 = loc(fused[#loc306, #loc307])
#loc546 = loc(fused[#loc308, #loc300])
#loc547 = loc(fused[#loc312, #loc313])
#loc548 = loc(fused[#loc314, #loc315])
#loc549 = loc(fused[#loc316, #loc313])
#loc550 = loc(fused[#loc319, #loc320])
#loc551 = loc(fused[#loc321, #loc322])
#loc552 = loc(fused[#loc323, #loc320])
#loc553 = loc(fused[#loc326, #loc327])
#loc554 = loc(fused[#loc328, #loc329])
#loc555 = loc(fused[#loc331, #loc329])
#loc556 = loc(fused[#loc332, #loc333])
#loc557 = loc(fused[#loc334, #loc335])
#loc558 = loc(fused[#loc336, #loc337])
#loc559 = loc(fused[#loc338, #loc339])
#loc560 = loc(fused[#loc340, #loc341])
#loc561 = loc(fused[#loc346, #loc347])
#loc562 = loc(fused[#loc348, #loc349])
#loc563 = loc(fused[#loc350, #loc351])
#loc564 = loc(fused[#loc352, #loc349])
#loc565 = loc(fused[#loc354, #loc355])
#loc566 = loc(fused[#loc357, #loc358])
#loc567 = loc(fused[#loc359, #loc360])
#loc568 = loc(fused[#loc362, #loc361])
#loc569 = loc(fused[#loc364, #loc363])
#loc570 = loc(fused[#loc367, #loc368])
#loc571 = loc(fused[#loc369, #loc370])
#loc572 = loc(fused[#loc372, #loc373])
#loc573 = loc(fused[#loc374, #loc375])
#loc574 = loc(fused[#loc376, #loc377])
#loc575 = loc(fused[#loc378, #loc370])
#loc576 = loc(fused[#loc380, #loc381])
#loc577 = loc(fused[#loc384, #loc385])
#loc578 = loc(fused[#loc386, #loc381])
#loc579 = loc(fused[#loc392, #loc393])
#loc580 = loc(fused[#loc394, #loc395])
#loc581 = loc(fused[#loc396, #loc397])
#loc582 = loc(fused[#loc398, #loc395])
#loc583 = loc(fused[#loc400, #loc401])
#loc584 = loc(fused[#loc404, #loc405])
#loc585 = loc(fused[#loc407, #loc408])
#loc586 = loc(fused[#loc409, #loc401])
#loc587 = loc(fused[#loc413, #loc414])
#loc588 = loc(fused[#loc415, #loc416])
#loc589 = loc(fused[#loc417, #loc414])
#loc590 = loc(fused[#loc420, #loc421])
#loc591 = loc(fused[#loc422, #loc423])
#loc592 = loc(fused[#loc424, #loc421])
