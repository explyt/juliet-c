!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc20 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":65:77)
#loc21 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":65:84)
#loc153 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":142:81)
#loc154 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":142:88)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc169 = loc(fused[#loc20, #loc21])
#loc220 = loc(fused[#loc153, #loc154])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc160)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc161)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc162)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc7)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc163)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc164)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc165)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc166)
  cir.func private @close(!s32i) -> !s32i loc(#loc167)
  cir.func @CWE78_OS_Command_Injection__char_connect_socket_execlp_61b_badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc20, #loc21])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc169)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc19)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc22)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc171)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc172)
      %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc173)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc174)
      %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc175)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc32)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc32)
      cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc174)
      %11 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc35)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
      %13 = cir.call @strlen(%12) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc35)
      cir.store %13, %8 : !u64i, !cir.ptr<!u64i> loc(#loc175)
      cir.scope {
        cir.do {
          %14 = cir.const #cir.int<2> : !s32i loc(#loc39)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc40)
          %16 = cir.const #cir.int<6> : !s32i loc(#loc41)
          %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc42)
          cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc177)
          cir.scope {
            %68 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc47)
            %69 = cir.const #cir.int<1> : !s32i loc(#loc48)
            %70 = cir.unary(minus, %69) : !s32i, !s32i loc(#loc48)
            %71 = cir.cmp(eq, %68, %70) : !s32i, !cir.bool loc(#loc179)
            cir.if %71 {
              cir.break loc(#loc50)
            } loc(#loc180)
          } loc(#loc178)
          %18 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc181)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc53)
          %20 = cir.const #cir.int<16> : !u64i loc(#loc182)
          cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc183)
          %21 = cir.const #cir.int<2> : !s32i loc(#loc58)
          %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc58)
          %23 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc59)
          cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc184)
          %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc7)
          %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc7)
          %26 = cir.call @inet_addr(%25) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc61)
          %27 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc62)
          %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc63)
          cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc185)
          %29 = cir.const #cir.int<27015> : !s32i loc(#loc66)
          %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc66)
          %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc67)
          %32 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
          cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc186)
          cir.scope {
            %68 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc73)
            %69 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc188)
            %70 = cir.const #cir.int<16> : !u64i loc(#loc189)
            %71 = cir.cast(integral, %70 : !u64i), !u32i loc(#loc189)
            %72 = cir.call @connect(%68, %69, %71) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc78)
            %73 = cir.const #cir.int<1> : !s32i loc(#loc79)
            %74 = cir.unary(minus, %73) : !s32i, !s32i loc(#loc79)
            %75 = cir.cmp(eq, %72, %74) : !s32i, !cir.bool loc(#loc190)
            cir.if %75 {
              cir.break loc(#loc81)
            } loc(#loc191)
          } loc(#loc187)
          %33 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc82)
          %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc83)
          %35 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc84)
          %36 = cir.ptr_stride(%34 : !cir.ptr<!s8i>, %35 : !u64i), !cir.ptr<!s8i> loc(#loc85)
          %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc192)
          %38 = cir.const #cir.int<1> : !u64i loc(#loc193)
          %39 = cir.const #cir.int<100> : !s32i loc(#loc90)
          %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc90)
          %41 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc91)
          %42 = cir.binop(sub, %40, %41) : !u64i loc(#loc194)
          %43 = cir.const #cir.int<1> : !s32i loc(#loc92)
          %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc92)
          %45 = cir.binop(sub, %42, %44) : !u64i loc(#loc195)
          %46 = cir.binop(mul, %38, %45) : !u64i loc(#loc196)
          %47 = cir.const #cir.int<0> : !s32i loc(#loc94)
          %48 = cir.call @recv(%33, %37, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc95)
          %49 = cir.cast(integral, %48 : !s64i), !s32i loc(#loc95)
          cir.store %49, %4 : !s32i, !cir.ptr<!s32i> loc(#loc197)
          cir.scope {
            %68 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc100)
            %69 = cir.const #cir.int<1> : !s32i loc(#loc101)
            %70 = cir.unary(minus, %69) : !s32i, !s32i loc(#loc101)
            %71 = cir.cmp(eq, %68, %70) : !s32i, !cir.bool loc(#loc199)
            %72 = cir.ternary(%71, true {
              %73 = cir.const #true loc(#loc102)
              cir.yield %73 : !cir.bool loc(#loc102)
            }, false {
              %73 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc103)
              %74 = cir.const #cir.int<0> : !s32i loc(#loc104)
              %75 = cir.cmp(eq, %73, %74) : !s32i, !cir.bool loc(#loc200)
              %76 = cir.ternary(%75, true {
                %77 = cir.const #true loc(#loc102)
                cir.yield %77 : !cir.bool loc(#loc102)
              }, false {
                %77 = cir.const #false loc(#loc102)
                cir.yield %77 : !cir.bool loc(#loc102)
              }) : (!cir.bool) -> !cir.bool loc(#loc102)
              cir.yield %76 : !cir.bool loc(#loc102)
            }) : (!cir.bool) -> !cir.bool loc(#loc102)
            cir.if %72 {
              cir.break loc(#loc106)
            } loc(#loc201)
          } loc(#loc198)
          %50 = cir.const #cir.int<0> : !s32i loc(#loc107)
          %51 = cir.cast(integral, %50 : !s32i), !s8i loc(#loc107)
          %52 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
          %53 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc109)
          %54 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc110)
          %55 = cir.cast(integral, %54 : !s32i), !u64i loc(#loc110)
          %56 = cir.const #cir.int<1> : !u64i loc(#loc202)
          %57 = cir.binop(div, %55, %56) : !u64i loc(#loc203)
          %58 = cir.binop(add, %53, %57) : !u64i loc(#loc204)
          %59 = cir.ptr_stride(%52 : !cir.ptr<!s8i>, %58 : !u64i), !cir.ptr<!s8i> loc(#loc113)
          cir.store %51, %59 : !s8i, !cir.ptr<!s8i> loc(#loc205)
          %60 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc114)
          %61 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
          %62 = cir.const #cir.int<13> : !s32i loc(#loc116)
          %63 = cir.call @strchr(%61, %62) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc114)
          cir.store %63, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc206)
          cir.scope {
            %68 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc121)
            %69 = cir.cast(ptr_to_bool, %68 : !cir.ptr<!s8i>), !cir.bool loc(#loc121)
            cir.if %69 {
              %70 = cir.const #cir.int<0> : !s32i loc(#loc123)
              %71 = cir.cast(integral, %70 : !s32i), !s8i loc(#loc123)
              %72 = cir.load deref %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
              cir.store %71, %72 : !s8i, !cir.ptr<!s8i> loc(#loc209)
            } loc(#loc208)
          } loc(#loc207)
          %64 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc126)
          %65 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
          %66 = cir.const #cir.int<10> : !s32i loc(#loc128)
          %67 = cir.call @strchr(%65, %66) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc126)
          cir.store %67, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc210)
          cir.scope {
            %68 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
            %69 = cir.cast(ptr_to_bool, %68 : !cir.ptr<!s8i>), !cir.bool loc(#loc133)
            cir.if %69 {
              %70 = cir.const #cir.int<0> : !s32i loc(#loc135)
              %71 = cir.cast(integral, %70 : !s32i), !s8i loc(#loc135)
              %72 = cir.load deref %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc136)
              cir.store %71, %72 : !s8i, !cir.ptr<!s8i> loc(#loc213)
            } loc(#loc212)
          } loc(#loc211)
          cir.yield loc(#loc38)
        } while {
          %14 = cir.const #cir.int<0> : !s32i loc(#loc138)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc138)
          cir.condition(%15) loc(#loc138)
        } loc(#loc176)
      } loc(#loc176)
      cir.scope {
        %14 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc141)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc142)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc142)
        %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc215)
        cir.if %17 {
          %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc144)
          %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc145)
        } loc(#loc216)
      } loc(#loc214)
    } loc(#loc170)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc217)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc217)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc217)
  } loc(#loc168)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc218)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc150)
  cir.func @CWE78_OS_Command_Injection__char_connect_socket_execlp_61b_goodG2BSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc153, #loc154])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc220)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc152)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc155)
    %2 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc156)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc150)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc150)
    %6 = cir.call @strcat(%3, %5) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc156)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc158)
    cir.store %7, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc221)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc221)
    cir.return %8 : !cir.ptr<!s8i> loc(#loc221)
  } loc(#loc219)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/arpa/inet.h":34:1)
#loc6 = loc("/usr/include/arpa/inet.h":34:47)
#loc7 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":94:49)
#loc8 = loc("/usr/include/netinet/in.h":404:1)
#loc9 = loc("/usr/include/netinet/in.h":405:40)
#loc10 = loc("/usr/include/sys/socket.h":126:1)
#loc11 = loc("/usr/include/sys/socket.h":126:75)
#loc12 = loc("/usr/include/sys/socket.h":145:1)
#loc13 = loc("/usr/include/sys/socket.h":145:68)
#loc14 = loc("/usr/include/string.h":246:1)
#loc15 = loc("/usr/include/string.h":247:33)
#loc16 = loc("/usr/include/unistd.h":358:1)
#loc17 = loc("/usr/include/unistd.h":358:27)
#loc18 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":65:1)
#loc19 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":135:1)
#loc22 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":66:1)
#loc23 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":67:5)
#loc24 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":133:5)
#loc25 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":72:9)
#loc26 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":72:13)
#loc27 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":73:9)
#loc28 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":73:28)
#loc29 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":74:9)
#loc30 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":74:15)
#loc31 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":75:9)
#loc32 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":75:32)
#loc33 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":76:9)
#loc34 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":76:37)
#loc35 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":76:26)
#loc36 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":76:33)
#loc37 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":77:9)
#loc38 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":122:17)
#loc39 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":87:36)
#loc40 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":87:45)
#loc41 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":87:58)
#loc42 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":87:29)
#loc43 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":87:13)
#loc44 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":87:69)
#loc45 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":88:13)
#loc46 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":91:13)
#loc47 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":88:17)
#loc48 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":88:34)
#loc49 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":89:13)
#loc50 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":90:17)
#loc51 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":92:20)
#loc52 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":92:21)
#loc53 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":92:30)
#loc54 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":92:33)
#loc55 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":92:47)
#loc56 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":92:13)
#loc57 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":92:48)
#loc58 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":93:34)
#loc59 = loc("/usr/include/netinet/in.h":249:5)
#loc60 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":93:13)
#loc61 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":94:39)
#loc62 = loc("/usr/include/netinet/in.h":251:20)
#loc63 = loc("/usr/include/netinet/in.h":33:15)
#loc64 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":94:13)
#loc65 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":94:59)
#loc66 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":95:38)
#loc67 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":95:32)
#loc68 = loc("/usr/include/netinet/in.h":250:15)
#loc69 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":95:13)
#loc70 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":95:46)
#loc71 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":96:13)
#loc72 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":99:13)
#loc73 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":96:25)
#loc74 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":96:58)
#loc75 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":96:59)
#loc76 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":96:68)
#loc77 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":96:82)
#loc78 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":96:17)
#loc79 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":96:88)
#loc80 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":97:13)
#loc81 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":98:17)
#loc82 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:31)
#loc83 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:55)
#loc84 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:62)
#loc85 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:60)
#loc86 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:46)
#loc87 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:69)
#loc88 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:72)
#loc89 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:83)
#loc90 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:88)
#loc91 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:94)
#loc92 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:104)
#loc93 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:105)
#loc94 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:108)
#loc95 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:26)
#loc96 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:13)
#loc97 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:109)
#loc98 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":104:13)
#loc99 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":107:13)
#loc100 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":104:17)
#loc101 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":104:31)
#loc102 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":104:44)
#loc103 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":104:47)
#loc104 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":104:61)
#loc105 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":105:13)
#loc106 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":106:17)
#loc107 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":109:57)
#loc108 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":109:13)
#loc109 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":109:18)
#loc110 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":109:28)
#loc111 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":109:41)
#loc112 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":109:52)
#loc113 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":109:53)
#loc114 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":111:23)
#loc115 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":111:30)
#loc116 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":111:36)
#loc117 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":111:13)
#loc118 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":111:40)
#loc119 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":112:13)
#loc120 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":115:13)
#loc121 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":112:17)
#loc122 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":113:13)
#loc123 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":114:28)
#loc124 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":114:18)
#loc125 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":114:17)
#loc126 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":116:23)
#loc127 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":116:30)
#loc128 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":116:36)
#loc129 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":116:13)
#loc130 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":116:40)
#loc131 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":117:13)
#loc132 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":120:13)
#loc133 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":117:17)
#loc134 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":118:13)
#loc135 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":119:28)
#loc136 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":119:18)
#loc137 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":119:17)
#loc138 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":122:16)
#loc139 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":123:9)
#loc140 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":126:9)
#loc141 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":123:13)
#loc142 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":123:30)
#loc143 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":124:9)
#loc144 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":125:26)
#loc145 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":125:13)
#loc146 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":134:12)
#loc147 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":134:5)
#loc148 = loc("/usr/include/string.h":149:1)
#loc149 = loc("/usr/include/string.h":150:14)
#loc150 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":145:18)
#loc151 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":142:1)
#loc152 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":147:1)
#loc155 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":143:1)
#loc156 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":145:5)
#loc157 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":145:12)
#loc158 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":146:12)
#loc159 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":146:5)
#loc160 = loc(fused[#loc1, #loc2])
#loc161 = loc(fused[#loc3, #loc4])
#loc162 = loc(fused[#loc5, #loc6])
#loc163 = loc(fused[#loc8, #loc9])
#loc164 = loc(fused[#loc10, #loc11])
#loc165 = loc(fused[#loc12, #loc13])
#loc166 = loc(fused[#loc14, #loc15])
#loc167 = loc(fused[#loc16, #loc17])
#loc168 = loc(fused[#loc18, #loc19])
#loc170 = loc(fused[#loc23, #loc24])
#loc171 = loc(fused[#loc25, #loc26])
#loc172 = loc(fused[#loc27, #loc28])
#loc173 = loc(fused[#loc29, #loc30])
#loc174 = loc(fused[#loc31, #loc32])
#loc175 = loc(fused[#loc33, #loc34])
#loc176 = loc(fused[#loc37, #loc38])
#loc177 = loc(fused[#loc43, #loc44])
#loc178 = loc(fused[#loc45, #loc46])
#loc179 = loc(fused[#loc47, #loc48])
#loc180 = loc(fused[#loc49, #loc46])
#loc181 = loc(fused[#loc51, #loc52])
#loc182 = loc(fused[#loc54, #loc55])
#loc183 = loc(fused[#loc56, #loc57])
#loc184 = loc(fused[#loc60, #loc58])
#loc185 = loc(fused[#loc64, #loc65])
#loc186 = loc(fused[#loc69, #loc70])
#loc187 = loc(fused[#loc71, #loc72])
#loc188 = loc(fused[#loc74, #loc75])
#loc189 = loc(fused[#loc76, #loc77])
#loc190 = loc(fused[#loc78, #loc79])
#loc191 = loc(fused[#loc80, #loc72])
#loc192 = loc(fused[#loc86, #loc87])
#loc193 = loc(fused[#loc88, #loc89])
#loc194 = loc(fused[#loc90, #loc91])
#loc195 = loc(fused[#loc90, #loc92])
#loc196 = loc(fused[#loc88, #loc93])
#loc197 = loc(fused[#loc96, #loc97])
#loc198 = loc(fused[#loc98, #loc99])
#loc199 = loc(fused[#loc100, #loc101])
#loc200 = loc(fused[#loc103, #loc104])
#loc201 = loc(fused[#loc105, #loc99])
#loc202 = loc(fused[#loc111, #loc112])
#loc203 = loc(fused[#loc110, #loc112])
#loc204 = loc(fused[#loc109, #loc112])
#loc205 = loc(fused[#loc108, #loc107])
#loc206 = loc(fused[#loc117, #loc118])
#loc207 = loc(fused[#loc119, #loc120])
#loc208 = loc(fused[#loc122, #loc120])
#loc209 = loc(fused[#loc125, #loc123])
#loc210 = loc(fused[#loc129, #loc130])
#loc211 = loc(fused[#loc131, #loc132])
#loc212 = loc(fused[#loc134, #loc132])
#loc213 = loc(fused[#loc137, #loc135])
#loc214 = loc(fused[#loc139, #loc140])
#loc215 = loc(fused[#loc141, #loc142])
#loc216 = loc(fused[#loc143, #loc140])
#loc217 = loc(fused[#loc147, #loc146])
#loc218 = loc(fused[#loc148, #loc149])
#loc219 = loc(fused[#loc151, #loc152])
#loc221 = loc(fused[#loc159, #loc158])
