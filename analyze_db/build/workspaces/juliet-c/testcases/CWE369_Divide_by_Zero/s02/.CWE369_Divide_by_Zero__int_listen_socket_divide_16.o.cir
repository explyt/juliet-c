!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc328)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc329)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc330)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc331)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc332)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc333)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc334)
  cir.func private @close(!s32i) -> !s32i loc(#loc335)
  cir.func private @printIntLine(!s32i) loc(#loc336)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc338)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc339)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc28)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc28)
        cir.condition(%4) loc(#loc28)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc343)
            %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc344)
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc345)
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc346)
            %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc347)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc37)
            %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc37)
            cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc345)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc39)
            %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc39)
            cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc346)
            cir.scope {
              cir.do {
                cir.scope {
                  %12 = cir.const #cir.int<2> : !s32i loc(#loc46)
                  %13 = cir.const #cir.int<1> : !s32i loc(#loc47)
                  %14 = cir.const #cir.int<6> : !s32i loc(#loc48)
                  %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc49)
                  cir.store %15, %5 : !s32i, !cir.ptr<!s32i> loc(#loc350)
                  cir.scope {
                    %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc54)
                    %58 = cir.const #cir.int<1> : !s32i loc(#loc55)
                    %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc55)
                    %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc352)
                    cir.if %60 {
                      cir.break loc(#loc57)
                    } loc(#loc353)
                  } loc(#loc351)
                  %16 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc354)
                  %17 = cir.const #cir.int<0> : !s32i loc(#loc60)
                  %18 = cir.const #cir.int<16> : !u64i loc(#loc355)
                  cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc356)
                  %19 = cir.const #cir.int<2> : !s32i loc(#loc65)
                  %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc65)
                  %21 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc66)
                  cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc357)
                  %22 = cir.const #cir.int<0> : !s32i loc(#loc68)
                  %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc68)
                  %24 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc69)
                  %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc70)
                  cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc358)
                  %26 = cir.const #cir.int<27015> : !s32i loc(#loc72)
                  %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc72)
                  %28 = cir.call @htons(%27) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc73)
                  %29 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
                  cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc359)
                  cir.scope {
                    %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc79)
                    %58 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc361)
                    %59 = cir.const #cir.int<16> : !u64i loc(#loc362)
                    %60 = cir.cast(integral, %59 : !u64i), !u32i loc(#loc362)
                    %61 = cir.call @bind(%57, %58, %60) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc84)
                    %62 = cir.const #cir.int<1> : !s32i loc(#loc85)
                    %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc85)
                    %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc363)
                    cir.if %64 {
                      cir.break loc(#loc87)
                    } loc(#loc364)
                  } loc(#loc360)
                  cir.scope {
                    %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc90)
                    %58 = cir.const #cir.int<5> : !s32i loc(#loc91)
                    %59 = cir.call @listen(%57, %58) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc92)
                    %60 = cir.const #cir.int<1> : !s32i loc(#loc93)
                    %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc93)
                    %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc366)
                    cir.if %62 {
                      cir.break loc(#loc95)
                    } loc(#loc367)
                  } loc(#loc365)
                  %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                  %31 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc97)
                  %32 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc98)
                  %33 = cir.call @accept(%30, %31, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc99)
                  cir.store %33, %6 : !s32i, !cir.ptr<!s32i> loc(#loc368)
                  cir.scope {
                    %57 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc104)
                    %58 = cir.const #cir.int<1> : !s32i loc(#loc105)
                    %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc105)
                    %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc370)
                    cir.if %60 {
                      cir.break loc(#loc107)
                    } loc(#loc371)
                  } loc(#loc369)
                  %34 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc108)
                  %35 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc109)
                  %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc109)
                  %37 = cir.const #cir.int<3> : !s32i loc(#loc110)
                  %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc110)
                  %39 = cir.const #cir.int<4> : !u64i loc(#loc110)
                  %40 = cir.binop(mul, %38, %39) : !u64i loc(#loc110)
                  %41 = cir.const #cir.int<2> : !s32i loc(#loc110)
                  %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc110)
                  %43 = cir.binop(add, %40, %42) : !u64i loc(#loc110)
                  %44 = cir.const #cir.int<1> : !s32i loc(#loc111)
                  %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc111)
                  %46 = cir.binop(sub, %43, %45) : !u64i loc(#loc372)
                  %47 = cir.const #cir.int<0> : !s32i loc(#loc112)
                  %48 = cir.call @recv(%34, %36, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc113)
                  %49 = cir.cast(integral, %48 : !s64i), !s32i loc(#loc113)
                  cir.store %49, %3 : !s32i, !cir.ptr<!s32i> loc(#loc373)
                  cir.scope {
                    %57 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc118)
                    %58 = cir.const #cir.int<1> : !s32i loc(#loc119)
                    %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc119)
                    %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc375)
                    %61 = cir.ternary(%60, true {
                      %62 = cir.const #true loc(#loc120)
                      cir.yield %62 : !cir.bool loc(#loc120)
                    }, false {
                      %62 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc121)
                      %63 = cir.const #cir.int<0> : !s32i loc(#loc122)
                      %64 = cir.cmp(eq, %62, %63) : !s32i, !cir.bool loc(#loc376)
                      %65 = cir.ternary(%64, true {
                        %66 = cir.const #true loc(#loc120)
                        cir.yield %66 : !cir.bool loc(#loc120)
                      }, false {
                        %66 = cir.const #false loc(#loc120)
                        cir.yield %66 : !cir.bool loc(#loc120)
                      }) : (!cir.bool) -> !cir.bool loc(#loc120)
                      cir.yield %65 : !cir.bool loc(#loc120)
                    }) : (!cir.bool) -> !cir.bool loc(#loc120)
                    cir.if %61 {
                      cir.break loc(#loc124)
                    } loc(#loc377)
                  } loc(#loc374)
                  %50 = cir.const #cir.int<0> : !s32i loc(#loc125)
                  %51 = cir.cast(integral, %50 : !s32i), !s8i loc(#loc125)
                  %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc126)
                  %53 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc127)
                  %54 = cir.ptr_stride(%53 : !cir.ptr<!s8i>, %52 : !s32i), !cir.ptr<!s8i> loc(#loc127)
                  cir.store %51, %54 : !s8i, !cir.ptr<!s8i> loc(#loc378)
                  %55 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc128)
                  %56 = cir.call @atoi(%55) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc129)
                  cir.store %56, %0 : !s32i, !cir.ptr<!s32i> loc(#loc379)
                } loc(#loc349)
                cir.yield loc(#loc43)
              } while {
                %12 = cir.const #cir.int<0> : !s32i loc(#loc132)
                %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc132)
                cir.condition(%13) loc(#loc132)
              } loc(#loc348)
            } loc(#loc348)
            cir.scope {
              %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc135)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc136)
              %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc136)
              %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc381)
              cir.if %15 {
                %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc138)
                %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc139)
              } loc(#loc382)
            } loc(#loc380)
            cir.scope {
              %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc142)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc143)
              %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc143)
              %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc384)
              cir.if %15 {
                %16 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc145)
                %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc146)
              } loc(#loc385)
            } loc(#loc383)
          } loc(#loc342)
          cir.break loc(#loc147)
        } loc(#loc341)
        cir.yield loc(#loc27)
      } loc(#loc340)
    } loc(#loc340)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc150)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc150)
        cir.condition(%4) loc(#loc150)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<100> : !s32i loc(#loc152)
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc153)
          %5 = cir.binop(div, %3, %4) : !s32i loc(#loc388)
          cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc154)
          cir.break loc(#loc155)
        } loc(#loc387)
        cir.yield loc(#loc149)
      } loc(#loc386)
    } loc(#loc386)
    cir.return loc(#loc20)
  } loc(#loc337)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc390)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc158)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc391)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc160)
    cir.return loc(#loc157)
  } loc(#loc389)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc392)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc164)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc394)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc169)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc170)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc395)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc174)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc174)
        cir.condition(%4) loc(#loc174)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc399)
            %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc400)
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc401)
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc402)
            %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc403)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc183)
            %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc183)
            cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc401)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc185)
            %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc185)
            cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc402)
            cir.scope {
              cir.do {
                cir.scope {
                  %12 = cir.const #cir.int<2> : !s32i loc(#loc192)
                  %13 = cir.const #cir.int<1> : !s32i loc(#loc193)
                  %14 = cir.const #cir.int<6> : !s32i loc(#loc194)
                  %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc195)
                  cir.store %15, %5 : !s32i, !cir.ptr<!s32i> loc(#loc406)
                  cir.scope {
                    %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc200)
                    %58 = cir.const #cir.int<1> : !s32i loc(#loc201)
                    %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc201)
                    %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc408)
                    cir.if %60 {
                      cir.break loc(#loc203)
                    } loc(#loc409)
                  } loc(#loc407)
                  %16 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc410)
                  %17 = cir.const #cir.int<0> : !s32i loc(#loc206)
                  %18 = cir.const #cir.int<16> : !u64i loc(#loc411)
                  cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc412)
                  %19 = cir.const #cir.int<2> : !s32i loc(#loc211)
                  %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc211)
                  %21 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc66)
                  cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc413)
                  %22 = cir.const #cir.int<0> : !s32i loc(#loc213)
                  %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc213)
                  %24 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc69)
                  %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc70)
                  cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc414)
                  %26 = cir.const #cir.int<27015> : !s32i loc(#loc215)
                  %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc215)
                  %28 = cir.call @htons(%27) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc216)
                  %29 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
                  cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc415)
                  cir.scope {
                    %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc221)
                    %58 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc417)
                    %59 = cir.const #cir.int<16> : !u64i loc(#loc418)
                    %60 = cir.cast(integral, %59 : !u64i), !u32i loc(#loc418)
                    %61 = cir.call @bind(%57, %58, %60) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc226)
                    %62 = cir.const #cir.int<1> : !s32i loc(#loc227)
                    %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc227)
                    %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc419)
                    cir.if %64 {
                      cir.break loc(#loc229)
                    } loc(#loc420)
                  } loc(#loc416)
                  cir.scope {
                    %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc232)
                    %58 = cir.const #cir.int<5> : !s32i loc(#loc233)
                    %59 = cir.call @listen(%57, %58) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc234)
                    %60 = cir.const #cir.int<1> : !s32i loc(#loc235)
                    %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc235)
                    %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc422)
                    cir.if %62 {
                      cir.break loc(#loc237)
                    } loc(#loc423)
                  } loc(#loc421)
                  %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc238)
                  %31 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc239)
                  %32 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc240)
                  %33 = cir.call @accept(%30, %31, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc241)
                  cir.store %33, %6 : !s32i, !cir.ptr<!s32i> loc(#loc424)
                  cir.scope {
                    %57 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc246)
                    %58 = cir.const #cir.int<1> : !s32i loc(#loc247)
                    %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc247)
                    %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc426)
                    cir.if %60 {
                      cir.break loc(#loc249)
                    } loc(#loc427)
                  } loc(#loc425)
                  %34 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc250)
                  %35 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc251)
                  %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc251)
                  %37 = cir.const #cir.int<3> : !s32i loc(#loc252)
                  %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc252)
                  %39 = cir.const #cir.int<4> : !u64i loc(#loc252)
                  %40 = cir.binop(mul, %38, %39) : !u64i loc(#loc252)
                  %41 = cir.const #cir.int<2> : !s32i loc(#loc252)
                  %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc252)
                  %43 = cir.binop(add, %40, %42) : !u64i loc(#loc252)
                  %44 = cir.const #cir.int<1> : !s32i loc(#loc253)
                  %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc253)
                  %46 = cir.binop(sub, %43, %45) : !u64i loc(#loc428)
                  %47 = cir.const #cir.int<0> : !s32i loc(#loc254)
                  %48 = cir.call @recv(%34, %36, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc255)
                  %49 = cir.cast(integral, %48 : !s64i), !s32i loc(#loc255)
                  cir.store %49, %3 : !s32i, !cir.ptr<!s32i> loc(#loc429)
                  cir.scope {
                    %57 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc260)
                    %58 = cir.const #cir.int<1> : !s32i loc(#loc261)
                    %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc261)
                    %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc431)
                    %61 = cir.ternary(%60, true {
                      %62 = cir.const #true loc(#loc262)
                      cir.yield %62 : !cir.bool loc(#loc262)
                    }, false {
                      %62 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc263)
                      %63 = cir.const #cir.int<0> : !s32i loc(#loc264)
                      %64 = cir.cmp(eq, %62, %63) : !s32i, !cir.bool loc(#loc432)
                      %65 = cir.ternary(%64, true {
                        %66 = cir.const #true loc(#loc262)
                        cir.yield %66 : !cir.bool loc(#loc262)
                      }, false {
                        %66 = cir.const #false loc(#loc262)
                        cir.yield %66 : !cir.bool loc(#loc262)
                      }) : (!cir.bool) -> !cir.bool loc(#loc262)
                      cir.yield %65 : !cir.bool loc(#loc262)
                    }) : (!cir.bool) -> !cir.bool loc(#loc262)
                    cir.if %61 {
                      cir.break loc(#loc266)
                    } loc(#loc433)
                  } loc(#loc430)
                  %50 = cir.const #cir.int<0> : !s32i loc(#loc267)
                  %51 = cir.cast(integral, %50 : !s32i), !s8i loc(#loc267)
                  %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc268)
                  %53 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc269)
                  %54 = cir.ptr_stride(%53 : !cir.ptr<!s8i>, %52 : !s32i), !cir.ptr<!s8i> loc(#loc269)
                  cir.store %51, %54 : !s8i, !cir.ptr<!s8i> loc(#loc434)
                  %55 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc270)
                  %56 = cir.call @atoi(%55) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc271)
                  cir.store %56, %0 : !s32i, !cir.ptr<!s32i> loc(#loc435)
                } loc(#loc405)
                cir.yield loc(#loc189)
              } while {
                %12 = cir.const #cir.int<0> : !s32i loc(#loc274)
                %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc274)
                cir.condition(%13) loc(#loc274)
              } loc(#loc404)
            } loc(#loc404)
            cir.scope {
              %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc277)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc278)
              %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc278)
              %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc437)
              cir.if %15 {
                %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc280)
                %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc281)
              } loc(#loc438)
            } loc(#loc436)
            cir.scope {
              %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc284)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc285)
              %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc285)
              %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc440)
              cir.if %15 {
                %16 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc287)
                %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc288)
              } loc(#loc441)
            } loc(#loc439)
          } loc(#loc398)
          cir.break loc(#loc289)
        } loc(#loc397)
        cir.yield loc(#loc173)
      } loc(#loc396)
    } loc(#loc396)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc292)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc292)
        cir.condition(%4) loc(#loc292)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc296)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc297)
            %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc445)
            cir.if %5 {
              %6 = cir.const #cir.int<100> : !s32i loc(#loc301)
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc302)
              %8 = cir.binop(div, %6, %7) : !s32i loc(#loc447)
              cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc303)
            } else {
              %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc164)
              %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc164)
              cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc304)
            } loc(#loc446)
          } loc(#loc444)
          cir.break loc(#loc305)
        } loc(#loc443)
        cir.yield loc(#loc291)
      } loc(#loc442)
    } loc(#loc442)
    cir.return loc(#loc166)
  } loc(#loc393)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc449)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc310)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc311)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc450)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc315)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc315)
        cir.condition(%4) loc(#loc315)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<7> : !s32i loc(#loc317)
          cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc453)
          cir.break loc(#loc319)
        } loc(#loc452)
        cir.yield loc(#loc314)
      } loc(#loc451)
    } loc(#loc451)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc322)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc322)
        cir.condition(%4) loc(#loc322)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<100> : !s32i loc(#loc324)
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc325)
          %5 = cir.binop(div, %3, %4) : !s32i loc(#loc456)
          cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc326)
          cir.break loc(#loc327)
        } loc(#loc455)
        cir.yield loc(#loc321)
      } loc(#loc454)
    } loc(#loc454)
    cir.return loc(#loc307)
  } loc(#loc448)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":44:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":128:1)
#loc21 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":46:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":46:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":48:13)
#loc24 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":48:12)
#loc25 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":48:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":49:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":121:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":49:11)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":50:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":51:9)
#loc31 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":119:9)
#loc32 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":56:13)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":56:17)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":57:13)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":57:32)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":58:13)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":58:35)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":59:13)
#loc39 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":59:35)
#loc40 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":60:13)
#loc41 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":60:45)
#loc42 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":61:13)
#loc43 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":104:21)
#loc44 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":62:13)
#loc45 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":103:13)
#loc46 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":71:39)
#loc47 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":71:48)
#loc48 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":71:61)
#loc49 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":71:32)
#loc50 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":71:17)
#loc51 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":71:72)
#loc52 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":72:17)
#loc53 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":75:17)
#loc54 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":72:21)
#loc55 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":72:37)
#loc56 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":73:17)
#loc57 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":74:21)
#loc58 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":76:24)
#loc59 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":76:25)
#loc60 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":76:34)
#loc61 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":76:37)
#loc62 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":76:51)
#loc63 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":76:17)
#loc64 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":76:52)
#loc65 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":77:38)
#loc66 = loc("/usr/include/netinet/in.h":249:5)
#loc67 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":77:17)
#loc68 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":78:43)
#loc69 = loc("/usr/include/netinet/in.h":251:20)
#loc70 = loc("/usr/include/netinet/in.h":33:15)
#loc71 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":78:17)
#loc72 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":79:42)
#loc73 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":79:36)
#loc74 = loc("/usr/include/netinet/in.h":250:15)
#loc75 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":79:17)
#loc76 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":79:50)
#loc77 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":80:17)
#loc78 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":83:17)
#loc79 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":80:26)
#loc80 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":80:58)
#loc81 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":80:59)
#loc82 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":80:68)
#loc83 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":80:82)
#loc84 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":80:21)
#loc85 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":80:88)
#loc86 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":81:17)
#loc87 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":82:21)
#loc88 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":84:17)
#loc89 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":87:17)
#loc90 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":84:28)
#loc91 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":84:42)
#loc92 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":84:21)
#loc93 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":84:61)
#loc94 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":85:17)
#loc95 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":86:21)
#loc96 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":88:39)
#loc97 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":88:53)
#loc98 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":88:59)
#loc99 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":88:32)
#loc100 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":88:17)
#loc101 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":88:63)
#loc102 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":89:17)
#loc103 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":92:17)
#loc104 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":89:21)
#loc105 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":89:37)
#loc106 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":90:17)
#loc107 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":91:21)
#loc108 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":94:35)
#loc109 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":94:49)
#loc110 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":94:62)
#loc111 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":94:80)
#loc112 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":94:83)
#loc113 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":94:30)
#loc114 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":94:17)
#loc115 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":94:84)
#loc116 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":95:17)
#loc117 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":98:17)
#loc118 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":95:21)
#loc119 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":95:35)
#loc120 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":95:48)
#loc121 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":95:51)
#loc122 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":95:65)
#loc123 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":96:17)
#loc124 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":97:21)
#loc125 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":100:43)
#loc126 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":100:29)
#loc127 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":100:17)
#loc128 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":102:29)
#loc129 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":102:24)
#loc130 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":102:17)
#loc131 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":102:40)
#loc132 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":104:20)
#loc133 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":105:13)
#loc134 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":108:13)
#loc135 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":105:17)
#loc136 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":105:33)
#loc137 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":106:13)
#loc138 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":107:30)
#loc139 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":107:17)
#loc140 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":109:13)
#loc141 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":112:13)
#loc142 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":109:17)
#loc143 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":109:33)
#loc144 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":110:13)
#loc145 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":111:30)
#loc146 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":111:17)
#loc147 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":120:9)
#loc148 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":122:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":127:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":122:11)
#loc151 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":123:5)
#loc152 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":125:22)
#loc153 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":125:28)
#loc154 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":125:9)
#loc155 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":126:9)
#loc156 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":248:1)
#loc157 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":252:1)
#loc158 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":250:5)
#loc159 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":250:13)
#loc160 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":251:5)
#loc161 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":251:13)
#loc162 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc163 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc164 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":222:23)
#loc165 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":135:1)
#loc166 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":226:1)
#loc167 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":137:5)
#loc168 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":137:9)
#loc169 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":139:13)
#loc170 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":139:12)
#loc171 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":139:5)
#loc172 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":140:5)
#loc173 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":212:5)
#loc174 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":140:11)
#loc175 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":141:5)
#loc176 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":142:9)
#loc177 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":210:9)
#loc178 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":147:13)
#loc179 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":147:17)
#loc180 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":148:13)
#loc181 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":148:32)
#loc182 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":149:13)
#loc183 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":149:35)
#loc184 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":150:13)
#loc185 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":150:35)
#loc186 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":151:13)
#loc187 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":151:45)
#loc188 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":152:13)
#loc189 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":195:21)
#loc190 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":153:13)
#loc191 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":194:13)
#loc192 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":162:39)
#loc193 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":162:48)
#loc194 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":162:61)
#loc195 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":162:32)
#loc196 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":162:17)
#loc197 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":162:72)
#loc198 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":163:17)
#loc199 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":166:17)
#loc200 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":163:21)
#loc201 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":163:37)
#loc202 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":164:17)
#loc203 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":165:21)
#loc204 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":167:24)
#loc205 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":167:25)
#loc206 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":167:34)
#loc207 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":167:37)
#loc208 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":167:51)
#loc209 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":167:17)
#loc210 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":167:52)
#loc211 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":168:38)
#loc212 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":168:17)
#loc213 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":169:43)
#loc214 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":169:17)
#loc215 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":170:42)
#loc216 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":170:36)
#loc217 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":170:17)
#loc218 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":170:50)
#loc219 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":171:17)
#loc220 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":174:17)
#loc221 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":171:26)
#loc222 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":171:58)
#loc223 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":171:59)
#loc224 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":171:68)
#loc225 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":171:82)
#loc226 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":171:21)
#loc227 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":171:88)
#loc228 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":172:17)
#loc229 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":173:21)
#loc230 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":175:17)
#loc231 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":178:17)
#loc232 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":175:28)
#loc233 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":175:42)
#loc234 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":175:21)
#loc235 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":175:61)
#loc236 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":176:17)
#loc237 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":177:21)
#loc238 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":179:39)
#loc239 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":179:53)
#loc240 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":179:59)
#loc241 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":179:32)
#loc242 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":179:17)
#loc243 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":179:63)
#loc244 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":180:17)
#loc245 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":183:17)
#loc246 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":180:21)
#loc247 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":180:37)
#loc248 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":181:17)
#loc249 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":182:21)
#loc250 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":185:35)
#loc251 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":185:49)
#loc252 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":185:62)
#loc253 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":185:80)
#loc254 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":185:83)
#loc255 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":185:30)
#loc256 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":185:17)
#loc257 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":185:84)
#loc258 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":186:17)
#loc259 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":189:17)
#loc260 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":186:21)
#loc261 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":186:35)
#loc262 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":186:48)
#loc263 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":186:51)
#loc264 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":186:65)
#loc265 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":187:17)
#loc266 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":188:21)
#loc267 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":191:43)
#loc268 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":191:29)
#loc269 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":191:17)
#loc270 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":193:29)
#loc271 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":193:24)
#loc272 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":193:17)
#loc273 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":193:40)
#loc274 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":195:20)
#loc275 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":196:13)
#loc276 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":199:13)
#loc277 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":196:17)
#loc278 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":196:33)
#loc279 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":197:13)
#loc280 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":198:30)
#loc281 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":198:17)
#loc282 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":200:13)
#loc283 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":203:13)
#loc284 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":200:17)
#loc285 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":200:33)
#loc286 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":201:13)
#loc287 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":202:30)
#loc288 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":202:17)
#loc289 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":211:9)
#loc290 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":213:5)
#loc291 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":225:5)
#loc292 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":213:11)
#loc293 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":214:5)
#loc294 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":216:9)
#loc295 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":223:9)
#loc296 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":216:13)
#loc297 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":216:21)
#loc298 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":217:9)
#loc299 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":219:9)
#loc300 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":221:9)
#loc301 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":218:26)
#loc302 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":218:32)
#loc303 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":218:13)
#loc304 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":222:13)
#loc305 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":224:9)
#loc306 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":229:1)
#loc307 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":246:1)
#loc308 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":231:5)
#loc309 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":231:9)
#loc310 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":233:13)
#loc311 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":233:12)
#loc312 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":233:5)
#loc313 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":234:5)
#loc314 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":239:5)
#loc315 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":234:11)
#loc316 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":235:5)
#loc317 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":237:16)
#loc318 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":237:9)
#loc319 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":238:9)
#loc320 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":240:5)
#loc321 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":245:5)
#loc322 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":240:11)
#loc323 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":241:5)
#loc324 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":243:22)
#loc325 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":243:28)
#loc326 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":243:9)
#loc327 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":244:9)
#loc328 = loc(fused[#loc1, #loc2])
#loc329 = loc(fused[#loc3, #loc4])
#loc330 = loc(fused[#loc5, #loc6])
#loc331 = loc(fused[#loc7, #loc8])
#loc332 = loc(fused[#loc9, #loc10])
#loc333 = loc(fused[#loc11, #loc12])
#loc334 = loc(fused[#loc13, #loc14])
#loc335 = loc(fused[#loc15, #loc16])
#loc336 = loc(fused[#loc17, #loc18])
#loc337 = loc(fused[#loc19, #loc20])
#loc338 = loc(fused[#loc21, #loc22])
#loc339 = loc(fused[#loc25, #loc23])
#loc340 = loc(fused[#loc26, #loc27])
#loc341 = loc(fused[#loc29, #loc27])
#loc342 = loc(fused[#loc30, #loc31])
#loc343 = loc(fused[#loc32, #loc33])
#loc344 = loc(fused[#loc34, #loc35])
#loc345 = loc(fused[#loc36, #loc37])
#loc346 = loc(fused[#loc38, #loc39])
#loc347 = loc(fused[#loc40, #loc41])
#loc348 = loc(fused[#loc42, #loc43])
#loc349 = loc(fused[#loc44, #loc45])
#loc350 = loc(fused[#loc50, #loc51])
#loc351 = loc(fused[#loc52, #loc53])
#loc352 = loc(fused[#loc54, #loc55])
#loc353 = loc(fused[#loc56, #loc53])
#loc354 = loc(fused[#loc58, #loc59])
#loc355 = loc(fused[#loc61, #loc62])
#loc356 = loc(fused[#loc63, #loc64])
#loc357 = loc(fused[#loc67, #loc65])
#loc358 = loc(fused[#loc71, #loc68])
#loc359 = loc(fused[#loc75, #loc76])
#loc360 = loc(fused[#loc77, #loc78])
#loc361 = loc(fused[#loc80, #loc81])
#loc362 = loc(fused[#loc82, #loc83])
#loc363 = loc(fused[#loc84, #loc85])
#loc364 = loc(fused[#loc86, #loc78])
#loc365 = loc(fused[#loc88, #loc89])
#loc366 = loc(fused[#loc92, #loc93])
#loc367 = loc(fused[#loc94, #loc89])
#loc368 = loc(fused[#loc100, #loc101])
#loc369 = loc(fused[#loc102, #loc103])
#loc370 = loc(fused[#loc104, #loc105])
#loc371 = loc(fused[#loc106, #loc103])
#loc372 = loc(fused[#loc110, #loc111])
#loc373 = loc(fused[#loc114, #loc115])
#loc374 = loc(fused[#loc116, #loc117])
#loc375 = loc(fused[#loc118, #loc119])
#loc376 = loc(fused[#loc121, #loc122])
#loc377 = loc(fused[#loc123, #loc117])
#loc378 = loc(fused[#loc127, #loc125])
#loc379 = loc(fused[#loc130, #loc131])
#loc380 = loc(fused[#loc133, #loc134])
#loc381 = loc(fused[#loc135, #loc136])
#loc382 = loc(fused[#loc137, #loc134])
#loc383 = loc(fused[#loc140, #loc141])
#loc384 = loc(fused[#loc142, #loc143])
#loc385 = loc(fused[#loc144, #loc141])
#loc386 = loc(fused[#loc148, #loc149])
#loc387 = loc(fused[#loc151, #loc149])
#loc388 = loc(fused[#loc152, #loc153])
#loc389 = loc(fused[#loc156, #loc157])
#loc390 = loc(fused[#loc158, #loc159])
#loc391 = loc(fused[#loc160, #loc161])
#loc392 = loc(fused[#loc162, #loc163])
#loc393 = loc(fused[#loc165, #loc166])
#loc394 = loc(fused[#loc167, #loc168])
#loc395 = loc(fused[#loc171, #loc169])
#loc396 = loc(fused[#loc172, #loc173])
#loc397 = loc(fused[#loc175, #loc173])
#loc398 = loc(fused[#loc176, #loc177])
#loc399 = loc(fused[#loc178, #loc179])
#loc400 = loc(fused[#loc180, #loc181])
#loc401 = loc(fused[#loc182, #loc183])
#loc402 = loc(fused[#loc184, #loc185])
#loc403 = loc(fused[#loc186, #loc187])
#loc404 = loc(fused[#loc188, #loc189])
#loc405 = loc(fused[#loc190, #loc191])
#loc406 = loc(fused[#loc196, #loc197])
#loc407 = loc(fused[#loc198, #loc199])
#loc408 = loc(fused[#loc200, #loc201])
#loc409 = loc(fused[#loc202, #loc199])
#loc410 = loc(fused[#loc204, #loc205])
#loc411 = loc(fused[#loc207, #loc208])
#loc412 = loc(fused[#loc209, #loc210])
#loc413 = loc(fused[#loc212, #loc211])
#loc414 = loc(fused[#loc214, #loc213])
#loc415 = loc(fused[#loc217, #loc218])
#loc416 = loc(fused[#loc219, #loc220])
#loc417 = loc(fused[#loc222, #loc223])
#loc418 = loc(fused[#loc224, #loc225])
#loc419 = loc(fused[#loc226, #loc227])
#loc420 = loc(fused[#loc228, #loc220])
#loc421 = loc(fused[#loc230, #loc231])
#loc422 = loc(fused[#loc234, #loc235])
#loc423 = loc(fused[#loc236, #loc231])
#loc424 = loc(fused[#loc242, #loc243])
#loc425 = loc(fused[#loc244, #loc245])
#loc426 = loc(fused[#loc246, #loc247])
#loc427 = loc(fused[#loc248, #loc245])
#loc428 = loc(fused[#loc252, #loc253])
#loc429 = loc(fused[#loc256, #loc257])
#loc430 = loc(fused[#loc258, #loc259])
#loc431 = loc(fused[#loc260, #loc261])
#loc432 = loc(fused[#loc263, #loc264])
#loc433 = loc(fused[#loc265, #loc259])
#loc434 = loc(fused[#loc269, #loc267])
#loc435 = loc(fused[#loc272, #loc273])
#loc436 = loc(fused[#loc275, #loc276])
#loc437 = loc(fused[#loc277, #loc278])
#loc438 = loc(fused[#loc279, #loc276])
#loc439 = loc(fused[#loc282, #loc283])
#loc440 = loc(fused[#loc284, #loc285])
#loc441 = loc(fused[#loc286, #loc283])
#loc442 = loc(fused[#loc290, #loc291])
#loc443 = loc(fused[#loc293, #loc291])
#loc444 = loc(fused[#loc294, #loc295])
#loc445 = loc(fused[#loc296, #loc297])
#loc446 = loc(fused[#loc298, #loc299, #loc300, #loc295])
#loc447 = loc(fused[#loc301, #loc302])
#loc448 = loc(fused[#loc306, #loc307])
#loc449 = loc(fused[#loc308, #loc309])
#loc450 = loc(fused[#loc312, #loc310])
#loc451 = loc(fused[#loc313, #loc314])
#loc452 = loc(fused[#loc316, #loc314])
#loc453 = loc(fused[#loc318, #loc317])
#loc454 = loc(fused[#loc320, #loc321])
#loc455 = loc(fused[#loc323, #loc321])
#loc456 = loc(fused[#loc324, #loc325])
