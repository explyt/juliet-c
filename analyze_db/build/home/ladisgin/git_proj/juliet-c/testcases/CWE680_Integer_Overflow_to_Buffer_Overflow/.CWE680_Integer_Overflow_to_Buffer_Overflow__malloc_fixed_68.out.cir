!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68_badData : !s32i {alignment = 4 : i64} loc(#loc101)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc102)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc103)
  cir.func private @printIntLine(!s32i) loc(#loc104)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc105)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b_badSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc107)
    %1 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68_badData : !cir.ptr<!s32i> loc(#loc101)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc107)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc109)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc110)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc22)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc111)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc112)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc113)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc114)
      cir.scope {
        %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc30)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc116)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc33)
          %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc34)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
        } loc(#loc117)
      } loc(#loc115)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc37)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc37)
        cir.store %20, %3 : !u64i, !cir.ptr<!u64i> loc(#loc119)
        cir.for : cond {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc39)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc40)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc40)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc120)
          cir.condition(%24) loc(#loc41)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc43)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
            %23 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc45)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc46)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc122)
          } loc(#loc121)
          cir.yield loc(#loc36)
        } step {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc47)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc48)
          cir.store %22, %3 : !u64i, !cir.ptr<!u64i> loc(#loc123)
          cir.yield loc(#loc118)
        } loc(#loc118)
      } loc(#loc118)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc50)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc51)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc49)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc52)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc53)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc54)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc53)
    } loc(#loc108)
    cir.return loc(#loc12)
  } loc(#loc106)
  cir.global "private" external @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68_goodG2BData : !s32i {alignment = 4 : i64} loc(#loc124)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b_goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc126)
    %1 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68_goodG2BData : !cir.ptr<!s32i> loc(#loc124)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc60)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc128)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc129)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc67)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc68)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc68)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc130)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc131)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc67)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc132)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc133)
      cir.scope {
        %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc75)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc76)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc76)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc135)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc78)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc79)
          %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc80)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc78)
        } loc(#loc136)
      } loc(#loc134)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc83)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc83)
        cir.store %20, %3 : !u64i, !cir.ptr<!u64i> loc(#loc138)
        cir.for : cond {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc85)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc86)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc139)
          cir.condition(%24) loc(#loc87)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc89)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc90)
            %23 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc91)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc92)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc141)
          } loc(#loc140)
          cir.yield loc(#loc82)
        } step {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc93)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc94)
          cir.store %22, %3 : !u64i, !cir.ptr<!u64i> loc(#loc142)
          cir.yield loc(#loc137)
        } loc(#loc137)
      } loc(#loc137)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc96)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc97)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc95)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc98)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc99)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc100)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc100)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc99)
    } loc(#loc127)
    cir.return loc(#loc58)
  } loc(#loc125)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":0:0)
#loc1 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":19:1)
#loc2 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":19:12)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":26:1)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":43:1)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":28:5)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":28:16)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":29:5)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":42:5)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":30:9)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":30:16)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":31:9)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":31:14)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":34:28)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":34:35)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":34:42)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":34:52)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":34:53)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":34:9)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":35:9)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":35:43)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":35:13)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":35:27)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":35:33)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":35:34)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":35:40)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":35:39)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":36:9)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":39:9)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":36:18)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":36:14)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":36:21)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":36:33)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":36:23)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":37:9)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":38:29)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":38:13)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":38:24)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":38:25)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":36:40)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":36:39)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":40:22)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":40:33)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":40:34)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":40:9)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":41:9)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":41:14)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":20:1)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":20:12)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":50:1)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":67:1)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":52:5)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":52:16)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":53:5)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":66:5)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":54:9)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":54:16)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":55:9)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":55:14)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":58:28)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":58:35)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":58:42)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":58:52)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":58:53)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":58:9)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":59:9)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":59:43)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":59:13)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":59:27)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":59:33)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":59:34)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":59:40)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":59:39)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":60:9)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":63:9)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":60:18)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":60:14)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":60:21)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":60:33)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":60:23)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":61:9)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":62:29)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":62:13)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":62:24)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":62:25)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":60:40)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":60:39)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":64:22)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":64:33)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":64:34)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":64:9)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":65:9)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_68b.c":65:14)
#loc101 = loc(fused[#loc1, #loc2])
#loc102 = loc(fused[#loc3, #loc4])
#loc103 = loc(fused[#loc5, #loc6])
#loc104 = loc(fused[#loc7, #loc8])
#loc105 = loc(fused[#loc9, #loc10])
#loc106 = loc(fused[#loc11, #loc12])
#loc107 = loc(fused[#loc13, #loc14])
#loc108 = loc(fused[#loc15, #loc16])
#loc109 = loc(fused[#loc17, #loc18])
#loc110 = loc(fused[#loc19, #loc20])
#loc111 = loc(fused[#loc23, #loc24])
#loc112 = loc(fused[#loc22, #loc24])
#loc113 = loc(fused[#loc21, #loc25])
#loc114 = loc(fused[#loc26, #loc25])
#loc115 = loc(fused[#loc27, #loc28])
#loc116 = loc(fused[#loc29, #loc30])
#loc117 = loc(fused[#loc31, #loc28])
#loc118 = loc(fused[#loc35, #loc36])
#loc119 = loc(fused[#loc38, #loc37])
#loc120 = loc(fused[#loc39, #loc40])
#loc121 = loc(fused[#loc42, #loc36])
#loc122 = loc(fused[#loc44, #loc43])
#loc123 = loc(fused[#loc48, #loc47])
#loc124 = loc(fused[#loc55, #loc56])
#loc125 = loc(fused[#loc57, #loc58])
#loc126 = loc(fused[#loc59, #loc60])
#loc127 = loc(fused[#loc61, #loc62])
#loc128 = loc(fused[#loc63, #loc64])
#loc129 = loc(fused[#loc65, #loc66])
#loc130 = loc(fused[#loc69, #loc70])
#loc131 = loc(fused[#loc68, #loc70])
#loc132 = loc(fused[#loc67, #loc71])
#loc133 = loc(fused[#loc72, #loc71])
#loc134 = loc(fused[#loc73, #loc74])
#loc135 = loc(fused[#loc75, #loc76])
#loc136 = loc(fused[#loc77, #loc74])
#loc137 = loc(fused[#loc81, #loc82])
#loc138 = loc(fused[#loc84, #loc83])
#loc139 = loc(fused[#loc85, #loc86])
#loc140 = loc(fused[#loc88, #loc82])
#loc141 = loc(fused[#loc90, #loc89])
#loc142 = loc(fused[#loc94, #loc93])
