!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc44 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":103:10)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":103:14)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":103:20)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":103:32)
#true = #cir.bool<true> : !cir.bool
#loc136 = loc(fused[#loc44, #loc45])
#loc137 = loc(fused[#loc46, #loc47])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc118)
  cir.func private @printIntLine(!s32i) loc(#loc119)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc121)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc122)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc11)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc11)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc11)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc11)
      cir.yield %19 : !u32i loc(#loc11)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc11)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc11)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc11)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc11)
      %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc11)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc11)
      %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc11)
      cir.yield %23 : !u32i loc(#loc11)
    }) : (!cir.bool) -> !u32i loc(#loc11)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc11)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    cir.scope {
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc125)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc126)
      %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
      cir.store %10, %8 : !s32i, !cir.ptr<!s32i> loc(#loc125)
      %11 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc126)
      cir.scope {
        %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc128)
        %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        %14 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc22)
        %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc23)
        cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc128)
        %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc24)
        cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc25)
      } loc(#loc127)
    } loc(#loc124)
    cir.return loc(#loc6)
  } loc(#loc120)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc130)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc131)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc129)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc132)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc133)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc134)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc41)
  cir.func @main(%arg0: !s32i loc(fused[#loc44, #loc45]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc46, #loc47])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc136)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc137)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc43)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc48)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc48)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc49)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc50)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc50)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc51)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc38)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_rand_square_31_good : !cir.ptr<!cir.func<!void ()>> loc(#loc138)
    cir.call @CWE190_Integer_Overflow__int_rand_square_31_good() : () -> () loc(#loc53)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc39)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc40)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_rand_square_31_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc139)
    cir.call @CWE190_Integer_Overflow__int_rand_square_31_bad() : () -> () loc(#loc57)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc41)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc60)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc140)
    cir.return %17 : !s32i loc(#loc140)
  } loc(#loc135)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc142)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc143)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc68)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc146)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc147)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
      cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc146)
      %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc75)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc147)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc149)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc80)
        %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc79)
        %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc80)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc149)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc81)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc82)
      } loc(#loc148)
    } loc(#loc145)
    cir.return loc(#loc63)
  } loc(#loc141)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc84)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc151)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc89)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc91)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc91)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc91)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc91)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc91)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc91)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc91)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc91)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc91)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc91)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc91)
      cir.yield %19 : !u32i loc(#loc91)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc91)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc91)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc91)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc91)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc91)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc91)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc91)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc91)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc91)
      %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc91)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc91)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc91)
      %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc91)
      cir.yield %23 : !u32i loc(#loc91)
    }) : (!cir.bool) -> !u32i loc(#loc91)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc91)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    cir.scope {
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc155)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc156)
      %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc96)
      cir.store %10, %8 : !s32i, !cir.ptr<!s32i> loc(#loc155)
      %11 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc98)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc156)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc101)
        %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc102)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc102)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc102)
        %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc102)
        %17 = cir.cmp(gt, %12, %16) : !s32i, !cir.bool loc(#loc158)
        %18 = cir.ternary(%17, true {
          %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc104)
          %20 = cir.abs %19 poison : !s32i loc(#loc105)
          %21 = cir.cast(integral, %20 : !s32i), !s64i loc(#loc105)
          %22 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc106)
          %23 = cir.const #cir.int<2147483647> : !s32i loc(#loc107)
          %24 = cir.cast(int_to_float, %23 : !s32i), !cir.double loc(#loc107)
          %25 = cir.call @sqrt(%24) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc106)
          %26 = cir.cast(float_to_int, %25 : !cir.double), !s64i loc(#loc106)
          %27 = cir.cmp(lt, %21, %26) : !s64i, !cir.bool loc(#loc159)
          %28 = cir.ternary(%27, true {
            %29 = cir.const #true loc(#loc103)
            cir.yield %29 : !cir.bool loc(#loc103)
          }, false {
            %29 = cir.const #false loc(#loc103)
            cir.yield %29 : !cir.bool loc(#loc103)
          }) : (!cir.bool) -> !cir.bool loc(#loc103)
          cir.yield %28 : !cir.bool loc(#loc103)
        }, false {
          %19 = cir.const #false loc(#loc103)
          cir.yield %19 : !cir.bool loc(#loc103)
        }) : (!cir.bool) -> !cir.bool loc(#loc103)
        cir.if %18 {
          %19 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc161)
          %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc114)
          %21 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc113)
          %22 = cir.binop(mul, %20, %21) nsw : !s32i loc(#loc114)
          cir.store %22, %19 : !s32i, !cir.ptr<!s32i> loc(#loc161)
          %23 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc115)
          cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc116)
        } else {
          %19 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc84)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc84)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc117)
        } loc(#loc160)
      } loc(#loc157)
    } loc(#loc154)
    cir.return loc(#loc86)
  } loc(#loc150)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":24:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":40:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":26:5)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":26:9)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":28:12)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":28:5)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":30:12)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":30:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":31:5)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":39:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":32:9)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":32:24)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":33:9)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":33:20)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":34:9)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":38:9)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":36:13)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":36:33)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":36:26)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":37:26)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":37:13)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":89:1)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":93:1)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":91:5)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":91:13)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":92:5)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":92:13)
#loc32 = loc("/usr/include/stdlib.h":575:1)
#loc33 = loc("/usr/include/stdlib.h":575:41)
#loc34 = loc("/usr/include/time.h":76:1)
#loc35 = loc("/usr/include/time.h":76:38)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":108:15)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":110:15)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":113:15)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":115:15)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":103:1)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":118:1)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":104:1)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":106:27)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":106:22)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":106:5)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":108:5)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":109:5)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":109:54)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":110:5)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":113:5)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":114:5)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":114:53)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":115:5)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":117:12)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":117:5)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":47:1)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":63:1)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":49:5)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":49:9)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":51:12)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":51:5)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":53:12)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":53:5)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":54:5)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":62:5)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":55:9)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":55:24)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":56:9)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":56:20)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":57:9)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":61:9)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":59:13)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":59:33)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":59:26)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":60:26)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":60:13)
#loc83 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":84:23)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":66:1)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":87:1)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":68:5)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":68:9)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":70:12)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":70:5)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":72:12)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":72:5)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":73:5)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":86:5)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":74:9)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":74:24)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":75:9)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":75:20)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":77:9)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":85:9)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":77:13)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":77:20)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":77:28)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":77:35)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":77:31)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":77:49)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":77:62)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":77:69)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":78:9)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":81:9)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":83:9)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":79:13)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":79:33)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":79:26)
#loc115 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":80:26)
#loc116 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":80:13)
#loc117 = loc("CWE190_Integer_Overflow__int_rand_square_31.c":84:13)
#loc118 = loc(fused[#loc1, #loc2])
#loc119 = loc(fused[#loc3, #loc4])
#loc120 = loc(fused[#loc5, #loc6])
#loc121 = loc(fused[#loc7, #loc8])
#loc122 = loc(fused[#loc10, #loc9])
#loc123 = loc(fused[#loc12, #loc11])
#loc124 = loc(fused[#loc13, #loc14])
#loc125 = loc(fused[#loc15, #loc16])
#loc126 = loc(fused[#loc17, #loc18])
#loc127 = loc(fused[#loc19, #loc20])
#loc128 = loc(fused[#loc21, #loc22])
#loc129 = loc(fused[#loc26, #loc27])
#loc130 = loc(fused[#loc28, #loc29])
#loc131 = loc(fused[#loc30, #loc31])
#loc132 = loc(fused[#loc32, #loc33])
#loc133 = loc(fused[#loc34, #loc35])
#loc134 = loc(fused[#loc36, #loc37])
#loc135 = loc(fused[#loc42, #loc43])
#loc138 = loc(fused[#loc53, #loc54])
#loc139 = loc(fused[#loc57, #loc58])
#loc140 = loc(fused[#loc61, #loc60])
#loc141 = loc(fused[#loc62, #loc63])
#loc142 = loc(fused[#loc64, #loc65])
#loc143 = loc(fused[#loc67, #loc66])
#loc144 = loc(fused[#loc69, #loc68])
#loc145 = loc(fused[#loc70, #loc71])
#loc146 = loc(fused[#loc72, #loc73])
#loc147 = loc(fused[#loc74, #loc75])
#loc148 = loc(fused[#loc76, #loc77])
#loc149 = loc(fused[#loc78, #loc79])
#loc150 = loc(fused[#loc85, #loc86])
#loc151 = loc(fused[#loc87, #loc88])
#loc152 = loc(fused[#loc90, #loc89])
#loc153 = loc(fused[#loc92, #loc91])
#loc154 = loc(fused[#loc93, #loc94])
#loc155 = loc(fused[#loc95, #loc96])
#loc156 = loc(fused[#loc97, #loc98])
#loc157 = loc(fused[#loc99, #loc100])
#loc158 = loc(fused[#loc101, #loc102])
#loc159 = loc(fused[#loc105, #loc108])
#loc160 = loc(fused[#loc109, #loc110, #loc111, #loc100])
#loc161 = loc(fused[#loc112, #loc113])
