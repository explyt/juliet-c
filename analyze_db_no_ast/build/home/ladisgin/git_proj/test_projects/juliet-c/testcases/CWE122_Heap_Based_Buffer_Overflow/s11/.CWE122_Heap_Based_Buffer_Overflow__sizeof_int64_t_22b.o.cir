!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":24:74)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":24:84)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":46:79)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":46:89)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":64:79)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":64:89)
#loc105 = loc(fused[#loc9, #loc10])
#loc119 = loc(fused[#loc42, #loc43])
#loc132 = loc(fused[#loc75, #loc76])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22_badGlobal : !s32i {alignment = 4 : i64} loc(#loc101)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc102)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc103)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22_badSource(%arg0: !cir.ptr<!s64i> loc(fused[#loc9, #loc10])) -> !cir.ptr<!s64i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc105)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["__retval"] {alignment = 8 : i64} loc(#loc8)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc11)
    cir.scope {
      %4 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22_badGlobal : !cir.ptr<!s32i> loc(#loc101)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc14)
      cir.if %6 {
        %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc16)
        %8 = cir.const #cir.int<8> : !u64i loc(#loc108)
        %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc109)
        cir.store %10, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc110)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc23)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc24)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc24)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !s32i loc(#loc112)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc25)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc27)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc28)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc29)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc27)
          } loc(#loc113)
        } loc(#loc111)
        %11 = cir.const #cir.int<2147483643> : !s64i loc(#loc30)
        %12 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc31)
        cir.store %11, %12 : !s64i, !cir.ptr<!s64i> loc(#loc114)
      } loc(#loc107)
    } loc(#loc106)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc33)
    cir.store %2, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc115)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc115)
    cir.return %3 : !cir.ptr<!s64i> loc(#loc115)
  } loc(#loc104)
  cir.global "private"  external @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22_goodG2B1Global : !s32i {alignment = 4 : i64} loc(#loc116)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc117)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc39)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22_goodG2B1Source(%arg0: !cir.ptr<!s64i> loc(fused[#loc42, #loc43])) -> !cir.ptr<!s64i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc119)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["__retval"] {alignment = 8 : i64} loc(#loc41)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc44)
    cir.scope {
      %4 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22_goodG2B1Global : !cir.ptr<!s32i> loc(#loc116)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc47)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc47)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc39)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc39)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc51)
      } else {
        %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc52)
        %8 = cir.const #cir.int<8> : !u64i loc(#loc122)
        %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc52)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc123)
        cir.store %10, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc124)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc59)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc60)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc60)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !s32i loc(#loc126)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc61)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc63)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc64)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc65)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc63)
          } loc(#loc127)
        } loc(#loc125)
        %11 = cir.const #cir.int<2147483643> : !s64i loc(#loc66)
        %12 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc67)
        cir.store %11, %12 : !s64i, !cir.ptr<!s64i> loc(#loc128)
      } loc(#loc121)
    } loc(#loc120)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc69)
    cir.store %2, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc129)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc129)
    cir.return %3 : !cir.ptr<!s64i> loc(#loc129)
  } loc(#loc118)
  cir.global "private"  external @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22_goodG2B2Global : !s32i {alignment = 4 : i64} loc(#loc130)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22_goodG2B2Source(%arg0: !cir.ptr<!s64i> loc(fused[#loc75, #loc76])) -> !cir.ptr<!s64i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc132)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["__retval"] {alignment = 8 : i64} loc(#loc74)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc77)
    cir.scope {
      %4 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22_goodG2B2Global : !cir.ptr<!s32i> loc(#loc130)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc80)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc80)
      cir.if %6 {
        %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc82)
        %8 = cir.const #cir.int<8> : !u64i loc(#loc135)
        %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc82)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc136)
        cir.store %10, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc137)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc89)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc90)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc90)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !s32i loc(#loc139)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc91)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc93)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc94)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc95)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc93)
          } loc(#loc140)
        } loc(#loc138)
        %11 = cir.const #cir.int<2147483643> : !s64i loc(#loc96)
        %12 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc97)
        cir.store %11, %12 : !s64i, !cir.ptr<!s64i> loc(#loc141)
      } loc(#loc134)
    } loc(#loc133)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc99)
    cir.store %2, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc142)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc142)
    cir.return %3 : !cir.ptr<!s64i> loc(#loc142)
  } loc(#loc131)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":22:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":22:12)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":24:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":35:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":25:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":26:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":33:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":26:8)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":27:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":30:27)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":30:34)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":30:45)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":30:46)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":30:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":31:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":31:37)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":31:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":31:21)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":31:18)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":31:27)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":31:28)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":31:34)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":31:33)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":32:17)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":32:10)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":32:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":34:12)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":34:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":42:1)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":42:12)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":51:19)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":46:1)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":61:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":47:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":48:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":59:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":48:8)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":49:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":52:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":54:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":51:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":56:27)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":56:34)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":56:46)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":56:47)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":56:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":57:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":57:37)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":57:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":57:21)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":57:18)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":57:27)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":57:28)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":57:34)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":57:33)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":58:17)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":58:10)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":58:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":60:12)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":60:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":43:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":43:12)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":64:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":74:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":65:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":66:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":72:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":66:8)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":67:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":69:27)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":69:34)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":69:46)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":69:47)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":69:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":70:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":70:37)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":70:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":70:21)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":70:18)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":70:27)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":70:28)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":70:34)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":70:33)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":71:17)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":71:10)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":71:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":73:12)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":73:5)
#loc101 = loc(fused[#loc1, #loc2])
#loc102 = loc(fused[#loc3, #loc4])
#loc103 = loc(fused[#loc5, #loc6])
#loc104 = loc(fused[#loc7, #loc8])
#loc106 = loc(fused[#loc12, #loc13])
#loc107 = loc(fused[#loc15, #loc13])
#loc108 = loc(fused[#loc17, #loc18])
#loc109 = loc(fused[#loc16, #loc19])
#loc110 = loc(fused[#loc20, #loc19])
#loc111 = loc(fused[#loc21, #loc22])
#loc112 = loc(fused[#loc23, #loc24])
#loc113 = loc(fused[#loc26, #loc22])
#loc114 = loc(fused[#loc32, #loc30])
#loc115 = loc(fused[#loc34, #loc33])
#loc116 = loc(fused[#loc35, #loc36])
#loc117 = loc(fused[#loc37, #loc38])
#loc118 = loc(fused[#loc40, #loc41])
#loc120 = loc(fused[#loc45, #loc46])
#loc121 = loc(fused[#loc48, #loc49, #loc50, #loc46])
#loc122 = loc(fused[#loc53, #loc54])
#loc123 = loc(fused[#loc52, #loc55])
#loc124 = loc(fused[#loc56, #loc55])
#loc125 = loc(fused[#loc57, #loc58])
#loc126 = loc(fused[#loc59, #loc60])
#loc127 = loc(fused[#loc62, #loc58])
#loc128 = loc(fused[#loc68, #loc66])
#loc129 = loc(fused[#loc70, #loc69])
#loc130 = loc(fused[#loc71, #loc72])
#loc131 = loc(fused[#loc73, #loc74])
#loc133 = loc(fused[#loc78, #loc79])
#loc134 = loc(fused[#loc81, #loc79])
#loc135 = loc(fused[#loc83, #loc84])
#loc136 = loc(fused[#loc82, #loc85])
#loc137 = loc(fused[#loc86, #loc85])
#loc138 = loc(fused[#loc87, #loc88])
#loc139 = loc(fused[#loc89, #loc90])
#loc140 = loc(fused[#loc92, #loc88])
#loc141 = loc(fused[#loc98, #loc96])
#loc142 = loc(fused[#loc100, #loc99])
