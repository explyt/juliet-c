!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":24:14)
#loc8 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":24:21)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":50:18)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":50:25)
#loc98 = loc(fused[#loc7, #loc8])
#loc117 = loc(fused[#loc52, #loc53])
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc95)
  cir.func private @printIntLine(!s32i) loc(#loc96)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_647badSinkEPv(%arg0: !cir.ptr<!void> loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc99)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc100)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc101)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc98)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc102)
    %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc103)
    cir.store %arg0, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc18)
    %6 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc15)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc15)
    cir.store %7, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc102)
    %8 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc19)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    cir.br ^bb1 loc(#loc104)
  ^bb1:  // pred: ^bb0
    %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc23)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc105)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc106)
    cir.store %13, %0 : !u64i, !cir.ptr<!u64i> loc(#loc107)
    %14 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc27)
    %15 = cir.call @_Znam(%14) : (!u64i) -> !cir.ptr<!void> loc(#loc28)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc108)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc108)
    cir.store %17, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc109)
    cir.br ^bb2 loc(#loc110)
  ^bb2:  // pred: ^bb1
    %18 = cir.const #cir.int<0> : !s32i loc(#loc34)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc34)
    cir.store %19, %1 : !u64i, !cir.ptr<!u64i> loc(#loc111)
    cir.br ^bb3 loc(#loc110)
  ^bb3:  // 2 preds: ^bb2, ^bb7
    %20 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc36)
    %21 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc37)
    %23 = cir.cmp(lt, %20, %22) : !u64i, !cir.bool loc(#loc112)
    cir.brcond %23 ^bb4, ^bb8 loc(#loc112)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc113)
  ^bb5:  // pred: ^bb4
    %24 = cir.const #cir.int<0> : !s32i loc(#loc39)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc40)
    %26 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc41)
    %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !u64i), !cir.ptr<!s32i> loc(#loc42)
    cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    cir.br ^bb6 loc(#loc33)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc33)
  ^bb7:  // pred: ^bb6
    %28 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc43)
    %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc44)
    cir.store %29, %1 : !u64i, !cir.ptr<!u64i> loc(#loc115)
    cir.br ^bb3 loc(#loc110)
  ^bb8:  // pred: ^bb3
    cir.br ^bb9 loc(#loc33)
  ^bb9:  // pred: ^bb8
    %30 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc46)
    %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !s32i), !cir.ptr<!s32i> loc(#loc47)
    %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc45)
    cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc48)
    %34 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
    cir.delete.array %34 : <!s32i> loc(#loc49)
    cir.br ^bb10 loc(#loc22)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc6)
  } loc(#loc97)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_6411goodG2BSinkEPv(%arg0: !cir.ptr<!void> loc(fused[#loc52, #loc53])) extra(#fn_attr) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc118)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc119)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc120)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc117)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc121)
    %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc122)
    cir.store %arg0, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc63)
    %6 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc60)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc60)
    cir.store %7, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc121)
    %8 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc122)
    cir.br ^bb1 loc(#loc123)
  ^bb1:  // pred: ^bb0
    %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc68)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc68)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc124)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc125)
    cir.store %13, %0 : !u64i, !cir.ptr<!u64i> loc(#loc126)
    %14 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc72)
    %15 = cir.call @_Znam(%14) : (!u64i) -> !cir.ptr<!void> loc(#loc73)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc127)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc127)
    cir.store %17, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc128)
    cir.br ^bb2 loc(#loc129)
  ^bb2:  // pred: ^bb1
    %18 = cir.const #cir.int<0> : !s32i loc(#loc79)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc79)
    cir.store %19, %1 : !u64i, !cir.ptr<!u64i> loc(#loc130)
    cir.br ^bb3 loc(#loc129)
  ^bb3:  // 2 preds: ^bb2, ^bb7
    %20 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc81)
    %21 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc82)
    %23 = cir.cmp(lt, %20, %22) : !u64i, !cir.bool loc(#loc131)
    cir.brcond %23 ^bb4, ^bb8 loc(#loc131)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc132)
  ^bb5:  // pred: ^bb4
    %24 = cir.const #cir.int<0> : !s32i loc(#loc84)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc85)
    %26 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc86)
    %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !u64i), !cir.ptr<!s32i> loc(#loc87)
    cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc133)
    cir.br ^bb6 loc(#loc78)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc78)
  ^bb7:  // pred: ^bb6
    %28 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc88)
    %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc89)
    cir.store %29, %1 : !u64i, !cir.ptr<!u64i> loc(#loc134)
    cir.br ^bb3 loc(#loc129)
  ^bb8:  // pred: ^bb3
    cir.br ^bb9 loc(#loc78)
  ^bb9:  // pred: ^bb8
    %30 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc90)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc91)
    %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !s32i), !cir.ptr<!s32i> loc(#loc92)
    %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc90)
    cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc93)
    %34 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc94)
    cir.delete.array %34 : <!s32i> loc(#loc94)
    cir.br ^bb10 loc(#loc67)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc51)
  } loc(#loc116)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":0:0)
#loc1 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc2 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":24:1)
#loc6 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":43:1)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":31:9)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":31:16)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":31:26)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":32:9)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":32:14)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":27:5)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":27:28)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":29:5)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":29:25)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":25:1)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":29:18)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":29:17)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":30:5)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":42:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":34:21)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":34:28)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":34:38)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":34:9)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":35:37)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":24:6)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":35:28)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":35:46)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":35:9)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":36:9)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":39:9)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":36:18)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":36:14)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":36:21)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":36:33)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":37:9)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":38:29)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":38:13)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":38:24)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":38:25)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":36:40)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":36:39)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":40:22)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":40:33)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":40:34)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":40:9)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":41:19)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":50:1)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":69:1)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":57:9)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":57:16)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":57:26)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":58:9)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":58:14)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":53:5)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":53:28)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":55:5)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":55:25)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":51:1)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":55:18)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":55:17)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":56:5)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":68:5)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":60:21)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":60:28)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":60:38)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":60:9)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":61:37)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":50:6)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":61:28)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":61:46)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":61:9)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":62:9)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":65:9)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":62:18)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":62:14)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":62:21)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":62:33)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":63:9)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":64:29)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":64:13)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":64:24)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":64:25)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":62:40)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":62:39)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":66:22)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":66:33)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":66:34)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":66:9)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_64b.cpp":67:19)
#loc95 = loc(fused[#loc1, #loc2])
#loc96 = loc(fused[#loc3, #loc4])
#loc97 = loc(fused[#loc5, #loc6])
#loc99 = loc(fused[#loc9, #loc10])
#loc100 = loc(fused[#loc9, #loc11])
#loc101 = loc(fused[#loc12, #loc13])
#loc102 = loc(fused[#loc14, #loc15])
#loc103 = loc(fused[#loc16, #loc17])
#loc104 = loc(fused[#loc21, #loc22])
#loc105 = loc(fused[#loc24, #loc25])
#loc106 = loc(fused[#loc23, #loc25])
#loc107 = loc(fused[#loc26, #loc25])
#loc108 = loc(fused[#loc29, #loc30])
#loc109 = loc(fused[#loc31, #loc30])
#loc110 = loc(fused[#loc32, #loc33])
#loc111 = loc(fused[#loc35, #loc34])
#loc112 = loc(fused[#loc36, #loc37])
#loc113 = loc(fused[#loc38, #loc33])
#loc114 = loc(fused[#loc40, #loc39])
#loc115 = loc(fused[#loc44, #loc43])
#loc116 = loc(fused[#loc50, #loc51])
#loc118 = loc(fused[#loc54, #loc55])
#loc119 = loc(fused[#loc54, #loc56])
#loc120 = loc(fused[#loc57, #loc58])
#loc121 = loc(fused[#loc59, #loc60])
#loc122 = loc(fused[#loc61, #loc62])
#loc123 = loc(fused[#loc66, #loc67])
#loc124 = loc(fused[#loc69, #loc70])
#loc125 = loc(fused[#loc68, #loc70])
#loc126 = loc(fused[#loc71, #loc70])
#loc127 = loc(fused[#loc74, #loc75])
#loc128 = loc(fused[#loc76, #loc75])
#loc129 = loc(fused[#loc77, #loc78])
#loc130 = loc(fused[#loc80, #loc79])
#loc131 = loc(fused[#loc81, #loc82])
#loc132 = loc(fused[#loc83, #loc78])
#loc133 = loc(fused[#loc85, #loc84])
#loc134 = loc(fused[#loc89, #loc88])
