!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":26:14)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":26:21)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":43:18)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":43:25)
#loc56 = loc(fused[#loc7, #loc8])
#loc64 = loc(fused[#loc31, #loc32])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s04/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc53)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc54)
  cir.func @_ZN61CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_657badSinkEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc57)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc56)
    cir.store %arg0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc11)
    cir.br ^bb1 loc(#loc58)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc57)
    cir.store %2, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc57)
    %3 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc14)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc14)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc15)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc15)
    %7 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc16)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc17)
    %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc16)
    %10 = cir.const #cir.int<1> : !u64i loc(#loc59)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc60)
    cir.libc.memmove %11 bytes from %6 to %4 : !cir.ptr<!void>, !u64i loc(#loc61)
    %12 = cir.const #cir.int<0> : !s8i loc(#loc22)
    %13 = cir.const #cir.int<50> : !s32i loc(#loc23)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc23)
    %16 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc25)
    %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc25)
    cir.store %12, %17 : !s8i, !cir.ptr<!s8i> loc(#loc62)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc27)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
    cir.delete.array %19 : <!s8i> loc(#loc28)
    cir.br ^bb2 loc(#loc13)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc6)
  } loc(#loc55)
  cir.func @_ZN61CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_6511goodG2BSinkEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc31, #loc32])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc65)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc64)
    cir.store %arg0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc35)
    cir.br ^bb1 loc(#loc66)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc65)
    cir.store %2, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc65)
    %3 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc38)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc38)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc39)
    %7 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc40)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
    %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc40)
    %10 = cir.const #cir.int<1> : !u64i loc(#loc67)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc68)
    cir.libc.memmove %11 bytes from %6 to %4 : !cir.ptr<!void>, !u64i loc(#loc69)
    %12 = cir.const #cir.int<0> : !s8i loc(#loc46)
    %13 = cir.const #cir.int<50> : !s32i loc(#loc47)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc47)
    %16 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc49)
    %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc49)
    cir.store %12, %17 : !s8i, !cir.ptr<!s8i> loc(#loc70)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
    cir.delete.array %19 : <!s8i> loc(#loc52)
    cir.br ^bb2 loc(#loc37)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc30)
  } loc(#loc63)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s04/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":26:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":36:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":29:9)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":29:25)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":27:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":28:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":35:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":31:17)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":31:23)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":31:29)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":31:36)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":31:42)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":31:53)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":31:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":31:54)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":32:22)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":32:14)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":32:17)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":32:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":33:19)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":33:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":34:19)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":43:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":53:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":46:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":46:25)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":44:1)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":45:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":52:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":48:17)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":48:23)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":48:29)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":48:36)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":48:42)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":48:53)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":48:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":48:54)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":49:22)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":49:14)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":49:17)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":49:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":50:19)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":50:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memmove_65b.cpp":51:19)
#loc53 = loc(fused[#loc1, #loc2])
#loc54 = loc(fused[#loc3, #loc4])
#loc55 = loc(fused[#loc5, #loc6])
#loc57 = loc(fused[#loc9, #loc10])
#loc58 = loc(fused[#loc12, #loc13])
#loc59 = loc(fused[#loc18, #loc19])
#loc60 = loc(fused[#loc16, #loc19])
#loc61 = loc(fused[#loc20, #loc21])
#loc62 = loc(fused[#loc25, #loc22])
#loc63 = loc(fused[#loc29, #loc30])
#loc65 = loc(fused[#loc33, #loc34])
#loc66 = loc(fused[#loc36, #loc37])
#loc67 = loc(fused[#loc42, #loc43])
#loc68 = loc(fused[#loc40, #loc43])
#loc69 = loc(fused[#loc44, #loc45])
#loc70 = loc(fused[#loc49, #loc46])
