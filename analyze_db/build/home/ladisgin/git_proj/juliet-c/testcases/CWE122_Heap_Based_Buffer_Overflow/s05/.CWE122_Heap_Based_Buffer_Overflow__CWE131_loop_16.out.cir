!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":89:10)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":89:14)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":89:20)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":89:32)
#loc173 = loc(fused[#loc75, #loc76])
#loc174 = loc(fused[#loc77, #loc78])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc145)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc146)
  cir.func private @printIntLine(!s32i) loc(#loc147)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc148)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc150)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc151)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc152)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc17)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc153)
    cir.br ^bb1 loc(#loc154)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc154)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %5 ^bb3, ^bb8 loc(#loc21)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc22)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc23)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc23)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc155)
    cir.store %10, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc156)
    cir.br ^bb4 loc(#loc157)
  ^bb4:  // pred: ^bb3
    %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc29)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc158)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc159)
  ^bb5:  // pred: ^bb4
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc31)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc33)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
    cir.br ^bb6 loc(#loc27)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc27)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc34)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc20)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc160)
  ^bb10:  // pred: ^bb9
    %18 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc150)
    cir.store %18, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc150)
    cir.br ^bb11 loc(#loc161)
  ^bb11:  // pred: ^bb10
    %19 = cir.const #cir.int<0> : !s32i loc(#loc39)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc39)
    cir.store %20, %1 : !u64i, !cir.ptr<!u64i> loc(#loc162)
    cir.br ^bb12 loc(#loc161)
  ^bb12:  // 2 preds: ^bb11, ^bb16
    %21 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc41)
    %22 = cir.const #cir.int<10> : !s32i loc(#loc42)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc42)
    %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc163)
    cir.brcond %24 ^bb13, ^bb17 loc(#loc43)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc164)
  ^bb14:  // pred: ^bb13
    %25 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc45)
    %26 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc46)
    %27 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %25 : !u64i), !cir.ptr<!s32i> loc(#loc46)
    %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    %29 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
    %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc48)
    %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !u64i), !cir.ptr<!s32i> loc(#loc49)
    cir.store %28, %31 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    cir.br ^bb15 loc(#loc38)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc38)
  ^bb16:  // pred: ^bb15
    %32 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc51)
    %33 = cir.unary(inc, %32) : !u64i, !u64i loc(#loc52)
    cir.store %33, %1 : !u64i, !cir.ptr<!u64i> loc(#loc166)
    cir.br ^bb12 loc(#loc161)
  ^bb17:  // pred: ^bb12
    cir.br ^bb18 loc(#loc38)
  ^bb18:  // pred: ^bb17
    %34 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
    %35 = cir.const #cir.int<0> : !s32i loc(#loc54)
    %36 = cir.ptr_stride(%34 : !cir.ptr<!s32i>, %35 : !s32i), !cir.ptr<!s32i> loc(#loc55)
    %37 = cir.load %36 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    cir.call @printIntLine(%37) : (!s32i) -> () loc(#loc56)
    %38 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
    %39 = cir.cast(bitcast, %38 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc57)
    cir.call @free(%39) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc58)
    cir.br ^bb19 loc(#loc36)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc10)
  } loc(#loc149)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc168)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    cir.return loc(#loc60)
  } loc(#loc167)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc169)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc170)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc72)
  cir.func @main(%arg0: !s32i loc(fused[#loc75, #loc76]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc77, #loc78])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc173)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc174)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc74)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc79)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc80)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc81)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc81)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc82)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc69)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16_good() : () -> () loc(#loc84)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc70)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc71)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16_bad() : () -> () loc(#loc88)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc72)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc91)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc177)
    cir.return %17 : !s32i loc(#loc177)
  } loc(#loc172)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc179)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc180)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc181)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc101)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc182)
    cir.br ^bb1 loc(#loc183)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc183)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<1> : !s32i loc(#loc105)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc105)
    cir.brcond %5 ^bb3, ^bb8 loc(#loc105)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc106)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc107)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc107)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc184)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc185)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc106)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc186)
    cir.store %12, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc187)
    cir.br ^bb4 loc(#loc188)
  ^bb4:  // pred: ^bb3
    %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc114)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc115)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc115)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc189)
    cir.brcond %16 ^bb5, ^bb6 loc(#loc190)
  ^bb5:  // pred: ^bb4
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc117)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc119)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc117)
    cir.br ^bb6 loc(#loc113)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc113)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc120)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc104)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc191)
  ^bb10:  // pred: ^bb9
    %20 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc179)
    cir.store %20, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc179)
    cir.br ^bb11 loc(#loc192)
  ^bb11:  // pred: ^bb10
    %21 = cir.const #cir.int<0> : !s32i loc(#loc125)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc125)
    cir.store %22, %1 : !u64i, !cir.ptr<!u64i> loc(#loc193)
    cir.br ^bb12 loc(#loc192)
  ^bb12:  // 2 preds: ^bb11, ^bb16
    %23 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc127)
    %24 = cir.const #cir.int<10> : !s32i loc(#loc128)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc128)
    %26 = cir.cmp(lt, %23, %25) : !u64i, !cir.bool loc(#loc194)
    cir.brcond %26 ^bb13, ^bb17 loc(#loc129)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc195)
  ^bb14:  // pred: ^bb13
    %27 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc131)
    %28 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc132)
    %29 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %27 : !u64i), !cir.ptr<!s32i> loc(#loc132)
    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc132)
    %31 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc133)
    %32 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc134)
    %33 = cir.ptr_stride(%31 : !cir.ptr<!s32i>, %32 : !u64i), !cir.ptr<!s32i> loc(#loc135)
    cir.store %30, %33 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    cir.br ^bb15 loc(#loc124)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc124)
  ^bb16:  // pred: ^bb15
    %34 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc137)
    %35 = cir.unary(inc, %34) : !u64i, !u64i loc(#loc138)
    cir.store %35, %1 : !u64i, !cir.ptr<!u64i> loc(#loc197)
    cir.br ^bb12 loc(#loc192)
  ^bb17:  // pred: ^bb12
    cir.br ^bb18 loc(#loc124)
  ^bb18:  // pred: ^bb17
    %36 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc139)
    %37 = cir.const #cir.int<0> : !s32i loc(#loc140)
    %38 = cir.ptr_stride(%36 : !cir.ptr<!s32i>, %37 : !s32i), !cir.ptr<!s32i> loc(#loc141)
    %39 = cir.load %38 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    cir.call @printIntLine(%39) : (!s32i) -> () loc(#loc142)
    %40 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc143)
    %41 = cir.cast(bitcast, %40 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc143)
    cir.call @free(%41) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc144)
    cir.br ^bb19 loc(#loc122)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc94)
  } loc(#loc178)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":43:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":33:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":33:28)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":34:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":34:16)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":23:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":23:11)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":24:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":24:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":25:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":31:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":25:11)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":28:23)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":28:30)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":28:32)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":28:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":29:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":29:37)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":29:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":29:21)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":29:27)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":29:28)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":29:34)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":29:33)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":30:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":32:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":42:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":36:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":39:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":36:18)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":36:14)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":36:21)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":36:25)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":36:23)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":37:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":38:30)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":38:23)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":38:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":38:18)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":38:19)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":38:31)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":36:30)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":36:29)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":40:22)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":40:27)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":40:28)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":40:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":41:14)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":41:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":74:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":77:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":76:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":76:13)
#loc63 = loc("/usr/include/stdlib.h":575:1)
#loc64 = loc("/usr/include/stdlib.h":575:41)
#loc65 = loc("/usr/include/time.h":76:1)
#loc66 = loc("/usr/include/time.h":76:38)
#loc67 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc68 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":94:15)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":96:15)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":99:15)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":101:15)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":89:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":104:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":90:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":92:27)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":92:22)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":92:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":94:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":95:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":95:60)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":96:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":99:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":100:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":100:59)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":101:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":103:12)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":103:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":50:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":72:1)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":62:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":62:28)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":63:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":63:16)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":52:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":52:11)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":53:12)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":53:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":54:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":60:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":54:11)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":57:23)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":57:30)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":57:33)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":57:43)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":57:44)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":57:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":58:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":58:37)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":58:13)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":58:21)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":58:27)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":58:28)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":58:34)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":58:33)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":59:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":61:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":71:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":65:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":68:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":65:18)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":65:14)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":65:21)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":65:25)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":65:23)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":66:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":67:30)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":67:23)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":67:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":67:18)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":67:19)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":67:31)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":65:30)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":65:29)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":69:22)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":69:27)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":69:28)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":69:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":70:14)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c":70:9)
#loc145 = loc(fused[#loc1, #loc2])
#loc146 = loc(fused[#loc3, #loc4])
#loc147 = loc(fused[#loc5, #loc6])
#loc148 = loc(fused[#loc7, #loc8])
#loc149 = loc(fused[#loc9, #loc10])
#loc150 = loc(fused[#loc11, #loc12])
#loc151 = loc(fused[#loc13, #loc14])
#loc152 = loc(fused[#loc15, #loc16])
#loc153 = loc(fused[#loc18, #loc17])
#loc154 = loc(fused[#loc19, #loc20])
#loc155 = loc(fused[#loc22, #loc24])
#loc156 = loc(fused[#loc25, #loc24])
#loc157 = loc(fused[#loc26, #loc27])
#loc158 = loc(fused[#loc28, #loc29])
#loc159 = loc(fused[#loc30, #loc27])
#loc160 = loc(fused[#loc35, #loc36])
#loc161 = loc(fused[#loc37, #loc38])
#loc162 = loc(fused[#loc40, #loc39])
#loc163 = loc(fused[#loc41, #loc42])
#loc164 = loc(fused[#loc44, #loc38])
#loc165 = loc(fused[#loc47, #loc50])
#loc166 = loc(fused[#loc52, #loc51])
#loc167 = loc(fused[#loc59, #loc60])
#loc168 = loc(fused[#loc61, #loc62])
#loc169 = loc(fused[#loc63, #loc64])
#loc170 = loc(fused[#loc65, #loc66])
#loc171 = loc(fused[#loc67, #loc68])
#loc172 = loc(fused[#loc73, #loc74])
#loc175 = loc(fused[#loc84, #loc85])
#loc176 = loc(fused[#loc88, #loc89])
#loc177 = loc(fused[#loc92, #loc91])
#loc178 = loc(fused[#loc93, #loc94])
#loc179 = loc(fused[#loc95, #loc96])
#loc180 = loc(fused[#loc97, #loc98])
#loc181 = loc(fused[#loc99, #loc100])
#loc182 = loc(fused[#loc102, #loc101])
#loc183 = loc(fused[#loc103, #loc104])
#loc184 = loc(fused[#loc108, #loc109])
#loc185 = loc(fused[#loc107, #loc109])
#loc186 = loc(fused[#loc106, #loc110])
#loc187 = loc(fused[#loc111, #loc110])
#loc188 = loc(fused[#loc112, #loc113])
#loc189 = loc(fused[#loc114, #loc115])
#loc190 = loc(fused[#loc116, #loc113])
#loc191 = loc(fused[#loc121, #loc122])
#loc192 = loc(fused[#loc123, #loc124])
#loc193 = loc(fused[#loc126, #loc125])
#loc194 = loc(fused[#loc127, #loc128])
#loc195 = loc(fused[#loc130, #loc124])
#loc196 = loc(fused[#loc133, #loc136])
#loc197 = loc(fused[#loc138, #loc137])
