!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc168 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":250:10)
#loc169 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":250:14)
#loc170 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":250:20)
#loc171 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":250:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc406 = loc(fused[#loc168, #loc169])
#loc407 = loc(fused[#loc170, #loc171])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc340)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc341)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc342)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc343)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc344)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc345)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc346)
  cir.func private @close(!s32i) -> !s32i loc(#loc347)
  cir.func private @printIntLine(!s32i) loc(#loc348)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc350)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc351)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc353)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc354)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc355)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc356)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc357)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc33)
      %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc33)
      cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc355)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc35)
      %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc35)
      cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc356)
      cir.scope {
        cir.do {
          %12 = cir.const #cir.int<2> : !s32i loc(#loc40)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc41)
          %14 = cir.const #cir.int<6> : !s32i loc(#loc42)
          %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc43)
          cir.store %15, %5 : !s32i, !cir.ptr<!s32i> loc(#loc359)
          cir.scope {
            %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc48)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc49)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc49)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc361)
            cir.if %60 {
              cir.break loc(#loc51)
            } loc(#loc362)
          } loc(#loc360)
          %16 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc363)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc54)
          %18 = cir.const #cir.int<16> : !u64i loc(#loc364)
          cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc365)
          %19 = cir.const #cir.int<2> : !s32i loc(#loc59)
          %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc59)
          %21 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc60)
          cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc366)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc62)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc62)
          %24 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc63)
          %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc64)
          cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc367)
          %26 = cir.const #cir.int<27015> : !s32i loc(#loc66)
          %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc66)
          %28 = cir.call @htons(%27) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc67)
          %29 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
          cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc368)
          cir.scope {
            %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc73)
            %58 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc370)
            %59 = cir.const #cir.int<16> : !u64i loc(#loc371)
            %60 = cir.cast(integral, %59 : !u64i), !u32i loc(#loc371)
            %61 = cir.call @bind(%57, %58, %60) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc78)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc79)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc79)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc372)
            cir.if %64 {
              cir.break loc(#loc81)
            } loc(#loc373)
          } loc(#loc369)
          cir.scope {
            %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc84)
            %58 = cir.const #cir.int<5> : !s32i loc(#loc85)
            %59 = cir.call @listen(%57, %58) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc86)
            %60 = cir.const #cir.int<1> : !s32i loc(#loc87)
            %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc87)
            %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc375)
            cir.if %62 {
              cir.break loc(#loc89)
            } loc(#loc376)
          } loc(#loc374)
          %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc90)
          %31 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc91)
          %32 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc92)
          %33 = cir.call @accept(%30, %31, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc93)
          cir.store %33, %6 : !s32i, !cir.ptr<!s32i> loc(#loc377)
          cir.scope {
            %57 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc98)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc99)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc99)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc379)
            cir.if %60 {
              cir.break loc(#loc101)
            } loc(#loc380)
          } loc(#loc378)
          %34 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc102)
          %35 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc103)
          %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc103)
          %37 = cir.const #cir.int<3> : !s32i loc(#loc104)
          %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc104)
          %39 = cir.const #cir.int<4> : !u64i loc(#loc104)
          %40 = cir.binop(mul, %38, %39) : !u64i loc(#loc104)
          %41 = cir.const #cir.int<2> : !s32i loc(#loc104)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc104)
          %43 = cir.binop(add, %40, %42) : !u64i loc(#loc104)
          %44 = cir.const #cir.int<1> : !s32i loc(#loc105)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc105)
          %46 = cir.binop(sub, %43, %45) : !u64i loc(#loc381)
          %47 = cir.const #cir.int<0> : !s32i loc(#loc106)
          %48 = cir.call @recv(%34, %36, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc107)
          %49 = cir.cast(integral, %48 : !s64i), !s32i loc(#loc107)
          cir.store %49, %3 : !s32i, !cir.ptr<!s32i> loc(#loc382)
          cir.scope {
            %57 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc112)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc113)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc113)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc384)
            %61 = cir.ternary(%60, true {
              %62 = cir.const #true loc(#loc114)
              cir.yield %62 : !cir.bool loc(#loc114)
            }, false {
              %62 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc115)
              %63 = cir.const #cir.int<0> : !s32i loc(#loc116)
              %64 = cir.cmp(eq, %62, %63) : !s32i, !cir.bool loc(#loc385)
              %65 = cir.ternary(%64, true {
                %66 = cir.const #true loc(#loc114)
                cir.yield %66 : !cir.bool loc(#loc114)
              }, false {
                %66 = cir.const #false loc(#loc114)
                cir.yield %66 : !cir.bool loc(#loc114)
              }) : (!cir.bool) -> !cir.bool loc(#loc114)
              cir.yield %65 : !cir.bool loc(#loc114)
            }) : (!cir.bool) -> !cir.bool loc(#loc114)
            cir.if %61 {
              cir.break loc(#loc118)
            } loc(#loc386)
          } loc(#loc383)
          %50 = cir.const #cir.int<0> : !s32i loc(#loc119)
          %51 = cir.cast(integral, %50 : !s32i), !s8i loc(#loc119)
          %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc120)
          %53 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc121)
          %54 = cir.ptr_stride(%53 : !cir.ptr<!s8i>, %52 : !s32i), !cir.ptr<!s8i> loc(#loc121)
          cir.store %51, %54 : !s8i, !cir.ptr<!s8i> loc(#loc387)
          %55 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc122)
          %56 = cir.call @atoi(%55) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc123)
          cir.store %56, %0 : !s32i, !cir.ptr<!s32i> loc(#loc388)
          cir.yield loc(#loc39)
        } while {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc126)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc126)
          cir.condition(%13) loc(#loc126)
        } loc(#loc358)
      } loc(#loc358)
      cir.scope {
        %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc129)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc130)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc130)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc390)
        cir.if %15 {
          %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc132)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc133)
        } loc(#loc391)
      } loc(#loc389)
      cir.scope {
        %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc136)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc137)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc137)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc393)
        cir.if %15 {
          %16 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc139)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc140)
        } loc(#loc394)
      } loc(#loc392)
    } loc(#loc352)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc396)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc397)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc144)
      cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc396)
      %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc146)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc397)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc147)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc148)
      %9 = cir.binop(div, %7, %8) : !s32i loc(#loc398)
      cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc149)
    } loc(#loc395)
    cir.return loc(#loc20)
  } loc(#loc349)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc400)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc152)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc401)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc154)
    cir.return loc(#loc151)
  } loc(#loc399)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc402)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc403)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc404)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc162)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc163)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc164)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc165)
  cir.func @main(%arg0: !s32i loc(fused[#loc168, #loc169]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc170, #loc171])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc406)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc407)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc167)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc172)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc173)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc174)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc174)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc175)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc162)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc162)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc176)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_divide_31_good : !cir.ptr<!cir.func<!void ()>> loc(#loc408)
    cir.call @CWE369_Divide_by_Zero__int_listen_socket_divide_31_good() : () -> () loc(#loc177)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc163)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc163)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc179)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc164)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc164)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc180)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_divide_31_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc409)
    cir.call @CWE369_Divide_by_Zero__int_listen_socket_divide_31_bad() : () -> () loc(#loc181)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc165)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc165)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc183)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc184)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc410)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc410)
    cir.return %17 : !s32i loc(#loc410)
  } loc(#loc405)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc412)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc190)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc191)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc413)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc193)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc414)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc416)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc417)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc198)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc416)
      %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc200)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc417)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc201)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc202)
      %10 = cir.binop(div, %8, %9) : !s32i loc(#loc418)
      cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc203)
    } loc(#loc415)
    cir.return loc(#loc187)
  } loc(#loc411)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc204)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc420)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc209)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc210)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc421)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc423)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc424)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc425)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc426)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc427)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc219)
      %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc219)
      cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc425)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc221)
      %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc221)
      cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc426)
      cir.scope {
        cir.do {
          %12 = cir.const #cir.int<2> : !s32i loc(#loc226)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc227)
          %14 = cir.const #cir.int<6> : !s32i loc(#loc228)
          %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc229)
          cir.store %15, %5 : !s32i, !cir.ptr<!s32i> loc(#loc429)
          cir.scope {
            %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc234)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc235)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc235)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc431)
            cir.if %60 {
              cir.break loc(#loc237)
            } loc(#loc432)
          } loc(#loc430)
          %16 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc433)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc240)
          %18 = cir.const #cir.int<16> : !u64i loc(#loc434)
          cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc435)
          %19 = cir.const #cir.int<2> : !s32i loc(#loc245)
          %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc245)
          %21 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc60)
          cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc436)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc247)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc247)
          %24 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc63)
          %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc64)
          cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc437)
          %26 = cir.const #cir.int<27015> : !s32i loc(#loc249)
          %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc249)
          %28 = cir.call @htons(%27) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc250)
          %29 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
          cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc438)
          cir.scope {
            %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc255)
            %58 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc440)
            %59 = cir.const #cir.int<16> : !u64i loc(#loc441)
            %60 = cir.cast(integral, %59 : !u64i), !u32i loc(#loc441)
            %61 = cir.call @bind(%57, %58, %60) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc260)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc261)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc261)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc442)
            cir.if %64 {
              cir.break loc(#loc263)
            } loc(#loc443)
          } loc(#loc439)
          cir.scope {
            %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc266)
            %58 = cir.const #cir.int<5> : !s32i loc(#loc267)
            %59 = cir.call @listen(%57, %58) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc268)
            %60 = cir.const #cir.int<1> : !s32i loc(#loc269)
            %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc269)
            %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc445)
            cir.if %62 {
              cir.break loc(#loc271)
            } loc(#loc446)
          } loc(#loc444)
          %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc272)
          %31 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc273)
          %32 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc274)
          %33 = cir.call @accept(%30, %31, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc275)
          cir.store %33, %6 : !s32i, !cir.ptr<!s32i> loc(#loc447)
          cir.scope {
            %57 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc280)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc281)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc281)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc449)
            cir.if %60 {
              cir.break loc(#loc283)
            } loc(#loc450)
          } loc(#loc448)
          %34 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc284)
          %35 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc285)
          %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc285)
          %37 = cir.const #cir.int<3> : !s32i loc(#loc286)
          %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc286)
          %39 = cir.const #cir.int<4> : !u64i loc(#loc286)
          %40 = cir.binop(mul, %38, %39) : !u64i loc(#loc286)
          %41 = cir.const #cir.int<2> : !s32i loc(#loc286)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc286)
          %43 = cir.binop(add, %40, %42) : !u64i loc(#loc286)
          %44 = cir.const #cir.int<1> : !s32i loc(#loc287)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc287)
          %46 = cir.binop(sub, %43, %45) : !u64i loc(#loc451)
          %47 = cir.const #cir.int<0> : !s32i loc(#loc288)
          %48 = cir.call @recv(%34, %36, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc289)
          %49 = cir.cast(integral, %48 : !s64i), !s32i loc(#loc289)
          cir.store %49, %3 : !s32i, !cir.ptr<!s32i> loc(#loc452)
          cir.scope {
            %57 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc294)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc295)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc295)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc454)
            %61 = cir.ternary(%60, true {
              %62 = cir.const #true loc(#loc296)
              cir.yield %62 : !cir.bool loc(#loc296)
            }, false {
              %62 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc297)
              %63 = cir.const #cir.int<0> : !s32i loc(#loc298)
              %64 = cir.cmp(eq, %62, %63) : !s32i, !cir.bool loc(#loc455)
              %65 = cir.ternary(%64, true {
                %66 = cir.const #true loc(#loc296)
                cir.yield %66 : !cir.bool loc(#loc296)
              }, false {
                %66 = cir.const #false loc(#loc296)
                cir.yield %66 : !cir.bool loc(#loc296)
              }) : (!cir.bool) -> !cir.bool loc(#loc296)
              cir.yield %65 : !cir.bool loc(#loc296)
            }) : (!cir.bool) -> !cir.bool loc(#loc296)
            cir.if %61 {
              cir.break loc(#loc300)
            } loc(#loc456)
          } loc(#loc453)
          %50 = cir.const #cir.int<0> : !s32i loc(#loc301)
          %51 = cir.cast(integral, %50 : !s32i), !s8i loc(#loc301)
          %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc302)
          %53 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc303)
          %54 = cir.ptr_stride(%53 : !cir.ptr<!s8i>, %52 : !s32i), !cir.ptr<!s8i> loc(#loc303)
          cir.store %51, %54 : !s8i, !cir.ptr<!s8i> loc(#loc457)
          %55 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc304)
          %56 = cir.call @atoi(%55) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc305)
          cir.store %56, %0 : !s32i, !cir.ptr<!s32i> loc(#loc458)
          cir.yield loc(#loc225)
        } while {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc308)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc308)
          cir.condition(%13) loc(#loc308)
        } loc(#loc428)
      } loc(#loc428)
      cir.scope {
        %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc311)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc312)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc312)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc460)
        cir.if %15 {
          %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc314)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc315)
        } loc(#loc461)
      } loc(#loc459)
      cir.scope {
        %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc318)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc319)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc319)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc463)
        cir.if %15 {
          %16 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc321)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc322)
        } loc(#loc464)
      } loc(#loc462)
    } loc(#loc422)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc466)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc467)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc326)
      cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc466)
      %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc328)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc467)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc331)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc332)
        %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc469)
        cir.if %9 {
          %10 = cir.const #cir.int<100> : !s32i loc(#loc336)
          %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc337)
          %12 = cir.binop(div, %10, %11) : !s32i loc(#loc471)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc338)
        } else {
          %10 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc204)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc204)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc339)
        } loc(#loc470)
      } loc(#loc468)
    } loc(#loc465)
    cir.return loc(#loc206)
  } loc(#loc419)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":44:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":124:1)
#loc21 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":46:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":46:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":48:13)
#loc24 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":48:12)
#loc25 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":48:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":49:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":117:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":54:9)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":54:13)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":55:9)
#loc31 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":55:28)
#loc32 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":56:9)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":56:31)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":57:9)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":57:31)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":58:9)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":58:41)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":59:9)
#loc39 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":102:17)
#loc40 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":69:35)
#loc41 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":69:44)
#loc42 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":69:57)
#loc43 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":69:28)
#loc44 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":69:13)
#loc45 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":69:68)
#loc46 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":70:13)
#loc47 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":73:13)
#loc48 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":70:17)
#loc49 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":70:33)
#loc50 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":71:13)
#loc51 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":72:17)
#loc52 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":74:20)
#loc53 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":74:21)
#loc54 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":74:30)
#loc55 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":74:33)
#loc56 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":74:47)
#loc57 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":74:13)
#loc58 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":74:48)
#loc59 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":75:34)
#loc60 = loc("/usr/include/netinet/in.h":249:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":75:13)
#loc62 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":76:39)
#loc63 = loc("/usr/include/netinet/in.h":251:20)
#loc64 = loc("/usr/include/netinet/in.h":33:15)
#loc65 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":76:13)
#loc66 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":77:38)
#loc67 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":77:32)
#loc68 = loc("/usr/include/netinet/in.h":250:15)
#loc69 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":77:13)
#loc70 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":77:46)
#loc71 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":78:13)
#loc72 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":81:13)
#loc73 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":78:22)
#loc74 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":78:54)
#loc75 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":78:55)
#loc76 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":78:64)
#loc77 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":78:78)
#loc78 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":78:17)
#loc79 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":78:84)
#loc80 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":79:13)
#loc81 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":80:17)
#loc82 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":82:13)
#loc83 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":85:13)
#loc84 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":82:24)
#loc85 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":82:38)
#loc86 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":82:17)
#loc87 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":82:57)
#loc88 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":83:13)
#loc89 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":84:17)
#loc90 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":86:35)
#loc91 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":86:49)
#loc92 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":86:55)
#loc93 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":86:28)
#loc94 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":86:13)
#loc95 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":86:59)
#loc96 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":87:13)
#loc97 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":90:13)
#loc98 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":87:17)
#loc99 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":87:33)
#loc100 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":88:13)
#loc101 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":89:17)
#loc102 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":92:31)
#loc103 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":92:45)
#loc104 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":92:58)
#loc105 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":92:76)
#loc106 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":92:79)
#loc107 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":92:26)
#loc108 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":92:13)
#loc109 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":92:80)
#loc110 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":93:13)
#loc111 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":96:13)
#loc112 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":93:17)
#loc113 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":93:31)
#loc114 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":93:44)
#loc115 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":93:47)
#loc116 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":93:61)
#loc117 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":94:13)
#loc118 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":95:17)
#loc119 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":98:39)
#loc120 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":98:25)
#loc121 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":98:13)
#loc122 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":100:25)
#loc123 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":100:20)
#loc124 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":100:13)
#loc125 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":100:36)
#loc126 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":102:16)
#loc127 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":103:9)
#loc128 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":106:9)
#loc129 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":103:13)
#loc130 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":103:29)
#loc131 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":104:9)
#loc132 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":105:26)
#loc133 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":105:13)
#loc134 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":107:9)
#loc135 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":110:9)
#loc136 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":107:13)
#loc137 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":107:29)
#loc138 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":108:9)
#loc139 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":109:26)
#loc140 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":109:13)
#loc141 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":118:5)
#loc142 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":123:5)
#loc143 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":119:9)
#loc144 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":119:24)
#loc145 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":120:9)
#loc146 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":120:20)
#loc147 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":122:22)
#loc148 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":122:28)
#loc149 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":122:9)
#loc150 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":236:1)
#loc151 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":240:1)
#loc152 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":238:5)
#loc153 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":238:13)
#loc154 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":239:5)
#loc155 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":239:13)
#loc156 = loc("/usr/include/stdlib.h":575:1)
#loc157 = loc("/usr/include/stdlib.h":575:41)
#loc158 = loc("/usr/include/time.h":76:1)
#loc159 = loc("/usr/include/time.h":76:38)
#loc160 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc161 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc162 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":255:15)
#loc163 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":257:15)
#loc164 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":260:15)
#loc165 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":262:15)
#loc166 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":250:1)
#loc167 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":265:1)
#loc172 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":251:1)
#loc173 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":253:27)
#loc174 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":253:22)
#loc175 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":253:5)
#loc176 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":255:5)
#loc177 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":256:5)
#loc178 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":256:61)
#loc179 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":257:5)
#loc180 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":260:5)
#loc181 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":261:5)
#loc182 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":261:60)
#loc183 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":262:5)
#loc184 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":264:12)
#loc185 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":264:5)
#loc186 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":131:1)
#loc187 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":144:1)
#loc188 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":133:5)
#loc189 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":133:9)
#loc190 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":135:13)
#loc191 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":135:12)
#loc192 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":135:5)
#loc193 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":137:12)
#loc194 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":137:5)
#loc195 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":138:5)
#loc196 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":143:5)
#loc197 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":139:9)
#loc198 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":139:24)
#loc199 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":140:9)
#loc200 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":140:20)
#loc201 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":142:22)
#loc202 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":142:28)
#loc203 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":142:9)
#loc204 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":231:23)
#loc205 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":147:1)
#loc206 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":234:1)
#loc207 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":149:5)
#loc208 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":149:9)
#loc209 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":151:13)
#loc210 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":151:12)
#loc211 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":151:5)
#loc212 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":152:5)
#loc213 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":220:5)
#loc214 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":157:9)
#loc215 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":157:13)
#loc216 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":158:9)
#loc217 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":158:28)
#loc218 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":159:9)
#loc219 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":159:31)
#loc220 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":160:9)
#loc221 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":160:31)
#loc222 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":161:9)
#loc223 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":161:41)
#loc224 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":162:9)
#loc225 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":205:17)
#loc226 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":172:35)
#loc227 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":172:44)
#loc228 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":172:57)
#loc229 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":172:28)
#loc230 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":172:13)
#loc231 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":172:68)
#loc232 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":173:13)
#loc233 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":176:13)
#loc234 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":173:17)
#loc235 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":173:33)
#loc236 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":174:13)
#loc237 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":175:17)
#loc238 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":177:20)
#loc239 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":177:21)
#loc240 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":177:30)
#loc241 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":177:33)
#loc242 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":177:47)
#loc243 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":177:13)
#loc244 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":177:48)
#loc245 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":178:34)
#loc246 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":178:13)
#loc247 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":179:39)
#loc248 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":179:13)
#loc249 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":180:38)
#loc250 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":180:32)
#loc251 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":180:13)
#loc252 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":180:46)
#loc253 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":181:13)
#loc254 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":184:13)
#loc255 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":181:22)
#loc256 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":181:54)
#loc257 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":181:55)
#loc258 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":181:64)
#loc259 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":181:78)
#loc260 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":181:17)
#loc261 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":181:84)
#loc262 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":182:13)
#loc263 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":183:17)
#loc264 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":185:13)
#loc265 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":188:13)
#loc266 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":185:24)
#loc267 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":185:38)
#loc268 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":185:17)
#loc269 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":185:57)
#loc270 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":186:13)
#loc271 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":187:17)
#loc272 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":189:35)
#loc273 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":189:49)
#loc274 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":189:55)
#loc275 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":189:28)
#loc276 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":189:13)
#loc277 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":189:59)
#loc278 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":190:13)
#loc279 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":193:13)
#loc280 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":190:17)
#loc281 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":190:33)
#loc282 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":191:13)
#loc283 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":192:17)
#loc284 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":195:31)
#loc285 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":195:45)
#loc286 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":195:58)
#loc287 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":195:76)
#loc288 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":195:79)
#loc289 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":195:26)
#loc290 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":195:13)
#loc291 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":195:80)
#loc292 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":196:13)
#loc293 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":199:13)
#loc294 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":196:17)
#loc295 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":196:31)
#loc296 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":196:44)
#loc297 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":196:47)
#loc298 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":196:61)
#loc299 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":197:13)
#loc300 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":198:17)
#loc301 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":201:39)
#loc302 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":201:25)
#loc303 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":201:13)
#loc304 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":203:25)
#loc305 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":203:20)
#loc306 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":203:13)
#loc307 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":203:36)
#loc308 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":205:16)
#loc309 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":206:9)
#loc310 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":209:9)
#loc311 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":206:13)
#loc312 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":206:29)
#loc313 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":207:9)
#loc314 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":208:26)
#loc315 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":208:13)
#loc316 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":210:9)
#loc317 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":213:9)
#loc318 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":210:13)
#loc319 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":210:29)
#loc320 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":211:9)
#loc321 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":212:26)
#loc322 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":212:13)
#loc323 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":221:5)
#loc324 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":233:5)
#loc325 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":222:9)
#loc326 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":222:24)
#loc327 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":223:9)
#loc328 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":223:20)
#loc329 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":225:9)
#loc330 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":232:9)
#loc331 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":225:13)
#loc332 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":225:21)
#loc333 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":226:9)
#loc334 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":228:9)
#loc335 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":230:9)
#loc336 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":227:26)
#loc337 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":227:32)
#loc338 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":227:13)
#loc339 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_31.c":231:13)
#loc340 = loc(fused[#loc1, #loc2])
#loc341 = loc(fused[#loc3, #loc4])
#loc342 = loc(fused[#loc5, #loc6])
#loc343 = loc(fused[#loc7, #loc8])
#loc344 = loc(fused[#loc9, #loc10])
#loc345 = loc(fused[#loc11, #loc12])
#loc346 = loc(fused[#loc13, #loc14])
#loc347 = loc(fused[#loc15, #loc16])
#loc348 = loc(fused[#loc17, #loc18])
#loc349 = loc(fused[#loc19, #loc20])
#loc350 = loc(fused[#loc21, #loc22])
#loc351 = loc(fused[#loc25, #loc23])
#loc352 = loc(fused[#loc26, #loc27])
#loc353 = loc(fused[#loc28, #loc29])
#loc354 = loc(fused[#loc30, #loc31])
#loc355 = loc(fused[#loc32, #loc33])
#loc356 = loc(fused[#loc34, #loc35])
#loc357 = loc(fused[#loc36, #loc37])
#loc358 = loc(fused[#loc38, #loc39])
#loc359 = loc(fused[#loc44, #loc45])
#loc360 = loc(fused[#loc46, #loc47])
#loc361 = loc(fused[#loc48, #loc49])
#loc362 = loc(fused[#loc50, #loc47])
#loc363 = loc(fused[#loc52, #loc53])
#loc364 = loc(fused[#loc55, #loc56])
#loc365 = loc(fused[#loc57, #loc58])
#loc366 = loc(fused[#loc61, #loc59])
#loc367 = loc(fused[#loc65, #loc62])
#loc368 = loc(fused[#loc69, #loc70])
#loc369 = loc(fused[#loc71, #loc72])
#loc370 = loc(fused[#loc74, #loc75])
#loc371 = loc(fused[#loc76, #loc77])
#loc372 = loc(fused[#loc78, #loc79])
#loc373 = loc(fused[#loc80, #loc72])
#loc374 = loc(fused[#loc82, #loc83])
#loc375 = loc(fused[#loc86, #loc87])
#loc376 = loc(fused[#loc88, #loc83])
#loc377 = loc(fused[#loc94, #loc95])
#loc378 = loc(fused[#loc96, #loc97])
#loc379 = loc(fused[#loc98, #loc99])
#loc380 = loc(fused[#loc100, #loc97])
#loc381 = loc(fused[#loc104, #loc105])
#loc382 = loc(fused[#loc108, #loc109])
#loc383 = loc(fused[#loc110, #loc111])
#loc384 = loc(fused[#loc112, #loc113])
#loc385 = loc(fused[#loc115, #loc116])
#loc386 = loc(fused[#loc117, #loc111])
#loc387 = loc(fused[#loc121, #loc119])
#loc388 = loc(fused[#loc124, #loc125])
#loc389 = loc(fused[#loc127, #loc128])
#loc390 = loc(fused[#loc129, #loc130])
#loc391 = loc(fused[#loc131, #loc128])
#loc392 = loc(fused[#loc134, #loc135])
#loc393 = loc(fused[#loc136, #loc137])
#loc394 = loc(fused[#loc138, #loc135])
#loc395 = loc(fused[#loc141, #loc142])
#loc396 = loc(fused[#loc143, #loc144])
#loc397 = loc(fused[#loc145, #loc146])
#loc398 = loc(fused[#loc147, #loc148])
#loc399 = loc(fused[#loc150, #loc151])
#loc400 = loc(fused[#loc152, #loc153])
#loc401 = loc(fused[#loc154, #loc155])
#loc402 = loc(fused[#loc156, #loc157])
#loc403 = loc(fused[#loc158, #loc159])
#loc404 = loc(fused[#loc160, #loc161])
#loc405 = loc(fused[#loc166, #loc167])
#loc408 = loc(fused[#loc177, #loc178])
#loc409 = loc(fused[#loc181, #loc182])
#loc410 = loc(fused[#loc185, #loc184])
#loc411 = loc(fused[#loc186, #loc187])
#loc412 = loc(fused[#loc188, #loc189])
#loc413 = loc(fused[#loc192, #loc190])
#loc414 = loc(fused[#loc194, #loc193])
#loc415 = loc(fused[#loc195, #loc196])
#loc416 = loc(fused[#loc197, #loc198])
#loc417 = loc(fused[#loc199, #loc200])
#loc418 = loc(fused[#loc201, #loc202])
#loc419 = loc(fused[#loc205, #loc206])
#loc420 = loc(fused[#loc207, #loc208])
#loc421 = loc(fused[#loc211, #loc209])
#loc422 = loc(fused[#loc212, #loc213])
#loc423 = loc(fused[#loc214, #loc215])
#loc424 = loc(fused[#loc216, #loc217])
#loc425 = loc(fused[#loc218, #loc219])
#loc426 = loc(fused[#loc220, #loc221])
#loc427 = loc(fused[#loc222, #loc223])
#loc428 = loc(fused[#loc224, #loc225])
#loc429 = loc(fused[#loc230, #loc231])
#loc430 = loc(fused[#loc232, #loc233])
#loc431 = loc(fused[#loc234, #loc235])
#loc432 = loc(fused[#loc236, #loc233])
#loc433 = loc(fused[#loc238, #loc239])
#loc434 = loc(fused[#loc241, #loc242])
#loc435 = loc(fused[#loc243, #loc244])
#loc436 = loc(fused[#loc246, #loc245])
#loc437 = loc(fused[#loc248, #loc247])
#loc438 = loc(fused[#loc251, #loc252])
#loc439 = loc(fused[#loc253, #loc254])
#loc440 = loc(fused[#loc256, #loc257])
#loc441 = loc(fused[#loc258, #loc259])
#loc442 = loc(fused[#loc260, #loc261])
#loc443 = loc(fused[#loc262, #loc254])
#loc444 = loc(fused[#loc264, #loc265])
#loc445 = loc(fused[#loc268, #loc269])
#loc446 = loc(fused[#loc270, #loc265])
#loc447 = loc(fused[#loc276, #loc277])
#loc448 = loc(fused[#loc278, #loc279])
#loc449 = loc(fused[#loc280, #loc281])
#loc450 = loc(fused[#loc282, #loc279])
#loc451 = loc(fused[#loc286, #loc287])
#loc452 = loc(fused[#loc290, #loc291])
#loc453 = loc(fused[#loc292, #loc293])
#loc454 = loc(fused[#loc294, #loc295])
#loc455 = loc(fused[#loc297, #loc298])
#loc456 = loc(fused[#loc299, #loc293])
#loc457 = loc(fused[#loc303, #loc301])
#loc458 = loc(fused[#loc306, #loc307])
#loc459 = loc(fused[#loc309, #loc310])
#loc460 = loc(fused[#loc311, #loc312])
#loc461 = loc(fused[#loc313, #loc310])
#loc462 = loc(fused[#loc316, #loc317])
#loc463 = loc(fused[#loc318, #loc319])
#loc464 = loc(fused[#loc320, #loc317])
#loc465 = loc(fused[#loc323, #loc324])
#loc466 = loc(fused[#loc325, #loc326])
#loc467 = loc(fused[#loc327, #loc328])
#loc468 = loc(fused[#loc329, #loc330])
#loc469 = loc(fused[#loc331, #loc332])
#loc470 = loc(fused[#loc333, #loc334, #loc335, #loc330])
#loc471 = loc(fused[#loc336, #loc337])
