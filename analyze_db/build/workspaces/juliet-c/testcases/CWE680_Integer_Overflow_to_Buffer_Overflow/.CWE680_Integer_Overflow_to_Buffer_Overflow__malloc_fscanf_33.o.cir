!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @__isoc23_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc125)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc126)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc127)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc128)
  cir.func private @printIntLine(!s32i) loc(#loc129)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc130)
  cir.func @_ZN60CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc132)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc133)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc19)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc21)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    %4 = cir.get_global @__isoc23_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc23)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc126)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc24)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %9 = cir.call @__isoc23_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc23)
    cir.scope {
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc136)
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc28)
      cir.store %12, %10 : !s32i, !cir.ptr<!s32i> loc(#loc136)
      cir.scope {
        %13 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc138)
        %14 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc139)
        %15 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc35)
        %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc36)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc36)
        %18 = cir.const #cir.int<4> : !u64i loc(#loc140)
        %19 = cir.binop(mul, %17, %18) : !u64i loc(#loc141)
        %20 = cir.call @malloc(%19) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc35)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc142)
        cir.store %21, %14 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc143)
        cir.scope {
          %29 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
          %30 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc44)
          %31 = cir.cmp(eq, %29, %30) : !cir.ptr<!s32i>, !cir.bool loc(#loc145)
          cir.if %31 {
            %32 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc46)
            %33 = cir.const #cir.int<1> : !s32i loc(#loc47)
            %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc48)
            cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc46)
          } loc(#loc146)
        } loc(#loc144)
        cir.scope {
          %29 = cir.const #cir.int<0> : !s32i loc(#loc51)
          %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc51)
          cir.store %30, %13 : !u64i, !cir.ptr<!u64i> loc(#loc148)
          cir.for : cond {
            %31 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc53)
            %32 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc54)
            %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc54)
            %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc149)
            cir.condition(%34) loc(#loc149)
          } body {
            cir.scope {
              %31 = cir.const #cir.int<0> : !s32i loc(#loc56)
              %32 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
              %33 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc58)
              %34 = cir.ptr_stride(%32 : !cir.ptr<!s32i>, %33 : !u64i), !cir.ptr<!s32i> loc(#loc59)
              cir.store %31, %34 : !s32i, !cir.ptr<!s32i> loc(#loc151)
            } loc(#loc150)
            cir.yield loc(#loc50)
          } step {
            %31 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc60)
            %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc61)
            cir.store %32, %13 : !u64i, !cir.ptr<!u64i> loc(#loc152)
            cir.yield loc(#loc147)
          } loc(#loc147)
        } loc(#loc147)
        %22 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc62)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc63)
        %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc64)
        %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc62)
        cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc65)
        %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc66)
        %27 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
        %28 = cir.cast(bitcast, %27 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc67)
        cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc66)
      } loc(#loc137)
    } loc(#loc135)
    cir.return loc(#loc15)
  } loc(#loc131)
  cir.func internal private @_ZN60CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc154)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc155)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc73)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc75)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc156)
    %4 = cir.const #cir.int<20> : !s32i loc(#loc77)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc159)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc82)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc159)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc161)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc162)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc89)
        %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc90)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc90)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc163)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc164)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc89)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc165)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc166)
        cir.scope {
          %24 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc97)
          %25 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc98)
          %26 = cir.cmp(eq, %24, %25) : !cir.ptr<!s32i>, !cir.bool loc(#loc168)
          cir.if %26 {
            %27 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc100)
            %28 = cir.const #cir.int<1> : !s32i loc(#loc101)
            %29 = cir.unary(minus, %28) nsw : !s32i, !s32i loc(#loc102)
            cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr) loc(#loc100)
          } loc(#loc169)
        } loc(#loc167)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc105)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc105)
          cir.store %25, %8 : !u64i, !cir.ptr<!u64i> loc(#loc171)
          cir.for : cond {
            %26 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc107)
            %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc108)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc108)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc172)
            cir.condition(%29) loc(#loc172)
          } body {
            cir.scope {
              %26 = cir.const #cir.int<0> : !s32i loc(#loc110)
              %27 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc111)
              %28 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc112)
              %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !u64i), !cir.ptr<!s32i> loc(#loc113)
              cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc174)
            } loc(#loc173)
            cir.yield loc(#loc104)
          } step {
            %26 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc114)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc115)
            cir.store %27, %8 : !u64i, !cir.ptr<!u64i> loc(#loc175)
            cir.yield loc(#loc170)
          } loc(#loc170)
        } loc(#loc170)
        %17 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc116)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc117)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc118)
        %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc116)
        cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc119)
        %21 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc120)
        %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc121)
        %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc121)
        cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc120)
      } loc(#loc160)
    } loc(#loc158)
    cir.return loc(#loc69)
  } loc(#loc153)
  cir.func @_ZN60CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN60CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33L7goodG2BEv() : () -> () loc(#loc124)
    cir.return loc(#loc123)
  } loc(#loc176)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":0:0)
#loc1 = loc("/usr/include/stdio.h":442:1)
#loc2 = loc("/usr/include/stdio.h":444:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":31:19)
#loc6 = loc("/usr/include/stdlib.h":672:1)
#loc7 = loc("/usr/include/stdlib.h":672:45)
#loc8 = loc("/usr/include/stdlib.h":756:1)
#loc9 = loc("/usr/include/stdlib.h":756:70)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":24:1)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":49:1)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":26:5)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":26:9)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":27:5)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":27:20)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":29:13)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":29:12)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":29:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":31:5)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":31:12)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":32:5)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":48:5)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":33:9)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":33:20)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":34:9)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":47:9)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":35:13)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":35:20)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":36:13)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":36:18)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":39:32)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":39:39)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":39:46)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":39:56)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":39:57)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":39:13)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":40:13)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":40:47)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":40:17)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":40:31)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":40:37)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":40:38)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":40:44)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":40:43)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":41:13)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":44:13)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":41:22)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":41:18)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":41:25)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":41:37)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":42:13)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":43:33)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":43:17)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":43:28)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":43:29)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":41:44)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":41:43)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":45:26)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":45:37)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":45:38)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":45:13)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":46:13)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":46:18)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":56:1)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":81:1)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":58:5)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":58:9)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":59:5)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":59:20)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":61:13)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":61:12)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":61:5)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":63:12)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":63:5)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":64:5)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":80:5)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":65:9)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":65:20)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":66:9)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":79:9)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":67:13)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":67:20)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":68:13)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":68:18)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":71:32)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":71:39)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":71:46)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":71:56)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":71:57)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":71:13)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":72:13)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":72:47)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":72:17)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":72:31)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":72:37)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":72:38)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":72:44)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":72:43)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":73:13)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":76:13)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":73:22)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":73:18)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":73:25)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":73:37)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":74:13)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":75:33)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":75:17)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":75:28)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":75:29)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":73:44)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":73:43)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":77:26)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":77:37)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":77:38)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":77:13)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":78:13)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":78:18)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":83:1)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":86:1)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":85:5)
#loc125 = loc(fused[#loc1, #loc2])
#loc126 = loc(fused[#loc3, #loc4])
#loc127 = loc(fused[#loc6, #loc7])
#loc128 = loc(fused[#loc8, #loc9])
#loc129 = loc(fused[#loc10, #loc11])
#loc130 = loc(fused[#loc12, #loc13])
#loc131 = loc(fused[#loc14, #loc15])
#loc132 = loc(fused[#loc16, #loc17])
#loc133 = loc(fused[#loc18, #loc19])
#loc134 = loc(fused[#loc22, #loc20])
#loc135 = loc(fused[#loc25, #loc26])
#loc136 = loc(fused[#loc27, #loc28])
#loc137 = loc(fused[#loc29, #loc30])
#loc138 = loc(fused[#loc31, #loc32])
#loc139 = loc(fused[#loc33, #loc34])
#loc140 = loc(fused[#loc37, #loc38])
#loc141 = loc(fused[#loc36, #loc38])
#loc142 = loc(fused[#loc35, #loc39])
#loc143 = loc(fused[#loc40, #loc39])
#loc144 = loc(fused[#loc41, #loc42])
#loc145 = loc(fused[#loc43, #loc44])
#loc146 = loc(fused[#loc45, #loc42])
#loc147 = loc(fused[#loc49, #loc50])
#loc148 = loc(fused[#loc52, #loc51])
#loc149 = loc(fused[#loc53, #loc54])
#loc150 = loc(fused[#loc55, #loc50])
#loc151 = loc(fused[#loc57, #loc56])
#loc152 = loc(fused[#loc61, #loc60])
#loc153 = loc(fused[#loc68, #loc69])
#loc154 = loc(fused[#loc70, #loc71])
#loc155 = loc(fused[#loc72, #loc73])
#loc156 = loc(fused[#loc76, #loc74])
#loc157 = loc(fused[#loc78, #loc77])
#loc158 = loc(fused[#loc79, #loc80])
#loc159 = loc(fused[#loc81, #loc82])
#loc160 = loc(fused[#loc83, #loc84])
#loc161 = loc(fused[#loc85, #loc86])
#loc162 = loc(fused[#loc87, #loc88])
#loc163 = loc(fused[#loc91, #loc92])
#loc164 = loc(fused[#loc90, #loc92])
#loc165 = loc(fused[#loc89, #loc93])
#loc166 = loc(fused[#loc94, #loc93])
#loc167 = loc(fused[#loc95, #loc96])
#loc168 = loc(fused[#loc97, #loc98])
#loc169 = loc(fused[#loc99, #loc96])
#loc170 = loc(fused[#loc103, #loc104])
#loc171 = loc(fused[#loc106, #loc105])
#loc172 = loc(fused[#loc107, #loc108])
#loc173 = loc(fused[#loc109, #loc104])
#loc174 = loc(fused[#loc111, #loc110])
#loc175 = loc(fused[#loc115, #loc114])
#loc176 = loc(fused[#loc122, #loc123])
