!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":24:25)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":24:32)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":132:10)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":132:14)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":132:20)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":132:32)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":88:29)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":88:36)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":58:29)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":58:36)
#loc279 = loc(fused[#loc7, #loc8])
#loc315 = loc(fused[#loc106, #loc107])
#loc316 = loc(fused[#loc108, #loc109])
#loc321 = loc(fused[#loc126, #loc127])
#loc348 = loc(fused[#loc203, #loc204])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc276)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc277)
  cir.func internal private @badSource(%arg0: !cir.ptr<!void> loc(fused[#loc7, #loc8])) -> !cir.ptr<!void> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc280)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc279)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["__retval"] {alignment = 8 : i64} loc(#loc6)
    cir.store %arg0, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    cir.br ^bb1 loc(#loc281)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc14)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc15)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc15)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc282)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc283)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc14)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc284)
    cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc280)
    cir.br ^bb2 loc(#loc285)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc21)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc21)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc286)
    cir.brcond %13 ^bb3, ^bb4 loc(#loc287)
  ^bb3:  // pred: ^bb2
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc23)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc25)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc23)
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc19)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
    %18 = cir.const #cir.int<65> : !s32i loc(#loc27)
    %19 = cir.const #cir.int<50> : !s32i loc(#loc28)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc28)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc28)
    %23 = cir.call @wmemset(%17, %18, %22) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc30)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc31)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
    %26 = cir.const #cir.int<50> : !s32i loc(#loc33)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc33)
    %29 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc35)
    cir.store %24, %29 : !s32i, !cir.ptr<!s32i> loc(#loc288)
    %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc36)
    cir.store %31, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc289)
    cir.br ^bb6 loc(#loc13)
  ^bb6:  // pred: ^bb5
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc38)
    cir.store %32, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc290)
    %33 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc290)
    cir.return %33 : !cir.ptr<!void> loc(#loc290)
  } loc(#loc278)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc291)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc292)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc293)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc294)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc295)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc296)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc298)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc299)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc300)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc60)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc301)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc62)
    %5 = cir.call @badSource(%4) : (!cir.ptr<!void>) -> !cir.ptr<!void> loc(#loc63)
    cir.store %5, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc302)
    cir.br ^bb1 loc(#loc303)
  ^bb1:  // pred: ^bb0
    %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc68)
    %7 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc69)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc69)
    %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc68)
    cir.store %9, %0 : !u64i, !cir.ptr<!u64i> loc(#loc298)
    %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc70)
    %11 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc71)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc72)
    %14 = cir.binop(add, %11, %13) : !u64i loc(#loc304)
    %15 = cir.const #cir.int<4> : !u64i loc(#loc305)
    %16 = cir.call @calloc(%14, %15) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc70)
    cir.store %16, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc299)
    cir.br ^bb2 loc(#loc306)
  ^bb2:  // pred: ^bb1
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc77)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc78)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!void>, !cir.bool loc(#loc307)
    cir.brcond %19 ^bb3, ^bb4 loc(#loc308)
  ^bb3:  // pred: ^bb2
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc80)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc82)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc80)
    cir.br ^bb4 loc(#loc76)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc76)
  ^bb5:  // pred: ^bb4
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc83)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc83)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc84)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc84)
    %27 = cir.call @wcscpy(%24, %26) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc85)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc86)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc86)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc88)
    cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc89)
    cir.br ^bb6 loc(#loc67)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc53)
  } loc(#loc297)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc310)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc92)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc311)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc94)
    cir.return loc(#loc91)
  } loc(#loc309)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc312)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc313)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc102)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc103)
  cir.func @main(%arg0: !s32i loc(fused[#loc106, #loc107]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc108, #loc109])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc315)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc316)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc105)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc110)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc111)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc112)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc112)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc113)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc100)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc100)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_42_good : !cir.ptr<!cir.func<!void ()>> loc(#loc317)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_42_good() : () -> () loc(#loc115)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc101)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc102)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc102)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc118)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_42_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc318)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_42_bad() : () -> () loc(#loc119)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc103)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc122)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc319)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc319)
    cir.return %17 : !s32i loc(#loc319)
  } loc(#loc314)
  cir.func internal private @goodB2GSource(%arg0: !cir.ptr<!void> loc(fused[#loc126, #loc127])) -> !cir.ptr<!void> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc322)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc321)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["__retval"] {alignment = 8 : i64} loc(#loc125)
    cir.store %arg0, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc130)
    cir.br ^bb1 loc(#loc323)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc133)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc134)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc134)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc324)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc325)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc133)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc326)
    cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc322)
    cir.br ^bb2 loc(#loc327)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc139)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc140)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc140)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc328)
    cir.brcond %13 ^bb3, ^bb4 loc(#loc329)
  ^bb3:  // pred: ^bb2
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc142)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc143)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc144)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc142)
    cir.br ^bb4 loc(#loc138)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc138)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc145)
    %18 = cir.const #cir.int<65> : !s32i loc(#loc146)
    %19 = cir.const #cir.int<50> : !s32i loc(#loc147)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc147)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc147)
    %23 = cir.call @wmemset(%17, %18, %22) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc149)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc150)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc151)
    %26 = cir.const #cir.int<50> : !s32i loc(#loc152)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc153)
    %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc152)
    %29 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc154)
    cir.store %24, %29 : !s32i, !cir.ptr<!s32i> loc(#loc330)
    %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc155)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc155)
    cir.store %31, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc331)
    cir.br ^bb6 loc(#loc132)
  ^bb6:  // pred: ^bb5
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc157)
    cir.store %32, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc332)
    %33 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc332)
    cir.return %33 : !cir.ptr<!void> loc(#loc332)
  } loc(#loc320)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc333)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc334)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc336)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc337)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc338)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc171)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc339)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc173)
    %5 = cir.call @goodB2GSource(%4) : (!cir.ptr<!void>) -> !cir.ptr<!void> loc(#loc174)
    cir.store %5, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc340)
    cir.br ^bb1 loc(#loc341)
  ^bb1:  // pred: ^bb0
    %6 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc179)
    %7 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc180)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc180)
    %9 = cir.call @wcslen(%8) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc179)
    cir.store %9, %0 : !u64i, !cir.ptr<!u64i> loc(#loc336)
    %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc181)
    %11 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc182)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc183)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc183)
    %14 = cir.binop(add, %11, %13) : !u64i loc(#loc342)
    %15 = cir.const #cir.int<4> : !u64i loc(#loc343)
    %16 = cir.call @calloc(%14, %15) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc181)
    cir.store %16, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc337)
    cir.br ^bb2 loc(#loc344)
  ^bb2:  // pred: ^bb1
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc188)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc189)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!void>, !cir.bool loc(#loc345)
    cir.brcond %19 ^bb3, ^bb4 loc(#loc346)
  ^bb3:  // pred: ^bb2
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc191)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc192)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc193)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc191)
    cir.br ^bb4 loc(#loc187)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc187)
  ^bb5:  // pred: ^bb4
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc194)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc194)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc195)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc195)
    %27 = cir.call @wcscpy(%24, %26) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc196)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc197)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc197)
    cir.call @printWLine(%29) : (!cir.ptr<!s32i>) -> () loc(#loc198)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc199)
    cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc200)
    cir.br ^bb6 loc(#loc178)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc164)
  } loc(#loc335)
  cir.func internal private @goodG2BSource(%arg0: !cir.ptr<!void> loc(fused[#loc203, #loc204])) -> !cir.ptr<!void> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc349)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc348)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["__retval"] {alignment = 8 : i64} loc(#loc202)
    cir.store %arg0, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc207)
    cir.br ^bb1 loc(#loc350)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc210)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc211)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc211)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc351)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc352)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc210)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc353)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc349)
    cir.br ^bb2 loc(#loc354)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc216)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc217)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc217)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc355)
    cir.brcond %13 ^bb3, ^bb4 loc(#loc356)
  ^bb3:  // pred: ^bb2
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc219)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc220)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc221)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc219)
    cir.br ^bb4 loc(#loc215)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc215)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc222)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc222)
    %19 = cir.const #cir.int<65> : !s32i loc(#loc223)
    %20 = cir.const #cir.int<50> : !s32i loc(#loc224)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc225)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc224)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc224)
    cir.libc.memset %23 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc357)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc228)
    %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc228)
    %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc229)
    %27 = cir.const #cir.int<50> : !s32i loc(#loc230)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc231)
    %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc230)
    %30 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc232)
    cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc358)
    %31 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc233)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc233)
    cir.store %32, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc359)
    cir.br ^bb6 loc(#loc209)
  ^bb6:  // pred: ^bb5
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc235)
    cir.store %33, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc360)
    %34 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc360)
    cir.return %34 : !cir.ptr<!void> loc(#loc360)
  } loc(#loc347)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc361)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc363)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc364)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc365)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc247)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc366)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc249)
    %5 = cir.call @goodG2BSource(%4) : (!cir.ptr<!void>) -> !cir.ptr<!void> loc(#loc250)
    cir.store %5, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc367)
    cir.br ^bb1 loc(#loc368)
  ^bb1:  // pred: ^bb0
    %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc255)
    %7 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc256)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc256)
    %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc255)
    cir.store %9, %0 : !u64i, !cir.ptr<!u64i> loc(#loc363)
    %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc257)
    %11 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc258)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc259)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc259)
    %14 = cir.binop(add, %11, %13) : !u64i loc(#loc369)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc260)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc260)
    %17 = cir.call @calloc(%14, %16) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc257)
    cir.store %17, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc364)
    cir.br ^bb2 loc(#loc370)
  ^bb2:  // pred: ^bb1
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc263)
    %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc264)
    %20 = cir.cmp(eq, %18, %19) : !cir.ptr<!void>, !cir.bool loc(#loc371)
    cir.brcond %20 ^bb3, ^bb4 loc(#loc372)
  ^bb3:  // pred: ^bb2
    %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc266)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc267)
    %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc268)
    cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc266)
    cir.br ^bb4 loc(#loc262)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc262)
  ^bb5:  // pred: ^bb4
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc269)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc269)
    %26 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc270)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc270)
    %28 = cir.call @strcpy(%25, %27) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc271)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc272)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc272)
    cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc273)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc274)
    cir.call @free(%31) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc275)
    cir.br ^bb6 loc(#loc254)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc240)
  } loc(#loc362)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/wchar.h":296:1)
#loc4 = loc("/usr/include/wchar.h":296:65)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":24:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":35:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":27:9)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":27:71)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":25:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":26:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":33:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":27:46)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":27:53)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":27:56)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":27:70)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":28:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":28:46)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":28:13)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":28:30)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":28:36)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":28:37)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":28:43)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":28:42)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":29:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":29:32)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":29:38)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":29:41)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":29:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":30:31)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":30:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":30:23)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":30:26)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":30:27)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":32:24)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":32:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":34:12)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":34:5)
#loc40 = loc("/usr/include/string.h":407:1)
#loc41 = loc("/usr/include/string.h":408:33)
#loc42 = loc("/usr/include/stdlib.h":675:1)
#loc43 = loc("/usr/include/stdlib.h":676:14)
#loc44 = loc("/usr/include/stdlib.h":756:1)
#loc45 = loc("/usr/include/stdlib.h":756:70)
#loc46 = loc("/usr/include/wchar.h":98:1)
#loc47 = loc("/usr/include/wchar.h":100:14)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("/usr/include/stdlib.h":687:1)
#loc51 = loc("/usr/include/stdlib.h":687:32)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":37:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":51:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":44:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":44:45)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":45:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":45:64)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":39:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":39:12)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":40:12)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":40:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":41:22)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":41:12)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":41:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":41:26)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":42:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":50:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":44:26)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":44:41)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":45:31)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":45:38)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":45:46)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":45:49)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":45:63)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":46:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":46:37)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":46:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":46:21)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":46:27)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":46:28)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":46:34)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":46:33)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":47:22)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":47:28)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":47:15)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":48:27)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":48:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":49:14)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":49:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":117:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":121:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":119:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":119:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":120:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":120:13)
#loc96 = loc("/usr/include/stdlib.h":575:1)
#loc97 = loc("/usr/include/stdlib.h":575:41)
#loc98 = loc("/usr/include/time.h":76:1)
#loc99 = loc("/usr/include/time.h":76:38)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":137:15)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":139:15)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":142:15)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":144:15)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":132:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":147:1)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":133:1)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":135:27)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":135:22)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":135:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":137:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":138:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":138:55)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":139:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":142:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":143:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":143:54)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":144:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":146:12)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":146:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":88:1)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":99:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":91:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":91:71)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":89:1)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":90:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":97:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":91:46)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":91:53)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":91:56)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":91:70)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":92:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":92:46)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":92:13)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":92:30)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":92:36)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":92:37)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":92:43)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":92:42)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":93:17)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":93:32)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":93:38)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":93:41)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":93:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":94:31)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":94:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":94:23)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":94:26)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":94:27)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":96:24)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":96:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":98:12)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":98:5)
#loc159 = loc("/usr/include/wchar.h":247:1)
#loc160 = loc("/usr/include/wchar.h":247:51)
#loc161 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc162 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":101:1)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":115:1)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":108:9)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":108:48)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":109:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":109:64)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":103:5)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":103:12)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":104:12)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":104:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":105:26)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":105:12)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":105:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":105:30)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":106:5)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":114:5)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":108:26)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":108:44)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":109:31)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":109:38)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":109:46)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":109:49)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":109:63)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":110:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":110:37)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":110:13)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":110:21)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":110:27)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":110:28)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":110:34)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":110:33)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":111:22)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":111:28)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":111:15)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":112:31)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":112:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":113:14)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":113:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":58:1)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":69:1)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":61:9)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":61:63)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":59:1)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":60:5)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":67:5)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":61:41)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":61:48)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":61:51)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":61:62)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":62:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":62:47)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":62:13)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":62:31)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":62:37)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":62:38)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":62:44)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":62:43)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":63:16)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":63:32)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":63:37)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":63:40)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":63:9)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":63:41)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":64:32)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":64:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":64:24)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":64:27)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":64:28)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":66:24)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":66:9)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":68:12)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":68:5)
#loc237 = loc("/usr/include/string.h":141:1)
#loc238 = loc("/usr/include/string.h":142:14)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":71:1)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":85:1)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":78:9)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":78:45)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":79:9)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":79:50)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":73:5)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":73:12)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":74:12)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":74:5)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":75:26)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":75:12)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":75:5)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":75:30)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":76:5)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":84:5)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":78:26)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":78:41)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":79:31)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":79:38)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":79:46)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":79:49)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":80:9)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":80:37)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":80:13)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":80:21)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":80:27)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":80:28)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":80:34)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":80:33)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":81:22)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":81:28)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":81:15)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":82:27)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":82:9)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":83:14)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c":83:9)
#loc276 = loc(fused[#loc1, #loc2])
#loc277 = loc(fused[#loc3, #loc4])
#loc278 = loc(fused[#loc5, #loc6])
#loc280 = loc(fused[#loc9, #loc10])
#loc281 = loc(fused[#loc12, #loc13])
#loc282 = loc(fused[#loc16, #loc17])
#loc283 = loc(fused[#loc15, #loc17])
#loc284 = loc(fused[#loc14, #loc10])
#loc285 = loc(fused[#loc18, #loc19])
#loc286 = loc(fused[#loc20, #loc21])
#loc287 = loc(fused[#loc22, #loc19])
#loc288 = loc(fused[#loc32, #loc31])
#loc289 = loc(fused[#loc37, #loc36])
#loc290 = loc(fused[#loc39, #loc38])
#loc291 = loc(fused[#loc40, #loc41])
#loc292 = loc(fused[#loc42, #loc43])
#loc293 = loc(fused[#loc44, #loc45])
#loc294 = loc(fused[#loc46, #loc47])
#loc295 = loc(fused[#loc48, #loc49])
#loc296 = loc(fused[#loc50, #loc51])
#loc297 = loc(fused[#loc52, #loc53])
#loc298 = loc(fused[#loc54, #loc55])
#loc299 = loc(fused[#loc56, #loc57])
#loc300 = loc(fused[#loc58, #loc59])
#loc301 = loc(fused[#loc61, #loc60])
#loc302 = loc(fused[#loc64, #loc65])
#loc303 = loc(fused[#loc66, #loc67])
#loc304 = loc(fused[#loc71, #loc72])
#loc305 = loc(fused[#loc73, #loc74])
#loc306 = loc(fused[#loc75, #loc76])
#loc307 = loc(fused[#loc77, #loc78])
#loc308 = loc(fused[#loc79, #loc76])
#loc309 = loc(fused[#loc90, #loc91])
#loc310 = loc(fused[#loc92, #loc93])
#loc311 = loc(fused[#loc94, #loc95])
#loc312 = loc(fused[#loc96, #loc97])
#loc313 = loc(fused[#loc98, #loc99])
#loc314 = loc(fused[#loc104, #loc105])
#loc317 = loc(fused[#loc115, #loc116])
#loc318 = loc(fused[#loc119, #loc120])
#loc319 = loc(fused[#loc123, #loc122])
#loc320 = loc(fused[#loc124, #loc125])
#loc322 = loc(fused[#loc128, #loc129])
#loc323 = loc(fused[#loc131, #loc132])
#loc324 = loc(fused[#loc135, #loc136])
#loc325 = loc(fused[#loc134, #loc136])
#loc326 = loc(fused[#loc133, #loc129])
#loc327 = loc(fused[#loc137, #loc138])
#loc328 = loc(fused[#loc139, #loc140])
#loc329 = loc(fused[#loc141, #loc138])
#loc330 = loc(fused[#loc151, #loc150])
#loc331 = loc(fused[#loc156, #loc155])
#loc332 = loc(fused[#loc158, #loc157])
#loc333 = loc(fused[#loc159, #loc160])
#loc334 = loc(fused[#loc161, #loc162])
#loc335 = loc(fused[#loc163, #loc164])
#loc336 = loc(fused[#loc165, #loc166])
#loc337 = loc(fused[#loc167, #loc168])
#loc338 = loc(fused[#loc169, #loc170])
#loc339 = loc(fused[#loc172, #loc171])
#loc340 = loc(fused[#loc175, #loc176])
#loc341 = loc(fused[#loc177, #loc178])
#loc342 = loc(fused[#loc182, #loc183])
#loc343 = loc(fused[#loc184, #loc185])
#loc344 = loc(fused[#loc186, #loc187])
#loc345 = loc(fused[#loc188, #loc189])
#loc346 = loc(fused[#loc190, #loc187])
#loc347 = loc(fused[#loc201, #loc202])
#loc349 = loc(fused[#loc205, #loc206])
#loc350 = loc(fused[#loc208, #loc209])
#loc351 = loc(fused[#loc212, #loc213])
#loc352 = loc(fused[#loc211, #loc213])
#loc353 = loc(fused[#loc210, #loc206])
#loc354 = loc(fused[#loc214, #loc215])
#loc355 = loc(fused[#loc216, #loc217])
#loc356 = loc(fused[#loc218, #loc215])
#loc357 = loc(fused[#loc226, #loc227])
#loc358 = loc(fused[#loc229, #loc228])
#loc359 = loc(fused[#loc234, #loc233])
#loc360 = loc(fused[#loc236, #loc235])
#loc361 = loc(fused[#loc237, #loc238])
#loc362 = loc(fused[#loc239, #loc240])
#loc363 = loc(fused[#loc241, #loc242])
#loc364 = loc(fused[#loc243, #loc244])
#loc365 = loc(fused[#loc245, #loc246])
#loc366 = loc(fused[#loc248, #loc247])
#loc367 = loc(fused[#loc251, #loc252])
#loc368 = loc(fused[#loc253, #loc254])
#loc369 = loc(fused[#loc258, #loc259])
#loc370 = loc(fused[#loc261, #loc262])
#loc371 = loc(fused[#loc263, #loc264])
#loc372 = loc(fused[#loc265, #loc262])
