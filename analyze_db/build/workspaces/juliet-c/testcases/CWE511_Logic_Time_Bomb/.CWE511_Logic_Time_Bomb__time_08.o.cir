!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__time_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc82)
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE511_Logic_Time_Bomb__time_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["currentTime"] {alignment = 8 : i64} loc(#loc85)
    cir.br ^bb1 loc(#loc86)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc87)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc12)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc12)
    cir.brcond %3 ^bb2, ^bb9 loc(#loc88)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc89)
  ^bb3:  // pred: ^bb2
    %4 = cir.call @time(%0) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc17)
    cir.br ^bb4 loc(#loc90)
  ^bb4:  // pred: ^bb3
    %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc20)
    %6 = cir.const #cir.int<1199163600> : !s32i loc(#loc21)
    %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc21)
    %8 = cir.cmp(gt, %5, %7) : !s64i, !cir.bool loc(#loc91)
    cir.brcond %8 ^bb5, ^bb6 loc(#loc92)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc5)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc5)
    %11 = cir.call @unlink(%10) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc23)
    cir.br ^bb6 loc(#loc19)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc19)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc11)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc11)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc7)
  } loc(#loc84)
  cir.func no_proto @CWE511_Logic_Time_Bomb__time_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc94)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc95)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc93)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc31)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc32)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    cir.return %2 : !s32i loc(#loc97)
  } loc(#loc96)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc37)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["currentTime"] {alignment = 8 : i64} loc(#loc100)
    cir.br ^bb1 loc(#loc101)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc102)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc44)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc44)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc103)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc36)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    cir.br ^bb10 loc(#loc47)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc104)
  ^bb4:  // pred: ^bb3
    %6 = cir.call @time(%0) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc52)
    cir.br ^bb5 loc(#loc105)
  ^bb5:  // pred: ^bb4
    %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc55)
    %8 = cir.const #cir.int<1199163600> : !s32i loc(#loc56)
    %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc56)
    %10 = cir.cmp(gt, %7, %9) : !s64i, !cir.bool loc(#loc106)
    cir.brcond %10 ^bb6, ^bb7 loc(#loc107)
  ^bb6:  // pred: ^bb5
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    cir.br ^bb7 loc(#loc54)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc54)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc51)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc43)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc43)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc39)
  } loc(#loc99)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc60)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc61)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    cir.return %2 : !s32i loc(#loc109)
  } loc(#loc108)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["currentTime"] {alignment = 8 : i64} loc(#loc111)
    cir.br ^bb1 loc(#loc112)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc113)
    %2 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc69)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc69)
    cir.brcond %3 ^bb2, ^bb9 loc(#loc114)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc115)
  ^bb3:  // pred: ^bb2
    %4 = cir.call @time(%0) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc74)
    cir.br ^bb4 loc(#loc116)
  ^bb4:  // pred: ^bb3
    %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc77)
    %6 = cir.const #cir.int<1199163600> : !s32i loc(#loc78)
    %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc78)
    %8 = cir.cmp(gt, %5, %7) : !s64i, !cir.bool loc(#loc117)
    cir.brcond %8 ^bb5, ^bb6 loc(#loc118)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc80)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc80)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    cir.br ^bb6 loc(#loc76)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc76)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc73)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc68)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc68)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc64)
  } loc(#loc110)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__time_08.c":0:0)
#loc1 = loc("/usr/include/time.h":76:1)
#loc2 = loc("/usr/include/time.h":76:38)
#loc3 = loc("/usr/include/unistd.h":858:1)
#loc4 = loc("/usr/include/unistd.h":858:48)
#loc5 = loc("CWE511_Logic_Time_Bomb__time_08.c":54:24)
#loc6 = loc("CWE511_Logic_Time_Bomb__time_08.c":44:1)
#loc7 = loc("CWE511_Logic_Time_Bomb__time_08.c":58:1)
#loc8 = loc("CWE511_Logic_Time_Bomb__time_08.c":49:13)
#loc9 = loc("CWE511_Logic_Time_Bomb__time_08.c":49:20)
#loc10 = loc("CWE511_Logic_Time_Bomb__time_08.c":46:5)
#loc11 = loc("CWE511_Logic_Time_Bomb__time_08.c":57:5)
#loc12 = loc("CWE511_Logic_Time_Bomb__time_08.c":46:8)
#loc13 = loc("CWE511_Logic_Time_Bomb__time_08.c":46:26)
#loc14 = loc("CWE511_Logic_Time_Bomb__time_08.c":47:5)
#loc15 = loc("CWE511_Logic_Time_Bomb__time_08.c":48:9)
#loc16 = loc("CWE511_Logic_Time_Bomb__time_08.c":56:9)
#loc17 = loc("CWE511_Logic_Time_Bomb__time_08.c":51:13)
#loc18 = loc("CWE511_Logic_Time_Bomb__time_08.c":52:13)
#loc19 = loc("CWE511_Logic_Time_Bomb__time_08.c":55:13)
#loc20 = loc("CWE511_Logic_Time_Bomb__time_08.c":52:17)
#loc21 = loc("CWE511_Logic_Time_Bomb__time_08.c":52:31)
#loc22 = loc("CWE511_Logic_Time_Bomb__time_08.c":53:13)
#loc23 = loc("CWE511_Logic_Time_Bomb__time_08.c":54:17)
#loc24 = loc("CWE511_Logic_Time_Bomb__time_08.c":103:1)
#loc25 = loc("CWE511_Logic_Time_Bomb__time_08.c":107:1)
#loc26 = loc("CWE511_Logic_Time_Bomb__time_08.c":105:5)
#loc27 = loc("CWE511_Logic_Time_Bomb__time_08.c":105:11)
#loc28 = loc("CWE511_Logic_Time_Bomb__time_08.c":106:5)
#loc29 = loc("CWE511_Logic_Time_Bomb__time_08.c":106:11)
#loc30 = loc("CWE511_Logic_Time_Bomb__time_08.c":32:1)
#loc31 = loc("CWE511_Logic_Time_Bomb__time_08.c":35:1)
#loc32 = loc("CWE511_Logic_Time_Bomb__time_08.c":34:12)
#loc33 = loc("CWE511_Logic_Time_Bomb__time_08.c":34:5)
#loc34 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE511_Logic_Time_Bomb__time_08.c":70:19)
#loc37 = loc("CWE511_Logic_Time_Bomb__time_08.c":80:27)
#loc38 = loc("CWE511_Logic_Time_Bomb__time_08.c":65:1)
#loc39 = loc("CWE511_Logic_Time_Bomb__time_08.c":84:1)
#loc40 = loc("CWE511_Logic_Time_Bomb__time_08.c":75:13)
#loc41 = loc("CWE511_Logic_Time_Bomb__time_08.c":75:20)
#loc42 = loc("CWE511_Logic_Time_Bomb__time_08.c":67:5)
#loc43 = loc("CWE511_Logic_Time_Bomb__time_08.c":83:5)
#loc44 = loc("CWE511_Logic_Time_Bomb__time_08.c":67:8)
#loc45 = loc("CWE511_Logic_Time_Bomb__time_08.c":67:27)
#loc46 = loc("CWE511_Logic_Time_Bomb__time_08.c":68:5)
#loc47 = loc("CWE511_Logic_Time_Bomb__time_08.c":71:5)
#loc48 = loc("CWE511_Logic_Time_Bomb__time_08.c":73:5)
#loc49 = loc("CWE511_Logic_Time_Bomb__time_08.c":70:9)
#loc50 = loc("CWE511_Logic_Time_Bomb__time_08.c":74:9)
#loc51 = loc("CWE511_Logic_Time_Bomb__time_08.c":82:9)
#loc52 = loc("CWE511_Logic_Time_Bomb__time_08.c":77:13)
#loc53 = loc("CWE511_Logic_Time_Bomb__time_08.c":78:13)
#loc54 = loc("CWE511_Logic_Time_Bomb__time_08.c":81:13)
#loc55 = loc("CWE511_Logic_Time_Bomb__time_08.c":78:17)
#loc56 = loc("CWE511_Logic_Time_Bomb__time_08.c":78:31)
#loc57 = loc("CWE511_Logic_Time_Bomb__time_08.c":79:13)
#loc58 = loc("CWE511_Logic_Time_Bomb__time_08.c":80:17)
#loc59 = loc("CWE511_Logic_Time_Bomb__time_08.c":37:1)
#loc60 = loc("CWE511_Logic_Time_Bomb__time_08.c":40:1)
#loc61 = loc("CWE511_Logic_Time_Bomb__time_08.c":39:12)
#loc62 = loc("CWE511_Logic_Time_Bomb__time_08.c":39:5)
#loc63 = loc("CWE511_Logic_Time_Bomb__time_08.c":87:1)
#loc64 = loc("CWE511_Logic_Time_Bomb__time_08.c":101:1)
#loc65 = loc("CWE511_Logic_Time_Bomb__time_08.c":92:13)
#loc66 = loc("CWE511_Logic_Time_Bomb__time_08.c":92:20)
#loc67 = loc("CWE511_Logic_Time_Bomb__time_08.c":89:5)
#loc68 = loc("CWE511_Logic_Time_Bomb__time_08.c":100:5)
#loc69 = loc("CWE511_Logic_Time_Bomb__time_08.c":89:8)
#loc70 = loc("CWE511_Logic_Time_Bomb__time_08.c":89:26)
#loc71 = loc("CWE511_Logic_Time_Bomb__time_08.c":90:5)
#loc72 = loc("CWE511_Logic_Time_Bomb__time_08.c":91:9)
#loc73 = loc("CWE511_Logic_Time_Bomb__time_08.c":99:9)
#loc74 = loc("CWE511_Logic_Time_Bomb__time_08.c":94:13)
#loc75 = loc("CWE511_Logic_Time_Bomb__time_08.c":95:13)
#loc76 = loc("CWE511_Logic_Time_Bomb__time_08.c":98:13)
#loc77 = loc("CWE511_Logic_Time_Bomb__time_08.c":95:17)
#loc78 = loc("CWE511_Logic_Time_Bomb__time_08.c":95:31)
#loc79 = loc("CWE511_Logic_Time_Bomb__time_08.c":96:13)
#loc80 = loc("CWE511_Logic_Time_Bomb__time_08.c":97:27)
#loc81 = loc("CWE511_Logic_Time_Bomb__time_08.c":97:17)
#loc82 = loc(fused[#loc1, #loc2])
#loc83 = loc(fused[#loc3, #loc4])
#loc84 = loc(fused[#loc6, #loc7])
#loc85 = loc(fused[#loc8, #loc9])
#loc86 = loc(fused[#loc10, #loc11])
#loc87 = loc(fused[#loc12, #loc13])
#loc88 = loc(fused[#loc14, #loc11])
#loc89 = loc(fused[#loc15, #loc16])
#loc90 = loc(fused[#loc18, #loc19])
#loc91 = loc(fused[#loc20, #loc21])
#loc92 = loc(fused[#loc22, #loc19])
#loc93 = loc(fused[#loc24, #loc25])
#loc94 = loc(fused[#loc26, #loc27])
#loc95 = loc(fused[#loc28, #loc29])
#loc96 = loc(fused[#loc30, #loc31])
#loc97 = loc(fused[#loc33, #loc32])
#loc98 = loc(fused[#loc34, #loc35])
#loc99 = loc(fused[#loc38, #loc39])
#loc100 = loc(fused[#loc40, #loc41])
#loc101 = loc(fused[#loc42, #loc43])
#loc102 = loc(fused[#loc44, #loc45])
#loc103 = loc(fused[#loc46, #loc47, #loc48, #loc43])
#loc104 = loc(fused[#loc50, #loc51])
#loc105 = loc(fused[#loc53, #loc54])
#loc106 = loc(fused[#loc55, #loc56])
#loc107 = loc(fused[#loc57, #loc54])
#loc108 = loc(fused[#loc59, #loc60])
#loc109 = loc(fused[#loc62, #loc61])
#loc110 = loc(fused[#loc63, #loc64])
#loc111 = loc(fused[#loc65, #loc66])
#loc112 = loc(fused[#loc67, #loc68])
#loc113 = loc(fused[#loc69, #loc70])
#loc114 = loc(fused[#loc71, #loc68])
#loc115 = loc(fused[#loc72, #loc73])
#loc116 = loc(fused[#loc75, #loc76])
#loc117 = loc(fused[#loc77, #loc78])
#loc118 = loc(fused[#loc79, #loc76])
