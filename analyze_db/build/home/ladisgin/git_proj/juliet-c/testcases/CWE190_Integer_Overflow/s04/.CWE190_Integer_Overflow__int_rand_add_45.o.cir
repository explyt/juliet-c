!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc11 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":42:12)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":95:12)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_add_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc95)
  cir.global "private" internal dsolocal @CWE190_Integer_Overflow__int_rand_add_45_badData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc96)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_add_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc98)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc11)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc11)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc11)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc11)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc11)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc11)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc11)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc11)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc11)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc11)
    cir.br ^bb3(%17 : !u32i) loc(#loc11)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc11)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc11)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc11)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc11)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc11)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc11)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc11)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc11)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc11)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc11)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc11)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc11)
    cir.br ^bb3(%33 : !u32i) loc(#loc11)
  ^bb3(%34: !u32i loc("CWE190_Integer_Overflow__int_rand_add_45.c":42:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc11)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc11)
    cir.store %35, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    %36 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    %37 = cir.get_global @CWE190_Integer_Overflow__int_rand_add_45_badData : !cir.ptr<!s32i> loc(#loc96)
    cir.store %36, %37 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    %38 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc102)
    cir.call %38() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc15)
    cir.return loc(#loc6)
  } loc(#loc97)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_add_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc104)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc19)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc105)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc21)
    cir.return loc(#loc18)
  } loc(#loc103)
  cir.func private @printIntLine(!s32i) loc(#loc106)
  cir.func no_proto internal private @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc108)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc109)
    %2 = cir.get_global @CWE190_Integer_Overflow__int_rand_add_45_badData : !cir.ptr<!s32i> loc(#loc96)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    cir.br ^bb1 loc(#loc110)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc33)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc35)
    cir.br ^bb2 loc(#loc32)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc26)
  } loc(#loc107)
  cir.global "private" internal dsolocal @CWE190_Integer_Overflow__int_rand_add_45_goodG2BData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc111)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc113)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc42)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc44)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    %4 = cir.get_global @CWE190_Integer_Overflow__int_rand_add_45_goodG2BData : !cir.ptr<!s32i> loc(#loc111)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    %5 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc117)
    cir.call %5() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc39)
  } loc(#loc112)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc119)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc120)
    %2 = cir.get_global @CWE190_Integer_Overflow__int_rand_add_45_goodG2BData : !cir.ptr<!s32i> loc(#loc111)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    cir.br ^bb1 loc(#loc121)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc58)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc60)
    cir.br ^bb2 loc(#loc57)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc51)
  } loc(#loc118)
  cir.global "private" internal dsolocal @CWE190_Integer_Overflow__int_rand_add_45_goodB2GData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc122)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc124)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc67)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc69)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc69)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc69)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc69)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc69)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc69)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc69)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc69)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc69)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc69)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc69)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc69)
    cir.br ^bb3(%17 : !u32i) loc(#loc69)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc69)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc69)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc69)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc69)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc69)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc69)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc69)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc69)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc69)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc69)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc69)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc69)
    cir.br ^bb3(%33 : !u32i) loc(#loc69)
  ^bb3(%34: !u32i loc("CWE190_Integer_Overflow__int_rand_add_45.c":95:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc69)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc69)
    cir.store %35, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    %36 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    %37 = cir.get_global @CWE190_Integer_Overflow__int_rand_add_45_goodB2GData : !cir.ptr<!s32i> loc(#loc122)
    cir.store %36, %37 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    %38 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call %38() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc73)
    cir.return loc(#loc64)
  } loc(#loc123)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc129)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc77)
  cir.func no_proto internal private @goodB2GSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc131)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc132)
    %2 = cir.get_global @CWE190_Integer_Overflow__int_rand_add_45_goodB2GData : !cir.ptr<!s32i> loc(#loc122)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    cir.br ^bb1 loc(#loc133)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc87)
    %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc134)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc135)
  ^bb2:  // pred: ^bb1
    %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc91)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc93)
    cir.br ^bb4 loc(#loc89)
  ^bb3:  // pred: ^bb1
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc77)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    cir.br ^bb4 loc(#loc85)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc85)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc79)
  } loc(#loc130)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_add_45.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":20:1)
#loc4 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":20:12)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":36:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":45:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":38:5)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":38:9)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":40:12)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":40:5)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":42:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":43:56)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":43:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":44:5)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":44:13)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":100:1)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":104:1)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":102:5)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":102:13)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":103:5)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":103:13)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":26:1)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":34:1)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":31:9)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":31:29)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":28:5)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":28:16)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":29:5)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":33:5)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":31:22)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":32:22)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":32:9)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":21:1)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":21:12)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":62:1)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":71:1)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":64:5)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":64:9)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":66:12)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":66:5)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":68:12)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":68:5)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":69:60)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":69:5)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":70:5)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":70:17)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":52:1)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":60:1)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":57:9)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":57:29)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":54:5)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":54:16)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":55:5)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":59:5)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":57:22)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":58:22)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":58:9)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":22:1)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":22:12)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":89:1)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":98:1)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":91:5)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":91:9)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":93:12)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":93:5)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":95:5)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":96:60)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":96:5)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":97:5)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":97:17)
#loc75 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc76 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":85:19)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":74:1)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":87:1)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":80:9)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":80:29)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":76:5)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":76:16)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":78:5)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":86:5)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":78:9)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":78:16)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":79:5)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":82:5)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":84:5)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":80:22)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":81:22)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":81:9)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_add_45.c":85:9)
#loc95 = loc(fused[#loc1, #loc2])
#loc96 = loc(fused[#loc3, #loc4])
#loc97 = loc(fused[#loc5, #loc6])
#loc98 = loc(fused[#loc7, #loc8])
#loc99 = loc(fused[#loc10, #loc9])
#loc100 = loc(fused[#loc12, #loc11])
#loc101 = loc(fused[#loc14, #loc13])
#loc102 = loc(fused[#loc15, #loc16])
#loc103 = loc(fused[#loc17, #loc18])
#loc104 = loc(fused[#loc19, #loc20])
#loc105 = loc(fused[#loc21, #loc22])
#loc106 = loc(fused[#loc23, #loc24])
#loc107 = loc(fused[#loc25, #loc26])
#loc108 = loc(fused[#loc27, #loc28])
#loc109 = loc(fused[#loc29, #loc30])
#loc110 = loc(fused[#loc31, #loc32])
#loc111 = loc(fused[#loc36, #loc37])
#loc112 = loc(fused[#loc38, #loc39])
#loc113 = loc(fused[#loc40, #loc41])
#loc114 = loc(fused[#loc43, #loc42])
#loc115 = loc(fused[#loc45, #loc44])
#loc116 = loc(fused[#loc47, #loc46])
#loc117 = loc(fused[#loc48, #loc49])
#loc118 = loc(fused[#loc50, #loc51])
#loc119 = loc(fused[#loc52, #loc53])
#loc120 = loc(fused[#loc54, #loc55])
#loc121 = loc(fused[#loc56, #loc57])
#loc122 = loc(fused[#loc61, #loc62])
#loc123 = loc(fused[#loc63, #loc64])
#loc124 = loc(fused[#loc65, #loc66])
#loc125 = loc(fused[#loc68, #loc67])
#loc126 = loc(fused[#loc70, #loc69])
#loc127 = loc(fused[#loc72, #loc71])
#loc128 = loc(fused[#loc73, #loc74])
#loc129 = loc(fused[#loc75, #loc76])
#loc130 = loc(fused[#loc78, #loc79])
#loc131 = loc(fused[#loc80, #loc81])
#loc132 = loc(fused[#loc82, #loc83])
#loc133 = loc(fused[#loc84, #loc85])
#loc134 = loc(fused[#loc86, #loc87])
#loc135 = loc(fused[#loc88, #loc89, #loc90, #loc85])
