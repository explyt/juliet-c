!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc13 = loc("CWE369_Divide_by_Zero__float_rand_01.c":30:19)
#loc39 = loc("CWE369_Divide_by_Zero__float_rand_01.c":92:10)
#loc40 = loc("CWE369_Divide_by_Zero__float_rand_01.c":92:14)
#loc41 = loc("CWE369_Divide_by_Zero__float_rand_01.c":92:20)
#loc42 = loc("CWE369_Divide_by_Zero__float_rand_01.c":92:32)
#loc82 = loc("CWE369_Divide_by_Zero__float_rand_01.c":64:19)
#loc113 = loc(fused[#loc39, #loc40])
#loc114 = loc(fused[#loc41, #loc42])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc97)
  cir.func private @printIntLine(!s32i) loc(#loc98)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc100)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc101)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc11)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc102)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc13)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc13)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc13)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc13)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc13)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc13)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc13)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc13)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc13)
    cir.br ^bb3(%18 : !u32i) loc(#loc13)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc13)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc13)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc13)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc13)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc13)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc13)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc13)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc13)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc13)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc13)
    cir.br ^bb3(%34 : !u32i) loc(#loc13)
  ^bb3(%35: !u32i loc("CWE369_Divide_by_Zero__float_rand_01.c":30:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc13)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc13)
    %37 = cir.cast(int_to_float, %36 : !s32i), !cir.float loc(#loc13)
    cir.store %37, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc103)
    cir.br ^bb5 loc(#loc104)
  ^bb5:  // pred: ^bb4
    %38 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc17)
    %39 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc18)
    %40 = cir.cast(floating, %39 : !cir.float), !cir.double loc(#loc18)
    %41 = cir.binop(div, %38, %40) : !cir.double loc(#loc105)
    %42 = cir.cast(float_to_int, %41 : !cir.double), !s32i loc(#loc105)
    cir.store %42, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    %43 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    cir.call @printIntLine(%43) : (!s32i) -> () loc(#loc20)
    cir.br ^bb6 loc(#loc16)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc6)
  } loc(#loc99)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc107)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc23)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc108)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc25)
    cir.return loc(#loc22)
  } loc(#loc106)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc109)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc110)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc111)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc33)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc34)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc35)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc36)
  cir.func @main(%arg0: !s32i loc(fused[#loc39, #loc40]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc41, #loc42])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc113)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc114)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc38)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc43)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc43)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc44)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc45)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc45)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc46)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc33)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc47)
    %8 = cir.get_global @CWE369_Divide_by_Zero__float_rand_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc115)
    cir.call @CWE369_Divide_by_Zero__float_rand_01_good() : () -> () loc(#loc48)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc34)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc35)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %13 = cir.get_global @CWE369_Divide_by_Zero__float_rand_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc116)
    cir.call @CWE369_Divide_by_Zero__float_rand_01_bad() : () -> () loc(#loc52)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc36)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc55)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    cir.return %17 : !s32i loc(#loc117)
  } loc(#loc112)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc119)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc120)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc63)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc121)
    %3 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc65)
    cir.store %3, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc122)
    cir.br ^bb1 loc(#loc123)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc69)
    %5 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc70)
    %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc70)
    %7 = cir.binop(div, %4, %6) : !cir.double loc(#loc124)
    %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc124)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc72)
    cir.br ^bb2 loc(#loc68)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc58)
  } loc(#loc118)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc73)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc126)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc127)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc80)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc128)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc82)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc82)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc82)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc82)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc82)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc82)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc82)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc82)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc82)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc82)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc82)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc82)
    cir.br ^bb3(%18 : !u32i) loc(#loc82)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc82)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc82)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc82)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc82)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc82)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc82)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc82)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc82)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc82)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc82)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc82)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc82)
    cir.br ^bb3(%34 : !u32i) loc(#loc82)
  ^bb3(%35: !u32i loc("CWE369_Divide_by_Zero__float_rand_01.c":64:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc82)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc82)
    %37 = cir.cast(int_to_float, %36 : !s32i), !cir.float loc(#loc82)
    cir.store %37, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc129)
    cir.br ^bb5 loc(#loc130)
  ^bb5:  // pred: ^bb4
    %38 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc86)
    %39 = cir.cast(floating, %38 : !cir.float), !cir.double loc(#loc86)
    %40 = cir.fabs %39 : !cir.double loc(#loc86)
    %41 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc87)
    %42 = cir.cmp(gt, %40, %41) : !cir.double, !cir.bool loc(#loc131)
    cir.brcond %42 ^bb6, ^bb7 loc(#loc132)
  ^bb6:  // pred: ^bb5
    %43 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc92)
    %44 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc93)
    %45 = cir.cast(floating, %44 : !cir.float), !cir.double loc(#loc93)
    %46 = cir.binop(div, %43, %45) : !cir.double loc(#loc133)
    %47 = cir.cast(float_to_int, %46 : !cir.double), !s32i loc(#loc133)
    cir.store %47, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    %48 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    cir.call @printIntLine(%48) : (!s32i) -> () loc(#loc95)
    cir.br ^bb8 loc(#loc90)
  ^bb7:  // pred: ^bb5
    %49 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc73)
    %50 = cir.cast(array_to_ptrdecay, %49 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%50) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    cir.br ^bb8 loc(#loc85)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc85)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc75)
  } loc(#loc125)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__float_rand_01.c":24:1)
#loc6 = loc("CWE369_Divide_by_Zero__float_rand_01.c":36:1)
#loc7 = loc("CWE369_Divide_by_Zero__float_rand_01.c":33:9)
#loc8 = loc("CWE369_Divide_by_Zero__float_rand_01.c":33:40)
#loc9 = loc("CWE369_Divide_by_Zero__float_rand_01.c":26:5)
#loc10 = loc("CWE369_Divide_by_Zero__float_rand_01.c":26:11)
#loc11 = loc("CWE369_Divide_by_Zero__float_rand_01.c":28:12)
#loc12 = loc("CWE369_Divide_by_Zero__float_rand_01.c":28:5)
#loc14 = loc("CWE369_Divide_by_Zero__float_rand_01.c":30:5)
#loc15 = loc("CWE369_Divide_by_Zero__float_rand_01.c":31:5)
#loc16 = loc("CWE369_Divide_by_Zero__float_rand_01.c":35:5)
#loc17 = loc("CWE369_Divide_by_Zero__float_rand_01.c":33:28)
#loc18 = loc("CWE369_Divide_by_Zero__float_rand_01.c":33:36)
#loc19 = loc("CWE369_Divide_by_Zero__float_rand_01.c":34:22)
#loc20 = loc("CWE369_Divide_by_Zero__float_rand_01.c":34:9)
#loc21 = loc("CWE369_Divide_by_Zero__float_rand_01.c":77:1)
#loc22 = loc("CWE369_Divide_by_Zero__float_rand_01.c":81:1)
#loc23 = loc("CWE369_Divide_by_Zero__float_rand_01.c":79:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_rand_01.c":79:13)
#loc25 = loc("CWE369_Divide_by_Zero__float_rand_01.c":80:5)
#loc26 = loc("CWE369_Divide_by_Zero__float_rand_01.c":80:13)
#loc27 = loc("/usr/include/stdlib.h":575:1)
#loc28 = loc("/usr/include/stdlib.h":575:41)
#loc29 = loc("/usr/include/time.h":76:1)
#loc30 = loc("/usr/include/time.h":76:38)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc33 = loc("CWE369_Divide_by_Zero__float_rand_01.c":97:15)
#loc34 = loc("CWE369_Divide_by_Zero__float_rand_01.c":99:15)
#loc35 = loc("CWE369_Divide_by_Zero__float_rand_01.c":102:15)
#loc36 = loc("CWE369_Divide_by_Zero__float_rand_01.c":104:15)
#loc37 = loc("CWE369_Divide_by_Zero__float_rand_01.c":92:1)
#loc38 = loc("CWE369_Divide_by_Zero__float_rand_01.c":107:1)
#loc43 = loc("CWE369_Divide_by_Zero__float_rand_01.c":93:1)
#loc44 = loc("CWE369_Divide_by_Zero__float_rand_01.c":95:27)
#loc45 = loc("CWE369_Divide_by_Zero__float_rand_01.c":95:22)
#loc46 = loc("CWE369_Divide_by_Zero__float_rand_01.c":95:5)
#loc47 = loc("CWE369_Divide_by_Zero__float_rand_01.c":97:5)
#loc48 = loc("CWE369_Divide_by_Zero__float_rand_01.c":98:5)
#loc49 = loc("CWE369_Divide_by_Zero__float_rand_01.c":98:47)
#loc50 = loc("CWE369_Divide_by_Zero__float_rand_01.c":99:5)
#loc51 = loc("CWE369_Divide_by_Zero__float_rand_01.c":102:5)
#loc52 = loc("CWE369_Divide_by_Zero__float_rand_01.c":103:5)
#loc53 = loc("CWE369_Divide_by_Zero__float_rand_01.c":103:46)
#loc54 = loc("CWE369_Divide_by_Zero__float_rand_01.c":104:5)
#loc55 = loc("CWE369_Divide_by_Zero__float_rand_01.c":106:12)
#loc56 = loc("CWE369_Divide_by_Zero__float_rand_01.c":106:5)
#loc57 = loc("CWE369_Divide_by_Zero__float_rand_01.c":43:1)
#loc58 = loc("CWE369_Divide_by_Zero__float_rand_01.c":55:1)
#loc59 = loc("CWE369_Divide_by_Zero__float_rand_01.c":52:9)
#loc60 = loc("CWE369_Divide_by_Zero__float_rand_01.c":52:40)
#loc61 = loc("CWE369_Divide_by_Zero__float_rand_01.c":45:5)
#loc62 = loc("CWE369_Divide_by_Zero__float_rand_01.c":45:11)
#loc63 = loc("CWE369_Divide_by_Zero__float_rand_01.c":47:12)
#loc64 = loc("CWE369_Divide_by_Zero__float_rand_01.c":47:5)
#loc65 = loc("CWE369_Divide_by_Zero__float_rand_01.c":49:12)
#loc66 = loc("CWE369_Divide_by_Zero__float_rand_01.c":49:5)
#loc67 = loc("CWE369_Divide_by_Zero__float_rand_01.c":50:5)
#loc68 = loc("CWE369_Divide_by_Zero__float_rand_01.c":54:5)
#loc69 = loc("CWE369_Divide_by_Zero__float_rand_01.c":52:28)
#loc70 = loc("CWE369_Divide_by_Zero__float_rand_01.c":52:36)
#loc71 = loc("CWE369_Divide_by_Zero__float_rand_01.c":53:22)
#loc72 = loc("CWE369_Divide_by_Zero__float_rand_01.c":53:9)
#loc73 = loc("CWE369_Divide_by_Zero__float_rand_01.c":73:19)
#loc74 = loc("CWE369_Divide_by_Zero__float_rand_01.c":58:1)
#loc75 = loc("CWE369_Divide_by_Zero__float_rand_01.c":75:1)
#loc76 = loc("CWE369_Divide_by_Zero__float_rand_01.c":68:9)
#loc77 = loc("CWE369_Divide_by_Zero__float_rand_01.c":68:40)
#loc78 = loc("CWE369_Divide_by_Zero__float_rand_01.c":60:5)
#loc79 = loc("CWE369_Divide_by_Zero__float_rand_01.c":60:11)
#loc80 = loc("CWE369_Divide_by_Zero__float_rand_01.c":62:12)
#loc81 = loc("CWE369_Divide_by_Zero__float_rand_01.c":62:5)
#loc83 = loc("CWE369_Divide_by_Zero__float_rand_01.c":64:5)
#loc84 = loc("CWE369_Divide_by_Zero__float_rand_01.c":66:5)
#loc85 = loc("CWE369_Divide_by_Zero__float_rand_01.c":74:5)
#loc86 = loc("CWE369_Divide_by_Zero__float_rand_01.c":66:13)
#loc87 = loc("CWE369_Divide_by_Zero__float_rand_01.c":66:21)
#loc88 = loc("CWE369_Divide_by_Zero__float_rand_01.c":66:8)
#loc89 = loc("CWE369_Divide_by_Zero__float_rand_01.c":67:5)
#loc90 = loc("CWE369_Divide_by_Zero__float_rand_01.c":70:5)
#loc91 = loc("CWE369_Divide_by_Zero__float_rand_01.c":72:5)
#loc92 = loc("CWE369_Divide_by_Zero__float_rand_01.c":68:28)
#loc93 = loc("CWE369_Divide_by_Zero__float_rand_01.c":68:36)
#loc94 = loc("CWE369_Divide_by_Zero__float_rand_01.c":69:22)
#loc95 = loc("CWE369_Divide_by_Zero__float_rand_01.c":69:9)
#loc96 = loc("CWE369_Divide_by_Zero__float_rand_01.c":73:9)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc3, #loc4])
#loc99 = loc(fused[#loc5, #loc6])
#loc100 = loc(fused[#loc7, #loc8])
#loc101 = loc(fused[#loc9, #loc10])
#loc102 = loc(fused[#loc12, #loc11])
#loc103 = loc(fused[#loc14, #loc13])
#loc104 = loc(fused[#loc15, #loc16])
#loc105 = loc(fused[#loc17, #loc18])
#loc106 = loc(fused[#loc21, #loc22])
#loc107 = loc(fused[#loc23, #loc24])
#loc108 = loc(fused[#loc25, #loc26])
#loc109 = loc(fused[#loc27, #loc28])
#loc110 = loc(fused[#loc29, #loc30])
#loc111 = loc(fused[#loc31, #loc32])
#loc112 = loc(fused[#loc37, #loc38])
#loc115 = loc(fused[#loc48, #loc49])
#loc116 = loc(fused[#loc52, #loc53])
#loc117 = loc(fused[#loc56, #loc55])
#loc118 = loc(fused[#loc57, #loc58])
#loc119 = loc(fused[#loc59, #loc60])
#loc120 = loc(fused[#loc61, #loc62])
#loc121 = loc(fused[#loc64, #loc63])
#loc122 = loc(fused[#loc66, #loc65])
#loc123 = loc(fused[#loc67, #loc68])
#loc124 = loc(fused[#loc69, #loc70])
#loc125 = loc(fused[#loc74, #loc75])
#loc126 = loc(fused[#loc76, #loc77])
#loc127 = loc(fused[#loc78, #loc79])
#loc128 = loc(fused[#loc81, #loc80])
#loc129 = loc(fused[#loc83, #loc82])
#loc130 = loc(fused[#loc84, #loc85])
#loc131 = loc(fused[#loc88, #loc87])
#loc132 = loc(fused[#loc89, #loc90, #loc91, #loc85])
#loc133 = loc(fused[#loc92, #loc93])
