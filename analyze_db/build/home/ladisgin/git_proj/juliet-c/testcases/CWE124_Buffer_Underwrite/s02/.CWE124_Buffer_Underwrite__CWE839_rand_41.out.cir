!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc8 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":22:21)
#loc9 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":22:25)
#loc48 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":51:12)
#loc70 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":142:10)
#loc71 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":142:14)
#loc72 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":142:20)
#loc73 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":142:32)
#loc91 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":95:25)
#loc92 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":95:29)
#loc104 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":101:23)
#loc135 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":123:12)
#loc141 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":60:25)
#loc142 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":60:29)
#true = #cir.bool<true> : !cir.bool
#loc189 = loc(fused[#loc8, #loc9])
#loc213 = loc(fused[#loc70, #loc71])
#loc214 = loc(fused[#loc72, #loc73])
#loc219 = loc(fused[#loc91, #loc92])
#loc238 = loc(fused[#loc141, #loc142])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_rand_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc186)
  cir.func private @printIntLine(!s32i) loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc8, #loc9])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc190)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc191)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc189)
    cir.store %arg0, %2 : !s32i, !cir.ptr<!s32i> loc(#loc14)
    cir.br ^bb1 loc(#loc192)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc191)
    cir.store %3, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc191)
    cir.br ^bb2 loc(#loc193)
  ^bb2:  // pred: ^bb1
    %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc20)
    %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc194)
    cir.brcond %6 ^bb3, ^bb12 loc(#loc195)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %9 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc26)
    %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc26)
    cir.store %7, %10 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    cir.br ^bb4 loc(#loc197)
  ^bb4:  // pred: ^bb3
    %11 = cir.const #cir.int<0> : !s32i loc(#loc29)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    cir.br ^bb5 loc(#loc197)
  ^bb5:  // 2 preds: ^bb4, ^bb9
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    %13 = cir.const #cir.int<10> : !s32i loc(#loc32)
    %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc199)
    cir.brcond %14 ^bb6, ^bb10 loc(#loc33)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc200)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    %16 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc36)
    %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc36)
    %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc37)
    cir.br ^bb8 loc(#loc28)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc28)
  ^bb9:  // pred: ^bb8
    %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc39)
    cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.br ^bb5 loc(#loc197)
  ^bb10:  // pred: ^bb5
    cir.br ^bb11 loc(#loc28)
  ^bb11:  // pred: ^bb10
    cir.br ^bb13 loc(#loc22)
  ^bb12:  // pred: ^bb2
    %21 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc40)
    cir.br ^bb13 loc(#loc18)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc18)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc16)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc7)
  } loc(#loc188)
  cir.func no_proto @CWE124_Buffer_Underwrite__CWE839_rand_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc203)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc46)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc48)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc48)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc48)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc48)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc48)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc48)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc48)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc48)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc48)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc48)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc48)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc48)
    cir.br ^bb3(%18 : !u32i) loc(#loc48)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc48)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc48)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc48)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc48)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc48)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc48)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc48)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc48)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc48)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc48)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc48)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc48)
    cir.br ^bb3(%34 : !u32i) loc(#loc48)
  ^bb3(%35: !u32i loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":51:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc48)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc48)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    %37 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    cir.call @badSink(%37) : (!s32i) -> () loc(#loc51)
    cir.return loc(#loc42)
  } loc(#loc202)
  cir.func no_proto @CWE124_Buffer_Underwrite__CWE839_rand_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    cir.return loc(#loc53)
  } loc(#loc206)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc209)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc210)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc211)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc67)
  cir.func @main(%arg0: !s32i loc(fused[#loc70, #loc71]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc72, #loc73])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc214)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc69)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc74)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc74)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc75)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc76)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc76)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc77)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc64)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %8 = cir.get_global @CWE124_Buffer_Underwrite__CWE839_rand_41_good : !cir.ptr<!cir.func<!void ()>> loc(#loc215)
    cir.call @CWE124_Buffer_Underwrite__CWE839_rand_41_good() : () -> () loc(#loc79)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc65)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc66)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %13 = cir.get_global @CWE124_Buffer_Underwrite__CWE839_rand_41_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc216)
    cir.call @CWE124_Buffer_Underwrite__CWE839_rand_41_bad() : () -> () loc(#loc83)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc67)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc86)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc217)
    cir.return %17 : !s32i loc(#loc217)
  } loc(#loc212)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc88)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc91, #loc92])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc220)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc221)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc219)
    cir.store %arg0, %2 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    cir.br ^bb1 loc(#loc222)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc221)
    cir.store %3, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc221)
    cir.br ^bb2 loc(#loc223)
  ^bb2:  // pred: ^bb1
    %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc103)
    %6 = cir.cmp(ge, %4, %5) : !s32i, !cir.bool loc(#loc224)
    cir.brcond %6 ^bb3, ^bb8 loc(#loc104)
  ^bb3:  // pred: ^bb2
    %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    %8 = cir.const #cir.int<10> : !s32i loc(#loc106)
    %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc225)
    cir.brcond %9 ^bb4, ^bb5 loc(#loc104)
  ^bb4:  // pred: ^bb3
    %10 = cir.const #true loc(#loc104)
    cir.br ^bb6(%10 : !cir.bool) loc(#loc104)
  ^bb5:  // pred: ^bb3
    %11 = cir.const #false loc(#loc104)
    cir.br ^bb6(%11 : !cir.bool) loc(#loc104)
  ^bb6(%12: !cir.bool loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":101:23)):  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc104)
  ^bb7:  // pred: ^bb6
    cir.br ^bb9(%12 : !cir.bool) loc(#loc104)
  ^bb8:  // pred: ^bb2
    %13 = cir.const #false loc(#loc104)
    cir.br ^bb9(%13 : !cir.bool) loc(#loc104)
  ^bb9(%14: !cir.bool loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":101:23)):  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc104)
  ^bb10:  // pred: ^bb9
    cir.brcond %14 ^bb11, ^bb20 loc(#loc226)
  ^bb11:  // pred: ^bb10
    %15 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %16 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    %17 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc113)
    %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc113)
    cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc227)
    cir.br ^bb12 loc(#loc228)
  ^bb12:  // pred: ^bb11
    %19 = cir.const #cir.int<0> : !s32i loc(#loc116)
    cir.store %19, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    cir.br ^bb13 loc(#loc228)
  ^bb13:  // 2 preds: ^bb12, ^bb17
    %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    %21 = cir.const #cir.int<10> : !s32i loc(#loc119)
    %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc230)
    cir.brcond %22 ^bb14, ^bb18 loc(#loc120)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc231)
  ^bb15:  // pred: ^bb14
    %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
    %24 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc123)
    %25 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc123)
    %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc123)
    cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc124)
    cir.br ^bb16 loc(#loc115)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc115)
  ^bb17:  // pred: ^bb16
    %27 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc126)
    cir.store %28, %0 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    cir.br ^bb13 loc(#loc228)
  ^bb18:  // pred: ^bb13
    cir.br ^bb19 loc(#loc115)
  ^bb19:  // pred: ^bb18
    cir.br ^bb21 loc(#loc109)
  ^bb20:  // pred: ^bb10
    %29 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc88)
    %30 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc88)
    cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc127)
    cir.br ^bb21 loc(#loc101)
  ^bb21:  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc101)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc99)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc90)
  } loc(#loc218)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc234)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc132)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc133)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc135)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc135)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc135)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc135)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc135)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc135)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc135)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc135)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc135)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc135)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc135)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc135)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc135)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc135)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc135)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc135)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc135)
    cir.br ^bb3(%18 : !u32i) loc(#loc135)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc135)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc135)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc135)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc135)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc135)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc135)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc135)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc135)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc135)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc135)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc135)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc135)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc135)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc135)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc135)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc135)
    cir.br ^bb3(%34 : !u32i) loc(#loc135)
  ^bb3(%35: !u32i loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":123:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc135)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc135)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    %37 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    cir.call @goodB2GSink(%37) : (!s32i) -> () loc(#loc138)
    cir.return loc(#loc129)
  } loc(#loc233)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc141, #loc142])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc239)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc240)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc238)
    cir.store %arg0, %2 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    cir.br ^bb1 loc(#loc241)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc240)
    cir.store %3, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc240)
    cir.br ^bb2 loc(#loc242)
  ^bb2:  // pred: ^bb1
    %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc152)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc153)
    %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc243)
    cir.brcond %6 ^bb3, ^bb12 loc(#loc244)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.int<1> : !s32i loc(#loc157)
    %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    %9 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc159)
    %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc159)
    cir.store %7, %10 : !s32i, !cir.ptr<!s32i> loc(#loc245)
    cir.br ^bb4 loc(#loc246)
  ^bb4:  // pred: ^bb3
    %11 = cir.const #cir.int<0> : !s32i loc(#loc162)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    cir.br ^bb5 loc(#loc246)
  ^bb5:  // 2 preds: ^bb4, ^bb9
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc164)
    %13 = cir.const #cir.int<10> : !s32i loc(#loc165)
    %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc248)
    cir.brcond %14 ^bb6, ^bb10 loc(#loc166)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc249)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc168)
    %16 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc169)
    %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc169)
    %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc169)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc170)
    cir.br ^bb8 loc(#loc161)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc161)
  ^bb9:  // pred: ^bb8
    %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc171)
    %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc172)
    cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc250)
    cir.br ^bb5 loc(#loc246)
  ^bb10:  // pred: ^bb5
    cir.br ^bb11 loc(#loc161)
  ^bb11:  // pred: ^bb10
    cir.br ^bb13 loc(#loc155)
  ^bb12:  // pred: ^bb2
    %21 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc173)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc173)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc174)
    cir.br ^bb13 loc(#loc151)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc151)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc149)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc140)
  } loc(#loc237)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc252)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc179)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc180)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc253)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc182)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc184)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc185)
    cir.return loc(#loc176)
  } loc(#loc251)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_rand_41.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":40:23)
#loc6 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":22:1)
#loc7 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":43:1)
#loc10 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":25:9)
#loc11 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":25:13)
#loc12 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":26:9)
#loc13 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":26:30)
#loc14 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":23:1)
#loc15 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":24:5)
#loc16 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":42:5)
#loc17 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":29:9)
#loc18 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":41:9)
#loc19 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":29:13)
#loc20 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":29:20)
#loc21 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":30:9)
#loc22 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":37:9)
#loc23 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":39:9)
#loc24 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":31:28)
#loc25 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":31:20)
#loc26 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":31:13)
#loc27 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":33:13)
#loc28 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":36:13)
#loc29 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":33:21)
#loc30 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":33:17)
#loc31 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":33:24)
#loc32 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":33:28)
#loc33 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":33:26)
#loc34 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":34:13)
#loc35 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":35:37)
#loc36 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":35:30)
#loc37 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":35:17)
#loc38 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":33:33)
#loc39 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":33:32)
#loc40 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":40:13)
#loc41 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":45:1)
#loc42 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":53:1)
#loc43 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":47:5)
#loc44 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":47:9)
#loc45 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":49:13)
#loc46 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":49:12)
#loc47 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":49:5)
#loc49 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":51:5)
#loc50 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":52:13)
#loc51 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":52:5)
#loc52 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":127:1)
#loc53 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":131:1)
#loc54 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":129:5)
#loc55 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":129:13)
#loc56 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":130:5)
#loc57 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":130:13)
#loc58 = loc("/usr/include/stdlib.h":575:1)
#loc59 = loc("/usr/include/stdlib.h":575:41)
#loc60 = loc("/usr/include/time.h":76:1)
#loc61 = loc("/usr/include/time.h":76:38)
#loc62 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc63 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc64 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":147:15)
#loc65 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":149:15)
#loc66 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":152:15)
#loc67 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":154:15)
#loc68 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":142:1)
#loc69 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":157:1)
#loc74 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":143:1)
#loc75 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":145:27)
#loc76 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":145:22)
#loc77 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":145:5)
#loc78 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":147:5)
#loc79 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":148:5)
#loc80 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":148:51)
#loc81 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":149:5)
#loc82 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":152:5)
#loc83 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":153:5)
#loc84 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":153:50)
#loc85 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":154:5)
#loc86 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":156:12)
#loc87 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":156:5)
#loc88 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":112:23)
#loc89 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":95:1)
#loc90 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":115:1)
#loc93 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":98:9)
#loc94 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":98:13)
#loc95 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":99:9)
#loc96 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":99:30)
#loc97 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":96:1)
#loc98 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":97:5)
#loc99 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":114:5)
#loc100 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":101:9)
#loc101 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":113:9)
#loc102 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":101:13)
#loc103 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":101:21)
#loc105 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":101:26)
#loc106 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":101:34)
#loc107 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":101:36)
#loc108 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":102:9)
#loc109 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":109:9)
#loc110 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":111:9)
#loc111 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":103:28)
#loc112 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":103:20)
#loc113 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":103:13)
#loc114 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":105:13)
#loc115 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":108:13)
#loc116 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":105:21)
#loc117 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":105:17)
#loc118 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":105:24)
#loc119 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":105:28)
#loc120 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":105:26)
#loc121 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":106:13)
#loc122 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":107:37)
#loc123 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":107:30)
#loc124 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":107:17)
#loc125 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":105:33)
#loc126 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":105:32)
#loc127 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":112:13)
#loc128 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":117:1)
#loc129 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":125:1)
#loc130 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":119:5)
#loc131 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":119:9)
#loc132 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":121:13)
#loc133 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":121:12)
#loc134 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":121:5)
#loc136 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":123:5)
#loc137 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":124:17)
#loc138 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":124:5)
#loc139 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":60:1)
#loc140 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":81:1)
#loc143 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":63:9)
#loc144 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":63:13)
#loc145 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":64:9)
#loc146 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":64:30)
#loc147 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":61:1)
#loc148 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":62:5)
#loc149 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":80:5)
#loc150 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":67:9)
#loc151 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":79:9)
#loc152 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":67:13)
#loc153 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":67:20)
#loc154 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":68:9)
#loc155 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":75:9)
#loc156 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":77:9)
#loc157 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":69:28)
#loc158 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":69:20)
#loc159 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":69:13)
#loc160 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":71:13)
#loc161 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":74:13)
#loc162 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":71:21)
#loc163 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":71:17)
#loc164 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":71:24)
#loc165 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":71:28)
#loc166 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":71:26)
#loc167 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":72:13)
#loc168 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":73:37)
#loc169 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":73:30)
#loc170 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":73:17)
#loc171 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":71:33)
#loc172 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":71:32)
#loc173 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":78:23)
#loc174 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":78:13)
#loc175 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":83:1)
#loc176 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":92:1)
#loc177 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":85:5)
#loc178 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":85:9)
#loc179 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":87:13)
#loc180 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":87:12)
#loc181 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":87:5)
#loc182 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":90:12)
#loc183 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":90:5)
#loc184 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":91:17)
#loc185 = loc("CWE124_Buffer_Underwrite__CWE839_rand_41.c":91:5)
#loc186 = loc(fused[#loc1, #loc2])
#loc187 = loc(fused[#loc3, #loc4])
#loc188 = loc(fused[#loc6, #loc7])
#loc190 = loc(fused[#loc10, #loc11])
#loc191 = loc(fused[#loc12, #loc13])
#loc192 = loc(fused[#loc15, #loc16])
#loc193 = loc(fused[#loc17, #loc18])
#loc194 = loc(fused[#loc19, #loc20])
#loc195 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc196 = loc(fused[#loc26, #loc24])
#loc197 = loc(fused[#loc27, #loc28])
#loc198 = loc(fused[#loc30, #loc29])
#loc199 = loc(fused[#loc31, #loc32])
#loc200 = loc(fused[#loc34, #loc28])
#loc201 = loc(fused[#loc39, #loc38])
#loc202 = loc(fused[#loc41, #loc42])
#loc203 = loc(fused[#loc43, #loc44])
#loc204 = loc(fused[#loc47, #loc45])
#loc205 = loc(fused[#loc49, #loc48])
#loc206 = loc(fused[#loc52, #loc53])
#loc207 = loc(fused[#loc54, #loc55])
#loc208 = loc(fused[#loc56, #loc57])
#loc209 = loc(fused[#loc58, #loc59])
#loc210 = loc(fused[#loc60, #loc61])
#loc211 = loc(fused[#loc62, #loc63])
#loc212 = loc(fused[#loc68, #loc69])
#loc215 = loc(fused[#loc79, #loc80])
#loc216 = loc(fused[#loc83, #loc84])
#loc217 = loc(fused[#loc87, #loc86])
#loc218 = loc(fused[#loc89, #loc90])
#loc220 = loc(fused[#loc93, #loc94])
#loc221 = loc(fused[#loc95, #loc96])
#loc222 = loc(fused[#loc98, #loc99])
#loc223 = loc(fused[#loc100, #loc101])
#loc224 = loc(fused[#loc102, #loc103])
#loc225 = loc(fused[#loc105, #loc107])
#loc226 = loc(fused[#loc108, #loc109, #loc110, #loc101])
#loc227 = loc(fused[#loc113, #loc111])
#loc228 = loc(fused[#loc114, #loc115])
#loc229 = loc(fused[#loc117, #loc116])
#loc230 = loc(fused[#loc118, #loc119])
#loc231 = loc(fused[#loc121, #loc115])
#loc232 = loc(fused[#loc126, #loc125])
#loc233 = loc(fused[#loc128, #loc129])
#loc234 = loc(fused[#loc130, #loc131])
#loc235 = loc(fused[#loc134, #loc132])
#loc236 = loc(fused[#loc136, #loc135])
#loc237 = loc(fused[#loc139, #loc140])
#loc239 = loc(fused[#loc143, #loc144])
#loc240 = loc(fused[#loc145, #loc146])
#loc241 = loc(fused[#loc148, #loc149])
#loc242 = loc(fused[#loc150, #loc151])
#loc243 = loc(fused[#loc152, #loc153])
#loc244 = loc(fused[#loc154, #loc155, #loc156, #loc151])
#loc245 = loc(fused[#loc159, #loc157])
#loc246 = loc(fused[#loc160, #loc161])
#loc247 = loc(fused[#loc163, #loc162])
#loc248 = loc(fused[#loc164, #loc165])
#loc249 = loc(fused[#loc167, #loc161])
#loc250 = loc(fused[#loc172, #loc171])
#loc251 = loc(fused[#loc175, #loc176])
#loc252 = loc(fused[#loc177, #loc178])
#loc253 = loc(fused[#loc181, #loc179])
#loc254 = loc(fused[#loc183, #loc182])
