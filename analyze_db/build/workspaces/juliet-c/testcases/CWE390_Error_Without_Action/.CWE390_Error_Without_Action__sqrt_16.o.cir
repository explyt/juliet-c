!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc68)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc3)
  cir.func private @printDoubleLine(!cir.double) loc(#loc69)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc71)
    cir.br ^bb1 loc(#loc72)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc72)
  ^bb2:  // 2 preds: ^bb1, ^bb11
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc12)
    cir.brcond %2 ^bb3, ^bb12 loc(#loc12)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc73)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc74)
  ^bb5:  // pred: ^bb4
    %3 = cir.const #cir.int<0> : !s32i loc(#loc16)
    %4 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc17)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc75)
    %5 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc18)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc20)
    %8 = cir.cast(int_to_float, %7 : !s32i), !cir.double loc(#loc20)
    %9 = cir.call @sqrt(%8) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc18)
    cir.store %9, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc76)
    cir.br ^bb6 loc(#loc77)
  ^bb6:  // pred: ^bb5
    %10 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc25)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %12 = cir.const #cir.int<33> : !s32i loc(#loc26)
    %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc78)
    cir.brcond %13 ^bb7, ^bb8 loc(#loc79)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc24)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc24)
  ^bb9:  // pred: ^bb8
    %14 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc28)
    cir.call @printDoubleLine(%14) : (!cir.double) -> () loc(#loc29)
    cir.br ^bb10 loc(#loc15)
  ^bb10:  // pred: ^bb9
    cir.br ^bb12 loc(#loc30)
  ^bb11:  // no predecessors
    cir.br ^bb2 loc(#loc11)
  ^bb12:  // 2 preds: ^bb2, ^bb10
    cir.br ^bb13 loc(#loc11)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc7)
  } loc(#loc70)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc81)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    cir.return loc(#loc32)
  } loc(#loc80)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc37)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc83)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc85)
    cir.br ^bb1 loc(#loc86)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc86)
  ^bb2:  // 2 preds: ^bb1, ^bb11
    %1 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc46)
    cir.brcond %2 ^bb3, ^bb12 loc(#loc46)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc87)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc88)
  ^bb5:  // pred: ^bb4
    %3 = cir.const #cir.int<0> : !s32i loc(#loc50)
    %4 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc51)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    %5 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc52)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc54)
    %8 = cir.cast(int_to_float, %7 : !s32i), !cir.double loc(#loc54)
    %9 = cir.call @sqrt(%8) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc52)
    cir.store %9, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc90)
    cir.br ^bb6 loc(#loc91)
  ^bb6:  // pred: ^bb5
    %10 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc59)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    %12 = cir.const #cir.int<33> : !s32i loc(#loc60)
    %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc92)
    cir.brcond %13 ^bb7, ^bb8 loc(#loc93)
  ^bb7:  // pred: ^bb6
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc37)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc63)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc64)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc63)
    cir.br ^bb8 loc(#loc58)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc58)
  ^bb9:  // pred: ^bb8
    %18 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc65)
    cir.call @printDoubleLine(%18) : (!cir.double) -> () loc(#loc66)
    cir.br ^bb10 loc(#loc49)
  ^bb10:  // pred: ^bb9
    cir.br ^bb12 loc(#loc67)
  ^bb11:  // no predecessors
    cir.br ^bb2 loc(#loc45)
  ^bb12:  // 2 preds: ^bb2, ^bb10
    cir.br ^bb13 loc(#loc45)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc41)
  } loc(#loc84)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_16.c":0:0)
#loc1 = loc("/usr/include/errno.h":37:1)
#loc2 = loc("/usr/include/errno.h":37:45)
#loc3 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc6 = loc("CWE390_Error_Without_Action__sqrt_16.c":23:1)
#loc7 = loc("CWE390_Error_Without_Action__sqrt_16.c":40:1)
#loc8 = loc("CWE390_Error_Without_Action__sqrt_16.c":28:13)
#loc9 = loc("CWE390_Error_Without_Action__sqrt_16.c":28:20)
#loc10 = loc("CWE390_Error_Without_Action__sqrt_16.c":25:5)
#loc11 = loc("CWE390_Error_Without_Action__sqrt_16.c":39:5)
#loc12 = loc("CWE390_Error_Without_Action__sqrt_16.c":25:11)
#loc13 = loc("CWE390_Error_Without_Action__sqrt_16.c":26:5)
#loc14 = loc("CWE390_Error_Without_Action__sqrt_16.c":27:9)
#loc15 = loc("CWE390_Error_Without_Action__sqrt_16.c":37:9)
#loc16 = loc("CWE390_Error_Without_Action__sqrt_16.c":29:21)
#loc17 = loc("CWE390_Error_Without_Action__sqrt_16.c":29:13)
#loc18 = loc("CWE390_Error_Without_Action__sqrt_16.c":30:36)
#loc19 = loc("CWE390_Error_Without_Action__sqrt_16.c":30:50)
#loc20 = loc("CWE390_Error_Without_Action__sqrt_16.c":30:49)
#loc21 = loc("CWE390_Error_Without_Action__sqrt_16.c":30:13)
#loc22 = loc("CWE390_Error_Without_Action__sqrt_16.c":30:51)
#loc23 = loc("CWE390_Error_Without_Action__sqrt_16.c":32:13)
#loc24 = loc("CWE390_Error_Without_Action__sqrt_16.c":35:13)
#loc25 = loc("CWE390_Error_Without_Action__sqrt_16.c":32:17)
#loc26 = loc("CWE390_Error_Without_Action__sqrt_16.c":32:26)
#loc27 = loc("CWE390_Error_Without_Action__sqrt_16.c":33:13)
#loc28 = loc("CWE390_Error_Without_Action__sqrt_16.c":36:29)
#loc29 = loc("CWE390_Error_Without_Action__sqrt_16.c":36:13)
#loc30 = loc("CWE390_Error_Without_Action__sqrt_16.c":38:9)
#loc31 = loc("CWE390_Error_Without_Action__sqrt_16.c":67:1)
#loc32 = loc("CWE390_Error_Without_Action__sqrt_16.c":70:1)
#loc33 = loc("CWE390_Error_Without_Action__sqrt_16.c":69:5)
#loc34 = loc("CWE390_Error_Without_Action__sqrt_16.c":69:11)
#loc35 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc36 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc37 = loc("CWE390_Error_Without_Action__sqrt_16.c":58:27)
#loc38 = loc("/usr/include/stdlib.h":756:1)
#loc39 = loc("/usr/include/stdlib.h":756:70)
#loc40 = loc("CWE390_Error_Without_Action__sqrt_16.c":47:1)
#loc41 = loc("CWE390_Error_Without_Action__sqrt_16.c":65:1)
#loc42 = loc("CWE390_Error_Without_Action__sqrt_16.c":52:13)
#loc43 = loc("CWE390_Error_Without_Action__sqrt_16.c":52:20)
#loc44 = loc("CWE390_Error_Without_Action__sqrt_16.c":49:5)
#loc45 = loc("CWE390_Error_Without_Action__sqrt_16.c":64:5)
#loc46 = loc("CWE390_Error_Without_Action__sqrt_16.c":49:11)
#loc47 = loc("CWE390_Error_Without_Action__sqrt_16.c":50:5)
#loc48 = loc("CWE390_Error_Without_Action__sqrt_16.c":51:9)
#loc49 = loc("CWE390_Error_Without_Action__sqrt_16.c":62:9)
#loc50 = loc("CWE390_Error_Without_Action__sqrt_16.c":53:21)
#loc51 = loc("CWE390_Error_Without_Action__sqrt_16.c":53:13)
#loc52 = loc("CWE390_Error_Without_Action__sqrt_16.c":54:36)
#loc53 = loc("CWE390_Error_Without_Action__sqrt_16.c":54:50)
#loc54 = loc("CWE390_Error_Without_Action__sqrt_16.c":54:49)
#loc55 = loc("CWE390_Error_Without_Action__sqrt_16.c":54:13)
#loc56 = loc("CWE390_Error_Without_Action__sqrt_16.c":54:51)
#loc57 = loc("CWE390_Error_Without_Action__sqrt_16.c":56:13)
#loc58 = loc("CWE390_Error_Without_Action__sqrt_16.c":60:13)
#loc59 = loc("CWE390_Error_Without_Action__sqrt_16.c":56:17)
#loc60 = loc("CWE390_Error_Without_Action__sqrt_16.c":56:26)
#loc61 = loc("CWE390_Error_Without_Action__sqrt_16.c":57:13)
#loc62 = loc("CWE390_Error_Without_Action__sqrt_16.c":58:17)
#loc63 = loc("CWE390_Error_Without_Action__sqrt_16.c":59:17)
#loc64 = loc("CWE390_Error_Without_Action__sqrt_16.c":59:22)
#loc65 = loc("CWE390_Error_Without_Action__sqrt_16.c":61:29)
#loc66 = loc("CWE390_Error_Without_Action__sqrt_16.c":61:13)
#loc67 = loc("CWE390_Error_Without_Action__sqrt_16.c":63:9)
#loc68 = loc(fused[#loc1, #loc2])
#loc69 = loc(fused[#loc4, #loc5])
#loc70 = loc(fused[#loc6, #loc7])
#loc71 = loc(fused[#loc8, #loc9])
#loc72 = loc(fused[#loc10, #loc11])
#loc73 = loc(fused[#loc13, #loc11])
#loc74 = loc(fused[#loc14, #loc15])
#loc75 = loc(fused[#loc17, #loc16])
#loc76 = loc(fused[#loc21, #loc22])
#loc77 = loc(fused[#loc23, #loc24])
#loc78 = loc(fused[#loc25, #loc26])
#loc79 = loc(fused[#loc27, #loc24])
#loc80 = loc(fused[#loc31, #loc32])
#loc81 = loc(fused[#loc33, #loc34])
#loc82 = loc(fused[#loc35, #loc36])
#loc83 = loc(fused[#loc38, #loc39])
#loc84 = loc(fused[#loc40, #loc41])
#loc85 = loc(fused[#loc42, #loc43])
#loc86 = loc(fused[#loc44, #loc45])
#loc87 = loc(fused[#loc47, #loc45])
#loc88 = loc(fused[#loc48, #loc49])
#loc89 = loc(fused[#loc51, #loc50])
#loc90 = loc(fused[#loc55, #loc56])
#loc91 = loc(fused[#loc57, #loc58])
#loc92 = loc(fused[#loc59, #loc60])
#loc93 = loc(fused[#loc61, #loc58])
