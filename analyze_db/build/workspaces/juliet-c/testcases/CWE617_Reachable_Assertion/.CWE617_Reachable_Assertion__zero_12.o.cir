!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__zero_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc31)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc32)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__zero_12.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__zero_12_bad()\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE617_Reachable_Assertion__zero_12_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc35)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc35)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc11)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc11)
      cir.if %3 {
        %4 = cir.const #cir.int<4> : !u64i loc(#loc5)
        cir.scope {
          cir.scope {
            %5 = cir.const #cir.int<0> : !s32i loc(#loc5)
            %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc5)
            cir.if %6 {
            } else {
              %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc5)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc5)
              %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc5)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc5)
              %11 = cir.const #cir.int<27> : !s32i loc(#loc5)
              %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc5)
              %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc5)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc5)
              cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc5)
            } loc(#loc5)
          } loc(#loc5)
        } loc(#loc5)
      } else {
        %4 = cir.const #cir.int<4> : !u64i loc(#loc6)
        cir.scope {
          cir.scope {
            %5 = cir.const #cir.int<1> : !s32i loc(#loc6)
            %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc6)
            cir.if %6 {
            } else {
              %7 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc6)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc6)
              %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc6)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc6)
              %11 = cir.const #cir.int<34> : !s32i loc(#loc6)
              %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc6)
              %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc6)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc6)
              cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc6)
            } loc(#loc6)
          } loc(#loc6)
        } loc(#loc6)
      } loc(#loc36)
    } loc(#loc34)
    cir.return loc(#loc8)
  } loc(#loc33)
  cir.func no_proto @CWE617_Reachable_Assertion__zero_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc38)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc18)
    cir.return loc(#loc17)
  } loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void good1()\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc20)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc41)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc41)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc25)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc25)
      cir.if %3 {
        %4 = cir.const #cir.int<4> : !u64i loc(#loc20)
        cir.scope {
          cir.scope {
            %5 = cir.const #cir.int<1> : !s32i loc(#loc20)
            %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc20)
            cir.if %6 {
            } else {
              %7 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc20)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc20)
              %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc20)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc20)
              %11 = cir.const #cir.int<50> : !s32i loc(#loc20)
              %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc20)
              %13 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc20)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc20)
              cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc20)
            } loc(#loc20)
          } loc(#loc20)
        } loc(#loc20)
      } else {
        %4 = cir.const #cir.int<4> : !u64i loc(#loc30)
        cir.scope {
          cir.scope {
            %5 = cir.const #cir.int<1> : !s32i loc(#loc30)
            %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc30)
            cir.if %6 {
            } else {
              %7 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc30)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc30)
              %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc30)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc30)
              %11 = cir.const #cir.int<57> : !s32i loc(#loc30)
              %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc30)
              %13 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc30)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc30)
              cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc30)
            } loc(#loc30)
          } loc(#loc30)
        } loc(#loc30)
      } loc(#loc42)
    } loc(#loc40)
    cir.return loc(#loc22)
  } loc(#loc39)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__zero_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/assert.h":69:1)
#loc4 = loc("/usr/include/assert.h":71:43)
#loc5 = loc("CWE617_Reachable_Assertion__zero_12.c":27:9)
#loc6 = loc("CWE617_Reachable_Assertion__zero_12.c":34:9)
#loc7 = loc("CWE617_Reachable_Assertion__zero_12.c":22:1)
#loc8 = loc("CWE617_Reachable_Assertion__zero_12.c":36:1)
#loc9 = loc("CWE617_Reachable_Assertion__zero_12.c":24:5)
#loc10 = loc("CWE617_Reachable_Assertion__zero_12.c":35:5)
#loc11 = loc("CWE617_Reachable_Assertion__zero_12.c":24:8)
#loc12 = loc("CWE617_Reachable_Assertion__zero_12.c":24:33)
#loc13 = loc("CWE617_Reachable_Assertion__zero_12.c":25:5)
#loc14 = loc("CWE617_Reachable_Assertion__zero_12.c":28:5)
#loc15 = loc("CWE617_Reachable_Assertion__zero_12.c":30:5)
#loc16 = loc("CWE617_Reachable_Assertion__zero_12.c":61:1)
#loc17 = loc("CWE617_Reachable_Assertion__zero_12.c":64:1)
#loc18 = loc("CWE617_Reachable_Assertion__zero_12.c":63:5)
#loc19 = loc("CWE617_Reachable_Assertion__zero_12.c":63:11)
#loc20 = loc("CWE617_Reachable_Assertion__zero_12.c":50:9)
#loc21 = loc("CWE617_Reachable_Assertion__zero_12.c":43:1)
#loc22 = loc("CWE617_Reachable_Assertion__zero_12.c":59:1)
#loc23 = loc("CWE617_Reachable_Assertion__zero_12.c":45:5)
#loc24 = loc("CWE617_Reachable_Assertion__zero_12.c":58:5)
#loc25 = loc("CWE617_Reachable_Assertion__zero_12.c":45:8)
#loc26 = loc("CWE617_Reachable_Assertion__zero_12.c":45:33)
#loc27 = loc("CWE617_Reachable_Assertion__zero_12.c":46:5)
#loc28 = loc("CWE617_Reachable_Assertion__zero_12.c":51:5)
#loc29 = loc("CWE617_Reachable_Assertion__zero_12.c":53:5)
#loc30 = loc("CWE617_Reachable_Assertion__zero_12.c":57:9)
#loc31 = loc(fused[#loc1, #loc2])
#loc32 = loc(fused[#loc3, #loc4])
#loc33 = loc(fused[#loc7, #loc8])
#loc34 = loc(fused[#loc9, #loc10])
#loc35 = loc(fused[#loc11, #loc12])
#loc36 = loc(fused[#loc13, #loc14, #loc15, #loc10])
#loc37 = loc(fused[#loc16, #loc17])
#loc38 = loc(fused[#loc18, #loc19])
#loc39 = loc(fused[#loc21, #loc22])
#loc40 = loc(fused[#loc23, #loc24])
#loc41 = loc(fused[#loc25, #loc26])
#loc42 = loc(fused[#loc27, #loc28, #loc29, #loc24])
