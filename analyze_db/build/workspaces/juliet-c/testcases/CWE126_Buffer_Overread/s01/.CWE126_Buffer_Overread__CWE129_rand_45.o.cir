!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc122)
  cir.global "private" internal dsolocal @CWE126_Buffer_Overread__CWE129_rand_45_badData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc123)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_rand_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc125)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc12)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc12)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc12)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc12)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc12)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc12)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc12)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc12)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc12)
      cir.yield %23 : !u32i loc(#loc12)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc12)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc12)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc12)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc12)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc12)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc12)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc12)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc12)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc12)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc12)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc12)
      cir.yield %27 : !u32i loc(#loc12)
    }) : (!cir.bool) -> !u32i loc(#loc12)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc12)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %10 = cir.get_global @CWE126_Buffer_Overread__CWE129_rand_45_badData : !cir.ptr<!s32i> loc(#loc123)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc128)
    %11 = cir.get_global @badSink : !cir.ptr<!cir.func<()>> loc(#loc129)
    cir.call %11() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc16)
    cir.return loc(#loc6)
  } loc(#loc124)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_rand_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc131)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc20)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc132)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc22)
    cir.return loc(#loc19)
  } loc(#loc130)
  cir.func private @printIntLine(!s32i) loc(#loc133)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc134)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc28)
  cir.func no_proto internal private @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc136)
    %1 = cir.get_global @CWE126_Buffer_Overread__CWE129_rand_45_badData : !cir.ptr<!s32i> loc(#loc123)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc138)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc138)
      cir.store %4, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc138)
      cir.scope {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
        %6 = cir.const #cir.int<0> : !s32i loc(#loc40)
        %7 = cir.cmp(ge, %5, %6) : !s32i, !cir.bool loc(#loc140)
        cir.if %7 {
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc44)
          %9 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc45)
          %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc45)
          %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc45)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc46)
        } else {
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc28)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc28)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc47)
        } loc(#loc141)
      } loc(#loc139)
    } loc(#loc137)
    cir.return loc(#loc30)
  } loc(#loc135)
  cir.global "private" internal dsolocal @CWE126_Buffer_Overread__CWE129_rand_45_goodG2BData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc142)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc144)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc55)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc57)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc146)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    %5 = cir.get_global @CWE126_Buffer_Overread__CWE129_rand_45_goodG2BData : !cir.ptr<!s32i> loc(#loc142)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %6 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<()>> loc(#loc148)
    cir.call %6() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc61)
    cir.return loc(#loc51)
  } loc(#loc143)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc150)
    %1 = cir.get_global @CWE126_Buffer_Overread__CWE129_rand_45_goodG2BData : !cir.ptr<!s32i> loc(#loc142)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc152)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc152)
      cir.store %4, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc152)
      cir.scope {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
        %6 = cir.const #cir.int<0> : !s32i loc(#loc74)
        %7 = cir.cmp(ge, %5, %6) : !s32i, !cir.bool loc(#loc154)
        cir.if %7 {
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
          %9 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc79)
          %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc79)
          %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc79)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc80)
        } else {
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc81)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc81)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc82)
        } loc(#loc155)
      } loc(#loc153)
    } loc(#loc151)
    cir.return loc(#loc64)
  } loc(#loc149)
  cir.global "private" internal dsolocal @CWE126_Buffer_Overread__CWE129_rand_45_goodB2GData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc156)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc90)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc92)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc92)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc92)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc92)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc92)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc92)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc92)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc92)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc92)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc92)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc92)
      cir.yield %23 : !u32i loc(#loc92)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc92)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc92)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc92)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc92)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc92)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc92)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc92)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc92)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc92)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc92)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc92)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc92)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc92)
      cir.yield %27 : !u32i loc(#loc92)
    }) : (!cir.bool) -> !u32i loc(#loc92)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc92)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %10 = cir.get_global @CWE126_Buffer_Overread__CWE129_rand_45_goodB2GData : !cir.ptr<!s32i> loc(#loc156)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    %11 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<()>> loc(#loc162)
    cir.call %11() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc96)
    cir.return loc(#loc86)
  } loc(#loc157)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc98)
  cir.func no_proto internal private @goodB2GSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.get_global @CWE126_Buffer_Overread__CWE129_rand_45_goodB2GData : !cir.ptr<!s32i> loc(#loc156)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc166)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc166)
      cir.store %4, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc166)
      cir.scope {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
        %6 = cir.const #cir.int<0> : !s32i loc(#loc110)
        %7 = cir.cmp(ge, %5, %6) : !s32i, !cir.bool loc(#loc168)
        %8 = cir.ternary(%7, true {
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc112)
          %10 = cir.const #cir.int<10> : !s32i loc(#loc113)
          %11 = cir.cmp(lt, %9, %10) : !s32i, !cir.bool loc(#loc169)
          %12 = cir.ternary(%11, true {
            %13 = cir.const #true loc(#loc111)
            cir.yield %13 : !cir.bool loc(#loc111)
          }, false {
            %13 = cir.const #false loc(#loc111)
            cir.yield %13 : !cir.bool loc(#loc111)
          }) : (!cir.bool) -> !cir.bool loc(#loc111)
          cir.yield %12 : !cir.bool loc(#loc111)
        }, false {
          %9 = cir.const #false loc(#loc111)
          cir.yield %9 : !cir.bool loc(#loc111)
        }) : (!cir.bool) -> !cir.bool loc(#loc111)
        cir.if %8 {
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc118)
          %10 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc119)
          %11 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %9 : !s32i), !cir.ptr<!s32i> loc(#loc119)
          %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc119)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc120)
        } else {
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc98)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc98)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc121)
        } loc(#loc170)
      } loc(#loc167)
    } loc(#loc165)
    cir.return loc(#loc100)
  } loc(#loc163)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_45.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":20:1)
#loc4 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":20:12)
#loc5 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":44:1)
#loc6 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":53:1)
#loc7 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":46:5)
#loc8 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":46:9)
#loc9 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":48:13)
#loc10 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":48:12)
#loc11 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":48:5)
#loc12 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":50:12)
#loc13 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":50:5)
#loc14 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":51:54)
#loc15 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":51:5)
#loc16 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":52:5)
#loc17 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":52:13)
#loc18 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":119:1)
#loc19 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":123:1)
#loc20 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":121:5)
#loc21 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":121:13)
#loc22 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":122:5)
#loc23 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":122:13)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc28 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":39:23)
#loc29 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":26:1)
#loc30 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":42:1)
#loc31 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":28:5)
#loc32 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":28:16)
#loc33 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":29:5)
#loc34 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":41:5)
#loc35 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":30:9)
#loc36 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":30:30)
#loc37 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":33:9)
#loc38 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":40:9)
#loc39 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":33:13)
#loc40 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":33:21)
#loc41 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":34:9)
#loc42 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":36:9)
#loc43 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":38:9)
#loc44 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":35:33)
#loc45 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":35:26)
#loc46 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":35:13)
#loc47 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":39:13)
#loc48 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":21:1)
#loc49 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":21:12)
#loc50 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":78:1)
#loc51 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":88:1)
#loc52 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":80:5)
#loc53 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":80:9)
#loc54 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":82:13)
#loc55 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":82:12)
#loc56 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":82:5)
#loc57 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":85:12)
#loc58 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":85:5)
#loc59 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":86:58)
#loc60 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":86:5)
#loc61 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":87:5)
#loc62 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":87:17)
#loc63 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":60:1)
#loc64 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":76:1)
#loc65 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":62:5)
#loc66 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":62:16)
#loc67 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":63:5)
#loc68 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":75:5)
#loc69 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":64:9)
#loc70 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":64:30)
#loc71 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":67:9)
#loc72 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":74:9)
#loc73 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":67:13)
#loc74 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":67:21)
#loc75 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":68:9)
#loc76 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":70:9)
#loc77 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":72:9)
#loc78 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":69:33)
#loc79 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":69:26)
#loc80 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":69:13)
#loc81 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":73:23)
#loc82 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":73:13)
#loc83 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":22:1)
#loc84 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":22:12)
#loc85 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":108:1)
#loc86 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":117:1)
#loc87 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":110:5)
#loc88 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":110:9)
#loc89 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":112:13)
#loc90 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":112:12)
#loc91 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":112:5)
#loc92 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":114:12)
#loc93 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":114:5)
#loc94 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":115:58)
#loc95 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":115:5)
#loc96 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":116:5)
#loc97 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":116:17)
#loc98 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":103:23)
#loc99 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":91:1)
#loc100 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":106:1)
#loc101 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":93:5)
#loc102 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":93:16)
#loc103 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":94:5)
#loc104 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":105:5)
#loc105 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":95:9)
#loc106 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":95:30)
#loc107 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":97:9)
#loc108 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":104:9)
#loc109 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":97:13)
#loc110 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":97:21)
#loc111 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":97:23)
#loc112 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":97:26)
#loc113 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":97:34)
#loc114 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":97:36)
#loc115 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":98:9)
#loc116 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":100:9)
#loc117 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":102:9)
#loc118 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":99:33)
#loc119 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":99:26)
#loc120 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":99:13)
#loc121 = loc("CWE126_Buffer_Overread__CWE129_rand_45.c":103:13)
#loc122 = loc(fused[#loc1, #loc2])
#loc123 = loc(fused[#loc3, #loc4])
#loc124 = loc(fused[#loc5, #loc6])
#loc125 = loc(fused[#loc7, #loc8])
#loc126 = loc(fused[#loc11, #loc9])
#loc127 = loc(fused[#loc13, #loc12])
#loc128 = loc(fused[#loc15, #loc14])
#loc129 = loc(fused[#loc16, #loc17])
#loc130 = loc(fused[#loc18, #loc19])
#loc131 = loc(fused[#loc20, #loc21])
#loc132 = loc(fused[#loc22, #loc23])
#loc133 = loc(fused[#loc24, #loc25])
#loc134 = loc(fused[#loc26, #loc27])
#loc135 = loc(fused[#loc29, #loc30])
#loc136 = loc(fused[#loc31, #loc32])
#loc137 = loc(fused[#loc33, #loc34])
#loc138 = loc(fused[#loc35, #loc36])
#loc139 = loc(fused[#loc37, #loc38])
#loc140 = loc(fused[#loc39, #loc40])
#loc141 = loc(fused[#loc41, #loc42, #loc43, #loc38])
#loc142 = loc(fused[#loc48, #loc49])
#loc143 = loc(fused[#loc50, #loc51])
#loc144 = loc(fused[#loc52, #loc53])
#loc145 = loc(fused[#loc56, #loc54])
#loc146 = loc(fused[#loc58, #loc57])
#loc147 = loc(fused[#loc60, #loc59])
#loc148 = loc(fused[#loc61, #loc62])
#loc149 = loc(fused[#loc63, #loc64])
#loc150 = loc(fused[#loc65, #loc66])
#loc151 = loc(fused[#loc67, #loc68])
#loc152 = loc(fused[#loc69, #loc70])
#loc153 = loc(fused[#loc71, #loc72])
#loc154 = loc(fused[#loc73, #loc74])
#loc155 = loc(fused[#loc75, #loc76, #loc77, #loc72])
#loc156 = loc(fused[#loc83, #loc84])
#loc157 = loc(fused[#loc85, #loc86])
#loc158 = loc(fused[#loc87, #loc88])
#loc159 = loc(fused[#loc91, #loc89])
#loc160 = loc(fused[#loc93, #loc92])
#loc161 = loc(fused[#loc95, #loc94])
#loc162 = loc(fused[#loc96, #loc97])
#loc163 = loc(fused[#loc99, #loc100])
#loc164 = loc(fused[#loc101, #loc102])
#loc165 = loc(fused[#loc103, #loc104])
#loc166 = loc(fused[#loc105, #loc106])
#loc167 = loc(fused[#loc107, #loc108])
#loc168 = loc(fused[#loc109, #loc110])
#loc169 = loc(fused[#loc112, #loc114])
#loc170 = loc(fused[#loc115, #loc116, #loc117, #loc108])
