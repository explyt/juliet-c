!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc82)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc3)
  cir.func private @printDoubleLine(!cir.double) loc(#loc83)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc85)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc88)
        cir.condition(%4) loc(#loc16)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc91)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc22)
            %4 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc23)
            cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc92)
            %5 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc24)
            %6 = cir.const #cir.int<1> : !s32i loc(#loc25)
            %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc26)
            %8 = cir.cast(int_to_float, %7 : !s32i), !cir.double loc(#loc26)
            %9 = cir.call @sqrt(%8) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc24)
            cir.store %9, %2 : !cir.double, !cir.ptr<!cir.double> loc(#loc93)
            cir.scope {
              %11 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc31)
              %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc31)
              %13 = cir.const #cir.int<33> : !s32i loc(#loc32)
              %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc95)
              cir.if %14 {
              } loc(#loc96)
            } loc(#loc94)
            %10 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc34)
            cir.call @printDoubleLine(%10) : (!cir.double) -> () loc(#loc35)
          } loc(#loc90)
        } loc(#loc89)
        cir.yield loc(#loc11)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc36)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc37)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc97)
        cir.yield loc(#loc86)
      } loc(#loc86)
    } loc(#loc86)
    cir.return loc(#loc7)
  } loc(#loc84)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc99)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    cir.return loc(#loc39)
  } loc(#loc98)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc44)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc101)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc103)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc53)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc105)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc56)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc106)
        cir.condition(%4) loc(#loc57)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc109)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc63)
            %4 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc64)
            cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc110)
            %5 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc65)
            %6 = cir.const #cir.int<1> : !s32i loc(#loc66)
            %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc67)
            %8 = cir.cast(int_to_float, %7 : !s32i), !cir.double loc(#loc67)
            %9 = cir.call @sqrt(%8) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc65)
            cir.store %9, %2 : !cir.double, !cir.ptr<!cir.double> loc(#loc111)
            cir.scope {
              %11 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc72)
              %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc72)
              %13 = cir.const #cir.int<33> : !s32i loc(#loc73)
              %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc113)
              cir.if %14 {
                %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc44)
                %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc44)
                cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc75)
                %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc76)
                %18 = cir.const #cir.int<1> : !s32i loc(#loc77)
                cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc76)
              } loc(#loc114)
            } loc(#loc112)
            %10 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc78)
            cir.call @printDoubleLine(%10) : (!cir.double) -> () loc(#loc79)
          } loc(#loc108)
        } loc(#loc107)
        cir.yield loc(#loc52)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc81)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
        cir.yield loc(#loc104)
      } loc(#loc104)
    } loc(#loc104)
    cir.return loc(#loc48)
  } loc(#loc102)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_17.c":0:0)
#loc1 = loc("/usr/include/errno.h":37:1)
#loc2 = loc("/usr/include/errno.h":37:45)
#loc3 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc6 = loc("CWE390_Error_Without_Action__sqrt_17.c":23:1)
#loc7 = loc("CWE390_Error_Without_Action__sqrt_17.c":40:1)
#loc8 = loc("CWE390_Error_Without_Action__sqrt_17.c":25:5)
#loc9 = loc("CWE390_Error_Without_Action__sqrt_17.c":25:9)
#loc10 = loc("CWE390_Error_Without_Action__sqrt_17.c":26:5)
#loc11 = loc("CWE390_Error_Without_Action__sqrt_17.c":39:5)
#loc12 = loc("CWE390_Error_Without_Action__sqrt_17.c":26:13)
#loc13 = loc("CWE390_Error_Without_Action__sqrt_17.c":26:9)
#loc14 = loc("CWE390_Error_Without_Action__sqrt_17.c":26:16)
#loc15 = loc("CWE390_Error_Without_Action__sqrt_17.c":26:20)
#loc16 = loc("CWE390_Error_Without_Action__sqrt_17.c":26:18)
#loc17 = loc("CWE390_Error_Without_Action__sqrt_17.c":27:5)
#loc18 = loc("CWE390_Error_Without_Action__sqrt_17.c":28:9)
#loc19 = loc("CWE390_Error_Without_Action__sqrt_17.c":38:9)
#loc20 = loc("CWE390_Error_Without_Action__sqrt_17.c":29:13)
#loc21 = loc("CWE390_Error_Without_Action__sqrt_17.c":29:20)
#loc22 = loc("CWE390_Error_Without_Action__sqrt_17.c":30:21)
#loc23 = loc("CWE390_Error_Without_Action__sqrt_17.c":30:13)
#loc24 = loc("CWE390_Error_Without_Action__sqrt_17.c":31:36)
#loc25 = loc("CWE390_Error_Without_Action__sqrt_17.c":31:50)
#loc26 = loc("CWE390_Error_Without_Action__sqrt_17.c":31:49)
#loc27 = loc("CWE390_Error_Without_Action__sqrt_17.c":31:13)
#loc28 = loc("CWE390_Error_Without_Action__sqrt_17.c":31:51)
#loc29 = loc("CWE390_Error_Without_Action__sqrt_17.c":33:13)
#loc30 = loc("CWE390_Error_Without_Action__sqrt_17.c":36:13)
#loc31 = loc("CWE390_Error_Without_Action__sqrt_17.c":33:17)
#loc32 = loc("CWE390_Error_Without_Action__sqrt_17.c":33:26)
#loc33 = loc("CWE390_Error_Without_Action__sqrt_17.c":34:13)
#loc34 = loc("CWE390_Error_Without_Action__sqrt_17.c":37:29)
#loc35 = loc("CWE390_Error_Without_Action__sqrt_17.c":37:13)
#loc36 = loc("CWE390_Error_Without_Action__sqrt_17.c":26:24)
#loc37 = loc("CWE390_Error_Without_Action__sqrt_17.c":26:23)
#loc38 = loc("CWE390_Error_Without_Action__sqrt_17.c":67:1)
#loc39 = loc("CWE390_Error_Without_Action__sqrt_17.c":70:1)
#loc40 = loc("CWE390_Error_Without_Action__sqrt_17.c":69:5)
#loc41 = loc("CWE390_Error_Without_Action__sqrt_17.c":69:11)
#loc42 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE390_Error_Without_Action__sqrt_17.c":59:27)
#loc45 = loc("/usr/include/stdlib.h":756:1)
#loc46 = loc("/usr/include/stdlib.h":756:70)
#loc47 = loc("CWE390_Error_Without_Action__sqrt_17.c":47:1)
#loc48 = loc("CWE390_Error_Without_Action__sqrt_17.c":65:1)
#loc49 = loc("CWE390_Error_Without_Action__sqrt_17.c":49:5)
#loc50 = loc("CWE390_Error_Without_Action__sqrt_17.c":49:9)
#loc51 = loc("CWE390_Error_Without_Action__sqrt_17.c":50:5)
#loc52 = loc("CWE390_Error_Without_Action__sqrt_17.c":64:5)
#loc53 = loc("CWE390_Error_Without_Action__sqrt_17.c":50:13)
#loc54 = loc("CWE390_Error_Without_Action__sqrt_17.c":50:9)
#loc55 = loc("CWE390_Error_Without_Action__sqrt_17.c":50:16)
#loc56 = loc("CWE390_Error_Without_Action__sqrt_17.c":50:20)
#loc57 = loc("CWE390_Error_Without_Action__sqrt_17.c":50:18)
#loc58 = loc("CWE390_Error_Without_Action__sqrt_17.c":51:5)
#loc59 = loc("CWE390_Error_Without_Action__sqrt_17.c":52:9)
#loc60 = loc("CWE390_Error_Without_Action__sqrt_17.c":63:9)
#loc61 = loc("CWE390_Error_Without_Action__sqrt_17.c":53:13)
#loc62 = loc("CWE390_Error_Without_Action__sqrt_17.c":53:20)
#loc63 = loc("CWE390_Error_Without_Action__sqrt_17.c":54:21)
#loc64 = loc("CWE390_Error_Without_Action__sqrt_17.c":54:13)
#loc65 = loc("CWE390_Error_Without_Action__sqrt_17.c":55:36)
#loc66 = loc("CWE390_Error_Without_Action__sqrt_17.c":55:50)
#loc67 = loc("CWE390_Error_Without_Action__sqrt_17.c":55:49)
#loc68 = loc("CWE390_Error_Without_Action__sqrt_17.c":55:13)
#loc69 = loc("CWE390_Error_Without_Action__sqrt_17.c":55:51)
#loc70 = loc("CWE390_Error_Without_Action__sqrt_17.c":57:13)
#loc71 = loc("CWE390_Error_Without_Action__sqrt_17.c":61:13)
#loc72 = loc("CWE390_Error_Without_Action__sqrt_17.c":57:17)
#loc73 = loc("CWE390_Error_Without_Action__sqrt_17.c":57:26)
#loc74 = loc("CWE390_Error_Without_Action__sqrt_17.c":58:13)
#loc75 = loc("CWE390_Error_Without_Action__sqrt_17.c":59:17)
#loc76 = loc("CWE390_Error_Without_Action__sqrt_17.c":60:17)
#loc77 = loc("CWE390_Error_Without_Action__sqrt_17.c":60:22)
#loc78 = loc("CWE390_Error_Without_Action__sqrt_17.c":62:29)
#loc79 = loc("CWE390_Error_Without_Action__sqrt_17.c":62:13)
#loc80 = loc("CWE390_Error_Without_Action__sqrt_17.c":50:24)
#loc81 = loc("CWE390_Error_Without_Action__sqrt_17.c":50:23)
#loc82 = loc(fused[#loc1, #loc2])
#loc83 = loc(fused[#loc4, #loc5])
#loc84 = loc(fused[#loc6, #loc7])
#loc85 = loc(fused[#loc8, #loc9])
#loc86 = loc(fused[#loc10, #loc11])
#loc87 = loc(fused[#loc13, #loc12])
#loc88 = loc(fused[#loc14, #loc15])
#loc89 = loc(fused[#loc17, #loc11])
#loc90 = loc(fused[#loc18, #loc19])
#loc91 = loc(fused[#loc20, #loc21])
#loc92 = loc(fused[#loc23, #loc22])
#loc93 = loc(fused[#loc27, #loc28])
#loc94 = loc(fused[#loc29, #loc30])
#loc95 = loc(fused[#loc31, #loc32])
#loc96 = loc(fused[#loc33, #loc30])
#loc97 = loc(fused[#loc37, #loc36])
#loc98 = loc(fused[#loc38, #loc39])
#loc99 = loc(fused[#loc40, #loc41])
#loc100 = loc(fused[#loc42, #loc43])
#loc101 = loc(fused[#loc45, #loc46])
#loc102 = loc(fused[#loc47, #loc48])
#loc103 = loc(fused[#loc49, #loc50])
#loc104 = loc(fused[#loc51, #loc52])
#loc105 = loc(fused[#loc54, #loc53])
#loc106 = loc(fused[#loc55, #loc56])
#loc107 = loc(fused[#loc58, #loc52])
#loc108 = loc(fused[#loc59, #loc60])
#loc109 = loc(fused[#loc61, #loc62])
#loc110 = loc(fused[#loc64, #loc63])
#loc111 = loc(fused[#loc68, #loc69])
#loc112 = loc(fused[#loc70, #loc71])
#loc113 = loc(fused[#loc72, #loc73])
#loc114 = loc(fused[#loc74, #loc71])
#loc115 = loc(fused[#loc81, #loc80])
