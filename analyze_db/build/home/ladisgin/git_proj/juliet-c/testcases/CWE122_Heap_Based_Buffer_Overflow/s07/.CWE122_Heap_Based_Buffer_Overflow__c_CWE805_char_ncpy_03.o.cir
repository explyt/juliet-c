!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc192)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc193)
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc194)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc195)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc196)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc198)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc199)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc17)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc200)
    cir.br ^bb1 loc(#loc201)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc21)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc22)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc202)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc203)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc24)
    %7 = cir.const #cir.int<50> : !s32i loc(#loc25)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc25)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc204)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc205)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc206)
    cir.store %12, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc207)
    cir.br ^bb3 loc(#loc208)
  ^bb3:  // pred: ^bb2
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc209)
    cir.brcond %16 ^bb4, ^bb5 loc(#loc210)
  ^bb4:  // pred: ^bb3
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc35)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc37)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc35)
    cir.br ^bb5 loc(#loc31)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc31)
  ^bb6:  // pred: ^bb5
    %20 = cir.const #cir.int<0> : !s32i loc(#loc38)
    %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc38)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc40)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc41)
    cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc211)
    cir.br ^bb7 loc(#loc20)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc212)
  ^bb9:  // pred: ^bb8
    %25 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc44)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc44)
    %27 = cir.const #cir.int<67> : !s32i loc(#loc45)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc46)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc46)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc46)
    cir.libc.memset %31 bytes from %26 set to %27 : !cir.ptr<!void>, !s32i, !u64i loc(#loc213)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc50)
    %33 = cir.cast(integral, %32 : !s32i), !s8i loc(#loc50)
    %34 = cir.const #cir.int<100> : !s32i loc(#loc51)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %36 = cir.binop(sub, %34, %35) nsw : !s32i loc(#loc51)
    %37 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc53)
    %38 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %36 : !s32i), !cir.ptr<!s8i> loc(#loc53)
    cir.store %33, %38 : !s8i, !cir.ptr<!s8i> loc(#loc214)
    %39 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc54)
    %40 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
    %41 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc56)
    %42 = cir.const #cir.int<100> : !s32i loc(#loc57)
    %43 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %44 = cir.binop(sub, %42, %43) nsw : !s32i loc(#loc57)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc57)
    %46 = cir.call @strncpy(%40, %41, %45) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc54)
    %47 = cir.const #cir.int<0> : !s32i loc(#loc59)
    %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc59)
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
    %50 = cir.const #cir.int<100> : !s32i loc(#loc61)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %52 = cir.binop(sub, %50, %51) nsw : !s32i loc(#loc61)
    %53 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %52 : !s32i), !cir.ptr<!s8i> loc(#loc63)
    cir.store %48, %53 : !s8i, !cir.ptr<!s8i> loc(#loc215)
    %54 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %55 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc66)
    %56 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
    %57 = cir.cast(bitcast, %56 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc67)
    cir.call @free(%57) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc66)
    cir.br ^bb10 loc(#loc43)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc12)
  } loc(#loc197)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc217)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc70)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc72)
    cir.return loc(#loc69)
  } loc(#loc216)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc74)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc220)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc221)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc81)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc222)
    cir.br ^bb1 loc(#loc223)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc85)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc86)
    %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc224)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc225)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc74)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    cir.br ^bb8 loc(#loc88)
  ^bb3:  // pred: ^bb1
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc91)
    %9 = cir.const #cir.int<100> : !s32i loc(#loc92)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc92)
    %11 = cir.const #cir.int<1> : !u64i loc(#loc226)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc227)
    %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc91)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc228)
    cir.store %14, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc229)
    cir.br ^bb4 loc(#loc230)
  ^bb4:  // pred: ^bb3
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc100)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc100)
    %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc231)
    cir.brcond %18 ^bb5, ^bb6 loc(#loc232)
  ^bb5:  // pred: ^bb4
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc102)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc103)
    %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc104)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc102)
    cir.br ^bb6 loc(#loc98)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc98)
  ^bb7:  // pred: ^bb6
    %22 = cir.const #cir.int<0> : !s32i loc(#loc105)
    %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc105)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc106)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc107)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc108)
    cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc233)
    cir.br ^bb8 loc(#loc84)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc84)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc234)
  ^bb10:  // pred: ^bb9
    %27 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc111)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc111)
    %29 = cir.const #cir.int<67> : !s32i loc(#loc112)
    %30 = cir.const #cir.int<100> : !s32i loc(#loc113)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc114)
    %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc113)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc113)
    cir.libc.memset %33 bytes from %28 set to %29 : !cir.ptr<!void>, !s32i, !u64i loc(#loc235)
    %34 = cir.const #cir.int<0> : !s32i loc(#loc117)
    %35 = cir.cast(integral, %34 : !s32i), !s8i loc(#loc117)
    %36 = cir.const #cir.int<100> : !s32i loc(#loc118)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc119)
    %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc118)
    %39 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc120)
    %40 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %38 : !s32i), !cir.ptr<!s8i> loc(#loc120)
    cir.store %35, %40 : !s8i, !cir.ptr<!s8i> loc(#loc236)
    %41 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc121)
    %42 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc122)
    %43 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc123)
    %44 = cir.const #cir.int<100> : !s32i loc(#loc124)
    %45 = cir.const #cir.int<1> : !s32i loc(#loc125)
    %46 = cir.binop(sub, %44, %45) nsw : !s32i loc(#loc124)
    %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc124)
    %48 = cir.call @strncpy(%42, %43, %47) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc121)
    %49 = cir.const #cir.int<0> : !s32i loc(#loc126)
    %50 = cir.cast(integral, %49 : !s32i), !s8i loc(#loc126)
    %51 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
    %52 = cir.const #cir.int<100> : !s32i loc(#loc128)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %54 = cir.binop(sub, %52, %53) nsw : !s32i loc(#loc128)
    %55 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc130)
    cir.store %50, %55 : !s8i, !cir.ptr<!s8i> loc(#loc237)
    %56 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
    cir.call @printLine(%56) : (!cir.ptr<!s8i>) -> () loc(#loc132)
    %57 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc133)
    %58 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
    %59 = cir.cast(bitcast, %58 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc134)
    cir.call @free(%59) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc133)
    cir.br ^bb11 loc(#loc110)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc76)
  } loc(#loc219)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc239)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc240)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc141)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc241)
    cir.br ^bb1 loc(#loc242)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc145)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc146)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc243)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc244)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc148)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc149)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc149)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc245)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc246)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc148)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc247)
    cir.store %12, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc248)
    cir.br ^bb3 loc(#loc249)
  ^bb3:  // pred: ^bb2
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc157)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc157)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc250)
    cir.brcond %16 ^bb4, ^bb5 loc(#loc251)
  ^bb4:  // pred: ^bb3
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc159)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc160)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc161)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc159)
    cir.br ^bb5 loc(#loc155)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc155)
  ^bb6:  // pred: ^bb5
    %20 = cir.const #cir.int<0> : !s32i loc(#loc162)
    %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc162)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc163)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc164)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc165)
    cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc252)
    cir.br ^bb7 loc(#loc144)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc144)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc253)
  ^bb9:  // pred: ^bb8
    %25 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc168)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc168)
    %27 = cir.const #cir.int<67> : !s32i loc(#loc169)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc170)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc171)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc170)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc170)
    cir.libc.memset %31 bytes from %26 set to %27 : !cir.ptr<!void>, !s32i, !u64i loc(#loc254)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc174)
    %33 = cir.cast(integral, %32 : !s32i), !s8i loc(#loc174)
    %34 = cir.const #cir.int<100> : !s32i loc(#loc175)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc176)
    %36 = cir.binop(sub, %34, %35) nsw : !s32i loc(#loc175)
    %37 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc177)
    %38 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %36 : !s32i), !cir.ptr<!s8i> loc(#loc177)
    cir.store %33, %38 : !s8i, !cir.ptr<!s8i> loc(#loc255)
    %39 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc178)
    %40 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc179)
    %41 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc180)
    %42 = cir.const #cir.int<100> : !s32i loc(#loc181)
    %43 = cir.const #cir.int<1> : !s32i loc(#loc182)
    %44 = cir.binop(sub, %42, %43) nsw : !s32i loc(#loc181)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc181)
    %46 = cir.call @strncpy(%40, %41, %45) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc178)
    %47 = cir.const #cir.int<0> : !s32i loc(#loc183)
    %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc183)
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc184)
    %50 = cir.const #cir.int<100> : !s32i loc(#loc185)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc186)
    %52 = cir.binop(sub, %50, %51) nsw : !s32i loc(#loc185)
    %53 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %52 : !s32i), !cir.ptr<!s8i> loc(#loc187)
    cir.store %48, %53 : !s8i, !cir.ptr<!s8i> loc(#loc256)
    %54 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc188)
    cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc189)
    %55 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc190)
    %56 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc191)
    %57 = cir.cast(bitcast, %56 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc191)
    cir.call @free(%57) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc190)
    cir.br ^bb10 loc(#loc167)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc136)
  } loc(#loc238)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":144:1)
#loc6 = loc("/usr/include/string.h":146:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":23:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":44:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":35:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":35:24)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":25:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":25:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":26:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":26:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":27:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":33:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":27:8)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":27:11)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":28:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":30:24)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":30:31)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":30:34)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":30:45)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":30:46)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":30:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":31:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":31:37)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":31:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":31:21)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":31:27)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":31:28)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":31:34)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":31:33)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":32:19)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":32:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":32:14)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":32:15)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":34:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":43:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":36:16)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":36:24)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":36:29)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":36:33)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":36:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":36:34)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":37:25)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":37:16)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":37:20)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":37:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":39:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":39:17)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":39:23)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":39:31)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":39:35)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":40:23)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":40:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":40:14)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":40:18)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":40:19)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":41:19)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":41:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":42:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":42:14)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":103:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":107:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":105:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":105:14)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":106:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":106:14)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":58:19)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":51:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":77:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":68:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":68:24)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":53:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":53:12)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":54:12)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":54:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":55:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":66:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":55:8)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":55:11)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":56:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":59:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":61:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":58:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":63:24)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":63:31)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":63:35)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":63:46)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":63:47)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":63:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":64:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":64:37)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":64:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":64:21)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":64:27)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":64:28)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":64:34)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":64:33)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":65:19)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":65:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":65:14)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":65:15)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":67:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":76:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":69:16)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":69:24)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":69:29)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":69:33)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":69:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":69:34)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":70:25)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":70:16)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":70:20)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":70:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":72:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":72:17)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":72:23)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":72:31)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":72:35)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":73:23)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":73:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":73:14)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":73:18)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":73:19)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":74:19)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":74:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":75:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":75:14)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":80:1)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":101:1)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":92:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":92:24)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":82:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":82:12)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":83:12)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":83:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":84:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":90:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":84:8)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":84:11)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":85:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":87:24)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":87:31)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":87:35)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":87:46)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":87:47)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":87:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":88:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":88:37)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":88:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":88:21)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":88:27)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":88:28)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":88:34)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":88:33)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":89:19)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":89:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":89:14)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":89:15)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":91:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":100:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":93:16)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":93:24)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":93:29)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":93:33)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":93:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":93:34)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":94:25)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":94:16)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":94:20)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":94:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":96:9)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":96:17)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":96:23)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":96:31)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":96:35)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":97:23)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":97:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":97:14)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":97:18)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":97:19)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":98:19)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":98:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":99:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c":99:14)
#loc192 = loc(fused[#loc1, #loc2])
#loc193 = loc(fused[#loc3, #loc4])
#loc194 = loc(fused[#loc5, #loc6])
#loc195 = loc(fused[#loc7, #loc8])
#loc196 = loc(fused[#loc9, #loc10])
#loc197 = loc(fused[#loc11, #loc12])
#loc198 = loc(fused[#loc13, #loc14])
#loc199 = loc(fused[#loc15, #loc16])
#loc200 = loc(fused[#loc18, #loc17])
#loc201 = loc(fused[#loc19, #loc20])
#loc202 = loc(fused[#loc21, #loc22])
#loc203 = loc(fused[#loc23, #loc20])
#loc204 = loc(fused[#loc26, #loc27])
#loc205 = loc(fused[#loc25, #loc27])
#loc206 = loc(fused[#loc24, #loc28])
#loc207 = loc(fused[#loc29, #loc28])
#loc208 = loc(fused[#loc30, #loc31])
#loc209 = loc(fused[#loc32, #loc33])
#loc210 = loc(fused[#loc34, #loc31])
#loc211 = loc(fused[#loc39, #loc38])
#loc212 = loc(fused[#loc42, #loc43])
#loc213 = loc(fused[#loc48, #loc49])
#loc214 = loc(fused[#loc53, #loc50])
#loc215 = loc(fused[#loc60, #loc59])
#loc216 = loc(fused[#loc68, #loc69])
#loc217 = loc(fused[#loc70, #loc71])
#loc218 = loc(fused[#loc72, #loc73])
#loc219 = loc(fused[#loc75, #loc76])
#loc220 = loc(fused[#loc77, #loc78])
#loc221 = loc(fused[#loc79, #loc80])
#loc222 = loc(fused[#loc82, #loc81])
#loc223 = loc(fused[#loc83, #loc84])
#loc224 = loc(fused[#loc85, #loc86])
#loc225 = loc(fused[#loc87, #loc88, #loc89, #loc84])
#loc226 = loc(fused[#loc93, #loc94])
#loc227 = loc(fused[#loc92, #loc94])
#loc228 = loc(fused[#loc91, #loc95])
#loc229 = loc(fused[#loc96, #loc95])
#loc230 = loc(fused[#loc97, #loc98])
#loc231 = loc(fused[#loc99, #loc100])
#loc232 = loc(fused[#loc101, #loc98])
#loc233 = loc(fused[#loc106, #loc105])
#loc234 = loc(fused[#loc109, #loc110])
#loc235 = loc(fused[#loc115, #loc116])
#loc236 = loc(fused[#loc120, #loc117])
#loc237 = loc(fused[#loc127, #loc126])
#loc238 = loc(fused[#loc135, #loc136])
#loc239 = loc(fused[#loc137, #loc138])
#loc240 = loc(fused[#loc139, #loc140])
#loc241 = loc(fused[#loc142, #loc141])
#loc242 = loc(fused[#loc143, #loc144])
#loc243 = loc(fused[#loc145, #loc146])
#loc244 = loc(fused[#loc147, #loc144])
#loc245 = loc(fused[#loc150, #loc151])
#loc246 = loc(fused[#loc149, #loc151])
#loc247 = loc(fused[#loc148, #loc152])
#loc248 = loc(fused[#loc153, #loc152])
#loc249 = loc(fused[#loc154, #loc155])
#loc250 = loc(fused[#loc156, #loc157])
#loc251 = loc(fused[#loc158, #loc155])
#loc252 = loc(fused[#loc163, #loc162])
#loc253 = loc(fused[#loc166, #loc167])
#loc254 = loc(fused[#loc172, #loc173])
#loc255 = loc(fused[#loc177, #loc174])
#loc256 = loc(fused[#loc184, #loc183])
