!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @_ZN56CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_629badSourceERj(!cir.ptr<!u32i>) loc(#loc77)
  cir.func private @printUnsignedLine(!u32i) loc(#loc78)
  cir.func @_ZN56CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_623badEv() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc80)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc81)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc11)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc82)
    cir.call @_ZN56CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_629badSourceERj(%1) : (!cir.ptr<!u32i>) -> () loc(#loc13)
    cir.br ^bb1 loc(#loc83)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc16)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc17)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc17)
    %7 = cir.cmp(gt, %4, %6) : !u32i, !cir.bool loc(#loc84)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc85)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc19)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc8)
    %11 = cir.binop(mul, %8, %10) : !u32i loc(#loc86)
    cir.store %11, %0 : !u32i, !cir.ptr<!u32i> loc(#loc80)
    %12 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc20)
    cir.call @printUnsignedLine(%12) : (!u32i) -> () loc(#loc21)
    cir.br ^bb3 loc(#loc15)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc15)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc6)
  } loc(#loc79)
  cir.func private @_ZN56CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_6213goodG2BSourceERj(!cir.ptr<!u32i>) loc(#loc87)
  cir.func internal private @_ZN56CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc89)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc90)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc30)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc30)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc91)
    cir.call @_ZN56CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_6213goodG2BSourceERj(%1) : (!cir.ptr<!u32i>) -> () loc(#loc32)
    cir.br ^bb1 loc(#loc92)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc35)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc36)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc36)
    %7 = cir.cmp(gt, %4, %6) : !u32i, !cir.bool loc(#loc93)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc94)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc38)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc27)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc27)
    %11 = cir.binop(mul, %8, %10) : !u32i loc(#loc95)
    cir.store %11, %0 : !u32i, !cir.ptr<!u32i> loc(#loc89)
    %12 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc39)
    cir.call @printUnsignedLine(%12) : (!u32i) -> () loc(#loc40)
    cir.br ^bb3 loc(#loc34)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc34)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc25)
  } loc(#loc88)
  cir.func private @_ZN56CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_6213goodB2GSourceERj(!cir.ptr<!u32i>) loc(#loc96)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc97)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc45)
  cir.func internal private @_ZN56CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc99)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc100)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc52)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc52)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc101)
    cir.call @_ZN56CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_6213goodB2GSourceERj(%1) : (!cir.ptr<!u32i>) -> () loc(#loc54)
    cir.br ^bb1 loc(#loc102)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc57)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc58)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc58)
    %7 = cir.cmp(gt, %4, %6) : !u32i, !cir.bool loc(#loc103)
    cir.brcond %7 ^bb2, ^bb8 loc(#loc104)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc105)
  ^bb3:  // pred: ^bb2
    %8 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc62)
    %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc63)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc63)
    %11 = cir.const #cir.int<2> : !u32i loc(#loc63)
    %12 = cir.binop(mul, %10, %11) : !u32i loc(#loc63)
    %13 = cir.const #cir.int<1> : !u32i loc(#loc63)
    %14 = cir.binop(add, %12, %13) : !u32i loc(#loc63)
    %15 = cir.const #cir.int<2> : !s32i loc(#loc64)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc64)
    %17 = cir.binop(div, %14, %16) : !u32i loc(#loc106)
    %18 = cir.cmp(lt, %8, %17) : !u32i, !cir.bool loc(#loc107)
    cir.brcond %18 ^bb4, ^bb5 loc(#loc108)
  ^bb4:  // pred: ^bb3
    %19 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc69)
    %20 = cir.const #cir.int<2> : !s32i loc(#loc49)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc49)
    %22 = cir.binop(mul, %19, %21) : !u32i loc(#loc109)
    cir.store %22, %0 : !u32i, !cir.ptr<!u32i> loc(#loc99)
    %23 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc70)
    cir.call @printUnsignedLine(%23) : (!u32i) -> () loc(#loc71)
    cir.br ^bb6 loc(#loc67)
  ^bb5:  // pred: ^bb3
    %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc45)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    cir.br ^bb6 loc(#loc61)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc61)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc56)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc56)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc47)
  } loc(#loc98)
  cir.func @_ZN56CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_624goodEv() extra(#fn_attr) {
    cir.call @_ZN56CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62L7goodG2BEv() : () -> () loc(#loc75)
    cir.call @_ZN56CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62L7goodB2GEv() : () -> () loc(#loc76)
    cir.return loc(#loc74)
  } loc(#loc110)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":0:0)
#loc1 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":26:1)
#loc2 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":26:34)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":28:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":39:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":36:9)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":36:38)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":30:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":30:18)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":31:12)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":31:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":32:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":33:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":38:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":33:8)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":33:15)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":34:5)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":36:31)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":37:27)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":37:9)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":46:1)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":46:38)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":48:1)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":59:1)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":56:9)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":56:38)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":50:5)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":50:18)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":51:12)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":51:5)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":52:5)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":53:5)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":58:5)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":53:8)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":53:15)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":54:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":56:31)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":57:27)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":57:9)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":62:1)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":62:38)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":79:23)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":64:1)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":82:1)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":74:13)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":74:42)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":66:5)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":66:18)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":67:12)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":67:5)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":68:5)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":69:5)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":81:5)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":69:8)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":69:15)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":70:5)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":72:9)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":80:9)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":72:13)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":72:21)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":72:30)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":72:31)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":73:9)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":76:9)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":78:9)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":74:35)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":75:31)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":75:13)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":79:13)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":84:1)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":88:1)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":86:5)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_62a.cpp":87:5)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc3, #loc4])
#loc79 = loc(fused[#loc5, #loc6])
#loc80 = loc(fused[#loc7, #loc8])
#loc81 = loc(fused[#loc9, #loc10])
#loc82 = loc(fused[#loc12, #loc11])
#loc83 = loc(fused[#loc14, #loc15])
#loc84 = loc(fused[#loc16, #loc17])
#loc85 = loc(fused[#loc18, #loc15])
#loc86 = loc(fused[#loc19, #loc8])
#loc87 = loc(fused[#loc22, #loc23])
#loc88 = loc(fused[#loc24, #loc25])
#loc89 = loc(fused[#loc26, #loc27])
#loc90 = loc(fused[#loc28, #loc29])
#loc91 = loc(fused[#loc31, #loc30])
#loc92 = loc(fused[#loc33, #loc34])
#loc93 = loc(fused[#loc35, #loc36])
#loc94 = loc(fused[#loc37, #loc34])
#loc95 = loc(fused[#loc38, #loc27])
#loc96 = loc(fused[#loc41, #loc42])
#loc97 = loc(fused[#loc43, #loc44])
#loc98 = loc(fused[#loc46, #loc47])
#loc99 = loc(fused[#loc48, #loc49])
#loc100 = loc(fused[#loc50, #loc51])
#loc101 = loc(fused[#loc53, #loc52])
#loc102 = loc(fused[#loc55, #loc56])
#loc103 = loc(fused[#loc57, #loc58])
#loc104 = loc(fused[#loc59, #loc56])
#loc105 = loc(fused[#loc60, #loc61])
#loc106 = loc(fused[#loc63, #loc64])
#loc107 = loc(fused[#loc62, #loc65])
#loc108 = loc(fused[#loc66, #loc67, #loc68, #loc61])
#loc109 = loc(fused[#loc69, #loc49])
#loc110 = loc(fused[#loc73, #loc74])
