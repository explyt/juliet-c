!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc142)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc143)
  cir.func private @printIntLine(!s32i) loc(#loc144)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc145)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc147)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc148)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc15)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc149)
    cir.br ^bb1 loc(#loc150)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc151)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc22)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc22)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc152)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc153)
    cir.br ^bb3 loc(#loc154)
  ^bb3:  // pred: ^bb2
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc28)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc155)
    cir.brcond %13 ^bb4, ^bb5 loc(#loc156)
  ^bb4:  // pred: ^bb3
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc32)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
    cir.br ^bb5 loc(#loc26)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc26)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc18)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc18)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc157)
  ^bb9:  // pred: ^bb8
    %17 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc147)
    cir.store %17, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc147)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc35)
    %20 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc36)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc36)
    %22 = cir.const #cir.int<10> : !s32i loc(#loc37)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc37)
    %24 = cir.const #cir.int<4> : !u64i loc(#loc158)
    %25 = cir.binop(mul, %23, %24) : !u64i loc(#loc159)
    cir.libc.memcpy %25 bytes from %21 to %19 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc160)
    %26 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
    %27 = cir.const #cir.int<0> : !s32i loc(#loc43)
    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc44)
    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc45)
    %30 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc46)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc47)
    cir.call @free(%32) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc46)
    cir.br ^bb10 loc(#loc34)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc10)
  } loc(#loc146)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc162)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc163)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    cir.return loc(#loc49)
  } loc(#loc161)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc164)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc56)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc166)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc167)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc63)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc168)
    cir.br ^bb1 loc(#loc169)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc67)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc67)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc170)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc56)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    cir.br ^bb8 loc(#loc69)
  ^bb3:  // pred: ^bb1
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc72)
    %8 = cir.const #cir.int<10> : !s32i loc(#loc73)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc73)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc171)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc172)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc72)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc173)
    cir.store %13, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc174)
    cir.br ^bb4 loc(#loc175)
  ^bb4:  // pred: ^bb3
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc80)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc81)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc81)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc176)
    cir.brcond %17 ^bb5, ^bb6 loc(#loc177)
  ^bb5:  // pred: ^bb4
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc83)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc85)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc83)
    cir.br ^bb6 loc(#loc79)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc79)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc66)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc66)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc178)
  ^bb10:  // pred: ^bb9
    %21 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc166)
    cir.store %21, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc166)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc88)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc88)
    %24 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc89)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc89)
    %26 = cir.const #cir.int<10> : !s32i loc(#loc90)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc90)
    %28 = cir.const #cir.int<4> : !u64i loc(#loc179)
    %29 = cir.binop(mul, %27, %28) : !u64i loc(#loc180)
    cir.libc.memcpy %29 bytes from %25 to %23 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc181)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc96)
    %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !s32i), !cir.ptr<!s32i> loc(#loc97)
    %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc98)
    %34 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc99)
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc100)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc100)
    cir.call @free(%36) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc99)
    cir.br ^bb11 loc(#loc87)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc58)
  } loc(#loc165)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc183)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc184)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc107)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc185)
    cir.br ^bb1 loc(#loc186)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc111)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc187)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc113)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc114)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc114)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc188)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc189)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc113)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc190)
    cir.store %11, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc191)
    cir.br ^bb3 loc(#loc192)
  ^bb3:  // pred: ^bb2
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc121)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc122)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc122)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc193)
    cir.brcond %15 ^bb4, ^bb5 loc(#loc194)
  ^bb4:  // pred: ^bb3
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc124)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc125)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc126)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc124)
    cir.br ^bb5 loc(#loc120)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc120)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc110)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc110)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc195)
  ^bb9:  // pred: ^bb8
    %19 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc183)
    cir.store %19, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc183)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc129)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc129)
    %22 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc130)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc130)
    %24 = cir.const #cir.int<10> : !s32i loc(#loc131)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc131)
    %26 = cir.const #cir.int<4> : !u64i loc(#loc196)
    %27 = cir.binop(mul, %25, %26) : !u64i loc(#loc197)
    cir.libc.memcpy %27 bytes from %23 to %21 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc198)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc136)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc137)
    %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc138)
    %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc139)
    %32 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc140)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc141)
    %34 = cir.cast(bitcast, %33 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc141)
    cir.call @free(%34) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc140)
    cir.br ^bb10 loc(#loc128)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc102)
  } loc(#loc182)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":28:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":45:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":39:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":39:28)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":30:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":30:11)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":31:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":31:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":32:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":37:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":32:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":33:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":35:23)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":35:30)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":35:32)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":35:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":36:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":36:37)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":36:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":36:21)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":36:27)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":36:28)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":36:34)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":36:33)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":38:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":44:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":41:16)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":41:22)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":41:30)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":41:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":41:43)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":41:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":41:44)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":42:22)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":42:27)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":42:28)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":42:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":43:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":43:14)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":96:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":100:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":98:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":98:14)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":99:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":99:14)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":59:19)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":52:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":74:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":68:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":68:28)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":54:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":54:11)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":55:12)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":55:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":56:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":66:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":56:8)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":57:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":60:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":62:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":59:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":64:23)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":64:30)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":64:33)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":64:43)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":64:44)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":64:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":65:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":65:37)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":65:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":65:21)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":65:27)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":65:28)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":65:34)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":65:33)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":67:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":73:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":70:16)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":70:22)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":70:30)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":70:33)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":70:43)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":70:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":70:44)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":71:22)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":71:27)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":71:28)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":71:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":72:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":72:14)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":77:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":94:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":88:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":88:28)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":79:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":79:11)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":80:12)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":80:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":81:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":86:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":81:8)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":82:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":84:23)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":84:30)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":84:33)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":84:43)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":84:44)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":84:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":85:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":85:37)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":85:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":85:21)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":85:27)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":85:28)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":85:34)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":85:33)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":87:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":93:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":90:16)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":90:22)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":90:30)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":90:33)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":90:43)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":90:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":90:44)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":91:22)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":91:27)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":91:28)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":91:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":92:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c":92:14)
#loc142 = loc(fused[#loc1, #loc2])
#loc143 = loc(fused[#loc3, #loc4])
#loc144 = loc(fused[#loc5, #loc6])
#loc145 = loc(fused[#loc7, #loc8])
#loc146 = loc(fused[#loc9, #loc10])
#loc147 = loc(fused[#loc11, #loc12])
#loc148 = loc(fused[#loc13, #loc14])
#loc149 = loc(fused[#loc16, #loc15])
#loc150 = loc(fused[#loc17, #loc18])
#loc151 = loc(fused[#loc20, #loc18])
#loc152 = loc(fused[#loc21, #loc23])
#loc153 = loc(fused[#loc24, #loc23])
#loc154 = loc(fused[#loc25, #loc26])
#loc155 = loc(fused[#loc27, #loc28])
#loc156 = loc(fused[#loc29, #loc26])
#loc157 = loc(fused[#loc33, #loc34])
#loc158 = loc(fused[#loc38, #loc39])
#loc159 = loc(fused[#loc37, #loc39])
#loc160 = loc(fused[#loc40, #loc41])
#loc161 = loc(fused[#loc48, #loc49])
#loc162 = loc(fused[#loc50, #loc51])
#loc163 = loc(fused[#loc52, #loc53])
#loc164 = loc(fused[#loc54, #loc55])
#loc165 = loc(fused[#loc57, #loc58])
#loc166 = loc(fused[#loc59, #loc60])
#loc167 = loc(fused[#loc61, #loc62])
#loc168 = loc(fused[#loc64, #loc63])
#loc169 = loc(fused[#loc65, #loc66])
#loc170 = loc(fused[#loc68, #loc69, #loc70, #loc66])
#loc171 = loc(fused[#loc74, #loc75])
#loc172 = loc(fused[#loc73, #loc75])
#loc173 = loc(fused[#loc72, #loc76])
#loc174 = loc(fused[#loc77, #loc76])
#loc175 = loc(fused[#loc78, #loc79])
#loc176 = loc(fused[#loc80, #loc81])
#loc177 = loc(fused[#loc82, #loc79])
#loc178 = loc(fused[#loc86, #loc87])
#loc179 = loc(fused[#loc91, #loc92])
#loc180 = loc(fused[#loc90, #loc92])
#loc181 = loc(fused[#loc93, #loc94])
#loc182 = loc(fused[#loc101, #loc102])
#loc183 = loc(fused[#loc103, #loc104])
#loc184 = loc(fused[#loc105, #loc106])
#loc185 = loc(fused[#loc108, #loc107])
#loc186 = loc(fused[#loc109, #loc110])
#loc187 = loc(fused[#loc112, #loc110])
#loc188 = loc(fused[#loc115, #loc116])
#loc189 = loc(fused[#loc114, #loc116])
#loc190 = loc(fused[#loc113, #loc117])
#loc191 = loc(fused[#loc118, #loc117])
#loc192 = loc(fused[#loc119, #loc120])
#loc193 = loc(fused[#loc121, #loc122])
#loc194 = loc(fused[#loc123, #loc120])
#loc195 = loc(fused[#loc127, #loc128])
#loc196 = loc(fused[#loc132, #loc133])
#loc197 = loc(fused[#loc131, #loc133])
#loc198 = loc(fused[#loc134, #loc135])
