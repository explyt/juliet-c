!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc61 = loc("../../../testcasesupport/std_testcase.h":68:7)
!ty_OneIntClass = !cir.record<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.record<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc163)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc164)
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc5)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc5)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc5)
    cir.return loc(#loc5)
  } loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc165)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc166)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_183badEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc168)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc169)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc170)
    %3 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc171)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc20)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc172)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc173)
    cir.store %7, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc169)
    cir.br ^bb1 loc(#loc174)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc26)
    %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc175)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc176)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc28)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc30)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
    cir.br ^bb3 loc(#loc24)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc24)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.int<8> : !u64i loc(#loc177)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc33)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc178)
    cir.store %16, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc170)
    cir.br ^bb5 loc(#loc179)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc37)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc180)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc181)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc39)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc40)
    %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc41)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc39)
    cir.br ^bb7 loc(#loc35)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc35)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc182)
  ^bb9:  // pred: ^bb8
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc44)
    cir.store %23, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc183)
    cir.br ^bb10 loc(#loc184)
  ^bb10:  // pred: ^bb9
    %24 = cir.const #cir.int<8> : !u64i loc(#loc185)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc49)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc185)
    cir.call @_ZN12TwoIntsClassC2Ev(%27) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc19)
    cir.store %27, %3 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc171)
    %28 = cir.const #cir.int<5> : !s32i loc(#loc50)
    %29 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc51)
    %30 = cir.get_member %29[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc52)
    cir.store %28, %30 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    %31 = cir.const #cir.int<10> : !s32i loc(#loc53)
    %32 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc54)
    %33 = cir.get_member %32[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc55)
    cir.store %31, %33 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    %34 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc56)
    %35 = cir.get_member %34[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc52)
    %36 = cir.load %35 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    cir.call @printIntLine(%36) : (!s32i) -> () loc(#loc58)
    %37 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc59)
    %38 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
    %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc60)
    cir.call @free(%39) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc59)
    cir.return loc(#loc11)
  } loc(#loc167)
  cir.func linkonce_odr @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc61)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc61)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc61)
    cir.return loc(#loc61)
  } loc(#loc61)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_18L7goodB2GEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc189)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc190)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc191)
    %3 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc192)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc72)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc193)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc72)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc194)
    cir.store %7, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc190)
    cir.br ^bb1 loc(#loc195)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc78)
    %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc196)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc197)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc80)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc82)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc80)
    cir.br ^bb3 loc(#loc76)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc76)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.int<8> : !u64i loc(#loc198)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc85)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc199)
    cir.store %16, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc191)
    cir.br ^bb5 loc(#loc200)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc88)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc89)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc201)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc202)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc91)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc93)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc91)
    cir.br ^bb7 loc(#loc87)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc87)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc203)
  ^bb9:  // pred: ^bb8
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc96)
    cir.store %23, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc204)
    cir.br ^bb10 loc(#loc205)
  ^bb10:  // pred: ^bb9
    %24 = cir.const #cir.int<4> : !u64i loc(#loc206)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc101)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc206)
    cir.call @_ZN11OneIntClassC2Ev(%27) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc71)
    cir.store %27, %3 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc192)
    %28 = cir.const #cir.int<5> : !s32i loc(#loc102)
    %29 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc103)
    %30 = cir.get_member %29[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc104)
    cir.store %28, %30 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    %31 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc105)
    %32 = cir.get_member %31[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc104)
    %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc106)
    cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc107)
    %34 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc108)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc109)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc109)
    cir.call @free(%36) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc108)
    cir.return loc(#loc63)
  } loc(#loc188)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_18L7goodG2BEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc209)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc210)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc211)
    %3 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc212)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc120)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc213)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc120)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc214)
    cir.store %7, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc210)
    cir.br ^bb1 loc(#loc215)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc126)
    %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc216)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc217)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc128)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc130)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc128)
    cir.br ^bb3 loc(#loc124)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc124)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.int<8> : !u64i loc(#loc218)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc133)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc219)
    cir.store %16, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc211)
    cir.br ^bb5 loc(#loc220)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc136)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc137)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc221)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc222)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc139)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc140)
    %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc141)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc139)
    cir.br ^bb7 loc(#loc135)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc135)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc223)
  ^bb9:  // pred: ^bb8
    %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc144)
    cir.store %23, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc224)
    cir.br ^bb10 loc(#loc225)
  ^bb10:  // pred: ^bb9
    %24 = cir.const #cir.int<8> : !u64i loc(#loc226)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc149)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc226)
    cir.call @_ZN12TwoIntsClassC2Ev(%27) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc119)
    cir.store %27, %3 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc212)
    %28 = cir.const #cir.int<5> : !s32i loc(#loc150)
    %29 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc151)
    %30 = cir.get_member %29[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc52)
    cir.store %28, %30 : !s32i, !cir.ptr<!s32i> loc(#loc227)
    %31 = cir.const #cir.int<10> : !s32i loc(#loc152)
    %32 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc153)
    %33 = cir.get_member %32[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc55)
    cir.store %31, %33 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    %34 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc154)
    %35 = cir.get_member %34[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc52)
    %36 = cir.load %35 : !cir.ptr<!s32i>, !s32i loc(#loc155)
    cir.call @printIntLine(%36) : (!s32i) -> () loc(#loc156)
    %37 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc157)
    %38 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc158)
    %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc158)
    cir.call @free(%39) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc157)
    cir.return loc(#loc111)
  } loc(#loc208)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_184goodEv() extra(#fn_attr2) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_18L7goodB2GEv() : () -> () loc(#loc161)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_18L7goodG2BEv() : () -> () loc(#loc162)
    cir.return loc(#loc160)
  } loc(#loc229)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("/usr/include/stdlib.h":687:1)
#loc9 = loc("/usr/include/stdlib.h":687:32)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":24:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":51:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":26:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":26:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":27:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":27:62)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":29:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":29:64)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":43:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":43:45)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":27:36)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":27:43)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":27:61)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":28:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":28:42)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":28:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":28:26)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":28:32)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":28:33)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":28:39)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":28:38)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":29:44)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":29:63)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":29:37)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":30:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":30:43)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":30:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":30:27)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":30:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":30:34)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":30:40)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":30:39)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":31:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":31:10)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":34:12)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":34:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":35:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":35:10)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":43:35)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":43:39)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":45:28)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":45:9)
#loc52 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":46:28)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":46:9)
#loc55 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":47:22)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":47:32)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":47:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":49:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":49:14)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":58:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":83:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":60:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":60:12)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":61:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":61:62)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":63:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":63:64)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":77:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":77:44)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":61:36)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":61:43)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":61:61)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":62:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":62:42)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":62:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":62:26)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":62:32)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":62:33)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":62:39)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":62:38)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":63:44)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":63:63)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":63:37)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":64:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":64:43)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":64:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":64:27)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":64:33)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":64:34)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":64:40)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":64:39)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":65:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":65:10)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":68:12)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":68:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":69:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":69:10)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":77:34)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":77:38)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":79:28)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":79:9)
#loc104 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":80:22)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":80:32)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":80:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":81:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":81:14)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":86:1)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":113:1)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":88:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":88:12)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":89:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":89:62)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":91:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":91:64)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":105:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":105:45)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":89:36)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":89:43)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":89:61)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":90:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":90:42)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":90:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":90:26)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":90:32)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":90:33)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":90:39)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":90:38)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":91:44)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":91:63)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":91:37)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":92:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":92:43)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":92:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":92:27)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":92:33)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":92:34)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":92:40)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":92:39)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":93:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":93:10)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":96:12)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":96:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":97:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":97:10)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":105:35)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":105:39)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":107:28)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":107:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":108:28)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":108:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":109:22)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":109:32)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":109:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":111:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":111:14)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":115:1)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":119:1)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":117:5)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_18.cpp":118:5)
#loc163 = loc(fused[#loc1, #loc2])
#loc164 = loc(fused[#loc3, #loc4])
#loc165 = loc(fused[#loc6, #loc7])
#loc166 = loc(fused[#loc8, #loc9])
#loc167 = loc(fused[#loc10, #loc11])
#loc168 = loc(fused[#loc12, #loc13])
#loc169 = loc(fused[#loc14, #loc15])
#loc170 = loc(fused[#loc16, #loc17])
#loc171 = loc(fused[#loc18, #loc19])
#loc172 = loc(fused[#loc21, #loc22])
#loc173 = loc(fused[#loc20, #loc15])
#loc174 = loc(fused[#loc23, #loc24])
#loc175 = loc(fused[#loc25, #loc26])
#loc176 = loc(fused[#loc27, #loc24])
#loc177 = loc(fused[#loc31, #loc32])
#loc178 = loc(fused[#loc33, #loc17])
#loc179 = loc(fused[#loc34, #loc35])
#loc180 = loc(fused[#loc36, #loc37])
#loc181 = loc(fused[#loc38, #loc35])
#loc182 = loc(fused[#loc42, #loc43])
#loc183 = loc(fused[#loc45, #loc44])
#loc184 = loc(fused[#loc46, #loc47])
#loc185 = loc(fused[#loc48, #loc19])
#loc186 = loc(fused[#loc51, #loc50])
#loc187 = loc(fused[#loc54, #loc53])
#loc188 = loc(fused[#loc62, #loc63])
#loc189 = loc(fused[#loc64, #loc65])
#loc190 = loc(fused[#loc66, #loc67])
#loc191 = loc(fused[#loc68, #loc69])
#loc192 = loc(fused[#loc70, #loc71])
#loc193 = loc(fused[#loc73, #loc74])
#loc194 = loc(fused[#loc72, #loc67])
#loc195 = loc(fused[#loc75, #loc76])
#loc196 = loc(fused[#loc77, #loc78])
#loc197 = loc(fused[#loc79, #loc76])
#loc198 = loc(fused[#loc83, #loc84])
#loc199 = loc(fused[#loc85, #loc69])
#loc200 = loc(fused[#loc86, #loc87])
#loc201 = loc(fused[#loc88, #loc89])
#loc202 = loc(fused[#loc90, #loc87])
#loc203 = loc(fused[#loc94, #loc95])
#loc204 = loc(fused[#loc97, #loc96])
#loc205 = loc(fused[#loc98, #loc99])
#loc206 = loc(fused[#loc100, #loc71])
#loc207 = loc(fused[#loc103, #loc102])
#loc208 = loc(fused[#loc110, #loc111])
#loc209 = loc(fused[#loc112, #loc113])
#loc210 = loc(fused[#loc114, #loc115])
#loc211 = loc(fused[#loc116, #loc117])
#loc212 = loc(fused[#loc118, #loc119])
#loc213 = loc(fused[#loc121, #loc122])
#loc214 = loc(fused[#loc120, #loc115])
#loc215 = loc(fused[#loc123, #loc124])
#loc216 = loc(fused[#loc125, #loc126])
#loc217 = loc(fused[#loc127, #loc124])
#loc218 = loc(fused[#loc131, #loc132])
#loc219 = loc(fused[#loc133, #loc117])
#loc220 = loc(fused[#loc134, #loc135])
#loc221 = loc(fused[#loc136, #loc137])
#loc222 = loc(fused[#loc138, #loc135])
#loc223 = loc(fused[#loc142, #loc143])
#loc224 = loc(fused[#loc145, #loc144])
#loc225 = loc(fused[#loc146, #loc147])
#loc226 = loc(fused[#loc148, #loc119])
#loc227 = loc(fused[#loc151, #loc150])
#loc228 = loc(fused[#loc153, #loc152])
#loc229 = loc(fused[#loc159, #loc160])
