!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printLongLongLine(!s64i) loc(#loc83)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc85)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc86)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc87)
    %3 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc88)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc12)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc12)
    %6 = cir.const #cir.int<8> : !u64i loc(#loc12)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc12)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %9 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc89)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc12)
    cir.store %11, %3 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc88)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc14)
    %14 = cir.const #cir.int<8> : !u64i loc(#loc14)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc14)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc14)
    cir.store %18, %9 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc89)
    %19 = cir.load %3 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc15)
    cir.store %19, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc90)
    cir.br ^bb1 loc(#loc91)
  ^bb1:  // pred: ^bb0
    %20 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc85)
    cir.store %20, %0 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc85)
    cir.br ^bb2 loc(#loc92)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc93)
  ^bb3:  // pred: ^bb2
    %21 = cir.const #cir.int<0> : !s32i loc(#loc23)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc23)
    cir.store %22, %1 : !u64i, !cir.ptr<!u64i> loc(#loc94)
    cir.br ^bb4 loc(#loc93)
  ^bb4:  // 2 preds: ^bb3, ^bb8
    %23 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc25)
    %24 = cir.const #cir.int<100> : !s32i loc(#loc26)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc26)
    %26 = cir.cmp(lt, %23, %25) : !u64i, !cir.bool loc(#loc95)
    cir.brcond %26 ^bb5, ^bb9 loc(#loc27)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc96)
  ^bb6:  // pred: ^bb5
    %27 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc29)
    %28 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc30)
    %29 = cir.ptr_stride(%28 : !cir.ptr<!s64i>, %27 : !u64i), !cir.ptr<!s64i> loc(#loc30)
    %30 = cir.load %29 : !cir.ptr<!s64i>, !s64i loc(#loc30)
    %31 = cir.load %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc31)
    %32 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc32)
    %33 = cir.ptr_stride(%31 : !cir.ptr<!s64i>, %32 : !u64i), !cir.ptr<!s64i> loc(#loc33)
    cir.store %30, %33 : !s64i, !cir.ptr<!s64i> loc(#loc97)
    cir.br ^bb7 loc(#loc22)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc22)
  ^bb8:  // pred: ^bb7
    %34 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc35)
    %35 = cir.unary(inc, %34) : !u64i, !u64i loc(#loc36)
    cir.store %35, %1 : !u64i, !cir.ptr<!u64i> loc(#loc98)
    cir.br ^bb4 loc(#loc93)
  ^bb9:  // pred: ^bb4
    cir.br ^bb10 loc(#loc22)
  ^bb10:  // pred: ^bb9
    %36 = cir.load %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc37)
    %37 = cir.const #cir.int<0> : !s32i loc(#loc38)
    %38 = cir.ptr_stride(%36 : !cir.ptr<!s64i>, %37 : !s32i), !cir.ptr<!s64i> loc(#loc39)
    %39 = cir.load %38 : !cir.ptr<!s64i>, !s64i loc(#loc37)
    cir.call @printLongLongLine(%39) : (!s64i) -> () loc(#loc40)
    cir.br ^bb11 loc(#loc20)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc18)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc4)
  } loc(#loc84)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc100)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc43)
    cir.return loc(#loc42)
  } loc(#loc99)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc102)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc103)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc104)
    %3 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc105)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc54)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc54)
    %6 = cir.const #cir.int<8> : !u64i loc(#loc54)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc54)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc54)
    %9 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc106)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc54)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc54)
    cir.store %11, %3 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc105)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc56)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc56)
    %14 = cir.const #cir.int<8> : !u64i loc(#loc56)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc56)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc56)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc56)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc56)
    cir.store %18, %9 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc106)
    %19 = cir.load %9 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc57)
    cir.store %19, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc107)
    cir.br ^bb1 loc(#loc108)
  ^bb1:  // pred: ^bb0
    %20 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc102)
    cir.store %20, %0 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc102)
    cir.br ^bb2 loc(#loc109)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc110)
  ^bb3:  // pred: ^bb2
    %21 = cir.const #cir.int<0> : !s32i loc(#loc65)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc65)
    cir.store %22, %1 : !u64i, !cir.ptr<!u64i> loc(#loc111)
    cir.br ^bb4 loc(#loc110)
  ^bb4:  // 2 preds: ^bb3, ^bb8
    %23 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc67)
    %24 = cir.const #cir.int<100> : !s32i loc(#loc68)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc68)
    %26 = cir.cmp(lt, %23, %25) : !u64i, !cir.bool loc(#loc112)
    cir.brcond %26 ^bb5, ^bb9 loc(#loc69)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc113)
  ^bb6:  // pred: ^bb5
    %27 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc71)
    %28 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc72)
    %29 = cir.ptr_stride(%28 : !cir.ptr<!s64i>, %27 : !u64i), !cir.ptr<!s64i> loc(#loc72)
    %30 = cir.load %29 : !cir.ptr<!s64i>, !s64i loc(#loc72)
    %31 = cir.load %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc73)
    %32 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc74)
    %33 = cir.ptr_stride(%31 : !cir.ptr<!s64i>, %32 : !u64i), !cir.ptr<!s64i> loc(#loc75)
    cir.store %30, %33 : !s64i, !cir.ptr<!s64i> loc(#loc114)
    cir.br ^bb7 loc(#loc64)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc64)
  ^bb8:  // pred: ^bb7
    %34 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc77)
    %35 = cir.unary(inc, %34) : !u64i, !u64i loc(#loc78)
    cir.store %35, %1 : !u64i, !cir.ptr<!u64i> loc(#loc115)
    cir.br ^bb4 loc(#loc110)
  ^bb9:  // pred: ^bb4
    cir.br ^bb10 loc(#loc64)
  ^bb10:  // pred: ^bb9
    %36 = cir.load %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc79)
    %37 = cir.const #cir.int<0> : !s32i loc(#loc80)
    %38 = cir.ptr_stride(%36 : !cir.ptr<!s64i>, %37 : !s32i), !cir.ptr<!s64i> loc(#loc81)
    %39 = cir.load %38 : !cir.ptr<!s64i>, !s64i loc(#loc79)
    cir.call @printLongLongLine(%39) : (!s64i) -> () loc(#loc82)
    cir.br ^bb11 loc(#loc62)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc60)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc46)
  } loc(#loc101)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":41:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":30:9)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":30:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":32:13)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":32:20)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":23:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":23:15)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":24:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":24:42)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":25:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":25:43)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":28:12)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":28:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":29:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":40:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":31:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":39:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":34:13)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":37:13)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":34:22)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":34:18)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":34:25)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":34:29)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":34:27)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":35:13)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":36:34)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":36:27)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":36:17)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":36:22)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":36:23)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":36:35)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":34:35)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":34:34)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":38:31)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":38:36)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":38:37)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":38:13)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":69:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":72:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":71:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":71:13)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":48:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":67:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":56:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":56:33)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":58:13)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":58:20)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":50:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":50:15)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":51:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":51:42)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":52:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":52:43)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":54:12)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":54:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":55:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":66:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":57:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":65:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":60:13)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":63:13)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":60:22)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":60:18)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":60:25)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":60:29)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":60:27)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":61:13)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":62:34)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":62:27)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":62:17)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":62:22)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":62:23)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":62:35)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":60:35)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":60:34)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":64:31)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":64:36)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":64:37)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c":64:13)
#loc83 = loc(fused[#loc1, #loc2])
#loc84 = loc(fused[#loc3, #loc4])
#loc85 = loc(fused[#loc5, #loc6])
#loc86 = loc(fused[#loc7, #loc8])
#loc87 = loc(fused[#loc9, #loc10])
#loc88 = loc(fused[#loc11, #loc12])
#loc89 = loc(fused[#loc13, #loc14])
#loc90 = loc(fused[#loc16, #loc15])
#loc91 = loc(fused[#loc17, #loc18])
#loc92 = loc(fused[#loc19, #loc20])
#loc93 = loc(fused[#loc21, #loc22])
#loc94 = loc(fused[#loc24, #loc23])
#loc95 = loc(fused[#loc25, #loc26])
#loc96 = loc(fused[#loc28, #loc22])
#loc97 = loc(fused[#loc31, #loc34])
#loc98 = loc(fused[#loc36, #loc35])
#loc99 = loc(fused[#loc41, #loc42])
#loc100 = loc(fused[#loc43, #loc44])
#loc101 = loc(fused[#loc45, #loc46])
#loc102 = loc(fused[#loc47, #loc48])
#loc103 = loc(fused[#loc49, #loc50])
#loc104 = loc(fused[#loc51, #loc52])
#loc105 = loc(fused[#loc53, #loc54])
#loc106 = loc(fused[#loc55, #loc56])
#loc107 = loc(fused[#loc58, #loc57])
#loc108 = loc(fused[#loc59, #loc60])
#loc109 = loc(fused[#loc61, #loc62])
#loc110 = loc(fused[#loc63, #loc64])
#loc111 = loc(fused[#loc66, #loc65])
#loc112 = loc(fused[#loc67, #loc68])
#loc113 = loc(fused[#loc70, #loc64])
#loc114 = loc(fused[#loc73, #loc76])
#loc115 = loc(fused[#loc78, #loc77])
