!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc133)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc134)
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61b_badSource(!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc135)
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc136)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc137)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc138)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc140)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc17)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc18)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc18)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc141)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc142)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc17)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc143)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc144)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc26)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc26)
      %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !s32i loc(#loc146)
      %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc27)
      cir.if %14 {
        %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc29)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc30)
        %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc31)
        cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc29)
      } loc(#loc147)
    } loc(#loc145)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
    %9 = cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61b_badSource(%8) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc33)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc148)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc150)
      %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc151)
      %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc152)
      %13 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc150)
      cir.store %13, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc150)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc43)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc44)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc43)
      cir.store %16, %12 : !u64i, !cir.ptr<!u64i> loc(#loc153)
      cir.scope {
        %28 = cir.const #cir.int<0> : !s32i loc(#loc49)
        %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc49)
        cir.store %29, %11 : !u64i, !cir.ptr<!u64i> loc(#loc155)
        cir.for : cond {
          %30 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc51)
          %31 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc52)
          %32 = cir.cmp(lt, %30, %31) : !u64i, !s32i loc(#loc156)
          %33 = cir.cast(int_to_bool, %32 : !s32i), !cir.bool loc(#loc53)
          cir.condition(%33) loc(#loc53)
        } body {
          cir.scope {
            %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
            %31 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc56)
            %32 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc57)
            %33 = cir.load %32 : !cir.ptr<!s8i>, !s8i loc(#loc55)
            %34 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc58)
            %35 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc59)
            %36 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc59)
            cir.store %33, %36 : !s8i, !cir.ptr<!s8i> loc(#loc158)
          } loc(#loc157)
          cir.yield loc(#loc48)
        } step {
          %30 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc60)
          %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc61)
          cir.store %31, %11 : !u64i, !cir.ptr<!u64i> loc(#loc159)
          cir.yield loc(#loc154)
        } loc(#loc154)
      } loc(#loc154)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc62)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc62)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc63)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc64)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc63)
      %22 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc65)
      %23 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc65)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc160)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc67)
      %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc68)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc69)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc69)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc68)
    } loc(#loc149)
    cir.return loc(#loc14)
  } loc(#loc139)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc162)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc72)
    cir.return loc(#loc71)
  } loc(#loc161)
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61b_goodG2BSource(!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc163)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc165)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc80)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc81)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc81)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc166)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc167)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc80)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc168)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc169)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc88)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc89)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc89)
      %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !s32i loc(#loc171)
      %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc90)
      cir.if %14 {
        %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc92)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc93)
        %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc94)
        cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc92)
      } loc(#loc172)
    } loc(#loc170)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc95)
    %9 = cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61b_goodG2BSource(%8) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc96)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc173)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc175)
      %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc176)
      %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc177)
      %13 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc175)
      cir.store %13, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc175)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc106)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc106)
      cir.store %16, %12 : !u64i, !cir.ptr<!u64i> loc(#loc178)
      cir.scope {
        %28 = cir.const #cir.int<0> : !s32i loc(#loc112)
        %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc112)
        cir.store %29, %11 : !u64i, !cir.ptr<!u64i> loc(#loc180)
        cir.for : cond {
          %30 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc114)
          %31 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc115)
          %32 = cir.cmp(lt, %30, %31) : !u64i, !s32i loc(#loc181)
          %33 = cir.cast(int_to_bool, %32 : !s32i), !cir.bool loc(#loc116)
          cir.condition(%33) loc(#loc116)
        } body {
          cir.scope {
            %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
            %31 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc119)
            %32 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc120)
            %33 = cir.load %32 : !cir.ptr<!s8i>, !s8i loc(#loc118)
            %34 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc121)
            %35 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc122)
            %36 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc122)
            cir.store %33, %36 : !s8i, !cir.ptr<!s8i> loc(#loc183)
          } loc(#loc182)
          cir.yield loc(#loc111)
        } step {
          %30 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc123)
          %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc124)
          cir.store %31, %11 : !u64i, !cir.ptr<!u64i> loc(#loc184)
          cir.yield loc(#loc179)
        } loc(#loc179)
      } loc(#loc179)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc125)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc125)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc126)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc127)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc126)
      %22 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc128)
      %23 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc128)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc185)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc130)
      %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc131)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc132)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc131)
    } loc(#loc174)
    cir.return loc(#loc77)
  } loc(#loc164)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":24:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":24:87)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("/usr/include/stdlib.h":687:1)
#loc12 = loc("/usr/include/stdlib.h":687:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":26:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":45:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":28:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":28:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":29:20)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":29:27)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":29:31)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":29:42)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":29:43)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":29:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":30:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":30:33)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":30:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":30:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":30:14)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":30:23)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":30:24)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":30:30)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":30:29)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":31:80)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":31:12)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":31:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":31:84)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":32:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":44:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":33:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":33:25)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":34:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":34:16)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":34:19)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":35:19)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":35:26)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":35:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":35:30)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":37:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":40:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":37:18)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":37:14)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":37:21)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":37:25)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":37:23)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":38:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":39:23)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":39:28)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":39:29)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":39:18)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":39:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":37:35)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":37:34)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":41:22)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":41:14)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":41:17)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":41:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":42:19)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":42:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":43:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":43:14)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":75:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":78:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":77:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":77:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":52:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":52:91)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":54:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":73:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":56:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":56:12)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":57:20)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":57:27)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":57:31)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":57:42)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":57:43)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":57:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":58:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":58:33)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":58:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":58:17)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":58:14)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":58:23)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":58:24)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":58:30)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":58:29)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":59:84)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":59:12)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":59:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":59:88)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":60:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":72:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":61:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":61:25)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":62:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":62:16)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":62:19)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":63:19)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":63:26)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":63:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":63:30)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":65:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":68:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":65:18)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":65:14)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":65:21)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":65:25)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":65:23)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":66:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":67:23)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":67:28)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":67:29)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":67:18)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":67:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":65:35)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":65:34)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":69:22)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":69:14)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":69:17)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":69:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":70:19)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":70:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":71:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c":71:14)
#loc133 = loc(fused[#loc1, #loc2])
#loc134 = loc(fused[#loc3, #loc4])
#loc135 = loc(fused[#loc5, #loc6])
#loc136 = loc(fused[#loc7, #loc8])
#loc137 = loc(fused[#loc9, #loc10])
#loc138 = loc(fused[#loc11, #loc12])
#loc139 = loc(fused[#loc13, #loc14])
#loc140 = loc(fused[#loc15, #loc16])
#loc141 = loc(fused[#loc19, #loc20])
#loc142 = loc(fused[#loc18, #loc20])
#loc143 = loc(fused[#loc17, #loc21])
#loc144 = loc(fused[#loc22, #loc21])
#loc145 = loc(fused[#loc23, #loc24])
#loc146 = loc(fused[#loc25, #loc26])
#loc147 = loc(fused[#loc28, #loc24])
#loc148 = loc(fused[#loc34, #loc35])
#loc149 = loc(fused[#loc36, #loc37])
#loc150 = loc(fused[#loc38, #loc39])
#loc151 = loc(fused[#loc40, #loc41])
#loc152 = loc(fused[#loc40, #loc42])
#loc153 = loc(fused[#loc45, #loc46])
#loc154 = loc(fused[#loc47, #loc48])
#loc155 = loc(fused[#loc50, #loc49])
#loc156 = loc(fused[#loc51, #loc52])
#loc157 = loc(fused[#loc54, #loc48])
#loc158 = loc(fused[#loc59, #loc57])
#loc159 = loc(fused[#loc61, #loc60])
#loc160 = loc(fused[#loc65, #loc62])
#loc161 = loc(fused[#loc70, #loc71])
#loc162 = loc(fused[#loc72, #loc73])
#loc163 = loc(fused[#loc74, #loc75])
#loc164 = loc(fused[#loc76, #loc77])
#loc165 = loc(fused[#loc78, #loc79])
#loc166 = loc(fused[#loc82, #loc83])
#loc167 = loc(fused[#loc81, #loc83])
#loc168 = loc(fused[#loc80, #loc84])
#loc169 = loc(fused[#loc85, #loc84])
#loc170 = loc(fused[#loc86, #loc87])
#loc171 = loc(fused[#loc88, #loc89])
#loc172 = loc(fused[#loc91, #loc87])
#loc173 = loc(fused[#loc97, #loc98])
#loc174 = loc(fused[#loc99, #loc100])
#loc175 = loc(fused[#loc101, #loc102])
#loc176 = loc(fused[#loc103, #loc104])
#loc177 = loc(fused[#loc103, #loc105])
#loc178 = loc(fused[#loc108, #loc109])
#loc179 = loc(fused[#loc110, #loc111])
#loc180 = loc(fused[#loc113, #loc112])
#loc181 = loc(fused[#loc114, #loc115])
#loc182 = loc(fused[#loc117, #loc111])
#loc183 = loc(fused[#loc122, #loc120])
#loc184 = loc(fused[#loc124, #loc123])
#loc185 = loc(fused[#loc128, #loc125])
