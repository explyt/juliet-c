!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @fread(!cir.ptr<!void>, !u64i, !u64i, !cir.ptr<!ty__IO_FILE>) -> !u64i loc(#loc56)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc57)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fread failed!\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc60)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc61)
    cir.br ^bb1 loc(#loc62)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc60)
    cir.store %2, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc60)
    %3 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc13)
    cir.store %3, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc61)
    cir.br ^bb2 loc(#loc63)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @fread : !cir.ptr<!cir.func<!u64i (!cir.ptr<!void>, !u64i, !u64i, !cir.ptr<!ty__IO_FILE>)>> loc(#loc18)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc64)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc65)
    %8 = cir.const #cir.int<100> : !s32i loc(#loc23)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc23)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc23)
    %12 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc57)
    %13 = cir.load %12 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc25)
    %14 = cir.call @fread(%6, %7, %11, %13) : (!cir.ptr<!void>, !u64i, !u64i, !cir.ptr<!ty__IO_FILE>) -> !u64i loc(#loc18)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc26)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc26)
    %17 = cir.cmp(eq, %14, %16) : !u64i, !cir.bool loc(#loc66)
    cir.brcond %17 ^bb3, ^bb4 loc(#loc67)
  ^bb3:  // pred: ^bb2
    %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc7)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc28)
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc17)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc15)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc9)
  } loc(#loc59)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc69)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc30)
  } loc(#loc68)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc71)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc72)
    cir.br ^bb1 loc(#loc73)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc71)
    cir.store %2, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc71)
    %3 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc38)
    cir.store %3, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc72)
    cir.br ^bb2 loc(#loc74)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @fread : !cir.ptr<!cir.func<!u64i (!cir.ptr<!void>, !u64i, !u64i, !cir.ptr<!ty__IO_FILE>)>> loc(#loc43)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc44)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc75)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc76)
    %8 = cir.const #cir.int<100> : !s32i loc(#loc48)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc48)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc48)
    %12 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc57)
    %13 = cir.load %12 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc50)
    %14 = cir.call @fread(%6, %7, %11, %13) : (!cir.ptr<!void>, !u64i, !u64i, !cir.ptr<!ty__IO_FILE>) -> !u64i loc(#loc43)
    %15 = cir.const #cir.int<100> : !s32i loc(#loc51)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc51)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc51)
    %19 = cir.cmp(ne, %14, %18) : !u64i, !cir.bool loc(#loc77)
    cir.brcond %19 ^bb3, ^bb4 loc(#loc78)
  ^bb3:  // pred: ^bb2
    %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc54)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    cir.br ^bb4 loc(#loc42)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc42)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc40)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc34)
  } loc(#loc70)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":0:0)
#loc1 = loc("/usr/include/stdio.h":728:1)
#loc2 = loc("/usr/include/stdio.h":730:3)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":35:23)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":24:1)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":38:1)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":29:9)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":29:32)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":30:9)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":30:23)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":26:5)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":37:5)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":33:9)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":36:9)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":33:13)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":33:27)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":33:19)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":33:33)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":33:44)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":33:56)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":33:60)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":33:64)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":33:74)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":34:9)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":35:13)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":59:1)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":62:1)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":61:5)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":61:11)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":44:1)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":57:1)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":49:9)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":49:32)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":50:9)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":50:23)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":46:5)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":56:5)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":52:9)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":55:9)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":52:13)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":52:27)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":52:19)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":52:33)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":52:44)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":52:56)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":52:60)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":52:64)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":52:74)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":52:78)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":53:9)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":54:23)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fread_01.c":54:13)
#loc56 = loc(fused[#loc1, #loc2])
#loc57 = loc(fused[#loc3, #loc4])
#loc58 = loc(fused[#loc5, #loc6])
#loc59 = loc(fused[#loc8, #loc9])
#loc60 = loc(fused[#loc10, #loc11])
#loc61 = loc(fused[#loc12, #loc13])
#loc62 = loc(fused[#loc14, #loc15])
#loc63 = loc(fused[#loc16, #loc17])
#loc64 = loc(fused[#loc20, #loc19])
#loc65 = loc(fused[#loc21, #loc22])
#loc66 = loc(fused[#loc18, #loc26])
#loc67 = loc(fused[#loc27, #loc17])
#loc68 = loc(fused[#loc29, #loc30])
#loc69 = loc(fused[#loc31, #loc32])
#loc70 = loc(fused[#loc33, #loc34])
#loc71 = loc(fused[#loc35, #loc36])
#loc72 = loc(fused[#loc37, #loc38])
#loc73 = loc(fused[#loc39, #loc40])
#loc74 = loc(fused[#loc41, #loc42])
#loc75 = loc(fused[#loc45, #loc44])
#loc76 = loc(fused[#loc46, #loc47])
#loc77 = loc(fused[#loc43, #loc52])
#loc78 = loc(fused[#loc53, #loc42])
