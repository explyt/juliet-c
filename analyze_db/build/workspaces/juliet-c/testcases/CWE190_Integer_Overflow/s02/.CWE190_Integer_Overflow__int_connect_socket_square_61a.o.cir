!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_square_61a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @CWE190_Integer_Overflow__int_connect_socket_square_61b_badSource(!s32i) -> !s32i loc(#loc82)
  cir.func private @printIntLine(!s32i) loc(#loc83)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_square_61_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc85)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc86)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc11)
    %3 = cir.call @CWE190_Integer_Overflow__int_connect_socket_square_61b_badSource(%2) : (!s32i) -> !s32i loc(#loc12)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc89)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc19)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc89)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc20)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc21)
    } loc(#loc88)
    cir.return loc(#loc6)
  } loc(#loc84)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_square_61_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc91)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc24)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc92)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    cir.return loc(#loc23)
  } loc(#loc90)
  cir.func private @CWE190_Integer_Overflow__int_connect_socket_square_61b_goodG2BSource(!s32i) -> !s32i loc(#loc93)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc95)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc34)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    %3 = cir.call @CWE190_Integer_Overflow__int_connect_socket_square_61b_goodG2BSource(%2) : (!s32i) -> !s32i loc(#loc37)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc99)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc44)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc43)
      %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc44)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc99)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc45)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc46)
    } loc(#loc98)
    cir.return loc(#loc31)
  } loc(#loc94)
  cir.func private @CWE190_Integer_Overflow__int_connect_socket_square_61b_goodB2GSource(!s32i) -> !s32i loc(#loc100)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc49)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc52)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc103)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc57)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    %3 = cir.call @CWE190_Integer_Overflow__int_connect_socket_square_61b_goodB2GSource(%2) : (!s32i) -> !s32i loc(#loc60)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
      %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc66)
      %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc66)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc66)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc66)
      %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc107)
      %10 = cir.ternary(%9, true {
        %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc68)
        %12 = cir.abs %11 poison : !s32i loc(#loc69)
        %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc69)
        %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc70)
        %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc71)
        %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc71)
        %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc70)
        %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc70)
        %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc108)
        %20 = cir.ternary(%19, true {
          %21 = cir.const #true loc(#loc67)
          cir.yield %21 : !cir.bool loc(#loc67)
        }, false {
          %21 = cir.const #false loc(#loc67)
          cir.yield %21 : !cir.bool loc(#loc67)
        }) : (!cir.bool) -> !cir.bool loc(#loc67)
        cir.yield %20 : !cir.bool loc(#loc67)
      }, false {
        %11 = cir.const #false loc(#loc67)
        cir.yield %11 : !cir.bool loc(#loc67)
      }) : (!cir.bool) -> !cir.bool loc(#loc67)
      cir.if %10 {
        %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc110)
        %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
        %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc78)
        cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc110)
        %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc79)
        cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc80)
      } else {
        %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc52)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc52)
        cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc81)
      } loc(#loc109)
    } loc(#loc106)
    cir.return loc(#loc54)
  } loc(#loc102)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_square_61a.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":47:1)
#loc2 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":47:78)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":49:1)
#loc6 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":60:1)
#loc7 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":51:5)
#loc8 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":51:9)
#loc9 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":53:12)
#loc10 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":53:5)
#loc11 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":54:77)
#loc12 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":54:12)
#loc13 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":54:5)
#loc14 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":54:81)
#loc15 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":55:5)
#loc16 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":59:5)
#loc17 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":57:9)
#loc18 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":57:29)
#loc19 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":57:22)
#loc20 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":58:22)
#loc21 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":58:9)
#loc22 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":103:1)
#loc23 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":107:1)
#loc24 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":105:5)
#loc25 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":105:13)
#loc26 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":106:5)
#loc27 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":106:13)
#loc28 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":67:1)
#loc29 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":67:82)
#loc30 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":69:1)
#loc31 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":80:1)
#loc32 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":71:5)
#loc33 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":71:9)
#loc34 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":73:12)
#loc35 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":73:5)
#loc36 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":74:81)
#loc37 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":74:12)
#loc38 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":74:5)
#loc39 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":74:85)
#loc40 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":75:5)
#loc41 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":79:5)
#loc42 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":77:9)
#loc43 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":77:29)
#loc44 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":77:22)
#loc45 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":78:22)
#loc46 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":78:9)
#loc47 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":83:1)
#loc48 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":83:82)
#loc49 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":99:19)
#loc53 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":85:1)
#loc54 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":101:1)
#loc55 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":87:5)
#loc56 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":87:9)
#loc57 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":89:12)
#loc58 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":89:5)
#loc59 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":90:81)
#loc60 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":90:12)
#loc61 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":90:5)
#loc62 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":90:85)
#loc63 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":92:5)
#loc64 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":100:5)
#loc65 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":92:9)
#loc66 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":92:16)
#loc67 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":92:24)
#loc68 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":92:31)
#loc69 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":92:27)
#loc70 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":92:45)
#loc71 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":92:58)
#loc72 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":92:65)
#loc73 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":93:5)
#loc74 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":96:5)
#loc75 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":98:5)
#loc76 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":94:9)
#loc77 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":94:29)
#loc78 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":94:22)
#loc79 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":95:22)
#loc80 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":95:9)
#loc81 = loc("CWE190_Integer_Overflow__int_connect_socket_square_61a.c":99:9)
#loc82 = loc(fused[#loc1, #loc2])
#loc83 = loc(fused[#loc3, #loc4])
#loc84 = loc(fused[#loc5, #loc6])
#loc85 = loc(fused[#loc7, #loc8])
#loc86 = loc(fused[#loc10, #loc9])
#loc87 = loc(fused[#loc13, #loc14])
#loc88 = loc(fused[#loc15, #loc16])
#loc89 = loc(fused[#loc17, #loc18])
#loc90 = loc(fused[#loc22, #loc23])
#loc91 = loc(fused[#loc24, #loc25])
#loc92 = loc(fused[#loc26, #loc27])
#loc93 = loc(fused[#loc28, #loc29])
#loc94 = loc(fused[#loc30, #loc31])
#loc95 = loc(fused[#loc32, #loc33])
#loc96 = loc(fused[#loc35, #loc34])
#loc97 = loc(fused[#loc38, #loc39])
#loc98 = loc(fused[#loc40, #loc41])
#loc99 = loc(fused[#loc42, #loc43])
#loc100 = loc(fused[#loc47, #loc48])
#loc101 = loc(fused[#loc50, #loc51])
#loc102 = loc(fused[#loc53, #loc54])
#loc103 = loc(fused[#loc55, #loc56])
#loc104 = loc(fused[#loc58, #loc57])
#loc105 = loc(fused[#loc61, #loc62])
#loc106 = loc(fused[#loc63, #loc64])
#loc107 = loc(fused[#loc65, #loc66])
#loc108 = loc(fused[#loc69, #loc72])
#loc109 = loc(fused[#loc73, #loc74, #loc75, #loc64])
#loc110 = loc(fused[#loc76, #loc77])
