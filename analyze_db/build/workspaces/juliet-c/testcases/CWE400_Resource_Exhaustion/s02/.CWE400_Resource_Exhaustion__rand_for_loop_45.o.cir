!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc124)
  cir.global "private" internal dsolocal @CWE400_Resource_Exhaustion__rand_for_loop_45_badData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc125)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc127)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc128)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc12)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc12)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc12)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc12)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc12)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc12)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc12)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc12)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc12)
      cir.yield %23 : !u32i loc(#loc12)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc12)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc12)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc12)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc12)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc12)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc12)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc12)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc12)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc12)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc12)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc12)
      cir.yield %27 : !u32i loc(#loc12)
    }) : (!cir.bool) -> !u32i loc(#loc12)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc12)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %10 = cir.get_global @CWE400_Resource_Exhaustion__rand_for_loop_45_badData : !cir.ptr<!s32i> loc(#loc125)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %11 = cir.get_global @badSink : !cir.ptr<!cir.func<()>> loc(#loc131)
    cir.call %11() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc16)
    cir.return loc(#loc6)
  } loc(#loc126)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc133)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc20)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc134)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc22)
    cir.return loc(#loc19)
  } loc(#loc132)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc135)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc26)
  cir.func no_proto internal private @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc137)
    %1 = cir.get_global @CWE400_Resource_Exhaustion__rand_for_loop_45_badData : !cir.ptr<!s32i> loc(#loc125)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc139)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc34)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc34)
      cir.store %5, %3 : !u64i, !cir.ptr<!u64i> loc(#loc139)
      cir.scope {
        %6 = cir.const #cir.int<0> : !s32i loc(#loc37)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc37)
        cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc141)
        cir.for : cond {
          %8 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc39)
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc40)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc40)
          %11 = cir.cmp(lt, %8, %10) : !u64i, !cir.bool loc(#loc142)
          cir.condition(%11) loc(#loc41)
        } body {
          cir.scope {
            %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc26)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc26)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc43)
          } loc(#loc143)
          cir.yield loc(#loc36)
        } step {
          %8 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc44)
          %9 = cir.unary(inc, %8) : !u64i, !u64i loc(#loc45)
          cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc144)
          cir.yield loc(#loc140)
        } loc(#loc140)
      } loc(#loc140)
    } loc(#loc138)
    cir.return loc(#loc28)
  } loc(#loc136)
  cir.global "private" internal dsolocal @CWE400_Resource_Exhaustion__rand_for_loop_45_goodG2BData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc145)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc147)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc53)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc148)
    %3 = cir.const #cir.int<20> : !s32i loc(#loc55)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    %5 = cir.get_global @CWE400_Resource_Exhaustion__rand_for_loop_45_goodG2BData : !cir.ptr<!s32i> loc(#loc145)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    %6 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<()>> loc(#loc151)
    cir.call %6() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc59)
    cir.return loc(#loc49)
  } loc(#loc146)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc153)
    %1 = cir.get_global @CWE400_Resource_Exhaustion__rand_for_loop_45_goodG2BData : !cir.ptr<!s32i> loc(#loc145)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc155)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc68)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc68)
      cir.store %5, %3 : !u64i, !cir.ptr<!u64i> loc(#loc155)
      cir.scope {
        %6 = cir.const #cir.int<0> : !s32i loc(#loc71)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc71)
        cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc157)
        cir.for : cond {
          %8 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc73)
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc74)
          %11 = cir.cmp(lt, %8, %10) : !u64i, !cir.bool loc(#loc158)
          cir.condition(%11) loc(#loc75)
        } body {
          cir.scope {
            %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc77)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc77)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc78)
          } loc(#loc159)
          cir.yield loc(#loc70)
        } step {
          %8 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc79)
          %9 = cir.unary(inc, %8) : !u64i, !u64i loc(#loc80)
          cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc160)
          cir.yield loc(#loc156)
        } loc(#loc156)
      } loc(#loc156)
    } loc(#loc154)
    cir.return loc(#loc62)
  } loc(#loc152)
  cir.global "private" internal dsolocal @CWE400_Resource_Exhaustion__rand_for_loop_45_goodB2GData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc161)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc163)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc88)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc90)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc90)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc90)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc90)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc90)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc90)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc90)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc90)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc90)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc90)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc90)
      cir.yield %23 : !u32i loc(#loc90)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc90)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc90)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc90)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc90)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc90)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc90)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc90)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc90)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc90)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc90)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc90)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc90)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc90)
      cir.yield %27 : !u32i loc(#loc90)
    }) : (!cir.bool) -> !u32i loc(#loc90)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc90)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    %10 = cir.get_global @CWE400_Resource_Exhaustion__rand_for_loop_45_goodB2GData : !cir.ptr<!s32i> loc(#loc161)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    %11 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<()>> loc(#loc167)
    cir.call %11() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc94)
    cir.return loc(#loc84)
  } loc(#loc162)
  cir.func no_proto internal private @goodB2GSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc169)
    %1 = cir.get_global @CWE400_Resource_Exhaustion__rand_for_loop_45_goodB2GData : !cir.ptr<!s32i> loc(#loc161)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc171)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc103)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc103)
      cir.store %5, %3 : !u64i, !cir.ptr<!u64i> loc(#loc171)
      cir.scope {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc106)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc107)
        %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc173)
        %9 = cir.ternary(%8, true {
          %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
          %11 = cir.const #cir.int<20> : !s32i loc(#loc110)
          %12 = cir.cmp(le, %10, %11) : !s32i, !cir.bool loc(#loc174)
          %13 = cir.ternary(%12, true {
            %14 = cir.const #true loc(#loc108)
            cir.yield %14 : !cir.bool loc(#loc108)
          }, false {
            %14 = cir.const #false loc(#loc108)
            cir.yield %14 : !cir.bool loc(#loc108)
          }) : (!cir.bool) -> !cir.bool loc(#loc108)
          cir.yield %13 : !cir.bool loc(#loc108)
        }, false {
          %10 = cir.const #false loc(#loc108)
          cir.yield %10 : !cir.bool loc(#loc108)
        }) : (!cir.bool) -> !cir.bool loc(#loc108)
        cir.if %9 {
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc114)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc114)
            cir.store %11, %3 : !u64i, !cir.ptr<!u64i> loc(#loc177)
            cir.for : cond {
              %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc116)
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc117)
              %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc178)
              cir.condition(%15) loc(#loc118)
            } body {
              cir.scope {
                %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc120)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc120)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc121)
              } loc(#loc179)
              cir.yield loc(#loc113)
            } step {
              %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc122)
              %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc123)
              cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc180)
              cir.yield loc(#loc176)
            } loc(#loc176)
          } loc(#loc176)
        } loc(#loc175)
      } loc(#loc172)
    } loc(#loc170)
    cir.return loc(#loc97)
  } loc(#loc168)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_45.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":20:1)
#loc4 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":20:12)
#loc5 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":39:1)
#loc6 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":48:1)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":41:5)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":41:9)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":43:14)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":43:13)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":43:5)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":45:13)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":45:5)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":46:60)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":46:5)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":47:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":47:13)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":107:1)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":111:1)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":109:5)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":109:13)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":110:5)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":110:13)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":34:23)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":26:1)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":37:1)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":28:5)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":28:17)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":29:5)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":36:5)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":30:9)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":30:20)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":32:9)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":35:9)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":32:18)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":32:14)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":32:21)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":32:33)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":32:23)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":33:9)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":34:13)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":32:41)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":32:40)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":21:1)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":21:12)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":68:1)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":77:1)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":70:5)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":70:9)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":72:14)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":72:13)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":72:5)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":74:13)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":74:5)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":75:64)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":75:5)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":76:5)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":76:17)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":55:1)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":66:1)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":57:5)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":57:17)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":58:5)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":65:5)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":59:9)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":59:20)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":61:9)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":64:9)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":61:18)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":61:14)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":61:21)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":61:33)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":61:23)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":62:9)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":63:23)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":63:13)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":61:41)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":61:40)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":22:1)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":22:12)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":96:1)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":105:1)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":98:5)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":98:9)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":100:14)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":100:13)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":100:5)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":102:13)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":102:5)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":103:64)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":103:5)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":104:5)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":104:17)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":80:1)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":94:1)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":82:5)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":82:17)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":83:5)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":93:5)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":84:9)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":84:20)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":86:9)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":92:9)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":86:13)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":86:21)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":86:23)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":86:26)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":86:35)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":87:9)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":88:13)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":91:13)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":88:22)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":88:18)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":88:25)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":88:37)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":88:27)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":89:13)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":90:27)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":90:17)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":88:45)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_for_loop_45.c":88:44)
#loc124 = loc(fused[#loc1, #loc2])
#loc125 = loc(fused[#loc3, #loc4])
#loc126 = loc(fused[#loc5, #loc6])
#loc127 = loc(fused[#loc7, #loc8])
#loc128 = loc(fused[#loc11, #loc9])
#loc129 = loc(fused[#loc13, #loc12])
#loc130 = loc(fused[#loc15, #loc14])
#loc131 = loc(fused[#loc16, #loc17])
#loc132 = loc(fused[#loc18, #loc19])
#loc133 = loc(fused[#loc20, #loc21])
#loc134 = loc(fused[#loc22, #loc23])
#loc135 = loc(fused[#loc24, #loc25])
#loc136 = loc(fused[#loc27, #loc28])
#loc137 = loc(fused[#loc29, #loc30])
#loc138 = loc(fused[#loc31, #loc32])
#loc139 = loc(fused[#loc33, #loc34])
#loc140 = loc(fused[#loc35, #loc36])
#loc141 = loc(fused[#loc38, #loc37])
#loc142 = loc(fused[#loc39, #loc40])
#loc143 = loc(fused[#loc42, #loc36])
#loc144 = loc(fused[#loc45, #loc44])
#loc145 = loc(fused[#loc46, #loc47])
#loc146 = loc(fused[#loc48, #loc49])
#loc147 = loc(fused[#loc50, #loc51])
#loc148 = loc(fused[#loc54, #loc52])
#loc149 = loc(fused[#loc56, #loc55])
#loc150 = loc(fused[#loc58, #loc57])
#loc151 = loc(fused[#loc59, #loc60])
#loc152 = loc(fused[#loc61, #loc62])
#loc153 = loc(fused[#loc63, #loc64])
#loc154 = loc(fused[#loc65, #loc66])
#loc155 = loc(fused[#loc67, #loc68])
#loc156 = loc(fused[#loc69, #loc70])
#loc157 = loc(fused[#loc72, #loc71])
#loc158 = loc(fused[#loc73, #loc74])
#loc159 = loc(fused[#loc76, #loc70])
#loc160 = loc(fused[#loc80, #loc79])
#loc161 = loc(fused[#loc81, #loc82])
#loc162 = loc(fused[#loc83, #loc84])
#loc163 = loc(fused[#loc85, #loc86])
#loc164 = loc(fused[#loc89, #loc87])
#loc165 = loc(fused[#loc91, #loc90])
#loc166 = loc(fused[#loc93, #loc92])
#loc167 = loc(fused[#loc94, #loc95])
#loc168 = loc(fused[#loc96, #loc97])
#loc169 = loc(fused[#loc98, #loc99])
#loc170 = loc(fused[#loc100, #loc101])
#loc171 = loc(fused[#loc102, #loc103])
#loc172 = loc(fused[#loc104, #loc105])
#loc173 = loc(fused[#loc106, #loc107])
#loc174 = loc(fused[#loc109, #loc110])
#loc175 = loc(fused[#loc111, #loc105])
#loc176 = loc(fused[#loc112, #loc113])
#loc177 = loc(fused[#loc115, #loc114])
#loc178 = loc(fused[#loc116, #loc117])
#loc179 = loc(fused[#loc119, #loc113])
#loc180 = loc(fused[#loc123, #loc122])
