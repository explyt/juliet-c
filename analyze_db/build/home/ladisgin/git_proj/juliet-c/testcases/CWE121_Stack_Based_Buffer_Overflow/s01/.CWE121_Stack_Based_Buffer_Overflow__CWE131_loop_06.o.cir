!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc132)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc134)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc135)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc136)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc11)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc137)
    cir.br ^bb1 loc(#loc138)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<5> : !s32i loc(#loc15)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc16)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc139)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc140)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<10> : !s32i loc(#loc18)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc18)
    %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc18)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc18)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc18)
    cir.store %11, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc141)
    cir.br ^bb3 loc(#loc14)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc142)
  ^bb5:  // pred: ^bb4
    %12 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc134)
    cir.store %12, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc134)
    cir.br ^bb6 loc(#loc143)
  ^bb6:  // pred: ^bb5
    %13 = cir.const #cir.int<0> : !s32i loc(#loc24)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc24)
    cir.store %14, %1 : !u64i, !cir.ptr<!u64i> loc(#loc144)
    cir.br ^bb7 loc(#loc143)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %15 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc26)
    %16 = cir.const #cir.int<10> : !s32i loc(#loc27)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc27)
    %18 = cir.cmp(lt, %15, %17) : !u64i, !cir.bool loc(#loc145)
    cir.brcond %18 ^bb8, ^bb12 loc(#loc28)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc146)
  ^bb9:  // pred: ^bb8
    %19 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc30)
    %20 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc31)
    %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc31)
    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
    %24 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc33)
    %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !u64i), !cir.ptr<!s32i> loc(#loc34)
    cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    cir.br ^bb10 loc(#loc23)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc23)
  ^bb11:  // pred: ^bb10
    %26 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc36)
    %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc37)
    cir.store %27, %1 : !u64i, !cir.ptr<!u64i> loc(#loc148)
    cir.br ^bb7 loc(#loc143)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc23)
  ^bb13:  // pred: ^bb12
    %28 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc39)
    %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc40)
    %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc41)
    cir.br ^bb14 loc(#loc21)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc4)
  } loc(#loc133)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc150)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc151)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc43)
  } loc(#loc149)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc152)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc154)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc155)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc156)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc59)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc157)
    cir.br ^bb1 loc(#loc158)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<5> : !s32i loc(#loc63)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc64)
    %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc159)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc160)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    cir.br ^bb4 loc(#loc66)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<10> : !s32i loc(#loc69)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc69)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc69)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc69)
    %13 = cir.alloca !u8i, !cir.ptr<!u8i>, %12 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc69)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc69)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc69)
    cir.store %15, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc161)
    cir.br ^bb4 loc(#loc62)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc62)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc162)
  ^bb6:  // pred: ^bb5
    %16 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc154)
    cir.store %16, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc154)
    cir.br ^bb7 loc(#loc163)
  ^bb7:  // pred: ^bb6
    %17 = cir.const #cir.int<0> : !s32i loc(#loc75)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc75)
    cir.store %18, %1 : !u64i, !cir.ptr<!u64i> loc(#loc164)
    cir.br ^bb8 loc(#loc163)
  ^bb8:  // 2 preds: ^bb7, ^bb12
    %19 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc77)
    %20 = cir.const #cir.int<10> : !s32i loc(#loc78)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc78)
    %22 = cir.cmp(lt, %19, %21) : !u64i, !cir.bool loc(#loc165)
    cir.brcond %22 ^bb9, ^bb13 loc(#loc79)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc166)
  ^bb10:  // pred: ^bb9
    %23 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc81)
    %24 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc82)
    %25 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc82)
    %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    %27 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc83)
    %28 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc84)
    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !u64i), !cir.ptr<!s32i> loc(#loc85)
    cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc167)
    cir.br ^bb11 loc(#loc74)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc74)
  ^bb12:  // pred: ^bb11
    %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc87)
    %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc88)
    cir.store %31, %1 : !u64i, !cir.ptr<!u64i> loc(#loc168)
    cir.br ^bb8 loc(#loc163)
  ^bb13:  // pred: ^bb8
    cir.br ^bb14 loc(#loc74)
  ^bb14:  // pred: ^bb13
    %32 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc89)
    %33 = cir.const #cir.int<0> : !s32i loc(#loc90)
    %34 = cir.ptr_stride(%32 : !cir.ptr<!s32i>, %33 : !s32i), !cir.ptr<!s32i> loc(#loc91)
    %35 = cir.load %34 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    cir.call @printIntLine(%35) : (!s32i) -> () loc(#loc92)
    cir.br ^bb15 loc(#loc72)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc52)
  } loc(#loc153)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc170)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc171)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc172)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc101)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc173)
    cir.br ^bb1 loc(#loc174)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<5> : !s32i loc(#loc105)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc106)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc175)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc176)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<10> : !s32i loc(#loc108)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc108)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc108)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc108)
    %11 = cir.alloca !u8i, !cir.ptr<!u8i>, %10 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc108)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc108)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc108)
    cir.store %13, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc177)
    cir.br ^bb3 loc(#loc104)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc104)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc178)
  ^bb5:  // pred: ^bb4
    %14 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc170)
    cir.store %14, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc170)
    cir.br ^bb6 loc(#loc179)
  ^bb6:  // pred: ^bb5
    %15 = cir.const #cir.int<0> : !s32i loc(#loc114)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc114)
    cir.store %16, %1 : !u64i, !cir.ptr<!u64i> loc(#loc180)
    cir.br ^bb7 loc(#loc179)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %17 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc116)
    %18 = cir.const #cir.int<10> : !s32i loc(#loc117)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc117)
    %20 = cir.cmp(lt, %17, %19) : !u64i, !cir.bool loc(#loc181)
    cir.brcond %20 ^bb8, ^bb12 loc(#loc118)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc182)
  ^bb9:  // pred: ^bb8
    %21 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc120)
    %22 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc121)
    %23 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %21 : !u64i), !cir.ptr<!s32i> loc(#loc121)
    %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc122)
    %26 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc123)
    %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !u64i), !cir.ptr<!s32i> loc(#loc124)
    cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    cir.br ^bb10 loc(#loc113)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc113)
  ^bb11:  // pred: ^bb10
    %28 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc126)
    %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc127)
    cir.store %29, %1 : !u64i, !cir.ptr<!u64i> loc(#loc184)
    cir.br ^bb7 loc(#loc179)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc113)
  ^bb13:  // pred: ^bb12
    %30 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc128)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc129)
    %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !s32i), !cir.ptr<!s32i> loc(#loc130)
    %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc131)
    cir.br ^bb14 loc(#loc111)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc94)
  } loc(#loc169)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":25:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":44:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":35:9)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":35:28)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":36:9)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":36:16)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":27:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":27:11)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":28:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":28:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":29:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":33:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":29:8)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":29:27)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":30:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":32:23)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":32:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":34:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":43:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":38:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":41:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":38:18)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":38:14)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":38:21)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":38:25)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":38:23)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":39:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":40:30)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":40:23)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":40:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":40:18)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":40:19)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":40:31)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":38:30)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":38:29)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":42:22)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":42:27)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":42:28)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":42:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":99:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":103:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":101:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":101:14)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":102:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":102:14)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":58:19)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":51:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":75:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":66:9)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":66:28)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":67:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":67:16)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":53:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":53:11)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":54:12)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":54:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":55:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":64:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":55:8)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":55:27)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":56:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":59:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":61:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":58:9)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":63:23)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":63:9)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":65:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":74:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":69:9)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":72:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":69:18)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":69:14)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":69:21)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":69:25)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":69:23)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":70:9)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":71:30)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":71:23)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":71:13)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":71:18)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":71:19)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":71:31)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":69:30)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":69:29)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":73:22)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":73:27)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":73:28)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":73:9)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":78:1)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":97:1)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":88:9)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":88:28)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":89:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":89:16)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":80:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":80:11)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":81:12)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":81:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":82:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":86:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":82:8)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":82:27)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":83:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":85:23)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":85:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":87:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":96:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":91:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":94:9)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":91:18)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":91:14)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":91:21)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":91:25)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":91:23)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":92:9)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":93:30)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":93:23)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":93:13)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":93:18)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":93:19)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":93:31)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":91:30)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":91:29)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":95:22)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":95:27)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":95:28)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":95:9)
#loc132 = loc(fused[#loc1, #loc2])
#loc133 = loc(fused[#loc3, #loc4])
#loc134 = loc(fused[#loc5, #loc6])
#loc135 = loc(fused[#loc7, #loc8])
#loc136 = loc(fused[#loc9, #loc10])
#loc137 = loc(fused[#loc12, #loc11])
#loc138 = loc(fused[#loc13, #loc14])
#loc139 = loc(fused[#loc15, #loc16])
#loc140 = loc(fused[#loc17, #loc14])
#loc141 = loc(fused[#loc19, #loc18])
#loc142 = loc(fused[#loc20, #loc21])
#loc143 = loc(fused[#loc22, #loc23])
#loc144 = loc(fused[#loc25, #loc24])
#loc145 = loc(fused[#loc26, #loc27])
#loc146 = loc(fused[#loc29, #loc23])
#loc147 = loc(fused[#loc32, #loc35])
#loc148 = loc(fused[#loc37, #loc36])
#loc149 = loc(fused[#loc42, #loc43])
#loc150 = loc(fused[#loc44, #loc45])
#loc151 = loc(fused[#loc46, #loc47])
#loc152 = loc(fused[#loc48, #loc49])
#loc153 = loc(fused[#loc51, #loc52])
#loc154 = loc(fused[#loc53, #loc54])
#loc155 = loc(fused[#loc55, #loc56])
#loc156 = loc(fused[#loc57, #loc58])
#loc157 = loc(fused[#loc60, #loc59])
#loc158 = loc(fused[#loc61, #loc62])
#loc159 = loc(fused[#loc63, #loc64])
#loc160 = loc(fused[#loc65, #loc66, #loc67, #loc62])
#loc161 = loc(fused[#loc70, #loc69])
#loc162 = loc(fused[#loc71, #loc72])
#loc163 = loc(fused[#loc73, #loc74])
#loc164 = loc(fused[#loc76, #loc75])
#loc165 = loc(fused[#loc77, #loc78])
#loc166 = loc(fused[#loc80, #loc74])
#loc167 = loc(fused[#loc83, #loc86])
#loc168 = loc(fused[#loc88, #loc87])
#loc169 = loc(fused[#loc93, #loc94])
#loc170 = loc(fused[#loc95, #loc96])
#loc171 = loc(fused[#loc97, #loc98])
#loc172 = loc(fused[#loc99, #loc100])
#loc173 = loc(fused[#loc102, #loc101])
#loc174 = loc(fused[#loc103, #loc104])
#loc175 = loc(fused[#loc105, #loc106])
#loc176 = loc(fused[#loc107, #loc104])
#loc177 = loc(fused[#loc109, #loc108])
#loc178 = loc(fused[#loc110, #loc111])
#loc179 = loc(fused[#loc112, #loc113])
#loc180 = loc(fused[#loc115, #loc114])
#loc181 = loc(fused[#loc116, #loc117])
#loc182 = loc(fused[#loc119, #loc113])
#loc183 = loc(fused[#loc122, #loc125])
#loc184 = loc(fused[#loc127, #loc126])
