!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc149)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc150)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc151)
  cir.func private @printLongLongLine(!s64i) loc(#loc152)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc153)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc155)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc156)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc17)
    cir.store %2, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc157)
    cir.br ^bb1 loc(#loc158)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc149)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc22)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc159)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc160)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc24)
    %8 = cir.const #cir.int<50> : !s32i loc(#loc25)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc25)
    %10 = cir.const #cir.int<8> : !u64i loc(#loc161)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc162)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc163)
    cir.store %13, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc164)
    cir.br ^bb3 loc(#loc165)
  ^bb3:  // pred: ^bb2
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc32)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc33)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s64i>, !cir.bool loc(#loc166)
    cir.brcond %17 ^bb4, ^bb5 loc(#loc167)
  ^bb4:  // pred: ^bb3
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc35)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc37)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc35)
    cir.br ^bb5 loc(#loc31)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc31)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc20)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc168)
  ^bb9:  // pred: ^bb8
    %21 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc155)
    cir.store %21, %0 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc155)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc40)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc40)
    %24 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc41)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc41)
    %26 = cir.const #cir.int<100> : !s32i loc(#loc42)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc42)
    %28 = cir.const #cir.int<8> : !u64i loc(#loc169)
    %29 = cir.binop(mul, %27, %28) : !u64i loc(#loc170)
    cir.libc.memcpy %29 bytes from %25 to %23 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc171)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc47)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc48)
    %32 = cir.ptr_stride(%30 : !cir.ptr<!s64i>, %31 : !s32i), !cir.ptr<!s64i> loc(#loc49)
    %33 = cir.load %32 : !cir.ptr<!s64i>, !s64i loc(#loc47)
    cir.call @printLongLongLine(%33) : (!s64i) -> () loc(#loc50)
    %34 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc51)
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc52)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc52)
    cir.call @free(%36) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc51)
    cir.br ^bb10 loc(#loc39)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc12)
  } loc(#loc154)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc173)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc55)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc174)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc57)
    cir.return loc(#loc54)
  } loc(#loc172)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc175)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc61)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc177)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc178)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc68)
    cir.store %2, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc179)
    cir.br ^bb1 loc(#loc180)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc149)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc72)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc73)
    %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc181)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc182)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc61)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    cir.br ^bb8 loc(#loc75)
  ^bb3:  // pred: ^bb1
    %9 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc78)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc79)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc79)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc183)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc184)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc78)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc185)
    cir.store %15, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc186)
    cir.br ^bb4 loc(#loc187)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc86)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc87)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc87)
    %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s64i>, !cir.bool loc(#loc188)
    cir.brcond %19 ^bb5, ^bb6 loc(#loc189)
  ^bb5:  // pred: ^bb4
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc89)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc91)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc89)
    cir.br ^bb6 loc(#loc85)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc85)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc71)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc71)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc190)
  ^bb10:  // pred: ^bb9
    %23 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc177)
    cir.store %23, %0 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc177)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc94)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc94)
    %26 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc95)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc95)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc96)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc96)
    %30 = cir.const #cir.int<8> : !u64i loc(#loc191)
    %31 = cir.binop(mul, %29, %30) : !u64i loc(#loc192)
    cir.libc.memcpy %31 bytes from %27 to %25 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc193)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc101)
    %33 = cir.const #cir.int<0> : !s32i loc(#loc102)
    %34 = cir.ptr_stride(%32 : !cir.ptr<!s64i>, %33 : !s32i), !cir.ptr<!s64i> loc(#loc103)
    %35 = cir.load %34 : !cir.ptr<!s64i>, !s64i loc(#loc101)
    cir.call @printLongLongLine(%35) : (!s64i) -> () loc(#loc104)
    %36 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc105)
    %37 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc106)
    %38 = cir.cast(bitcast, %37 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc106)
    cir.call @free(%38) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc105)
    cir.br ^bb11 loc(#loc93)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc63)
  } loc(#loc176)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc195)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc196)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc113)
    cir.store %2, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc197)
    cir.br ^bb1 loc(#loc198)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc149)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc118)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc199)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc200)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc120)
    %8 = cir.const #cir.int<100> : !s32i loc(#loc121)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc121)
    %10 = cir.const #cir.int<8> : !u64i loc(#loc201)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc202)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc120)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc203)
    cir.store %13, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc204)
    cir.br ^bb3 loc(#loc205)
  ^bb3:  // pred: ^bb2
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc128)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc129)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc129)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s64i>, !cir.bool loc(#loc206)
    cir.brcond %17 ^bb4, ^bb5 loc(#loc207)
  ^bb4:  // pred: ^bb3
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc131)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc132)
    %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc133)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc131)
    cir.br ^bb5 loc(#loc127)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc127)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc116)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc116)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc208)
  ^bb9:  // pred: ^bb8
    %21 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc195)
    cir.store %21, %0 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc195)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc136)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc136)
    %24 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc137)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc137)
    %26 = cir.const #cir.int<100> : !s32i loc(#loc138)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc138)
    %28 = cir.const #cir.int<8> : !u64i loc(#loc209)
    %29 = cir.binop(mul, %27, %28) : !u64i loc(#loc210)
    cir.libc.memcpy %29 bytes from %25 to %23 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc211)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc143)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc144)
    %32 = cir.ptr_stride(%30 : !cir.ptr<!s64i>, %31 : !s32i), !cir.ptr<!s64i> loc(#loc145)
    %33 = cir.load %32 : !cir.ptr<!s64i>, !s64i loc(#loc143)
    cir.call @printLongLongLine(%33) : (!s64i) -> () loc(#loc146)
    %34 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc147)
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc148)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc148)
    cir.call @free(%36) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc147)
    cir.br ^bb10 loc(#loc135)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc108)
  } loc(#loc194)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":23:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":23:25)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":27:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":44:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":38:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":38:33)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":29:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":29:15)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":30:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":30:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":31:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":36:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":31:8)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":31:20)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":32:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":34:27)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":34:34)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":34:37)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":34:51)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":34:52)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":34:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":35:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":35:37)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":35:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":35:21)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":35:27)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":35:28)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":35:34)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":35:33)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":37:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":43:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":40:16)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":40:22)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":40:30)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":40:34)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":40:48)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":40:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":40:49)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":41:27)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":41:32)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":41:33)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":41:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":42:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":42:14)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":95:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":99:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":97:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":97:14)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":98:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":98:14)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc60 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":58:19)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":51:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":73:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":67:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":67:33)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":53:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":53:15)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":54:12)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":54:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":55:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":65:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":55:8)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":55:20)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":56:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":59:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":61:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":58:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":63:27)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":63:34)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":63:38)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":63:52)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":63:53)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":63:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":64:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":64:37)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":64:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":64:21)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":64:27)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":64:28)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":64:34)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":64:33)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":66:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":72:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":69:16)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":69:22)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":69:30)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":69:34)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":69:48)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":69:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":69:49)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":70:27)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":70:32)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":70:33)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":70:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":71:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":71:14)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":76:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":93:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":87:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":87:33)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":78:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":78:15)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":79:12)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":79:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":80:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":85:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":80:8)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":80:20)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":81:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":83:27)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":83:34)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":83:38)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":83:52)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":83:53)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":83:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":84:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":84:37)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":84:13)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":84:21)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":84:27)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":84:28)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":84:34)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":84:33)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":86:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":92:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":89:16)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":89:22)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":89:30)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":89:34)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":89:48)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":89:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":89:49)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":90:27)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":90:32)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":90:33)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":90:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":91:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c":91:14)
#loc149 = loc(fused[#loc1, #loc2])
#loc150 = loc(fused[#loc3, #loc4])
#loc151 = loc(fused[#loc5, #loc6])
#loc152 = loc(fused[#loc7, #loc8])
#loc153 = loc(fused[#loc9, #loc10])
#loc154 = loc(fused[#loc11, #loc12])
#loc155 = loc(fused[#loc13, #loc14])
#loc156 = loc(fused[#loc15, #loc16])
#loc157 = loc(fused[#loc18, #loc17])
#loc158 = loc(fused[#loc19, #loc20])
#loc159 = loc(fused[#loc21, #loc22])
#loc160 = loc(fused[#loc23, #loc20])
#loc161 = loc(fused[#loc26, #loc27])
#loc162 = loc(fused[#loc25, #loc27])
#loc163 = loc(fused[#loc24, #loc28])
#loc164 = loc(fused[#loc29, #loc28])
#loc165 = loc(fused[#loc30, #loc31])
#loc166 = loc(fused[#loc32, #loc33])
#loc167 = loc(fused[#loc34, #loc31])
#loc168 = loc(fused[#loc38, #loc39])
#loc169 = loc(fused[#loc43, #loc44])
#loc170 = loc(fused[#loc42, #loc44])
#loc171 = loc(fused[#loc45, #loc46])
#loc172 = loc(fused[#loc53, #loc54])
#loc173 = loc(fused[#loc55, #loc56])
#loc174 = loc(fused[#loc57, #loc58])
#loc175 = loc(fused[#loc59, #loc60])
#loc176 = loc(fused[#loc62, #loc63])
#loc177 = loc(fused[#loc64, #loc65])
#loc178 = loc(fused[#loc66, #loc67])
#loc179 = loc(fused[#loc69, #loc68])
#loc180 = loc(fused[#loc70, #loc71])
#loc181 = loc(fused[#loc72, #loc73])
#loc182 = loc(fused[#loc74, #loc75, #loc76, #loc71])
#loc183 = loc(fused[#loc80, #loc81])
#loc184 = loc(fused[#loc79, #loc81])
#loc185 = loc(fused[#loc78, #loc82])
#loc186 = loc(fused[#loc83, #loc82])
#loc187 = loc(fused[#loc84, #loc85])
#loc188 = loc(fused[#loc86, #loc87])
#loc189 = loc(fused[#loc88, #loc85])
#loc190 = loc(fused[#loc92, #loc93])
#loc191 = loc(fused[#loc97, #loc98])
#loc192 = loc(fused[#loc96, #loc98])
#loc193 = loc(fused[#loc99, #loc100])
#loc194 = loc(fused[#loc107, #loc108])
#loc195 = loc(fused[#loc109, #loc110])
#loc196 = loc(fused[#loc111, #loc112])
#loc197 = loc(fused[#loc114, #loc113])
#loc198 = loc(fused[#loc115, #loc116])
#loc199 = loc(fused[#loc117, #loc118])
#loc200 = loc(fused[#loc119, #loc116])
#loc201 = loc(fused[#loc122, #loc123])
#loc202 = loc(fused[#loc121, #loc123])
#loc203 = loc(fused[#loc120, #loc124])
#loc204 = loc(fused[#loc125, #loc124])
#loc205 = loc(fused[#loc126, #loc127])
#loc206 = loc(fused[#loc128, #loc129])
#loc207 = loc(fused[#loc130, #loc127])
#loc208 = loc(fused[#loc134, #loc135])
#loc209 = loc(fused[#loc139, #loc140])
#loc210 = loc(fused[#loc138, #loc140])
#loc211 = loc(fused[#loc141, #loc142])
