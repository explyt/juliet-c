!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":43:16)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":65:16)
#loc94 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":95:16)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc161)
  cir.func private @printIntLine(!s32i) loc(#loc162)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_modulo_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    cir.br ^bb1 loc(#loc166)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc167)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc14)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc168)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc17)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc17)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc17)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc17)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc17)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc17)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc17)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc17)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc17)
    cir.br ^bb5(%21 : !u32i) loc(#loc17)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc17)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc17)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc17)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc17)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc17)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc17)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc17)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc17)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc17)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc17)
    cir.br ^bb5(%37 : !u32i) loc(#loc17)
  ^bb5(%38: !u32i loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":43:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc17)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc17)
    cir.store %39, %0 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    cir.br ^bb7 loc(#loc13)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc13)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc170)
  ^bb9:  // pred: ^bb8
    %40 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc171)
    %41 = cir.call %40() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc21)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %42 ^bb10, ^bb11 loc(#loc172)
  ^bb10:  // pred: ^bb9
    %43 = cir.const #cir.int<100> : !s32i loc(#loc24)
    %44 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %45 = cir.binop(rem, %43, %44) : !s32i loc(#loc173)
    cir.call @printIntLine(%45) : (!s32i) -> () loc(#loc26)
    cir.br ^bb11 loc(#loc20)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc20)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc6)
  } loc(#loc163)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_modulo_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc177)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc28)
  } loc(#loc174)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc38)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc39)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc180)
    cir.return %2 : !s32i loc(#loc180)
  } loc(#loc179)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc181)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc44)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc183)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc50)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    cir.br ^bb1 loc(#loc185)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc186)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc54)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc54)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc187)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc57)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc57)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc57)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc57)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc57)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc57)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc57)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc57)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc57)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc57)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc57)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc57)
    cir.br ^bb5(%21 : !u32i) loc(#loc57)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc57)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc57)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc57)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc57)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc57)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc57)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc57)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc57)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc57)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc57)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc57)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc57)
    cir.br ^bb5(%37 : !u32i) loc(#loc57)
  ^bb5(%38: !u32i loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":65:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc57)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc57)
    cir.store %39, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    cir.br ^bb7 loc(#loc53)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc53)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc189)
  ^bb9:  // pred: ^bb8
    %40 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc190)
    %41 = cir.call %40() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc61)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc61)
    cir.brcond %42 ^bb10, ^bb11 loc(#loc191)
  ^bb10:  // pred: ^bb9
    %43 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    cir.br ^bb17 loc(#loc64)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc192)
  ^bb12:  // pred: ^bb11
    %45 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    %46 = cir.const #cir.int<0> : !s32i loc(#loc70)
    %47 = cir.cmp(ne, %45, %46) : !s32i, !cir.bool loc(#loc193)
    cir.brcond %47 ^bb13, ^bb14 loc(#loc194)
  ^bb13:  // pred: ^bb12
    %48 = cir.const #cir.int<100> : !s32i loc(#loc74)
    %49 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    %50 = cir.binop(rem, %48, %49) : !s32i loc(#loc195)
    cir.call @printIntLine(%50) : (!s32i) -> () loc(#loc76)
    cir.br ^bb15 loc(#loc72)
  ^bb14:  // pred: ^bb12
    %51 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc44)
    %52 = cir.cast(array_to_ptrdecay, %51 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%52) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    cir.br ^bb15 loc(#loc68)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc68)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc60)
  ^bb17:  // 2 preds: ^bb10, ^bb16
    cir.br ^bb18 loc(#loc60)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc46)
  } loc(#loc182)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc79)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc80)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc197)
    cir.return %2 : !s32i loc(#loc197)
  } loc(#loc196)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc199)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc87)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    cir.br ^bb1 loc(#loc201)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc202)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc91)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc91)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc203)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc94)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc94)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc94)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc94)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc94)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc94)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc94)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc94)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc94)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc94)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc94)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc94)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc94)
    cir.br ^bb5(%21 : !u32i) loc(#loc94)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc94)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc94)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc94)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc94)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc94)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc94)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc94)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc94)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc94)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc94)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc94)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc94)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc94)
    cir.br ^bb5(%37 : !u32i) loc(#loc94)
  ^bb5(%38: !u32i loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":95:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc94)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc94)
    cir.store %39, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    cir.br ^bb7 loc(#loc90)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc90)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc205)
  ^bb9:  // pred: ^bb8
    %40 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc206)
    %41 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc98)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc98)
    cir.brcond %42 ^bb10, ^bb16 loc(#loc207)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc208)
  ^bb11:  // pred: ^bb10
    %43 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    %44 = cir.const #cir.int<0> : !s32i loc(#loc104)
    %45 = cir.cmp(ne, %43, %44) : !s32i, !cir.bool loc(#loc209)
    cir.brcond %45 ^bb12, ^bb13 loc(#loc210)
  ^bb12:  // pred: ^bb11
    %46 = cir.const #cir.int<100> : !s32i loc(#loc108)
    %47 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    %48 = cir.binop(rem, %46, %47) : !s32i loc(#loc211)
    cir.call @printIntLine(%48) : (!s32i) -> () loc(#loc110)
    cir.br ^bb14 loc(#loc106)
  ^bb13:  // pred: ^bb11
    %49 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc111)
    %50 = cir.cast(array_to_ptrdecay, %49 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc111)
    cir.call @printLine(%50) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    cir.br ^bb14 loc(#loc102)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc102)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc97)
  ^bb16:  // 2 preds: ^bb9, ^bb15
    cir.br ^bb17 loc(#loc97)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc83)
  } loc(#loc198)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc118)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    cir.br ^bb1 loc(#loc215)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc216)
    %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc122)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc122)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc217)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc127)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc127)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc128)
    cir.br ^bb4 loc(#loc125)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<7> : !s32i loc(#loc129)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
    cir.br ^bb4 loc(#loc121)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc121)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc219)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc220)
    %10 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc133)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc133)
    cir.brcond %11 ^bb7, ^bb8 loc(#loc221)
  ^bb7:  // pred: ^bb6
    %12 = cir.const #cir.int<100> : !s32i loc(#loc136)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    %14 = cir.binop(rem, %12, %13) : !s32i loc(#loc222)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc138)
    cir.br ^bb8 loc(#loc132)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc132)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc114)
  } loc(#loc212)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc224)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc143)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc144)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    cir.br ^bb1 loc(#loc226)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc227)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc148)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc148)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc228)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<7> : !s32i loc(#loc151)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    cir.br ^bb3 loc(#loc147)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc147)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc230)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc231)
    %8 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc155)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc155)
    cir.brcond %9 ^bb6, ^bb7 loc(#loc232)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.int<100> : !s32i loc(#loc158)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc159)
    %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc233)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc160)
    cir.br ^bb7 loc(#loc154)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc154)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc140)
  } loc(#loc223)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":35:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":50:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":37:5)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":37:9)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":39:13)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":39:12)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":39:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":40:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":44:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":40:8)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":40:26)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":41:5)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":43:9)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":45:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":49:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":45:8)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":45:26)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":46:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":48:22)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":48:28)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":48:9)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":152:1)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":158:1)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":154:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":154:14)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":155:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":155:14)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":156:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":156:14)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":157:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":157:14)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":23:1)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":26:1)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":25:12)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":25:5)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":70:19)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":81:23)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":57:1)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":84:1)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":59:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":59:9)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":61:13)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":61:12)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":61:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":62:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":66:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":62:8)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":62:26)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":63:5)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":65:9)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":67:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":83:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":67:8)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":67:27)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":68:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":71:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":73:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":70:9)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":75:9)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":82:9)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":75:13)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":75:21)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":76:9)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":78:9)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":80:9)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":77:26)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":77:32)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":77:13)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":81:13)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":28:1)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":31:1)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":30:12)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":30:5)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":87:1)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":109:1)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":89:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":89:9)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":91:13)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":91:12)
#loc88 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":91:5)
#loc89 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":92:5)
#loc90 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":96:5)
#loc91 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":92:8)
#loc92 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":92:26)
#loc93 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":93:5)
#loc95 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":95:9)
#loc96 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":97:5)
#loc97 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":108:5)
#loc98 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":97:8)
#loc99 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":97:26)
#loc100 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":98:5)
#loc101 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":100:9)
#loc102 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":107:9)
#loc103 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":100:13)
#loc104 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":100:21)
#loc105 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":101:9)
#loc106 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":103:9)
#loc107 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":105:9)
#loc108 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":102:26)
#loc109 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":102:32)
#loc110 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":102:13)
#loc111 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":106:23)
#loc112 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":106:13)
#loc113 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":112:1)
#loc114 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":132:1)
#loc115 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":114:5)
#loc116 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":114:9)
#loc117 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":116:13)
#loc118 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":116:12)
#loc119 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":116:5)
#loc120 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":117:5)
#loc121 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":126:5)
#loc122 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":117:8)
#loc123 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":117:27)
#loc124 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":118:5)
#loc125 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":121:5)
#loc126 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":123:5)
#loc127 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":120:19)
#loc128 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":120:9)
#loc129 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":125:16)
#loc130 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":125:9)
#loc131 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":127:5)
#loc132 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":131:5)
#loc133 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":127:8)
#loc134 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":127:26)
#loc135 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":128:5)
#loc136 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":130:22)
#loc137 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":130:28)
#loc138 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":130:9)
#loc139 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":135:1)
#loc140 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":150:1)
#loc141 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":137:5)
#loc142 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":137:9)
#loc143 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":139:13)
#loc144 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":139:12)
#loc145 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":139:5)
#loc146 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":140:5)
#loc147 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":144:5)
#loc148 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":140:8)
#loc149 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":140:26)
#loc150 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":141:5)
#loc151 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":143:16)
#loc152 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":143:9)
#loc153 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":145:5)
#loc154 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":149:5)
#loc155 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":145:8)
#loc156 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":145:26)
#loc157 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":146:5)
#loc158 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":148:22)
#loc159 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":148:28)
#loc160 = loc("CWE369_Divide_by_Zero__int_rand_modulo_08.c":148:9)
#loc161 = loc(fused[#loc1, #loc2])
#loc162 = loc(fused[#loc3, #loc4])
#loc163 = loc(fused[#loc5, #loc6])
#loc164 = loc(fused[#loc7, #loc8])
#loc165 = loc(fused[#loc11, #loc9])
#loc166 = loc(fused[#loc12, #loc13])
#loc167 = loc(fused[#loc14, #loc15])
#loc168 = loc(fused[#loc16, #loc13])
#loc169 = loc(fused[#loc18, #loc17])
#loc170 = loc(fused[#loc19, #loc20])
#loc171 = loc(fused[#loc21, #loc22])
#loc172 = loc(fused[#loc23, #loc20])
#loc173 = loc(fused[#loc24, #loc25])
#loc174 = loc(fused[#loc27, #loc28])
#loc175 = loc(fused[#loc29, #loc30])
#loc176 = loc(fused[#loc31, #loc32])
#loc177 = loc(fused[#loc33, #loc34])
#loc178 = loc(fused[#loc35, #loc36])
#loc179 = loc(fused[#loc37, #loc38])
#loc180 = loc(fused[#loc40, #loc39])
#loc181 = loc(fused[#loc41, #loc42])
#loc182 = loc(fused[#loc45, #loc46])
#loc183 = loc(fused[#loc47, #loc48])
#loc184 = loc(fused[#loc51, #loc49])
#loc185 = loc(fused[#loc52, #loc53])
#loc186 = loc(fused[#loc54, #loc55])
#loc187 = loc(fused[#loc56, #loc53])
#loc188 = loc(fused[#loc58, #loc57])
#loc189 = loc(fused[#loc59, #loc60])
#loc190 = loc(fused[#loc61, #loc62])
#loc191 = loc(fused[#loc63, #loc64, #loc65, #loc60])
#loc192 = loc(fused[#loc67, #loc68])
#loc193 = loc(fused[#loc69, #loc70])
#loc194 = loc(fused[#loc71, #loc72, #loc73, #loc68])
#loc195 = loc(fused[#loc74, #loc75])
#loc196 = loc(fused[#loc78, #loc79])
#loc197 = loc(fused[#loc81, #loc80])
#loc198 = loc(fused[#loc82, #loc83])
#loc199 = loc(fused[#loc84, #loc85])
#loc200 = loc(fused[#loc88, #loc86])
#loc201 = loc(fused[#loc89, #loc90])
#loc202 = loc(fused[#loc91, #loc92])
#loc203 = loc(fused[#loc93, #loc90])
#loc204 = loc(fused[#loc95, #loc94])
#loc205 = loc(fused[#loc96, #loc97])
#loc206 = loc(fused[#loc98, #loc99])
#loc207 = loc(fused[#loc100, #loc97])
#loc208 = loc(fused[#loc101, #loc102])
#loc209 = loc(fused[#loc103, #loc104])
#loc210 = loc(fused[#loc105, #loc106, #loc107, #loc102])
#loc211 = loc(fused[#loc108, #loc109])
#loc212 = loc(fused[#loc113, #loc114])
#loc213 = loc(fused[#loc115, #loc116])
#loc214 = loc(fused[#loc119, #loc117])
#loc215 = loc(fused[#loc120, #loc121])
#loc216 = loc(fused[#loc122, #loc123])
#loc217 = loc(fused[#loc124, #loc125, #loc126, #loc121])
#loc218 = loc(fused[#loc130, #loc129])
#loc219 = loc(fused[#loc131, #loc132])
#loc220 = loc(fused[#loc133, #loc134])
#loc221 = loc(fused[#loc135, #loc132])
#loc222 = loc(fused[#loc136, #loc137])
#loc223 = loc(fused[#loc139, #loc140])
#loc224 = loc(fused[#loc141, #loc142])
#loc225 = loc(fused[#loc145, #loc143])
#loc226 = loc(fused[#loc146, #loc147])
#loc227 = loc(fused[#loc148, #loc149])
#loc228 = loc(fused[#loc150, #loc147])
#loc229 = loc(fused[#loc152, #loc151])
#loc230 = loc(fused[#loc153, #loc154])
#loc231 = loc(fused[#loc155, #loc156])
#loc232 = loc(fused[#loc157, #loc154])
#loc233 = loc(fused[#loc158, #loc159])
