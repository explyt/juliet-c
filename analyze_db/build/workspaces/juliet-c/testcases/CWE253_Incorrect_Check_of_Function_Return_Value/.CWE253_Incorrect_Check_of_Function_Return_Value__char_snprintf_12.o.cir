!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc109)
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc6)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc111)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"snprintf failed!\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc114)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc114)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc14)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc14)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc117)
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc118)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc117)
          cir.store %6, %4 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc117)
          %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc24)
          cir.store %7, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc118)
          cir.scope {
            %8 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc27)
            %9 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
            %10 = cir.const #cir.int<100> : !s32i loc(#loc29)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc29)
            %12 = cir.const #cir.int<6> : !u64i loc(#loc120)
            %13 = cir.binop(sub, %11, %12) : !u64i loc(#loc121)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc32)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc32)
            %16 = cir.binop(sub, %13, %15) : !u64i loc(#loc122)
            %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc5)
            %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc5)
            %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc6)
            %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc6)
            %21 = cir.call @snprintf(%9, %16, %18, %20) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc27)
            %22 = cir.const #cir.int<0> : !s32i loc(#loc33)
            %23 = cir.cmp(eq, %21, %22) : !s32i, !cir.bool loc(#loc123)
            cir.if %23 {
              %24 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc9)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc35)
            } loc(#loc124)
          } loc(#loc119)
        } loc(#loc116)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc126)
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc127)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc126)
          cir.store %6, %4 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc126)
          %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc41)
          cir.store %7, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc127)
          cir.scope {
            %8 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc44)
            %9 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
            %10 = cir.const #cir.int<100> : !s32i loc(#loc46)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc46)
            %12 = cir.const #cir.int<6> : !u64i loc(#loc129)
            %13 = cir.binop(sub, %11, %12) : !u64i loc(#loc130)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc49)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc49)
            %16 = cir.binop(sub, %13, %15) : !u64i loc(#loc131)
            %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc50)
            %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc50)
            %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc51)
            %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc51)
            %21 = cir.call @snprintf(%9, %16, %18, %20) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc44)
            %22 = cir.const #cir.int<0> : !s32i loc(#loc52)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc132)
            cir.if %23 {
              %24 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc54)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc54)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc55)
            } loc(#loc133)
          } loc(#loc128)
        } loc(#loc125)
      } loc(#loc115)
    } loc(#loc113)
    cir.return loc(#loc11)
  } loc(#loc112)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc135)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc58)
    cir.return loc(#loc57)
  } loc(#loc134)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc138)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc138)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc64)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc64)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc141)
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc142)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc141)
          cir.store %6, %4 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc141)
          %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc74)
          cir.store %7, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc142)
          cir.scope {
            %8 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc77)
            %9 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
            %10 = cir.const #cir.int<100> : !s32i loc(#loc79)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc79)
            %12 = cir.const #cir.int<6> : !u64i loc(#loc144)
            %13 = cir.binop(sub, %11, %12) : !u64i loc(#loc145)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc82)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc82)
            %16 = cir.binop(sub, %13, %15) : !u64i loc(#loc146)
            %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc83)
            %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc83)
            %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc84)
            %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc84)
            %21 = cir.call @snprintf(%9, %16, %18, %20) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc77)
            %22 = cir.const #cir.int<0> : !s32i loc(#loc85)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc147)
            cir.if %23 {
              %24 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc87)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc87)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc88)
            } loc(#loc148)
          } loc(#loc143)
        } loc(#loc140)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc150)
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc151)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc150)
          cir.store %6, %4 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc150)
          %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc94)
          cir.store %7, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc151)
          cir.scope {
            %8 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc97)
            %9 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
            %10 = cir.const #cir.int<100> : !s32i loc(#loc99)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc99)
            %12 = cir.const #cir.int<6> : !u64i loc(#loc153)
            %13 = cir.binop(sub, %11, %12) : !u64i loc(#loc154)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc102)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc102)
            %16 = cir.binop(sub, %13, %15) : !u64i loc(#loc155)
            %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc103)
            %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc103)
            %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc104)
            %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc104)
            %21 = cir.call @snprintf(%9, %16, %18, %20) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc97)
            %22 = cir.const #cir.int<0> : !s32i loc(#loc105)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc156)
            cir.if %23 {
              %24 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc107)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc107)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc108)
            } loc(#loc157)
          } loc(#loc152)
        } loc(#loc149)
      } loc(#loc139)
    } loc(#loc137)
    cir.return loc(#loc61)
  } loc(#loc136)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":385:1)
#loc4 = loc("/usr/include/stdio.h":387:62)
#loc5 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":43:57)
#loc6 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":43:65)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":45:27)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":32:1)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":63:1)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":34:5)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":62:5)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":34:8)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":34:33)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":35:5)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":48:5)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":50:5)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":36:9)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":47:9)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":39:13)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":39:36)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":40:13)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":40:27)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":43:13)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":46:13)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":43:17)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":43:26)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":43:31)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":43:35)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":43:52)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":43:54)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":43:80)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":44:13)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":45:17)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":51:9)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":61:9)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":54:13)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":54:36)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":55:13)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":55:27)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":57:13)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":60:13)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":57:17)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":57:26)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":57:31)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":57:35)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":57:52)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":57:54)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":57:57)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":57:65)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":57:79)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":58:13)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":59:27)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":59:17)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":102:1)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":105:1)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":104:5)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":104:11)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":70:1)
#loc61 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":100:1)
#loc62 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":72:5)
#loc63 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":99:5)
#loc64 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":72:8)
#loc65 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":72:33)
#loc66 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":73:5)
#loc67 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":85:5)
#loc68 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":87:5)
#loc69 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":74:9)
#loc70 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":84:9)
#loc71 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":77:13)
#loc72 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":77:36)
#loc73 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":78:13)
#loc74 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":78:27)
#loc75 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":80:13)
#loc76 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":83:13)
#loc77 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":80:17)
#loc78 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":80:26)
#loc79 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":80:31)
#loc80 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":80:35)
#loc81 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":80:52)
#loc82 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":80:54)
#loc83 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":80:57)
#loc84 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":80:65)
#loc85 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":80:79)
#loc86 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":81:13)
#loc87 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":82:27)
#loc88 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":82:17)
#loc89 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":88:9)
#loc90 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":98:9)
#loc91 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":91:13)
#loc92 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":91:36)
#loc93 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":92:13)
#loc94 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":92:27)
#loc95 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":94:13)
#loc96 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":97:13)
#loc97 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":94:17)
#loc98 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":94:26)
#loc99 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":94:31)
#loc100 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":94:35)
#loc101 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":94:52)
#loc102 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":94:54)
#loc103 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":94:57)
#loc104 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":94:65)
#loc105 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":94:79)
#loc106 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":95:13)
#loc107 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":96:27)
#loc108 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_12.c":96:17)
#loc109 = loc(fused[#loc1, #loc2])
#loc110 = loc(fused[#loc3, #loc4])
#loc111 = loc(fused[#loc7, #loc8])
#loc112 = loc(fused[#loc10, #loc11])
#loc113 = loc(fused[#loc12, #loc13])
#loc114 = loc(fused[#loc14, #loc15])
#loc115 = loc(fused[#loc16, #loc17, #loc18, #loc13])
#loc116 = loc(fused[#loc19, #loc20])
#loc117 = loc(fused[#loc21, #loc22])
#loc118 = loc(fused[#loc23, #loc24])
#loc119 = loc(fused[#loc25, #loc26])
#loc120 = loc(fused[#loc30, #loc31])
#loc121 = loc(fused[#loc29, #loc31])
#loc122 = loc(fused[#loc29, #loc32])
#loc123 = loc(fused[#loc27, #loc33])
#loc124 = loc(fused[#loc34, #loc26])
#loc125 = loc(fused[#loc36, #loc37])
#loc126 = loc(fused[#loc38, #loc39])
#loc127 = loc(fused[#loc40, #loc41])
#loc128 = loc(fused[#loc42, #loc43])
#loc129 = loc(fused[#loc47, #loc48])
#loc130 = loc(fused[#loc46, #loc48])
#loc131 = loc(fused[#loc46, #loc49])
#loc132 = loc(fused[#loc44, #loc52])
#loc133 = loc(fused[#loc53, #loc43])
#loc134 = loc(fused[#loc56, #loc57])
#loc135 = loc(fused[#loc58, #loc59])
#loc136 = loc(fused[#loc60, #loc61])
#loc137 = loc(fused[#loc62, #loc63])
#loc138 = loc(fused[#loc64, #loc65])
#loc139 = loc(fused[#loc66, #loc67, #loc68, #loc63])
#loc140 = loc(fused[#loc69, #loc70])
#loc141 = loc(fused[#loc71, #loc72])
#loc142 = loc(fused[#loc73, #loc74])
#loc143 = loc(fused[#loc75, #loc76])
#loc144 = loc(fused[#loc80, #loc81])
#loc145 = loc(fused[#loc79, #loc81])
#loc146 = loc(fused[#loc79, #loc82])
#loc147 = loc(fused[#loc77, #loc85])
#loc148 = loc(fused[#loc86, #loc76])
#loc149 = loc(fused[#loc89, #loc90])
#loc150 = loc(fused[#loc91, #loc92])
#loc151 = loc(fused[#loc93, #loc94])
#loc152 = loc(fused[#loc95, #loc96])
#loc153 = loc(fused[#loc100, #loc101])
#loc154 = loc(fused[#loc99, #loc101])
#loc155 = loc(fused[#loc99, #loc102])
#loc156 = loc(fused[#loc97, #loc105])
#loc157 = loc(fused[#loc106, #loc96])
