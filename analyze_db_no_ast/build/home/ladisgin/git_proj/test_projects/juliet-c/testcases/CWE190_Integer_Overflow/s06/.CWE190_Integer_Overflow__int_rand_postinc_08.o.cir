!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__int_rand_postinc_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc179)
  cir.func private  @printIntLine(!s32i) loc(#loc180)
  cir.func no_proto  @CWE190_Integer_Overflow__int_rand_postinc_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc185)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc13)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc16)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc16)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc16)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc16)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc16)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc16)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc16)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc16)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc16)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc16)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc16)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc16)
          cir.yield %22 : !u32i loc(#loc16)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc16)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc16)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc16)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc16)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc16)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc16)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc16)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc16)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc16)
          %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc16)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc16)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc16)
          %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc16)
          cir.yield %26 : !u32i loc(#loc16)
        }) : (!cir.bool) -> !u32i loc(#loc16)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc16)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
      } loc(#loc186)
    } loc(#loc184)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc189)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc20)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc20)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc192)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
          %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc28)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc193)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc192)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc29)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc30)
        } loc(#loc191)
      } loc(#loc190)
    } loc(#loc188)
    cir.return loc(#loc6)
  } loc(#loc181)
  cir.func no_proto  @CWE190_Integer_Overflow__int_rand_postinc_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc195)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc196)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc197)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc198)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc32)
  } loc(#loc194)
  cir.func no_proto internal private  @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc42)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc43)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc200)
    cir.return %2 : !s32i loc(#loc200)
  } loc(#loc199)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc201)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc47)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc48)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc203)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc53)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc206)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc57)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc57)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc60)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc60)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc60)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc60)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc60)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc60)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc60)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc60)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc60)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc60)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc60)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc60)
          cir.yield %22 : !u32i loc(#loc60)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc60)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc60)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc60)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc60)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc60)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc60)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc60)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc60)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc60)
          %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc60)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc60)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc60)
          %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc60)
          cir.yield %26 : !u32i loc(#loc60)
        }) : (!cir.bool) -> !u32i loc(#loc60)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc60)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc208)
      } loc(#loc207)
    } loc(#loc205)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc210)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc64)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc64)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc47)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc47)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc69)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc73)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc213)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc74)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc215)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
            %11 = cir.unary(inc, %10) : !s32i, !s32i loc(#loc81)
            cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc215)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc82)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc83)
          } else {
            %9 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc48)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc48)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc84)
          } loc(#loc214)
        } loc(#loc212)
      } loc(#loc211)
    } loc(#loc209)
    cir.return loc(#loc50)
  } loc(#loc202)
  cir.func no_proto internal private  @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc86)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc87)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc218)
    cir.return %2 : !s32i loc(#loc218)
  } loc(#loc217)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc220)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc93)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc223)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc97)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc97)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc100)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc100)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc100)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc100)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc100)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc100)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc100)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc100)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc100)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc100)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc100)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc100)
          cir.yield %22 : !u32i loc(#loc100)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc100)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc100)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc100)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc100)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc100)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc100)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc100)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc100)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc100)
          %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc100)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc100)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc100)
          %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc100)
          cir.yield %26 : !u32i loc(#loc100)
        }) : (!cir.bool) -> !u32i loc(#loc100)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc100)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
      } loc(#loc224)
    } loc(#loc222)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc227)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc104)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc104)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc110)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc230)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc111)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc232)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
            %11 = cir.unary(inc, %10) : !s32i, !s32i loc(#loc118)
            cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc233)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc232)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc119)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc120)
          } else {
            %9 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc121)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc121)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc122)
          } loc(#loc231)
        } loc(#loc229)
      } loc(#loc228)
    } loc(#loc226)
    cir.return loc(#loc90)
  } loc(#loc219)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc235)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc127)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc238)
      %3 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc131)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc131)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc136)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc136)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc137)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc138)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc240)
      } loc(#loc239)
    } loc(#loc237)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc242)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc142)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc142)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc245)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc149)
          %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc150)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc246)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc148)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc245)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc151)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc152)
        } loc(#loc244)
      } loc(#loc243)
    } loc(#loc241)
    cir.return loc(#loc124)
  } loc(#loc234)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc248)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc157)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc249)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc251)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc161)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc161)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc164)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc253)
      } loc(#loc252)
    } loc(#loc250)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc255)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc168)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc168)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc258)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc175)
          %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc176)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc259)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc174)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc258)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc177)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc178)
        } loc(#loc257)
      } loc(#loc256)
    } loc(#loc254)
    cir.return loc(#loc154)
  } loc(#loc247)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__int_rand_postinc_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":35:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":54:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":37:5)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":37:9)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":39:12)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":39:5)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":40:5)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":44:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":40:8)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":40:26)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":41:5)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":43:16)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":43:9)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":45:5)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":53:5)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":45:8)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":45:26)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":46:5)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":47:9)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":52:9)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":50:13)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":50:26)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":49:17)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":49:13)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":51:26)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":51:13)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":168:1)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":174:1)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":170:5)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":170:14)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":171:5)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":171:14)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":172:5)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":172:14)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":173:5)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":173:14)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":23:1)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":26:1)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":25:12)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":25:5)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":74:19)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":87:23)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":61:1)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":90:1)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":63:5)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":63:9)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":65:12)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":65:5)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":66:5)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":70:5)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":66:8)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":66:26)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":67:5)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":69:16)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":69:9)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":71:5)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":89:5)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":71:8)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":71:27)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":72:5)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":75:5)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":77:5)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":74:9)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":79:9)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":88:9)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":79:13)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":79:20)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":79:18)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":80:9)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":84:9)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":86:9)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":82:13)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":82:26)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":81:17)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":81:13)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":83:26)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":83:13)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":87:13)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":28:1)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":31:1)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":30:12)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":30:5)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":93:1)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":117:1)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":95:5)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":95:9)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":97:12)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":97:5)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":98:5)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":102:5)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":98:8)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":98:26)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":99:5)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":101:16)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":101:9)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":103:5)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":116:5)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":103:8)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":103:26)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":104:5)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":106:9)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":115:9)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":106:13)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":106:20)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":106:18)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":107:9)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":111:9)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":113:9)
#loc115 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":109:13)
#loc116 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":109:26)
#loc117 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":108:17)
#loc118 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":108:13)
#loc119 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":110:26)
#loc120 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":110:13)
#loc121 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":114:23)
#loc122 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":114:13)
#loc123 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":120:1)
#loc124 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":144:1)
#loc125 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":122:5)
#loc126 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":122:9)
#loc127 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":124:12)
#loc128 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":124:5)
#loc129 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":125:5)
#loc130 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":134:5)
#loc131 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":125:8)
#loc132 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":125:27)
#loc133 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":126:5)
#loc134 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":129:5)
#loc135 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":131:5)
#loc136 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":128:19)
#loc137 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":128:9)
#loc138 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":133:16)
#loc139 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":133:9)
#loc140 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":135:5)
#loc141 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":143:5)
#loc142 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":135:8)
#loc143 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":135:26)
#loc144 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":136:5)
#loc145 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":137:9)
#loc146 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":142:9)
#loc147 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":140:13)
#loc148 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":140:26)
#loc149 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":139:17)
#loc150 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":139:13)
#loc151 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":141:26)
#loc152 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":141:13)
#loc153 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":147:1)
#loc154 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":166:1)
#loc155 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":149:5)
#loc156 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":149:9)
#loc157 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":151:12)
#loc158 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":151:5)
#loc159 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":152:5)
#loc160 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":156:5)
#loc161 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":152:8)
#loc162 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":152:26)
#loc163 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":153:5)
#loc164 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":155:16)
#loc165 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":155:9)
#loc166 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":157:5)
#loc167 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":165:5)
#loc168 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":157:8)
#loc169 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":157:26)
#loc170 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":158:5)
#loc171 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":159:9)
#loc172 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":164:9)
#loc173 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":162:13)
#loc174 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":162:26)
#loc175 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":161:17)
#loc176 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":161:13)
#loc177 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":163:26)
#loc178 = loc("CWE190_Integer_Overflow__int_rand_postinc_08.c":163:13)
#loc179 = loc(fused[#loc1, #loc2])
#loc180 = loc(fused[#loc3, #loc4])
#loc181 = loc(fused[#loc5, #loc6])
#loc182 = loc(fused[#loc7, #loc8])
#loc183 = loc(fused[#loc10, #loc9])
#loc184 = loc(fused[#loc11, #loc12])
#loc185 = loc(fused[#loc13, #loc14])
#loc186 = loc(fused[#loc15, #loc12])
#loc187 = loc(fused[#loc17, #loc16])
#loc188 = loc(fused[#loc18, #loc19])
#loc189 = loc(fused[#loc20, #loc21])
#loc190 = loc(fused[#loc22, #loc19])
#loc191 = loc(fused[#loc23, #loc24])
#loc192 = loc(fused[#loc25, #loc26])
#loc193 = loc(fused[#loc28, #loc27])
#loc194 = loc(fused[#loc31, #loc32])
#loc195 = loc(fused[#loc33, #loc34])
#loc196 = loc(fused[#loc35, #loc36])
#loc197 = loc(fused[#loc37, #loc38])
#loc198 = loc(fused[#loc39, #loc40])
#loc199 = loc(fused[#loc41, #loc42])
#loc200 = loc(fused[#loc44, #loc43])
#loc201 = loc(fused[#loc45, #loc46])
#loc202 = loc(fused[#loc49, #loc50])
#loc203 = loc(fused[#loc51, #loc52])
#loc204 = loc(fused[#loc54, #loc53])
#loc205 = loc(fused[#loc55, #loc56])
#loc206 = loc(fused[#loc57, #loc58])
#loc207 = loc(fused[#loc59, #loc56])
#loc208 = loc(fused[#loc61, #loc60])
#loc209 = loc(fused[#loc62, #loc63])
#loc210 = loc(fused[#loc64, #loc65])
#loc211 = loc(fused[#loc66, #loc67, #loc68, #loc63])
#loc212 = loc(fused[#loc70, #loc71])
#loc213 = loc(fused[#loc72, #loc73])
#loc214 = loc(fused[#loc75, #loc76, #loc77, #loc71])
#loc215 = loc(fused[#loc78, #loc79])
#loc216 = loc(fused[#loc81, #loc80])
#loc217 = loc(fused[#loc85, #loc86])
#loc218 = loc(fused[#loc88, #loc87])
#loc219 = loc(fused[#loc89, #loc90])
#loc220 = loc(fused[#loc91, #loc92])
#loc221 = loc(fused[#loc94, #loc93])
#loc222 = loc(fused[#loc95, #loc96])
#loc223 = loc(fused[#loc97, #loc98])
#loc224 = loc(fused[#loc99, #loc96])
#loc225 = loc(fused[#loc101, #loc100])
#loc226 = loc(fused[#loc102, #loc103])
#loc227 = loc(fused[#loc104, #loc105])
#loc228 = loc(fused[#loc106, #loc103])
#loc229 = loc(fused[#loc107, #loc108])
#loc230 = loc(fused[#loc109, #loc110])
#loc231 = loc(fused[#loc112, #loc113, #loc114, #loc108])
#loc232 = loc(fused[#loc115, #loc116])
#loc233 = loc(fused[#loc118, #loc117])
#loc234 = loc(fused[#loc123, #loc124])
#loc235 = loc(fused[#loc125, #loc126])
#loc236 = loc(fused[#loc128, #loc127])
#loc237 = loc(fused[#loc129, #loc130])
#loc238 = loc(fused[#loc131, #loc132])
#loc239 = loc(fused[#loc133, #loc134, #loc135, #loc130])
#loc240 = loc(fused[#loc139, #loc138])
#loc241 = loc(fused[#loc140, #loc141])
#loc242 = loc(fused[#loc142, #loc143])
#loc243 = loc(fused[#loc144, #loc141])
#loc244 = loc(fused[#loc145, #loc146])
#loc245 = loc(fused[#loc147, #loc148])
#loc246 = loc(fused[#loc150, #loc149])
#loc247 = loc(fused[#loc153, #loc154])
#loc248 = loc(fused[#loc155, #loc156])
#loc249 = loc(fused[#loc158, #loc157])
#loc250 = loc(fused[#loc159, #loc160])
#loc251 = loc(fused[#loc161, #loc162])
#loc252 = loc(fused[#loc163, #loc160])
#loc253 = loc(fused[#loc165, #loc164])
#loc254 = loc(fused[#loc166, #loc167])
#loc255 = loc(fused[#loc168, #loc169])
#loc256 = loc(fused[#loc170, #loc167])
#loc257 = loc(fused[#loc171, #loc172])
#loc258 = loc(fused[#loc173, #loc174])
#loc259 = loc(fused[#loc176, #loc175])
