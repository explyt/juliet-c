!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc13 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":34:18)
#loc51 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":64:18)
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_add_68a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc57)
  cir.global external dsolocal @CWE190_Integer_Overflow__char_rand_add_68_badData = #cir.int<0> : !s8i {alignment = 1 : i64} loc(#loc58)
  cir.func no_proto private @CWE190_Integer_Overflow__char_rand_add_68b_badSink(...) loc(#loc59)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_add_68_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc61)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc11)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc11)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc62)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc13)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc13)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc13)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc13)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc13)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc13)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc13)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc13)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc13)
    cir.br ^bb3(%18 : !u32i) loc(#loc13)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc13)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc13)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc13)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc13)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc13)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc13)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc13)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc13)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc13)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc13)
    cir.br ^bb3(%34 : !u32i) loc(#loc13)
  ^bb3(%35: !u32i loc("CWE190_Integer_Overflow__char_rand_add_68a.c":34:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc13)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc13)
    %37 = cir.cast(integral, %36 : !s32i), !s8i loc(#loc13)
    cir.store %37, %0 : !s8i, !cir.ptr<!s8i> loc(#loc63)
    %38 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc15)
    %39 = cir.get_global @CWE190_Integer_Overflow__char_rand_add_68_badData : !cir.ptr<!s8i> loc(#loc58)
    cir.store %38, %39 : !s8i, !cir.ptr<!s8i> loc(#loc64)
    %40 = cir.get_global @CWE190_Integer_Overflow__char_rand_add_68b_badSink : !cir.ptr<!cir.func<(...)>> loc(#loc65)
    %41 = cir.cast(bitcast, %40 : !cir.ptr<!cir.func<(...)>>), !cir.ptr<!cir.func<()>> loc(#loc65)
    cir.call %41() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc17)
    cir.return loc(#loc8)
  } loc(#loc60)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_add_68_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc67)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc21)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc68)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc23)
    cir.return loc(#loc20)
  } loc(#loc66)
  cir.global external dsolocal @CWE190_Integer_Overflow__char_rand_add_68_goodG2BData = #cir.int<0> : !s8i {alignment = 1 : i64} loc(#loc69)
  cir.global external dsolocal @CWE190_Integer_Overflow__char_rand_add_68_goodB2GData = #cir.int<0> : !s8i {alignment = 1 : i64} loc(#loc70)
  cir.func no_proto private @CWE190_Integer_Overflow__char_rand_add_68b_goodG2BSink(...) loc(#loc71)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc73)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc35)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc35)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc74)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc37)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc37)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc75)
    %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc39)
    %6 = cir.get_global @CWE190_Integer_Overflow__char_rand_add_68_goodG2BData : !cir.ptr<!s8i> loc(#loc69)
    cir.store %5, %6 : !s8i, !cir.ptr<!s8i> loc(#loc76)
    %7 = cir.get_global @CWE190_Integer_Overflow__char_rand_add_68b_goodG2BSink : !cir.ptr<!cir.func<(...)>> loc(#loc77)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!cir.func<(...)>>), !cir.ptr<!cir.func<()>> loc(#loc77)
    cir.call %8() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    cir.return loc(#loc32)
  } loc(#loc72)
  cir.func no_proto private @CWE190_Integer_Overflow__char_rand_add_68b_goodB2GSink(...) loc(#loc78)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc80)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc49)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc49)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc81)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc51)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc51)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc51)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc51)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc51)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc51)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc51)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc51)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc51)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc51)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc51)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc51)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc51)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc51)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc51)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc51)
    cir.br ^bb3(%18 : !u32i) loc(#loc51)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc51)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc51)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc51)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc51)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc51)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc51)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc51)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc51)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc51)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc51)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc51)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc51)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc51)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc51)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc51)
    cir.br ^bb3(%34 : !u32i) loc(#loc51)
  ^bb3(%35: !u32i loc("CWE190_Integer_Overflow__char_rand_add_68a.c":64:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc51)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc51)
    %37 = cir.cast(integral, %36 : !s32i), !s8i loc(#loc51)
    cir.store %37, %0 : !s8i, !cir.ptr<!s8i> loc(#loc82)
    %38 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc53)
    %39 = cir.get_global @CWE190_Integer_Overflow__char_rand_add_68_goodB2GData : !cir.ptr<!s8i> loc(#loc70)
    cir.store %38, %39 : !s8i, !cir.ptr<!s8i> loc(#loc83)
    %40 = cir.get_global @CWE190_Integer_Overflow__char_rand_add_68b_goodB2GSink : !cir.ptr<!cir.func<(...)>> loc(#loc84)
    %41 = cir.cast(bitcast, %40 : !cir.ptr<!cir.func<(...)>>), !cir.ptr<!cir.func<()>> loc(#loc84)
    cir.call %41() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc55)
    cir.return loc(#loc46)
  } loc(#loc79)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_add_68a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":20:1)
#loc4 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":20:6)
#loc5 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":27:1)
#loc6 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":27:57)
#loc7 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":29:1)
#loc8 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":37:1)
#loc9 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":31:5)
#loc10 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":31:10)
#loc11 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":32:12)
#loc12 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":32:5)
#loc14 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":34:5)
#loc15 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":35:57)
#loc16 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":35:5)
#loc17 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":36:5)
#loc18 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":36:56)
#loc19 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":69:1)
#loc20 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":73:1)
#loc21 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":71:5)
#loc22 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":71:13)
#loc23 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":72:5)
#loc24 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":72:13)
#loc25 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":21:1)
#loc26 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":21:6)
#loc27 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":22:1)
#loc28 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":22:6)
#loc29 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":44:1)
#loc30 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":44:61)
#loc31 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":48:1)
#loc32 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":56:1)
#loc33 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":50:5)
#loc34 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":50:10)
#loc35 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":51:12)
#loc36 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":51:5)
#loc37 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":53:12)
#loc38 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":53:5)
#loc39 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":54:61)
#loc40 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":54:5)
#loc41 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":55:5)
#loc42 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":55:60)
#loc43 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":45:1)
#loc44 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":45:61)
#loc45 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":59:1)
#loc46 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":67:1)
#loc47 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":61:5)
#loc48 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":61:10)
#loc49 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":62:12)
#loc50 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":62:5)
#loc52 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":64:5)
#loc53 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":65:61)
#loc54 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":65:5)
#loc55 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":66:5)
#loc56 = loc("CWE190_Integer_Overflow__char_rand_add_68a.c":66:60)
#loc57 = loc(fused[#loc1, #loc2])
#loc58 = loc(fused[#loc3, #loc4])
#loc59 = loc(fused[#loc5, #loc6])
#loc60 = loc(fused[#loc7, #loc8])
#loc61 = loc(fused[#loc9, #loc10])
#loc62 = loc(fused[#loc12, #loc11])
#loc63 = loc(fused[#loc14, #loc13])
#loc64 = loc(fused[#loc16, #loc15])
#loc65 = loc(fused[#loc17, #loc18])
#loc66 = loc(fused[#loc19, #loc20])
#loc67 = loc(fused[#loc21, #loc22])
#loc68 = loc(fused[#loc23, #loc24])
#loc69 = loc(fused[#loc25, #loc26])
#loc70 = loc(fused[#loc27, #loc28])
#loc71 = loc(fused[#loc29, #loc30])
#loc72 = loc(fused[#loc31, #loc32])
#loc73 = loc(fused[#loc33, #loc34])
#loc74 = loc(fused[#loc36, #loc35])
#loc75 = loc(fused[#loc38, #loc37])
#loc76 = loc(fused[#loc40, #loc39])
#loc77 = loc(fused[#loc41, #loc42])
#loc78 = loc(fused[#loc43, #loc44])
#loc79 = loc(fused[#loc45, #loc46])
#loc80 = loc(fused[#loc47, #loc48])
#loc81 = loc(fused[#loc50, #loc49])
#loc82 = loc(fused[#loc52, #loc51])
#loc83 = loc(fused[#loc54, #loc53])
#loc84 = loc(fused[#loc55, #loc56])
