!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @_ZN58CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_629badSourceERi(!cir.ptr<!s32i>) loc(#loc110)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc111)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc112)
  cir.func private @printIntLine(!s32i) loc(#loc113)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc114)
  cir.func @_ZN58CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_623badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc116)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc16)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    cir.call @_ZN58CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_629badSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc18)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc119)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc120)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc25)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc26)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc121)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc122)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc25)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc123)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc124)
      cir.scope {
        %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc34)
        %21 = cir.cmp(eq, %19, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc126)
        cir.if %21 {
          %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc36)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc37)
          %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc38)
          cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc36)
        } loc(#loc127)
      } loc(#loc125)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc41)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc41)
        cir.store %20, %3 : !u64i, !cir.ptr<!u64i> loc(#loc129)
        cir.for : cond {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc43)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc44)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc44)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc130)
          cir.condition(%24) loc(#loc130)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc46)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
            %23 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc48)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc49)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc132)
          } loc(#loc131)
          cir.yield loc(#loc40)
        } step {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc50)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc51)
          cir.store %22, %3 : !u64i, !cir.ptr<!u64i> loc(#loc133)
          cir.yield loc(#loc128)
        } loc(#loc128)
      } loc(#loc128)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc53)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc54)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc52)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc55)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc56)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc57)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc56)
    } loc(#loc118)
    cir.return loc(#loc12)
  } loc(#loc115)
  cir.func private @_ZN58CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_6213goodG2BSourceERi(!cir.ptr<!s32i>) loc(#loc134)
  cir.func internal private @_ZN58CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc136)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc65)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    cir.call @_ZN58CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_6213goodG2BSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc67)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc139)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc140)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc74)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc75)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc141)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc142)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc74)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc143)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc144)
      cir.scope {
        %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc83)
        %21 = cir.cmp(eq, %19, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc146)
        cir.if %21 {
          %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc85)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc86)
          %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc87)
          cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc85)
        } loc(#loc147)
      } loc(#loc145)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc90)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc90)
        cir.store %20, %3 : !u64i, !cir.ptr<!u64i> loc(#loc149)
        cir.for : cond {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc92)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc93)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc150)
          cir.condition(%24) loc(#loc150)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc95)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc96)
            %23 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc97)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc98)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc152)
          } loc(#loc151)
          cir.yield loc(#loc89)
        } step {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc99)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc100)
          cir.store %22, %3 : !u64i, !cir.ptr<!u64i> loc(#loc153)
          cir.yield loc(#loc148)
        } loc(#loc148)
      } loc(#loc148)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc102)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc103)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc101)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc104)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc105)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc106)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc106)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc105)
    } loc(#loc138)
    cir.return loc(#loc61)
  } loc(#loc135)
  cir.func @_ZN58CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_624goodEv() extra(#fn_attr1) {
    cir.call @_ZN58CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62L7goodG2BEv() : () -> () loc(#loc109)
    cir.return loc(#loc108)
  } loc(#loc154)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":0:0)
#loc1 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":25:1)
#loc2 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":25:25)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":27:1)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":47:1)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":29:5)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":29:9)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":31:13)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":31:12)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":31:5)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":32:5)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":33:5)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":46:5)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":34:9)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":34:16)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":35:9)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":35:14)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":38:28)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":38:35)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":38:42)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":38:52)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":38:53)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":38:9)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":39:9)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":39:43)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":39:13)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":39:27)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":39:33)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":39:34)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":39:40)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":39:39)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":40:9)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":43:9)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":40:18)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":40:14)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":40:21)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":40:33)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":41:9)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":42:29)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":42:13)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":42:24)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":42:25)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":40:40)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":40:39)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":44:22)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":44:33)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":44:34)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":44:9)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":45:9)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":45:14)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":54:1)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":54:29)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":56:1)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":76:1)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":58:5)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":58:9)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":60:13)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":60:12)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":60:5)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":61:5)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":62:5)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":75:5)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":63:9)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":63:16)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":64:9)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":64:14)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":67:28)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":67:35)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":67:42)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":67:52)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":67:53)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":67:9)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":68:9)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":68:43)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":68:13)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":68:27)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":68:33)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":68:34)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":68:40)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":68:39)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":69:9)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":72:9)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":69:18)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":69:14)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":69:21)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":69:33)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":70:9)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":71:29)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":71:13)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":71:24)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":71:25)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":69:40)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":69:39)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":73:22)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":73:33)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":73:34)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":73:9)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":74:9)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":74:14)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":78:1)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":81:1)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_62a.cpp":80:5)
#loc110 = loc(fused[#loc1, #loc2])
#loc111 = loc(fused[#loc3, #loc4])
#loc112 = loc(fused[#loc5, #loc6])
#loc113 = loc(fused[#loc7, #loc8])
#loc114 = loc(fused[#loc9, #loc10])
#loc115 = loc(fused[#loc11, #loc12])
#loc116 = loc(fused[#loc13, #loc14])
#loc117 = loc(fused[#loc17, #loc15])
#loc118 = loc(fused[#loc19, #loc20])
#loc119 = loc(fused[#loc21, #loc22])
#loc120 = loc(fused[#loc23, #loc24])
#loc121 = loc(fused[#loc27, #loc28])
#loc122 = loc(fused[#loc26, #loc28])
#loc123 = loc(fused[#loc25, #loc29])
#loc124 = loc(fused[#loc30, #loc29])
#loc125 = loc(fused[#loc31, #loc32])
#loc126 = loc(fused[#loc33, #loc34])
#loc127 = loc(fused[#loc35, #loc32])
#loc128 = loc(fused[#loc39, #loc40])
#loc129 = loc(fused[#loc42, #loc41])
#loc130 = loc(fused[#loc43, #loc44])
#loc131 = loc(fused[#loc45, #loc40])
#loc132 = loc(fused[#loc47, #loc46])
#loc133 = loc(fused[#loc51, #loc50])
#loc134 = loc(fused[#loc58, #loc59])
#loc135 = loc(fused[#loc60, #loc61])
#loc136 = loc(fused[#loc62, #loc63])
#loc137 = loc(fused[#loc66, #loc64])
#loc138 = loc(fused[#loc68, #loc69])
#loc139 = loc(fused[#loc70, #loc71])
#loc140 = loc(fused[#loc72, #loc73])
#loc141 = loc(fused[#loc76, #loc77])
#loc142 = loc(fused[#loc75, #loc77])
#loc143 = loc(fused[#loc74, #loc78])
#loc144 = loc(fused[#loc79, #loc78])
#loc145 = loc(fused[#loc80, #loc81])
#loc146 = loc(fused[#loc82, #loc83])
#loc147 = loc(fused[#loc84, #loc81])
#loc148 = loc(fused[#loc88, #loc89])
#loc149 = loc(fused[#loc91, #loc90])
#loc150 = loc(fused[#loc92, #loc93])
#loc151 = loc(fused[#loc94, #loc89])
#loc152 = loc(fused[#loc96, #loc95])
#loc153 = loc(fused[#loc100, #loc99])
#loc154 = loc(fused[#loc107, #loc108])
