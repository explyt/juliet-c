!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_snprintf_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc56)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%s\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc3)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc4)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_snprintf_16_bad() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc9)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc9)
        cir.condition(%1) loc(#loc9)
      } do {
        cir.scope {
          %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc60)
          %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc61)
          %2 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc60)
          cir.store %2, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc60)
          %3 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc15)
          cir.store %3, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc61)
          %4 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc16)
          %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc17)
          %6 = cir.const #cir.int<100> : !s32i loc(#loc18)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc18)
          %8 = cir.const #cir.int<6> : !u64i loc(#loc62)
          %9 = cir.binop(sub, %7, %8) : !u64i loc(#loc63)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc21)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc21)
          %12 = cir.binop(sub, %9, %11) : !u64i loc(#loc64)
          %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc3)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc3)
          %15 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc4)
          %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc4)
          %17 = cir.call @snprintf(%5, %12, %14, %16) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc16)
        } loc(#loc59)
        cir.break loc(#loc22)
      } loc(#loc58)
    } loc(#loc58)
    cir.return loc(#loc6)
  } loc(#loc57)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_snprintf_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc66)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc25)
    cir.return loc(#loc24)
  } loc(#loc65)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc67)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"snprintf failed!\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc29)
  cir.func no_proto internal private  @good1() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc34)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc34)
        cir.condition(%1) loc(#loc34)
      } do {
        cir.scope {
          %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc71)
          %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc72)
          %2 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc71)
          cir.store %2, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc71)
          %3 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc40)
          cir.store %3, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc72)
          cir.scope {
            %4 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc43)
            %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc44)
            %6 = cir.const #cir.int<100> : !s32i loc(#loc45)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc45)
            %8 = cir.const #cir.int<6> : !u64i loc(#loc74)
            %9 = cir.binop(sub, %7, %8) : !u64i loc(#loc75)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc48)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc48)
            %12 = cir.binop(sub, %9, %11) : !u64i loc(#loc76)
            %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc49)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc49)
            %15 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc50)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc50)
            %17 = cir.call @snprintf(%5, %12, %14, %16) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc43)
            %18 = cir.const #cir.int<0> : !s32i loc(#loc51)
            %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc77)
            %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc52)
            cir.if %20 {
              %21 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc29)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc29)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc54)
            } loc(#loc78)
          } loc(#loc73)
        } loc(#loc70)
        cir.break loc(#loc55)
      } loc(#loc69)
    } loc(#loc69)
    cir.return loc(#loc31)
  } loc(#loc68)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_snprintf_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":385:1)
#loc2 = loc("/usr/include/stdio.h":387:62)
#loc3 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":42:46)
#loc4 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":42:54)
#loc5 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":32:1)
#loc6 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":46:1)
#loc7 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":34:5)
#loc8 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":45:5)
#loc9 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":34:11)
#loc10 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":36:9)
#loc11 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":43:9)
#loc12 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":39:13)
#loc13 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":39:36)
#loc14 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":40:13)
#loc15 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":40:27)
#loc16 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":42:13)
#loc17 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":42:22)
#loc18 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":42:27)
#loc19 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":42:31)
#loc20 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":42:41)
#loc21 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":42:43)
#loc22 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":44:9)
#loc23 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":72:1)
#loc24 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":75:1)
#loc25 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":74:5)
#loc26 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":74:11)
#loc27 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc28 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc29 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":65:27)
#loc30 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":53:1)
#loc31 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":70:1)
#loc32 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":55:5)
#loc33 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":69:5)
#loc34 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":55:11)
#loc35 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":57:9)
#loc36 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":67:9)
#loc37 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":60:13)
#loc38 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":60:36)
#loc39 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":61:13)
#loc40 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":61:27)
#loc41 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":63:13)
#loc42 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":66:13)
#loc43 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":63:17)
#loc44 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":63:26)
#loc45 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":63:31)
#loc46 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":63:35)
#loc47 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":63:45)
#loc48 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":63:47)
#loc49 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":63:50)
#loc50 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":63:58)
#loc51 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":63:65)
#loc52 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":63:63)
#loc53 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":64:13)
#loc54 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":65:17)
#loc55 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":68:9)
#loc56 = loc(fused[#loc1, #loc2])
#loc57 = loc(fused[#loc5, #loc6])
#loc58 = loc(fused[#loc7, #loc8])
#loc59 = loc(fused[#loc10, #loc11])
#loc60 = loc(fused[#loc12, #loc13])
#loc61 = loc(fused[#loc14, #loc15])
#loc62 = loc(fused[#loc19, #loc20])
#loc63 = loc(fused[#loc18, #loc20])
#loc64 = loc(fused[#loc18, #loc21])
#loc65 = loc(fused[#loc23, #loc24])
#loc66 = loc(fused[#loc25, #loc26])
#loc67 = loc(fused[#loc27, #loc28])
#loc68 = loc(fused[#loc30, #loc31])
#loc69 = loc(fused[#loc32, #loc33])
#loc70 = loc(fused[#loc35, #loc36])
#loc71 = loc(fused[#loc37, #loc38])
#loc72 = loc(fused[#loc39, #loc40])
#loc73 = loc(fused[#loc41, #loc42])
#loc74 = loc(fused[#loc46, #loc47])
#loc75 = loc(fused[#loc45, #loc47])
#loc76 = loc(fused[#loc45, #loc48])
#loc77 = loc(fused[#loc43, #loc51])
#loc78 = loc(fused[#loc53, #loc42])
