!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":21:34)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":21:50)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":56:38)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":56:54)
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc156 = loc(fused[#loc7, #loc8])
#loc188 = loc(fused[#loc86, #loc87])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc153)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc154)
  cir.func internal private  @badSource(%arg0: !cir.ptr<!ty__twoIntsStruct> loc(fused[#loc7, #loc8])) -> !cir.ptr<!ty__twoIntsStruct> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc156)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["__retval"] {alignment = 8 : i64} loc(#loc6)
    cir.store %arg0, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc9)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc10)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc11)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc11)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc157)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc158)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc10)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc159)
    cir.store %8, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc160)
    cir.scope {
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc18)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc19)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc19)
      %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!ty__twoIntsStruct>, !s32i loc(#loc162)
      %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc20)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc22)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc24)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc22)
      } loc(#loc163)
    } loc(#loc161)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc25)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc164)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc164)
    cir.return %10 : !cir.ptr<!ty__twoIntsStruct> loc(#loc164)
  } loc(#loc155)
  cir.func private  @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc165)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc166)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc168)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc35)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc169)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc37)
    %3 = cir.call @badSource(%2) : (!cir.ptr<!ty__twoIntsStruct>) -> !cir.ptr<!ty__twoIntsStruct> loc(#loc38)
    cir.store %3, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc170)
    cir.scope {
      %4 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc172)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc174)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc51)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc51)
          cir.store %21, %19 : !u64i, !cir.ptr<!u64i> loc(#loc176)
          cir.for : cond {
            %22 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc53)
            %23 = cir.const #cir.int<100> : !s32i loc(#loc54)
            %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc54)
            %25 = cir.cmp(lt, %22, %24) : !u64i, !s32i loc(#loc177)
            %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc55)
            cir.condition(%26) loc(#loc55)
          } body {
            cir.scope {
              %22 = cir.const #cir.int<0> : !s32i loc(#loc57)
              %23 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc58)
              %24 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc59)
              %25 = cir.ptr_stride(%24 : !cir.ptr<!ty__twoIntsStruct>, %23 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc59)
              %26 = cir.get_member %25[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc60)
              cir.store %22, %26 : !s32i, !cir.ptr<!s32i> loc(#loc179)
              %27 = cir.const #cir.int<0> : !s32i loc(#loc61)
              %28 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc62)
              %29 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc63)
              %30 = cir.ptr_stride(%29 : !cir.ptr<!ty__twoIntsStruct>, %28 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc63)
              %31 = cir.get_member %30[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc64)
              cir.store %27, %31 : !s32i, !cir.ptr<!s32i> loc(#loc180)
            } loc(#loc178)
            cir.yield loc(#loc50)
          } step {
            %22 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc65)
            %23 = cir.unary(inc, %22) : !u64i, !u64i loc(#loc66)
            cir.store %23, %19 : !u64i, !cir.ptr<!u64i> loc(#loc181)
            cir.yield loc(#loc175)
          } loc(#loc175)
        } loc(#loc175)
      } loc(#loc173)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc67)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc67)
      %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc68)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc68)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc69)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc69)
      %11 = cir.const #cir.int<8> : !u64i loc(#loc182)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc183)
      cir.libc.memcpy %12 bytes from %8 to %6 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc184)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc74)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc75)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!ty__twoIntsStruct>, %14 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc76)
      cir.call @printStructLine(%15) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc77)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc78)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc79)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc79)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc78)
    } loc(#loc171)
    cir.return loc(#loc32)
  } loc(#loc167)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc186)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc82)
    cir.return loc(#loc81)
  } loc(#loc185)
  cir.func internal private  @goodG2BSource(%arg0: !cir.ptr<!ty__twoIntsStruct> loc(fused[#loc86, #loc87])) -> !cir.ptr<!ty__twoIntsStruct> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc188)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["__retval"] {alignment = 8 : i64} loc(#loc85)
    cir.store %arg0, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc88)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc89)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc90)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc90)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc189)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc190)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc89)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc191)
    cir.store %8, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc192)
    cir.scope {
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc97)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc98)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc98)
      %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!ty__twoIntsStruct>, !s32i loc(#loc194)
      %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc99)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc101)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc102)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc103)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc101)
      } loc(#loc195)
    } loc(#loc193)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc104)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc196)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc196)
    cir.return %10 : !cir.ptr<!ty__twoIntsStruct> loc(#loc196)
  } loc(#loc187)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc198)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc110)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc199)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc112)
    %3 = cir.call @goodG2BSource(%2) : (!cir.ptr<!ty__twoIntsStruct>) -> !cir.ptr<!ty__twoIntsStruct> loc(#loc113)
    cir.store %3, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc200)
    cir.scope {
      %4 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc202)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc204)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc126)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc126)
          cir.store %21, %19 : !u64i, !cir.ptr<!u64i> loc(#loc206)
          cir.for : cond {
            %22 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc128)
            %23 = cir.const #cir.int<100> : !s32i loc(#loc129)
            %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc129)
            %25 = cir.cmp(lt, %22, %24) : !u64i, !s32i loc(#loc207)
            %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc130)
            cir.condition(%26) loc(#loc130)
          } body {
            cir.scope {
              %22 = cir.const #cir.int<0> : !s32i loc(#loc132)
              %23 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc133)
              %24 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc134)
              %25 = cir.ptr_stride(%24 : !cir.ptr<!ty__twoIntsStruct>, %23 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc134)
              %26 = cir.get_member %25[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc60)
              cir.store %22, %26 : !s32i, !cir.ptr<!s32i> loc(#loc209)
              %27 = cir.const #cir.int<0> : !s32i loc(#loc135)
              %28 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc136)
              %29 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc137)
              %30 = cir.ptr_stride(%29 : !cir.ptr<!ty__twoIntsStruct>, %28 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc137)
              %31 = cir.get_member %30[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc64)
              cir.store %27, %31 : !s32i, !cir.ptr<!s32i> loc(#loc210)
            } loc(#loc208)
            cir.yield loc(#loc125)
          } step {
            %22 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc138)
            %23 = cir.unary(inc, %22) : !u64i, !u64i loc(#loc139)
            cir.store %23, %19 : !u64i, !cir.ptr<!u64i> loc(#loc211)
            cir.yield loc(#loc205)
          } loc(#loc205)
        } loc(#loc205)
      } loc(#loc203)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc140)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc140)
      %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc141)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc141)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc142)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc142)
      %11 = cir.const #cir.int<8> : !u64i loc(#loc212)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc213)
      cir.libc.memcpy %12 bytes from %8 to %6 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc214)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc147)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc148)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!ty__twoIntsStruct>, %14 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc149)
      cir.call @printStructLine(%15) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc150)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc151)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc152)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc152)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc151)
    } loc(#loc201)
    cir.return loc(#loc107)
  } loc(#loc197)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":27:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":22:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":24:29)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":24:36)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":24:39)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":24:59)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":24:60)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":24:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":25:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":25:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":25:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":25:17)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":25:14)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":25:23)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":25:24)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":25:30)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":25:29)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":26:12)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":26:5)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc29 = loc("/usr/include/stdlib.h":687:1)
#loc30 = loc("/usr/include/stdlib.h":687:32)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":29:1)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":50:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":31:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":31:21)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":32:12)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":32:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":33:22)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":33:12)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":33:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":33:26)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":34:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":49:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":35:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":35:33)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":36:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":44:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":37:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":37:20)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":39:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":43:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":39:22)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":39:18)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":39:25)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":39:29)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":39:27)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":40:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":41:36)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":41:24)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":41:17)
#loc60 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":42:36)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":42:24)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":42:17)
#loc64 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":39:35)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":39:34)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":46:16)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":46:22)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":46:30)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":46:34)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":46:54)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":46:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":46:55)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":47:26)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":47:31)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":47:32)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":47:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":48:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":48:14)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":88:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":91:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":90:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":90:13)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":56:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":62:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":57:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":59:29)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":59:36)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":59:40)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":59:60)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":59:61)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":59:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":60:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":60:33)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":60:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":60:17)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":60:14)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":60:23)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":60:24)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":60:30)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":60:29)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":61:12)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":61:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":65:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":86:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":67:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":67:21)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":68:12)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":68:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":69:26)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":69:12)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":69:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":69:30)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":70:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":85:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":71:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":71:33)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":72:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":80:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":73:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":73:20)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":75:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":79:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":75:22)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":75:18)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":75:25)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":75:29)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":75:27)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":76:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":77:36)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":77:24)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":77:17)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":78:36)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":78:24)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":78:17)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":75:35)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":75:34)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":82:16)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":82:22)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":82:30)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":82:34)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":82:54)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":82:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":82:55)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":83:26)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":83:31)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":83:32)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":83:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":84:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c":84:14)
#loc153 = loc(fused[#loc1, #loc2])
#loc154 = loc(fused[#loc3, #loc4])
#loc155 = loc(fused[#loc5, #loc6])
#loc157 = loc(fused[#loc12, #loc13])
#loc158 = loc(fused[#loc11, #loc13])
#loc159 = loc(fused[#loc10, #loc14])
#loc160 = loc(fused[#loc15, #loc14])
#loc161 = loc(fused[#loc16, #loc17])
#loc162 = loc(fused[#loc18, #loc19])
#loc163 = loc(fused[#loc21, #loc17])
#loc164 = loc(fused[#loc26, #loc25])
#loc165 = loc(fused[#loc27, #loc28])
#loc166 = loc(fused[#loc29, #loc30])
#loc167 = loc(fused[#loc31, #loc32])
#loc168 = loc(fused[#loc33, #loc34])
#loc169 = loc(fused[#loc36, #loc35])
#loc170 = loc(fused[#loc39, #loc40])
#loc171 = loc(fused[#loc41, #loc42])
#loc172 = loc(fused[#loc43, #loc44])
#loc173 = loc(fused[#loc45, #loc46])
#loc174 = loc(fused[#loc47, #loc48])
#loc175 = loc(fused[#loc49, #loc50])
#loc176 = loc(fused[#loc52, #loc51])
#loc177 = loc(fused[#loc53, #loc54])
#loc178 = loc(fused[#loc56, #loc50])
#loc179 = loc(fused[#loc59, #loc57])
#loc180 = loc(fused[#loc63, #loc61])
#loc181 = loc(fused[#loc66, #loc65])
#loc182 = loc(fused[#loc70, #loc71])
#loc183 = loc(fused[#loc69, #loc71])
#loc184 = loc(fused[#loc72, #loc73])
#loc185 = loc(fused[#loc80, #loc81])
#loc186 = loc(fused[#loc82, #loc83])
#loc187 = loc(fused[#loc84, #loc85])
#loc189 = loc(fused[#loc91, #loc92])
#loc190 = loc(fused[#loc90, #loc92])
#loc191 = loc(fused[#loc89, #loc93])
#loc192 = loc(fused[#loc94, #loc93])
#loc193 = loc(fused[#loc95, #loc96])
#loc194 = loc(fused[#loc97, #loc98])
#loc195 = loc(fused[#loc100, #loc96])
#loc196 = loc(fused[#loc105, #loc104])
#loc197 = loc(fused[#loc106, #loc107])
#loc198 = loc(fused[#loc108, #loc109])
#loc199 = loc(fused[#loc111, #loc110])
#loc200 = loc(fused[#loc114, #loc115])
#loc201 = loc(fused[#loc116, #loc117])
#loc202 = loc(fused[#loc118, #loc119])
#loc203 = loc(fused[#loc120, #loc121])
#loc204 = loc(fused[#loc122, #loc123])
#loc205 = loc(fused[#loc124, #loc125])
#loc206 = loc(fused[#loc127, #loc126])
#loc207 = loc(fused[#loc128, #loc129])
#loc208 = loc(fused[#loc131, #loc125])
#loc209 = loc(fused[#loc134, #loc132])
#loc210 = loc(fused[#loc137, #loc135])
#loc211 = loc(fused[#loc139, #loc138])
#loc212 = loc(fused[#loc143, #loc144])
#loc213 = loc(fused[#loc142, #loc144])
#loc214 = loc(fused[#loc145, #loc146])
