!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @putchar(!s32i) -> !s32i loc(#loc53)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"putchar failed!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc56)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc58)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc59)
        cir.condition(%4) loc(#loc16)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.const #cir.int<65> : !s32i loc(#loc20)
            %3 = cir.call @putchar(%2) : (!s32i) -> !s32i loc(#loc21)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc22)
            %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc62)
            cir.if %5 {
              %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc5)
              %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc5)
              cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc24)
            } loc(#loc63)
          } loc(#loc61)
        } loc(#loc60)
        cir.yield loc(#loc11)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc26)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
        cir.yield loc(#loc57)
      } loc(#loc57)
    } loc(#loc57)
    cir.return loc(#loc7)
  } loc(#loc55)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc66)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    cir.return loc(#loc28)
  } loc(#loc65)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc68)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc37)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc70)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc40)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc71)
        cir.condition(%4) loc(#loc41)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.const #cir.int<65> : !s32i loc(#loc45)
            %3 = cir.call @putchar(%2) : (!s32i) -> !s32i loc(#loc46)
            %4 = cir.const #cir.int<1> : !s32i loc(#loc47)
            %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc47)
            %6 = cir.cmp(eq, %3, %5) : !s32i, !cir.bool loc(#loc74)
            cir.if %6 {
              %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc49)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc49)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc50)
            } loc(#loc75)
          } loc(#loc73)
        } loc(#loc72)
        cir.yield loc(#loc36)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc52)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc76)
        cir.yield loc(#loc69)
      } loc(#loc69)
    } loc(#loc69)
    cir.return loc(#loc32)
  } loc(#loc67)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":618:1)
#loc2 = loc("/usr/include/stdio.h":618:28)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":33:23)
#loc6 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":24:1)
#loc7 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":36:1)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":26:5)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":26:9)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":27:5)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":35:5)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":27:13)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":27:9)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":27:16)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":27:20)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":27:18)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":28:5)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":31:9)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":34:9)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":31:26)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":31:13)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":31:34)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":32:9)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":33:13)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":27:24)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":27:23)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":56:1)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":59:1)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":58:5)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":58:11)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":43:1)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":54:1)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":45:5)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":45:9)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":46:5)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":53:5)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":46:13)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":46:9)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":46:16)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":46:20)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":46:18)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":47:5)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":49:9)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":52:9)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":49:26)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":49:13)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":49:34)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":50:9)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":51:23)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":51:13)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":46:24)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_17.c":46:23)
#loc53 = loc(fused[#loc1, #loc2])
#loc54 = loc(fused[#loc3, #loc4])
#loc55 = loc(fused[#loc6, #loc7])
#loc56 = loc(fused[#loc8, #loc9])
#loc57 = loc(fused[#loc10, #loc11])
#loc58 = loc(fused[#loc13, #loc12])
#loc59 = loc(fused[#loc14, #loc15])
#loc60 = loc(fused[#loc17, #loc11])
#loc61 = loc(fused[#loc18, #loc19])
#loc62 = loc(fused[#loc21, #loc22])
#loc63 = loc(fused[#loc23, #loc19])
#loc64 = loc(fused[#loc26, #loc25])
#loc65 = loc(fused[#loc27, #loc28])
#loc66 = loc(fused[#loc29, #loc30])
#loc67 = loc(fused[#loc31, #loc32])
#loc68 = loc(fused[#loc33, #loc34])
#loc69 = loc(fused[#loc35, #loc36])
#loc70 = loc(fused[#loc38, #loc37])
#loc71 = loc(fused[#loc39, #loc40])
#loc72 = loc(fused[#loc42, #loc36])
#loc73 = loc(fused[#loc43, #loc44])
#loc74 = loc(fused[#loc46, #loc47])
#loc75 = loc(fused[#loc48, #loc44])
#loc76 = loc(fused[#loc52, #loc51])
