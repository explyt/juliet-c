!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_if_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc77)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Inside the else statement\00" : !cir.array<!s8i x 26>> : !cir.array<!s8i x 26> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_if_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc80)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc13)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc82)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc15)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc16)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc83)
        cir.condition(%4) loc(#loc17)
      } body {
        cir.scope {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc86)
            %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %6 = cir.const #cir.int<3> : !s32i loc(#loc24)
            %7 = cir.binop(rem, %5, %6) : !s32i loc(#loc87)
            cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc88)
            cir.scope {
              %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc29)
              %9 = cir.const #cir.int<0> : !s32i loc(#loc30)
              %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc90)
              cir.if %10 {
              } else {
                %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc5)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc5)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc34)
              } loc(#loc91)
            } loc(#loc89)
          } loc(#loc85)
          %2 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc6)
          %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc6)
          cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc35)
        } loc(#loc84)
        cir.yield loc(#loc12)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc36)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc37)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
        cir.yield loc(#loc81)
      } loc(#loc81)
    } loc(#loc81)
    cir.return loc(#loc8)
  } loc(#loc79)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_if_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc94)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    cir.return loc(#loc39)
  } loc(#loc93)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Inside the if statement\00" : !cir.array<!s8i x 24>> : !cir.array<!s8i x 24> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc43)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc96)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc50)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc53)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc99)
        cir.condition(%4) loc(#loc54)
      } body {
        cir.scope {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc102)
            %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
            %6 = cir.const #cir.int<3> : !s32i loc(#loc61)
            %7 = cir.binop(rem, %5, %6) : !s32i loc(#loc103)
            cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc104)
            cir.scope {
              %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc66)
              %9 = cir.const #cir.int<0> : !s32i loc(#loc67)
              %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc106)
              cir.if %10 {
                %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 24>> loc(#loc42)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 24>>), !cir.ptr<!s8i> loc(#loc42)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc71)
              } else {
                %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc72)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc72)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc73)
              } loc(#loc107)
            } loc(#loc105)
          } loc(#loc101)
          %2 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc43)
          %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc43)
          cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc74)
        } loc(#loc100)
        cir.yield loc(#loc49)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc76)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
        cir.yield loc(#loc97)
      } loc(#loc97)
    } loc(#loc97)
    cir.return loc(#loc45)
  } loc(#loc95)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_if_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":34:27)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":37:19)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":20:1)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":39:1)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":22:5)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":22:9)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":23:5)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":38:5)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":23:13)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":23:9)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":23:16)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":23:20)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":23:18)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":24:5)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":26:9)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":36:9)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":27:13)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":27:17)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":28:18)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":28:27)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":28:13)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":28:28)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":29:13)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":35:13)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":29:17)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":29:22)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":30:13)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":31:13)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":33:13)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":34:17)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":37:9)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":23:24)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":23:23)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":68:1)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":71:1)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":70:5)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":70:11)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":57:27)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":64:19)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":46:1)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":66:1)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":48:5)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":48:9)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":49:5)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":65:5)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":49:13)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":49:9)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":49:16)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":49:20)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":49:18)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":50:5)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":52:9)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":63:9)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":53:13)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":53:17)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":54:18)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":54:27)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":54:13)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":54:28)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":55:13)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":62:13)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":55:17)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":55:22)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":56:13)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":58:13)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":60:13)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":57:17)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":61:27)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":61:17)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":64:9)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":49:24)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":49:23)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc3, #loc4])
#loc79 = loc(fused[#loc7, #loc8])
#loc80 = loc(fused[#loc9, #loc10])
#loc81 = loc(fused[#loc11, #loc12])
#loc82 = loc(fused[#loc14, #loc13])
#loc83 = loc(fused[#loc15, #loc16])
#loc84 = loc(fused[#loc18, #loc12])
#loc85 = loc(fused[#loc19, #loc20])
#loc86 = loc(fused[#loc21, #loc22])
#loc87 = loc(fused[#loc23, #loc24])
#loc88 = loc(fused[#loc25, #loc26])
#loc89 = loc(fused[#loc27, #loc28])
#loc90 = loc(fused[#loc29, #loc30])
#loc91 = loc(fused[#loc31, #loc32, #loc33, #loc28])
#loc92 = loc(fused[#loc37, #loc36])
#loc93 = loc(fused[#loc38, #loc39])
#loc94 = loc(fused[#loc40, #loc41])
#loc95 = loc(fused[#loc44, #loc45])
#loc96 = loc(fused[#loc46, #loc47])
#loc97 = loc(fused[#loc48, #loc49])
#loc98 = loc(fused[#loc51, #loc50])
#loc99 = loc(fused[#loc52, #loc53])
#loc100 = loc(fused[#loc55, #loc49])
#loc101 = loc(fused[#loc56, #loc57])
#loc102 = loc(fused[#loc58, #loc59])
#loc103 = loc(fused[#loc60, #loc61])
#loc104 = loc(fused[#loc62, #loc63])
#loc105 = loc(fused[#loc64, #loc65])
#loc106 = loc(fused[#loc66, #loc67])
#loc107 = loc(fused[#loc68, #loc69, #loc70, #loc65])
#loc108 = loc(fused[#loc76, #loc75])
