!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":44:66)
#loc6 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":44:73)
#loc23 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":62:70)
#loc24 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":62:77)
#loc44 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":76:70)
#loc45 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":76:77)
#loc68 = loc(fused[#loc5, #loc6])
#loc74 = loc(fused[#loc23, #loc24])
#loc81 = loc(fused[#loc44, #loc45])
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_listen_socket_sub_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc66)
  cir.func @CWE191_Integer_Underflow__int_listen_socket_sub_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc68)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc69)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc70)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc8)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc8)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc69)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc12)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc70)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc72)
      %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc18)
      cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc72)
      %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc20)
    } loc(#loc71)
    cir.return loc(#loc4)
  } loc(#loc67)
  cir.func @CWE191_Integer_Underflow__int_listen_socket_sub_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc23, #loc24])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc74)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc75)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc76)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc29)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc26)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc26)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc75)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc30)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc76)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc78)
      %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc36)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc35)
      %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc36)
      cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc78)
      %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc37)
      cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc38)
    } loc(#loc77)
    cir.return loc(#loc22)
  } loc(#loc73)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc41)
  cir.func @CWE191_Integer_Underflow__int_listen_socket_sub_64b_goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc44, #loc45])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc81)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc82)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc83)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc50)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc47)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc47)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc82)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.scope {
      %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc55)
      %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc56)
      %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc56)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc56)
      %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc56)
      %12 = cir.cmp(gt, %7, %11) : !s32i, !cir.bool loc(#loc85)
      cir.if %12 {
        %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc87)
        %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc62)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc61)
        %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc62)
        cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc87)
        %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc63)
        cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc64)
      } else {
        %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc41)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc41)
        cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc65)
      } loc(#loc86)
    } loc(#loc84)
    cir.return loc(#loc43)
  } loc(#loc80)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":44:1)
#loc4 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":55:1)
#loc7 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":47:5)
#loc8 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":47:28)
#loc9 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":49:5)
#loc10 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":49:25)
#loc11 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":45:1)
#loc12 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":49:18)
#loc13 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":49:17)
#loc14 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":50:5)
#loc15 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":54:5)
#loc16 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":52:9)
#loc17 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":52:29)
#loc18 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":52:22)
#loc19 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":53:22)
#loc20 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":53:9)
#loc21 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":62:1)
#loc22 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":73:1)
#loc25 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":65:5)
#loc26 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":65:28)
#loc27 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":67:5)
#loc28 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":67:25)
#loc29 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":63:1)
#loc30 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":67:18)
#loc31 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":67:17)
#loc32 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":68:5)
#loc33 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":72:5)
#loc34 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":70:9)
#loc35 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":70:29)
#loc36 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":70:22)
#loc37 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":71:22)
#loc38 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":71:9)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":90:19)
#loc42 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":76:1)
#loc43 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":92:1)
#loc46 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":79:5)
#loc47 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":79:28)
#loc48 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":81:5)
#loc49 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":81:25)
#loc50 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":77:1)
#loc51 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":81:18)
#loc52 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":81:17)
#loc53 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":83:5)
#loc54 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":91:5)
#loc55 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":83:9)
#loc56 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":83:16)
#loc57 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":84:5)
#loc58 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":87:5)
#loc59 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":89:5)
#loc60 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":85:9)
#loc61 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":85:29)
#loc62 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":85:22)
#loc63 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":86:22)
#loc64 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":86:9)
#loc65 = loc("CWE191_Integer_Underflow__int_listen_socket_sub_64b.c":90:9)
#loc66 = loc(fused[#loc1, #loc2])
#loc67 = loc(fused[#loc3, #loc4])
#loc69 = loc(fused[#loc7, #loc8])
#loc70 = loc(fused[#loc9, #loc10])
#loc71 = loc(fused[#loc14, #loc15])
#loc72 = loc(fused[#loc16, #loc17])
#loc73 = loc(fused[#loc21, #loc22])
#loc75 = loc(fused[#loc25, #loc26])
#loc76 = loc(fused[#loc27, #loc28])
#loc77 = loc(fused[#loc32, #loc33])
#loc78 = loc(fused[#loc34, #loc35])
#loc79 = loc(fused[#loc39, #loc40])
#loc80 = loc(fused[#loc42, #loc43])
#loc82 = loc(fused[#loc46, #loc47])
#loc83 = loc(fused[#loc48, #loc49])
#loc84 = loc(fused[#loc53, #loc54])
#loc85 = loc(fused[#loc55, #loc56])
#loc86 = loc(fused[#loc57, #loc58, #loc59, #loc54])
#loc87 = loc(fused[#loc60, #loc61])
