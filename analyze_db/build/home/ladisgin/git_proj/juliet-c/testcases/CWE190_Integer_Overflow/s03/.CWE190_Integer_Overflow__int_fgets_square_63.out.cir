!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":106:10)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":106:14)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":106:20)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":106:32)
#loc132 = loc(fused[#loc54, #loc55])
#loc133 = loc(fused[#loc56, #loc57])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_63a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc112)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc113)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc114)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc115)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @CWE190_Integer_Overflow__int_fgets_square_63b_badSink(!cir.ptr<!s32i>) loc(#loc116)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_63_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc118)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc119)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc18)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    cir.br ^bb1 loc(#loc121)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc118)
    cir.store %3, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc118)
    cir.br ^bb2 loc(#loc122)
  ^bb2:  // pred: ^bb1
    %4 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc24)
    %5 = cir.const #cir.int<3> : !s32i loc(#loc25)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc25)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc25)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc25)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc25)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc25)
    %11 = cir.binop(add, %8, %10) : !u64i loc(#loc25)
    %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc25)
    %13 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc113)
    %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc26)
    %15 = cir.call @fgets(%4, %12, %14) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc27)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc28)
    %18 = cir.cmp(ne, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc123)
    cir.brcond %18 ^bb3, ^bb4 loc(#loc124)
  ^bb3:  // pred: ^bb2
    %19 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc32)
    %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc33)
    cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    cir.br ^bb5 loc(#loc30)
  ^bb4:  // pred: ^bb2
    %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc36)
    cir.br ^bb5 loc(#loc23)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc23)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc21)
  ^bb7:  // pred: ^bb6
    cir.call @CWE190_Integer_Overflow__int_fgets_square_63b_badSink(%1) : (!cir.ptr<!s32i>) -> () loc(#loc37)
    cir.return loc(#loc13)
  } loc(#loc117)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_63_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc127)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc39)
  } loc(#loc126)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc129)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc130)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc51)
  cir.func @main(%arg0: !s32i loc(fused[#loc54, #loc55]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc56, #loc57])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc132)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc133)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc53)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc58)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc58)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc59)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc60)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc60)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc61)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc48)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_fgets_square_63_good : !cir.ptr<!cir.func<!void ()>> loc(#loc134)
    cir.call @CWE190_Integer_Overflow__int_fgets_square_63_good() : () -> () loc(#loc63)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc49)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc50)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_fgets_square_63_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc135)
    cir.call @CWE190_Integer_Overflow__int_fgets_square_63_bad() : () -> () loc(#loc67)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc51)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc70)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    cir.return %17 : !s32i loc(#loc136)
  } loc(#loc131)
  cir.func private @CWE190_Integer_Overflow__int_fgets_square_63b_goodG2BSink(!cir.ptr<!s32i>) loc(#loc137)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc139)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc80)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    cir.call @CWE190_Integer_Overflow__int_fgets_square_63b_goodG2BSink(%0) : (!cir.ptr<!s32i>) -> () loc(#loc82)
    cir.return loc(#loc75)
  } loc(#loc138)
  cir.func private @CWE190_Integer_Overflow__int_fgets_square_63b_goodB2GSink(!cir.ptr<!s32i>) loc(#loc142)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc144)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc145)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc91)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc146)
    cir.br ^bb1 loc(#loc147)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc144)
    cir.store %3, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc144)
    cir.br ^bb2 loc(#loc148)
  ^bb2:  // pred: ^bb1
    %4 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc97)
    %5 = cir.const #cir.int<3> : !s32i loc(#loc98)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc98)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc98)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc98)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc98)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc98)
    %11 = cir.binop(add, %8, %10) : !u64i loc(#loc98)
    %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc98)
    %13 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc113)
    %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc99)
    %15 = cir.call @fgets(%4, %12, %14) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc100)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc101)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc101)
    %18 = cir.cmp(ne, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc149)
    cir.brcond %18 ^bb3, ^bb4 loc(#loc150)
  ^bb3:  // pred: ^bb2
    %19 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc105)
    %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc106)
    cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    cir.br ^bb5 loc(#loc103)
  ^bb4:  // pred: ^bb2
    %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc109)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc109)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    cir.br ^bb5 loc(#loc96)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc96)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc94)
  ^bb7:  // pred: ^bb6
    cir.call @CWE190_Integer_Overflow__int_fgets_square_63b_goodB2GSink(%1) : (!cir.ptr<!s32i>) -> () loc(#loc111)
    cir.return loc(#loc86)
  } loc(#loc143)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_63a.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":44:23)
#loc10 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":27:1)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":27:73)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":29:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":48:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":35:9)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":35:45)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":31:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":31:9)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":33:12)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":33:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":34:5)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":46:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":37:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":45:9)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":37:19)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":37:32)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":37:49)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":37:13)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":37:59)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":38:9)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":41:9)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":43:9)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":40:25)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":40:20)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":40:13)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":40:36)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":44:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":47:5)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":91:1)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":95:1)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":93:5)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":93:13)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":94:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":94:13)
#loc44 = loc("/usr/include/stdlib.h":575:1)
#loc45 = loc("/usr/include/stdlib.h":575:41)
#loc46 = loc("/usr/include/time.h":76:1)
#loc47 = loc("/usr/include/time.h":76:38)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":111:15)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":113:15)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":116:15)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":118:15)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":106:1)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":121:1)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":107:1)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":109:27)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":109:22)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":109:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":111:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":112:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":112:55)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":113:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":116:5)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":117:5)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":117:54)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":118:5)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":120:12)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":120:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":55:1)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":55:74)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":57:1)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":65:1)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":59:5)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":59:9)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":61:12)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":61:5)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":63:12)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":63:5)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":64:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":68:1)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":68:74)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":70:1)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":89:1)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":76:9)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":76:45)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":72:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":72:9)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":74:12)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":74:5)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":75:5)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":87:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":78:9)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":86:9)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":78:19)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":78:32)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":78:49)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":78:13)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":78:59)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":79:9)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":82:9)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":84:9)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":81:25)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":81:20)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":81:13)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":81:36)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":85:23)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":85:13)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_square_63a.c":88:5)
#loc112 = loc(fused[#loc1, #loc2])
#loc113 = loc(fused[#loc3, #loc4])
#loc114 = loc(fused[#loc5, #loc6])
#loc115 = loc(fused[#loc7, #loc8])
#loc116 = loc(fused[#loc10, #loc11])
#loc117 = loc(fused[#loc12, #loc13])
#loc118 = loc(fused[#loc14, #loc15])
#loc119 = loc(fused[#loc16, #loc17])
#loc120 = loc(fused[#loc19, #loc18])
#loc121 = loc(fused[#loc20, #loc21])
#loc122 = loc(fused[#loc22, #loc23])
#loc123 = loc(fused[#loc27, #loc28])
#loc124 = loc(fused[#loc29, #loc30, #loc31, #loc23])
#loc125 = loc(fused[#loc34, #loc35])
#loc126 = loc(fused[#loc38, #loc39])
#loc127 = loc(fused[#loc40, #loc41])
#loc128 = loc(fused[#loc42, #loc43])
#loc129 = loc(fused[#loc44, #loc45])
#loc130 = loc(fused[#loc46, #loc47])
#loc131 = loc(fused[#loc52, #loc53])
#loc134 = loc(fused[#loc63, #loc64])
#loc135 = loc(fused[#loc67, #loc68])
#loc136 = loc(fused[#loc71, #loc70])
#loc137 = loc(fused[#loc72, #loc73])
#loc138 = loc(fused[#loc74, #loc75])
#loc139 = loc(fused[#loc76, #loc77])
#loc140 = loc(fused[#loc79, #loc78])
#loc141 = loc(fused[#loc81, #loc80])
#loc142 = loc(fused[#loc83, #loc84])
#loc143 = loc(fused[#loc85, #loc86])
#loc144 = loc(fused[#loc87, #loc88])
#loc145 = loc(fused[#loc89, #loc90])
#loc146 = loc(fused[#loc92, #loc91])
#loc147 = loc(fused[#loc93, #loc94])
#loc148 = loc(fused[#loc95, #loc96])
#loc149 = loc(fused[#loc100, #loc101])
#loc150 = loc(fused[#loc102, #loc103, #loc104, #loc96])
#loc151 = loc(fused[#loc107, #loc108])
