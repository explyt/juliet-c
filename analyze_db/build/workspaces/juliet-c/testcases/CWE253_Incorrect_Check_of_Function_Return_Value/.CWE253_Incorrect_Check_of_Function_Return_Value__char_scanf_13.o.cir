!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.global "private" constant external @GLOBAL_CONST_FIVE : !s32i {alignment = 4 : i64} loc(#loc83)
  cir.func private @__isoc99_scanf(!cir.ptr<!s8i>, ...) -> !s32i loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%99s" : !cir.array<!s8i x 4>, trailing_zeros> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc85)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"scanf failed!\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc83)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc13)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc14)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc88)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc91)
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc92)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc91)
          cir.store %6, %4 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc91)
          %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc21)
          cir.store %7, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc92)
          cir.scope {
            %8 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc24)
            %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc5)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc5)
            %11 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
            %12 = cir.call @__isoc99_scanf(%10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc24)
            %13 = cir.const #cir.int<0> : !s32i loc(#loc26)
            %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc94)
            cir.if %14 {
              %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc8)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc8)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc28)
            } loc(#loc95)
          } loc(#loc93)
        } loc(#loc90)
      } loc(#loc89)
    } loc(#loc87)
    cir.return loc(#loc10)
  } loc(#loc86)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc97)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc98)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc96)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc35)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc83)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc40)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc41)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc101)
      cir.if %3 {
        %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc35)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc35)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc45)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc104)
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc105)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc104)
          cir.store %6, %4 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc104)
          %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc51)
          cir.store %7, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc105)
          cir.scope {
            %8 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc54)
            %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc55)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc55)
            %11 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
            %12 = cir.call @__isoc99_scanf(%10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc54)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc57)
            %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc57)
            %15 = cir.cmp(eq, %12, %14) : !s32i, !cir.bool loc(#loc107)
            cir.if %15 {
              %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc59)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc59)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc60)
            } loc(#loc108)
          } loc(#loc106)
        } loc(#loc103)
      } loc(#loc102)
    } loc(#loc100)
    cir.return loc(#loc37)
  } loc(#loc99)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc83)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc66)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc111)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc114)
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc115)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc114)
          cir.store %6, %4 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc114)
          %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc73)
          cir.store %7, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc115)
          cir.scope {
            %8 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc76)
            %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc77)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc77)
            %11 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
            %12 = cir.call @__isoc99_scanf(%10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc76)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc79)
            %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc79)
            %15 = cir.cmp(eq, %12, %14) : !s32i, !cir.bool loc(#loc117)
            cir.if %15 {
              %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc81)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc81)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc82)
            } loc(#loc118)
          } loc(#loc116)
        } loc(#loc113)
      } loc(#loc112)
    } loc(#loc110)
    cir.return loc(#loc62)
  } loc(#loc109)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":111:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":111:18)
#loc3 = loc("/usr/include/stdio.h":466:1)
#loc4 = loc("/usr/include/stdio.h":466:12)
#loc5 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":35:23)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":37:27)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":24:1)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":41:1)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":26:5)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":40:5)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":26:8)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":26:27)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":27:5)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":28:9)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":39:9)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":31:13)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":31:36)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":32:13)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":32:27)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":35:13)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":38:13)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":35:17)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":35:33)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":35:42)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":36:13)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":37:17)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":90:1)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":94:1)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":92:5)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":92:11)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":93:5)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":93:11)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":53:19)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":48:1)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":69:1)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":50:5)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":68:5)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":50:8)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":50:27)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":51:5)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":54:5)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":56:5)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":53:9)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":57:9)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":67:9)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":60:13)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":60:36)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":61:13)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":61:27)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":63:13)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":66:13)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":63:17)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":63:23)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":63:33)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":63:42)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":64:13)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":65:27)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":65:17)
#loc61 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":72:1)
#loc62 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":88:1)
#loc63 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":74:5)
#loc64 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":87:5)
#loc65 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":74:8)
#loc66 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":74:27)
#loc67 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":75:5)
#loc68 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":76:9)
#loc69 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":86:9)
#loc70 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":79:13)
#loc71 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":79:36)
#loc72 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":80:13)
#loc73 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":80:27)
#loc74 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":82:13)
#loc75 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":85:13)
#loc76 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":82:17)
#loc77 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":82:23)
#loc78 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":82:33)
#loc79 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":82:42)
#loc80 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":83:13)
#loc81 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":84:27)
#loc82 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_13.c":84:17)
#loc83 = loc(fused[#loc1, #loc2])
#loc84 = loc(fused[#loc3, #loc4])
#loc85 = loc(fused[#loc6, #loc7])
#loc86 = loc(fused[#loc9, #loc10])
#loc87 = loc(fused[#loc11, #loc12])
#loc88 = loc(fused[#loc13, #loc14])
#loc89 = loc(fused[#loc15, #loc12])
#loc90 = loc(fused[#loc16, #loc17])
#loc91 = loc(fused[#loc18, #loc19])
#loc92 = loc(fused[#loc20, #loc21])
#loc93 = loc(fused[#loc22, #loc23])
#loc94 = loc(fused[#loc24, #loc26])
#loc95 = loc(fused[#loc27, #loc23])
#loc96 = loc(fused[#loc29, #loc30])
#loc97 = loc(fused[#loc31, #loc32])
#loc98 = loc(fused[#loc33, #loc34])
#loc99 = loc(fused[#loc36, #loc37])
#loc100 = loc(fused[#loc38, #loc39])
#loc101 = loc(fused[#loc40, #loc41])
#loc102 = loc(fused[#loc42, #loc43, #loc44, #loc39])
#loc103 = loc(fused[#loc46, #loc47])
#loc104 = loc(fused[#loc48, #loc49])
#loc105 = loc(fused[#loc50, #loc51])
#loc106 = loc(fused[#loc52, #loc53])
#loc107 = loc(fused[#loc54, #loc57])
#loc108 = loc(fused[#loc58, #loc53])
#loc109 = loc(fused[#loc61, #loc62])
#loc110 = loc(fused[#loc63, #loc64])
#loc111 = loc(fused[#loc65, #loc66])
#loc112 = loc(fused[#loc67, #loc64])
#loc113 = loc(fused[#loc68, #loc69])
#loc114 = loc(fused[#loc70, #loc71])
#loc115 = loc(fused[#loc72, #loc73])
#loc116 = loc(fused[#loc74, #loc75])
#loc117 = loc(fused[#loc76, #loc79])
#loc118 = loc(fused[#loc80, #loc75])
