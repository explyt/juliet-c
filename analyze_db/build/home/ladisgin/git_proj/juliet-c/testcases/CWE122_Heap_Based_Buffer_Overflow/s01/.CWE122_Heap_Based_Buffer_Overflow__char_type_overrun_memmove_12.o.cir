!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__charVoid = !cir.struct<struct "_charVoid" {!cir.array<!s8i x 16>, !cir.ptr<!void>, !cir.ptr<!void>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc201)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc202)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc203)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"0123456789abcdef0123456789abcde\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc204)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc206)
    %1 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc207)
    cir.br ^bb1 loc(#loc208)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc209)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc209)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc18)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %5 ^bb2, ^bb9 loc(#loc210)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc211)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc25)
    %7 = cir.const #cir.int<32> : !u64i loc(#loc212)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc25)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc213)
    cir.store %9, %0 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc206)
    cir.br ^bb4 loc(#loc214)
  ^bb4:  // pred: ^bb3
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc30)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc31)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!ty__charVoid>, !cir.bool loc(#loc215)
    cir.brcond %13 ^bb5, ^bb6 loc(#loc216)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc33)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc35)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
    cir.br ^bb6 loc(#loc29)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc29)
  ^bb7:  // pred: ^bb6
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc7)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc7)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc7)
    %20 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc36)
    %21 = cir.get_member %20[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc37)
    cir.store %19, %21 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc217)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc38)
    %23 = cir.get_member %22[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc37)
    %24 = cir.load %23 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc39)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc218)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc40)
    %26 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc41)
    %27 = cir.get_member %26[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc219)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc219)
    %30 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc44)
    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc44)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc44)
    %33 = cir.const #cir.int<32> : !u64i loc(#loc220)
    cir.libc.memmove %33 bytes from %32 to %29 : !cir.ptr<!void>, !u64i loc(#loc221)
    %34 = cir.const #cir.int<0> : !s32i loc(#loc49)
    %35 = cir.cast(integral, %34 : !s32i), !s8i loc(#loc49)
    %36 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc50)
    %37 = cir.get_member %36[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %38 = cir.const #cir.int<16> : !u64i loc(#loc222)
    %39 = cir.const #cir.int<1> : !u64i loc(#loc223)
    %40 = cir.binop(div, %38, %39) : !u64i loc(#loc224)
    %41 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc55)
    %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc225)
    %44 = cir.cast(array_to_ptrdecay, %37 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc50)
    %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc57)
    cir.store %35, %45 : !s8i, !cir.ptr<!s8i> loc(#loc226)
    %46 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc58)
    %47 = cir.get_member %46[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc227)
    cir.call @printLine(%48) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %49 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc61)
    %50 = cir.get_member %49[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc37)
    %51 = cir.load %50 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc62)
    %52 = cir.cast(bitcast, %51 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc228)
    cir.call @printLine(%52) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    cir.br ^bb8 loc(#loc24)
  ^bb8:  // pred: ^bb7
    cir.br ^bb16 loc(#loc21)
  ^bb9:  // pred: ^bb1
    cir.br ^bb10 loc(#loc229)
  ^bb10:  // pred: ^bb9
    %53 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc66)
    %54 = cir.const #cir.int<32> : !u64i loc(#loc230)
    %55 = cir.call @malloc(%54) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc66)
    %56 = cir.cast(bitcast, %55 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc231)
    cir.store %56, %1 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc207)
    cir.br ^bb11 loc(#loc232)
  ^bb11:  // pred: ^bb10
    %57 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc71)
    %58 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc72)
    %59 = cir.cast(bitcast, %58 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc72)
    %60 = cir.cmp(eq, %57, %59) : !cir.ptr<!ty__charVoid>, !cir.bool loc(#loc233)
    cir.brcond %60 ^bb12, ^bb13 loc(#loc234)
  ^bb12:  // pred: ^bb11
    %61 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc74)
    %62 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc76)
    cir.call @exit(%63) : (!s32i) -> () extra(#fn_attr) loc(#loc74)
    cir.br ^bb13 loc(#loc70)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc70)
  ^bb14:  // pred: ^bb13
    %64 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc77)
    %65 = cir.cast(array_to_ptrdecay, %64 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc77)
    %66 = cir.cast(bitcast, %65 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc77)
    %67 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc78)
    %68 = cir.get_member %67[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc37)
    cir.store %66, %68 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc235)
    %69 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc79)
    %70 = cir.get_member %69[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc37)
    %71 = cir.load %70 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc80)
    %72 = cir.cast(bitcast, %71 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc236)
    cir.call @printLine(%72) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    %73 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc82)
    %74 = cir.get_member %73[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %75 = cir.cast(array_to_ptrdecay, %74 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc237)
    %76 = cir.cast(bitcast, %75 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc237)
    %77 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc84)
    %78 = cir.cast(array_to_ptrdecay, %77 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc84)
    %79 = cir.cast(bitcast, %78 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc84)
    %80 = cir.const #cir.int<16> : !u64i loc(#loc238)
    cir.libc.memmove %80 bytes from %79 to %76 : !cir.ptr<!void>, !u64i loc(#loc239)
    %81 = cir.const #cir.int<0> : !s32i loc(#loc89)
    %82 = cir.cast(integral, %81 : !s32i), !s8i loc(#loc89)
    %83 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc90)
    %84 = cir.get_member %83[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %85 = cir.const #cir.int<16> : !u64i loc(#loc240)
    %86 = cir.const #cir.int<1> : !u64i loc(#loc241)
    %87 = cir.binop(div, %85, %86) : !u64i loc(#loc242)
    %88 = cir.const #cir.int<1> : !s32i loc(#loc95)
    %89 = cir.cast(integral, %88 : !s32i), !u64i loc(#loc95)
    %90 = cir.binop(sub, %87, %89) : !u64i loc(#loc243)
    %91 = cir.cast(array_to_ptrdecay, %84 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc90)
    %92 = cir.ptr_stride(%91 : !cir.ptr<!s8i>, %90 : !u64i), !cir.ptr<!s8i> loc(#loc97)
    cir.store %82, %92 : !s8i, !cir.ptr<!s8i> loc(#loc244)
    %93 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc98)
    %94 = cir.get_member %93[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %95 = cir.cast(array_to_ptrdecay, %94 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc245)
    cir.call @printLine(%95) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    %96 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc101)
    %97 = cir.get_member %96[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc37)
    %98 = cir.load %97 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc102)
    %99 = cir.cast(bitcast, %98 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc246)
    cir.call @printLine(%99) : (!cir.ptr<!s8i>) -> () loc(#loc103)
    cir.br ^bb15 loc(#loc65)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc17)
  ^bb16:  // 2 preds: ^bb8, ^bb15
    cir.br ^bb17 loc(#loc17)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc11)
  } loc(#loc205)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc248)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc106)
    cir.return loc(#loc105)
  } loc(#loc247)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc250)
    %1 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc251)
    cir.br ^bb1 loc(#loc252)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc253)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc253)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc116)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc116)
    cir.brcond %5 ^bb2, ^bb9 loc(#loc254)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc255)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc123)
    %7 = cir.const #cir.int<32> : !u64i loc(#loc256)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc123)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc257)
    cir.store %9, %0 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc250)
    cir.br ^bb4 loc(#loc258)
  ^bb4:  // pred: ^bb3
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc128)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc129)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc129)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!ty__charVoid>, !cir.bool loc(#loc259)
    cir.brcond %13 ^bb5, ^bb6 loc(#loc260)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc131)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc132)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc133)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc131)
    cir.br ^bb6 loc(#loc127)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc127)
  ^bb7:  // pred: ^bb6
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc134)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc134)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc134)
    %20 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc135)
    %21 = cir.get_member %20[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc37)
    cir.store %19, %21 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc261)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc136)
    %23 = cir.get_member %22[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc37)
    %24 = cir.load %23 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc137)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc262)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc138)
    %26 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc139)
    %27 = cir.get_member %26[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc263)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc263)
    %30 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc141)
    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc141)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc141)
    %33 = cir.const #cir.int<16> : !u64i loc(#loc264)
    cir.libc.memmove %33 bytes from %32 to %29 : !cir.ptr<!void>, !u64i loc(#loc265)
    %34 = cir.const #cir.int<0> : !s32i loc(#loc146)
    %35 = cir.cast(integral, %34 : !s32i), !s8i loc(#loc146)
    %36 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc147)
    %37 = cir.get_member %36[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %38 = cir.const #cir.int<16> : !u64i loc(#loc266)
    %39 = cir.const #cir.int<1> : !u64i loc(#loc267)
    %40 = cir.binop(div, %38, %39) : !u64i loc(#loc268)
    %41 = cir.const #cir.int<1> : !s32i loc(#loc152)
    %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc152)
    %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc269)
    %44 = cir.cast(array_to_ptrdecay, %37 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc147)
    %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc154)
    cir.store %35, %45 : !s8i, !cir.ptr<!s8i> loc(#loc270)
    %46 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc155)
    %47 = cir.get_member %46[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc271)
    cir.call @printLine(%48) : (!cir.ptr<!s8i>) -> () loc(#loc157)
    %49 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc158)
    %50 = cir.get_member %49[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc37)
    %51 = cir.load %50 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc159)
    %52 = cir.cast(bitcast, %51 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc272)
    cir.call @printLine(%52) : (!cir.ptr<!s8i>) -> () loc(#loc160)
    cir.br ^bb8 loc(#loc122)
  ^bb8:  // pred: ^bb7
    cir.br ^bb16 loc(#loc119)
  ^bb9:  // pred: ^bb1
    cir.br ^bb10 loc(#loc273)
  ^bb10:  // pred: ^bb9
    %53 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc163)
    %54 = cir.const #cir.int<32> : !u64i loc(#loc274)
    %55 = cir.call @malloc(%54) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc163)
    %56 = cir.cast(bitcast, %55 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc275)
    cir.store %56, %1 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc251)
    cir.br ^bb11 loc(#loc276)
  ^bb11:  // pred: ^bb10
    %57 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc168)
    %58 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc169)
    %59 = cir.cast(bitcast, %58 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc169)
    %60 = cir.cmp(eq, %57, %59) : !cir.ptr<!ty__charVoid>, !cir.bool loc(#loc277)
    cir.brcond %60 ^bb12, ^bb13 loc(#loc278)
  ^bb12:  // pred: ^bb11
    %61 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc171)
    %62 = cir.const #cir.int<1> : !s32i loc(#loc172)
    %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc173)
    cir.call @exit(%63) : (!s32i) -> () extra(#fn_attr) loc(#loc171)
    cir.br ^bb13 loc(#loc167)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc167)
  ^bb14:  // pred: ^bb13
    %64 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc174)
    %65 = cir.cast(array_to_ptrdecay, %64 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc174)
    %66 = cir.cast(bitcast, %65 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc174)
    %67 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc175)
    %68 = cir.get_member %67[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc37)
    cir.store %66, %68 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc279)
    %69 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc176)
    %70 = cir.get_member %69[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc37)
    %71 = cir.load %70 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc177)
    %72 = cir.cast(bitcast, %71 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc280)
    cir.call @printLine(%72) : (!cir.ptr<!s8i>) -> () loc(#loc178)
    %73 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc179)
    %74 = cir.get_member %73[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %75 = cir.cast(array_to_ptrdecay, %74 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc281)
    %76 = cir.cast(bitcast, %75 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc281)
    %77 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc181)
    %78 = cir.cast(array_to_ptrdecay, %77 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc181)
    %79 = cir.cast(bitcast, %78 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc181)
    %80 = cir.const #cir.int<16> : !u64i loc(#loc282)
    cir.libc.memmove %80 bytes from %79 to %76 : !cir.ptr<!void>, !u64i loc(#loc283)
    %81 = cir.const #cir.int<0> : !s32i loc(#loc186)
    %82 = cir.cast(integral, %81 : !s32i), !s8i loc(#loc186)
    %83 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc187)
    %84 = cir.get_member %83[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %85 = cir.const #cir.int<16> : !u64i loc(#loc284)
    %86 = cir.const #cir.int<1> : !u64i loc(#loc285)
    %87 = cir.binop(div, %85, %86) : !u64i loc(#loc286)
    %88 = cir.const #cir.int<1> : !s32i loc(#loc192)
    %89 = cir.cast(integral, %88 : !s32i), !u64i loc(#loc192)
    %90 = cir.binop(sub, %87, %89) : !u64i loc(#loc287)
    %91 = cir.cast(array_to_ptrdecay, %84 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc187)
    %92 = cir.ptr_stride(%91 : !cir.ptr<!s8i>, %90 : !u64i), !cir.ptr<!s8i> loc(#loc194)
    cir.store %82, %92 : !s8i, !cir.ptr<!s8i> loc(#loc288)
    %93 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc195)
    %94 = cir.get_member %93[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %95 = cir.cast(array_to_ptrdecay, %94 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc289)
    cir.call @printLine(%95) : (!cir.ptr<!s8i>) -> () loc(#loc197)
    %96 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc198)
    %97 = cir.get_member %96[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc37)
    %98 = cir.load %97 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc199)
    %99 = cir.cast(bitcast, %98 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc290)
    cir.call @printLine(%99) : (!cir.ptr<!s8i>) -> () loc(#loc200)
    cir.br ^bb15 loc(#loc162)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc115)
  ^bb16:  // 2 preds: ^bb8, ^bb15
    cir.br ^bb17 loc(#loc115)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc109)
  } loc(#loc249)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":40:50)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":33:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":65:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":38:13)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":38:76)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":53:13)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":53:76)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":35:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":64:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":35:8)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":35:33)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":36:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":49:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":51:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":37:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":48:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":38:53)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":38:60)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":38:75)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":39:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":39:51)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":39:17)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":39:35)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":39:41)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":39:42)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":39:48)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":39:47)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":40:13)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":27:12)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":42:31)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":42:47)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":42:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":44:21)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":26:10)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":44:37)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":44:48)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":44:57)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":44:79)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":44:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":44:80)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":45:93)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":45:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":45:40)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":45:72)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":45:74)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":45:85)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":45:88)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":45:39)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":45:29)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":46:31)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":46:47)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":46:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":47:31)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":47:47)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":47:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":52:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":63:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":53:53)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":53:60)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":53:75)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":54:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":54:51)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":54:17)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":54:35)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":54:41)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":54:42)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":54:48)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":54:47)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":55:50)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":55:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":57:31)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":57:47)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":57:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":59:21)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":59:37)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":59:48)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":59:57)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":59:89)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":59:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":59:90)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":60:93)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":60:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":60:40)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":60:72)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":60:74)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":60:85)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":60:88)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":60:39)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":60:29)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":61:31)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":61:47)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":61:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":62:31)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":62:47)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":62:13)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":106:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":109:1)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":108:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":108:11)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":72:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":104:1)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":77:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":77:76)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":92:13)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":92:76)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":74:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":103:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":74:8)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":74:33)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":75:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":88:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":90:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":76:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":87:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":77:53)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":77:60)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":77:75)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":78:13)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":78:51)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":78:17)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":78:35)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":78:41)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":78:42)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":78:48)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":78:47)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":79:50)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":79:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":81:31)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":81:47)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":81:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":83:21)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":83:37)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":83:48)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":83:57)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":83:89)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":83:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":83:90)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":84:93)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":84:13)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":84:40)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":84:72)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":84:74)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":84:85)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":84:88)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":84:39)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":84:29)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":85:31)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":85:47)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":85:13)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":86:31)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":86:47)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":86:13)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":91:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":102:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":92:53)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":92:60)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":92:75)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":93:13)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":93:51)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":93:17)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":93:35)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":93:41)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":93:42)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":93:48)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":93:47)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":94:50)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":94:13)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":96:31)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":96:47)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":96:13)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":98:21)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":98:37)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":98:48)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":98:57)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":98:89)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":98:13)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":98:90)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":99:93)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":99:13)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":99:40)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":99:72)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":99:74)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":99:85)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":99:88)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":99:39)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":99:29)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":100:31)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":100:47)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":100:13)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":101:31)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":101:47)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c":101:13)
#loc201 = loc(fused[#loc1, #loc2])
#loc202 = loc(fused[#loc3, #loc4])
#loc203 = loc(fused[#loc5, #loc6])
#loc204 = loc(fused[#loc8, #loc9])
#loc205 = loc(fused[#loc10, #loc11])
#loc206 = loc(fused[#loc12, #loc13])
#loc207 = loc(fused[#loc14, #loc15])
#loc208 = loc(fused[#loc16, #loc17])
#loc209 = loc(fused[#loc18, #loc19])
#loc210 = loc(fused[#loc20, #loc21, #loc22, #loc17])
#loc211 = loc(fused[#loc23, #loc24])
#loc212 = loc(fused[#loc26, #loc27])
#loc213 = loc(fused[#loc25, #loc13])
#loc214 = loc(fused[#loc28, #loc29])
#loc215 = loc(fused[#loc30, #loc31])
#loc216 = loc(fused[#loc32, #loc29])
#loc217 = loc(fused[#loc36, #loc7])
#loc218 = loc(fused[#loc38, #loc39])
#loc219 = loc(fused[#loc41, #loc43])
#loc220 = loc(fused[#loc45, #loc46])
#loc221 = loc(fused[#loc47, #loc48])
#loc222 = loc(fused[#loc51, #loc52])
#loc223 = loc(fused[#loc53, #loc54])
#loc224 = loc(fused[#loc51, #loc54])
#loc225 = loc(fused[#loc56, #loc55])
#loc226 = loc(fused[#loc50, #loc49])
#loc227 = loc(fused[#loc58, #loc59])
#loc228 = loc(fused[#loc61, #loc62])
#loc229 = loc(fused[#loc64, #loc65])
#loc230 = loc(fused[#loc67, #loc68])
#loc231 = loc(fused[#loc66, #loc15])
#loc232 = loc(fused[#loc69, #loc70])
#loc233 = loc(fused[#loc71, #loc72])
#loc234 = loc(fused[#loc73, #loc70])
#loc235 = loc(fused[#loc78, #loc77])
#loc236 = loc(fused[#loc79, #loc80])
#loc237 = loc(fused[#loc82, #loc83])
#loc238 = loc(fused[#loc85, #loc86])
#loc239 = loc(fused[#loc87, #loc88])
#loc240 = loc(fused[#loc91, #loc92])
#loc241 = loc(fused[#loc93, #loc94])
#loc242 = loc(fused[#loc91, #loc94])
#loc243 = loc(fused[#loc96, #loc95])
#loc244 = loc(fused[#loc90, #loc89])
#loc245 = loc(fused[#loc98, #loc99])
#loc246 = loc(fused[#loc101, #loc102])
#loc247 = loc(fused[#loc104, #loc105])
#loc248 = loc(fused[#loc106, #loc107])
#loc249 = loc(fused[#loc108, #loc109])
#loc250 = loc(fused[#loc110, #loc111])
#loc251 = loc(fused[#loc112, #loc113])
#loc252 = loc(fused[#loc114, #loc115])
#loc253 = loc(fused[#loc116, #loc117])
#loc254 = loc(fused[#loc118, #loc119, #loc120, #loc115])
#loc255 = loc(fused[#loc121, #loc122])
#loc256 = loc(fused[#loc124, #loc125])
#loc257 = loc(fused[#loc123, #loc111])
#loc258 = loc(fused[#loc126, #loc127])
#loc259 = loc(fused[#loc128, #loc129])
#loc260 = loc(fused[#loc130, #loc127])
#loc261 = loc(fused[#loc135, #loc134])
#loc262 = loc(fused[#loc136, #loc137])
#loc263 = loc(fused[#loc139, #loc140])
#loc264 = loc(fused[#loc142, #loc143])
#loc265 = loc(fused[#loc144, #loc145])
#loc266 = loc(fused[#loc148, #loc149])
#loc267 = loc(fused[#loc150, #loc151])
#loc268 = loc(fused[#loc148, #loc151])
#loc269 = loc(fused[#loc153, #loc152])
#loc270 = loc(fused[#loc147, #loc146])
#loc271 = loc(fused[#loc155, #loc156])
#loc272 = loc(fused[#loc158, #loc159])
#loc273 = loc(fused[#loc161, #loc162])
#loc274 = loc(fused[#loc164, #loc165])
#loc275 = loc(fused[#loc163, #loc113])
#loc276 = loc(fused[#loc166, #loc167])
#loc277 = loc(fused[#loc168, #loc169])
#loc278 = loc(fused[#loc170, #loc167])
#loc279 = loc(fused[#loc175, #loc174])
#loc280 = loc(fused[#loc176, #loc177])
#loc281 = loc(fused[#loc179, #loc180])
#loc282 = loc(fused[#loc182, #loc183])
#loc283 = loc(fused[#loc184, #loc185])
#loc284 = loc(fused[#loc188, #loc189])
#loc285 = loc(fused[#loc190, #loc191])
#loc286 = loc(fused[#loc188, #loc191])
#loc287 = loc(fused[#loc193, #loc192])
#loc288 = loc(fused[#loc187, #loc186])
#loc289 = loc(fused[#loc195, #loc196])
#loc290 = loc(fused[#loc198, #loc199])
