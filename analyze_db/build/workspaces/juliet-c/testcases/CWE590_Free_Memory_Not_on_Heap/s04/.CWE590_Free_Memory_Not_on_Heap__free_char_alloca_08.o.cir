!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE590_Free_Memory_Not_on_Heap/s04/CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc149)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc150)
  cir.func no_proto @CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc152)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc9)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc153)
    cir.scope {
      %6 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc155)
      %7 = cir.call %6() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc13)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc13)
      cir.if %8 {
        cir.scope {
          %9 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc158)
          %10 = cir.const #cir.int<100> : !s32i loc(#loc19)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc19)
          %12 = cir.const #cir.int<1> : !u64i loc(#loc19)
          %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc19)
          %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc19)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc19)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc19)
          cir.store %16, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc158)
          %17 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
          %19 = cir.const #cir.int<65> : !s32i loc(#loc21)
          %20 = cir.const #cir.int<100> : !s32i loc(#loc22)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc23)
          %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc22)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc22)
          cir.libc.memset %23 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc159)
          %24 = cir.const #cir.int<0> : !s32i loc(#loc26)
          %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc26)
          %26 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
          %27 = cir.const #cir.int<100> : !s32i loc(#loc28)
          %28 = cir.const #cir.int<1> : !s32i loc(#loc29)
          %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc28)
          %30 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc30)
          cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc160)
          %31 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
          cir.store %31, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc161)
        } loc(#loc157)
      } loc(#loc156)
    } loc(#loc154)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc34)
    %3 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc35)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc36)
    cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc35)
    cir.return loc(#loc6)
  } loc(#loc151)
  cir.func no_proto @CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc163)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc164)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    cir.return loc(#loc38)
  } loc(#loc162)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc44)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc45)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    cir.return %2 : !s32i loc(#loc166)
  } loc(#loc165)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc47)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc167)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"malloc() failed\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc50)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc168)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc170)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc57)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc171)
    cir.scope {
      %6 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc173)
      %7 = cir.call %6() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc61)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc61)
      cir.if %8 {
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc47)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc47)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc66)
      } else {
        cir.scope {
          %9 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc176)
          %10 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc71)
          %11 = cir.const #cir.int<100> : !s32i loc(#loc72)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc72)
          %13 = cir.const #cir.int<1> : !u64i loc(#loc177)
          %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc178)
          %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc71)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc179)
          cir.store %16, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc176)
          cir.scope {
            %32 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
            %33 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc78)
            %34 = cir.cast(bitcast, %33 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc78)
            %35 = cir.cmp(eq, %32, %34) : !cir.ptr<!s8i>, !cir.bool loc(#loc181)
            cir.if %35 {
              %36 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc50)
              %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc50)
              cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc80)
              %38 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc81)
              %39 = cir.const #cir.int<1> : !s32i loc(#loc82)
              cir.call @exit(%39) : (!s32i) -> () extra(#fn_attr) loc(#loc81)
            } loc(#loc182)
          } loc(#loc180)
          %17 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc83)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc83)
          %19 = cir.const #cir.int<65> : !s32i loc(#loc84)
          %20 = cir.const #cir.int<100> : !s32i loc(#loc85)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc86)
          %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc85)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc85)
          cir.libc.memset %23 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc183)
          %24 = cir.const #cir.int<0> : !s32i loc(#loc89)
          %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc89)
          %26 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc90)
          %27 = cir.const #cir.int<100> : !s32i loc(#loc91)
          %28 = cir.const #cir.int<1> : !s32i loc(#loc92)
          %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc91)
          %30 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc93)
          cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc184)
          %31 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
          cir.store %31, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc185)
        } loc(#loc175)
      } loc(#loc174)
    } loc(#loc172)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc96)
    cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    %3 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc98)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc99)
    cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc98)
    cir.return loc(#loc54)
  } loc(#loc169)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc101)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc102)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc187)
    cir.return %2 : !s32i loc(#loc187)
  } loc(#loc186)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc189)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc108)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc190)
    cir.scope {
      %6 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc192)
      %7 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc112)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc112)
      cir.if %8 {
        cir.scope {
          %9 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc195)
          %10 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc119)
          %11 = cir.const #cir.int<100> : !s32i loc(#loc120)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc120)
          %13 = cir.const #cir.int<1> : !u64i loc(#loc196)
          %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc197)
          %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc119)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc198)
          cir.store %16, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc195)
          cir.scope {
            %32 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
            %33 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc126)
            %34 = cir.cast(bitcast, %33 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc126)
            %35 = cir.cmp(eq, %32, %34) : !cir.ptr<!s8i>, !cir.bool loc(#loc200)
            cir.if %35 {
              %36 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc128)
              %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc128)
              cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc129)
              %38 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc130)
              %39 = cir.const #cir.int<1> : !s32i loc(#loc131)
              cir.call @exit(%39) : (!s32i) -> () extra(#fn_attr) loc(#loc130)
            } loc(#loc201)
          } loc(#loc199)
          %17 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc132)
          %19 = cir.const #cir.int<65> : !s32i loc(#loc133)
          %20 = cir.const #cir.int<100> : !s32i loc(#loc134)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc135)
          %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc134)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc134)
          cir.libc.memset %23 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc202)
          %24 = cir.const #cir.int<0> : !s32i loc(#loc138)
          %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc138)
          %26 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
          %27 = cir.const #cir.int<100> : !s32i loc(#loc140)
          %28 = cir.const #cir.int<1> : !s32i loc(#loc141)
          %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc140)
          %30 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc142)
          cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc203)
          %31 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
          cir.store %31, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc204)
        } loc(#loc194)
      } loc(#loc193)
    } loc(#loc191)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
    cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc146)
    %3 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc147)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc148)
    cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc147)
    cir.return loc(#loc105)
  } loc(#loc188)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE590_Free_Memory_Not_on_Heap/s04/CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":37:1)
#loc6 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":54:1)
#loc7 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":39:5)
#loc8 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":39:12)
#loc9 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":40:12)
#loc10 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":40:5)
#loc11 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":41:5)
#loc12 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":50:5)
#loc13 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":41:8)
#loc14 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":41:26)
#loc15 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":42:5)
#loc16 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":43:9)
#loc17 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":49:9)
#loc18 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":45:13)
#loc19 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":45:41)
#loc20 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":46:20)
#loc21 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":46:32)
#loc22 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":46:37)
#loc23 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":46:41)
#loc24 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":46:13)
#loc25 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":46:42)
#loc26 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":47:33)
#loc27 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":47:13)
#loc28 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":47:24)
#loc29 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":47:28)
#loc30 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":47:29)
#loc31 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":48:20)
#loc32 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":48:13)
#loc33 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":51:15)
#loc34 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":51:5)
#loc35 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":53:5)
#loc36 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":53:10)
#loc37 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":115:1)
#loc38 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":119:1)
#loc39 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":117:5)
#loc40 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":117:14)
#loc41 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":118:5)
#loc42 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":118:14)
#loc43 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":25:1)
#loc44 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":28:1)
#loc45 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":27:12)
#loc46 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":27:5)
#loc47 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":68:19)
#loc48 = loc("/usr/include/stdlib.h":672:1)
#loc49 = loc("/usr/include/stdlib.h":672:45)
#loc50 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":77:27)
#loc51 = loc("/usr/include/stdlib.h":756:1)
#loc52 = loc("/usr/include/stdlib.h":756:70)
#loc53 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":61:1)
#loc54 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":88:1)
#loc55 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":63:5)
#loc56 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":63:12)
#loc57 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":64:12)
#loc58 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":64:5)
#loc59 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":65:5)
#loc60 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":84:5)
#loc61 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":65:8)
#loc62 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":65:27)
#loc63 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":66:5)
#loc64 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":69:5)
#loc65 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":71:5)
#loc66 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":68:9)
#loc67 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":72:9)
#loc68 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":83:9)
#loc69 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":74:13)
#loc70 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":74:64)
#loc71 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":74:41)
#loc72 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":74:48)
#loc73 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":74:52)
#loc74 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":74:63)
#loc75 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":75:13)
#loc76 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":79:13)
#loc77 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":75:17)
#loc78 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":75:31)
#loc79 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":76:13)
#loc80 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":77:17)
#loc81 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":78:17)
#loc82 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":78:22)
#loc83 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":80:20)
#loc84 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":80:32)
#loc85 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":80:37)
#loc86 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":80:41)
#loc87 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":80:13)
#loc88 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":80:42)
#loc89 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":81:33)
#loc90 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":81:13)
#loc91 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":81:24)
#loc92 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":81:28)
#loc93 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":81:29)
#loc94 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":82:20)
#loc95 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":82:13)
#loc96 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":85:15)
#loc97 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":85:5)
#loc98 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":87:5)
#loc99 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":87:10)
#loc100 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":30:1)
#loc101 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":33:1)
#loc102 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":32:12)
#loc103 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":32:5)
#loc104 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":91:1)
#loc105 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":113:1)
#loc106 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":93:5)
#loc107 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":93:12)
#loc108 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":94:12)
#loc109 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":94:5)
#loc110 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":95:5)
#loc111 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":109:5)
#loc112 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":95:8)
#loc113 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":95:26)
#loc114 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":96:5)
#loc115 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":97:9)
#loc116 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":108:9)
#loc117 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":99:13)
#loc118 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":99:64)
#loc119 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":99:41)
#loc120 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":99:48)
#loc121 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":99:52)
#loc122 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":99:63)
#loc123 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":100:13)
#loc124 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":104:13)
#loc125 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":100:17)
#loc126 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":100:31)
#loc127 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":101:13)
#loc128 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":102:27)
#loc129 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":102:17)
#loc130 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":103:17)
#loc131 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":103:22)
#loc132 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":105:20)
#loc133 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":105:32)
#loc134 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":105:37)
#loc135 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":105:41)
#loc136 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":105:13)
#loc137 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":105:42)
#loc138 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":106:33)
#loc139 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":106:13)
#loc140 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":106:24)
#loc141 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":106:28)
#loc142 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":106:29)
#loc143 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":107:20)
#loc144 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":107:13)
#loc145 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":110:15)
#loc146 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":110:5)
#loc147 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":112:5)
#loc148 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_08.c":112:10)
#loc149 = loc(fused[#loc1, #loc2])
#loc150 = loc(fused[#loc3, #loc4])
#loc151 = loc(fused[#loc5, #loc6])
#loc152 = loc(fused[#loc7, #loc8])
#loc153 = loc(fused[#loc10, #loc9])
#loc154 = loc(fused[#loc11, #loc12])
#loc155 = loc(fused[#loc13, #loc14])
#loc156 = loc(fused[#loc15, #loc12])
#loc157 = loc(fused[#loc16, #loc17])
#loc158 = loc(fused[#loc18, #loc19])
#loc159 = loc(fused[#loc24, #loc25])
#loc160 = loc(fused[#loc27, #loc26])
#loc161 = loc(fused[#loc32, #loc31])
#loc162 = loc(fused[#loc37, #loc38])
#loc163 = loc(fused[#loc39, #loc40])
#loc164 = loc(fused[#loc41, #loc42])
#loc165 = loc(fused[#loc43, #loc44])
#loc166 = loc(fused[#loc46, #loc45])
#loc167 = loc(fused[#loc48, #loc49])
#loc168 = loc(fused[#loc51, #loc52])
#loc169 = loc(fused[#loc53, #loc54])
#loc170 = loc(fused[#loc55, #loc56])
#loc171 = loc(fused[#loc58, #loc57])
#loc172 = loc(fused[#loc59, #loc60])
#loc173 = loc(fused[#loc61, #loc62])
#loc174 = loc(fused[#loc63, #loc64, #loc65, #loc60])
#loc175 = loc(fused[#loc67, #loc68])
#loc176 = loc(fused[#loc69, #loc70])
#loc177 = loc(fused[#loc73, #loc74])
#loc178 = loc(fused[#loc72, #loc74])
#loc179 = loc(fused[#loc71, #loc70])
#loc180 = loc(fused[#loc75, #loc76])
#loc181 = loc(fused[#loc77, #loc78])
#loc182 = loc(fused[#loc79, #loc76])
#loc183 = loc(fused[#loc87, #loc88])
#loc184 = loc(fused[#loc90, #loc89])
#loc185 = loc(fused[#loc95, #loc94])
#loc186 = loc(fused[#loc100, #loc101])
#loc187 = loc(fused[#loc103, #loc102])
#loc188 = loc(fused[#loc104, #loc105])
#loc189 = loc(fused[#loc106, #loc107])
#loc190 = loc(fused[#loc109, #loc108])
#loc191 = loc(fused[#loc110, #loc111])
#loc192 = loc(fused[#loc112, #loc113])
#loc193 = loc(fused[#loc114, #loc111])
#loc194 = loc(fused[#loc115, #loc116])
#loc195 = loc(fused[#loc117, #loc118])
#loc196 = loc(fused[#loc121, #loc122])
#loc197 = loc(fused[#loc120, #loc122])
#loc198 = loc(fused[#loc119, #loc118])
#loc199 = loc(fused[#loc123, #loc124])
#loc200 = loc(fused[#loc125, #loc126])
#loc201 = loc(fused[#loc127, #loc124])
#loc202 = loc(fused[#loc136, #loc137])
#loc203 = loc(fused[#loc139, #loc138])
#loc204 = loc(fused[#loc144, #loc143])
