!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":22:21)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":22:29)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":49:25)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":49:33)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":70:25)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":70:33)
#loc105 = loc(fused[#loc5, #loc6])
#loc119 = loc(fused[#loc38, #loc39])
#loc131 = loc(fused[#loc68, #loc69])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_multiply_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLongLongLine(!s64i) loc(#loc103)
  cir.func internal private @badSink(%arg0: !s64i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc106)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc105)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc9)
    cir.br ^bb1 loc(#loc107)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc12)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc13)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc13)
    %5 = cir.cmp(gt, %2, %4) : !s64i, !cir.bool loc(#loc108)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc109)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc15)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc8)
    %9 = cir.binop(mul, %6, %8) nsw : !s64i loc(#loc15)
    cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc106)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc16)
    cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc17)
    cir.br ^bb3 loc(#loc11)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc11)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc4)
  } loc(#loc104)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_multiply_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc111)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc112)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc23)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>> loc(#loc112)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc24)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc113)
    %4 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc26)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc114)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc28)
    %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc29)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!s64i)>>, !s64i) -> () loc(#loc28)
    cir.return loc(#loc19)
  } loc(#loc110)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_multiply_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc116)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc117)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc115)
  cir.func internal private @goodG2BSink(%arg0: !s64i loc(fused[#loc38, #loc39])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc120)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc119)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc42)
    cir.br ^bb1 loc(#loc121)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc45)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc46)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc46)
    %5 = cir.cmp(gt, %2, %4) : !s64i, !cir.bool loc(#loc122)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc123)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc48)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc41)
    %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc41)
    %9 = cir.binop(mul, %6, %8) nsw : !s64i loc(#loc48)
    cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc120)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc49)
    cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc50)
    cir.br ^bb3 loc(#loc44)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc44)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc37)
  } loc(#loc118)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc125)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc126)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc56)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>> loc(#loc126)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc57)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc127)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc59)
    %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc59)
    cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc128)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc61)
    %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc62)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s64i)>>, !s64i) -> () loc(#loc61)
    cir.return loc(#loc52)
  } loc(#loc124)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc129)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc65)
  cir.func internal private @goodB2GSink(%arg0: !s64i loc(fused[#loc68, #loc69])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc132)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc131)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc72)
    cir.br ^bb1 loc(#loc133)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc75)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc76)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc76)
    %5 = cir.cmp(gt, %2, %4) : !s64i, !cir.bool loc(#loc134)
    cir.brcond %5 ^bb2, ^bb8 loc(#loc135)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc136)
  ^bb3:  // pred: ^bb2
    %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc80)
    %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc81)
    %8 = cir.const #cir.int<2> : !s32i loc(#loc82)
    %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc82)
    %10 = cir.binop(div, %7, %9) : !s64i loc(#loc137)
    %11 = cir.cmp(lt, %6, %10) : !s64i, !cir.bool loc(#loc138)
    cir.brcond %11 ^bb4, ^bb5 loc(#loc139)
  ^bb4:  // pred: ^bb3
    %12 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc87)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc71)
    %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc71)
    %15 = cir.binop(mul, %12, %14) nsw : !s64i loc(#loc87)
    cir.store %15, %0 : !s64i, !cir.ptr<!s64i> loc(#loc132)
    %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc88)
    cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc89)
    cir.br ^bb6 loc(#loc85)
  ^bb5:  // pred: ^bb3
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc65)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    cir.br ^bb6 loc(#loc79)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc79)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc74)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc74)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc67)
  } loc(#loc130)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc141)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc142)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc96)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>> loc(#loc142)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc97)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc143)
    %4 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc99)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc144)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc101)
    %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc102)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!s64i)>>, !s64i) -> () loc(#loc101)
    cir.return loc(#loc92)
  } loc(#loc140)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_multiply_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":30:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":27:9)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":27:33)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":23:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":24:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":29:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":24:8)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":24:15)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":25:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":27:26)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":28:27)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":28:9)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":32:1)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":42:1)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":34:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":34:13)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":36:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":36:33)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":37:12)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":37:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":39:12)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":39:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":41:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":41:13)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":97:1)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":101:1)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":99:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":99:13)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":100:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":100:13)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":49:1)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":57:1)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":54:9)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":54:33)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":50:1)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":51:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":56:5)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":51:8)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":51:15)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":52:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":54:26)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":55:27)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":55:9)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":59:1)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":67:1)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":61:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":61:13)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":62:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":62:33)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":63:12)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":63:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":65:12)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":65:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":66:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":66:13)
#loc63 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc64 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":82:23)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":70:1)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":85:1)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":77:13)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":77:37)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":71:1)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":72:5)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":84:5)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":72:8)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":72:15)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":73:5)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":75:9)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":83:9)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":75:13)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":75:21)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":75:31)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":75:32)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":76:9)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":79:9)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":81:9)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":77:30)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":78:31)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":78:13)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":82:13)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":87:1)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":95:1)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":89:5)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":89:13)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":90:5)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":90:33)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":91:12)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":91:5)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":93:12)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":93:5)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":94:5)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_44.c":94:13)
#loc103 = loc(fused[#loc1, #loc2])
#loc104 = loc(fused[#loc3, #loc4])
#loc106 = loc(fused[#loc7, #loc8])
#loc107 = loc(fused[#loc10, #loc11])
#loc108 = loc(fused[#loc12, #loc13])
#loc109 = loc(fused[#loc14, #loc11])
#loc110 = loc(fused[#loc18, #loc19])
#loc111 = loc(fused[#loc20, #loc21])
#loc112 = loc(fused[#loc22, #loc23])
#loc113 = loc(fused[#loc25, #loc24])
#loc114 = loc(fused[#loc27, #loc26])
#loc115 = loc(fused[#loc30, #loc31])
#loc116 = loc(fused[#loc32, #loc33])
#loc117 = loc(fused[#loc34, #loc35])
#loc118 = loc(fused[#loc36, #loc37])
#loc120 = loc(fused[#loc40, #loc41])
#loc121 = loc(fused[#loc43, #loc44])
#loc122 = loc(fused[#loc45, #loc46])
#loc123 = loc(fused[#loc47, #loc44])
#loc124 = loc(fused[#loc51, #loc52])
#loc125 = loc(fused[#loc53, #loc54])
#loc126 = loc(fused[#loc55, #loc56])
#loc127 = loc(fused[#loc58, #loc57])
#loc128 = loc(fused[#loc60, #loc59])
#loc129 = loc(fused[#loc63, #loc64])
#loc130 = loc(fused[#loc66, #loc67])
#loc132 = loc(fused[#loc70, #loc71])
#loc133 = loc(fused[#loc73, #loc74])
#loc134 = loc(fused[#loc75, #loc76])
#loc135 = loc(fused[#loc77, #loc74])
#loc136 = loc(fused[#loc78, #loc79])
#loc137 = loc(fused[#loc81, #loc82])
#loc138 = loc(fused[#loc80, #loc83])
#loc139 = loc(fused[#loc84, #loc85, #loc86, #loc79])
#loc140 = loc(fused[#loc91, #loc92])
#loc141 = loc(fused[#loc93, #loc94])
#loc142 = loc(fused[#loc95, #loc96])
#loc143 = loc(fused[#loc98, #loc97])
#loc144 = loc(fused[#loc100, #loc99])
