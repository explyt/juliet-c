!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc8 = loc("CWE617_Reachable_Assertion__fscanf_42.c":25:22)
#loc9 = loc("CWE617_Reachable_Assertion__fscanf_42.c":25:26)
#loc45 = loc("CWE617_Reachable_Assertion__fscanf_42.c":79:10)
#loc46 = loc("CWE617_Reachable_Assertion__fscanf_42.c":79:14)
#loc47 = loc("CWE617_Reachable_Assertion__fscanf_42.c":79:20)
#loc48 = loc("CWE617_Reachable_Assertion__fscanf_42.c":79:32)
#loc65 = loc("CWE617_Reachable_Assertion__fscanf_42.c":46:26)
#loc66 = loc("CWE617_Reachable_Assertion__fscanf_42.c":46:30)
#loc88 = loc(fused[#loc8, #loc9])
#loc101 = loc(fused[#loc45, #loc46])
#loc102 = loc(fused[#loc47, #loc48])
#loc107 = loc(fused[#loc65, #loc66])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fscanf_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc85)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc86)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc8, #loc9])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc88)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc7)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc10)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc11)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc86)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc12)
    %5 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc11)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    cir.return %9 : !s32i loc(#loc89)
  } loc(#loc87)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr1) loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc17)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__fscanf_42.c\00" : !cir.array<!s8i x 40>> : !cir.array<!s8i x 40> {alignment = 1 : i64} loc(#loc17)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__fscanf_42_bad()\00" : !cir.array<!s8i x 49>> : !cir.array<!s8i x 49> {alignment = 1 : i64} loc(#loc17)
  cir.func no_proto @CWE617_Reachable_Assertion__fscanf_42_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc92)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc23)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc26)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc17)
    cir.scope {
      cir.scope {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
        %7 = cir.const #cir.int<5> : !s32i loc(#loc17)
        %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc17)
        cir.if %8 {
        } else {
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc17)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc17)
          %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 40>> loc(#loc17)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 40>>), !cir.ptr<!s8i> loc(#loc17)
          %13 = cir.const #cir.int<39> : !s32i loc(#loc17)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc17)
          %15 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 49>> loc(#loc17)
          %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 49>>), !cir.ptr<!s8i> loc(#loc17)
          cir.call @__assert_fail(%10, %12, %14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr1) loc(#loc17)
        } loc(#loc17)
      } loc(#loc17)
    } loc(#loc17)
    cir.return loc(#loc19)
  } loc(#loc91)
  cir.func no_proto @CWE617_Reachable_Assertion__fscanf_42_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc96)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc30)
  } loc(#loc95)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc97)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc98)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc42)
  cir.func @main(%arg0: !s32i loc(fused[#loc45, #loc46]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc47, #loc48])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc101)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc102)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc44)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc49)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc49)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc50)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc51)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc51)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc52)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc39)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %8 = cir.get_global @CWE617_Reachable_Assertion__fscanf_42_good : !cir.ptr<!cir.func<!void ()>> loc(#loc103)
    cir.call @CWE617_Reachable_Assertion__fscanf_42_good() : () -> () loc(#loc54)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc40)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc41)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %13 = cir.get_global @CWE617_Reachable_Assertion__fscanf_42_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc104)
    cir.call @CWE617_Reachable_Assertion__fscanf_42_bad() : () -> () loc(#loc58)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc42)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc61)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    cir.return %17 : !s32i loc(#loc105)
  } loc(#loc100)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc65, #loc66])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc107)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc64)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc67)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc68)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %4 = cir.binop(add, %2, %3) nsw : !s32i loc(#loc68)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    cir.return %6 : !s32i loc(#loc109)
  } loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc73)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc111)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc79)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc82)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc73)
    cir.scope {
      cir.scope {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
        %7 = cir.const #cir.int<5> : !s32i loc(#loc73)
        %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc73)
        cir.if %8 {
        } else {
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc73)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc73)
          %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 40>> loc(#loc73)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 40>>), !cir.ptr<!s8i> loc(#loc73)
          %13 = cir.const #cir.int<61> : !s32i loc(#loc73)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc73)
          %15 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc73)
          %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc73)
          cir.call @__assert_fail(%10, %12, %14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr1) loc(#loc73)
        } loc(#loc73)
      } loc(#loc73)
    } loc(#loc73)
    cir.return loc(#loc75)
  } loc(#loc110)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fscanf_42.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE617_Reachable_Assertion__fscanf_42.c":28:19)
#loc6 = loc("CWE617_Reachable_Assertion__fscanf_42.c":25:1)
#loc7 = loc("CWE617_Reachable_Assertion__fscanf_42.c":30:1)
#loc10 = loc("CWE617_Reachable_Assertion__fscanf_42.c":26:1)
#loc11 = loc("CWE617_Reachable_Assertion__fscanf_42.c":28:5)
#loc12 = loc("CWE617_Reachable_Assertion__fscanf_42.c":28:12)
#loc13 = loc("CWE617_Reachable_Assertion__fscanf_42.c":29:12)
#loc14 = loc("CWE617_Reachable_Assertion__fscanf_42.c":29:5)
#loc15 = loc("/usr/include/assert.h":67:1)
#loc16 = loc("/usr/include/assert.h":69:43)
#loc17 = loc("CWE617_Reachable_Assertion__fscanf_42.c":39:5)
#loc18 = loc("CWE617_Reachable_Assertion__fscanf_42.c":32:1)
#loc19 = loc("CWE617_Reachable_Assertion__fscanf_42.c":40:1)
#loc20 = loc("CWE617_Reachable_Assertion__fscanf_42.c":34:5)
#loc21 = loc("CWE617_Reachable_Assertion__fscanf_42.c":34:9)
#loc22 = loc("CWE617_Reachable_Assertion__fscanf_42.c":36:13)
#loc23 = loc("CWE617_Reachable_Assertion__fscanf_42.c":36:12)
#loc24 = loc("CWE617_Reachable_Assertion__fscanf_42.c":36:5)
#loc25 = loc("CWE617_Reachable_Assertion__fscanf_42.c":37:22)
#loc26 = loc("CWE617_Reachable_Assertion__fscanf_42.c":37:12)
#loc27 = loc("CWE617_Reachable_Assertion__fscanf_42.c":37:5)
#loc28 = loc("CWE617_Reachable_Assertion__fscanf_42.c":37:26)
#loc29 = loc("CWE617_Reachable_Assertion__fscanf_42.c":64:1)
#loc30 = loc("CWE617_Reachable_Assertion__fscanf_42.c":67:1)
#loc31 = loc("CWE617_Reachable_Assertion__fscanf_42.c":66:5)
#loc32 = loc("CWE617_Reachable_Assertion__fscanf_42.c":66:13)
#loc33 = loc("/usr/include/stdlib.h":575:1)
#loc34 = loc("/usr/include/stdlib.h":575:41)
#loc35 = loc("/usr/include/time.h":76:1)
#loc36 = loc("/usr/include/time.h":76:38)
#loc37 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE617_Reachable_Assertion__fscanf_42.c":84:15)
#loc40 = loc("CWE617_Reachable_Assertion__fscanf_42.c":86:15)
#loc41 = loc("CWE617_Reachable_Assertion__fscanf_42.c":89:15)
#loc42 = loc("CWE617_Reachable_Assertion__fscanf_42.c":91:15)
#loc43 = loc("CWE617_Reachable_Assertion__fscanf_42.c":79:1)
#loc44 = loc("CWE617_Reachable_Assertion__fscanf_42.c":94:1)
#loc49 = loc("CWE617_Reachable_Assertion__fscanf_42.c":80:1)
#loc50 = loc("CWE617_Reachable_Assertion__fscanf_42.c":82:27)
#loc51 = loc("CWE617_Reachable_Assertion__fscanf_42.c":82:22)
#loc52 = loc("CWE617_Reachable_Assertion__fscanf_42.c":82:5)
#loc53 = loc("CWE617_Reachable_Assertion__fscanf_42.c":84:5)
#loc54 = loc("CWE617_Reachable_Assertion__fscanf_42.c":85:5)
#loc55 = loc("CWE617_Reachable_Assertion__fscanf_42.c":85:48)
#loc56 = loc("CWE617_Reachable_Assertion__fscanf_42.c":86:5)
#loc57 = loc("CWE617_Reachable_Assertion__fscanf_42.c":89:5)
#loc58 = loc("CWE617_Reachable_Assertion__fscanf_42.c":90:5)
#loc59 = loc("CWE617_Reachable_Assertion__fscanf_42.c":90:47)
#loc60 = loc("CWE617_Reachable_Assertion__fscanf_42.c":91:5)
#loc61 = loc("CWE617_Reachable_Assertion__fscanf_42.c":93:12)
#loc62 = loc("CWE617_Reachable_Assertion__fscanf_42.c":93:5)
#loc63 = loc("CWE617_Reachable_Assertion__fscanf_42.c":46:1)
#loc64 = loc("CWE617_Reachable_Assertion__fscanf_42.c":51:1)
#loc67 = loc("CWE617_Reachable_Assertion__fscanf_42.c":47:1)
#loc68 = loc("CWE617_Reachable_Assertion__fscanf_42.c":49:12)
#loc69 = loc("CWE617_Reachable_Assertion__fscanf_42.c":49:25)
#loc70 = loc("CWE617_Reachable_Assertion__fscanf_42.c":49:5)
#loc71 = loc("CWE617_Reachable_Assertion__fscanf_42.c":50:12)
#loc72 = loc("CWE617_Reachable_Assertion__fscanf_42.c":50:5)
#loc73 = loc("CWE617_Reachable_Assertion__fscanf_42.c":61:5)
#loc74 = loc("CWE617_Reachable_Assertion__fscanf_42.c":54:1)
#loc75 = loc("CWE617_Reachable_Assertion__fscanf_42.c":62:1)
#loc76 = loc("CWE617_Reachable_Assertion__fscanf_42.c":56:5)
#loc77 = loc("CWE617_Reachable_Assertion__fscanf_42.c":56:9)
#loc78 = loc("CWE617_Reachable_Assertion__fscanf_42.c":58:13)
#loc79 = loc("CWE617_Reachable_Assertion__fscanf_42.c":58:12)
#loc80 = loc("CWE617_Reachable_Assertion__fscanf_42.c":58:5)
#loc81 = loc("CWE617_Reachable_Assertion__fscanf_42.c":59:26)
#loc82 = loc("CWE617_Reachable_Assertion__fscanf_42.c":59:12)
#loc83 = loc("CWE617_Reachable_Assertion__fscanf_42.c":59:5)
#loc84 = loc("CWE617_Reachable_Assertion__fscanf_42.c":59:30)
#loc85 = loc(fused[#loc1, #loc2])
#loc86 = loc(fused[#loc3, #loc4])
#loc87 = loc(fused[#loc6, #loc7])
#loc89 = loc(fused[#loc14, #loc13])
#loc90 = loc(fused[#loc15, #loc16])
#loc91 = loc(fused[#loc18, #loc19])
#loc92 = loc(fused[#loc20, #loc21])
#loc93 = loc(fused[#loc24, #loc22])
#loc94 = loc(fused[#loc27, #loc28])
#loc95 = loc(fused[#loc29, #loc30])
#loc96 = loc(fused[#loc31, #loc32])
#loc97 = loc(fused[#loc33, #loc34])
#loc98 = loc(fused[#loc35, #loc36])
#loc99 = loc(fused[#loc37, #loc38])
#loc100 = loc(fused[#loc43, #loc44])
#loc103 = loc(fused[#loc54, #loc55])
#loc104 = loc(fused[#loc58, #loc59])
#loc105 = loc(fused[#loc62, #loc61])
#loc106 = loc(fused[#loc63, #loc64])
#loc108 = loc(fused[#loc70, #loc69])
#loc109 = loc(fused[#loc72, #loc71])
#loc110 = loc(fused[#loc74, #loc75])
#loc111 = loc(fused[#loc76, #loc77])
#loc112 = loc(fused[#loc80, #loc78])
#loc113 = loc(fused[#loc83, #loc84])
