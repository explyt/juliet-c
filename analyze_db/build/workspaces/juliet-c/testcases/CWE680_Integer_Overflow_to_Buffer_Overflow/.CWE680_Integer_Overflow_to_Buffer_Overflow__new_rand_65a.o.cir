!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_657badSinkEi(!s32i) loc(#loc36)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc37)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_653badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc39)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc40)
    %2 = cir.get_global @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_657badSinkEi : !cir.ptr<!cir.func<(!s32i)>> loc(#loc10)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc40)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc12)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc41)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc14)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc14)
    %9 = cir.ternary(%8, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc14)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc14)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc14)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc14)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc14)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc14)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc14)
      cir.yield %24 : !u32i loc(#loc14)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc14)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc14)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc14)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc14)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc14)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc14)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc14)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc14)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc14)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc14)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc14)
      cir.yield %28 : !u32i loc(#loc14)
    }) : (!cir.bool) -> !u32i loc(#loc14)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc14)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc42)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc16)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    cir.call %11(%12) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc16)
    cir.return loc(#loc6)
  } loc(#loc38)
  cir.func private @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_6511goodG2BSinkEi(!s32i) loc(#loc43)
  cir.func internal private @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc45)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc46)
    %2 = cir.get_global @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_6511goodG2BSinkEi : !cir.ptr<!cir.func<(!s32i)>> loc(#loc25)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc46)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc27)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc47)
    %5 = cir.const #cir.int<20> : !s32i loc(#loc29)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc48)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc31)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    cir.call %6(%7) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc31)
    cir.return loc(#loc21)
  } loc(#loc44)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_654goodEv() extra(#fn_attr1) {
    cir.call @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65L7goodG2BEv() : () -> () loc(#loc35)
    cir.return loc(#loc34)
  } loc(#loc49)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":0:0)
#loc1 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":25:1)
#loc2 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":25:22)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":27:1)
#loc6 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":38:1)
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":29:5)
#loc8 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":29:9)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":31:5)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":31:29)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":33:13)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":33:12)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":33:5)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":35:12)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":35:5)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":37:5)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":37:13)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":45:1)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":45:26)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":47:1)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":56:1)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":49:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":49:9)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":50:5)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":50:29)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":52:13)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":52:12)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":52:5)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":54:12)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":54:5)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":55:5)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":55:13)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":58:1)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":61:1)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_65a.cpp":60:5)
#loc36 = loc(fused[#loc1, #loc2])
#loc37 = loc(fused[#loc3, #loc4])
#loc38 = loc(fused[#loc5, #loc6])
#loc39 = loc(fused[#loc7, #loc8])
#loc40 = loc(fused[#loc9, #loc10])
#loc41 = loc(fused[#loc13, #loc11])
#loc42 = loc(fused[#loc15, #loc14])
#loc43 = loc(fused[#loc18, #loc19])
#loc44 = loc(fused[#loc20, #loc21])
#loc45 = loc(fused[#loc22, #loc23])
#loc46 = loc(fused[#loc24, #loc25])
#loc47 = loc(fused[#loc28, #loc26])
#loc48 = loc(fused[#loc30, #loc29])
#loc49 = loc(fused[#loc33, #loc34])
