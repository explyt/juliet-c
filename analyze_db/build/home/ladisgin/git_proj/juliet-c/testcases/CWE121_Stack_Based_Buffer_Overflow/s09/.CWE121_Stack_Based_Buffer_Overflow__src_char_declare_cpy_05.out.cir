!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":114:10)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":114:14)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":114:20)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":114:32)
#loc162 = loc(fused[#loc55, #loc56])
#loc163 = loc(fused[#loc57, #loc58])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s09/CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc143)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc144)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc145)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc147)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc148)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc13)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc149)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc143)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc17)
      cir.if %5 {
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc19)
        %8 = cir.const #cir.int<65> : !s32i loc(#loc20)
        %9 = cir.const #cir.int<100> : !s32i loc(#loc21)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc21)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc21)
        cir.libc.memset %12 bytes from %7 set to %8 : !cir.ptr<!void>, !s32i, !u64i loc(#loc152)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc25)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc25)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
        %16 = cir.const #cir.int<100> : !s32i loc(#loc27)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc28)
        %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc27)
        %19 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %18 : !s32i), !cir.ptr<!s8i> loc(#loc29)
        cir.store %14, %19 : !s8i, !cir.ptr<!s8i> loc(#loc153)
      } loc(#loc151)
    } loc(#loc150)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc155)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc155)
      cir.store %4, %3 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc155)
      %5 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc34)
      %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc35)
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
      %8 = cir.call @strcpy(%6, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc34)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc38)
    } loc(#loc154)
    cir.return loc(#loc8)
  } loc(#loc146)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc157)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc158)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    cir.return loc(#loc40)
  } loc(#loc156)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc159)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc160)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc52)
  cir.func @main(%arg0: !s32i loc(fused[#loc55, #loc56]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc57, #loc58])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc162)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc163)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc54)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc59)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc60)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc61)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc61)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc62)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc49)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05_good : !cir.ptr<!cir.func<!void ()>> loc(#loc164)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05_good() : () -> () loc(#loc64)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc50)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc51)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc165)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05_bad() : () -> () loc(#loc68)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc52)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc71)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    cir.return %17 : !s32i loc(#loc166)
  } loc(#loc161)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc167)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc75)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc169)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc170)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc82)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc171)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc167)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc86)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc86)
      cir.if %5 {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc75)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc75)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc90)
      } else {
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc91)
        %8 = cir.const #cir.int<65> : !s32i loc(#loc92)
        %9 = cir.const #cir.int<50> : !s32i loc(#loc93)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc94)
        %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc93)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc93)
        cir.libc.memset %12 bytes from %7 set to %8 : !cir.ptr<!void>, !s32i, !u64i loc(#loc174)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc97)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc97)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
        %16 = cir.const #cir.int<50> : !s32i loc(#loc99)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc100)
        %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc99)
        %19 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %18 : !s32i), !cir.ptr<!s8i> loc(#loc101)
        cir.store %14, %19 : !s8i, !cir.ptr<!s8i> loc(#loc175)
      } loc(#loc173)
    } loc(#loc172)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc177)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc177)
      cir.store %4, %3 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc177)
      %5 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc106)
      %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc107)
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
      %8 = cir.call @strcpy(%6, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc106)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc109)
      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    } loc(#loc176)
    cir.return loc(#loc77)
  } loc(#loc168)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc179)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc180)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc117)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc181)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc143)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc121)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc121)
      cir.if %5 {
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc123)
        %8 = cir.const #cir.int<65> : !s32i loc(#loc124)
        %9 = cir.const #cir.int<50> : !s32i loc(#loc125)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc126)
        %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc125)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc125)
        cir.libc.memset %12 bytes from %7 set to %8 : !cir.ptr<!void>, !s32i, !u64i loc(#loc184)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc129)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc129)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
        %16 = cir.const #cir.int<50> : !s32i loc(#loc131)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc132)
        %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc131)
        %19 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %18 : !s32i), !cir.ptr<!s8i> loc(#loc133)
        cir.store %14, %19 : !s8i, !cir.ptr<!s8i> loc(#loc185)
      } loc(#loc183)
    } loc(#loc182)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc187)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc187)
      cir.store %4, %3 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc187)
      %5 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc138)
      %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc139)
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc140)
      %8 = cir.call @strcpy(%6, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc138)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc142)
    } loc(#loc186)
    cir.return loc(#loc112)
  } loc(#loc178)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s09/CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":25:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":25:25)
#loc3 = loc("/usr/include/string.h":141:1)
#loc4 = loc("/usr/include/string.h":142:14)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":30:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":47:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":32:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":32:12)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":33:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":33:24)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":34:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":34:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":35:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":40:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":35:8)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":36:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":38:16)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":38:22)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":38:27)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":38:31)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":38:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":38:32)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":39:23)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":39:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":39:14)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":39:18)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":39:19)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":41:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":46:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":42:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":42:25)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":44:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":44:16)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":44:22)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":45:19)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":45:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":98:1)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":102:1)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":100:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":100:14)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":101:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":101:14)
#loc45 = loc("/usr/include/stdlib.h":575:1)
#loc46 = loc("/usr/include/stdlib.h":575:41)
#loc47 = loc("/usr/include/time.h":76:1)
#loc48 = loc("/usr/include/time.h":76:38)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":119:15)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":121:15)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":124:15)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":126:15)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":114:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":129:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":115:1)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":117:27)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":117:22)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":117:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":119:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":120:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":120:70)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":121:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":124:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":125:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":125:69)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":126:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":128:12)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":128:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":26:1)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":26:26)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":62:19)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":54:1)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":76:1)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":56:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":56:12)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":57:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":57:24)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":58:12)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":58:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":59:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":69:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":59:8)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":60:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":63:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":65:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":62:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":67:16)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":67:22)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":67:27)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":67:30)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":67:9)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":67:31)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":68:22)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":68:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":68:14)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":68:17)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":68:18)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":70:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":75:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":71:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":71:25)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":73:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":73:16)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":73:22)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":74:19)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":74:9)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":79:1)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":96:1)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":81:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":81:12)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":82:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":82:24)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":83:12)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":83:5)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":84:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":89:5)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":84:8)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":85:5)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":87:16)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":87:22)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":87:27)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":87:30)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":87:9)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":87:31)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":88:22)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":88:9)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":88:14)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":88:17)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":88:18)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":90:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":95:5)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":91:9)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":91:25)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":93:9)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":93:16)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":93:22)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":94:19)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c":94:9)
#loc143 = loc(fused[#loc1, #loc2])
#loc144 = loc(fused[#loc3, #loc4])
#loc145 = loc(fused[#loc5, #loc6])
#loc146 = loc(fused[#loc7, #loc8])
#loc147 = loc(fused[#loc9, #loc10])
#loc148 = loc(fused[#loc11, #loc12])
#loc149 = loc(fused[#loc14, #loc13])
#loc150 = loc(fused[#loc15, #loc16])
#loc151 = loc(fused[#loc18, #loc16])
#loc152 = loc(fused[#loc23, #loc24])
#loc153 = loc(fused[#loc26, #loc25])
#loc154 = loc(fused[#loc30, #loc31])
#loc155 = loc(fused[#loc32, #loc33])
#loc156 = loc(fused[#loc39, #loc40])
#loc157 = loc(fused[#loc41, #loc42])
#loc158 = loc(fused[#loc43, #loc44])
#loc159 = loc(fused[#loc45, #loc46])
#loc160 = loc(fused[#loc47, #loc48])
#loc161 = loc(fused[#loc53, #loc54])
#loc164 = loc(fused[#loc64, #loc65])
#loc165 = loc(fused[#loc68, #loc69])
#loc166 = loc(fused[#loc72, #loc71])
#loc167 = loc(fused[#loc73, #loc74])
#loc168 = loc(fused[#loc76, #loc77])
#loc169 = loc(fused[#loc78, #loc79])
#loc170 = loc(fused[#loc80, #loc81])
#loc171 = loc(fused[#loc83, #loc82])
#loc172 = loc(fused[#loc84, #loc85])
#loc173 = loc(fused[#loc87, #loc88, #loc89, #loc85])
#loc174 = loc(fused[#loc95, #loc96])
#loc175 = loc(fused[#loc98, #loc97])
#loc176 = loc(fused[#loc102, #loc103])
#loc177 = loc(fused[#loc104, #loc105])
#loc178 = loc(fused[#loc111, #loc112])
#loc179 = loc(fused[#loc113, #loc114])
#loc180 = loc(fused[#loc115, #loc116])
#loc181 = loc(fused[#loc118, #loc117])
#loc182 = loc(fused[#loc119, #loc120])
#loc183 = loc(fused[#loc122, #loc120])
#loc184 = loc(fused[#loc127, #loc128])
#loc185 = loc(fused[#loc130, #loc129])
#loc186 = loc(fused[#loc134, #loc135])
#loc187 = loc(fused[#loc136, #loc137])
