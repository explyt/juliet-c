!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":24:16)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":24:27)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":38:20)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":38:31)
#loc50 = loc(fused[#loc7, #loc8])
#loc59 = loc(fused[#loc28, #loc29])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc47)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc48)
  cir.func  @_ZN52CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_629badSourceERPl(%arg0: !cir.ptr<!cir.ptr<!s64i>> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc50)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc9)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc10)
    %2 = cir.const #cir.int<8> : !u64i loc(#loc51)
    %3 = cir.call @malloc(%2) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc10)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc52)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc14)
    cir.store %4, %5 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc53)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc17)
      %10 = cir.load %9 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc17)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc18)
      %12 = cir.cmp(eq, %10, %11) : !cir.ptr<!s64i>, !cir.bool loc(#loc55)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc20)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc22)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc20)
      } loc(#loc56)
    } loc(#loc54)
    %6 = cir.const #cir.int<2147483643> : !s64i loc(#loc23)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc24)
    %8 = cir.load deref %7 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc24)
    cir.store %6, %8 : !s64i, !cir.ptr<!s64i> loc(#loc57)
    cir.return loc(#loc6)
  } loc(#loc49)
  cir.func  @_ZN52CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_6213goodG2BSourceERPl(%arg0: !cir.ptr<!cir.ptr<!s64i>> loc(fused[#loc28, #loc29])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc59)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc30)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc31)
    %2 = cir.const #cir.int<8> : !u64i loc(#loc60)
    %3 = cir.call @malloc(%2) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc31)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc61)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc35)
    cir.store %4, %5 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc62)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc38)
      %10 = cir.load %9 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc38)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc39)
      %12 = cir.cmp(eq, %10, %11) : !cir.ptr<!s64i>, !cir.bool loc(#loc64)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc41)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc42)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc43)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc41)
      } loc(#loc65)
    } loc(#loc63)
    %6 = cir.const #cir.int<2147483643> : !s64i loc(#loc44)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc45)
    %8 = cir.load deref %7 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc45)
    cir.store %6, %8 : !s64i, !cir.ptr<!s64i> loc(#loc66)
    cir.return loc(#loc27)
  } loc(#loc58)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":24:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":31:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":25:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":28:23)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":28:30)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":28:41)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":28:42)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":28:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":29:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":29:33)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":29:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":29:17)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":29:23)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":29:24)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":29:30)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":29:29)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":30:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":30:6)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":30:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":38:1)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":44:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":39:1)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":41:23)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":41:30)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":41:42)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":41:43)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":41:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":42:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":42:33)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":42:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":42:17)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":42:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":42:24)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":42:30)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":42:29)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":43:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":43:6)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_62b.cpp":43:5)
#loc47 = loc(fused[#loc1, #loc2])
#loc48 = loc(fused[#loc3, #loc4])
#loc49 = loc(fused[#loc5, #loc6])
#loc51 = loc(fused[#loc11, #loc12])
#loc52 = loc(fused[#loc10, #loc13])
#loc53 = loc(fused[#loc14, #loc13])
#loc54 = loc(fused[#loc15, #loc16])
#loc55 = loc(fused[#loc17, #loc18])
#loc56 = loc(fused[#loc19, #loc16])
#loc57 = loc(fused[#loc25, #loc23])
#loc58 = loc(fused[#loc26, #loc27])
#loc60 = loc(fused[#loc32, #loc33])
#loc61 = loc(fused[#loc31, #loc34])
#loc62 = loc(fused[#loc35, #loc34])
#loc63 = loc(fused[#loc36, #loc37])
#loc64 = loc(fused[#loc38, #loc39])
#loc65 = loc(fused[#loc40, #loc37])
#loc66 = loc(fused[#loc46, #loc44])
