!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":143:10)
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":143:14)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":143:20)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":143:32)
#loc189 = loc(fused[#loc62, #loc63])
#loc190 = loc(fused[#loc64, #loc65])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @globalFive : !s32i {alignment = 4 : i64} loc(#loc166)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc167)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc168)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc169)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printIntLine(!s32i) loc(#loc171)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc14)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc166)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc20)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc174)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc177)
          %5 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc178)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc27)
          %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc27)
          cir.store %7, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc178)
          cir.scope {
            %12 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc30)
            %13 = cir.const #cir.int<256> : !s32i loc(#loc31)
            %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc168)
            %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc32)
            %16 = cir.call @fgets(%12, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc33)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
            %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc180)
            cir.if %19 {
              %20 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc38)
              %21 = cir.call @atof(%20) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc39)
              cir.store %21, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc182)
            } else {
              %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc42)
            } loc(#loc181)
          } loc(#loc179)
          %8 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc43)
          %9 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc44)
          %10 = cir.call @sqrt(%9) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc43)
          %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc43)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc45)
        } loc(#loc176)
      } loc(#loc175)
    } loc(#loc173)
    cir.return loc(#loc16)
  } loc(#loc172)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc185)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc47)
  } loc(#loc183)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc186)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc59)
  cir.func @main(%arg0: !s32i loc(fused[#loc62, #loc63]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc64, #loc65])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc190)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc61)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc66)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc66)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc67)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc68)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc68)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc69)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc56)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %8 = cir.get_global @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14_good : !cir.ptr<!cir.func<!void ()>> loc(#loc191)
    cir.call @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14_good() : () -> () loc(#loc71)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc57)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc58)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %13 = cir.get_global @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14_bad() : () -> () loc(#loc75)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc59)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc193)
    cir.return %17 : !s32i loc(#loc193)
  } loc(#loc188)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Value is negative\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc81)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc166)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc87)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc196)
      cir.if %3 {
        %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc80)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc80)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc91)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc199)
          %5 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc200)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc97)
          %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc97)
          cir.store %7, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc200)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc100)
            %9 = cir.const #cir.int<256> : !s32i loc(#loc101)
            %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc168)
            %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc102)
            %12 = cir.call @fgets(%8, %9, %11) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc103)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc104)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc104)
            %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc202)
            cir.if %15 {
              %16 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc108)
              %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc109)
              cir.store %17, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc204)
            } else {
              %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc112)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc112)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc113)
            } loc(#loc203)
          } loc(#loc201)
          cir.scope {
            %8 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc116)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc117)
            %10 = cir.cast(int_to_float, %9 : !s32i), !cir.double loc(#loc117)
            %11 = cir.cmp(lt, %8, %10) : !cir.double, !cir.bool loc(#loc206)
            cir.if %11 {
              %12 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc81)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc81)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc121)
            } else {
              %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc122)
              %13 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc123)
              %14 = cir.call @sqrt(%13) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc122)
              %15 = cir.cast(float_to_int, %14 : !cir.double), !s32i loc(#loc122)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc124)
            } loc(#loc207)
          } loc(#loc205)
        } loc(#loc198)
      } loc(#loc197)
    } loc(#loc195)
    cir.return loc(#loc83)
  } loc(#loc194)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc166)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc130)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc210)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc213)
          %5 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc214)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc137)
          %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc137)
          cir.store %7, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc214)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc140)
            %9 = cir.const #cir.int<256> : !s32i loc(#loc141)
            %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc168)
            %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc142)
            %12 = cir.call @fgets(%8, %9, %11) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc143)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc144)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc144)
            %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc216)
            cir.if %15 {
              %16 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc148)
              %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc149)
              cir.store %17, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc218)
            } else {
              %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc152)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc152)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc153)
            } loc(#loc217)
          } loc(#loc215)
          cir.scope {
            %8 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc156)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc157)
            %10 = cir.cast(int_to_float, %9 : !s32i), !cir.double loc(#loc157)
            %11 = cir.cmp(lt, %8, %10) : !cir.double, !cir.bool loc(#loc220)
            cir.if %11 {
              %12 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc161)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc161)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc162)
            } else {
              %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc163)
              %13 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc164)
              %14 = cir.call @sqrt(%13) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc163)
              %15 = cir.cast(float_to_int, %14 : !cir.double), !s32i loc(#loc163)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc165)
            } loc(#loc221)
          } loc(#loc219)
        } loc(#loc212)
      } loc(#loc211)
    } loc(#loc209)
    cir.return loc(#loc126)
  } loc(#loc208)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":118:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":118:12)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":102:1)
#loc8 = loc("/usr/include/stdlib.h":103:33)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":41:27)
#loc12 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":23:1)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":47:1)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":25:5)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":46:5)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":25:8)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":25:20)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":26:5)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":27:9)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":45:9)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":28:13)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":28:45)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":29:13)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":29:35)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":34:13)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":42:13)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":34:23)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":34:36)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":34:53)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":34:17)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":34:63)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":35:13)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":38:13)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":40:13)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":37:37)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":37:32)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":37:17)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":37:48)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":41:17)
#loc43 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":44:32)
#loc44 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":44:37)
#loc45 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":44:13)
#loc46 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":128:1)
#loc47 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":132:1)
#loc48 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":130:5)
#loc49 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":130:11)
#loc50 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":131:5)
#loc51 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":131:11)
#loc52 = loc("/usr/include/stdlib.h":575:1)
#loc53 = loc("/usr/include/stdlib.h":575:41)
#loc54 = loc("/usr/include/time.h":76:1)
#loc55 = loc("/usr/include/time.h":76:38)
#loc56 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":148:15)
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":150:15)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":153:15)
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":155:15)
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":143:1)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":158:1)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":144:1)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":146:27)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":146:22)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":146:5)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":148:5)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":149:5)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":149:78)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":150:5)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":153:5)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":154:5)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":154:77)
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":155:5)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":157:12)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":157:5)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":59:19)
#loc81 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":83:27)
#loc82 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":54:1)
#loc83 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":91:1)
#loc84 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":56:5)
#loc85 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":90:5)
#loc86 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":56:8)
#loc87 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":56:20)
#loc88 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":57:5)
#loc89 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":60:5)
#loc90 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":62:5)
#loc91 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":59:9)
#loc92 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":63:9)
#loc93 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":89:9)
#loc94 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":64:13)
#loc95 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":64:45)
#loc96 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":65:13)
#loc97 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":65:35)
#loc98 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":70:13)
#loc99 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":78:13)
#loc100 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":70:23)
#loc101 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":70:36)
#loc102 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":70:53)
#loc103 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":70:17)
#loc104 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":70:63)
#loc105 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":71:13)
#loc106 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":74:13)
#loc107 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":76:13)
#loc108 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":73:37)
#loc109 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":73:32)
#loc110 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":73:17)
#loc111 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":73:48)
#loc112 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":77:27)
#loc113 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":77:17)
#loc114 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":81:13)
#loc115 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":88:13)
#loc116 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":81:17)
#loc117 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":81:32)
#loc118 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":82:13)
#loc119 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":84:13)
#loc120 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":86:13)
#loc121 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":83:17)
#loc122 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":87:36)
#loc123 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":87:41)
#loc124 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":87:17)
#loc125 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":94:1)
#loc126 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":126:1)
#loc127 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":96:5)
#loc128 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":125:5)
#loc129 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":96:8)
#loc130 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":96:20)
#loc131 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":97:5)
#loc132 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":98:9)
#loc133 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":124:9)
#loc134 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":99:13)
#loc135 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":99:45)
#loc136 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":100:13)
#loc137 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":100:35)
#loc138 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":105:13)
#loc139 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":113:13)
#loc140 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":105:23)
#loc141 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":105:36)
#loc142 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":105:53)
#loc143 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":105:17)
#loc144 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":105:63)
#loc145 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":106:13)
#loc146 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":109:13)
#loc147 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":111:13)
#loc148 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":108:37)
#loc149 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":108:32)
#loc150 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":108:17)
#loc151 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":108:48)
#loc152 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":112:27)
#loc153 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":112:17)
#loc154 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":116:13)
#loc155 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":123:13)
#loc156 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":116:17)
#loc157 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":116:32)
#loc158 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":117:13)
#loc159 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":119:13)
#loc160 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":121:13)
#loc161 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":118:27)
#loc162 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":118:17)
#loc163 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":122:36)
#loc164 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":122:41)
#loc165 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14.c":122:17)
#loc166 = loc(fused[#loc1, #loc2])
#loc167 = loc(fused[#loc3, #loc4])
#loc168 = loc(fused[#loc5, #loc6])
#loc169 = loc(fused[#loc7, #loc8])
#loc170 = loc(fused[#loc9, #loc10])
#loc171 = loc(fused[#loc12, #loc13])
#loc172 = loc(fused[#loc15, #loc16])
#loc173 = loc(fused[#loc17, #loc18])
#loc174 = loc(fused[#loc19, #loc20])
#loc175 = loc(fused[#loc21, #loc18])
#loc176 = loc(fused[#loc22, #loc23])
#loc177 = loc(fused[#loc24, #loc25])
#loc178 = loc(fused[#loc26, #loc27])
#loc179 = loc(fused[#loc28, #loc29])
#loc180 = loc(fused[#loc33, #loc34])
#loc181 = loc(fused[#loc35, #loc36, #loc37, #loc29])
#loc182 = loc(fused[#loc40, #loc41])
#loc183 = loc(fused[#loc46, #loc47])
#loc184 = loc(fused[#loc48, #loc49])
#loc185 = loc(fused[#loc50, #loc51])
#loc186 = loc(fused[#loc52, #loc53])
#loc187 = loc(fused[#loc54, #loc55])
#loc188 = loc(fused[#loc60, #loc61])
#loc191 = loc(fused[#loc71, #loc72])
#loc192 = loc(fused[#loc75, #loc76])
#loc193 = loc(fused[#loc79, #loc78])
#loc194 = loc(fused[#loc82, #loc83])
#loc195 = loc(fused[#loc84, #loc85])
#loc196 = loc(fused[#loc86, #loc87])
#loc197 = loc(fused[#loc88, #loc89, #loc90, #loc85])
#loc198 = loc(fused[#loc92, #loc93])
#loc199 = loc(fused[#loc94, #loc95])
#loc200 = loc(fused[#loc96, #loc97])
#loc201 = loc(fused[#loc98, #loc99])
#loc202 = loc(fused[#loc103, #loc104])
#loc203 = loc(fused[#loc105, #loc106, #loc107, #loc99])
#loc204 = loc(fused[#loc110, #loc111])
#loc205 = loc(fused[#loc114, #loc115])
#loc206 = loc(fused[#loc116, #loc117])
#loc207 = loc(fused[#loc118, #loc119, #loc120, #loc115])
#loc208 = loc(fused[#loc125, #loc126])
#loc209 = loc(fused[#loc127, #loc128])
#loc210 = loc(fused[#loc129, #loc130])
#loc211 = loc(fused[#loc131, #loc128])
#loc212 = loc(fused[#loc132, #loc133])
#loc213 = loc(fused[#loc134, #loc135])
#loc214 = loc(fused[#loc136, #loc137])
#loc215 = loc(fused[#loc138, #loc139])
#loc216 = loc(fused[#loc143, #loc144])
#loc217 = loc(fused[#loc145, #loc146, #loc147, #loc139])
#loc218 = loc(fused[#loc150, #loc151])
#loc219 = loc(fused[#loc154, #loc155])
#loc220 = loc(fused[#loc156, #loc157])
#loc221 = loc(fused[#loc158, #loc159, #loc160, #loc155])
