!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc169)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc170)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc171)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc172)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc173)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc174)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc175)
  cir.func private @close(!s32i) -> !s32i loc(#loc176)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc177)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc19)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__listen_socket_16.c\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc19)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__listen_socket_16_bad()\00" : !cir.array<!s8i x 56>> : !cir.array<!s8i x 56> {alignment = 1 : i64} loc(#loc19)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc179)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc25)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.scope {
      cir.while {
        %4 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc29)
        cir.condition(%5) loc(#loc29)
      } do {
        cir.scope {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc184)
            %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc185)
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc186)
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc187)
            %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc188)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc38)
            %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc38)
            cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc186)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc40)
            %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc40)
            cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc187)
            cir.scope {
              cir.do {
                cir.scope {
                  %13 = cir.const #cir.int<2> : !s32i loc(#loc47)
                  %14 = cir.const #cir.int<1> : !s32i loc(#loc48)
                  %15 = cir.const #cir.int<6> : !s32i loc(#loc49)
                  %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc50)
                  cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc191)
                  cir.scope {
                    %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc55)
                    %59 = cir.const #cir.int<1> : !s32i loc(#loc56)
                    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc56)
                    %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc193)
                    cir.if %61 {
                      cir.break loc(#loc58)
                    } loc(#loc194)
                  } loc(#loc192)
                  %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc195)
                  %18 = cir.const #cir.int<0> : !s32i loc(#loc61)
                  %19 = cir.const #cir.int<16> : !u64i loc(#loc196)
                  cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc197)
                  %20 = cir.const #cir.int<2> : !s32i loc(#loc66)
                  %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc66)
                  %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
                  cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc198)
                  %23 = cir.const #cir.int<0> : !s32i loc(#loc69)
                  %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc69)
                  %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
                  %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
                  cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc199)
                  %27 = cir.const #cir.int<27015> : !s32i loc(#loc73)
                  %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc73)
                  %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc74)
                  %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                  cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc200)
                  cir.scope {
                    %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc80)
                    %59 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc202)
                    %60 = cir.const #cir.int<16> : !u64i loc(#loc203)
                    %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc203)
                    %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc85)
                    %63 = cir.const #cir.int<1> : !s32i loc(#loc86)
                    %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc86)
                    %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc204)
                    cir.if %65 {
                      cir.break loc(#loc88)
                    } loc(#loc205)
                  } loc(#loc201)
                  cir.scope {
                    %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc91)
                    %59 = cir.const #cir.int<5> : !s32i loc(#loc92)
                    %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc93)
                    %61 = cir.const #cir.int<1> : !s32i loc(#loc94)
                    %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc94)
                    %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc207)
                    cir.if %63 {
                      cir.break loc(#loc96)
                    } loc(#loc208)
                  } loc(#loc206)
                  %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                  %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc98)
                  %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc99)
                  %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc100)
                  cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc209)
                  cir.scope {
                    %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                    %59 = cir.const #cir.int<1> : !s32i loc(#loc106)
                    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc106)
                    %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc211)
                    cir.if %61 {
                      cir.break loc(#loc108)
                    } loc(#loc212)
                  } loc(#loc210)
                  %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                  %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc110)
                  %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc110)
                  %38 = cir.const #cir.int<3> : !s32i loc(#loc111)
                  %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc111)
                  %40 = cir.const #cir.int<4> : !u64i loc(#loc111)
                  %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc111)
                  %42 = cir.const #cir.int<2> : !s32i loc(#loc111)
                  %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc111)
                  %44 = cir.binop(add, %41, %43) : !u64i loc(#loc111)
                  %45 = cir.const #cir.int<1> : !s32i loc(#loc112)
                  %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc112)
                  %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc213)
                  %48 = cir.const #cir.int<0> : !s32i loc(#loc113)
                  %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc114)
                  %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc114)
                  cir.store %50, %4 : !s32i, !cir.ptr<!s32i> loc(#loc214)
                  cir.scope {
                    %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                    %59 = cir.const #cir.int<1> : !s32i loc(#loc120)
                    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc120)
                    %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc216)
                    %62 = cir.ternary(%61, true {
                      %63 = cir.const #true loc(#loc121)
                      cir.yield %63 : !cir.bool loc(#loc121)
                    }, false {
                      %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc122)
                      %64 = cir.const #cir.int<0> : !s32i loc(#loc123)
                      %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc217)
                      %66 = cir.ternary(%65, true {
                        %67 = cir.const #true loc(#loc121)
                        cir.yield %67 : !cir.bool loc(#loc121)
                      }, false {
                        %67 = cir.const #false loc(#loc121)
                        cir.yield %67 : !cir.bool loc(#loc121)
                      }) : (!cir.bool) -> !cir.bool loc(#loc121)
                      cir.yield %66 : !cir.bool loc(#loc121)
                    }) : (!cir.bool) -> !cir.bool loc(#loc121)
                    cir.if %62 {
                      cir.break loc(#loc125)
                    } loc(#loc218)
                  } loc(#loc215)
                  %51 = cir.const #cir.int<0> : !s32i loc(#loc126)
                  %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc126)
                  %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc127)
                  %54 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc128)
                  %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc128)
                  cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc219)
                  %56 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc129)
                  %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc130)
                  cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc220)
                } loc(#loc190)
                cir.yield loc(#loc44)
              } while {
                %13 = cir.const #cir.int<0> : !s32i loc(#loc133)
                %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc133)
                cir.condition(%14) loc(#loc133)
              } loc(#loc189)
            } loc(#loc189)
            cir.scope {
              %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc136)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc137)
              %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc137)
              %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc222)
              cir.if %16 {
                %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc139)
                %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc140)
              } loc(#loc223)
            } loc(#loc221)
            cir.scope {
              %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc143)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc144)
              %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc144)
              %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc225)
              cir.if %16 {
                %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc146)
                %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc147)
              } loc(#loc226)
            } loc(#loc224)
          } loc(#loc183)
          cir.break loc(#loc148)
        } loc(#loc182)
        cir.yield loc(#loc28)
      } loc(#loc181)
    } loc(#loc181)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc19)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc19)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc19)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc19)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc19)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc19)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc19)
          %11 = cir.const #cir.int<126> : !s32i loc(#loc19)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc19)
          %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 56>> loc(#loc19)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 56>>), !cir.ptr<!s8i> loc(#loc19)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc19)
        } loc(#loc19)
      } loc(#loc19)
    } loc(#loc19)
    cir.return loc(#loc21)
  } loc(#loc178)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc228)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc151)
    cir.return loc(#loc150)
  } loc(#loc227)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc153)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc230)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc158)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc159)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc231)
    cir.scope {
      cir.while {
        %4 = cir.const #cir.int<1> : !s32i loc(#loc163)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc163)
        cir.condition(%5) loc(#loc163)
      } do {
        cir.scope {
          %4 = cir.const #cir.int<5> : !s32i loc(#loc165)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc166)
          %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc165)
          cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc234)
          cir.break loc(#loc168)
        } loc(#loc233)
        cir.yield loc(#loc162)
      } loc(#loc232)
    } loc(#loc232)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc153)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc153)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc153)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc153)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc153)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc153)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc153)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc153)
          %11 = cir.const #cir.int<146> : !s32i loc(#loc153)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc153)
          %13 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc153)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc153)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc153)
        } loc(#loc153)
      } loc(#loc153)
    } loc(#loc153)
    cir.return loc(#loc155)
  } loc(#loc229)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_16.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("/usr/include/assert.h":69:1)
#loc18 = loc("/usr/include/assert.h":71:43)
#loc19 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":126:5)
#loc20 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":47:1)
#loc21 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":127:1)
#loc22 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":49:5)
#loc23 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":49:9)
#loc24 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":51:13)
#loc25 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":51:12)
#loc26 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":51:5)
#loc27 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":52:5)
#loc28 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":124:5)
#loc29 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":52:11)
#loc30 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":53:5)
#loc31 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":54:9)
#loc32 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":122:9)
#loc33 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":59:13)
#loc34 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":59:17)
#loc35 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":60:13)
#loc36 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":60:32)
#loc37 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":61:13)
#loc38 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":61:35)
#loc39 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":62:13)
#loc40 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":62:35)
#loc41 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":63:13)
#loc42 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":63:45)
#loc43 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":64:13)
#loc44 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":107:21)
#loc45 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":65:13)
#loc46 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":106:13)
#loc47 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":74:39)
#loc48 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":74:48)
#loc49 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":74:61)
#loc50 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":74:32)
#loc51 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":74:17)
#loc52 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":74:72)
#loc53 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":75:17)
#loc54 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":78:17)
#loc55 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":75:21)
#loc56 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":75:37)
#loc57 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":76:17)
#loc58 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":77:21)
#loc59 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":79:24)
#loc60 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":79:25)
#loc61 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":79:34)
#loc62 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":79:37)
#loc63 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":79:51)
#loc64 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":79:17)
#loc65 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":79:52)
#loc66 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":80:38)
#loc67 = loc("/usr/include/netinet/in.h":249:5)
#loc68 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":80:17)
#loc69 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":81:43)
#loc70 = loc("/usr/include/netinet/in.h":251:20)
#loc71 = loc("/usr/include/netinet/in.h":33:15)
#loc72 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":81:17)
#loc73 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":82:42)
#loc74 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":82:36)
#loc75 = loc("/usr/include/netinet/in.h":250:15)
#loc76 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":82:17)
#loc77 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":82:50)
#loc78 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":83:17)
#loc79 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":86:17)
#loc80 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":83:26)
#loc81 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":83:58)
#loc82 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":83:59)
#loc83 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":83:68)
#loc84 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":83:82)
#loc85 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":83:21)
#loc86 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":83:88)
#loc87 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":84:17)
#loc88 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":85:21)
#loc89 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":87:17)
#loc90 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":90:17)
#loc91 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":87:28)
#loc92 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":87:42)
#loc93 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":87:21)
#loc94 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":87:61)
#loc95 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":88:17)
#loc96 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":89:21)
#loc97 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":91:39)
#loc98 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":91:53)
#loc99 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":91:59)
#loc100 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":91:32)
#loc101 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":91:17)
#loc102 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":91:63)
#loc103 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":92:17)
#loc104 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":95:17)
#loc105 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":92:21)
#loc106 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":92:37)
#loc107 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":93:17)
#loc108 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":94:21)
#loc109 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":97:35)
#loc110 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":97:49)
#loc111 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":97:62)
#loc112 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":97:80)
#loc113 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":97:83)
#loc114 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":97:30)
#loc115 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":97:17)
#loc116 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":97:84)
#loc117 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":98:17)
#loc118 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":101:17)
#loc119 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":98:21)
#loc120 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":98:35)
#loc121 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":98:48)
#loc122 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":98:51)
#loc123 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":98:65)
#loc124 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":99:17)
#loc125 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":100:21)
#loc126 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":103:43)
#loc127 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":103:29)
#loc128 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":103:17)
#loc129 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":105:29)
#loc130 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":105:24)
#loc131 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":105:17)
#loc132 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":105:40)
#loc133 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":107:20)
#loc134 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":108:13)
#loc135 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":111:13)
#loc136 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":108:17)
#loc137 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":108:33)
#loc138 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":109:13)
#loc139 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":110:30)
#loc140 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":110:17)
#loc141 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":112:13)
#loc142 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":115:13)
#loc143 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":112:17)
#loc144 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":112:33)
#loc145 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":113:13)
#loc146 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":114:30)
#loc147 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":114:17)
#loc148 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":123:9)
#loc149 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":149:1)
#loc150 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":152:1)
#loc151 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":151:5)
#loc152 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":151:13)
#loc153 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":146:5)
#loc154 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":134:1)
#loc155 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":147:1)
#loc156 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":136:5)
#loc157 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":136:9)
#loc158 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":138:13)
#loc159 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":138:12)
#loc160 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":138:5)
#loc161 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":139:5)
#loc162 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":144:5)
#loc163 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":139:11)
#loc164 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":140:5)
#loc165 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":142:16)
#loc166 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":142:29)
#loc167 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":142:9)
#loc168 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":143:9)
#loc169 = loc(fused[#loc1, #loc2])
#loc170 = loc(fused[#loc3, #loc4])
#loc171 = loc(fused[#loc5, #loc6])
#loc172 = loc(fused[#loc7, #loc8])
#loc173 = loc(fused[#loc9, #loc10])
#loc174 = loc(fused[#loc11, #loc12])
#loc175 = loc(fused[#loc13, #loc14])
#loc176 = loc(fused[#loc15, #loc16])
#loc177 = loc(fused[#loc17, #loc18])
#loc178 = loc(fused[#loc20, #loc21])
#loc179 = loc(fused[#loc22, #loc23])
#loc180 = loc(fused[#loc26, #loc24])
#loc181 = loc(fused[#loc27, #loc28])
#loc182 = loc(fused[#loc30, #loc28])
#loc183 = loc(fused[#loc31, #loc32])
#loc184 = loc(fused[#loc33, #loc34])
#loc185 = loc(fused[#loc35, #loc36])
#loc186 = loc(fused[#loc37, #loc38])
#loc187 = loc(fused[#loc39, #loc40])
#loc188 = loc(fused[#loc41, #loc42])
#loc189 = loc(fused[#loc43, #loc44])
#loc190 = loc(fused[#loc45, #loc46])
#loc191 = loc(fused[#loc51, #loc52])
#loc192 = loc(fused[#loc53, #loc54])
#loc193 = loc(fused[#loc55, #loc56])
#loc194 = loc(fused[#loc57, #loc54])
#loc195 = loc(fused[#loc59, #loc60])
#loc196 = loc(fused[#loc62, #loc63])
#loc197 = loc(fused[#loc64, #loc65])
#loc198 = loc(fused[#loc68, #loc66])
#loc199 = loc(fused[#loc72, #loc69])
#loc200 = loc(fused[#loc76, #loc77])
#loc201 = loc(fused[#loc78, #loc79])
#loc202 = loc(fused[#loc81, #loc82])
#loc203 = loc(fused[#loc83, #loc84])
#loc204 = loc(fused[#loc85, #loc86])
#loc205 = loc(fused[#loc87, #loc79])
#loc206 = loc(fused[#loc89, #loc90])
#loc207 = loc(fused[#loc93, #loc94])
#loc208 = loc(fused[#loc95, #loc90])
#loc209 = loc(fused[#loc101, #loc102])
#loc210 = loc(fused[#loc103, #loc104])
#loc211 = loc(fused[#loc105, #loc106])
#loc212 = loc(fused[#loc107, #loc104])
#loc213 = loc(fused[#loc111, #loc112])
#loc214 = loc(fused[#loc115, #loc116])
#loc215 = loc(fused[#loc117, #loc118])
#loc216 = loc(fused[#loc119, #loc120])
#loc217 = loc(fused[#loc122, #loc123])
#loc218 = loc(fused[#loc124, #loc118])
#loc219 = loc(fused[#loc128, #loc126])
#loc220 = loc(fused[#loc131, #loc132])
#loc221 = loc(fused[#loc134, #loc135])
#loc222 = loc(fused[#loc136, #loc137])
#loc223 = loc(fused[#loc138, #loc135])
#loc224 = loc(fused[#loc141, #loc142])
#loc225 = loc(fused[#loc143, #loc144])
#loc226 = loc(fused[#loc145, #loc142])
#loc227 = loc(fused[#loc149, #loc150])
#loc228 = loc(fused[#loc151, #loc152])
#loc229 = loc(fused[#loc154, #loc155])
#loc230 = loc(fused[#loc156, #loc157])
#loc231 = loc(fused[#loc160, #loc158])
#loc232 = loc(fused[#loc161, #loc162])
#loc233 = loc(fused[#loc164, #loc162])
#loc234 = loc(fused[#loc167, #loc166])
