!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__short_max_square_41.c":24:21)
#loc6 = loc("CWE190_Integer_Overflow__short_max_square_41.c":24:27)
#loc37 = loc("CWE190_Integer_Overflow__short_max_square_41.c":66:25)
#loc38 = loc("CWE190_Integer_Overflow__short_max_square_41.c":66:31)
#loc68 = loc("CWE190_Integer_Overflow__short_max_square_41.c":47:25)
#loc69 = loc("CWE190_Integer_Overflow__short_max_square_41.c":47:31)
#loc90 = loc(fused[#loc5, #loc6])
#loc102 = loc(fused[#loc37, #loc38])
#loc112 = loc(fused[#loc68, #loc69])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc88)
  cir.func internal private @badSink(%arg0: !s16i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc91)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc90)
    cir.store %arg0, %1 : !s16i, !cir.ptr<!s16i> loc(#loc9)
    cir.br ^bb1 loc(#loc92)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc12)
    %3 = cir.cast(integral, %2 : !s16i), !s32i loc(#loc12)
    %4 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc8)
    %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc8)
    %6 = cir.binop(mul, %3, %5) nsw : !s32i loc(#loc12)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc12)
    cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc91)
    %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc13)
    %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc13)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc14)
    cir.br ^bb2 loc(#loc11)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc4)
  } loc(#loc89)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_square_41_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc94)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc19)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc19)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc95)
    %3 = cir.const #cir.int<32767> : !s32i loc(#loc21)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc21)
    cir.store %4, %0 : !s16i, !cir.ptr<!s16i> loc(#loc96)
    %5 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc23)
    cir.call @badSink(%5) : (!s16i) -> () loc(#loc24)
    cir.return loc(#loc16)
  } loc(#loc93)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_square_41_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc98)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc99)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc97)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc31)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc34)
  cir.func internal private @goodB2GSink(%arg0: !s16i loc(fused[#loc37, #loc38])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc103)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc102)
    cir.store %arg0, %1 : !s16i, !cir.ptr<!s16i> loc(#loc41)
    cir.br ^bb1 loc(#loc104)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc44)
    %3 = cir.cast(integral, %2 : !s16i), !s64i loc(#loc44)
    %4 = cir.cast(integral, %3 : !s64i), !s32i loc(#loc44)
    %5 = cir.abs %4 poison : !s32i loc(#loc45)
    %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc45)
    %7 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc46)
    %8 = cir.const #cir.int<32767> : !s32i loc(#loc47)
    %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc47)
    %10 = cir.call @sqrt(%9) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc46)
    %11 = cir.cast(float_to_int, %10 : !cir.double), !s64i loc(#loc46)
    %12 = cir.cmp(le, %6, %11) : !s64i, !cir.bool loc(#loc105)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc106)
  ^bb2:  // pred: ^bb1
    %13 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc52)
    %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc52)
    %15 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc40)
    %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc40)
    %17 = cir.binop(mul, %14, %16) nsw : !s32i loc(#loc52)
    %18 = cir.cast(integral, %17 : !s32i), !s16i loc(#loc52)
    cir.store %18, %0 : !s16i, !cir.ptr<!s16i> loc(#loc103)
    %19 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc53)
    %20 = cir.cast(integral, %19 : !s16i), !s32i loc(#loc53)
    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc54)
    cir.br ^bb4 loc(#loc50)
  ^bb3:  // pred: ^bb1
    %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc34)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    cir.br ^bb4 loc(#loc43)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc43)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc36)
  } loc(#loc101)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc108)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc60)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc60)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc109)
    %3 = cir.const #cir.int<32767> : !s32i loc(#loc62)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc62)
    cir.store %4, %0 : !s16i, !cir.ptr<!s16i> loc(#loc110)
    %5 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc64)
    cir.call @goodB2GSink(%5) : (!s16i) -> () loc(#loc65)
    cir.return loc(#loc57)
  } loc(#loc107)
  cir.func internal private @goodG2BSink(%arg0: !s16i loc(fused[#loc68, #loc69])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc113)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc112)
    cir.store %arg0, %1 : !s16i, !cir.ptr<!s16i> loc(#loc72)
    cir.br ^bb1 loc(#loc114)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc75)
    %3 = cir.cast(integral, %2 : !s16i), !s32i loc(#loc75)
    %4 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc71)
    %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc71)
    %6 = cir.binop(mul, %3, %5) nsw : !s32i loc(#loc75)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc75)
    cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc113)
    %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc76)
    %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc76)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc77)
    cir.br ^bb2 loc(#loc74)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc67)
  } loc(#loc111)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc116)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc82)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc82)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc117)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc84)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc84)
    cir.store %4, %0 : !s16i, !cir.ptr<!s16i> loc(#loc118)
    %5 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc86)
    cir.call @goodG2BSink(%5) : (!s16i) -> () loc(#loc87)
    cir.return loc(#loc79)
  } loc(#loc115)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_41.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__short_max_square_41.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__short_max_square_41.c":31:1)
#loc7 = loc("CWE190_Integer_Overflow__short_max_square_41.c":28:9)
#loc8 = loc("CWE190_Integer_Overflow__short_max_square_41.c":28:31)
#loc9 = loc("CWE190_Integer_Overflow__short_max_square_41.c":25:1)
#loc10 = loc("CWE190_Integer_Overflow__short_max_square_41.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__short_max_square_41.c":30:5)
#loc12 = loc("CWE190_Integer_Overflow__short_max_square_41.c":28:24)
#loc13 = loc("CWE190_Integer_Overflow__short_max_square_41.c":29:22)
#loc14 = loc("CWE190_Integer_Overflow__short_max_square_41.c":29:9)
#loc15 = loc("CWE190_Integer_Overflow__short_max_square_41.c":33:1)
#loc16 = loc("CWE190_Integer_Overflow__short_max_square_41.c":40:1)
#loc17 = loc("CWE190_Integer_Overflow__short_max_square_41.c":35:5)
#loc18 = loc("CWE190_Integer_Overflow__short_max_square_41.c":35:11)
#loc19 = loc("CWE190_Integer_Overflow__short_max_square_41.c":36:12)
#loc20 = loc("CWE190_Integer_Overflow__short_max_square_41.c":36:5)
#loc21 = loc("CWE190_Integer_Overflow__short_max_square_41.c":38:12)
#loc22 = loc("CWE190_Integer_Overflow__short_max_square_41.c":38:5)
#loc23 = loc("CWE190_Integer_Overflow__short_max_square_41.c":39:13)
#loc24 = loc("CWE190_Integer_Overflow__short_max_square_41.c":39:5)
#loc25 = loc("CWE190_Integer_Overflow__short_max_square_41.c":89:1)
#loc26 = loc("CWE190_Integer_Overflow__short_max_square_41.c":93:1)
#loc27 = loc("CWE190_Integer_Overflow__short_max_square_41.c":91:5)
#loc28 = loc("CWE190_Integer_Overflow__short_max_square_41.c":91:13)
#loc29 = loc("CWE190_Integer_Overflow__short_max_square_41.c":92:5)
#loc30 = loc("CWE190_Integer_Overflow__short_max_square_41.c":92:13)
#loc31 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc34 = loc("CWE190_Integer_Overflow__short_max_square_41.c":76:19)
#loc35 = loc("CWE190_Integer_Overflow__short_max_square_41.c":66:1)
#loc36 = loc("CWE190_Integer_Overflow__short_max_square_41.c":78:1)
#loc39 = loc("CWE190_Integer_Overflow__short_max_square_41.c":71:9)
#loc40 = loc("CWE190_Integer_Overflow__short_max_square_41.c":71:31)
#loc41 = loc("CWE190_Integer_Overflow__short_max_square_41.c":67:1)
#loc42 = loc("CWE190_Integer_Overflow__short_max_square_41.c":69:5)
#loc43 = loc("CWE190_Integer_Overflow__short_max_square_41.c":77:5)
#loc44 = loc("CWE190_Integer_Overflow__short_max_square_41.c":69:19)
#loc45 = loc("CWE190_Integer_Overflow__short_max_square_41.c":69:9)
#loc46 = loc("CWE190_Integer_Overflow__short_max_square_41.c":69:34)
#loc47 = loc("CWE190_Integer_Overflow__short_max_square_41.c":69:47)
#loc48 = loc("CWE190_Integer_Overflow__short_max_square_41.c":69:55)
#loc49 = loc("CWE190_Integer_Overflow__short_max_square_41.c":70:5)
#loc50 = loc("CWE190_Integer_Overflow__short_max_square_41.c":73:5)
#loc51 = loc("CWE190_Integer_Overflow__short_max_square_41.c":75:5)
#loc52 = loc("CWE190_Integer_Overflow__short_max_square_41.c":71:24)
#loc53 = loc("CWE190_Integer_Overflow__short_max_square_41.c":72:22)
#loc54 = loc("CWE190_Integer_Overflow__short_max_square_41.c":72:9)
#loc55 = loc("CWE190_Integer_Overflow__short_max_square_41.c":76:9)
#loc56 = loc("CWE190_Integer_Overflow__short_max_square_41.c":80:1)
#loc57 = loc("CWE190_Integer_Overflow__short_max_square_41.c":87:1)
#loc58 = loc("CWE190_Integer_Overflow__short_max_square_41.c":82:5)
#loc59 = loc("CWE190_Integer_Overflow__short_max_square_41.c":82:11)
#loc60 = loc("CWE190_Integer_Overflow__short_max_square_41.c":83:12)
#loc61 = loc("CWE190_Integer_Overflow__short_max_square_41.c":83:5)
#loc62 = loc("CWE190_Integer_Overflow__short_max_square_41.c":85:12)
#loc63 = loc("CWE190_Integer_Overflow__short_max_square_41.c":85:5)
#loc64 = loc("CWE190_Integer_Overflow__short_max_square_41.c":86:17)
#loc65 = loc("CWE190_Integer_Overflow__short_max_square_41.c":86:5)
#loc66 = loc("CWE190_Integer_Overflow__short_max_square_41.c":47:1)
#loc67 = loc("CWE190_Integer_Overflow__short_max_square_41.c":54:1)
#loc70 = loc("CWE190_Integer_Overflow__short_max_square_41.c":51:9)
#loc71 = loc("CWE190_Integer_Overflow__short_max_square_41.c":51:31)
#loc72 = loc("CWE190_Integer_Overflow__short_max_square_41.c":48:1)
#loc73 = loc("CWE190_Integer_Overflow__short_max_square_41.c":49:5)
#loc74 = loc("CWE190_Integer_Overflow__short_max_square_41.c":53:5)
#loc75 = loc("CWE190_Integer_Overflow__short_max_square_41.c":51:24)
#loc76 = loc("CWE190_Integer_Overflow__short_max_square_41.c":52:22)
#loc77 = loc("CWE190_Integer_Overflow__short_max_square_41.c":52:9)
#loc78 = loc("CWE190_Integer_Overflow__short_max_square_41.c":56:1)
#loc79 = loc("CWE190_Integer_Overflow__short_max_square_41.c":63:1)
#loc80 = loc("CWE190_Integer_Overflow__short_max_square_41.c":58:5)
#loc81 = loc("CWE190_Integer_Overflow__short_max_square_41.c":58:11)
#loc82 = loc("CWE190_Integer_Overflow__short_max_square_41.c":59:12)
#loc83 = loc("CWE190_Integer_Overflow__short_max_square_41.c":59:5)
#loc84 = loc("CWE190_Integer_Overflow__short_max_square_41.c":61:12)
#loc85 = loc("CWE190_Integer_Overflow__short_max_square_41.c":61:5)
#loc86 = loc("CWE190_Integer_Overflow__short_max_square_41.c":62:17)
#loc87 = loc("CWE190_Integer_Overflow__short_max_square_41.c":62:5)
#loc88 = loc(fused[#loc1, #loc2])
#loc89 = loc(fused[#loc3, #loc4])
#loc91 = loc(fused[#loc7, #loc8])
#loc92 = loc(fused[#loc10, #loc11])
#loc93 = loc(fused[#loc15, #loc16])
#loc94 = loc(fused[#loc17, #loc18])
#loc95 = loc(fused[#loc20, #loc19])
#loc96 = loc(fused[#loc22, #loc21])
#loc97 = loc(fused[#loc25, #loc26])
#loc98 = loc(fused[#loc27, #loc28])
#loc99 = loc(fused[#loc29, #loc30])
#loc100 = loc(fused[#loc32, #loc33])
#loc101 = loc(fused[#loc35, #loc36])
#loc103 = loc(fused[#loc39, #loc40])
#loc104 = loc(fused[#loc42, #loc43])
#loc105 = loc(fused[#loc45, #loc48])
#loc106 = loc(fused[#loc49, #loc50, #loc51, #loc43])
#loc107 = loc(fused[#loc56, #loc57])
#loc108 = loc(fused[#loc58, #loc59])
#loc109 = loc(fused[#loc61, #loc60])
#loc110 = loc(fused[#loc63, #loc62])
#loc111 = loc(fused[#loc66, #loc67])
#loc113 = loc(fused[#loc70, #loc71])
#loc114 = loc(fused[#loc73, #loc74])
#loc115 = loc(fused[#loc78, #loc79])
#loc116 = loc(fused[#loc80, #loc81])
#loc117 = loc(fused[#loc83, #loc82])
#loc118 = loc(fused[#loc85, #loc84])
