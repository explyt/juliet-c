!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc133)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc134)
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc135)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc136)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc137)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc139)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc140)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc18)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc141)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc22)
      cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc143)
      cir.for : cond {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc25)
        %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc144)
        cir.condition(%6) loc(#loc26)
      } body {
        cir.scope {
          %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc28)
          %5 = cir.const #cir.int<50> : !s32i loc(#loc29)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc29)
          %7 = cir.const #cir.int<1> : !u64i loc(#loc146)
          %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc147)
          %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc28)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc148)
          cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc149)
          cir.scope {
            %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc37)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc37)
            %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc151)
            cir.if %19 {
              %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc39)
              %21 = cir.const #cir.int<1> : !s32i loc(#loc40)
              %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc41)
              cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc39)
            } loc(#loc152)
          } loc(#loc150)
          %11 = cir.const #cir.int<0> : !s32i loc(#loc42)
          %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc42)
          %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
          %14 = cir.const #cir.int<0> : !s32i loc(#loc44)
          %15 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc45)
          cir.store %12, %15 : !s8i, !cir.ptr<!s8i> loc(#loc153)
        } loc(#loc145)
        cir.yield loc(#loc21)
      } step {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
        %5 = cir.unary(inc, %4) nsw : !s32i, !s32i loc(#loc47)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc154)
        cir.yield loc(#loc142)
      } loc(#loc142)
    } loc(#loc142)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc156)
      %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc52)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc52)
      %6 = cir.const #cir.int<67> : !s32i loc(#loc53)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc54)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc55)
      %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc54)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc54)
      cir.libc.memset %10 bytes from %5 set to %6 : !cir.ptr<!void>, !s32i, !u64i loc(#loc157)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc58)
      %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc58)
      %13 = cir.const #cir.int<100> : !s32i loc(#loc59)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc60)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc59)
      %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc61)
      %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc61)
      cir.store %12, %17 : !s8i, !cir.ptr<!s8i> loc(#loc158)
      %18 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc62)
      %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc64)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc64)
      %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
      %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
      %24 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc65)
      %25 = cir.call @snprintf(%19, %21, %23, %24) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc62)
      %26 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc67)
      %27 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc68)
      %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc69)
      %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc69)
      cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc68)
    } loc(#loc155)
    cir.return loc(#loc13)
  } loc(#loc138)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc160)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc72)
    cir.return loc(#loc71)
  } loc(#loc159)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc162)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc163)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc80)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc164)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc84)
      cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc166)
      cir.for : cond {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc87)
        %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc167)
        cir.condition(%6) loc(#loc88)
      } body {
        cir.scope {
          %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc90)
          %5 = cir.const #cir.int<100> : !s32i loc(#loc91)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc91)
          %7 = cir.const #cir.int<1> : !u64i loc(#loc169)
          %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc170)
          %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc90)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc171)
          cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc172)
          cir.scope {
            %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc99)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc99)
            %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc174)
            cir.if %19 {
              %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc101)
              %21 = cir.const #cir.int<1> : !s32i loc(#loc102)
              %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc103)
              cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc101)
            } loc(#loc175)
          } loc(#loc173)
          %11 = cir.const #cir.int<0> : !s32i loc(#loc104)
          %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc104)
          %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
          %14 = cir.const #cir.int<0> : !s32i loc(#loc106)
          %15 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc107)
          cir.store %12, %15 : !s8i, !cir.ptr<!s8i> loc(#loc176)
        } loc(#loc168)
        cir.yield loc(#loc83)
      } step {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc108)
        %5 = cir.unary(inc, %4) nsw : !s32i, !s32i loc(#loc109)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
        cir.yield loc(#loc165)
      } loc(#loc165)
    } loc(#loc165)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc179)
      %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc114)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc114)
      %6 = cir.const #cir.int<67> : !s32i loc(#loc115)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc116)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc117)
      %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc116)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc116)
      cir.libc.memset %10 bytes from %5 set to %6 : !cir.ptr<!void>, !s32i, !u64i loc(#loc180)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc120)
      %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc120)
      %13 = cir.const #cir.int<100> : !s32i loc(#loc121)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc122)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc121)
      %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc123)
      %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc123)
      cir.store %12, %17 : !s8i, !cir.ptr<!s8i> loc(#loc181)
      %18 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc124)
      %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc126)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc126)
      %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc127)
      %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc127)
      %24 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc128)
      %25 = cir.call @snprintf(%19, %21, %23, %24) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc124)
      %26 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc130)
      %27 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc131)
      %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
      %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc132)
      cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc131)
    } loc(#loc178)
    cir.return loc(#loc75)
  } loc(#loc161)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/stdio.h":385:1)
#loc6 = loc("/usr/include/stdio.h":387:62)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":46:29)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":29:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":50:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":31:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":31:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":32:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":32:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":33:12)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":33:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":34:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":40:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":34:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":34:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":34:16)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":34:20)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":34:18)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":35:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":37:24)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":37:31)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":37:34)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":37:45)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":37:46)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":37:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":38:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":38:37)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":38:13)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":38:21)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":38:27)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":38:28)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":38:34)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":38:33)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":39:19)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":39:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":39:14)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":39:15)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":34:24)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":34:23)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":41:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":49:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":42:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":42:24)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":43:16)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":43:24)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":43:29)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":43:33)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":43:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":43:34)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":44:25)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":44:16)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":44:20)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":44:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":46:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":46:18)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":46:24)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":46:35)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":47:19)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":47:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":48:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":48:14)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":80:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":83:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":82:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":82:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":57:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":78:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":59:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":59:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":60:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":60:12)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":61:12)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":61:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":62:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":68:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":62:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":62:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":62:16)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":62:20)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":62:18)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":63:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":65:24)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":65:31)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":65:35)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":65:46)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":65:47)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":65:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":66:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":66:37)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":66:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":66:21)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":66:27)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":66:28)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":66:34)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":66:33)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":67:19)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":67:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":67:14)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":67:15)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":62:24)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":62:23)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":69:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":77:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":70:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":70:24)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":71:16)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":71:24)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":71:29)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":71:33)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":71:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":71:34)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":72:25)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":72:16)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":72:20)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":72:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":74:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":74:18)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":74:24)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":74:29)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":74:35)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":75:19)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":75:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":76:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c":76:14)
#loc133 = loc(fused[#loc1, #loc2])
#loc134 = loc(fused[#loc3, #loc4])
#loc135 = loc(fused[#loc5, #loc6])
#loc136 = loc(fused[#loc8, #loc9])
#loc137 = loc(fused[#loc10, #loc11])
#loc138 = loc(fused[#loc12, #loc13])
#loc139 = loc(fused[#loc14, #loc15])
#loc140 = loc(fused[#loc16, #loc17])
#loc141 = loc(fused[#loc19, #loc18])
#loc142 = loc(fused[#loc20, #loc21])
#loc143 = loc(fused[#loc23, #loc22])
#loc144 = loc(fused[#loc24, #loc25])
#loc145 = loc(fused[#loc27, #loc21])
#loc146 = loc(fused[#loc30, #loc31])
#loc147 = loc(fused[#loc29, #loc31])
#loc148 = loc(fused[#loc28, #loc32])
#loc149 = loc(fused[#loc33, #loc32])
#loc150 = loc(fused[#loc34, #loc35])
#loc151 = loc(fused[#loc36, #loc37])
#loc152 = loc(fused[#loc38, #loc35])
#loc153 = loc(fused[#loc43, #loc42])
#loc154 = loc(fused[#loc47, #loc46])
#loc155 = loc(fused[#loc48, #loc49])
#loc156 = loc(fused[#loc50, #loc51])
#loc157 = loc(fused[#loc56, #loc57])
#loc158 = loc(fused[#loc61, #loc58])
#loc159 = loc(fused[#loc70, #loc71])
#loc160 = loc(fused[#loc72, #loc73])
#loc161 = loc(fused[#loc74, #loc75])
#loc162 = loc(fused[#loc76, #loc77])
#loc163 = loc(fused[#loc78, #loc79])
#loc164 = loc(fused[#loc81, #loc80])
#loc165 = loc(fused[#loc82, #loc83])
#loc166 = loc(fused[#loc85, #loc84])
#loc167 = loc(fused[#loc86, #loc87])
#loc168 = loc(fused[#loc89, #loc83])
#loc169 = loc(fused[#loc92, #loc93])
#loc170 = loc(fused[#loc91, #loc93])
#loc171 = loc(fused[#loc90, #loc94])
#loc172 = loc(fused[#loc95, #loc94])
#loc173 = loc(fused[#loc96, #loc97])
#loc174 = loc(fused[#loc98, #loc99])
#loc175 = loc(fused[#loc100, #loc97])
#loc176 = loc(fused[#loc105, #loc104])
#loc177 = loc(fused[#loc109, #loc108])
#loc178 = loc(fused[#loc110, #loc111])
#loc179 = loc(fused[#loc112, #loc113])
#loc180 = loc(fused[#loc118, #loc119])
#loc181 = loc(fused[#loc123, #loc120])
