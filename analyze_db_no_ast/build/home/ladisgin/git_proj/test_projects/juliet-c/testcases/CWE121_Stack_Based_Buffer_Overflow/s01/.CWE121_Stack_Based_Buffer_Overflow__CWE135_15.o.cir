!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc198)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc4)
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc199)
  cir.func private  @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc200)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE135_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc202)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc203)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc17)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
        %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
        cir.store %5, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc205)
        cir.break loc(#loc19)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc4)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc4)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc20)
        cir.break loc(#loc21)
      }
      ] loc(#loc15)
    } loc(#loc204)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc24)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc208)
          %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc209)
          %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc31)
          %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc32)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
          %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc31)
          cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc208)
          %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc30)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc30)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc30)
          %12 = cir.binop(add, %9, %11) : !u64i loc(#loc30)
          %13 = cir.const #cir.int<4> : !u64i loc(#loc30)
          %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc30)
          %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc30)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc30)
          cir.store %16, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc209)
          %17 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc33)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc33)
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc34)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc34)
          %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc35)
          %22 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc36)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
          cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc37)
        } loc(#loc207)
        cir.break loc(#loc38)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc39)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc39)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc40)
        cir.break loc(#loc41)
      }
      ] loc(#loc22)
    } loc(#loc206)
    cir.return loc(#loc10)
  } loc(#loc201)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE135_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc212)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc214)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc43)
  } loc(#loc210)
  cir.func private  @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc215)
  cir.func private  @printWLine(!cir.ptr<!s32i>) loc(#loc216)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc218)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc60)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc219)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc64)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc65)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc65)
        %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc65)
        cir.store %5, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc221)
        cir.break loc(#loc67)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc68)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc68)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc69)
        cir.break loc(#loc70)
      }
      ] loc(#loc62)
    } loc(#loc220)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc73)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc74)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc74)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc75)
        cir.break loc(#loc76)
      },
      case (default) {
        cir.scope {
          %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc224)
          %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc225)
          %5 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc83)
          %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc84)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc84)
          %8 = cir.call @wcslen(%7) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc83)
          cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc224)
          %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc82)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc82)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc82)
          %12 = cir.binop(add, %9, %11) : !u64i loc(#loc82)
          %13 = cir.const #cir.int<4> : !u64i loc(#loc82)
          %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc82)
          %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc82)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc82)
          cir.store %16, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc225)
          %17 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc85)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc85)
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc86)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc86)
          %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc87)
          %22 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc88)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc88)
          cir.call @printWLine(%23) : (!cir.ptr<!s32i>) -> () loc(#loc89)
        } loc(#loc223)
        cir.break loc(#loc90)
      }
      ] loc(#loc71)
    } loc(#loc222)
    cir.return loc(#loc57)
  } loc(#loc217)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc227)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc95)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc228)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc99)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc100)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc100)
        %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc100)
        cir.store %5, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc230)
        cir.break loc(#loc102)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc103)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc103)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc104)
        cir.break loc(#loc105)
      }
      ] loc(#loc97)
    } loc(#loc229)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc108)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc233)
          %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc234)
          %5 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc115)
          %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc116)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc116)
          %8 = cir.call @wcslen(%7) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc115)
          cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc233)
          %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc114)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc114)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc114)
          %12 = cir.binop(add, %9, %11) : !u64i loc(#loc114)
          %13 = cir.const #cir.int<4> : !u64i loc(#loc114)
          %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc114)
          %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc114)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc114)
          cir.store %16, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc234)
          %17 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc117)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc117)
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc118)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc118)
          %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc119)
          %22 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc120)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc120)
          cir.call @printWLine(%23) : (!cir.ptr<!s32i>) -> () loc(#loc121)
        } loc(#loc232)
        cir.break loc(#loc122)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc123)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc123)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc124)
        cir.break loc(#loc125)
      }
      ] loc(#loc106)
    } loc(#loc231)
    cir.return loc(#loc92)
  } loc(#loc226)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc126)
  cir.func private  @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc235)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc237)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc133)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc238)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc137)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc138)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc138)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc139)
        cir.break loc(#loc140)
      },
      case (default) {
        %3 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc126)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc126)
        %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc126)
        cir.store %5, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc240)
        cir.break loc(#loc142)
      }
      ] loc(#loc135)
    } loc(#loc239)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc145)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc243)
          %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc244)
          %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc152)
          %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc153)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc153)
          %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc152)
          cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc243)
          %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc151)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc151)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc151)
          %12 = cir.binop(add, %9, %11) : !u64i loc(#loc151)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc151)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc151)
          %15 = cir.binop(mul, %12, %14) : !u64i loc(#loc151)
          %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc151)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc151)
          cir.store %17, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc244)
          %18 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc154)
          %19 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc155)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc155)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc156)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc156)
          %23 = cir.call @strcpy(%20, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc154)
          %24 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc157)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc157)
          cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc158)
        } loc(#loc242)
        cir.break loc(#loc159)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc160)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc160)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc161)
        cir.break loc(#loc162)
      }
      ] loc(#loc143)
    } loc(#loc241)
    cir.return loc(#loc130)
  } loc(#loc236)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc246)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc167)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc247)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc171)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc172)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc172)
        %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc172)
        cir.store %5, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc249)
        cir.break loc(#loc174)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc175)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc175)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc176)
        cir.break loc(#loc177)
      }
      ] loc(#loc169)
    } loc(#loc248)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc180)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc252)
          %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc253)
          %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc187)
          %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc188)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc188)
          %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc187)
          cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc252)
          %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc186)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc186)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc186)
          %12 = cir.binop(add, %9, %11) : !u64i loc(#loc186)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc186)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc186)
          %15 = cir.binop(mul, %12, %14) : !u64i loc(#loc186)
          %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc186)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc186)
          cir.store %17, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc253)
          %18 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc189)
          %19 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc190)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc190)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc191)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc191)
          %23 = cir.call @strcpy(%20, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc189)
          %24 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc192)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc192)
          cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc193)
        } loc(#loc251)
        cir.break loc(#loc194)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc195)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc195)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc196)
        cir.break loc(#loc197)
      }
      ] loc(#loc178)
    } loc(#loc250)
    cir.return loc(#loc164)
  } loc(#loc245)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":35:24)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":39:19)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/wchar.h":98:1)
#loc8 = loc("/usr/include/wchar.h":100:14)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":27:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":58:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":29:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":29:12)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":30:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":30:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":31:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":41:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":31:12)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":35:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":36:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":39:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":40:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":42:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":57:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":42:12)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":45:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":51:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":47:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":47:45)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":48:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":48:31)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":47:26)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":47:41)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":49:22)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":49:28)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":49:15)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":50:27)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":50:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":52:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":55:19)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":55:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":56:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":200:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":206:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":202:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":202:14)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":203:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":203:14)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":204:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":204:14)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":205:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":205:14)
#loc52 = loc("/usr/include/wchar.h":247:1)
#loc53 = loc("/usr/include/wchar.h":247:51)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":65:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":96:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":67:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":67:12)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":68:12)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":68:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":69:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":79:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":69:12)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":73:24)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":73:9)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":74:9)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":77:19)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":77:9)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":78:9)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":80:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":95:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":80:12)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":84:19)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":84:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":85:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":87:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":93:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":89:9)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":89:48)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":90:9)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":90:31)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":89:26)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":89:44)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":91:22)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":91:28)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":91:15)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":92:31)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":92:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":94:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":99:1)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":130:1)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":101:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":101:12)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":102:12)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":102:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":103:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":113:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":103:12)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":107:24)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":107:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":108:9)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":111:19)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":111:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":112:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":114:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":129:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":114:12)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":117:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":123:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":119:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":119:48)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":120:9)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":120:31)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":119:26)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":119:44)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":121:22)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":121:28)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":121:15)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":122:31)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":122:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":124:5)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":127:19)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":127:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":128:9)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":145:24)
#loc127 = loc("/usr/include/string.h":141:1)
#loc128 = loc("/usr/include/string.h":142:14)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":133:1)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":164:1)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":135:5)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":135:12)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":136:12)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":136:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":137:5)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":147:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":137:12)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":141:19)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":141:9)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":142:9)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":145:9)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":146:9)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":148:5)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":163:5)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":148:12)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":151:5)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":157:5)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":153:9)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":153:45)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":154:9)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":154:31)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":153:26)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":153:41)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":155:15)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":155:22)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":155:28)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":156:27)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":156:9)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":158:5)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":161:19)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":161:9)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":162:9)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":167:1)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":198:1)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":169:5)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":169:12)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":170:12)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":170:5)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":171:5)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":181:5)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":171:12)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":175:24)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":175:9)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":176:9)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":179:19)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":179:9)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":180:9)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":182:5)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":197:5)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":182:12)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":185:5)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":191:5)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":187:9)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":187:45)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":188:9)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":188:31)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":187:26)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":187:41)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":189:15)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":189:22)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":189:28)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":190:27)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":190:9)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":192:5)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":195:19)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":195:9)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":196:9)
#loc198 = loc(fused[#loc2, #loc3])
#loc199 = loc(fused[#loc5, #loc6])
#loc200 = loc(fused[#loc7, #loc8])
#loc201 = loc(fused[#loc9, #loc10])
#loc202 = loc(fused[#loc11, #loc12])
#loc203 = loc(fused[#loc14, #loc13])
#loc204 = loc(fused[#loc15, #loc16])
#loc205 = loc(fused[#loc18, #loc1])
#loc206 = loc(fused[#loc22, #loc23])
#loc207 = loc(fused[#loc25, #loc26])
#loc208 = loc(fused[#loc27, #loc28])
#loc209 = loc(fused[#loc29, #loc30])
#loc210 = loc(fused[#loc42, #loc43])
#loc211 = loc(fused[#loc44, #loc45])
#loc212 = loc(fused[#loc46, #loc47])
#loc213 = loc(fused[#loc48, #loc49])
#loc214 = loc(fused[#loc50, #loc51])
#loc215 = loc(fused[#loc52, #loc53])
#loc216 = loc(fused[#loc54, #loc55])
#loc217 = loc(fused[#loc56, #loc57])
#loc218 = loc(fused[#loc58, #loc59])
#loc219 = loc(fused[#loc61, #loc60])
#loc220 = loc(fused[#loc62, #loc63])
#loc221 = loc(fused[#loc66, #loc65])
#loc222 = loc(fused[#loc71, #loc72])
#loc223 = loc(fused[#loc77, #loc78])
#loc224 = loc(fused[#loc79, #loc80])
#loc225 = loc(fused[#loc81, #loc82])
#loc226 = loc(fused[#loc91, #loc92])
#loc227 = loc(fused[#loc93, #loc94])
#loc228 = loc(fused[#loc96, #loc95])
#loc229 = loc(fused[#loc97, #loc98])
#loc230 = loc(fused[#loc101, #loc100])
#loc231 = loc(fused[#loc106, #loc107])
#loc232 = loc(fused[#loc109, #loc110])
#loc233 = loc(fused[#loc111, #loc112])
#loc234 = loc(fused[#loc113, #loc114])
#loc235 = loc(fused[#loc127, #loc128])
#loc236 = loc(fused[#loc129, #loc130])
#loc237 = loc(fused[#loc131, #loc132])
#loc238 = loc(fused[#loc134, #loc133])
#loc239 = loc(fused[#loc135, #loc136])
#loc240 = loc(fused[#loc141, #loc126])
#loc241 = loc(fused[#loc143, #loc144])
#loc242 = loc(fused[#loc146, #loc147])
#loc243 = loc(fused[#loc148, #loc149])
#loc244 = loc(fused[#loc150, #loc151])
#loc245 = loc(fused[#loc163, #loc164])
#loc246 = loc(fused[#loc165, #loc166])
#loc247 = loc(fused[#loc168, #loc167])
#loc248 = loc(fused[#loc169, #loc170])
#loc249 = loc(fused[#loc173, #loc172])
#loc250 = loc(fused[#loc178, #loc179])
#loc251 = loc(fused[#loc181, #loc182])
#loc252 = loc(fused[#loc183, #loc184])
#loc253 = loc(fused[#loc185, #loc186])
