!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc160 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":394:10)
#loc161 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":394:14)
#loc162 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":394:20)
#loc163 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":394:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc569 = loc(fused[#loc160, #loc161])
#loc570 = loc(fused[#loc162, #loc163])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_connect_socket_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc506)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc507)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc508)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc509)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc510)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc511)
  cir.func private @close(!s32i) -> !s32i loc(#loc512)
  cir.func private @printIntLine(!s32i) loc(#loc513)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc514)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc20)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_connect_socket_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc516)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc26)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc517)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc519)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc30)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc30)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc522)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc523)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc524)
          %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc525)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc40)
          %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc40)
          cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc524)
          cir.scope {
            cir.do {
              %12 = cir.const #cir.int<2> : !s32i loc(#loc45)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc46)
              %14 = cir.const #cir.int<6> : !s32i loc(#loc47)
              %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc48)
              cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc527)
              cir.scope {
                %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc53)
                %55 = cir.const #cir.int<1> : !s32i loc(#loc54)
                %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc54)
                %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc529)
                cir.if %57 {
                  cir.break loc(#loc56)
                } loc(#loc530)
              } loc(#loc528)
              %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc531)
              %17 = cir.const #cir.int<0> : !s32i loc(#loc59)
              %18 = cir.const #cir.int<16> : !u64i loc(#loc532)
              cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc533)
              %19 = cir.const #cir.int<2> : !s32i loc(#loc64)
              %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc64)
              %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
              cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc534)
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
              %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc67)
              %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
              %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc69)
              cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc535)
              %27 = cir.const #cir.int<27015> : !s32i loc(#loc72)
              %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc72)
              %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc73)
              %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
              cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc536)
              cir.scope {
                %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc79)
                %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc538)
                %56 = cir.const #cir.int<16> : !u64i loc(#loc539)
                %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc539)
                %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc84)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc85)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc85)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc540)
                cir.if %61 {
                  cir.break loc(#loc87)
                } loc(#loc541)
              } loc(#loc537)
              %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc88)
              %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc89)
              %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc89)
              %34 = cir.const #cir.int<3> : !s32i loc(#loc90)
              %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc90)
              %36 = cir.const #cir.int<4> : !u64i loc(#loc90)
              %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc90)
              %38 = cir.const #cir.int<2> : !s32i loc(#loc90)
              %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc90)
              %40 = cir.binop(add, %37, %39) : !u64i loc(#loc90)
              %41 = cir.const #cir.int<1> : !s32i loc(#loc91)
              %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc91)
              %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc542)
              %44 = cir.const #cir.int<0> : !s32i loc(#loc92)
              %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc93)
              %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc93)
              cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc543)
              cir.scope {
                %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc98)
                %55 = cir.const #cir.int<1> : !s32i loc(#loc99)
                %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc99)
                %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc545)
                %58 = cir.ternary(%57, true {
                  %59 = cir.const #true loc(#loc100)
                  cir.yield %59 : !cir.bool loc(#loc100)
                }, false {
                  %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc101)
                  %60 = cir.const #cir.int<0> : !s32i loc(#loc102)
                  %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc546)
                  %62 = cir.ternary(%61, true {
                    %63 = cir.const #true loc(#loc100)
                    cir.yield %63 : !cir.bool loc(#loc100)
                  }, false {
                    %63 = cir.const #false loc(#loc100)
                    cir.yield %63 : !cir.bool loc(#loc100)
                  }) : (!cir.bool) -> !cir.bool loc(#loc100)
                  cir.yield %62 : !cir.bool loc(#loc100)
                }) : (!cir.bool) -> !cir.bool loc(#loc100)
                cir.if %58 {
                  cir.break loc(#loc104)
                } loc(#loc547)
              } loc(#loc544)
              %47 = cir.const #cir.int<0> : !s32i loc(#loc105)
              %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc105)
              %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc106)
              %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc107)
              %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc107)
              cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc548)
              %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc108)
              %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc109)
              cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc549)
              cir.yield loc(#loc44)
            } while {
              %12 = cir.const #cir.int<0> : !s32i loc(#loc112)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc112)
              cir.condition(%13) loc(#loc112)
            } loc(#loc526)
          } loc(#loc526)
          cir.scope {
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc115)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc116)
            %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc116)
            %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc551)
            cir.if %15 {
              %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc118)
              %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc119)
            } loc(#loc552)
          } loc(#loc550)
        } loc(#loc521)
      } loc(#loc520)
    } loc(#loc518)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc554)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc122)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc122)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc557)
          %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc557)
          cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc557)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc131)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc132)
            %10 = cir.cmp(ge, %8, %9) : !s32i, !cir.bool loc(#loc559)
            cir.if %10 {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc136)
              %12 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc137)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc137)
              %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc137)
              cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc138)
            } else {
              %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc20)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc20)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc139)
            } loc(#loc560)
          } loc(#loc558)
        } loc(#loc556)
      } loc(#loc555)
    } loc(#loc553)
    cir.return loc(#loc22)
  } loc(#loc515)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_connect_socket_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc562)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc142)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc563)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc144)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc564)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc146)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc565)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc148)
    cir.return loc(#loc141)
  } loc(#loc561)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc566)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc567)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc154)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc155)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc156)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc157)
  cir.func @main(%arg0: !s32i loc(fused[#loc160, #loc161]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc162, #loc163])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc569)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc570)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc159)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc164)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc165)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc166)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc166)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc167)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc154)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc154)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc168)
    %8 = cir.get_global @CWE126_Buffer_Overread__CWE129_connect_socket_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc571)
    cir.call @CWE126_Buffer_Overread__CWE129_connect_socket_08_good() : () -> () loc(#loc169)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc155)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc155)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc171)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc156)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc156)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc172)
    %13 = cir.get_global @CWE126_Buffer_Overread__CWE129_connect_socket_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc572)
    cir.call @CWE126_Buffer_Overread__CWE129_connect_socket_08_bad() : () -> () loc(#loc173)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc157)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc157)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc175)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc176)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc573)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc573)
    cir.return %17 : !s32i loc(#loc573)
  } loc(#loc568)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc179)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc180)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc575)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc575)
    cir.return %2 : !s32i loc(#loc575)
  } loc(#loc574)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc182)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc183)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc577)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc188)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc189)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc578)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc580)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc193)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc193)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc583)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc584)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc585)
          %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc586)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc203)
          %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc203)
          cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc585)
          cir.scope {
            cir.do {
              %12 = cir.const #cir.int<2> : !s32i loc(#loc208)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc209)
              %14 = cir.const #cir.int<6> : !s32i loc(#loc210)
              %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc211)
              cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc588)
              cir.scope {
                %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc216)
                %55 = cir.const #cir.int<1> : !s32i loc(#loc217)
                %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc217)
                %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc590)
                cir.if %57 {
                  cir.break loc(#loc219)
                } loc(#loc591)
              } loc(#loc589)
              %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc592)
              %17 = cir.const #cir.int<0> : !s32i loc(#loc222)
              %18 = cir.const #cir.int<16> : !u64i loc(#loc593)
              cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc594)
              %19 = cir.const #cir.int<2> : !s32i loc(#loc227)
              %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc227)
              %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
              cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc595)
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc229)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc229)
              %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc230)
              %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
              %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc69)
              cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc596)
              %27 = cir.const #cir.int<27015> : !s32i loc(#loc233)
              %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc233)
              %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc234)
              %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
              cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc597)
              cir.scope {
                %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc239)
                %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc599)
                %56 = cir.const #cir.int<16> : !u64i loc(#loc600)
                %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc600)
                %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc244)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc245)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc245)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc601)
                cir.if %61 {
                  cir.break loc(#loc247)
                } loc(#loc602)
              } loc(#loc598)
              %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc248)
              %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc249)
              %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc249)
              %34 = cir.const #cir.int<3> : !s32i loc(#loc250)
              %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc250)
              %36 = cir.const #cir.int<4> : !u64i loc(#loc250)
              %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc250)
              %38 = cir.const #cir.int<2> : !s32i loc(#loc250)
              %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc250)
              %40 = cir.binop(add, %37, %39) : !u64i loc(#loc250)
              %41 = cir.const #cir.int<1> : !s32i loc(#loc251)
              %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc251)
              %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc603)
              %44 = cir.const #cir.int<0> : !s32i loc(#loc252)
              %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc253)
              %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc253)
              cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc604)
              cir.scope {
                %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc258)
                %55 = cir.const #cir.int<1> : !s32i loc(#loc259)
                %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc259)
                %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc606)
                %58 = cir.ternary(%57, true {
                  %59 = cir.const #true loc(#loc260)
                  cir.yield %59 : !cir.bool loc(#loc260)
                }, false {
                  %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc261)
                  %60 = cir.const #cir.int<0> : !s32i loc(#loc262)
                  %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc607)
                  %62 = cir.ternary(%61, true {
                    %63 = cir.const #true loc(#loc260)
                    cir.yield %63 : !cir.bool loc(#loc260)
                  }, false {
                    %63 = cir.const #false loc(#loc260)
                    cir.yield %63 : !cir.bool loc(#loc260)
                  }) : (!cir.bool) -> !cir.bool loc(#loc260)
                  cir.yield %62 : !cir.bool loc(#loc260)
                }) : (!cir.bool) -> !cir.bool loc(#loc260)
                cir.if %58 {
                  cir.break loc(#loc264)
                } loc(#loc608)
              } loc(#loc605)
              %47 = cir.const #cir.int<0> : !s32i loc(#loc265)
              %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc265)
              %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc266)
              %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc267)
              %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc267)
              cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc609)
              %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc268)
              %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc269)
              cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc610)
              cir.yield loc(#loc207)
            } while {
              %12 = cir.const #cir.int<0> : !s32i loc(#loc272)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc272)
              cir.condition(%13) loc(#loc272)
            } loc(#loc587)
          } loc(#loc587)
          cir.scope {
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc275)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc276)
            %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc276)
            %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc612)
            cir.if %15 {
              %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc278)
              %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc279)
            } loc(#loc613)
          } loc(#loc611)
        } loc(#loc582)
      } loc(#loc581)
    } loc(#loc579)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc615)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc282)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc282)
      cir.if %5 {
        %6 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc182)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc182)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc287)
      } else {
        cir.scope {
          %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc618)
          %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc618)
          cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc618)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc294)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc295)
            %10 = cir.cmp(ge, %8, %9) : !s32i, !cir.bool loc(#loc620)
            %11 = cir.ternary(%10, true {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc297)
              %13 = cir.const #cir.int<10> : !s32i loc(#loc298)
              %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc621)
              %15 = cir.ternary(%14, true {
                %16 = cir.const #true loc(#loc296)
                cir.yield %16 : !cir.bool loc(#loc296)
              }, false {
                %16 = cir.const #false loc(#loc296)
                cir.yield %16 : !cir.bool loc(#loc296)
              }) : (!cir.bool) -> !cir.bool loc(#loc296)
              cir.yield %15 : !cir.bool loc(#loc296)
            }, false {
              %12 = cir.const #false loc(#loc296)
              cir.yield %12 : !cir.bool loc(#loc296)
            }) : (!cir.bool) -> !cir.bool loc(#loc296)
            cir.if %11 {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc303)
              %13 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc304)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc304)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc304)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc305)
            } else {
              %12 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc183)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc183)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc306)
            } loc(#loc622)
          } loc(#loc619)
        } loc(#loc617)
      } loc(#loc616)
    } loc(#loc614)
    cir.return loc(#loc185)
  } loc(#loc576)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc308)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc309)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc624)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc624)
    cir.return %2 : !s32i loc(#loc624)
  } loc(#loc623)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc626)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc315)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc316)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc627)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc629)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc320)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc320)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc632)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc633)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc634)
          %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc635)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc330)
          %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc330)
          cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc634)
          cir.scope {
            cir.do {
              %12 = cir.const #cir.int<2> : !s32i loc(#loc335)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc336)
              %14 = cir.const #cir.int<6> : !s32i loc(#loc337)
              %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc338)
              cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc637)
              cir.scope {
                %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc343)
                %55 = cir.const #cir.int<1> : !s32i loc(#loc344)
                %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc344)
                %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc639)
                cir.if %57 {
                  cir.break loc(#loc346)
                } loc(#loc640)
              } loc(#loc638)
              %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc641)
              %17 = cir.const #cir.int<0> : !s32i loc(#loc349)
              %18 = cir.const #cir.int<16> : !u64i loc(#loc642)
              cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc643)
              %19 = cir.const #cir.int<2> : !s32i loc(#loc354)
              %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc354)
              %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
              cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc644)
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc356)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc356)
              %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc357)
              %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
              %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc69)
              cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc645)
              %27 = cir.const #cir.int<27015> : !s32i loc(#loc360)
              %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc360)
              %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc361)
              %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
              cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc646)
              cir.scope {
                %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc366)
                %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc648)
                %56 = cir.const #cir.int<16> : !u64i loc(#loc649)
                %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc649)
                %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc371)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc372)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc372)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc650)
                cir.if %61 {
                  cir.break loc(#loc374)
                } loc(#loc651)
              } loc(#loc647)
              %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc375)
              %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc376)
              %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc376)
              %34 = cir.const #cir.int<3> : !s32i loc(#loc377)
              %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc377)
              %36 = cir.const #cir.int<4> : !u64i loc(#loc377)
              %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc377)
              %38 = cir.const #cir.int<2> : !s32i loc(#loc377)
              %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc377)
              %40 = cir.binop(add, %37, %39) : !u64i loc(#loc377)
              %41 = cir.const #cir.int<1> : !s32i loc(#loc378)
              %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc378)
              %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc652)
              %44 = cir.const #cir.int<0> : !s32i loc(#loc379)
              %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc380)
              %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc380)
              cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc653)
              cir.scope {
                %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc385)
                %55 = cir.const #cir.int<1> : !s32i loc(#loc386)
                %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc386)
                %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc655)
                %58 = cir.ternary(%57, true {
                  %59 = cir.const #true loc(#loc387)
                  cir.yield %59 : !cir.bool loc(#loc387)
                }, false {
                  %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc388)
                  %60 = cir.const #cir.int<0> : !s32i loc(#loc389)
                  %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc656)
                  %62 = cir.ternary(%61, true {
                    %63 = cir.const #true loc(#loc387)
                    cir.yield %63 : !cir.bool loc(#loc387)
                  }, false {
                    %63 = cir.const #false loc(#loc387)
                    cir.yield %63 : !cir.bool loc(#loc387)
                  }) : (!cir.bool) -> !cir.bool loc(#loc387)
                  cir.yield %62 : !cir.bool loc(#loc387)
                }) : (!cir.bool) -> !cir.bool loc(#loc387)
                cir.if %58 {
                  cir.break loc(#loc391)
                } loc(#loc657)
              } loc(#loc654)
              %47 = cir.const #cir.int<0> : !s32i loc(#loc392)
              %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc392)
              %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc393)
              %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc394)
              %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc394)
              cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc658)
              %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc395)
              %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc396)
              cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc659)
              cir.yield loc(#loc334)
            } while {
              %12 = cir.const #cir.int<0> : !s32i loc(#loc399)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc399)
              cir.condition(%13) loc(#loc399)
            } loc(#loc636)
          } loc(#loc636)
          cir.scope {
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc402)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc403)
            %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc403)
            %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc661)
            cir.if %15 {
              %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc405)
              %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc406)
            } loc(#loc662)
          } loc(#loc660)
        } loc(#loc631)
      } loc(#loc630)
    } loc(#loc628)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc664)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc409)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc409)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc667)
          %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc667)
          cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc667)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc418)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc419)
            %10 = cir.cmp(ge, %8, %9) : !s32i, !cir.bool loc(#loc669)
            %11 = cir.ternary(%10, true {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc421)
              %13 = cir.const #cir.int<10> : !s32i loc(#loc422)
              %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc670)
              %15 = cir.ternary(%14, true {
                %16 = cir.const #true loc(#loc420)
                cir.yield %16 : !cir.bool loc(#loc420)
              }, false {
                %16 = cir.const #false loc(#loc420)
                cir.yield %16 : !cir.bool loc(#loc420)
              }) : (!cir.bool) -> !cir.bool loc(#loc420)
              cir.yield %15 : !cir.bool loc(#loc420)
            }, false {
              %12 = cir.const #false loc(#loc420)
              cir.yield %12 : !cir.bool loc(#loc420)
            }) : (!cir.bool) -> !cir.bool loc(#loc420)
            cir.if %11 {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc427)
              %13 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc428)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc428)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc428)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc429)
            } else {
              %12 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc430)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc430)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc431)
            } loc(#loc671)
          } loc(#loc668)
        } loc(#loc666)
      } loc(#loc665)
    } loc(#loc663)
    cir.return loc(#loc312)
  } loc(#loc625)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc673)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc436)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc437)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc674)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc676)
      %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc441)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc441)
      cir.if %5 {
        %6 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc446)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc446)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc447)
      } else {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc448)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc678)
      } loc(#loc677)
    } loc(#loc675)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc680)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc452)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc452)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc683)
          %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc683)
          cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc683)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc461)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc462)
            %10 = cir.cmp(ge, %8, %9) : !s32i, !cir.bool loc(#loc685)
            cir.if %10 {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc466)
              %12 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc467)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc467)
              %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc467)
              cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc468)
            } else {
              %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc469)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc469)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc470)
            } loc(#loc686)
          } loc(#loc684)
        } loc(#loc682)
      } loc(#loc681)
    } loc(#loc679)
    cir.return loc(#loc433)
  } loc(#loc672)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc688)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc475)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc476)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc689)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc691)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc480)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc480)
      cir.if %5 {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc483)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc693)
      } loc(#loc692)
    } loc(#loc690)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc695)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc487)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc487)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc698)
          %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc698)
          cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc698)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc496)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc497)
            %10 = cir.cmp(ge, %8, %9) : !s32i, !cir.bool loc(#loc700)
            cir.if %10 {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc501)
              %12 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc502)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc502)
              %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc502)
              cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc503)
            } else {
              %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc504)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc504)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc505)
            } loc(#loc701)
          } loc(#loc699)
        } loc(#loc697)
      } loc(#loc696)
    } loc(#loc694)
    cir.return loc(#loc472)
  } loc(#loc687)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_connect_socket_08.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":90:53)
#loc6 = loc("/usr/include/netinet/in.h":404:1)
#loc7 = loc("/usr/include/netinet/in.h":405:40)
#loc8 = loc("/usr/include/sys/socket.h":126:1)
#loc9 = loc("/usr/include/sys/socket.h":126:75)
#loc10 = loc("/usr/include/sys/socket.h":145:1)
#loc11 = loc("/usr/include/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc20 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":133:27)
#loc21 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":57:1)
#loc22 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":137:1)
#loc23 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":59:5)
#loc24 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":59:9)
#loc25 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":61:13)
#loc26 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":61:12)
#loc27 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":61:5)
#loc28 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":62:5)
#loc29 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":120:5)
#loc30 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":62:8)
#loc31 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":62:26)
#loc32 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":63:5)
#loc33 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":64:9)
#loc34 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":119:9)
#loc35 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":69:13)
#loc36 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":69:17)
#loc37 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":70:13)
#loc38 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":70:32)
#loc39 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":71:13)
#loc40 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":71:36)
#loc41 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":72:13)
#loc42 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":72:45)
#loc43 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":73:13)
#loc44 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":108:21)
#loc45 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":83:40)
#loc46 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":83:49)
#loc47 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":83:62)
#loc48 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":83:33)
#loc49 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":83:17)
#loc50 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":83:73)
#loc51 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":84:17)
#loc52 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":87:17)
#loc53 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":84:21)
#loc54 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":84:38)
#loc55 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":85:17)
#loc56 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":86:21)
#loc57 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":88:24)
#loc58 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":88:25)
#loc59 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":88:34)
#loc60 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":88:37)
#loc61 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":88:51)
#loc62 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":88:17)
#loc63 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":88:52)
#loc64 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":89:38)
#loc65 = loc("/usr/include/netinet/in.h":249:5)
#loc66 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":89:17)
#loc67 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":90:43)
#loc68 = loc("/usr/include/netinet/in.h":251:20)
#loc69 = loc("/usr/include/netinet/in.h":33:15)
#loc70 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":90:17)
#loc71 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":90:63)
#loc72 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":91:42)
#loc73 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":91:36)
#loc74 = loc("/usr/include/netinet/in.h":250:15)
#loc75 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":91:17)
#loc76 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":91:50)
#loc77 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":92:17)
#loc78 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":95:17)
#loc79 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":92:29)
#loc80 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":92:62)
#loc81 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":92:63)
#loc82 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":92:72)
#loc83 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":92:86)
#loc84 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":92:21)
#loc85 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":92:92)
#loc86 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":93:17)
#loc87 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":94:21)
#loc88 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":98:35)
#loc89 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":98:50)
#loc90 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":98:63)
#loc91 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":98:81)
#loc92 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":98:84)
#loc93 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":98:30)
#loc94 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":98:17)
#loc95 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":98:85)
#loc96 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":99:17)
#loc97 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":102:17)
#loc98 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":99:21)
#loc99 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":99:35)
#loc100 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":99:48)
#loc101 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":99:51)
#loc102 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":99:65)
#loc103 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":100:17)
#loc104 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":101:21)
#loc105 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":104:43)
#loc106 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":104:29)
#loc107 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":104:17)
#loc108 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":106:29)
#loc109 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":106:24)
#loc110 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":106:17)
#loc111 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":106:40)
#loc112 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":108:20)
#loc113 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":109:13)
#loc114 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":112:13)
#loc115 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":109:17)
#loc116 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":109:34)
#loc117 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":110:13)
#loc118 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":111:30)
#loc119 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":111:17)
#loc120 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":121:5)
#loc121 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":136:5)
#loc122 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":121:8)
#loc123 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":121:26)
#loc124 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":122:5)
#loc125 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":123:9)
#loc126 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":135:9)
#loc127 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":124:13)
#loc128 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":124:34)
#loc129 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":127:13)
#loc130 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":134:13)
#loc131 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":127:17)
#loc132 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":127:25)
#loc133 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":128:13)
#loc134 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":130:13)
#loc135 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":132:13)
#loc136 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":129:37)
#loc137 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":129:30)
#loc138 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":129:17)
#loc139 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":133:17)
#loc140 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":377:1)
#loc141 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":383:1)
#loc142 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":379:5)
#loc143 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":379:14)
#loc144 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":380:5)
#loc145 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":380:14)
#loc146 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":381:5)
#loc147 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":381:14)
#loc148 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":382:5)
#loc149 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":382:14)
#loc150 = loc("/usr/include/stdlib.h":575:1)
#loc151 = loc("/usr/include/stdlib.h":575:41)
#loc152 = loc("/usr/include/time.h":76:1)
#loc153 = loc("/usr/include/time.h":76:38)
#loc154 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":399:15)
#loc155 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":401:15)
#loc156 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":404:15)
#loc157 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":406:15)
#loc158 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":394:1)
#loc159 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":409:1)
#loc164 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":395:1)
#loc165 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":397:27)
#loc166 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":397:22)
#loc167 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":397:5)
#loc168 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":399:5)
#loc169 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":400:5)
#loc170 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":400:59)
#loc171 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":401:5)
#loc172 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":404:5)
#loc173 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":405:5)
#loc174 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":405:58)
#loc175 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":406:5)
#loc176 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":408:12)
#loc177 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":408:5)
#loc178 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":45:1)
#loc179 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":48:1)
#loc180 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":47:12)
#loc181 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":47:5)
#loc182 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":211:19)
#loc183 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":224:27)
#loc184 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":144:1)
#loc185 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":228:1)
#loc186 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":146:5)
#loc187 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":146:9)
#loc188 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":148:13)
#loc189 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":148:12)
#loc190 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":148:5)
#loc191 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":149:5)
#loc192 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":207:5)
#loc193 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":149:8)
#loc194 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":149:26)
#loc195 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":150:5)
#loc196 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":151:9)
#loc197 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":206:9)
#loc198 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":156:13)
#loc199 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":156:17)
#loc200 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":157:13)
#loc201 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":157:32)
#loc202 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":158:13)
#loc203 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":158:36)
#loc204 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":159:13)
#loc205 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":159:45)
#loc206 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":160:13)
#loc207 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":195:21)
#loc208 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":170:40)
#loc209 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":170:49)
#loc210 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":170:62)
#loc211 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":170:33)
#loc212 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":170:17)
#loc213 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":170:73)
#loc214 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":171:17)
#loc215 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":174:17)
#loc216 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":171:21)
#loc217 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":171:38)
#loc218 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":172:17)
#loc219 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":173:21)
#loc220 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":175:24)
#loc221 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":175:25)
#loc222 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":175:34)
#loc223 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":175:37)
#loc224 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":175:51)
#loc225 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":175:17)
#loc226 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":175:52)
#loc227 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":176:38)
#loc228 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":176:17)
#loc229 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":177:53)
#loc230 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":177:43)
#loc231 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":177:17)
#loc232 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":177:63)
#loc233 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":178:42)
#loc234 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":178:36)
#loc235 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":178:17)
#loc236 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":178:50)
#loc237 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":179:17)
#loc238 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":182:17)
#loc239 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":179:29)
#loc240 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":179:62)
#loc241 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":179:63)
#loc242 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":179:72)
#loc243 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":179:86)
#loc244 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":179:21)
#loc245 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":179:92)
#loc246 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":180:17)
#loc247 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":181:21)
#loc248 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":185:35)
#loc249 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":185:50)
#loc250 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":185:63)
#loc251 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":185:81)
#loc252 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":185:84)
#loc253 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":185:30)
#loc254 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":185:17)
#loc255 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":185:85)
#loc256 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":186:17)
#loc257 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":189:17)
#loc258 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":186:21)
#loc259 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":186:35)
#loc260 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":186:48)
#loc261 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":186:51)
#loc262 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":186:65)
#loc263 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":187:17)
#loc264 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":188:21)
#loc265 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":191:43)
#loc266 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":191:29)
#loc267 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":191:17)
#loc268 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":193:29)
#loc269 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":193:24)
#loc270 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":193:17)
#loc271 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":193:40)
#loc272 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":195:20)
#loc273 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":196:13)
#loc274 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":199:13)
#loc275 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":196:17)
#loc276 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":196:34)
#loc277 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":197:13)
#loc278 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":198:30)
#loc279 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":198:17)
#loc280 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":208:5)
#loc281 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":227:5)
#loc282 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":208:8)
#loc283 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":208:27)
#loc284 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":209:5)
#loc285 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":212:5)
#loc286 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":214:5)
#loc287 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":211:9)
#loc288 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":215:9)
#loc289 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":226:9)
#loc290 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":216:13)
#loc291 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":216:34)
#loc292 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":218:13)
#loc293 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":225:13)
#loc294 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":218:17)
#loc295 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":218:25)
#loc296 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":218:27)
#loc297 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":218:30)
#loc298 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":218:38)
#loc299 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":218:40)
#loc300 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":219:13)
#loc301 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":221:13)
#loc302 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":223:13)
#loc303 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":220:37)
#loc304 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":220:30)
#loc305 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":220:17)
#loc306 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":224:17)
#loc307 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":50:1)
#loc308 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":53:1)
#loc309 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":52:12)
#loc310 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":52:5)
#loc311 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":231:1)
#loc312 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":310:1)
#loc313 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":233:5)
#loc314 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":233:9)
#loc315 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":235:13)
#loc316 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":235:12)
#loc317 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":235:5)
#loc318 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":236:5)
#loc319 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":294:5)
#loc320 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":236:8)
#loc321 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":236:26)
#loc322 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":237:5)
#loc323 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":238:9)
#loc324 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":293:9)
#loc325 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":243:13)
#loc326 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":243:17)
#loc327 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":244:13)
#loc328 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":244:32)
#loc329 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":245:13)
#loc330 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":245:36)
#loc331 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":246:13)
#loc332 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":246:45)
#loc333 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":247:13)
#loc334 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":282:21)
#loc335 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":257:40)
#loc336 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":257:49)
#loc337 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":257:62)
#loc338 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":257:33)
#loc339 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":257:17)
#loc340 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":257:73)
#loc341 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":258:17)
#loc342 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":261:17)
#loc343 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":258:21)
#loc344 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":258:38)
#loc345 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":259:17)
#loc346 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":260:21)
#loc347 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":262:24)
#loc348 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":262:25)
#loc349 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":262:34)
#loc350 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":262:37)
#loc351 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":262:51)
#loc352 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":262:17)
#loc353 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":262:52)
#loc354 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":263:38)
#loc355 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":263:17)
#loc356 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":264:53)
#loc357 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":264:43)
#loc358 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":264:17)
#loc359 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":264:63)
#loc360 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":265:42)
#loc361 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":265:36)
#loc362 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":265:17)
#loc363 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":265:50)
#loc364 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":266:17)
#loc365 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":269:17)
#loc366 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":266:29)
#loc367 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":266:62)
#loc368 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":266:63)
#loc369 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":266:72)
#loc370 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":266:86)
#loc371 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":266:21)
#loc372 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":266:92)
#loc373 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":267:17)
#loc374 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":268:21)
#loc375 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":272:35)
#loc376 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":272:50)
#loc377 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":272:63)
#loc378 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":272:81)
#loc379 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":272:84)
#loc380 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":272:30)
#loc381 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":272:17)
#loc382 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":272:85)
#loc383 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":273:17)
#loc384 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":276:17)
#loc385 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":273:21)
#loc386 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":273:35)
#loc387 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":273:48)
#loc388 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":273:51)
#loc389 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":273:65)
#loc390 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":274:17)
#loc391 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":275:21)
#loc392 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":278:43)
#loc393 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":278:29)
#loc394 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":278:17)
#loc395 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":280:29)
#loc396 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":280:24)
#loc397 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":280:17)
#loc398 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":280:40)
#loc399 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":282:20)
#loc400 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":283:13)
#loc401 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":286:13)
#loc402 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":283:17)
#loc403 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":283:34)
#loc404 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":284:13)
#loc405 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":285:30)
#loc406 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":285:17)
#loc407 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":295:5)
#loc408 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":309:5)
#loc409 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":295:8)
#loc410 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":295:26)
#loc411 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":296:5)
#loc412 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":297:9)
#loc413 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":308:9)
#loc414 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":298:13)
#loc415 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":298:34)
#loc416 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":300:13)
#loc417 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":307:13)
#loc418 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":300:17)
#loc419 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":300:25)
#loc420 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":300:27)
#loc421 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":300:30)
#loc422 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":300:38)
#loc423 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":300:40)
#loc424 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":301:13)
#loc425 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":303:13)
#loc426 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":305:13)
#loc427 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":302:37)
#loc428 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":302:30)
#loc429 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":302:17)
#loc430 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":306:27)
#loc431 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":306:17)
#loc432 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":313:1)
#loc433 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":345:1)
#loc434 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":315:5)
#loc435 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":315:9)
#loc436 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":317:13)
#loc437 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":317:12)
#loc438 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":317:5)
#loc439 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":318:5)
#loc440 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":328:5)
#loc441 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":318:8)
#loc442 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":318:27)
#loc443 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":319:5)
#loc444 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":322:5)
#loc445 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":324:5)
#loc446 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":321:19)
#loc447 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":321:9)
#loc448 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":327:16)
#loc449 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":327:9)
#loc450 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":329:5)
#loc451 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":344:5)
#loc452 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":329:8)
#loc453 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":329:26)
#loc454 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":330:5)
#loc455 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":331:9)
#loc456 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":343:9)
#loc457 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":332:13)
#loc458 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":332:34)
#loc459 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":335:13)
#loc460 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":342:13)
#loc461 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":335:17)
#loc462 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":335:25)
#loc463 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":336:13)
#loc464 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":338:13)
#loc465 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":340:13)
#loc466 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":337:37)
#loc467 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":337:30)
#loc468 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":337:17)
#loc469 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":341:27)
#loc470 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":341:17)
#loc471 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":348:1)
#loc472 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":375:1)
#loc473 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":350:5)
#loc474 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":350:9)
#loc475 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":352:13)
#loc476 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":352:12)
#loc477 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":352:5)
#loc478 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":353:5)
#loc479 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":358:5)
#loc480 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":353:8)
#loc481 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":353:26)
#loc482 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":354:5)
#loc483 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":357:16)
#loc484 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":357:9)
#loc485 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":359:5)
#loc486 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":374:5)
#loc487 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":359:8)
#loc488 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":359:26)
#loc489 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":360:5)
#loc490 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":361:9)
#loc491 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":373:9)
#loc492 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":362:13)
#loc493 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":362:34)
#loc494 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":365:13)
#loc495 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":372:13)
#loc496 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":365:17)
#loc497 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":365:25)
#loc498 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":366:13)
#loc499 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":368:13)
#loc500 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":370:13)
#loc501 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":367:37)
#loc502 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":367:30)
#loc503 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":367:17)
#loc504 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":371:27)
#loc505 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_08.c":371:17)
#loc506 = loc(fused[#loc1, #loc2])
#loc507 = loc(fused[#loc3, #loc4])
#loc508 = loc(fused[#loc6, #loc7])
#loc509 = loc(fused[#loc8, #loc9])
#loc510 = loc(fused[#loc10, #loc11])
#loc511 = loc(fused[#loc12, #loc13])
#loc512 = loc(fused[#loc14, #loc15])
#loc513 = loc(fused[#loc16, #loc17])
#loc514 = loc(fused[#loc18, #loc19])
#loc515 = loc(fused[#loc21, #loc22])
#loc516 = loc(fused[#loc23, #loc24])
#loc517 = loc(fused[#loc27, #loc25])
#loc518 = loc(fused[#loc28, #loc29])
#loc519 = loc(fused[#loc30, #loc31])
#loc520 = loc(fused[#loc32, #loc29])
#loc521 = loc(fused[#loc33, #loc34])
#loc522 = loc(fused[#loc35, #loc36])
#loc523 = loc(fused[#loc37, #loc38])
#loc524 = loc(fused[#loc39, #loc40])
#loc525 = loc(fused[#loc41, #loc42])
#loc526 = loc(fused[#loc43, #loc44])
#loc527 = loc(fused[#loc49, #loc50])
#loc528 = loc(fused[#loc51, #loc52])
#loc529 = loc(fused[#loc53, #loc54])
#loc530 = loc(fused[#loc55, #loc52])
#loc531 = loc(fused[#loc57, #loc58])
#loc532 = loc(fused[#loc60, #loc61])
#loc533 = loc(fused[#loc62, #loc63])
#loc534 = loc(fused[#loc66, #loc64])
#loc535 = loc(fused[#loc70, #loc71])
#loc536 = loc(fused[#loc75, #loc76])
#loc537 = loc(fused[#loc77, #loc78])
#loc538 = loc(fused[#loc80, #loc81])
#loc539 = loc(fused[#loc82, #loc83])
#loc540 = loc(fused[#loc84, #loc85])
#loc541 = loc(fused[#loc86, #loc78])
#loc542 = loc(fused[#loc90, #loc91])
#loc543 = loc(fused[#loc94, #loc95])
#loc544 = loc(fused[#loc96, #loc97])
#loc545 = loc(fused[#loc98, #loc99])
#loc546 = loc(fused[#loc101, #loc102])
#loc547 = loc(fused[#loc103, #loc97])
#loc548 = loc(fused[#loc107, #loc105])
#loc549 = loc(fused[#loc110, #loc111])
#loc550 = loc(fused[#loc113, #loc114])
#loc551 = loc(fused[#loc115, #loc116])
#loc552 = loc(fused[#loc117, #loc114])
#loc553 = loc(fused[#loc120, #loc121])
#loc554 = loc(fused[#loc122, #loc123])
#loc555 = loc(fused[#loc124, #loc121])
#loc556 = loc(fused[#loc125, #loc126])
#loc557 = loc(fused[#loc127, #loc128])
#loc558 = loc(fused[#loc129, #loc130])
#loc559 = loc(fused[#loc131, #loc132])
#loc560 = loc(fused[#loc133, #loc134, #loc135, #loc130])
#loc561 = loc(fused[#loc140, #loc141])
#loc562 = loc(fused[#loc142, #loc143])
#loc563 = loc(fused[#loc144, #loc145])
#loc564 = loc(fused[#loc146, #loc147])
#loc565 = loc(fused[#loc148, #loc149])
#loc566 = loc(fused[#loc150, #loc151])
#loc567 = loc(fused[#loc152, #loc153])
#loc568 = loc(fused[#loc158, #loc159])
#loc571 = loc(fused[#loc169, #loc170])
#loc572 = loc(fused[#loc173, #loc174])
#loc573 = loc(fused[#loc177, #loc176])
#loc574 = loc(fused[#loc178, #loc179])
#loc575 = loc(fused[#loc181, #loc180])
#loc576 = loc(fused[#loc184, #loc185])
#loc577 = loc(fused[#loc186, #loc187])
#loc578 = loc(fused[#loc190, #loc188])
#loc579 = loc(fused[#loc191, #loc192])
#loc580 = loc(fused[#loc193, #loc194])
#loc581 = loc(fused[#loc195, #loc192])
#loc582 = loc(fused[#loc196, #loc197])
#loc583 = loc(fused[#loc198, #loc199])
#loc584 = loc(fused[#loc200, #loc201])
#loc585 = loc(fused[#loc202, #loc203])
#loc586 = loc(fused[#loc204, #loc205])
#loc587 = loc(fused[#loc206, #loc207])
#loc588 = loc(fused[#loc212, #loc213])
#loc589 = loc(fused[#loc214, #loc215])
#loc590 = loc(fused[#loc216, #loc217])
#loc591 = loc(fused[#loc218, #loc215])
#loc592 = loc(fused[#loc220, #loc221])
#loc593 = loc(fused[#loc223, #loc224])
#loc594 = loc(fused[#loc225, #loc226])
#loc595 = loc(fused[#loc228, #loc227])
#loc596 = loc(fused[#loc231, #loc232])
#loc597 = loc(fused[#loc235, #loc236])
#loc598 = loc(fused[#loc237, #loc238])
#loc599 = loc(fused[#loc240, #loc241])
#loc600 = loc(fused[#loc242, #loc243])
#loc601 = loc(fused[#loc244, #loc245])
#loc602 = loc(fused[#loc246, #loc238])
#loc603 = loc(fused[#loc250, #loc251])
#loc604 = loc(fused[#loc254, #loc255])
#loc605 = loc(fused[#loc256, #loc257])
#loc606 = loc(fused[#loc258, #loc259])
#loc607 = loc(fused[#loc261, #loc262])
#loc608 = loc(fused[#loc263, #loc257])
#loc609 = loc(fused[#loc267, #loc265])
#loc610 = loc(fused[#loc270, #loc271])
#loc611 = loc(fused[#loc273, #loc274])
#loc612 = loc(fused[#loc275, #loc276])
#loc613 = loc(fused[#loc277, #loc274])
#loc614 = loc(fused[#loc280, #loc281])
#loc615 = loc(fused[#loc282, #loc283])
#loc616 = loc(fused[#loc284, #loc285, #loc286, #loc281])
#loc617 = loc(fused[#loc288, #loc289])
#loc618 = loc(fused[#loc290, #loc291])
#loc619 = loc(fused[#loc292, #loc293])
#loc620 = loc(fused[#loc294, #loc295])
#loc621 = loc(fused[#loc297, #loc299])
#loc622 = loc(fused[#loc300, #loc301, #loc302, #loc293])
#loc623 = loc(fused[#loc307, #loc308])
#loc624 = loc(fused[#loc310, #loc309])
#loc625 = loc(fused[#loc311, #loc312])
#loc626 = loc(fused[#loc313, #loc314])
#loc627 = loc(fused[#loc317, #loc315])
#loc628 = loc(fused[#loc318, #loc319])
#loc629 = loc(fused[#loc320, #loc321])
#loc630 = loc(fused[#loc322, #loc319])
#loc631 = loc(fused[#loc323, #loc324])
#loc632 = loc(fused[#loc325, #loc326])
#loc633 = loc(fused[#loc327, #loc328])
#loc634 = loc(fused[#loc329, #loc330])
#loc635 = loc(fused[#loc331, #loc332])
#loc636 = loc(fused[#loc333, #loc334])
#loc637 = loc(fused[#loc339, #loc340])
#loc638 = loc(fused[#loc341, #loc342])
#loc639 = loc(fused[#loc343, #loc344])
#loc640 = loc(fused[#loc345, #loc342])
#loc641 = loc(fused[#loc347, #loc348])
#loc642 = loc(fused[#loc350, #loc351])
#loc643 = loc(fused[#loc352, #loc353])
#loc644 = loc(fused[#loc355, #loc354])
#loc645 = loc(fused[#loc358, #loc359])
#loc646 = loc(fused[#loc362, #loc363])
#loc647 = loc(fused[#loc364, #loc365])
#loc648 = loc(fused[#loc367, #loc368])
#loc649 = loc(fused[#loc369, #loc370])
#loc650 = loc(fused[#loc371, #loc372])
#loc651 = loc(fused[#loc373, #loc365])
#loc652 = loc(fused[#loc377, #loc378])
#loc653 = loc(fused[#loc381, #loc382])
#loc654 = loc(fused[#loc383, #loc384])
#loc655 = loc(fused[#loc385, #loc386])
#loc656 = loc(fused[#loc388, #loc389])
#loc657 = loc(fused[#loc390, #loc384])
#loc658 = loc(fused[#loc394, #loc392])
#loc659 = loc(fused[#loc397, #loc398])
#loc660 = loc(fused[#loc400, #loc401])
#loc661 = loc(fused[#loc402, #loc403])
#loc662 = loc(fused[#loc404, #loc401])
#loc663 = loc(fused[#loc407, #loc408])
#loc664 = loc(fused[#loc409, #loc410])
#loc665 = loc(fused[#loc411, #loc408])
#loc666 = loc(fused[#loc412, #loc413])
#loc667 = loc(fused[#loc414, #loc415])
#loc668 = loc(fused[#loc416, #loc417])
#loc669 = loc(fused[#loc418, #loc419])
#loc670 = loc(fused[#loc421, #loc423])
#loc671 = loc(fused[#loc424, #loc425, #loc426, #loc417])
#loc672 = loc(fused[#loc432, #loc433])
#loc673 = loc(fused[#loc434, #loc435])
#loc674 = loc(fused[#loc438, #loc436])
#loc675 = loc(fused[#loc439, #loc440])
#loc676 = loc(fused[#loc441, #loc442])
#loc677 = loc(fused[#loc443, #loc444, #loc445, #loc440])
#loc678 = loc(fused[#loc449, #loc448])
#loc679 = loc(fused[#loc450, #loc451])
#loc680 = loc(fused[#loc452, #loc453])
#loc681 = loc(fused[#loc454, #loc451])
#loc682 = loc(fused[#loc455, #loc456])
#loc683 = loc(fused[#loc457, #loc458])
#loc684 = loc(fused[#loc459, #loc460])
#loc685 = loc(fused[#loc461, #loc462])
#loc686 = loc(fused[#loc463, #loc464, #loc465, #loc460])
#loc687 = loc(fused[#loc471, #loc472])
#loc688 = loc(fused[#loc473, #loc474])
#loc689 = loc(fused[#loc477, #loc475])
#loc690 = loc(fused[#loc478, #loc479])
#loc691 = loc(fused[#loc480, #loc481])
#loc692 = loc(fused[#loc482, #loc479])
#loc693 = loc(fused[#loc484, #loc483])
#loc694 = loc(fused[#loc485, #loc486])
#loc695 = loc(fused[#loc487, #loc488])
#loc696 = loc(fused[#loc489, #loc486])
#loc697 = loc(fused[#loc490, #loc491])
#loc698 = loc(fused[#loc492, #loc493])
#loc699 = loc(fused[#loc494, #loc495])
#loc700 = loc(fused[#loc496, #loc497])
#loc701 = loc(fused[#loc498, #loc499, #loc500, #loc495])
