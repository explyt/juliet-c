!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int64_t_calloc_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc210)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc211)
  cir.func private  @printLongLongLine(!s64i) loc(#loc212)
  cir.func no_proto  @CWE401_Memory_Leak__int64_t_calloc_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc214)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc215)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc217)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc15)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
      cir.if %4 {
        %5 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc18)
        %6 = cir.const #cir.int<100> : !s32i loc(#loc19)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc19)
        %8 = cir.const #cir.int<8> : !u64i loc(#loc219)
        %9 = cir.call @calloc(%7, %8) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc18)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc220)
        cir.store %10, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc221)
        cir.scope {
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc26)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc27)
          %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s64i>, !s32i loc(#loc223)
          %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc28)
          cir.if %23 {
            %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc31)
            %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc32)
            cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
          } loc(#loc224)
        } loc(#loc222)
        %11 = cir.const #cir.int<5> : !s64i loc(#loc33)
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc34)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc35)
        %14 = cir.ptr_stride(%12 : !cir.ptr<!s64i>, %13 : !s32i), !cir.ptr<!s64i> loc(#loc36)
        cir.store %11, %14 : !s64i, !cir.ptr<!s64i> loc(#loc225)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc37)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc38)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s64i>, %16 : !s32i), !cir.ptr<!s64i> loc(#loc39)
        %18 = cir.load %17 : !cir.ptr<!s64i>, !s64i loc(#loc37)
        cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc40)
      } loc(#loc218)
    } loc(#loc216)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc227)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc43)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc43)
      cir.if %4 {
      } loc(#loc228)
    } loc(#loc226)
    cir.return loc(#loc8)
  } loc(#loc213)
  cir.func no_proto  @CWE401_Memory_Leak__int64_t_calloc_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc230)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc231)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc232)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc233)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    cir.return loc(#loc47)
  } loc(#loc229)
  cir.func no_proto internal private  @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc57)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc58)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc235)
    cir.return %2 : !s32i loc(#loc235)
  } loc(#loc234)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc236)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc62)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc237)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc239)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc69)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc240)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc242)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc73)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc73)
      cir.if %4 {
        %5 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc76)
        %6 = cir.const #cir.int<100> : !s32i loc(#loc77)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc77)
        %8 = cir.const #cir.int<8> : !u64i loc(#loc244)
        %9 = cir.call @calloc(%7, %8) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc76)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc245)
        cir.store %10, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc246)
        cir.scope {
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc84)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc85)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc85)
          %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s64i>, !s32i loc(#loc248)
          %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc86)
          cir.if %23 {
            %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc88)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc89)
            %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc90)
            cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc88)
          } loc(#loc249)
        } loc(#loc247)
        %11 = cir.const #cir.int<5> : !s64i loc(#loc91)
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc92)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc93)
        %14 = cir.ptr_stride(%12 : !cir.ptr<!s64i>, %13 : !s32i), !cir.ptr<!s64i> loc(#loc94)
        cir.store %11, %14 : !s64i, !cir.ptr<!s64i> loc(#loc250)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc95)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc96)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s64i>, %16 : !s32i), !cir.ptr<!s64i> loc(#loc97)
        %18 = cir.load %17 : !cir.ptr<!s64i>, !s64i loc(#loc95)
        cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc98)
      } loc(#loc243)
    } loc(#loc241)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc252)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc101)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc101)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc62)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc62)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc106)
      } else {
        %5 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc107)
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc108)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc108)
        cir.call @free(%7) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc107)
      } loc(#loc253)
    } loc(#loc251)
    cir.return loc(#loc66)
  } loc(#loc238)
  cir.func no_proto internal private  @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc110)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc111)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc255)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc255)
    cir.return %2 : !s32i loc(#loc255)
  } loc(#loc254)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc257)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc117)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc258)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc260)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc121)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc121)
      cir.if %4 {
        %5 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc124)
        %6 = cir.const #cir.int<100> : !s32i loc(#loc125)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc125)
        %8 = cir.const #cir.int<8> : !u64i loc(#loc262)
        %9 = cir.call @calloc(%7, %8) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc124)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc263)
        cir.store %10, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc264)
        cir.scope {
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc132)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc133)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc133)
          %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s64i>, !s32i loc(#loc266)
          %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc134)
          cir.if %23 {
            %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc136)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc137)
            %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc138)
            cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc136)
          } loc(#loc267)
        } loc(#loc265)
        %11 = cir.const #cir.int<5> : !s64i loc(#loc139)
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc140)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc141)
        %14 = cir.ptr_stride(%12 : !cir.ptr<!s64i>, %13 : !s32i), !cir.ptr<!s64i> loc(#loc142)
        cir.store %11, %14 : !s64i, !cir.ptr<!s64i> loc(#loc268)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc143)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc144)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s64i>, %16 : !s32i), !cir.ptr<!s64i> loc(#loc145)
        %18 = cir.load %17 : !cir.ptr<!s64i>, !s64i loc(#loc143)
        cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc146)
      } loc(#loc261)
    } loc(#loc259)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc270)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc149)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc149)
      cir.if %4 {
        %5 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc152)
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc153)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc153)
        cir.call @free(%7) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc152)
      } loc(#loc271)
    } loc(#loc269)
    cir.return loc(#loc114)
  } loc(#loc256)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc273)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc158)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc274)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc276)
      %3 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc162)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc162)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc167)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc167)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc168)
      } else {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc169)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc169)
        %7 = cir.const #cir.int<8> : !u64i loc(#loc169)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc169)
        %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc169)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc169)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc169)
        cir.store %11, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc278)
        %12 = cir.const #cir.int<5> : !s64i loc(#loc171)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc172)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc173)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s64i>, %14 : !s32i), !cir.ptr<!s64i> loc(#loc174)
        cir.store %12, %15 : !s64i, !cir.ptr<!s64i> loc(#loc279)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc175)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc176)
        %18 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %17 : !s32i), !cir.ptr<!s64i> loc(#loc177)
        %19 = cir.load %18 : !cir.ptr<!s64i>, !s64i loc(#loc175)
        cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc178)
      } loc(#loc277)
    } loc(#loc275)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc281)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc181)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc181)
      cir.if %4 {
      } loc(#loc282)
    } loc(#loc280)
    cir.return loc(#loc155)
  } loc(#loc272)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc284)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc188)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc285)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc287)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc192)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc192)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc195)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc195)
        %7 = cir.const #cir.int<8> : !u64i loc(#loc195)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc195)
        %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc195)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc195)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc195)
        cir.store %11, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc289)
        %12 = cir.const #cir.int<5> : !s64i loc(#loc197)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc198)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc199)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s64i>, %14 : !s32i), !cir.ptr<!s64i> loc(#loc200)
        cir.store %12, %15 : !s64i, !cir.ptr<!s64i> loc(#loc290)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc201)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc202)
        %18 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %17 : !s32i), !cir.ptr<!s64i> loc(#loc203)
        %19 = cir.load %18 : !cir.ptr<!s64i>, !s64i loc(#loc201)
        cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc204)
      } loc(#loc288)
    } loc(#loc286)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc292)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc207)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc207)
      cir.if %4 {
      } loc(#loc293)
    } loc(#loc291)
    cir.return loc(#loc185)
  } loc(#loc283)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int64_t_calloc_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":675:1)
#loc2 = loc("/usr/include/stdlib.h":676:14)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":37:1)
#loc8 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":55:1)
#loc9 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":39:5)
#loc10 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":39:15)
#loc11 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":40:12)
#loc12 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":40:5)
#loc13 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":41:5)
#loc14 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":49:5)
#loc15 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":41:8)
#loc16 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":41:26)
#loc17 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":42:5)
#loc18 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":44:27)
#loc19 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":44:34)
#loc20 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":44:39)
#loc21 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":44:53)
#loc22 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":44:54)
#loc23 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":44:9)
#loc24 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":45:9)
#loc25 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":45:37)
#loc26 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":45:13)
#loc27 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":45:21)
#loc28 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":45:18)
#loc29 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":45:27)
#loc30 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":45:28)
#loc31 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":45:34)
#loc32 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":45:33)
#loc33 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":47:19)
#loc34 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":47:9)
#loc35 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":47:14)
#loc36 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":47:15)
#loc37 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":48:27)
#loc38 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":48:32)
#loc39 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":48:33)
#loc40 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":48:9)
#loc41 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":50:5)
#loc42 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":54:5)
#loc43 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":50:8)
#loc44 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":50:26)
#loc45 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":51:5)
#loc46 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":153:1)
#loc47 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":159:1)
#loc48 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":155:5)
#loc49 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":155:14)
#loc50 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":156:5)
#loc51 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":156:14)
#loc52 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":157:5)
#loc53 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":157:14)
#loc54 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":158:5)
#loc55 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":158:14)
#loc56 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":25:1)
#loc57 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":28:1)
#loc58 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":27:12)
#loc59 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":27:5)
#loc60 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc61 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc62 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":78:19)
#loc63 = loc("/usr/include/stdlib.h":687:1)
#loc64 = loc("/usr/include/stdlib.h":687:32)
#loc65 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":62:1)
#loc66 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":85:1)
#loc67 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":64:5)
#loc68 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":64:15)
#loc69 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":65:12)
#loc70 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":65:5)
#loc71 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":66:5)
#loc72 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":74:5)
#loc73 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":66:8)
#loc74 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":66:26)
#loc75 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":67:5)
#loc76 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":69:27)
#loc77 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":69:34)
#loc78 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":69:39)
#loc79 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":69:53)
#loc80 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":69:54)
#loc81 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":69:9)
#loc82 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":70:9)
#loc83 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":70:37)
#loc84 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":70:13)
#loc85 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":70:21)
#loc86 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":70:18)
#loc87 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":70:27)
#loc88 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":70:28)
#loc89 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":70:34)
#loc90 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":70:33)
#loc91 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":72:19)
#loc92 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":72:9)
#loc93 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":72:14)
#loc94 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":72:15)
#loc95 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":73:27)
#loc96 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":73:32)
#loc97 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":73:33)
#loc98 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":73:9)
#loc99 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":75:5)
#loc100 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":84:5)
#loc101 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":75:8)
#loc102 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":75:27)
#loc103 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":76:5)
#loc104 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":79:5)
#loc105 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":81:5)
#loc106 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":78:9)
#loc107 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":83:9)
#loc108 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":83:14)
#loc109 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":30:1)
#loc110 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":33:1)
#loc111 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":32:12)
#loc112 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":32:5)
#loc113 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":88:1)
#loc114 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":106:1)
#loc115 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":90:5)
#loc116 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":90:15)
#loc117 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":91:12)
#loc118 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":91:5)
#loc119 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":92:5)
#loc120 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":100:5)
#loc121 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":92:8)
#loc122 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":92:26)
#loc123 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":93:5)
#loc124 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":95:27)
#loc125 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":95:34)
#loc126 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":95:39)
#loc127 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":95:53)
#loc128 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":95:54)
#loc129 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":95:9)
#loc130 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":96:9)
#loc131 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":96:37)
#loc132 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":96:13)
#loc133 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":96:21)
#loc134 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":96:18)
#loc135 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":96:27)
#loc136 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":96:28)
#loc137 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":96:34)
#loc138 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":96:33)
#loc139 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":98:19)
#loc140 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":98:9)
#loc141 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":98:14)
#loc142 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":98:15)
#loc143 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":99:27)
#loc144 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":99:32)
#loc145 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":99:33)
#loc146 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":99:9)
#loc147 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":101:5)
#loc148 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":105:5)
#loc149 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":101:8)
#loc150 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":101:26)
#loc151 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":102:5)
#loc152 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":104:9)
#loc153 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":104:14)
#loc154 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":109:1)
#loc155 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":131:1)
#loc156 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":111:5)
#loc157 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":111:15)
#loc158 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":112:12)
#loc159 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":112:5)
#loc160 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":113:5)
#loc161 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":125:5)
#loc162 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":113:8)
#loc163 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":113:27)
#loc164 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":114:5)
#loc165 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":117:5)
#loc166 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":119:5)
#loc167 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":116:19)
#loc168 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":116:9)
#loc169 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":121:27)
#loc170 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":121:9)
#loc171 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":123:19)
#loc172 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":123:9)
#loc173 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":123:14)
#loc174 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":123:15)
#loc175 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":124:27)
#loc176 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":124:32)
#loc177 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":124:33)
#loc178 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":124:9)
#loc179 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":126:5)
#loc180 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":130:5)
#loc181 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":126:8)
#loc182 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":126:26)
#loc183 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":127:5)
#loc184 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":134:1)
#loc185 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":151:1)
#loc186 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":136:5)
#loc187 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":136:15)
#loc188 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":137:12)
#loc189 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":137:5)
#loc190 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":138:5)
#loc191 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":145:5)
#loc192 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":138:8)
#loc193 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":138:26)
#loc194 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":139:5)
#loc195 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":141:27)
#loc196 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":141:9)
#loc197 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":143:19)
#loc198 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":143:9)
#loc199 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":143:14)
#loc200 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":143:15)
#loc201 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":144:27)
#loc202 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":144:32)
#loc203 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":144:33)
#loc204 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":144:9)
#loc205 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":146:5)
#loc206 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":150:5)
#loc207 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":146:8)
#loc208 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":146:26)
#loc209 = loc("CWE401_Memory_Leak__int64_t_calloc_08.c":147:5)
#loc210 = loc(fused[#loc1, #loc2])
#loc211 = loc(fused[#loc3, #loc4])
#loc212 = loc(fused[#loc5, #loc6])
#loc213 = loc(fused[#loc7, #loc8])
#loc214 = loc(fused[#loc9, #loc10])
#loc215 = loc(fused[#loc12, #loc11])
#loc216 = loc(fused[#loc13, #loc14])
#loc217 = loc(fused[#loc15, #loc16])
#loc218 = loc(fused[#loc17, #loc14])
#loc219 = loc(fused[#loc20, #loc21])
#loc220 = loc(fused[#loc18, #loc22])
#loc221 = loc(fused[#loc23, #loc22])
#loc222 = loc(fused[#loc24, #loc25])
#loc223 = loc(fused[#loc26, #loc27])
#loc224 = loc(fused[#loc29, #loc25])
#loc225 = loc(fused[#loc34, #loc33])
#loc226 = loc(fused[#loc41, #loc42])
#loc227 = loc(fused[#loc43, #loc44])
#loc228 = loc(fused[#loc45, #loc42])
#loc229 = loc(fused[#loc46, #loc47])
#loc230 = loc(fused[#loc48, #loc49])
#loc231 = loc(fused[#loc50, #loc51])
#loc232 = loc(fused[#loc52, #loc53])
#loc233 = loc(fused[#loc54, #loc55])
#loc234 = loc(fused[#loc56, #loc57])
#loc235 = loc(fused[#loc59, #loc58])
#loc236 = loc(fused[#loc60, #loc61])
#loc237 = loc(fused[#loc63, #loc64])
#loc238 = loc(fused[#loc65, #loc66])
#loc239 = loc(fused[#loc67, #loc68])
#loc240 = loc(fused[#loc70, #loc69])
#loc241 = loc(fused[#loc71, #loc72])
#loc242 = loc(fused[#loc73, #loc74])
#loc243 = loc(fused[#loc75, #loc72])
#loc244 = loc(fused[#loc78, #loc79])
#loc245 = loc(fused[#loc76, #loc80])
#loc246 = loc(fused[#loc81, #loc80])
#loc247 = loc(fused[#loc82, #loc83])
#loc248 = loc(fused[#loc84, #loc85])
#loc249 = loc(fused[#loc87, #loc83])
#loc250 = loc(fused[#loc92, #loc91])
#loc251 = loc(fused[#loc99, #loc100])
#loc252 = loc(fused[#loc101, #loc102])
#loc253 = loc(fused[#loc103, #loc104, #loc105, #loc100])
#loc254 = loc(fused[#loc109, #loc110])
#loc255 = loc(fused[#loc112, #loc111])
#loc256 = loc(fused[#loc113, #loc114])
#loc257 = loc(fused[#loc115, #loc116])
#loc258 = loc(fused[#loc118, #loc117])
#loc259 = loc(fused[#loc119, #loc120])
#loc260 = loc(fused[#loc121, #loc122])
#loc261 = loc(fused[#loc123, #loc120])
#loc262 = loc(fused[#loc126, #loc127])
#loc263 = loc(fused[#loc124, #loc128])
#loc264 = loc(fused[#loc129, #loc128])
#loc265 = loc(fused[#loc130, #loc131])
#loc266 = loc(fused[#loc132, #loc133])
#loc267 = loc(fused[#loc135, #loc131])
#loc268 = loc(fused[#loc140, #loc139])
#loc269 = loc(fused[#loc147, #loc148])
#loc270 = loc(fused[#loc149, #loc150])
#loc271 = loc(fused[#loc151, #loc148])
#loc272 = loc(fused[#loc154, #loc155])
#loc273 = loc(fused[#loc156, #loc157])
#loc274 = loc(fused[#loc159, #loc158])
#loc275 = loc(fused[#loc160, #loc161])
#loc276 = loc(fused[#loc162, #loc163])
#loc277 = loc(fused[#loc164, #loc165, #loc166, #loc161])
#loc278 = loc(fused[#loc170, #loc169])
#loc279 = loc(fused[#loc172, #loc171])
#loc280 = loc(fused[#loc179, #loc180])
#loc281 = loc(fused[#loc181, #loc182])
#loc282 = loc(fused[#loc183, #loc180])
#loc283 = loc(fused[#loc184, #loc185])
#loc284 = loc(fused[#loc186, #loc187])
#loc285 = loc(fused[#loc189, #loc188])
#loc286 = loc(fused[#loc190, #loc191])
#loc287 = loc(fused[#loc192, #loc193])
#loc288 = loc(fused[#loc194, #loc191])
#loc289 = loc(fused[#loc196, #loc195])
#loc290 = loc(fused[#loc198, #loc197])
#loc291 = loc(fused[#loc205, #loc206])
#loc292 = loc(fused[#loc207, #loc208])
#loc293 = loc(fused[#loc209, #loc206])
