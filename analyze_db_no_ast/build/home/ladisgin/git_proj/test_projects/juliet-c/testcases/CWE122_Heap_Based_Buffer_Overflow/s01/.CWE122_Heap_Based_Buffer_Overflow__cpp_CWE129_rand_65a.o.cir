!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_657badSinkEi(!s32i) loc(#loc52)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc53)
  cir.func  @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_653badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc55)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc56)
    %2 = cir.get_global @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_657badSinkEi : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc10)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc56)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc12)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc14)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc14)
    %9 = cir.ternary(%8, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc14)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc14)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc14)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc14)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc14)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc14)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc14)
      cir.yield %24 : !u32i loc(#loc14)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc14)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc14)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc14)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc14)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc14)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc14)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc14)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc14)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc14)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc14)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc14)
      cir.yield %28 : !u32i loc(#loc14)
    }) : (!cir.bool) -> !u32i loc(#loc14)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc14)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc58)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc16)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    cir.call %11(%12) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc16)
    cir.return loc(#loc6)
  } loc(#loc54)
  cir.func private  @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_6511goodG2BSinkEi(!s32i) loc(#loc59)
  cir.func internal private  @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc61)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc62)
    %2 = cir.get_global @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_6511goodG2BSinkEi : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc25)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc62)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc27)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc29)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc31)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc31)
    cir.return loc(#loc21)
  } loc(#loc60)
  cir.func private  @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_6511goodB2GSinkEi(!s32i) loc(#loc65)
  cir.func internal private  @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc67)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc68)
    %2 = cir.get_global @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_6511goodB2GSinkEi : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc40)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc68)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc42)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc44)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc44)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc44)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc44)
    %9 = cir.ternary(%8, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc44)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc44)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc44)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc44)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc44)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc44)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc44)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc44)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc44)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc44)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc44)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc44)
      cir.yield %24 : !u32i loc(#loc44)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc44)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc44)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc44)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc44)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc44)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc44)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc44)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc44)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc44)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc44)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc44)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc44)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc44)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc44)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc44)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc44)
      cir.yield %28 : !u32i loc(#loc44)
    }) : (!cir.bool) -> !u32i loc(#loc44)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc44)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc70)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc46)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    cir.call %11(%12) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc46)
    cir.return loc(#loc36)
  } loc(#loc66)
  cir.func  @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_654goodEv() extra(#fn_attr1) {
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65L7goodG2BEv() : () -> () loc(#loc50)
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65L7goodB2GEv() : () -> () loc(#loc51)
    cir.return loc(#loc49)
  } loc(#loc71)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":26:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":26:22)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":28:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":39:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":30:5)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":30:9)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":32:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":32:29)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":34:13)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":34:12)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":34:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":36:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":36:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":38:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":38:13)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":46:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":46:26)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":48:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":58:1)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":50:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":50:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":51:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":51:29)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":53:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":53:12)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":53:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":56:12)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":56:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":57:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":57:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":61:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":61:26)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":63:1)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":72:1)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":65:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":65:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":66:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":66:29)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":68:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":68:12)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":68:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":70:12)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":70:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":71:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":71:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":74:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":78:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":76:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_65a.cpp":77:5)
#loc52 = loc(fused[#loc1, #loc2])
#loc53 = loc(fused[#loc3, #loc4])
#loc54 = loc(fused[#loc5, #loc6])
#loc55 = loc(fused[#loc7, #loc8])
#loc56 = loc(fused[#loc9, #loc10])
#loc57 = loc(fused[#loc13, #loc11])
#loc58 = loc(fused[#loc15, #loc14])
#loc59 = loc(fused[#loc18, #loc19])
#loc60 = loc(fused[#loc20, #loc21])
#loc61 = loc(fused[#loc22, #loc23])
#loc62 = loc(fused[#loc24, #loc25])
#loc63 = loc(fused[#loc28, #loc26])
#loc64 = loc(fused[#loc30, #loc29])
#loc65 = loc(fused[#loc33, #loc34])
#loc66 = loc(fused[#loc35, #loc36])
#loc67 = loc(fused[#loc37, #loc38])
#loc68 = loc(fused[#loc39, #loc40])
#loc69 = loc(fused[#loc43, #loc41])
#loc70 = loc(fused[#loc45, #loc44])
#loc71 = loc(fused[#loc48, #loc49])
