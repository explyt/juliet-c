!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":22:69)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":22:83)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":59:73)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":59:87)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":91:73)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":91:87)
#true = #cir.bool<true> : !cir.bool
#loc238 = loc(fused[#loc14, #loc15])
#loc265 = loc(fused[#loc85, #loc86])
#loc292 = loc(fused[#loc158, #loc159])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc232)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc233)
  cir.func private  @printIntLine(!s32i) loc(#loc234)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc235)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc236)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b_badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc14, #loc15])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc238)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc239)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc18)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc19)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc20)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!s32i>, %3 : !s32i), !cir.ptr<!s32i> loc(#loc17)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc239)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc241)
      %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc242)
      %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc27)
      %9 = cir.const #cir.int<10> : !s32i loc(#loc28)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc28)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc243)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc244)
      %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc27)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc245)
      cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc242)
      cir.scope {
        %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
        %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc34)
        %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !s32i loc(#loc247)
        %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc35)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc37)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc38)
          %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc39)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc37)
        } loc(#loc248)
      } loc(#loc246)
      cir.scope {
        %18 = cir.const #cir.int<0> : !s32i loc(#loc42)
        cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc250)
        cir.for : cond {
          %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc44)
          %20 = cir.const #cir.int<10> : !s32i loc(#loc45)
          %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc251)
          %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc46)
          cir.condition(%22) loc(#loc46)
        } body {
          cir.scope {
            %19 = cir.const #cir.int<0> : !s32i loc(#loc48)
            %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
            %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc50)
            %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc51)
            cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc253)
          } loc(#loc252)
          cir.yield loc(#loc41)
        } step {
          %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc52)
          %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc53)
          cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc254)
          cir.yield loc(#loc249)
        } loc(#loc249)
      } loc(#loc249)
      cir.scope {
        %18 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc56)
        %19 = cir.const #cir.int<0> : !s32i loc(#loc57)
        %20 = cir.cmp(ge, %18, %19) : !s32i, !s32i loc(#loc256)
        %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc58)
        cir.if %21 {
          %22 = cir.const #cir.int<1> : !s32i loc(#loc62)
          %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
          %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc64)
          %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc65)
          cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc258)
          cir.scope {
            %26 = cir.const #cir.int<0> : !s32i loc(#loc68)
            cir.store %26, %6 : !s32i, !cir.ptr<!s32i> loc(#loc260)
            cir.for : cond {
              %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc70)
              %28 = cir.const #cir.int<10> : !s32i loc(#loc71)
              %29 = cir.cmp(lt, %27, %28) : !s32i, !s32i loc(#loc261)
              %30 = cir.cast(int_to_bool, %29 : !s32i), !cir.bool loc(#loc72)
              cir.condition(%30) loc(#loc72)
            } body {
              cir.scope {
                %27 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
                %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc75)
                %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc76)
                %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc74)
                cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc77)
              } loc(#loc262)
              cir.yield loc(#loc67)
            } step {
              %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc78)
              %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc79)
              cir.store %28, %6 : !s32i, !cir.ptr<!s32i> loc(#loc263)
              cir.yield loc(#loc259)
            } loc(#loc259)
          } loc(#loc259)
        } else {
          %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc9)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc80)
        } loc(#loc257)
      } loc(#loc255)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc81)
      %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc82)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc81)
    } loc(#loc240)
    cir.return loc(#loc13)
  } loc(#loc237)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b_goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc85, #loc86])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc265)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc266)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc89)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc90)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc91)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!s32i>, %3 : !s32i), !cir.ptr<!s32i> loc(#loc88)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc90)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc266)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc268)
      %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc269)
      %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc98)
      %9 = cir.const #cir.int<10> : !s32i loc(#loc99)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc99)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc270)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc271)
      %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc98)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc272)
      cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc269)
      cir.scope {
        %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc104)
        %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc105)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc105)
        %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !s32i loc(#loc274)
        %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc106)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc108)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc109)
          %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc110)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc108)
        } loc(#loc275)
      } loc(#loc273)
      cir.scope {
        %18 = cir.const #cir.int<0> : !s32i loc(#loc113)
        cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc277)
        cir.for : cond {
          %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc115)
          %20 = cir.const #cir.int<10> : !s32i loc(#loc116)
          %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc278)
          %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc117)
          cir.condition(%22) loc(#loc117)
        } body {
          cir.scope {
            %19 = cir.const #cir.int<0> : !s32i loc(#loc119)
            %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc120)
            %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc121)
            %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc122)
            cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc280)
          } loc(#loc279)
          cir.yield loc(#loc112)
        } step {
          %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc123)
          %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc124)
          cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc281)
          cir.yield loc(#loc276)
        } loc(#loc276)
      } loc(#loc276)
      cir.scope {
        %18 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc127)
        %19 = cir.const #cir.int<0> : !s32i loc(#loc128)
        %20 = cir.cmp(ge, %18, %19) : !s32i, !s32i loc(#loc283)
        %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc129)
        cir.if %21 {
          %22 = cir.const #cir.int<1> : !s32i loc(#loc133)
          %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc134)
          %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc135)
          %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc136)
          cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc285)
          cir.scope {
            %26 = cir.const #cir.int<0> : !s32i loc(#loc139)
            cir.store %26, %6 : !s32i, !cir.ptr<!s32i> loc(#loc287)
            cir.for : cond {
              %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc141)
              %28 = cir.const #cir.int<10> : !s32i loc(#loc142)
              %29 = cir.cmp(lt, %27, %28) : !s32i, !s32i loc(#loc288)
              %30 = cir.cast(int_to_bool, %29 : !s32i), !cir.bool loc(#loc143)
              cir.condition(%30) loc(#loc143)
            } body {
              cir.scope {
                %27 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc145)
                %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc146)
                %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc147)
                %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc145)
                cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc148)
              } loc(#loc289)
              cir.yield loc(#loc138)
            } step {
              %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc149)
              %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc150)
              cir.store %28, %6 : !s32i, !cir.ptr<!s32i> loc(#loc290)
              cir.yield loc(#loc286)
            } loc(#loc286)
          } loc(#loc286)
        } else {
          %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc151)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc151)
          cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc152)
        } loc(#loc284)
      } loc(#loc282)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc153)
      %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc154)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc154)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc153)
    } loc(#loc267)
    cir.return loc(#loc84)
  } loc(#loc264)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc155)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b_goodB2GSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc158, #loc159])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc292)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc293)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc162)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc163)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc164)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!s32i>, %3 : !s32i), !cir.ptr<!s32i> loc(#loc161)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc163)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc293)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc295)
      %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc296)
      %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc171)
      %9 = cir.const #cir.int<10> : !s32i loc(#loc172)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc172)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc297)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc298)
      %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc171)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc299)
      cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc296)
      cir.scope {
        %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc177)
        %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc178)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc178)
        %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !s32i loc(#loc301)
        %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc179)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc181)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc182)
          %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc183)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc181)
        } loc(#loc302)
      } loc(#loc300)
      cir.scope {
        %18 = cir.const #cir.int<0> : !s32i loc(#loc186)
        cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc304)
        cir.for : cond {
          %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc188)
          %20 = cir.const #cir.int<10> : !s32i loc(#loc189)
          %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc305)
          %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc190)
          cir.condition(%22) loc(#loc190)
        } body {
          cir.scope {
            %19 = cir.const #cir.int<0> : !s32i loc(#loc192)
            %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc193)
            %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc194)
            %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc195)
            cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc307)
          } loc(#loc306)
          cir.yield loc(#loc185)
        } step {
          %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc196)
          %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc197)
          cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc308)
          cir.yield loc(#loc303)
        } loc(#loc303)
      } loc(#loc303)
      cir.scope {
        %18 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc200)
        %19 = cir.const #cir.int<0> : !s32i loc(#loc201)
        %20 = cir.cmp(ge, %18, %19) : !s32i, !s32i loc(#loc310)
        %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc202)
        %22 = cir.ternary(%21, true {
          %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc204)
          %24 = cir.const #cir.int<10> : !s32i loc(#loc205)
          %25 = cir.cmp(lt, %23, %24) : !s32i, !s32i loc(#loc311)
          %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc207)
          %27 = cir.ternary(%26, true {
            %28 = cir.const #true loc(#loc203)
            cir.yield %28 : !cir.bool loc(#loc203)
          }, false {
            %28 = cir.const #false loc(#loc203)
            cir.yield %28 : !cir.bool loc(#loc203)
          }) : (!cir.bool) -> !cir.bool loc(#loc203)
          cir.yield %27 : !cir.bool loc(#loc203)
        }, false {
          %23 = cir.const #false loc(#loc203)
          cir.yield %23 : !cir.bool loc(#loc203)
        }) : (!cir.bool) -> !cir.bool loc(#loc203)
        cir.if %22 {
          %23 = cir.const #cir.int<1> : !s32i loc(#loc211)
          %24 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc212)
          %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc213)
          %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc214)
          cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc313)
          cir.scope {
            %27 = cir.const #cir.int<0> : !s32i loc(#loc217)
            cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc315)
            cir.for : cond {
              %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc219)
              %29 = cir.const #cir.int<10> : !s32i loc(#loc220)
              %30 = cir.cmp(lt, %28, %29) : !s32i, !s32i loc(#loc316)
              %31 = cir.cast(int_to_bool, %30 : !s32i), !cir.bool loc(#loc221)
              cir.condition(%31) loc(#loc221)
            } body {
              cir.scope {
                %28 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc223)
                %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc224)
                %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc225)
                %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc223)
                cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc226)
              } loc(#loc317)
              cir.yield loc(#loc216)
            } step {
              %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc227)
              %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc228)
              cir.store %29, %6 : !s32i, !cir.ptr<!s32i> loc(#loc318)
              cir.yield loc(#loc314)
            } loc(#loc314)
          } loc(#loc314)
        } else {
          %23 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc155)
          %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc155)
          cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc229)
        } loc(#loc312)
      } loc(#loc309)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc230)
      %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc231)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc231)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc230)
    } loc(#loc294)
    cir.return loc(#loc157)
  } loc(#loc291)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":48:23)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":22:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":52:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":25:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":25:27)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":23:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":25:16)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":25:26)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":51:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":27:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":27:13)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":28:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":28:54)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":28:31)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":28:38)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":28:43)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":28:53)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":29:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":29:39)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":29:13)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":29:23)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":29:20)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":29:29)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":29:30)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":29:36)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":29:35)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":31:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":34:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":31:18)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":31:14)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":31:21)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":31:25)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":31:23)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":32:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":33:25)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":33:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":33:20)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":33:21)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":31:30)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":31:29)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":37:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":49:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":37:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":37:21)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":37:18)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":38:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":45:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":47:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":39:28)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":39:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":39:20)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":39:24)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":41:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":44:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":41:21)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":41:17)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":41:24)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":41:28)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":41:26)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":42:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":43:30)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":43:37)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":43:38)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":43:17)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":41:33)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":41:32)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":48:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":50:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":50:14)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":59:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":88:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":61:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":61:27)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":60:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":61:16)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":61:26)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":62:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":87:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":63:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":63:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":64:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":64:54)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":64:31)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":64:38)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":64:43)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":64:53)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":65:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":65:39)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":65:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":65:23)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":65:20)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":65:29)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":65:30)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":65:36)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":65:35)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":67:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":70:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":67:18)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":67:14)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":67:21)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":67:25)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":67:23)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":68:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":69:25)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":69:13)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":69:20)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":69:21)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":67:30)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":67:29)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":73:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":85:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":73:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":73:21)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":73:18)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":74:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":81:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":83:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":75:28)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":75:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":75:20)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":75:24)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":77:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":80:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":77:21)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":77:17)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":77:24)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":77:28)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":77:26)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":78:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":79:30)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":79:37)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":79:38)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":79:17)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":77:33)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":77:32)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":84:23)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":84:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":86:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":86:14)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":115:23)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":91:1)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":119:1)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":93:5)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":93:27)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":92:1)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":93:16)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":93:26)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":94:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":118:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":95:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":95:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":96:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":96:54)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":96:31)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":96:38)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":96:43)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":96:53)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":97:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":97:39)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":97:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":97:23)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":97:20)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":97:29)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":97:30)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":97:36)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":97:35)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":99:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":102:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":99:18)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":99:14)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":99:21)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":99:25)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":99:23)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":100:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":101:25)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":101:13)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":101:20)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":101:21)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":99:30)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":99:29)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":104:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":116:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":104:13)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":104:21)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":104:18)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":104:23)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":104:26)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":104:34)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":104:36)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":104:31)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":105:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":112:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":114:9)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":106:28)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":106:13)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":106:20)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":106:24)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":108:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":111:13)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":108:21)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":108:17)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":108:24)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":108:28)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":108:26)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":109:13)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":110:30)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":110:37)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":110:38)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":110:17)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":108:33)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":108:32)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":115:13)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":117:9)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c":117:14)
#loc232 = loc(fused[#loc1, #loc2])
#loc233 = loc(fused[#loc3, #loc4])
#loc234 = loc(fused[#loc5, #loc6])
#loc235 = loc(fused[#loc7, #loc8])
#loc236 = loc(fused[#loc10, #loc11])
#loc237 = loc(fused[#loc12, #loc13])
#loc239 = loc(fused[#loc16, #loc17])
#loc240 = loc(fused[#loc21, #loc22])
#loc241 = loc(fused[#loc23, #loc24])
#loc242 = loc(fused[#loc25, #loc26])
#loc243 = loc(fused[#loc29, #loc30])
#loc244 = loc(fused[#loc28, #loc30])
#loc245 = loc(fused[#loc27, #loc26])
#loc246 = loc(fused[#loc31, #loc32])
#loc247 = loc(fused[#loc33, #loc34])
#loc248 = loc(fused[#loc36, #loc32])
#loc249 = loc(fused[#loc40, #loc41])
#loc250 = loc(fused[#loc43, #loc42])
#loc251 = loc(fused[#loc44, #loc45])
#loc252 = loc(fused[#loc47, #loc41])
#loc253 = loc(fused[#loc49, #loc48])
#loc254 = loc(fused[#loc53, #loc52])
#loc255 = loc(fused[#loc54, #loc55])
#loc256 = loc(fused[#loc56, #loc57])
#loc257 = loc(fused[#loc59, #loc60, #loc61, #loc55])
#loc258 = loc(fused[#loc63, #loc62])
#loc259 = loc(fused[#loc66, #loc67])
#loc260 = loc(fused[#loc69, #loc68])
#loc261 = loc(fused[#loc70, #loc71])
#loc262 = loc(fused[#loc73, #loc67])
#loc263 = loc(fused[#loc79, #loc78])
#loc264 = loc(fused[#loc83, #loc84])
#loc266 = loc(fused[#loc87, #loc88])
#loc267 = loc(fused[#loc92, #loc93])
#loc268 = loc(fused[#loc94, #loc95])
#loc269 = loc(fused[#loc96, #loc97])
#loc270 = loc(fused[#loc100, #loc101])
#loc271 = loc(fused[#loc99, #loc101])
#loc272 = loc(fused[#loc98, #loc97])
#loc273 = loc(fused[#loc102, #loc103])
#loc274 = loc(fused[#loc104, #loc105])
#loc275 = loc(fused[#loc107, #loc103])
#loc276 = loc(fused[#loc111, #loc112])
#loc277 = loc(fused[#loc114, #loc113])
#loc278 = loc(fused[#loc115, #loc116])
#loc279 = loc(fused[#loc118, #loc112])
#loc280 = loc(fused[#loc120, #loc119])
#loc281 = loc(fused[#loc124, #loc123])
#loc282 = loc(fused[#loc125, #loc126])
#loc283 = loc(fused[#loc127, #loc128])
#loc284 = loc(fused[#loc130, #loc131, #loc132, #loc126])
#loc285 = loc(fused[#loc134, #loc133])
#loc286 = loc(fused[#loc137, #loc138])
#loc287 = loc(fused[#loc140, #loc139])
#loc288 = loc(fused[#loc141, #loc142])
#loc289 = loc(fused[#loc144, #loc138])
#loc290 = loc(fused[#loc150, #loc149])
#loc291 = loc(fused[#loc156, #loc157])
#loc293 = loc(fused[#loc160, #loc161])
#loc294 = loc(fused[#loc165, #loc166])
#loc295 = loc(fused[#loc167, #loc168])
#loc296 = loc(fused[#loc169, #loc170])
#loc297 = loc(fused[#loc173, #loc174])
#loc298 = loc(fused[#loc172, #loc174])
#loc299 = loc(fused[#loc171, #loc170])
#loc300 = loc(fused[#loc175, #loc176])
#loc301 = loc(fused[#loc177, #loc178])
#loc302 = loc(fused[#loc180, #loc176])
#loc303 = loc(fused[#loc184, #loc185])
#loc304 = loc(fused[#loc187, #loc186])
#loc305 = loc(fused[#loc188, #loc189])
#loc306 = loc(fused[#loc191, #loc185])
#loc307 = loc(fused[#loc193, #loc192])
#loc308 = loc(fused[#loc197, #loc196])
#loc309 = loc(fused[#loc198, #loc199])
#loc310 = loc(fused[#loc200, #loc201])
#loc311 = loc(fused[#loc204, #loc206])
#loc312 = loc(fused[#loc208, #loc209, #loc210, #loc199])
#loc313 = loc(fused[#loc212, #loc211])
#loc314 = loc(fused[#loc215, #loc216])
#loc315 = loc(fused[#loc218, #loc217])
#loc316 = loc(fused[#loc219, #loc220])
#loc317 = loc(fused[#loc222, #loc216])
#loc318 = loc(fused[#loc228, #loc227])
