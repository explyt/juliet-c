!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":30:16)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":156:10)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":156:14)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":156:20)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":156:32)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":52:16)
#loc113 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":82:16)
#loc196 = loc(fused[#loc49, #loc50])
#loc197 = loc(fused[#loc51, #loc52])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc175)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc176)
  cir.func private @printIntLine(!s32i) loc(#loc177)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_09_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc179)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc12)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.br ^bb1 loc(#loc181)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc175)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc16)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc182)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc18)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc18)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc18)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc18)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc18)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc18)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc18)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc18)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc18)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc18)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc18)
    cir.br ^bb5(%21 : !u32i) loc(#loc18)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc18)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc18)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc18)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc18)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc18)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc18)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc18)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc18)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc18)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc18)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc18)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc18)
    cir.br ^bb5(%37 : !u32i) loc(#loc18)
  ^bb5(%38: !u32i loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":30:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc18)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc18)
    cir.store %39, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    cir.br ^bb7 loc(#loc15)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc15)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc184)
  ^bb9:  // pred: ^bb8
    %40 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc175)
    %41 = cir.load %40 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %42 ^bb10, ^bb11 loc(#loc185)
  ^bb10:  // pred: ^bb9
    %43 = cir.const #cir.int<100> : !s32i loc(#loc24)
    %44 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %45 = cir.binop(div, %43, %44) : !s32i loc(#loc186)
    cir.call @printIntLine(%45) : (!s32i) -> () loc(#loc26)
    cir.br ^bb11 loc(#loc21)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc21)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc8)
  } loc(#loc178)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_09_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc188)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc189)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc190)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc191)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc28)
  } loc(#loc187)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc192)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc193)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc194)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc46)
  cir.func @main(%arg0: !s32i loc(fused[#loc49, #loc50]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc51, #loc52])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc196)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc197)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc48)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc53)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc53)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc54)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc55)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc55)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc56)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc43)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_rand_divide_09_good : !cir.ptr<!cir.func<!void ()>> loc(#loc198)
    cir.call @CWE369_Divide_by_Zero__int_rand_divide_09_good() : () -> () loc(#loc58)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc44)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc45)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_rand_divide_09_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc199)
    cir.call @CWE369_Divide_by_Zero__int_rand_divide_09_bad() : () -> () loc(#loc62)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc46)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc65)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc200)
    cir.return %17 : !s32i loc(#loc200)
  } loc(#loc195)
  cir.global "private" constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc201)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc70)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc203)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc76)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    cir.br ^bb1 loc(#loc205)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc175)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc80)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc206)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc82)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc82)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc82)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc82)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc82)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc82)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc82)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc82)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc82)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc82)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc82)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc82)
    cir.br ^bb5(%21 : !u32i) loc(#loc82)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc82)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc82)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc82)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc82)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc82)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc82)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc82)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc82)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc82)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc82)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc82)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc82)
    cir.br ^bb5(%37 : !u32i) loc(#loc82)
  ^bb5(%38: !u32i loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":52:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc82)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc82)
    cir.store %39, %0 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    cir.br ^bb7 loc(#loc79)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc79)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc208)
  ^bb9:  // pred: ^bb8
    %40 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc201)
    %41 = cir.load %40 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc86)
    cir.brcond %42 ^bb10, ^bb11 loc(#loc209)
  ^bb10:  // pred: ^bb9
    %43 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc69)
    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    cir.br ^bb17 loc(#loc88)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc210)
  ^bb12:  // pred: ^bb11
    %45 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    %46 = cir.const #cir.int<0> : !s32i loc(#loc94)
    %47 = cir.cmp(ne, %45, %46) : !s32i, !cir.bool loc(#loc211)
    cir.brcond %47 ^bb13, ^bb14 loc(#loc212)
  ^bb13:  // pred: ^bb12
    %48 = cir.const #cir.int<100> : !s32i loc(#loc98)
    %49 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    %50 = cir.binop(div, %48, %49) : !s32i loc(#loc213)
    cir.call @printIntLine(%50) : (!s32i) -> () loc(#loc100)
    cir.br ^bb15 loc(#loc96)
  ^bb14:  // pred: ^bb12
    %51 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc70)
    %52 = cir.cast(array_to_ptrdecay, %51 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%52) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    cir.br ^bb15 loc(#loc92)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc92)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc85)
  ^bb17:  // 2 preds: ^bb10, ^bb16
    cir.br ^bb18 loc(#loc85)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc72)
  } loc(#loc202)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc215)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc107)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    cir.br ^bb1 loc(#loc217)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc175)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc111)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc111)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc218)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc113)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc113)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc113)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc113)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc113)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc113)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc113)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc113)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc113)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc113)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc113)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc113)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc113)
    cir.br ^bb5(%21 : !u32i) loc(#loc113)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc113)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc113)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc113)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc113)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc113)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc113)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc113)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc113)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc113)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc113)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc113)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc113)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc113)
    cir.br ^bb5(%37 : !u32i) loc(#loc113)
  ^bb5(%38: !u32i loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":82:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc113)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc113)
    cir.store %39, %0 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    cir.br ^bb7 loc(#loc110)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc110)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc220)
  ^bb9:  // pred: ^bb8
    %40 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc175)
    %41 = cir.load %40 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc117)
    cir.brcond %42 ^bb10, ^bb16 loc(#loc221)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc222)
  ^bb11:  // pred: ^bb10
    %43 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    %44 = cir.const #cir.int<0> : !s32i loc(#loc122)
    %45 = cir.cmp(ne, %43, %44) : !s32i, !cir.bool loc(#loc223)
    cir.brcond %45 ^bb12, ^bb13 loc(#loc224)
  ^bb12:  // pred: ^bb11
    %46 = cir.const #cir.int<100> : !s32i loc(#loc126)
    %47 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    %48 = cir.binop(div, %46, %47) : !s32i loc(#loc225)
    cir.call @printIntLine(%48) : (!s32i) -> () loc(#loc128)
    cir.br ^bb14 loc(#loc124)
  ^bb13:  // pred: ^bb11
    %49 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc129)
    %50 = cir.cast(array_to_ptrdecay, %49 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc129)
    cir.call @printLine(%50) : (!cir.ptr<!s8i>) -> () loc(#loc130)
    cir.br ^bb14 loc(#loc120)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc120)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc116)
  ^bb16:  // 2 preds: ^bb9, ^bb15
    cir.br ^bb17 loc(#loc116)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc103)
  } loc(#loc214)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc227)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc135)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc136)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    cir.br ^bb1 loc(#loc229)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc201)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc140)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc140)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc230)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc144)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc144)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc145)
    cir.br ^bb4 loc(#loc142)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<7> : !s32i loc(#loc146)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc231)
    cir.br ^bb4 loc(#loc139)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc139)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc232)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc175)
    %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc150)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc150)
    cir.brcond %11 ^bb7, ^bb8 loc(#loc233)
  ^bb7:  // pred: ^bb6
    %12 = cir.const #cir.int<100> : !s32i loc(#loc152)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc153)
    %14 = cir.binop(div, %12, %13) : !s32i loc(#loc234)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc154)
    cir.br ^bb8 loc(#loc149)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc149)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc132)
  } loc(#loc226)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc236)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc159)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc160)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    cir.br ^bb1 loc(#loc238)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc175)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc164)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc164)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc239)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<7> : !s32i loc(#loc166)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc240)
    cir.br ^bb3 loc(#loc163)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc163)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc241)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc175)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc170)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc170)
    cir.brcond %9 ^bb6, ^bb7 loc(#loc242)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.int<100> : !s32i loc(#loc172)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc173)
    %12 = cir.binop(div, %10, %11) : !s32i loc(#loc243)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc174)
    cir.br ^bb7 loc(#loc169)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc169)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc156)
  } loc(#loc235)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_09.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":22:1)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":37:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":24:5)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":24:9)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":26:13)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":26:12)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":26:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":27:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":31:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":27:8)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":28:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":30:9)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":32:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":36:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":32:8)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":33:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":35:22)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":35:28)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":35:9)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":139:1)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":145:1)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":141:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":141:14)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":142:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":142:14)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":143:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":143:14)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":144:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":144:14)
#loc37 = loc("/usr/include/stdlib.h":575:1)
#loc38 = loc("/usr/include/stdlib.h":575:41)
#loc39 = loc("/usr/include/time.h":76:1)
#loc40 = loc("/usr/include/time.h":76:38)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":161:15)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":163:15)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":166:15)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":168:15)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":156:1)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":171:1)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":157:1)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":159:27)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":159:22)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":159:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":161:5)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":162:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":162:52)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":163:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":166:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":167:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":167:51)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":168:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":170:12)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":170:5)
#loc67 = loc("../../../testcasesupport/std_testcase.h":110:1)
#loc68 = loc("../../../testcasesupport/std_testcase.h":110:18)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":57:19)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":68:23)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":44:1)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":71:1)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":46:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":46:9)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":48:13)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":48:12)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":48:5)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":49:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":53:5)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":49:8)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":50:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":52:9)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":54:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":70:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":54:8)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":55:5)
#loc88 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":58:5)
#loc89 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":60:5)
#loc90 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":57:9)
#loc91 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":62:9)
#loc92 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":69:9)
#loc93 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":62:13)
#loc94 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":62:21)
#loc95 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":63:9)
#loc96 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":65:9)
#loc97 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":67:9)
#loc98 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":64:26)
#loc99 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":64:32)
#loc100 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":64:13)
#loc101 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":68:13)
#loc102 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":74:1)
#loc103 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":96:1)
#loc104 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":76:5)
#loc105 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":76:9)
#loc106 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":78:13)
#loc107 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":78:12)
#loc108 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":78:5)
#loc109 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":79:5)
#loc110 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":83:5)
#loc111 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":79:8)
#loc112 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":80:5)
#loc114 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":82:9)
#loc115 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":84:5)
#loc116 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":95:5)
#loc117 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":84:8)
#loc118 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":85:5)
#loc119 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":87:9)
#loc120 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":94:9)
#loc121 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":87:13)
#loc122 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":87:21)
#loc123 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":88:9)
#loc124 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":90:9)
#loc125 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":92:9)
#loc126 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":89:26)
#loc127 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":89:32)
#loc128 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":89:13)
#loc129 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":93:23)
#loc130 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":93:13)
#loc131 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":99:1)
#loc132 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":119:1)
#loc133 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":101:5)
#loc134 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":101:9)
#loc135 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":103:13)
#loc136 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":103:12)
#loc137 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":103:5)
#loc138 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":104:5)
#loc139 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":113:5)
#loc140 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":104:8)
#loc141 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":105:5)
#loc142 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":108:5)
#loc143 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":110:5)
#loc144 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":107:19)
#loc145 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":107:9)
#loc146 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":112:16)
#loc147 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":112:9)
#loc148 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":114:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":118:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":114:8)
#loc151 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":115:5)
#loc152 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":117:22)
#loc153 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":117:28)
#loc154 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":117:9)
#loc155 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":122:1)
#loc156 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":137:1)
#loc157 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":124:5)
#loc158 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":124:9)
#loc159 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":126:13)
#loc160 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":126:12)
#loc161 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":126:5)
#loc162 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":127:5)
#loc163 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":131:5)
#loc164 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":127:8)
#loc165 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":128:5)
#loc166 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":130:16)
#loc167 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":130:9)
#loc168 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":132:5)
#loc169 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":136:5)
#loc170 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":132:8)
#loc171 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":133:5)
#loc172 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":135:22)
#loc173 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":135:28)
#loc174 = loc("CWE369_Divide_by_Zero__int_rand_divide_09.c":135:9)
#loc175 = loc(fused[#loc1, #loc2])
#loc176 = loc(fused[#loc3, #loc4])
#loc177 = loc(fused[#loc5, #loc6])
#loc178 = loc(fused[#loc7, #loc8])
#loc179 = loc(fused[#loc9, #loc10])
#loc180 = loc(fused[#loc13, #loc11])
#loc181 = loc(fused[#loc14, #loc15])
#loc182 = loc(fused[#loc17, #loc15])
#loc183 = loc(fused[#loc19, #loc18])
#loc184 = loc(fused[#loc20, #loc21])
#loc185 = loc(fused[#loc23, #loc21])
#loc186 = loc(fused[#loc24, #loc25])
#loc187 = loc(fused[#loc27, #loc28])
#loc188 = loc(fused[#loc29, #loc30])
#loc189 = loc(fused[#loc31, #loc32])
#loc190 = loc(fused[#loc33, #loc34])
#loc191 = loc(fused[#loc35, #loc36])
#loc192 = loc(fused[#loc37, #loc38])
#loc193 = loc(fused[#loc39, #loc40])
#loc194 = loc(fused[#loc41, #loc42])
#loc195 = loc(fused[#loc47, #loc48])
#loc198 = loc(fused[#loc58, #loc59])
#loc199 = loc(fused[#loc62, #loc63])
#loc200 = loc(fused[#loc66, #loc65])
#loc201 = loc(fused[#loc67, #loc68])
#loc202 = loc(fused[#loc71, #loc72])
#loc203 = loc(fused[#loc73, #loc74])
#loc204 = loc(fused[#loc77, #loc75])
#loc205 = loc(fused[#loc78, #loc79])
#loc206 = loc(fused[#loc81, #loc79])
#loc207 = loc(fused[#loc83, #loc82])
#loc208 = loc(fused[#loc84, #loc85])
#loc209 = loc(fused[#loc87, #loc88, #loc89, #loc85])
#loc210 = loc(fused[#loc91, #loc92])
#loc211 = loc(fused[#loc93, #loc94])
#loc212 = loc(fused[#loc95, #loc96, #loc97, #loc92])
#loc213 = loc(fused[#loc98, #loc99])
#loc214 = loc(fused[#loc102, #loc103])
#loc215 = loc(fused[#loc104, #loc105])
#loc216 = loc(fused[#loc108, #loc106])
#loc217 = loc(fused[#loc109, #loc110])
#loc218 = loc(fused[#loc112, #loc110])
#loc219 = loc(fused[#loc114, #loc113])
#loc220 = loc(fused[#loc115, #loc116])
#loc221 = loc(fused[#loc118, #loc116])
#loc222 = loc(fused[#loc119, #loc120])
#loc223 = loc(fused[#loc121, #loc122])
#loc224 = loc(fused[#loc123, #loc124, #loc125, #loc120])
#loc225 = loc(fused[#loc126, #loc127])
#loc226 = loc(fused[#loc131, #loc132])
#loc227 = loc(fused[#loc133, #loc134])
#loc228 = loc(fused[#loc137, #loc135])
#loc229 = loc(fused[#loc138, #loc139])
#loc230 = loc(fused[#loc141, #loc142, #loc143, #loc139])
#loc231 = loc(fused[#loc147, #loc146])
#loc232 = loc(fused[#loc148, #loc149])
#loc233 = loc(fused[#loc151, #loc149])
#loc234 = loc(fused[#loc152, #loc153])
#loc235 = loc(fused[#loc155, #loc156])
#loc236 = loc(fused[#loc157, #loc158])
#loc237 = loc(fused[#loc161, #loc159])
#loc238 = loc(fused[#loc162, #loc163])
#loc239 = loc(fused[#loc165, #loc163])
#loc240 = loc(fused[#loc167, #loc166])
#loc241 = loc(fused[#loc168, #loc169])
#loc242 = loc(fused[#loc171, #loc169])
#loc243 = loc(fused[#loc172, #loc173])
