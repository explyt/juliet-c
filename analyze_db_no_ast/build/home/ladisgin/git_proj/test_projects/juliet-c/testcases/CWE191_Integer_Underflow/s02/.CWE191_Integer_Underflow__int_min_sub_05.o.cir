!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_sub_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc160)
  cir.func private  @printIntLine(!s32i) loc(#loc161)
  cir.func no_proto  @CWE191_Integer_Underflow__int_min_sub_05_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc163)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc160)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc13)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
      cir.if %4 {
        %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc15)
        %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc15)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc15)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc167)
      } loc(#loc166)
    } loc(#loc165)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc160)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc19)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc171)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc24)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc25)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc171)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc26)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc27)
        } loc(#loc170)
      } loc(#loc169)
    } loc(#loc168)
    cir.return loc(#loc6)
  } loc(#loc162)
  cir.func no_proto  @CWE191_Integer_Underflow__int_min_sub_05_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc173)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc29)
  } loc(#loc172)
  cir.global "private"  internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc177)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc178)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc42)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc43)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc180)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc48)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc160)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc52)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc52)
      cir.if %4 {
        %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc54)
        %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc54)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc54)
        %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc54)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc184)
      } loc(#loc183)
    } loc(#loc182)
    cir.scope {
      %2 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc177)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc58)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc58)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc42)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc42)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc62)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc66)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc66)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc66)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc66)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !s32i loc(#loc188)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc67)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc190)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc72)
            %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc73)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc190)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc74)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc75)
          } else {
            %12 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc43)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc43)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc76)
          } loc(#loc189)
        } loc(#loc187)
      } loc(#loc186)
    } loc(#loc185)
    cir.return loc(#loc45)
  } loc(#loc179)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc192)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc81)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc160)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc85)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc85)
      cir.if %4 {
        %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc87)
        %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc87)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc87)
        %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc87)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
      } loc(#loc195)
    } loc(#loc194)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc160)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc91)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc91)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc95)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc96)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc96)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc96)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc96)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !s32i loc(#loc200)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc97)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc202)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc102)
            %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc103)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc202)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc104)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc105)
          } else {
            %12 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc106)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc106)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc107)
          } loc(#loc201)
        } loc(#loc199)
      } loc(#loc198)
    } loc(#loc197)
    cir.return loc(#loc78)
  } loc(#loc191)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc204)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc112)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    cir.scope {
      %2 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc177)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc116)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc116)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc120)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc120)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc121)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc122)
        %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc123)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc208)
      } loc(#loc207)
    } loc(#loc206)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc160)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc127)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc127)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc212)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc133)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc132)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc133)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc212)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc134)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc135)
        } loc(#loc211)
      } loc(#loc210)
    } loc(#loc209)
    cir.return loc(#loc109)
  } loc(#loc203)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc214)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc140)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc160)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc144)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc144)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc146)
        %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc147)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
      } loc(#loc217)
    } loc(#loc216)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc160)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc151)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc151)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc222)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc156)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc157)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc222)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc158)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc159)
        } loc(#loc221)
      } loc(#loc220)
    } loc(#loc219)
    cir.return loc(#loc137)
  } loc(#loc213)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_sub_05.c":0:0)
#loc1 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":23:1)
#loc2 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":23:25)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":28:1)
#loc6 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":46:1)
#loc7 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":30:5)
#loc8 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":30:9)
#loc9 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":32:12)
#loc10 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":32:5)
#loc11 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":33:5)
#loc12 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":37:5)
#loc13 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":33:8)
#loc14 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":34:5)
#loc15 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":36:16)
#loc16 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":36:9)
#loc17 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":38:5)
#loc18 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":45:5)
#loc19 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":38:8)
#loc20 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":39:5)
#loc21 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":40:9)
#loc22 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":44:9)
#loc23 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":42:13)
#loc24 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":42:33)
#loc25 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":42:26)
#loc26 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":43:26)
#loc27 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":43:13)
#loc28 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":156:1)
#loc29 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":162:1)
#loc30 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":158:5)
#loc31 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":158:14)
#loc32 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":159:5)
#loc33 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":159:14)
#loc34 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":160:5)
#loc35 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":160:14)
#loc36 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":161:5)
#loc37 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":161:14)
#loc38 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":24:1)
#loc39 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":24:26)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":66:19)
#loc43 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":78:23)
#loc44 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":53:1)
#loc45 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":81:1)
#loc46 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":55:5)
#loc47 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":55:9)
#loc48 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":57:12)
#loc49 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":57:5)
#loc50 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":58:5)
#loc51 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":62:5)
#loc52 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":58:8)
#loc53 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":59:5)
#loc54 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":61:16)
#loc55 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":61:9)
#loc56 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":63:5)
#loc57 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":80:5)
#loc58 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":63:8)
#loc59 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":64:5)
#loc60 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":67:5)
#loc61 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":69:5)
#loc62 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":66:9)
#loc63 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":71:9)
#loc64 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":79:9)
#loc65 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":71:13)
#loc66 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":71:20)
#loc67 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":71:18)
#loc68 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":72:9)
#loc69 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":75:9)
#loc70 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":77:9)
#loc71 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":73:13)
#loc72 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":73:33)
#loc73 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":73:26)
#loc74 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":74:26)
#loc75 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":74:13)
#loc76 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":78:13)
#loc77 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":84:1)
#loc78 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":107:1)
#loc79 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":86:5)
#loc80 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":86:9)
#loc81 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":88:12)
#loc82 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":88:5)
#loc83 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":89:5)
#loc84 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":93:5)
#loc85 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":89:8)
#loc86 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":90:5)
#loc87 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":92:16)
#loc88 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":92:9)
#loc89 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":94:5)
#loc90 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":106:5)
#loc91 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":94:8)
#loc92 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":95:5)
#loc93 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":97:9)
#loc94 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":105:9)
#loc95 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":97:13)
#loc96 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":97:20)
#loc97 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":97:18)
#loc98 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":98:9)
#loc99 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":101:9)
#loc100 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":103:9)
#loc101 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":99:13)
#loc102 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":99:33)
#loc103 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":99:26)
#loc104 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":100:26)
#loc105 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":100:13)
#loc106 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":104:23)
#loc107 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":104:13)
#loc108 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":110:1)
#loc109 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":133:1)
#loc110 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":112:5)
#loc111 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":112:9)
#loc112 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":114:12)
#loc113 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":114:5)
#loc114 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":115:5)
#loc115 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":124:5)
#loc116 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":115:8)
#loc117 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":116:5)
#loc118 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":119:5)
#loc119 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":121:5)
#loc120 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":118:19)
#loc121 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":118:9)
#loc122 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":123:17)
#loc123 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":123:16)
#loc124 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":123:9)
#loc125 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":125:5)
#loc126 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":132:5)
#loc127 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":125:8)
#loc128 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":126:5)
#loc129 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":127:9)
#loc130 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":131:9)
#loc131 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":129:13)
#loc132 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":129:33)
#loc133 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":129:26)
#loc134 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":130:26)
#loc135 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":130:13)
#loc136 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":136:1)
#loc137 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":154:1)
#loc138 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":138:5)
#loc139 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":138:9)
#loc140 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":140:12)
#loc141 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":140:5)
#loc142 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":141:5)
#loc143 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":145:5)
#loc144 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":141:8)
#loc145 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":142:5)
#loc146 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":144:17)
#loc147 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":144:16)
#loc148 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":144:9)
#loc149 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":146:5)
#loc150 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":153:5)
#loc151 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":146:8)
#loc152 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":147:5)
#loc153 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":148:9)
#loc154 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":152:9)
#loc155 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":150:13)
#loc156 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":150:33)
#loc157 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":150:26)
#loc158 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":151:26)
#loc159 = loc("CWE191_Integer_Underflow__int_min_sub_05.c":151:13)
#loc160 = loc(fused[#loc1, #loc2])
#loc161 = loc(fused[#loc3, #loc4])
#loc162 = loc(fused[#loc5, #loc6])
#loc163 = loc(fused[#loc7, #loc8])
#loc164 = loc(fused[#loc10, #loc9])
#loc165 = loc(fused[#loc11, #loc12])
#loc166 = loc(fused[#loc14, #loc12])
#loc167 = loc(fused[#loc16, #loc15])
#loc168 = loc(fused[#loc17, #loc18])
#loc169 = loc(fused[#loc20, #loc18])
#loc170 = loc(fused[#loc21, #loc22])
#loc171 = loc(fused[#loc23, #loc24])
#loc172 = loc(fused[#loc28, #loc29])
#loc173 = loc(fused[#loc30, #loc31])
#loc174 = loc(fused[#loc32, #loc33])
#loc175 = loc(fused[#loc34, #loc35])
#loc176 = loc(fused[#loc36, #loc37])
#loc177 = loc(fused[#loc38, #loc39])
#loc178 = loc(fused[#loc40, #loc41])
#loc179 = loc(fused[#loc44, #loc45])
#loc180 = loc(fused[#loc46, #loc47])
#loc181 = loc(fused[#loc49, #loc48])
#loc182 = loc(fused[#loc50, #loc51])
#loc183 = loc(fused[#loc53, #loc51])
#loc184 = loc(fused[#loc55, #loc54])
#loc185 = loc(fused[#loc56, #loc57])
#loc186 = loc(fused[#loc59, #loc60, #loc61, #loc57])
#loc187 = loc(fused[#loc63, #loc64])
#loc188 = loc(fused[#loc65, #loc66])
#loc189 = loc(fused[#loc68, #loc69, #loc70, #loc64])
#loc190 = loc(fused[#loc71, #loc72])
#loc191 = loc(fused[#loc77, #loc78])
#loc192 = loc(fused[#loc79, #loc80])
#loc193 = loc(fused[#loc82, #loc81])
#loc194 = loc(fused[#loc83, #loc84])
#loc195 = loc(fused[#loc86, #loc84])
#loc196 = loc(fused[#loc88, #loc87])
#loc197 = loc(fused[#loc89, #loc90])
#loc198 = loc(fused[#loc92, #loc90])
#loc199 = loc(fused[#loc93, #loc94])
#loc200 = loc(fused[#loc95, #loc96])
#loc201 = loc(fused[#loc98, #loc99, #loc100, #loc94])
#loc202 = loc(fused[#loc101, #loc102])
#loc203 = loc(fused[#loc108, #loc109])
#loc204 = loc(fused[#loc110, #loc111])
#loc205 = loc(fused[#loc113, #loc112])
#loc206 = loc(fused[#loc114, #loc115])
#loc207 = loc(fused[#loc117, #loc118, #loc119, #loc115])
#loc208 = loc(fused[#loc124, #loc122])
#loc209 = loc(fused[#loc125, #loc126])
#loc210 = loc(fused[#loc128, #loc126])
#loc211 = loc(fused[#loc129, #loc130])
#loc212 = loc(fused[#loc131, #loc132])
#loc213 = loc(fused[#loc136, #loc137])
#loc214 = loc(fused[#loc138, #loc139])
#loc215 = loc(fused[#loc141, #loc140])
#loc216 = loc(fused[#loc142, #loc143])
#loc217 = loc(fused[#loc145, #loc143])
#loc218 = loc(fused[#loc148, #loc146])
#loc219 = loc(fused[#loc149, #loc150])
#loc220 = loc(fused[#loc152, #loc150])
#loc221 = loc(fused[#loc153, #loc154])
#loc222 = loc(fused[#loc155, #loc156])
