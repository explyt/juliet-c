!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc61 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":95:10)
#loc62 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":95:14)
#loc63 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":95:20)
#loc64 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":95:32)
#true = #cir.bool<true> : !cir.bool
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc142 = loc(fused[#loc61, #loc62])
#loc143 = loc(fused[#loc63, #loc64])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__binary_if_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc118)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc119)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"intOne == 5\00" : !cir.array<!s8i x 12>> : !cir.array<!s8i x 12> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE476_NULL_Pointer_Dereference__binary_if_12_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc122)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc122)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc10)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc10)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc125)
          %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc18)
          cir.store %5, %4 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc125)
          cir.scope {
            %6 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc21)
            %7 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc22)
            %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc22)
            %9 = cir.cmp(ne, %6, %8) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc127)
            %10 = cir.cast(bool_to_int, %9 : !cir.bool), !s32i loc(#loc127)
            %11 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc23)
            %12 = cir.get_member %11[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc24)
            %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc25)
            %14 = cir.const #cir.int<5> : !s32i loc(#loc26)
            %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc128)
            %16 = cir.cast(bool_to_int, %15 : !cir.bool), !s32i loc(#loc128)
            %17 = cir.binop(and, %10, %16) : !s32i loc(#loc129)
            %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc29)
            cir.if %18 {
              %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc5)
              %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc5)
              cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc31)
            } loc(#loc130)
          } loc(#loc126)
        } loc(#loc124)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc132)
          %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc35)
          cir.store %5, %4 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc132)
          cir.scope {
            %6 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc38)
            %7 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc39)
            %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc39)
            %9 = cir.cmp(ne, %6, %8) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc134)
            %10 = cir.ternary(%9, true {
              %11 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc41)
              %12 = cir.get_member %11[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc24)
              %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc42)
              %14 = cir.const #cir.int<5> : !s32i loc(#loc43)
              %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc135)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc40)
                cir.yield %17 : !cir.bool loc(#loc40)
              }, false {
                %17 = cir.const #false loc(#loc40)
                cir.yield %17 : !cir.bool loc(#loc40)
              }) : (!cir.bool) -> !cir.bool loc(#loc40)
              cir.yield %16 : !cir.bool loc(#loc40)
            }, false {
              %11 = cir.const #false loc(#loc40)
              cir.yield %11 : !cir.bool loc(#loc40)
            }) : (!cir.bool) -> !cir.bool loc(#loc40)
            cir.if %10 {
              %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc45)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc45)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc46)
            } loc(#loc136)
          } loc(#loc133)
        } loc(#loc131)
      } loc(#loc123)
    } loc(#loc121)
    cir.return loc(#loc7)
  } loc(#loc120)
  cir.func no_proto @CWE476_NULL_Pointer_Dereference__binary_if_12_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc138)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    cir.return loc(#loc48)
  } loc(#loc137)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc139)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc140)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc58)
  cir.func @main(%arg0: !s32i loc(fused[#loc61, #loc62]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc63, #loc64])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc142)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc143)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc60)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc65)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc66)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc67)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc67)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc68)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc55)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %8 = cir.get_global @CWE476_NULL_Pointer_Dereference__binary_if_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc144)
    cir.call @CWE476_NULL_Pointer_Dereference__binary_if_12_good() : () -> () loc(#loc70)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc56)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc57)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %13 = cir.get_global @CWE476_NULL_Pointer_Dereference__binary_if_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc145)
    cir.call @CWE476_NULL_Pointer_Dereference__binary_if_12_bad() : () -> () loc(#loc74)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc58)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc77)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc146)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc146)
    cir.return %17 : !s32i loc(#loc146)
  } loc(#loc141)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc149)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc149)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc83)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc83)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc152)
          %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc91)
          cir.store %5, %4 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc152)
          cir.scope {
            %6 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc94)
            %7 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc95)
            %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc95)
            %9 = cir.cmp(ne, %6, %8) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc154)
            %10 = cir.ternary(%9, true {
              %11 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc97)
              %12 = cir.get_member %11[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc24)
              %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc98)
              %14 = cir.const #cir.int<5> : !s32i loc(#loc99)
              %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc155)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc96)
                cir.yield %17 : !cir.bool loc(#loc96)
              }, false {
                %17 = cir.const #false loc(#loc96)
                cir.yield %17 : !cir.bool loc(#loc96)
              }) : (!cir.bool) -> !cir.bool loc(#loc96)
              cir.yield %16 : !cir.bool loc(#loc96)
            }, false {
              %11 = cir.const #false loc(#loc96)
              cir.yield %11 : !cir.bool loc(#loc96)
            }) : (!cir.bool) -> !cir.bool loc(#loc96)
            cir.if %10 {
              %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc101)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc101)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc102)
            } loc(#loc156)
          } loc(#loc153)
        } loc(#loc151)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc158)
          %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc106)
          cir.store %5, %4 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc158)
          cir.scope {
            %6 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc109)
            %7 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc110)
            %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc110)
            %9 = cir.cmp(ne, %6, %8) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc160)
            %10 = cir.ternary(%9, true {
              %11 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc112)
              %12 = cir.get_member %11[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc24)
              %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc113)
              %14 = cir.const #cir.int<5> : !s32i loc(#loc114)
              %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc161)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc111)
                cir.yield %17 : !cir.bool loc(#loc111)
              }, false {
                %17 = cir.const #false loc(#loc111)
                cir.yield %17 : !cir.bool loc(#loc111)
              }) : (!cir.bool) -> !cir.bool loc(#loc111)
              cir.yield %16 : !cir.bool loc(#loc111)
            }, false {
              %11 = cir.const #false loc(#loc111)
              cir.yield %11 : !cir.bool loc(#loc111)
            }) : (!cir.bool) -> !cir.bool loc(#loc111)
            cir.if %10 {
              %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc116)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc116)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc117)
            } loc(#loc162)
          } loc(#loc159)
        } loc(#loc157)
      } loc(#loc150)
    } loc(#loc148)
    cir.return loc(#loc80)
  } loc(#loc147)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__binary_if_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":30:27)
#loc6 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":20:1)
#loc7 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":46:1)
#loc8 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":22:5)
#loc9 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":45:5)
#loc10 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":22:8)
#loc11 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":22:33)
#loc12 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":23:5)
#loc13 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":33:5)
#loc14 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":35:5)
#loc15 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":24:9)
#loc16 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":32:9)
#loc17 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":25:13)
#loc18 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":25:51)
#loc19 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":28:13)
#loc20 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":31:13)
#loc21 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":28:18)
#loc22 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":28:42)
#loc23 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":28:51)
#loc24 = loc("../../testcasesupport/std_testcase.h":98:9)
#loc25 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":28:73)
#loc26 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":28:83)
#loc27 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":28:17)
#loc28 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":28:84)
#loc29 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":28:48)
#loc30 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":29:13)
#loc31 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":30:17)
#loc32 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":36:9)
#loc33 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":44:9)
#loc34 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":37:13)
#loc35 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":37:51)
#loc36 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":40:13)
#loc37 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":43:13)
#loc38 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":40:18)
#loc39 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":40:42)
#loc40 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":40:48)
#loc41 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":40:52)
#loc42 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":40:74)
#loc43 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":40:84)
#loc44 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":41:13)
#loc45 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":42:27)
#loc46 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":42:17)
#loc47 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":81:1)
#loc48 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":84:1)
#loc49 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":83:5)
#loc50 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":83:11)
#loc51 = loc("/usr/include/stdlib.h":575:1)
#loc52 = loc("/usr/include/stdlib.h":575:41)
#loc53 = loc("/usr/include/time.h":76:1)
#loc54 = loc("/usr/include/time.h":76:38)
#loc55 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":100:15)
#loc56 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":102:15)
#loc57 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":105:15)
#loc58 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":107:15)
#loc59 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":95:1)
#loc60 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":110:1)
#loc65 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":96:1)
#loc66 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":98:27)
#loc67 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":98:22)
#loc68 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":98:5)
#loc69 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":100:5)
#loc70 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":101:5)
#loc71 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":101:56)
#loc72 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":102:5)
#loc73 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":105:5)
#loc74 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":106:5)
#loc75 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":106:55)
#loc76 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":107:5)
#loc77 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":109:12)
#loc78 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":109:5)
#loc79 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":53:1)
#loc80 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":79:1)
#loc81 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":55:5)
#loc82 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":78:5)
#loc83 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":55:8)
#loc84 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":55:33)
#loc85 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":56:5)
#loc86 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":66:5)
#loc87 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":68:5)
#loc88 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":57:9)
#loc89 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":65:9)
#loc90 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":58:13)
#loc91 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":58:51)
#loc92 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":61:13)
#loc93 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":64:13)
#loc94 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":61:18)
#loc95 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":61:42)
#loc96 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":61:48)
#loc97 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":61:52)
#loc98 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":61:74)
#loc99 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":61:84)
#loc100 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":62:13)
#loc101 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":63:27)
#loc102 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":63:17)
#loc103 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":69:9)
#loc104 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":77:9)
#loc105 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":70:13)
#loc106 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":70:51)
#loc107 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":73:13)
#loc108 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":76:13)
#loc109 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":73:18)
#loc110 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":73:42)
#loc111 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":73:48)
#loc112 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":73:52)
#loc113 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":73:74)
#loc114 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":73:84)
#loc115 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":74:13)
#loc116 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":75:27)
#loc117 = loc("CWE476_NULL_Pointer_Dereference__binary_if_12.c":75:17)
#loc118 = loc(fused[#loc1, #loc2])
#loc119 = loc(fused[#loc3, #loc4])
#loc120 = loc(fused[#loc6, #loc7])
#loc121 = loc(fused[#loc8, #loc9])
#loc122 = loc(fused[#loc10, #loc11])
#loc123 = loc(fused[#loc12, #loc13, #loc14, #loc9])
#loc124 = loc(fused[#loc15, #loc16])
#loc125 = loc(fused[#loc17, #loc18])
#loc126 = loc(fused[#loc19, #loc20])
#loc127 = loc(fused[#loc21, #loc22])
#loc128 = loc(fused[#loc23, #loc26])
#loc129 = loc(fused[#loc27, #loc28])
#loc130 = loc(fused[#loc30, #loc20])
#loc131 = loc(fused[#loc32, #loc33])
#loc132 = loc(fused[#loc34, #loc35])
#loc133 = loc(fused[#loc36, #loc37])
#loc134 = loc(fused[#loc38, #loc39])
#loc135 = loc(fused[#loc41, #loc43])
#loc136 = loc(fused[#loc44, #loc37])
#loc137 = loc(fused[#loc47, #loc48])
#loc138 = loc(fused[#loc49, #loc50])
#loc139 = loc(fused[#loc51, #loc52])
#loc140 = loc(fused[#loc53, #loc54])
#loc141 = loc(fused[#loc59, #loc60])
#loc144 = loc(fused[#loc70, #loc71])
#loc145 = loc(fused[#loc74, #loc75])
#loc146 = loc(fused[#loc78, #loc77])
#loc147 = loc(fused[#loc79, #loc80])
#loc148 = loc(fused[#loc81, #loc82])
#loc149 = loc(fused[#loc83, #loc84])
#loc150 = loc(fused[#loc85, #loc86, #loc87, #loc82])
#loc151 = loc(fused[#loc88, #loc89])
#loc152 = loc(fused[#loc90, #loc91])
#loc153 = loc(fused[#loc92, #loc93])
#loc154 = loc(fused[#loc94, #loc95])
#loc155 = loc(fused[#loc97, #loc99])
#loc156 = loc(fused[#loc100, #loc93])
#loc157 = loc(fused[#loc103, #loc104])
#loc158 = loc(fused[#loc105, #loc106])
#loc159 = loc(fused[#loc107, #loc108])
#loc160 = loc(fused[#loc109, #loc110])
#loc161 = loc(fused[#loc112, #loc114])
#loc162 = loc(fused[#loc115, #loc108])
