!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":24:60)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":24:67)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":46:64)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":46:71)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":64:64)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":64:71)
#loc142 = loc(fused[#loc15, #loc16])
#loc155 = loc(fused[#loc56, #loc57])
#loc168 = loc(fused[#loc98, #loc99])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc135)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc136)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc137)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc138)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc139)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc140)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc15, #loc16])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc142)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc143)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc144)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc21)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc18)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!void>> loc(#loc18)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc143)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc22)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc23)
    cir.store %6, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc144)
    cir.scope {
      %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc146)
      %8 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc147)
      %9 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc30)
      %10 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc31)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
      %12 = cir.call @strlen(%11) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc30)
      cir.store %12, %7 : !u64i, !cir.ptr<!u64i> loc(#loc146)
      %13 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc32)
      %14 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc33)
      %15 = cir.const #cir.int<1> : !s32i loc(#loc34)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc34)
      %17 = cir.binop(add, %14, %16) : !u64i loc(#loc148)
      %18 = cir.const #cir.int<4> : !u64i loc(#loc149)
      %19 = cir.call @calloc(%17, %18) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc32)
      cir.store %19, %8 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc147)
      cir.scope {
        %29 = cir.load %8 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc39)
        %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc40)
        %31 = cir.cmp(eq, %29, %30) : !cir.ptr<!void>, !cir.bool loc(#loc151)
        cir.if %31 {
          %32 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc42)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc43)
          %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc44)
          cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc42)
        } loc(#loc152)
      } loc(#loc150)
      %20 = cir.load %8 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc45)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc45)
      %22 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc46)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc46)
      %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc47)
      %25 = cir.load %8 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc48)
      %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc48)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc49)
      %27 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc50)
      %28 = cir.load %8 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc51)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc50)
    } loc(#loc145)
    cir.return loc(#loc14)
  } loc(#loc141)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc153)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc56, #loc57])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc155)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc156)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc157)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc62)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc59)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!void>> loc(#loc59)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc156)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc63)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc64)
    cir.store %6, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc157)
    cir.scope {
      %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc159)
      %8 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc160)
      %9 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc71)
      %10 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc72)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc72)
      %12 = cir.call @strlen(%11) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc71)
      cir.store %12, %7 : !u64i, !cir.ptr<!u64i> loc(#loc159)
      %13 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc73)
      %14 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc74)
      %15 = cir.const #cir.int<1> : !s32i loc(#loc75)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc75)
      %17 = cir.binop(add, %14, %16) : !u64i loc(#loc161)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc76)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc76)
      %20 = cir.call @calloc(%17, %19) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc73)
      cir.store %20, %8 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc160)
      cir.scope {
        %31 = cir.load %8 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc79)
        %32 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc80)
        %33 = cir.cmp(eq, %31, %32) : !cir.ptr<!void>, !cir.bool loc(#loc163)
        cir.if %33 {
          %34 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc82)
          %35 = cir.const #cir.int<1> : !s32i loc(#loc83)
          %36 = cir.unary(minus, %35) nsw : !s32i, !s32i loc(#loc84)
          cir.call @exit(%36) : (!s32i) -> () extra(#fn_attr) loc(#loc82)
        } loc(#loc164)
      } loc(#loc162)
      %21 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc85)
      %22 = cir.load %8 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc86)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc86)
      %24 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc87)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc87)
      %26 = cir.call @strcpy(%23, %25) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc85)
      %27 = cir.load %8 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc88)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc88)
      cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc89)
      %29 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc90)
      %30 = cir.load %8 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc91)
      cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc90)
    } loc(#loc158)
    cir.return loc(#loc55)
  } loc(#loc154)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc165)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc166)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc98, #loc99])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc168)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc169)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc170)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc104)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc101)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!void>> loc(#loc101)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc169)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc105)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc106)
    cir.store %6, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc170)
    cir.scope {
      %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc172)
      %8 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc173)
      %9 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc113)
      %10 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc114)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc114)
      %12 = cir.call @wcslen(%11) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc113)
      cir.store %12, %7 : !u64i, !cir.ptr<!u64i> loc(#loc172)
      %13 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc115)
      %14 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc116)
      %15 = cir.const #cir.int<1> : !s32i loc(#loc117)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc117)
      %17 = cir.binop(add, %14, %16) : !u64i loc(#loc174)
      %18 = cir.const #cir.int<4> : !u64i loc(#loc175)
      %19 = cir.call @calloc(%17, %18) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc115)
      cir.store %19, %8 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc173)
      cir.scope {
        %29 = cir.load %8 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc122)
        %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc123)
        %31 = cir.cmp(eq, %29, %30) : !cir.ptr<!void>, !cir.bool loc(#loc177)
        cir.if %31 {
          %32 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc125)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc126)
          %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc127)
          cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc125)
        } loc(#loc178)
      } loc(#loc176)
      %20 = cir.load %8 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc128)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc128)
      %22 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc129)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc129)
      %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc130)
      %25 = cir.load %8 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc131)
      %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc131)
      cir.call @printWLine(%26) : (!cir.ptr<!s32i>) -> () loc(#loc132)
      %27 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc133)
      %28 = cir.load %8 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc134)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc133)
    } loc(#loc171)
    cir.return loc(#loc97)
  } loc(#loc167)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("/usr/include/stdlib.h":675:1)
#loc4 = loc("/usr/include/stdlib.h":676:14)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("/usr/include/wchar.h":98:1)
#loc8 = loc("/usr/include/wchar.h":100:14)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("/usr/include/stdlib.h":687:1)
#loc12 = loc("/usr/include/stdlib.h":687:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":24:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":39:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":27:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":27:34)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":29:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":29:28)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":25:1)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":29:21)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":29:20)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":30:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":38:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":32:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":32:45)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":33:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":33:64)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":32:26)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":32:41)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":33:31)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":33:38)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":33:46)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":33:49)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":33:63)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":34:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":34:37)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":34:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":34:21)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":34:27)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":34:28)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":34:34)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":34:33)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":35:22)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":35:28)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":35:15)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":36:27)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":36:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":37:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":37:14)
#loc52 = loc("/usr/include/string.h":141:1)
#loc53 = loc("/usr/include/string.h":142:14)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":46:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":61:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":49:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":49:34)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":51:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":51:28)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":47:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":51:21)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":51:20)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":52:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":60:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":54:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":54:45)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":55:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":55:50)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":54:26)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":54:41)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":55:31)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":55:38)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":55:46)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":55:49)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":56:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":56:37)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":56:13)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":56:21)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":56:27)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":56:28)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":56:34)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":56:33)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":57:15)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":57:22)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":57:28)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":58:27)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":58:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":59:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":59:14)
#loc92 = loc("/usr/include/wchar.h":247:1)
#loc93 = loc("/usr/include/wchar.h":247:51)
#loc94 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc95 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":64:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":79:1)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":67:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":67:34)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":69:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":69:28)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":65:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":69:21)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":69:20)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":70:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":78:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":72:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":72:48)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":73:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":73:64)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":72:26)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":72:44)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":73:31)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":73:38)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":73:46)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":73:49)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":73:63)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":74:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":74:37)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":74:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":74:21)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":74:27)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":74:28)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":74:34)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":74:33)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":75:22)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":75:28)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":75:15)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":76:31)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":76:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":77:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c":77:14)
#loc135 = loc(fused[#loc1, #loc2])
#loc136 = loc(fused[#loc3, #loc4])
#loc137 = loc(fused[#loc5, #loc6])
#loc138 = loc(fused[#loc7, #loc8])
#loc139 = loc(fused[#loc9, #loc10])
#loc140 = loc(fused[#loc11, #loc12])
#loc141 = loc(fused[#loc13, #loc14])
#loc143 = loc(fused[#loc17, #loc18])
#loc144 = loc(fused[#loc19, #loc20])
#loc145 = loc(fused[#loc24, #loc25])
#loc146 = loc(fused[#loc26, #loc27])
#loc147 = loc(fused[#loc28, #loc29])
#loc148 = loc(fused[#loc33, #loc34])
#loc149 = loc(fused[#loc35, #loc36])
#loc150 = loc(fused[#loc37, #loc38])
#loc151 = loc(fused[#loc39, #loc40])
#loc152 = loc(fused[#loc41, #loc38])
#loc153 = loc(fused[#loc52, #loc53])
#loc154 = loc(fused[#loc54, #loc55])
#loc156 = loc(fused[#loc58, #loc59])
#loc157 = loc(fused[#loc60, #loc61])
#loc158 = loc(fused[#loc65, #loc66])
#loc159 = loc(fused[#loc67, #loc68])
#loc160 = loc(fused[#loc69, #loc70])
#loc161 = loc(fused[#loc74, #loc75])
#loc162 = loc(fused[#loc77, #loc78])
#loc163 = loc(fused[#loc79, #loc80])
#loc164 = loc(fused[#loc81, #loc78])
#loc165 = loc(fused[#loc92, #loc93])
#loc166 = loc(fused[#loc94, #loc95])
#loc167 = loc(fused[#loc96, #loc97])
#loc169 = loc(fused[#loc100, #loc101])
#loc170 = loc(fused[#loc102, #loc103])
#loc171 = loc(fused[#loc107, #loc108])
#loc172 = loc(fused[#loc109, #loc110])
#loc173 = loc(fused[#loc111, #loc112])
#loc174 = loc(fused[#loc116, #loc117])
#loc175 = loc(fused[#loc118, #loc119])
#loc176 = loc(fused[#loc120, #loc121])
#loc177 = loc(fused[#loc122, #loc123])
#loc178 = loc(fused[#loc124, #loc121])
