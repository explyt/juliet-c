!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc12 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":25:21)
#loc13 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":25:27)
#loc58 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":58:26)
#loc59 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":58:32)
#loc107 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":94:26)
#loc108 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":94:32)
#loc154 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":125:25)
#loc155 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":125:31)
#loc189 = loc(fused[#loc12, #loc13])
#loc207 = loc(fused[#loc58, #loc59])
#loc224 = loc(fused[#loc107, #loc108])
#loc241 = loc(fused[#loc154, #loc155])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_multiply_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc184)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc185)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%hd\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc5)
  cir.global "private"  internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc186)
  cir.func private  @printIntLine(!s32i) loc(#loc187)
  cir.func internal private  @badSink(%arg0: !s16i loc(fused[#loc12, #loc13])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc189)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc14)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc186)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc21)
          %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc21)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc22)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !s32i loc(#loc193)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc23)
          cir.if %8 {
            %9 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc195)
            %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc27)
            %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc27)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc26)
            %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc27)
            %14 = cir.cast(integral, %13 : !s32i), !s16i loc(#loc27)
            cir.store %14, %9 : !s16i, !cir.ptr<!s16i> loc(#loc195)
            %15 = cir.load %9 : !cir.ptr<!s16i>, !s16i loc(#loc28)
            %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc28)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc29)
          } loc(#loc194)
        } loc(#loc192)
      } loc(#loc191)
    } loc(#loc190)
    cir.return loc(#loc11)
  } loc(#loc188)
  cir.func no_proto  @CWE190_Integer_Overflow__short_fscanf_multiply_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc197)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc34)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc34)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc198)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc36)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc185)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc37)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc36)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %10 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc186)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc40)
    cir.call @badSink(%11) : (!s16i) -> () loc(#loc41)
    cir.return loc(#loc31)
  } loc(#loc196)
  cir.func no_proto  @CWE190_Integer_Overflow__short_fscanf_multiply_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc43)
  } loc(#loc200)
  cir.global "private"  internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc204)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc205)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc54)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc55)
  cir.func internal private  @goodB2G1Sink(%arg0: !s16i loc(fused[#loc58, #loc59])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc207)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc60)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc204)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc63)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc63)
      cir.if %3 {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc54)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc54)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc67)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc70)
          %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc70)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc71)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !s32i loc(#loc211)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc72)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc76)
              %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc76)
              %11 = cir.const #cir.int<32767> : !s32i loc(#loc77)
              %12 = cir.const #cir.int<2> : !s32i loc(#loc78)
              %13 = cir.binop(div, %11, %12) : !s32i loc(#loc214)
              %14 = cir.cmp(lt, %10, %13) : !s32i, !s32i loc(#loc215)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc80)
              cir.if %15 {
                %16 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc217)
                %17 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc86)
                %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc86)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc85)
                %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc86)
                %21 = cir.cast(integral, %20 : !s32i), !s16i loc(#loc86)
                cir.store %21, %16 : !s16i, !cir.ptr<!s16i> loc(#loc217)
                %22 = cir.load %16 : !cir.ptr<!s16i>, !s16i loc(#loc87)
                %23 = cir.cast(integral, %22 : !s16i), !s32i loc(#loc87)
                cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc88)
              } else {
                %16 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc55)
                %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc55)
                cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc89)
              } loc(#loc216)
            } loc(#loc213)
          } loc(#loc212)
        } loc(#loc210)
      } loc(#loc209)
    } loc(#loc208)
    cir.return loc(#loc57)
  } loc(#loc206)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc219)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc94)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc94)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc220)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc96)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc185)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc97)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc98)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc98)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc96)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc99)
    %10 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc204)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc101)
    cir.call @goodB2G1Sink(%11) : (!s16i) -> () loc(#loc102)
    cir.return loc(#loc91)
  } loc(#loc218)
  cir.global "private"  internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc222)
  cir.func internal private  @goodB2G2Sink(%arg0: !s16i loc(fused[#loc107, #loc108])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc224)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc109)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc222)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc112)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc112)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc116)
          %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc116)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc117)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !s32i loc(#loc228)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc118)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc122)
              %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc122)
              %11 = cir.const #cir.int<32767> : !s32i loc(#loc123)
              %12 = cir.const #cir.int<2> : !s32i loc(#loc124)
              %13 = cir.binop(div, %11, %12) : !s32i loc(#loc231)
              %14 = cir.cmp(lt, %10, %13) : !s32i, !s32i loc(#loc232)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc126)
              cir.if %15 {
                %16 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc234)
                %17 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc132)
                %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc132)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc131)
                %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc132)
                %21 = cir.cast(integral, %20 : !s32i), !s16i loc(#loc132)
                cir.store %21, %16 : !s16i, !cir.ptr<!s16i> loc(#loc234)
                %22 = cir.load %16 : !cir.ptr<!s16i>, !s16i loc(#loc133)
                %23 = cir.cast(integral, %22 : !s16i), !s32i loc(#loc133)
                cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc134)
              } else {
                %16 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc135)
                %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc135)
                cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc136)
              } loc(#loc233)
            } loc(#loc230)
          } loc(#loc229)
        } loc(#loc227)
      } loc(#loc226)
    } loc(#loc225)
    cir.return loc(#loc106)
  } loc(#loc223)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc236)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc141)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc141)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc237)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc143)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc185)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc144)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc145)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc145)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc143)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc146)
    %10 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc222)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc238)
    %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc148)
    cir.call @goodB2G2Sink(%11) : (!s16i) -> () loc(#loc149)
    cir.return loc(#loc138)
  } loc(#loc235)
  cir.global "private"  internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc239)
  cir.func internal private  @goodG2BSink(%arg0: !s16i loc(fused[#loc154, #loc155])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc241)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc156)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc239)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc159)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc159)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc163)
          %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc163)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc164)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !s32i loc(#loc245)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc165)
          cir.if %8 {
            %9 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc247)
            %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc169)
            %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc169)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc168)
            %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc169)
            %14 = cir.cast(integral, %13 : !s32i), !s16i loc(#loc169)
            cir.store %14, %9 : !s16i, !cir.ptr<!s16i> loc(#loc247)
            %15 = cir.load %9 : !cir.ptr<!s16i>, !s16i loc(#loc170)
            %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc170)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc171)
          } loc(#loc246)
        } loc(#loc244)
      } loc(#loc243)
    } loc(#loc242)
    cir.return loc(#loc153)
  } loc(#loc240)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc249)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc176)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc176)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc250)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc178)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc178)
    cir.store %4, %0 : !s16i, !cir.ptr<!s16i> loc(#loc251)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc180)
    %6 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc239)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc182)
    cir.call @goodG2BSink(%7) : (!s16i) -> () loc(#loc183)
    cir.return loc(#loc173)
  } loc(#loc248)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_multiply_21.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":43:20)
#loc6 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":23:1)
#loc7 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":23:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":25:1)
#loc11 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":36:1)
#loc14 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":26:1)
#loc15 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":27:5)
#loc16 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":35:5)
#loc17 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":27:8)
#loc18 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":28:5)
#loc19 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":29:9)
#loc20 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":34:9)
#loc21 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":29:12)
#loc22 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":29:19)
#loc23 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":29:17)
#loc24 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":30:9)
#loc25 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":32:13)
#loc26 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":32:35)
#loc27 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":32:28)
#loc28 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":33:26)
#loc29 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":33:13)
#loc30 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":38:1)
#loc31 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":46:1)
#loc32 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":40:5)
#loc33 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":40:11)
#loc34 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":41:12)
#loc35 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":41:5)
#loc36 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":43:5)
#loc37 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":43:13)
#loc38 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":44:17)
#loc39 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":44:5)
#loc40 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":45:13)
#loc41 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":45:5)
#loc42 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":148:1)
#loc43 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":153:1)
#loc44 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":150:5)
#loc45 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":150:14)
#loc46 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":151:5)
#loc47 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":151:14)
#loc48 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":152:5)
#loc49 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":152:13)
#loc50 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":53:1)
#loc51 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":53:29)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc54 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":63:19)
#loc55 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":77:27)
#loc56 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":58:1)
#loc57 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":81:1)
#loc60 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":59:1)
#loc61 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":60:5)
#loc62 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":80:5)
#loc63 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":60:8)
#loc64 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":61:5)
#loc65 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":64:5)
#loc66 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":66:5)
#loc67 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":63:9)
#loc68 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":67:9)
#loc69 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":79:9)
#loc70 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":67:12)
#loc71 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":67:19)
#loc72 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":67:17)
#loc73 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":68:9)
#loc74 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":70:13)
#loc75 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":78:13)
#loc76 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":70:17)
#loc77 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":70:25)
#loc78 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":70:34)
#loc79 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":70:35)
#loc80 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":70:22)
#loc81 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":71:13)
#loc82 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":74:13)
#loc83 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":76:13)
#loc84 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":72:17)
#loc85 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":72:39)
#loc86 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":72:32)
#loc87 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":73:30)
#loc88 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":73:17)
#loc89 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":77:17)
#loc90 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":83:1)
#loc91 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":91:1)
#loc92 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":85:5)
#loc93 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":85:11)
#loc94 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":86:12)
#loc95 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":86:5)
#loc96 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":88:5)
#loc97 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":88:13)
#loc98 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":88:20)
#loc99 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":89:22)
#loc100 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":89:5)
#loc101 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":90:18)
#loc102 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":90:5)
#loc103 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":54:1)
#loc104 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":54:29)
#loc105 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":94:1)
#loc106 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":112:1)
#loc109 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":95:1)
#loc110 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":96:5)
#loc111 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":111:5)
#loc112 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":96:8)
#loc113 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":97:5)
#loc114 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":98:9)
#loc115 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":110:9)
#loc116 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":98:12)
#loc117 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":98:19)
#loc118 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":98:17)
#loc119 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":99:9)
#loc120 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":101:13)
#loc121 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":109:13)
#loc122 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":101:17)
#loc123 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":101:25)
#loc124 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":101:34)
#loc125 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":101:35)
#loc126 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":101:22)
#loc127 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":102:13)
#loc128 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":105:13)
#loc129 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":107:13)
#loc130 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":103:17)
#loc131 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":103:39)
#loc132 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":103:32)
#loc133 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":104:30)
#loc134 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":104:17)
#loc135 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":108:27)
#loc136 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":108:17)
#loc137 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":114:1)
#loc138 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":122:1)
#loc139 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":116:5)
#loc140 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":116:11)
#loc141 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":117:12)
#loc142 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":117:5)
#loc143 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":119:5)
#loc144 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":119:13)
#loc145 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":119:20)
#loc146 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":120:22)
#loc147 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":120:5)
#loc148 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":121:18)
#loc149 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":121:5)
#loc150 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":55:1)
#loc151 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":55:28)
#loc152 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":125:1)
#loc153 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":136:1)
#loc156 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":126:1)
#loc157 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":127:5)
#loc158 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":135:5)
#loc159 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":127:8)
#loc160 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":128:5)
#loc161 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":129:9)
#loc162 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":134:9)
#loc163 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":129:12)
#loc164 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":129:19)
#loc165 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":129:17)
#loc166 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":130:9)
#loc167 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":132:13)
#loc168 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":132:35)
#loc169 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":132:28)
#loc170 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":133:26)
#loc171 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":133:13)
#loc172 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":138:1)
#loc173 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":146:1)
#loc174 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":140:5)
#loc175 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":140:11)
#loc176 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":141:12)
#loc177 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":141:5)
#loc178 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":143:12)
#loc179 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":143:5)
#loc180 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":144:21)
#loc181 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":144:5)
#loc182 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":145:17)
#loc183 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_21.c":145:5)
#loc184 = loc(fused[#loc1, #loc2])
#loc185 = loc(fused[#loc3, #loc4])
#loc186 = loc(fused[#loc6, #loc7])
#loc187 = loc(fused[#loc8, #loc9])
#loc188 = loc(fused[#loc10, #loc11])
#loc190 = loc(fused[#loc15, #loc16])
#loc191 = loc(fused[#loc18, #loc16])
#loc192 = loc(fused[#loc19, #loc20])
#loc193 = loc(fused[#loc21, #loc22])
#loc194 = loc(fused[#loc24, #loc20])
#loc195 = loc(fused[#loc25, #loc26])
#loc196 = loc(fused[#loc30, #loc31])
#loc197 = loc(fused[#loc32, #loc33])
#loc198 = loc(fused[#loc35, #loc34])
#loc199 = loc(fused[#loc39, #loc38])
#loc200 = loc(fused[#loc42, #loc43])
#loc201 = loc(fused[#loc44, #loc45])
#loc202 = loc(fused[#loc46, #loc47])
#loc203 = loc(fused[#loc48, #loc49])
#loc204 = loc(fused[#loc50, #loc51])
#loc205 = loc(fused[#loc52, #loc53])
#loc206 = loc(fused[#loc56, #loc57])
#loc208 = loc(fused[#loc61, #loc62])
#loc209 = loc(fused[#loc64, #loc65, #loc66, #loc62])
#loc210 = loc(fused[#loc68, #loc69])
#loc211 = loc(fused[#loc70, #loc71])
#loc212 = loc(fused[#loc73, #loc69])
#loc213 = loc(fused[#loc74, #loc75])
#loc214 = loc(fused[#loc77, #loc78])
#loc215 = loc(fused[#loc76, #loc79])
#loc216 = loc(fused[#loc81, #loc82, #loc83, #loc75])
#loc217 = loc(fused[#loc84, #loc85])
#loc218 = loc(fused[#loc90, #loc91])
#loc219 = loc(fused[#loc92, #loc93])
#loc220 = loc(fused[#loc95, #loc94])
#loc221 = loc(fused[#loc100, #loc99])
#loc222 = loc(fused[#loc103, #loc104])
#loc223 = loc(fused[#loc105, #loc106])
#loc225 = loc(fused[#loc110, #loc111])
#loc226 = loc(fused[#loc113, #loc111])
#loc227 = loc(fused[#loc114, #loc115])
#loc228 = loc(fused[#loc116, #loc117])
#loc229 = loc(fused[#loc119, #loc115])
#loc230 = loc(fused[#loc120, #loc121])
#loc231 = loc(fused[#loc123, #loc124])
#loc232 = loc(fused[#loc122, #loc125])
#loc233 = loc(fused[#loc127, #loc128, #loc129, #loc121])
#loc234 = loc(fused[#loc130, #loc131])
#loc235 = loc(fused[#loc137, #loc138])
#loc236 = loc(fused[#loc139, #loc140])
#loc237 = loc(fused[#loc142, #loc141])
#loc238 = loc(fused[#loc147, #loc146])
#loc239 = loc(fused[#loc150, #loc151])
#loc240 = loc(fused[#loc152, #loc153])
#loc242 = loc(fused[#loc157, #loc158])
#loc243 = loc(fused[#loc160, #loc158])
#loc244 = loc(fused[#loc161, #loc162])
#loc245 = loc(fused[#loc163, #loc164])
#loc246 = loc(fused[#loc166, #loc162])
#loc247 = loc(fused[#loc167, #loc168])
#loc248 = loc(fused[#loc172, #loc173])
#loc249 = loc(fused[#loc174, #loc175])
#loc250 = loc(fused[#loc177, #loc176])
#loc251 = loc(fused[#loc179, #loc178])
#loc252 = loc(fused[#loc181, #loc180])
