!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":108:10)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":108:14)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":108:20)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":108:32)
#loc157 = loc(fused[#loc103, #loc104])
#loc158 = loc(fused[#loc105, #loc106])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc23_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc119)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc120)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc121)
  cir.func private @printLongLongLine(!s64i) loc(#loc122)
  cir.func @_ZN49CWE190_Integer_Overflow__int64_t_fscanf_square_333badEv() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc124)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc125)
    cir.store %0, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc14)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc15)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc126)
    %3 = cir.get_global @__isoc23_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc17)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc120)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc18)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc121)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc121)
    %8 = cir.call @__isoc23_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc17)
    cir.scope {
      %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc128)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc22)
      %11 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc22)
      cir.store %11, %9 : !s64i, !cir.ptr<!s64i> loc(#loc128)
      cir.scope {
        %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc130)
        %13 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc27)
        %14 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc26)
        %15 = cir.binop(mul, %13, %14) nsw : !s64i loc(#loc27)
        cir.store %15, %12 : !s64i, !cir.ptr<!s64i> loc(#loc130)
        %16 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc28)
        cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc29)
      } loc(#loc129)
    } loc(#loc127)
    cir.return loc(#loc10)
  } loc(#loc123)
  cir.func internal private @_ZN49CWE190_Integer_Overflow__int64_t_fscanf_square_33L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc132)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc133)
    cir.store %0, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc35)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc36)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc134)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc38)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc38)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc135)
    cir.scope {
      %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc137)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc43)
      %7 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc43)
      cir.store %7, %5 : !s64i, !cir.ptr<!s64i> loc(#loc137)
      cir.scope {
        %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc139)
        %9 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc48)
        %10 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc47)
        %11 = cir.binop(mul, %9, %10) nsw : !s64i loc(#loc48)
        cir.store %11, %8 : !s64i, !cir.ptr<!s64i> loc(#loc139)
        %12 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc49)
        cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc50)
      } loc(#loc138)
    } loc(#loc136)
    cir.return loc(#loc31)
  } loc(#loc131)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc140)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc54)
  cir.func internal private @_ZN49CWE190_Integer_Overflow__int64_t_fscanf_square_33L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc142)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc143)
    cir.store %0, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc60)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc61)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc144)
    %3 = cir.get_global @__isoc23_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc63)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc120)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc64)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc145)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc145)
    %8 = cir.call @__isoc23_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc63)
    cir.scope {
      %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc147)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc70)
      %11 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc70)
      cir.store %11, %9 : !s64i, !cir.ptr<!s64i> loc(#loc147)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc73)
        %13 = cir.call @imaxabs(%12) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc74)
        %14 = cir.cast(int_to_float, %13 : !s64i), !cir.long_double<!cir.f80> loc(#loc74)
        %15 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc75)
        %16 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc76)
        %17 = cir.cast(int_to_float, %16 : !s64i), !cir.long_double<!cir.f80> loc(#loc76)
        %18 = cir.call @sqrtl(%17) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc75)
        %19 = cir.cmp(le, %14, %18) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc149)
        cir.if %19 {
          %20 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc151)
          %21 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc83)
          %22 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc82)
          %23 = cir.binop(mul, %21, %22) nsw : !s64i loc(#loc83)
          cir.store %23, %20 : !s64i, !cir.ptr<!s64i> loc(#loc151)
          %24 = cir.load %20 : !cir.ptr<!s64i>, !s64i loc(#loc84)
          cir.call @printLongLongLine(%24) : (!s64i) -> () loc(#loc85)
        } else {
          %20 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc54)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc54)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc86)
        } loc(#loc150)
      } loc(#loc148)
    } loc(#loc146)
    cir.return loc(#loc56)
  } loc(#loc141)
  cir.func @_ZN49CWE190_Integer_Overflow__int64_t_fscanf_square_334goodEv() extra(#fn_attr) {
    cir.call @_ZN49CWE190_Integer_Overflow__int64_t_fscanf_square_33L7goodG2BEv() : () -> () loc(#loc89)
    cir.call @_ZN49CWE190_Integer_Overflow__int64_t_fscanf_square_33L7goodB2GEv() : () -> () loc(#loc90)
    cir.return loc(#loc88)
  } loc(#loc152)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc153)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc154)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc155)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc97)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc100)
  cir.func @main(%arg0: !s32i loc(fused[#loc103, #loc104]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc105, #loc106])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc157)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc158)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc102)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc107)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc107)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc108)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc109)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc109)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc110)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc97)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc97)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc111)
    cir.call @_ZN49CWE190_Integer_Overflow__int64_t_fscanf_square_334goodEv() : () -> () loc(#loc112)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc98)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc98)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc113)
    %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc99)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    cir.call @_ZN49CWE190_Integer_Overflow__int64_t_fscanf_square_333badEv() : () -> () loc(#loc115)
    %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc100)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc100)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc117)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc159)
    cir.return %15 : !s32i loc(#loc159)
  } loc(#loc156)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":0:0)
#loc1 = loc("/usr/include/stdio.h":442:1)
#loc2 = loc("/usr/include/stdio.h":444:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":34:20)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":34:24)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":28:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":43:1)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":30:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":30:13)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":31:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":31:24)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":32:12)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":32:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":34:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":34:13)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":35:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":42:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":36:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":36:24)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":37:9)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":41:9)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":39:13)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":39:37)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":39:30)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":40:31)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":40:13)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":50:1)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":65:1)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":52:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":52:13)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":53:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":53:24)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":54:12)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":54:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":56:12)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":56:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":57:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":64:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":58:9)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":58:24)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":59:9)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":63:9)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":61:13)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":61:37)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":61:30)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":62:31)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":62:13)
#loc51 = loc("/usr/include/inttypes.h":351:1)
#loc52 = loc("/usr/include/inttypes.h":351:74)
#loc53 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":85:23)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":68:1)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":88:1)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":70:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":70:13)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":71:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":71:24)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":72:12)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":72:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":74:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":74:13)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":74:20)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":74:24)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":75:5)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":87:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":76:9)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":76:24)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":78:9)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":86:9)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":78:31)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":78:13)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":78:40)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":78:46)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":78:55)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":79:9)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":82:9)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":84:9)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":80:13)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":80:37)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":80:30)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":81:31)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":81:13)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":85:13)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":90:1)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":94:1)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":92:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":93:5)
#loc91 = loc("/usr/include/stdlib.h":575:1)
#loc92 = loc("/usr/include/stdlib.h":575:41)
#loc93 = loc("/usr/include/time.h":76:1)
#loc94 = loc("/usr/include/time.h":76:38)
#loc95 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc96 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":113:15)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":115:15)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":118:15)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":120:15)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":108:1)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":123:1)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":109:1)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":111:27)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":111:22)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":111:5)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":113:5)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":114:5)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":115:5)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":118:5)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":119:5)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":120:5)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":122:12)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_33.cpp":122:5)
#loc119 = loc(fused[#loc1, #loc2])
#loc120 = loc(fused[#loc3, #loc4])
#loc121 = loc(fused[#loc5, #loc6])
#loc122 = loc(fused[#loc7, #loc8])
#loc123 = loc(fused[#loc9, #loc10])
#loc124 = loc(fused[#loc11, #loc12])
#loc125 = loc(fused[#loc13, #loc14])
#loc126 = loc(fused[#loc16, #loc15])
#loc127 = loc(fused[#loc19, #loc20])
#loc128 = loc(fused[#loc21, #loc22])
#loc129 = loc(fused[#loc23, #loc24])
#loc130 = loc(fused[#loc25, #loc26])
#loc131 = loc(fused[#loc30, #loc31])
#loc132 = loc(fused[#loc32, #loc33])
#loc133 = loc(fused[#loc34, #loc35])
#loc134 = loc(fused[#loc37, #loc36])
#loc135 = loc(fused[#loc39, #loc38])
#loc136 = loc(fused[#loc40, #loc41])
#loc137 = loc(fused[#loc42, #loc43])
#loc138 = loc(fused[#loc44, #loc45])
#loc139 = loc(fused[#loc46, #loc47])
#loc140 = loc(fused[#loc51, #loc52])
#loc141 = loc(fused[#loc55, #loc56])
#loc142 = loc(fused[#loc57, #loc58])
#loc143 = loc(fused[#loc59, #loc60])
#loc144 = loc(fused[#loc62, #loc61])
#loc145 = loc(fused[#loc65, #loc66])
#loc146 = loc(fused[#loc67, #loc68])
#loc147 = loc(fused[#loc69, #loc70])
#loc148 = loc(fused[#loc71, #loc72])
#loc149 = loc(fused[#loc74, #loc77])
#loc150 = loc(fused[#loc78, #loc79, #loc80, #loc72])
#loc151 = loc(fused[#loc81, #loc82])
#loc152 = loc(fused[#loc87, #loc88])
#loc153 = loc(fused[#loc91, #loc92])
#loc154 = loc(fused[#loc93, #loc94])
#loc155 = loc(fused[#loc95, #loc96])
#loc156 = loc(fused[#loc101, #loc102])
#loc159 = loc(fused[#loc118, #loc117])
