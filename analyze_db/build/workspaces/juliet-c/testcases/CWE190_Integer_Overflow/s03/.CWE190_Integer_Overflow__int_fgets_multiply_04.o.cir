!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc235)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc236)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc237)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc238)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc239)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_multiply_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc241)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc242)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc243)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc20)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc244)
    cir.br ^bb1 loc(#loc245)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %5 ^bb2, ^bb10 loc(#loc246)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc247)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc241)
    cir.store %6, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc241)
    cir.br ^bb4 loc(#loc248)
  ^bb4:  // pred: ^bb3
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc30)
    %8 = cir.const #cir.int<3> : !s32i loc(#loc31)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc31)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc31)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc31)
    %12 = cir.const #cir.int<2> : !s32i loc(#loc31)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc31)
    %14 = cir.binop(add, %11, %13) : !u64i loc(#loc31)
    %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc31)
    %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc236)
    %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc32)
    %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc33)
    %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
    %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc249)
    cir.brcond %21 ^bb5, ^bb6 loc(#loc250)
  ^bb5:  // pred: ^bb4
    %22 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc38)
    %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc39)
    cir.store %23, %2 : !s32i, !cir.ptr<!s32i> loc(#loc251)
    cir.br ^bb7 loc(#loc36)
  ^bb6:  // pred: ^bb4
    %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc42)
    cir.br ^bb7 loc(#loc29)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc29)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc27)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc23)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc23)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc252)
  ^bb12:  // pred: ^bb11
    %26 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc45)
    cir.brcond %27 ^bb13, ^bb18 loc(#loc253)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc254)
  ^bb14:  // pred: ^bb13
    %28 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc50)
    %30 = cir.cmp(gt, %28, %29) : !s32i, !cir.bool loc(#loc255)
    cir.brcond %30 ^bb15, ^bb16 loc(#loc256)
  ^bb15:  // pred: ^bb14
    %31 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    %32 = cir.const #cir.int<2> : !s32i loc(#loc17)
    %33 = cir.binop(mul, %31, %32) nsw : !s32i loc(#loc52)
    cir.store %33, %1 : !s32i, !cir.ptr<!s32i> loc(#loc242)
    %34 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    cir.call @printIntLine(%34) : (!s32i) -> () loc(#loc54)
    cir.br ^bb16 loc(#loc48)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc48)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc44)
  ^bb18:  // 2 preds: ^bb12, ^bb17
    cir.br ^bb19 loc(#loc44)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc13)
  } loc(#loc240)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_multiply_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc258)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc57)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc259)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc59)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc260)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc61)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc261)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc63)
    cir.return loc(#loc56)
  } loc(#loc257)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc66)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc263)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc264)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc265)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc75)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc266)
    cir.br ^bb1 loc(#loc267)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc79)
    cir.brcond %5 ^bb2, ^bb10 loc(#loc268)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc269)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc263)
    cir.store %6, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc263)
    cir.br ^bb4 loc(#loc270)
  ^bb4:  // pred: ^bb3
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc85)
    %8 = cir.const #cir.int<3> : !s32i loc(#loc86)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc86)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc86)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc86)
    %12 = cir.const #cir.int<2> : !s32i loc(#loc86)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc86)
    %14 = cir.binop(add, %11, %13) : !u64i loc(#loc86)
    %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc86)
    %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc236)
    %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc87)
    %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc88)
    %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc89)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc89)
    %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc271)
    cir.brcond %21 ^bb5, ^bb6 loc(#loc272)
  ^bb5:  // pred: ^bb4
    %22 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc93)
    %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc94)
    cir.store %23, %2 : !s32i, !cir.ptr<!s32i> loc(#loc273)
    cir.br ^bb7 loc(#loc91)
  ^bb6:  // pred: ^bb4
    %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc97)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc97)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    cir.br ^bb7 loc(#loc84)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc84)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc82)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc78)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc78)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc274)
  ^bb12:  // pred: ^bb11
    %26 = cir.const #cir.int<0> : !s32i loc(#loc101)
    %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc101)
    cir.brcond %27 ^bb13, ^bb14 loc(#loc275)
  ^bb13:  // pred: ^bb12
    %28 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc65)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    cir.br ^bb24 loc(#loc103)
  ^bb14:  // pred: ^bb12
    cir.br ^bb15 loc(#loc276)
  ^bb15:  // pred: ^bb14
    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc109)
    %32 = cir.cmp(gt, %30, %31) : !s32i, !cir.bool loc(#loc277)
    cir.brcond %32 ^bb16, ^bb22 loc(#loc278)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc279)
  ^bb17:  // pred: ^bb16
    %33 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    %34 = cir.const #cir.int<2147483647> : !s32i loc(#loc114)
    %35 = cir.const #cir.int<2> : !s32i loc(#loc115)
    %36 = cir.binop(div, %34, %35) : !s32i loc(#loc280)
    %37 = cir.cmp(lt, %33, %36) : !s32i, !cir.bool loc(#loc281)
    cir.brcond %37 ^bb18, ^bb19 loc(#loc282)
  ^bb18:  // pred: ^bb17
    %38 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc120)
    %39 = cir.const #cir.int<2> : !s32i loc(#loc72)
    %40 = cir.binop(mul, %38, %39) nsw : !s32i loc(#loc120)
    cir.store %40, %1 : !s32i, !cir.ptr<!s32i> loc(#loc264)
    %41 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    cir.call @printIntLine(%41) : (!s32i) -> () loc(#loc122)
    cir.br ^bb20 loc(#loc118)
  ^bb19:  // pred: ^bb17
    %42 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc66)
    %43 = cir.cast(array_to_ptrdecay, %42 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%43) : (!cir.ptr<!s8i>) -> () loc(#loc123)
    cir.br ^bb20 loc(#loc112)
  ^bb20:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc112)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc107)
  ^bb22:  // 2 preds: ^bb15, ^bb21
    cir.br ^bb23 loc(#loc107)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc100)
  ^bb24:  // 2 preds: ^bb13, ^bb23
    cir.br ^bb25 loc(#loc100)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc68)
  } loc(#loc262)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc284)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc285)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc286)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc132)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc287)
    cir.br ^bb1 loc(#loc288)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc136)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc136)
    cir.brcond %5 ^bb2, ^bb10 loc(#loc289)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc290)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc284)
    cir.store %6, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc284)
    cir.br ^bb4 loc(#loc291)
  ^bb4:  // pred: ^bb3
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc142)
    %8 = cir.const #cir.int<3> : !s32i loc(#loc143)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc143)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc143)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc143)
    %12 = cir.const #cir.int<2> : !s32i loc(#loc143)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc143)
    %14 = cir.binop(add, %11, %13) : !u64i loc(#loc143)
    %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc143)
    %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc236)
    %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc144)
    %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc145)
    %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc146)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc146)
    %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc292)
    cir.brcond %21 ^bb5, ^bb6 loc(#loc293)
  ^bb5:  // pred: ^bb4
    %22 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc150)
    %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc151)
    cir.store %23, %2 : !s32i, !cir.ptr<!s32i> loc(#loc294)
    cir.br ^bb7 loc(#loc148)
  ^bb6:  // pred: ^bb4
    %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc154)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc154)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc155)
    cir.br ^bb7 loc(#loc141)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc141)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc139)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc135)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc135)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc295)
  ^bb12:  // pred: ^bb11
    %26 = cir.const #cir.int<1> : !s32i loc(#loc158)
    %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc158)
    cir.brcond %27 ^bb13, ^bb23 loc(#loc296)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc297)
  ^bb14:  // pred: ^bb13
    %28 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc162)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc163)
    %30 = cir.cmp(gt, %28, %29) : !s32i, !cir.bool loc(#loc298)
    cir.brcond %30 ^bb15, ^bb21 loc(#loc299)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc300)
  ^bb16:  // pred: ^bb15
    %31 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc167)
    %32 = cir.const #cir.int<2147483647> : !s32i loc(#loc168)
    %33 = cir.const #cir.int<2> : !s32i loc(#loc169)
    %34 = cir.binop(div, %32, %33) : !s32i loc(#loc301)
    %35 = cir.cmp(lt, %31, %34) : !s32i, !cir.bool loc(#loc302)
    cir.brcond %35 ^bb17, ^bb18 loc(#loc303)
  ^bb17:  // pred: ^bb16
    %36 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc174)
    %37 = cir.const #cir.int<2> : !s32i loc(#loc129)
    %38 = cir.binop(mul, %36, %37) nsw : !s32i loc(#loc174)
    cir.store %38, %1 : !s32i, !cir.ptr<!s32i> loc(#loc285)
    %39 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc175)
    cir.call @printIntLine(%39) : (!s32i) -> () loc(#loc176)
    cir.br ^bb19 loc(#loc172)
  ^bb18:  // pred: ^bb16
    %40 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc177)
    %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc177)
    cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc178)
    cir.br ^bb19 loc(#loc166)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc166)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc161)
  ^bb21:  // 2 preds: ^bb14, ^bb20
    cir.br ^bb22 loc(#loc161)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc157)
  ^bb23:  // 2 preds: ^bb12, ^bb22
    cir.br ^bb24 loc(#loc157)
  ^bb24:  // pred: ^bb23
    cir.return loc(#loc125)
  } loc(#loc283)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc305)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc306)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc185)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc307)
    cir.br ^bb1 loc(#loc308)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc189)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc189)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc309)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc193)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc193)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc194)
    cir.br ^bb4 loc(#loc191)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc195)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc310)
    cir.br ^bb4 loc(#loc188)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc188)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc311)
  ^bb6:  // pred: ^bb5
    %8 = cir.const #cir.int<1> : !s32i loc(#loc199)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc199)
    cir.brcond %9 ^bb7, ^bb12 loc(#loc312)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc313)
  ^bb8:  // pred: ^bb7
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc203)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc204)
    %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc314)
    cir.brcond %12 ^bb9, ^bb10 loc(#loc315)
  ^bb9:  // pred: ^bb8
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc206)
    %14 = cir.const #cir.int<2> : !s32i loc(#loc182)
    %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc206)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc305)
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc207)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc208)
    cir.br ^bb10 loc(#loc202)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc202)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc198)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc198)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc180)
  } loc(#loc304)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc317)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc318)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc215)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc319)
    cir.br ^bb1 loc(#loc320)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc219)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc219)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc321)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<2> : !s32i loc(#loc221)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc322)
    cir.br ^bb3 loc(#loc218)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc218)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc323)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<1> : !s32i loc(#loc225)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc225)
    cir.brcond %7 ^bb6, ^bb11 loc(#loc324)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc325)
  ^bb7:  // pred: ^bb6
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc229)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc230)
    %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc326)
    cir.brcond %10 ^bb8, ^bb9 loc(#loc327)
  ^bb8:  // pred: ^bb7
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc232)
    %12 = cir.const #cir.int<2> : !s32i loc(#loc212)
    %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc232)
    cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc317)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc233)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc234)
    cir.br ^bb9 loc(#loc228)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc228)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc224)
  ^bb11:  // 2 preds: ^bb5, ^bb10
    cir.br ^bb12 loc(#loc224)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc210)
  } loc(#loc316)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_04.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":47:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":30:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":60:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":38:13)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":38:49)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":56:13)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":56:33)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":32:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":32:9)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":34:12)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":34:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":35:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":50:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":35:8)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":36:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":37:9)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":49:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":40:13)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":48:13)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":40:23)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":40:36)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":40:53)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":40:17)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":40:63)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":41:13)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":44:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":46:13)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":43:29)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":43:24)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":43:17)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":43:40)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":47:17)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":51:5)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":59:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":51:8)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":52:5)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":53:9)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":58:9)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":53:12)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":53:19)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":54:9)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":56:26)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":57:26)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":57:13)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":200:1)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":206:1)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":202:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":202:14)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":203:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":203:14)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":204:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":204:14)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":205:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":205:14)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":91:19)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":105:27)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":67:1)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":109:1)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":75:13)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":75:49)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":100:17)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":100:37)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":69:5)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":69:9)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":71:12)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":71:5)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":72:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":87:5)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":72:8)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":73:5)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":74:9)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":86:9)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":77:13)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":85:13)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":77:23)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":77:36)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":77:53)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":77:17)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":77:63)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":78:13)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":81:13)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":83:13)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":80:29)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":80:24)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":80:17)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":80:40)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":84:27)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":84:17)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":88:5)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":108:5)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":88:8)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":89:5)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":92:5)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":94:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":91:9)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":95:9)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":107:9)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":95:12)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":95:19)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":96:9)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":98:13)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":106:13)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":98:17)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":98:25)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":98:33)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":98:34)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":99:13)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":102:13)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":104:13)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":100:30)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":101:30)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":101:17)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":105:17)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":112:1)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":149:1)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":120:13)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":120:49)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":140:17)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":140:37)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":114:5)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":114:9)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":116:12)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":116:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":117:5)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":132:5)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":117:8)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":118:5)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":119:9)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":131:9)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":122:13)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":130:13)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":122:23)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":122:36)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":122:53)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":122:17)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":122:63)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":123:13)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":126:13)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":128:13)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":125:29)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":125:24)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":125:17)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":125:40)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":129:27)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":129:17)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":133:5)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":148:5)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":133:8)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":134:5)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":135:9)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":147:9)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":135:12)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":135:19)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":136:9)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":138:13)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":146:13)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":138:17)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":138:25)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":138:33)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":138:34)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":139:13)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":142:13)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":144:13)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":140:30)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":141:30)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":141:17)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":145:27)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":145:17)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":152:1)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":176:1)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":172:13)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":172:33)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":154:5)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":154:9)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":156:12)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":156:5)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":157:5)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":166:5)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":157:8)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":158:5)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":161:5)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":163:5)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":160:19)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":160:9)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":165:16)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":165:9)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":167:5)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":175:5)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":167:8)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":168:5)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":169:9)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":174:9)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":169:12)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":169:19)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":170:9)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":172:26)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":173:26)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":173:13)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":179:1)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":198:1)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":194:13)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":194:33)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":181:5)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":181:9)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":183:12)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":183:5)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":184:5)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":188:5)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":184:8)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":185:5)
#loc221 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":187:16)
#loc222 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":187:9)
#loc223 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":189:5)
#loc224 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":197:5)
#loc225 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":189:8)
#loc226 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":190:5)
#loc227 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":191:9)
#loc228 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":196:9)
#loc229 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":191:12)
#loc230 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":191:19)
#loc231 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":192:9)
#loc232 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":194:26)
#loc233 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":195:26)
#loc234 = loc("CWE190_Integer_Overflow__int_fgets_multiply_04.c":195:13)
#loc235 = loc(fused[#loc1, #loc2])
#loc236 = loc(fused[#loc3, #loc4])
#loc237 = loc(fused[#loc5, #loc6])
#loc238 = loc(fused[#loc7, #loc8])
#loc239 = loc(fused[#loc10, #loc11])
#loc240 = loc(fused[#loc12, #loc13])
#loc241 = loc(fused[#loc14, #loc15])
#loc242 = loc(fused[#loc16, #loc17])
#loc243 = loc(fused[#loc18, #loc19])
#loc244 = loc(fused[#loc21, #loc20])
#loc245 = loc(fused[#loc22, #loc23])
#loc246 = loc(fused[#loc25, #loc23])
#loc247 = loc(fused[#loc26, #loc27])
#loc248 = loc(fused[#loc28, #loc29])
#loc249 = loc(fused[#loc33, #loc34])
#loc250 = loc(fused[#loc35, #loc36, #loc37, #loc29])
#loc251 = loc(fused[#loc40, #loc41])
#loc252 = loc(fused[#loc43, #loc44])
#loc253 = loc(fused[#loc46, #loc44])
#loc254 = loc(fused[#loc47, #loc48])
#loc255 = loc(fused[#loc49, #loc50])
#loc256 = loc(fused[#loc51, #loc48])
#loc257 = loc(fused[#loc55, #loc56])
#loc258 = loc(fused[#loc57, #loc58])
#loc259 = loc(fused[#loc59, #loc60])
#loc260 = loc(fused[#loc61, #loc62])
#loc261 = loc(fused[#loc63, #loc64])
#loc262 = loc(fused[#loc67, #loc68])
#loc263 = loc(fused[#loc69, #loc70])
#loc264 = loc(fused[#loc71, #loc72])
#loc265 = loc(fused[#loc73, #loc74])
#loc266 = loc(fused[#loc76, #loc75])
#loc267 = loc(fused[#loc77, #loc78])
#loc268 = loc(fused[#loc80, #loc78])
#loc269 = loc(fused[#loc81, #loc82])
#loc270 = loc(fused[#loc83, #loc84])
#loc271 = loc(fused[#loc88, #loc89])
#loc272 = loc(fused[#loc90, #loc91, #loc92, #loc84])
#loc273 = loc(fused[#loc95, #loc96])
#loc274 = loc(fused[#loc99, #loc100])
#loc275 = loc(fused[#loc102, #loc103, #loc104, #loc100])
#loc276 = loc(fused[#loc106, #loc107])
#loc277 = loc(fused[#loc108, #loc109])
#loc278 = loc(fused[#loc110, #loc107])
#loc279 = loc(fused[#loc111, #loc112])
#loc280 = loc(fused[#loc114, #loc115])
#loc281 = loc(fused[#loc113, #loc116])
#loc282 = loc(fused[#loc117, #loc118, #loc119, #loc112])
#loc283 = loc(fused[#loc124, #loc125])
#loc284 = loc(fused[#loc126, #loc127])
#loc285 = loc(fused[#loc128, #loc129])
#loc286 = loc(fused[#loc130, #loc131])
#loc287 = loc(fused[#loc133, #loc132])
#loc288 = loc(fused[#loc134, #loc135])
#loc289 = loc(fused[#loc137, #loc135])
#loc290 = loc(fused[#loc138, #loc139])
#loc291 = loc(fused[#loc140, #loc141])
#loc292 = loc(fused[#loc145, #loc146])
#loc293 = loc(fused[#loc147, #loc148, #loc149, #loc141])
#loc294 = loc(fused[#loc152, #loc153])
#loc295 = loc(fused[#loc156, #loc157])
#loc296 = loc(fused[#loc159, #loc157])
#loc297 = loc(fused[#loc160, #loc161])
#loc298 = loc(fused[#loc162, #loc163])
#loc299 = loc(fused[#loc164, #loc161])
#loc300 = loc(fused[#loc165, #loc166])
#loc301 = loc(fused[#loc168, #loc169])
#loc302 = loc(fused[#loc167, #loc170])
#loc303 = loc(fused[#loc171, #loc172, #loc173, #loc166])
#loc304 = loc(fused[#loc179, #loc180])
#loc305 = loc(fused[#loc181, #loc182])
#loc306 = loc(fused[#loc183, #loc184])
#loc307 = loc(fused[#loc186, #loc185])
#loc308 = loc(fused[#loc187, #loc188])
#loc309 = loc(fused[#loc190, #loc191, #loc192, #loc188])
#loc310 = loc(fused[#loc196, #loc195])
#loc311 = loc(fused[#loc197, #loc198])
#loc312 = loc(fused[#loc200, #loc198])
#loc313 = loc(fused[#loc201, #loc202])
#loc314 = loc(fused[#loc203, #loc204])
#loc315 = loc(fused[#loc205, #loc202])
#loc316 = loc(fused[#loc209, #loc210])
#loc317 = loc(fused[#loc211, #loc212])
#loc318 = loc(fused[#loc213, #loc214])
#loc319 = loc(fused[#loc216, #loc215])
#loc320 = loc(fused[#loc217, #loc218])
#loc321 = loc(fused[#loc220, #loc218])
#loc322 = loc(fused[#loc222, #loc221])
#loc323 = loc(fused[#loc223, #loc224])
#loc324 = loc(fused[#loc226, #loc224])
#loc325 = loc(fused[#loc227, #loc228])
#loc326 = loc(fused[#loc229, #loc230])
#loc327 = loc(fused[#loc231, #loc228])
