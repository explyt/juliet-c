!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_else_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc63)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Inside the else statement\00" : !cir.array<!s8i x 26>> : !cir.array<!s8i x 26> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_else_16_bad() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc11)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc11)
        cir.condition(%1) loc(#loc11)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc69)
            %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
            %4 = cir.const #cir.int<3> : !s32i loc(#loc18)
            %5 = cir.binop(rem, %3, %4) : !s32i loc(#loc70)
            cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc71)
            cir.scope {
              %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc23)
              %7 = cir.const #cir.int<0> : !s32i loc(#loc24)
              %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc73)
              cir.if %8 {
                %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc5)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc5)
                cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc28)
              } else {
              } loc(#loc74)
            } loc(#loc72)
          } loc(#loc68)
          %0 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc6)
          %1 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc6)
          cir.call @printLine(%1) : (!cir.ptr<!s8i>) -> () loc(#loc29)
          cir.break loc(#loc30)
        } loc(#loc67)
        cir.yield loc(#loc10)
      } loc(#loc66)
    } loc(#loc66)
    cir.return loc(#loc8)
  } loc(#loc65)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_else_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc76)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    cir.return loc(#loc32)
  } loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Inside the if statement\00" : !cir.array<!s8i x 24>> : !cir.array<!s8i x 24> {alignment = 1 : i64} loc(#loc35)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc36)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc41)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc41)
        cir.condition(%1) loc(#loc41)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc81)
            %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
            %4 = cir.const #cir.int<3> : !s32i loc(#loc48)
            %5 = cir.binop(rem, %3, %4) : !s32i loc(#loc82)
            cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc83)
            cir.scope {
              %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc53)
              %7 = cir.const #cir.int<0> : !s32i loc(#loc54)
              %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc85)
              cir.if %8 {
                %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 24>> loc(#loc35)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 24>>), !cir.ptr<!s8i> loc(#loc35)
                cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc58)
              } else {
                %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc59)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc59)
                cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc60)
              } loc(#loc86)
            } loc(#loc84)
          } loc(#loc80)
          %0 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc36)
          %1 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc36)
          cir.call @printLine(%1) : (!cir.ptr<!s8i>) -> () loc(#loc61)
          cir.break loc(#loc62)
        } loc(#loc79)
        cir.yield loc(#loc40)
      } loc(#loc78)
    } loc(#loc78)
    cir.return loc(#loc38)
  } loc(#loc77)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_else_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":30:27)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":36:19)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":20:1)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":39:1)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":22:5)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":38:5)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":22:11)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":23:5)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":25:9)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":35:9)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":26:13)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":26:17)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":27:18)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":27:27)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":27:13)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":27:28)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":28:13)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":34:13)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":28:17)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":28:22)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":29:13)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":31:13)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":33:13)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":30:17)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":36:9)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":37:9)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":68:1)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":71:1)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":70:5)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":70:11)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":56:27)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":63:19)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":46:1)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":66:1)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":48:5)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":65:5)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":48:11)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":49:5)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":51:9)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":62:9)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":52:13)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":52:17)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":53:18)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":53:27)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":53:13)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":53:28)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":54:13)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":61:13)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":54:17)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":54:22)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":55:13)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":57:13)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":59:13)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":56:17)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":60:27)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":60:17)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":63:9)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_else_16.c":64:9)
#loc63 = loc(fused[#loc1, #loc2])
#loc64 = loc(fused[#loc3, #loc4])
#loc65 = loc(fused[#loc7, #loc8])
#loc66 = loc(fused[#loc9, #loc10])
#loc67 = loc(fused[#loc12, #loc10])
#loc68 = loc(fused[#loc13, #loc14])
#loc69 = loc(fused[#loc15, #loc16])
#loc70 = loc(fused[#loc17, #loc18])
#loc71 = loc(fused[#loc19, #loc20])
#loc72 = loc(fused[#loc21, #loc22])
#loc73 = loc(fused[#loc23, #loc24])
#loc74 = loc(fused[#loc25, #loc26, #loc27, #loc22])
#loc75 = loc(fused[#loc31, #loc32])
#loc76 = loc(fused[#loc33, #loc34])
#loc77 = loc(fused[#loc37, #loc38])
#loc78 = loc(fused[#loc39, #loc40])
#loc79 = loc(fused[#loc42, #loc40])
#loc80 = loc(fused[#loc43, #loc44])
#loc81 = loc(fused[#loc45, #loc46])
#loc82 = loc(fused[#loc47, #loc48])
#loc83 = loc(fused[#loc49, #loc50])
#loc84 = loc(fused[#loc51, #loc52])
#loc85 = loc(fused[#loc53, #loc54])
#loc86 = loc(fused[#loc55, #loc56, #loc57, #loc52])
