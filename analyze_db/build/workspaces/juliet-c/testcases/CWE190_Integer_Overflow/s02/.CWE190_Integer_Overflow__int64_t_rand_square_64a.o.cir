!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_64a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc48)
  cir.func private @CWE190_Integer_Overflow__int64_t_rand_square_64b_badSink(!cir.ptr<!void>) loc(#loc49)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_64_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc51)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc52)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    %6 = cir.ternary(%5, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc11)
      %11 = cir.const #cir.int<60> : !s32i loc(#loc11)
      %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc11)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc11)
      %15 = cir.const #cir.int<45> : !s32i loc(#loc11)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc11)
      %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc11)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc11)
      %20 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc11)
      %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc11)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc11)
      %25 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc11)
      %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc11)
      %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc11)
      %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc11)
      cir.yield %30 : !u64i loc(#loc11)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc11)
      %11 = cir.const #cir.int<60> : !s32i loc(#loc11)
      %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc11)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc11)
      %15 = cir.const #cir.int<45> : !s32i loc(#loc11)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc11)
      %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc11)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc11)
      %20 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc11)
      %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc11)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc11)
      %25 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc11)
      %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc11)
      %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc11)
      %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc11)
      %31 = cir.unary(minus, %30) : !u64i, !u64i loc(#loc11)
      %32 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc11)
      %34 = cir.binop(sub, %31, %33) : !u64i loc(#loc11)
      cir.yield %34 : !u64i loc(#loc11)
    }) : (!cir.bool) -> !u64i loc(#loc11)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc11)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc53)
    %8 = cir.cast(bitcast, %0 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc54)
    cir.call @CWE190_Integer_Overflow__int64_t_rand_square_64b_badSink(%8) : (!cir.ptr<!void>) -> () loc(#loc15)
    cir.return loc(#loc6)
  } loc(#loc50)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_64_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc56)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc18)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc57)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc20)
    cir.return loc(#loc17)
  } loc(#loc55)
  cir.func private @CWE190_Integer_Overflow__int64_t_rand_square_64b_goodG2BSink(!cir.ptr<!void>) loc(#loc58)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc60)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc28)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc61)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc30)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc30)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc62)
    %4 = cir.cast(bitcast, %0 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc63)
    cir.call @CWE190_Integer_Overflow__int64_t_rand_square_64b_goodG2BSink(%4) : (!cir.ptr<!void>) -> () loc(#loc34)
    cir.return loc(#loc25)
  } loc(#loc59)
  cir.func private @CWE190_Integer_Overflow__int64_t_rand_square_64b_goodB2GSink(!cir.ptr<!void>) loc(#loc64)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc66)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc41)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc67)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc43)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc43)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc43)
    %6 = cir.ternary(%5, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc43)
      %11 = cir.const #cir.int<60> : !s32i loc(#loc43)
      %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc43)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc43)
      %15 = cir.const #cir.int<45> : !s32i loc(#loc43)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc43)
      %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc43)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc43)
      %20 = cir.const #cir.int<30> : !s32i loc(#loc43)
      %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc43)
      %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc43)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc43)
      %25 = cir.const #cir.int<15> : !s32i loc(#loc43)
      %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc43)
      %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc43)
      %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc43)
      %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc43)
      cir.yield %30 : !u64i loc(#loc43)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc43)
      %11 = cir.const #cir.int<60> : !s32i loc(#loc43)
      %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc43)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc43)
      %15 = cir.const #cir.int<45> : !s32i loc(#loc43)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc43)
      %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc43)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc43)
      %20 = cir.const #cir.int<30> : !s32i loc(#loc43)
      %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc43)
      %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc43)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc43)
      %25 = cir.const #cir.int<15> : !s32i loc(#loc43)
      %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc43)
      %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc43)
      %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc43)
      %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc43)
      %31 = cir.unary(minus, %30) : !u64i, !u64i loc(#loc43)
      %32 = cir.const #cir.int<1> : !s32i loc(#loc43)
      %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc43)
      %34 = cir.binop(sub, %31, %33) : !u64i loc(#loc43)
      cir.yield %34 : !u64i loc(#loc43)
    }) : (!cir.bool) -> !u64i loc(#loc43)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc43)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc68)
    %8 = cir.cast(bitcast, %0 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc69)
    cir.call @CWE190_Integer_Overflow__int64_t_rand_square_64b_goodB2GSink(%8) : (!cir.ptr<!void>) -> () loc(#loc47)
    cir.return loc(#loc38)
  } loc(#loc65)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_64a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":25:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":25:81)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":27:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":34:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":29:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":29:13)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":30:12)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":30:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":32:21)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":32:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":33:62)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":33:63)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":33:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":64:1)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":68:1)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":66:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":66:13)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":67:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":67:13)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":41:1)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":41:85)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":43:1)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":50:1)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":45:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":45:13)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":46:12)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":46:5)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":48:12)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":48:5)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":49:66)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":49:67)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":49:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":53:1)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":53:85)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":55:1)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":62:1)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":57:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":57:13)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":58:12)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":58:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":60:21)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":60:5)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":61:66)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":61:67)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64a.c":61:5)
#loc48 = loc(fused[#loc1, #loc2])
#loc49 = loc(fused[#loc3, #loc4])
#loc50 = loc(fused[#loc5, #loc6])
#loc51 = loc(fused[#loc7, #loc8])
#loc52 = loc(fused[#loc10, #loc9])
#loc53 = loc(fused[#loc12, #loc11])
#loc54 = loc(fused[#loc13, #loc14])
#loc55 = loc(fused[#loc16, #loc17])
#loc56 = loc(fused[#loc18, #loc19])
#loc57 = loc(fused[#loc20, #loc21])
#loc58 = loc(fused[#loc22, #loc23])
#loc59 = loc(fused[#loc24, #loc25])
#loc60 = loc(fused[#loc26, #loc27])
#loc61 = loc(fused[#loc29, #loc28])
#loc62 = loc(fused[#loc31, #loc30])
#loc63 = loc(fused[#loc32, #loc33])
#loc64 = loc(fused[#loc35, #loc36])
#loc65 = loc(fused[#loc37, #loc38])
#loc66 = loc(fused[#loc39, #loc40])
#loc67 = loc(fused[#loc42, #loc41])
#loc68 = loc(fused[#loc44, #loc43])
#loc69 = loc(fused[#loc45, #loc46])
