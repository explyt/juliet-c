!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc13 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":20:23)
#loc14 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":20:27)
#loc55 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":35:24)
#loc56 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":35:28)
#loc89 = loc(fused[#loc13, #loc14])
#loc105 = loc(fused[#loc55, #loc56])
module @"/workspaces/juliet-c/testcases/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc83)
  cir.func private @signal(!s32i, !cir.ptr<!cir.func<(!s32i)>>) -> !cir.ptr<!cir.func<(!s32i)>> extra(#fn_attr) loc(#loc84)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc85)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc86)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc87)
  cir.func internal private @helperBad(%arg0: !s32i loc(fused[#loc13, #loc14])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["sig", init] {alignment = 4 : i64} loc(#loc89)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["voidPointer", init] {alignment = 8 : i64} loc(#loc90)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc17)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc18)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc19)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc19)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc18)
    cir.store %5, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc90)
    cir.scope {
      %8 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc22)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc23)
      %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!void>, !cir.bool loc(#loc92)
      cir.if %10 {
        %11 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc25)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc26)
        %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc27)
        cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc25)
      } loc(#loc93)
    } loc(#loc91)
    %6 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc28)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc29)
    cir.call @free(%7) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc28)
    cir.return loc(#loc12)
  } loc(#loc88)
  cir.func no_proto @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc96)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc96)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc34)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc34)
      cir.if %3 {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc37)
        %5 = cir.get_global @helperBad : !cir.ptr<!cir.func<(!s32i)>> loc(#loc38)
        %6 = cir.call @signal(%4, %5) : (!s32i, !cir.ptr<!cir.func<(!s32i)>>) -> !cir.ptr<!cir.func<(!s32i)>> extra(#fn_attr) loc(#loc39)
      } loc(#loc97)
    } loc(#loc95)
    cir.return loc(#loc31)
  } loc(#loc94)
  cir.func no_proto @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc99)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc100)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    cir.return loc(#loc41)
  } loc(#loc98)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc101)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc102)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" internal dsolocal @volatileSigAtomic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc103)
  cir.func internal private @helperGood(%arg0: !s32i loc(fused[#loc55, #loc56])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["sig", init] {alignment = 4 : i64} loc(#loc105)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    %2 = cir.get_global @volatileSigAtomic : !cir.ptr<!s32i> loc(#loc103)
    cir.store volatile %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.return loc(#loc54)
  } loc(#loc104)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc109)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc109)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc64)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc64)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc69)
      } else {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc70)
        %5 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!s32i)>> loc(#loc71)
        %6 = cir.call @signal(%4, %5) : (!s32i, !cir.ptr<!cir.func<(!s32i)>>) -> !cir.ptr<!cir.func<(!s32i)>> extra(#fn_attr) loc(#loc72)
      } loc(#loc110)
    } loc(#loc108)
    cir.return loc(#loc61)
  } loc(#loc107)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc113)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc113)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc77)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc77)
      cir.if %3 {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc80)
        %5 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!s32i)>> loc(#loc81)
        %6 = cir.call @signal(%4, %5) : (!s32i, !cir.ptr<!cir.func<(!s32i)>>) -> !cir.ptr<!cir.func<(!s32i)>> extra(#fn_attr) loc(#loc82)
      } loc(#loc114)
    } loc(#loc112)
    cir.return loc(#loc74)
  } loc(#loc111)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/signal.h":88:1)
#loc4 = loc("/usr/include/signal.h":89:6)
#loc5 = loc("/usr/include/stdlib.h":672:1)
#loc6 = loc("/usr/include/stdlib.h":672:45)
#loc7 = loc("/usr/include/stdlib.h":756:1)
#loc8 = loc("/usr/include/stdlib.h":756:70)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":20:1)
#loc12 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":31:1)
#loc15 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":28:5)
#loc16 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":28:34)
#loc17 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":21:1)
#loc18 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":28:25)
#loc19 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":28:32)
#loc20 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":29:5)
#loc21 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":29:40)
#loc22 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":29:9)
#loc23 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":29:24)
#loc24 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":29:30)
#loc25 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":29:31)
#loc26 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":29:37)
#loc27 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":29:36)
#loc28 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":30:5)
#loc29 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":30:10)
#loc30 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":46:1)
#loc31 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":52:1)
#loc32 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":48:5)
#loc33 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":51:5)
#loc34 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":48:8)
#loc35 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":48:26)
#loc36 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":49:5)
#loc37 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":50:16)
#loc38 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":50:24)
#loc39 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":50:9)
#loc40 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":81:1)
#loc41 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":85:1)
#loc42 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":83:5)
#loc43 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":83:11)
#loc44 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":84:5)
#loc45 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":84:11)
#loc46 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc47 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc48 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":64:19)
#loc51 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":33:1)
#loc52 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":33:50)
#loc53 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":35:1)
#loc54 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":42:1)
#loc57 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":36:1)
#loc58 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":41:25)
#loc59 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":41:5)
#loc60 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":59:1)
#loc61 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":70:1)
#loc62 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":61:5)
#loc63 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":69:5)
#loc64 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":61:8)
#loc65 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":61:27)
#loc66 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":62:5)
#loc67 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":65:5)
#loc68 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":67:5)
#loc69 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":64:9)
#loc70 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":68:16)
#loc71 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":68:24)
#loc72 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":68:9)
#loc73 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":73:1)
#loc74 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":79:1)
#loc75 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":75:5)
#loc76 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":78:5)
#loc77 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":75:8)
#loc78 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":75:26)
#loc79 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":76:5)
#loc80 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":77:16)
#loc81 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":77:24)
#loc82 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_11.c":77:9)
#loc83 = loc(fused[#loc1, #loc2])
#loc84 = loc(fused[#loc3, #loc4])
#loc85 = loc(fused[#loc5, #loc6])
#loc86 = loc(fused[#loc7, #loc8])
#loc87 = loc(fused[#loc9, #loc10])
#loc88 = loc(fused[#loc11, #loc12])
#loc90 = loc(fused[#loc15, #loc16])
#loc91 = loc(fused[#loc20, #loc21])
#loc92 = loc(fused[#loc22, #loc23])
#loc93 = loc(fused[#loc24, #loc21])
#loc94 = loc(fused[#loc30, #loc31])
#loc95 = loc(fused[#loc32, #loc33])
#loc96 = loc(fused[#loc34, #loc35])
#loc97 = loc(fused[#loc36, #loc33])
#loc98 = loc(fused[#loc40, #loc41])
#loc99 = loc(fused[#loc42, #loc43])
#loc100 = loc(fused[#loc44, #loc45])
#loc101 = loc(fused[#loc46, #loc47])
#loc102 = loc(fused[#loc48, #loc49])
#loc103 = loc(fused[#loc51, #loc52])
#loc104 = loc(fused[#loc53, #loc54])
#loc106 = loc(fused[#loc59, #loc58])
#loc107 = loc(fused[#loc60, #loc61])
#loc108 = loc(fused[#loc62, #loc63])
#loc109 = loc(fused[#loc64, #loc65])
#loc110 = loc(fused[#loc66, #loc67, #loc68, #loc63])
#loc111 = loc(fused[#loc73, #loc74])
#loc112 = loc(fused[#loc75, #loc76])
#loc113 = loc(fused[#loc77, #loc78])
#loc114 = loc(fused[#loc79, #loc76])
