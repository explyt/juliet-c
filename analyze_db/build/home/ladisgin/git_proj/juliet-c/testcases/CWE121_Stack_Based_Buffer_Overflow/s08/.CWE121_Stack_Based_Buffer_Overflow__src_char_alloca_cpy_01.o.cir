!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc65)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc66)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc68)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc69)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc70)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc12)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc12)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc12)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc12)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc12)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc70)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc13)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc71)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc15)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc15)
    %13 = cir.const #cir.int<65> : !s32i loc(#loc16)
    %14 = cir.const #cir.int<100> : !s32i loc(#loc17)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc17)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc17)
    cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc72)
    %18 = cir.const #cir.int<0> : !s32i loc(#loc21)
    %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc21)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc22)
    %21 = cir.const #cir.int<100> : !s32i loc(#loc23)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc23)
    %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc25)
    cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc73)
    cir.br ^bb1 loc(#loc74)
  ^bb1:  // pred: ^bb0
    %25 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc68)
    cir.store %25, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc68)
    %26 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc28)
    %27 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc29)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
    %29 = cir.call @strcpy(%27, %28) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc28)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
    cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc32)
    cir.br ^bb2 loc(#loc27)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc6)
  } loc(#loc67)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc76)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc34)
  } loc(#loc75)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc78)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc79)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc80)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc44)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc44)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc44)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc44)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc44)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc44)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc44)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc80)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc81)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc47)
    %13 = cir.const #cir.int<65> : !s32i loc(#loc48)
    %14 = cir.const #cir.int<50> : !s32i loc(#loc49)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc49)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc49)
    cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc82)
    %18 = cir.const #cir.int<0> : !s32i loc(#loc53)
    %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc53)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
    %21 = cir.const #cir.int<50> : !s32i loc(#loc55)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc55)
    %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc57)
    cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc83)
    cir.br ^bb1 loc(#loc84)
  ^bb1:  // pred: ^bb0
    %25 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc78)
    cir.store %25, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc78)
    %26 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc60)
    %27 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc61)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
    %29 = cir.call @strcpy(%27, %28) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc60)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    cir.br ^bb2 loc(#loc59)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc38)
  } loc(#loc77)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":0:0)
#loc1 = loc("/usr/include/string.h":141:1)
#loc2 = loc("/usr/include/string.h":142:14)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":23:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":37:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":32:9)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":32:25)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":25:12)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":26:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":26:33)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":27:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":27:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":29:12)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":29:18)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":29:23)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":29:27)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":29:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":29:28)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":30:19)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":30:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":30:10)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":30:14)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":30:15)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":31:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":36:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":34:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":34:16)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":34:22)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":35:19)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":35:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":60:1)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":63:1)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":62:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":62:13)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":44:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":58:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":53:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":53:25)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":46:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":46:12)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":47:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":47:33)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":48:12)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":48:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":50:12)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":50:18)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":50:23)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":50:26)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":50:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":50:27)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":51:18)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":51:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":51:10)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":51:13)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":51:14)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":52:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":57:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":55:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":55:16)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":55:22)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":56:19)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c":56:9)
#loc65 = loc(fused[#loc1, #loc2])
#loc66 = loc(fused[#loc3, #loc4])
#loc67 = loc(fused[#loc5, #loc6])
#loc68 = loc(fused[#loc7, #loc8])
#loc69 = loc(fused[#loc9, #loc10])
#loc70 = loc(fused[#loc11, #loc12])
#loc71 = loc(fused[#loc14, #loc13])
#loc72 = loc(fused[#loc19, #loc20])
#loc73 = loc(fused[#loc22, #loc21])
#loc74 = loc(fused[#loc26, #loc27])
#loc75 = loc(fused[#loc33, #loc34])
#loc76 = loc(fused[#loc35, #loc36])
#loc77 = loc(fused[#loc37, #loc38])
#loc78 = loc(fused[#loc39, #loc40])
#loc79 = loc(fused[#loc41, #loc42])
#loc80 = loc(fused[#loc43, #loc44])
#loc81 = loc(fused[#loc46, #loc45])
#loc82 = loc(fused[#loc51, #loc52])
#loc83 = loc(fused[#loc54, #loc53])
#loc84 = loc(fused[#loc58, #loc59])
