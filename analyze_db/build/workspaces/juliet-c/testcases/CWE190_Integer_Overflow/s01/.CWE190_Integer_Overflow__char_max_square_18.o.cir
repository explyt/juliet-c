!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @printHexCharLine(!s8i) loc(#loc75)
  cir.func no_proto @CWE190_Integer_Overflow__char_max_square_18_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc77)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc78)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc9)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc9)
    cir.store %3, %0 : !s8i, !cir.ptr<!s8i> loc(#loc79)
    cir.br ^bb1 loc(#loc80)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<127> : !s32i loc(#loc13)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc13)
    cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc81)
    cir.br ^bb2 loc(#loc82)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc17)
    %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc17)
    %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc8)
    %9 = cir.cast(integral, %8 : !s8i), !s32i loc(#loc8)
    %10 = cir.binop(mul, %7, %9) nsw : !s32i loc(#loc17)
    %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc17)
    cir.store %11, %1 : !s8i, !cir.ptr<!s8i> loc(#loc78)
    %12 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc18)
    cir.call @printHexCharLine(%12) : (!s8i) -> () loc(#loc19)
    cir.return loc(#loc4)
  } loc(#loc76)
  cir.func no_proto @CWE190_Integer_Overflow__char_max_square_18_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc84)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc22)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc85)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc24)
    cir.return loc(#loc21)
  } loc(#loc83)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc26)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc86)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc29)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc88)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc89)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc36)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc36)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc90)
    cir.br ^bb1 loc(#loc91)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<127> : !s32i loc(#loc40)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc40)
    cir.store %5, %1 : !s8i, !cir.ptr<!s8i> loc(#loc92)
    cir.br ^bb2 loc(#loc93)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc94)
  ^bb3:  // pred: ^bb2
    %6 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc46)
    %7 = cir.cast(integral, %6 : !s8i), !s64i loc(#loc46)
    %8 = cir.cast(integral, %7 : !s64i), !s32i loc(#loc46)
    %9 = cir.abs %8 poison : !s32i loc(#loc47)
    %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc47)
    %11 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc48)
    %12 = cir.const #cir.int<127> : !s32i loc(#loc49)
    %13 = cir.cast(int_to_float, %12 : !s32i), !cir.double loc(#loc49)
    %14 = cir.call @sqrt(%13) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc48)
    %15 = cir.cast(float_to_int, %14 : !cir.double), !s64i loc(#loc48)
    %16 = cir.cmp(le, %10, %15) : !s64i, !cir.bool loc(#loc95)
    cir.brcond %16 ^bb4, ^bb5 loc(#loc96)
  ^bb4:  // pred: ^bb3
    %17 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc54)
    %18 = cir.cast(integral, %17 : !s8i), !s32i loc(#loc54)
    %19 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc33)
    %20 = cir.cast(integral, %19 : !s8i), !s32i loc(#loc33)
    %21 = cir.binop(mul, %18, %20) nsw : !s32i loc(#loc54)
    %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc54)
    cir.store %22, %0 : !s8i, !cir.ptr<!s8i> loc(#loc88)
    %23 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc55)
    cir.call @printHexCharLine(%23) : (!s8i) -> () loc(#loc56)
    cir.br ^bb6 loc(#loc52)
  ^bb5:  // pred: ^bb3
    %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc29)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    cir.br ^bb6 loc(#loc45)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc45)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc31)
  } loc(#loc87)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc98)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc99)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc64)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc64)
    cir.store %3, %0 : !s8i, !cir.ptr<!s8i> loc(#loc100)
    cir.br ^bb1 loc(#loc101)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<2> : !s32i loc(#loc68)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc68)
    cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc102)
    cir.br ^bb2 loc(#loc103)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc72)
    %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc72)
    %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc63)
    %9 = cir.cast(integral, %8 : !s8i), !s32i loc(#loc63)
    %10 = cir.binop(mul, %7, %9) nsw : !s32i loc(#loc72)
    %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc72)
    cir.store %11, %1 : !s8i, !cir.ptr<!s8i> loc(#loc99)
    %12 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc73)
    cir.call @printHexCharLine(%12) : (!s8i) -> () loc(#loc74)
    cir.return loc(#loc59)
  } loc(#loc97)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_18.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc3 = loc("CWE190_Integer_Overflow__char_max_square_18.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__char_max_square_18.c":39:1)
#loc5 = loc("CWE190_Integer_Overflow__char_max_square_18.c":26:5)
#loc6 = loc("CWE190_Integer_Overflow__char_max_square_18.c":26:10)
#loc7 = loc("CWE190_Integer_Overflow__char_max_square_18.c":36:9)
#loc8 = loc("CWE190_Integer_Overflow__char_max_square_18.c":36:30)
#loc9 = loc("CWE190_Integer_Overflow__char_max_square_18.c":27:12)
#loc10 = loc("CWE190_Integer_Overflow__char_max_square_18.c":27:5)
#loc11 = loc("CWE190_Integer_Overflow__char_max_square_18.c":28:5)
#loc12 = loc("CWE190_Integer_Overflow__char_max_square_18.c":28:10)
#loc13 = loc("CWE190_Integer_Overflow__char_max_square_18.c":31:12)
#loc14 = loc("CWE190_Integer_Overflow__char_max_square_18.c":31:5)
#loc15 = loc("CWE190_Integer_Overflow__char_max_square_18.c":32:5)
#loc16 = loc("CWE190_Integer_Overflow__char_max_square_18.c":32:10)
#loc17 = loc("CWE190_Integer_Overflow__char_max_square_18.c":36:23)
#loc18 = loc("CWE190_Integer_Overflow__char_max_square_18.c":37:26)
#loc19 = loc("CWE190_Integer_Overflow__char_max_square_18.c":37:9)
#loc20 = loc("CWE190_Integer_Overflow__char_max_square_18.c":86:1)
#loc21 = loc("CWE190_Integer_Overflow__char_max_square_18.c":90:1)
#loc22 = loc("CWE190_Integer_Overflow__char_max_square_18.c":88:5)
#loc23 = loc("CWE190_Integer_Overflow__char_max_square_18.c":88:13)
#loc24 = loc("CWE190_Integer_Overflow__char_max_square_18.c":89:5)
#loc25 = loc("CWE190_Integer_Overflow__char_max_square_18.c":89:13)
#loc26 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc29 = loc("CWE190_Integer_Overflow__char_max_square_18.c":64:19)
#loc30 = loc("CWE190_Integer_Overflow__char_max_square_18.c":46:1)
#loc31 = loc("CWE190_Integer_Overflow__char_max_square_18.c":66:1)
#loc32 = loc("CWE190_Integer_Overflow__char_max_square_18.c":59:9)
#loc33 = loc("CWE190_Integer_Overflow__char_max_square_18.c":59:30)
#loc34 = loc("CWE190_Integer_Overflow__char_max_square_18.c":48:5)
#loc35 = loc("CWE190_Integer_Overflow__char_max_square_18.c":48:10)
#loc36 = loc("CWE190_Integer_Overflow__char_max_square_18.c":49:12)
#loc37 = loc("CWE190_Integer_Overflow__char_max_square_18.c":49:5)
#loc38 = loc("CWE190_Integer_Overflow__char_max_square_18.c":50:5)
#loc39 = loc("CWE190_Integer_Overflow__char_max_square_18.c":50:10)
#loc40 = loc("CWE190_Integer_Overflow__char_max_square_18.c":53:12)
#loc41 = loc("CWE190_Integer_Overflow__char_max_square_18.c":53:5)
#loc42 = loc("CWE190_Integer_Overflow__char_max_square_18.c":54:5)
#loc43 = loc("CWE190_Integer_Overflow__char_max_square_18.c":54:10)
#loc44 = loc("CWE190_Integer_Overflow__char_max_square_18.c":57:5)
#loc45 = loc("CWE190_Integer_Overflow__char_max_square_18.c":65:5)
#loc46 = loc("CWE190_Integer_Overflow__char_max_square_18.c":57:19)
#loc47 = loc("CWE190_Integer_Overflow__char_max_square_18.c":57:9)
#loc48 = loc("CWE190_Integer_Overflow__char_max_square_18.c":57:34)
#loc49 = loc("CWE190_Integer_Overflow__char_max_square_18.c":57:47)
#loc50 = loc("CWE190_Integer_Overflow__char_max_square_18.c":57:55)
#loc51 = loc("CWE190_Integer_Overflow__char_max_square_18.c":58:5)
#loc52 = loc("CWE190_Integer_Overflow__char_max_square_18.c":61:5)
#loc53 = loc("CWE190_Integer_Overflow__char_max_square_18.c":63:5)
#loc54 = loc("CWE190_Integer_Overflow__char_max_square_18.c":59:23)
#loc55 = loc("CWE190_Integer_Overflow__char_max_square_18.c":60:26)
#loc56 = loc("CWE190_Integer_Overflow__char_max_square_18.c":60:9)
#loc57 = loc("CWE190_Integer_Overflow__char_max_square_18.c":64:9)
#loc58 = loc("CWE190_Integer_Overflow__char_max_square_18.c":69:1)
#loc59 = loc("CWE190_Integer_Overflow__char_max_square_18.c":84:1)
#loc60 = loc("CWE190_Integer_Overflow__char_max_square_18.c":71:5)
#loc61 = loc("CWE190_Integer_Overflow__char_max_square_18.c":71:10)
#loc62 = loc("CWE190_Integer_Overflow__char_max_square_18.c":81:9)
#loc63 = loc("CWE190_Integer_Overflow__char_max_square_18.c":81:30)
#loc64 = loc("CWE190_Integer_Overflow__char_max_square_18.c":72:12)
#loc65 = loc("CWE190_Integer_Overflow__char_max_square_18.c":72:5)
#loc66 = loc("CWE190_Integer_Overflow__char_max_square_18.c":73:5)
#loc67 = loc("CWE190_Integer_Overflow__char_max_square_18.c":73:10)
#loc68 = loc("CWE190_Integer_Overflow__char_max_square_18.c":76:12)
#loc69 = loc("CWE190_Integer_Overflow__char_max_square_18.c":76:5)
#loc70 = loc("CWE190_Integer_Overflow__char_max_square_18.c":77:5)
#loc71 = loc("CWE190_Integer_Overflow__char_max_square_18.c":77:10)
#loc72 = loc("CWE190_Integer_Overflow__char_max_square_18.c":81:23)
#loc73 = loc("CWE190_Integer_Overflow__char_max_square_18.c":82:26)
#loc74 = loc("CWE190_Integer_Overflow__char_max_square_18.c":82:9)
#loc75 = loc(fused[#loc1, #loc2])
#loc76 = loc(fused[#loc3, #loc4])
#loc77 = loc(fused[#loc5, #loc6])
#loc78 = loc(fused[#loc7, #loc8])
#loc79 = loc(fused[#loc10, #loc9])
#loc80 = loc(fused[#loc11, #loc12])
#loc81 = loc(fused[#loc14, #loc13])
#loc82 = loc(fused[#loc15, #loc16])
#loc83 = loc(fused[#loc20, #loc21])
#loc84 = loc(fused[#loc22, #loc23])
#loc85 = loc(fused[#loc24, #loc25])
#loc86 = loc(fused[#loc27, #loc28])
#loc87 = loc(fused[#loc30, #loc31])
#loc88 = loc(fused[#loc32, #loc33])
#loc89 = loc(fused[#loc34, #loc35])
#loc90 = loc(fused[#loc37, #loc36])
#loc91 = loc(fused[#loc38, #loc39])
#loc92 = loc(fused[#loc41, #loc40])
#loc93 = loc(fused[#loc42, #loc43])
#loc94 = loc(fused[#loc44, #loc45])
#loc95 = loc(fused[#loc47, #loc50])
#loc96 = loc(fused[#loc51, #loc52, #loc53, #loc45])
#loc97 = loc(fused[#loc58, #loc59])
#loc98 = loc(fused[#loc60, #loc61])
#loc99 = loc(fused[#loc62, #loc63])
#loc100 = loc(fused[#loc65, #loc64])
#loc101 = loc(fused[#loc66, #loc67])
#loc102 = loc(fused[#loc69, #loc68])
#loc103 = loc(fused[#loc70, #loc71])
