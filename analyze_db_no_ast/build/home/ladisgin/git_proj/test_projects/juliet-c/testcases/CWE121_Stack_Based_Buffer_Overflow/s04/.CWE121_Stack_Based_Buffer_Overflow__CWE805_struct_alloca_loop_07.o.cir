!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc208)
  cir.func private  @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc209)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc211)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc212)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc10)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc10)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc10)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc10)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %7 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc213)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc10)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc212)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc12)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc12)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc12)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc12)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc12)
    cir.store %16, %7 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc213)
    cir.scope {
      %17 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc208)
      %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %19 = cir.const #cir.int<5> : !s32i loc(#loc16)
      %20 = cir.cmp(eq, %18, %19) : !s32i, !s32i loc(#loc215)
      %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc17)
      cir.if %21 {
        %22 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc19)
        cir.store %22, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc217)
      } loc(#loc216)
    } loc(#loc214)
    cir.scope {
      %17 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc219)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc221)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc31)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc31)
          cir.store %20, %18 : !u64i, !cir.ptr<!u64i> loc(#loc223)
          cir.for : cond {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc33)
            %22 = cir.const #cir.int<100> : !s32i loc(#loc34)
            %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc34)
            %24 = cir.cmp(lt, %21, %23) : !u64i, !s32i loc(#loc224)
            %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc35)
            cir.condition(%25) loc(#loc35)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc37)
              %22 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc38)
              %23 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc39)
              %24 = cir.ptr_stride(%23 : !cir.ptr<!ty__twoIntsStruct>, %22 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc39)
              %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc40)
              cir.store %21, %25 : !s32i, !cir.ptr<!s32i> loc(#loc226)
              %26 = cir.const #cir.int<0> : !s32i loc(#loc41)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc42)
              %28 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc43)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty__twoIntsStruct>, %27 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc43)
              %30 = cir.get_member %29[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc44)
              cir.store %26, %30 : !s32i, !cir.ptr<!s32i> loc(#loc227)
            } loc(#loc225)
            cir.yield loc(#loc30)
          } step {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc45)
            %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc46)
            cir.store %22, %18 : !u64i, !cir.ptr<!u64i> loc(#loc228)
            cir.yield loc(#loc222)
          } loc(#loc222)
        } loc(#loc222)
      } loc(#loc220)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc230)
        cir.scope {
          %22 = cir.const #cir.int<0> : !s32i loc(#loc53)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc53)
          cir.store %23, %18 : !u64i, !cir.ptr<!u64i> loc(#loc232)
          cir.for : cond {
            %24 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc55)
            %25 = cir.const #cir.int<100> : !s32i loc(#loc56)
            %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc56)
            %27 = cir.cmp(lt, %24, %26) : !u64i, !s32i loc(#loc233)
            %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc57)
            cir.condition(%28) loc(#loc57)
          } body {
            cir.scope {
              %24 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc59)
              %25 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc60)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!ty__twoIntsStruct>, %25 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc61)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc62)
              %28 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc63)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty__twoIntsStruct>, %27 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc63)
              cir.copy %29 to %26 : !cir.ptr<!ty__twoIntsStruct> loc(#loc61)
            } loc(#loc234)
            cir.yield loc(#loc52)
          } step {
            %24 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc64)
            %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc65)
            cir.store %25, %18 : !u64i, !cir.ptr<!u64i> loc(#loc235)
            cir.yield loc(#loc231)
          } loc(#loc231)
        } loc(#loc231)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc66)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc67)
        %21 = cir.ptr_stride(%19 : !cir.ptr<!ty__twoIntsStruct>, %20 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc68)
        cir.call @printStructLine(%21) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc69)
      } loc(#loc229)
    } loc(#loc218)
    cir.return loc(#loc6)
  } loc(#loc210)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc237)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc72)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc238)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc74)
    cir.return loc(#loc71)
  } loc(#loc236)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc239)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc78)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc241)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc242)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc84)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc84)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc84)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc84)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc84)
    %7 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc243)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc84)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc84)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc242)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc86)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc86)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc86)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc86)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc86)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc86)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc86)
    cir.store %16, %7 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc243)
    cir.scope {
      %17 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc208)
      %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc89)
      %19 = cir.const #cir.int<5> : !s32i loc(#loc90)
      %20 = cir.cmp(ne, %18, %19) : !s32i, !s32i loc(#loc245)
      %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc91)
      cir.if %21 {
        %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc78)
        %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc78)
        cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc95)
      } else {
        %22 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc96)
        cir.store %22, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc247)
      } loc(#loc246)
    } loc(#loc244)
    cir.scope {
      %17 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc249)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc251)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc108)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc108)
          cir.store %20, %18 : !u64i, !cir.ptr<!u64i> loc(#loc253)
          cir.for : cond {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc110)
            %22 = cir.const #cir.int<100> : !s32i loc(#loc111)
            %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc111)
            %24 = cir.cmp(lt, %21, %23) : !u64i, !s32i loc(#loc254)
            %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc112)
            cir.condition(%25) loc(#loc112)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc114)
              %22 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc115)
              %23 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc116)
              %24 = cir.ptr_stride(%23 : !cir.ptr<!ty__twoIntsStruct>, %22 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc116)
              %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc40)
              cir.store %21, %25 : !s32i, !cir.ptr<!s32i> loc(#loc256)
              %26 = cir.const #cir.int<0> : !s32i loc(#loc117)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc118)
              %28 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc119)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty__twoIntsStruct>, %27 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc119)
              %30 = cir.get_member %29[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc44)
              cir.store %26, %30 : !s32i, !cir.ptr<!s32i> loc(#loc257)
            } loc(#loc255)
            cir.yield loc(#loc107)
          } step {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc120)
            %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc121)
            cir.store %22, %18 : !u64i, !cir.ptr<!u64i> loc(#loc258)
            cir.yield loc(#loc252)
          } loc(#loc252)
        } loc(#loc252)
      } loc(#loc250)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc260)
        cir.scope {
          %22 = cir.const #cir.int<0> : !s32i loc(#loc128)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc128)
          cir.store %23, %18 : !u64i, !cir.ptr<!u64i> loc(#loc262)
          cir.for : cond {
            %24 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc130)
            %25 = cir.const #cir.int<100> : !s32i loc(#loc131)
            %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc131)
            %27 = cir.cmp(lt, %24, %26) : !u64i, !s32i loc(#loc263)
            %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc132)
            cir.condition(%28) loc(#loc132)
          } body {
            cir.scope {
              %24 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc134)
              %25 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc135)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!ty__twoIntsStruct>, %25 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc136)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc137)
              %28 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc138)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty__twoIntsStruct>, %27 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc138)
              cir.copy %29 to %26 : !cir.ptr<!ty__twoIntsStruct> loc(#loc136)
            } loc(#loc264)
            cir.yield loc(#loc127)
          } step {
            %24 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc139)
            %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc140)
            cir.store %25, %18 : !u64i, !cir.ptr<!u64i> loc(#loc265)
            cir.yield loc(#loc261)
          } loc(#loc261)
        } loc(#loc261)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc141)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc142)
        %21 = cir.ptr_stride(%19 : !cir.ptr<!ty__twoIntsStruct>, %20 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc143)
        cir.call @printStructLine(%21) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc144)
      } loc(#loc259)
    } loc(#loc248)
    cir.return loc(#loc80)
  } loc(#loc240)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc267)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc268)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc150)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc150)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc150)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc150)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc150)
    %7 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc269)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc150)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc150)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc268)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc152)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc152)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc152)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc152)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc152)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc152)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc152)
    cir.store %16, %7 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc269)
    cir.scope {
      %17 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc208)
      %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc155)
      %19 = cir.const #cir.int<5> : !s32i loc(#loc156)
      %20 = cir.cmp(eq, %18, %19) : !s32i, !s32i loc(#loc271)
      %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc157)
      cir.if %21 {
        %22 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc159)
        cir.store %22, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc273)
      } loc(#loc272)
    } loc(#loc270)
    cir.scope {
      %17 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc275)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc277)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc171)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc171)
          cir.store %20, %18 : !u64i, !cir.ptr<!u64i> loc(#loc279)
          cir.for : cond {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc173)
            %22 = cir.const #cir.int<100> : !s32i loc(#loc174)
            %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc174)
            %24 = cir.cmp(lt, %21, %23) : !u64i, !s32i loc(#loc280)
            %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc175)
            cir.condition(%25) loc(#loc175)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc177)
              %22 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc178)
              %23 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc179)
              %24 = cir.ptr_stride(%23 : !cir.ptr<!ty__twoIntsStruct>, %22 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc179)
              %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc40)
              cir.store %21, %25 : !s32i, !cir.ptr<!s32i> loc(#loc282)
              %26 = cir.const #cir.int<0> : !s32i loc(#loc180)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc181)
              %28 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc182)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty__twoIntsStruct>, %27 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc182)
              %30 = cir.get_member %29[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc44)
              cir.store %26, %30 : !s32i, !cir.ptr<!s32i> loc(#loc283)
            } loc(#loc281)
            cir.yield loc(#loc170)
          } step {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc183)
            %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc184)
            cir.store %22, %18 : !u64i, !cir.ptr<!u64i> loc(#loc284)
            cir.yield loc(#loc278)
          } loc(#loc278)
        } loc(#loc278)
      } loc(#loc276)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc286)
        cir.scope {
          %22 = cir.const #cir.int<0> : !s32i loc(#loc191)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc191)
          cir.store %23, %18 : !u64i, !cir.ptr<!u64i> loc(#loc288)
          cir.for : cond {
            %24 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc193)
            %25 = cir.const #cir.int<100> : !s32i loc(#loc194)
            %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc194)
            %27 = cir.cmp(lt, %24, %26) : !u64i, !s32i loc(#loc289)
            %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc195)
            cir.condition(%28) loc(#loc195)
          } body {
            cir.scope {
              %24 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc197)
              %25 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc198)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!ty__twoIntsStruct>, %25 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc199)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc200)
              %28 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc201)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty__twoIntsStruct>, %27 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc201)
              cir.copy %29 to %26 : !cir.ptr<!ty__twoIntsStruct> loc(#loc199)
            } loc(#loc290)
            cir.yield loc(#loc190)
          } step {
            %24 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc202)
            %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc203)
            cir.store %25, %18 : !u64i, !cir.ptr<!u64i> loc(#loc291)
            cir.yield loc(#loc287)
          } loc(#loc287)
        } loc(#loc287)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc204)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc205)
        %21 = cir.ptr_stride(%19 : !cir.ptr<!ty__twoIntsStruct>, %20 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc206)
        cir.call @printStructLine(%21) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc207)
      } loc(#loc285)
    } loc(#loc274)
    cir.return loc(#loc146)
  } loc(#loc266)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":23:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":23:25)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":27:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":59:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":29:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":29:21)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":30:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":30:54)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":31:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":31:55)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":32:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":37:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":32:8)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":32:20)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":32:18)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":33:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":36:16)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":36:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":38:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":58:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":39:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":39:33)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":40:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":48:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":41:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":41:20)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":43:13)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":47:13)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":43:22)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":43:18)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":43:25)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":43:29)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":43:27)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":44:13)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":45:36)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":45:24)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":45:17)
#loc40 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":46:36)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":46:24)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":46:17)
#loc44 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":43:35)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":43:34)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":49:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":57:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":50:13)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":50:20)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":52:13)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":55:13)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":52:22)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":52:18)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":52:25)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":52:29)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":52:27)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":53:13)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":54:17)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":54:22)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":54:23)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":54:34)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":54:27)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":52:35)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":52:34)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":56:30)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":56:35)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":56:36)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":56:13)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":138:1)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":142:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":140:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":140:14)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":141:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":141:14)
#loc76 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc77 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":74:19)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":66:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":102:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":68:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":68:21)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":69:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":69:54)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":70:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":70:55)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":71:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":80:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":71:8)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":71:20)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":71:18)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":72:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":75:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":77:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":74:9)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":79:16)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":79:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":81:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":101:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":82:9)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":82:33)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":83:9)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":91:9)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":84:13)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":84:20)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":86:13)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":90:13)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":86:22)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":86:18)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":86:25)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":86:29)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":86:27)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":87:13)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":88:36)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":88:24)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":88:17)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":89:36)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":89:24)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":89:17)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":86:35)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":86:34)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":92:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":100:9)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":93:13)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":93:20)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":95:13)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":98:13)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":95:22)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":95:18)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":95:25)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":95:29)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":95:27)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":96:13)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":97:17)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":97:22)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":97:23)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":97:34)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":97:27)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":95:35)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":95:34)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":99:30)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":99:35)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":99:36)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":99:13)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":105:1)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":136:1)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":107:5)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":107:21)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":108:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":108:54)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":109:5)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":109:55)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":110:5)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":114:5)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":110:8)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":110:20)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":110:18)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":111:5)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":113:16)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":113:9)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":115:5)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":135:5)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":116:9)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":116:33)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":117:9)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":125:9)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":118:13)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":118:20)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":120:13)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":124:13)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":120:22)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":120:18)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":120:25)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":120:29)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":120:27)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":121:13)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":122:36)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":122:24)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":122:17)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":123:36)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":123:24)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":123:17)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":120:35)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":120:34)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":126:9)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":134:9)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":127:13)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":127:20)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":129:13)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":132:13)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":129:22)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":129:18)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":129:25)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":129:29)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":129:27)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":130:13)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":131:17)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":131:22)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":131:23)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":131:34)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":131:27)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":129:35)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":129:34)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":133:30)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":133:35)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":133:36)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":133:13)
#loc208 = loc(fused[#loc1, #loc2])
#loc209 = loc(fused[#loc3, #loc4])
#loc210 = loc(fused[#loc5, #loc6])
#loc211 = loc(fused[#loc7, #loc8])
#loc212 = loc(fused[#loc9, #loc10])
#loc213 = loc(fused[#loc11, #loc12])
#loc214 = loc(fused[#loc13, #loc14])
#loc215 = loc(fused[#loc15, #loc16])
#loc216 = loc(fused[#loc18, #loc14])
#loc217 = loc(fused[#loc20, #loc19])
#loc218 = loc(fused[#loc21, #loc22])
#loc219 = loc(fused[#loc23, #loc24])
#loc220 = loc(fused[#loc25, #loc26])
#loc221 = loc(fused[#loc27, #loc28])
#loc222 = loc(fused[#loc29, #loc30])
#loc223 = loc(fused[#loc32, #loc31])
#loc224 = loc(fused[#loc33, #loc34])
#loc225 = loc(fused[#loc36, #loc30])
#loc226 = loc(fused[#loc39, #loc37])
#loc227 = loc(fused[#loc43, #loc41])
#loc228 = loc(fused[#loc46, #loc45])
#loc229 = loc(fused[#loc47, #loc48])
#loc230 = loc(fused[#loc49, #loc50])
#loc231 = loc(fused[#loc51, #loc52])
#loc232 = loc(fused[#loc54, #loc53])
#loc233 = loc(fused[#loc55, #loc56])
#loc234 = loc(fused[#loc58, #loc52])
#loc235 = loc(fused[#loc65, #loc64])
#loc236 = loc(fused[#loc70, #loc71])
#loc237 = loc(fused[#loc72, #loc73])
#loc238 = loc(fused[#loc74, #loc75])
#loc239 = loc(fused[#loc76, #loc77])
#loc240 = loc(fused[#loc79, #loc80])
#loc241 = loc(fused[#loc81, #loc82])
#loc242 = loc(fused[#loc83, #loc84])
#loc243 = loc(fused[#loc85, #loc86])
#loc244 = loc(fused[#loc87, #loc88])
#loc245 = loc(fused[#loc89, #loc90])
#loc246 = loc(fused[#loc92, #loc93, #loc94, #loc88])
#loc247 = loc(fused[#loc97, #loc96])
#loc248 = loc(fused[#loc98, #loc99])
#loc249 = loc(fused[#loc100, #loc101])
#loc250 = loc(fused[#loc102, #loc103])
#loc251 = loc(fused[#loc104, #loc105])
#loc252 = loc(fused[#loc106, #loc107])
#loc253 = loc(fused[#loc109, #loc108])
#loc254 = loc(fused[#loc110, #loc111])
#loc255 = loc(fused[#loc113, #loc107])
#loc256 = loc(fused[#loc116, #loc114])
#loc257 = loc(fused[#loc119, #loc117])
#loc258 = loc(fused[#loc121, #loc120])
#loc259 = loc(fused[#loc122, #loc123])
#loc260 = loc(fused[#loc124, #loc125])
#loc261 = loc(fused[#loc126, #loc127])
#loc262 = loc(fused[#loc129, #loc128])
#loc263 = loc(fused[#loc130, #loc131])
#loc264 = loc(fused[#loc133, #loc127])
#loc265 = loc(fused[#loc140, #loc139])
#loc266 = loc(fused[#loc145, #loc146])
#loc267 = loc(fused[#loc147, #loc148])
#loc268 = loc(fused[#loc149, #loc150])
#loc269 = loc(fused[#loc151, #loc152])
#loc270 = loc(fused[#loc153, #loc154])
#loc271 = loc(fused[#loc155, #loc156])
#loc272 = loc(fused[#loc158, #loc154])
#loc273 = loc(fused[#loc160, #loc159])
#loc274 = loc(fused[#loc161, #loc162])
#loc275 = loc(fused[#loc163, #loc164])
#loc276 = loc(fused[#loc165, #loc166])
#loc277 = loc(fused[#loc167, #loc168])
#loc278 = loc(fused[#loc169, #loc170])
#loc279 = loc(fused[#loc172, #loc171])
#loc280 = loc(fused[#loc173, #loc174])
#loc281 = loc(fused[#loc176, #loc170])
#loc282 = loc(fused[#loc179, #loc177])
#loc283 = loc(fused[#loc182, #loc180])
#loc284 = loc(fused[#loc184, #loc183])
#loc285 = loc(fused[#loc185, #loc186])
#loc286 = loc(fused[#loc187, #loc188])
#loc287 = loc(fused[#loc189, #loc190])
#loc288 = loc(fused[#loc192, #loc191])
#loc289 = loc(fused[#loc193, #loc194])
#loc290 = loc(fused[#loc196, #loc190])
#loc291 = loc(fused[#loc203, #loc202])
