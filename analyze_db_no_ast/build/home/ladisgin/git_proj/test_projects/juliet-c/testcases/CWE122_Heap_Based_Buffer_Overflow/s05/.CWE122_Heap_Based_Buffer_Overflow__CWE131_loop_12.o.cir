!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc155)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc156)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc157)
  cir.func private  @printIntLine(!s32i) loc(#loc158)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc159)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc161)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc162)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc164)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc164)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc24)
        %7 = cir.const #cir.int<10> : !s32i loc(#loc25)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc25)
        %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc166)
        cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc167)
        cir.scope {
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc30)
          %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc31)
          %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !s32i loc(#loc169)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc32)
          cir.if %15 {
            %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc34)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc35)
            %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc36)
            cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc34)
          } loc(#loc170)
        } loc(#loc168)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc37)
        %7 = cir.const #cir.int<10> : !s32i loc(#loc38)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc38)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc171)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc172)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc37)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc173)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc174)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc46)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc46)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !s32i loc(#loc176)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc47)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc49)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc50)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc51)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc49)
          } loc(#loc177)
        } loc(#loc175)
      } loc(#loc165)
    } loc(#loc163)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc179)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc180)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc179)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc179)
      cir.scope {
        %12 = cir.const #cir.int<0> : !s32i loc(#loc60)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc60)
        cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc182)
        cir.for : cond {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc62)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc63)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc63)
          %17 = cir.cmp(lt, %14, %16) : !u64i, !s32i loc(#loc183)
          %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc64)
          cir.condition(%18) loc(#loc64)
        } body {
          cir.scope {
            %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc66)
            %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc67)
            %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !u64i), !cir.ptr<!s32i> loc(#loc67)
            %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc67)
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc68)
            %19 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc69)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc70)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc185)
          } loc(#loc184)
          cir.yield loc(#loc59)
        } step {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc72)
          %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc73)
          cir.store %15, %3 : !u64i, !cir.ptr<!u64i> loc(#loc186)
          cir.yield loc(#loc181)
        } loc(#loc181)
      } loc(#loc181)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc75)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc76)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc74)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc77)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc78)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc79)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc79)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc78)
    } loc(#loc178)
    cir.return loc(#loc12)
  } loc(#loc160)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc188)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc82)
    cir.return loc(#loc81)
  } loc(#loc187)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc190)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc88)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc191)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc193)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc193)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc92)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc92)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc97)
        %7 = cir.const #cir.int<10> : !s32i loc(#loc98)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc98)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc195)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc196)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc97)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc197)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc198)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc105)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc106)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc106)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !s32i loc(#loc200)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc107)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc109)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc110)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc111)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc109)
          } loc(#loc201)
        } loc(#loc199)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc112)
        %7 = cir.const #cir.int<10> : !s32i loc(#loc113)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc113)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc202)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc203)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc112)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc204)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc205)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc120)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc121)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc121)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !s32i loc(#loc207)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc122)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc124)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc125)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc126)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc124)
          } loc(#loc208)
        } loc(#loc206)
      } loc(#loc194)
    } loc(#loc192)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc210)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc211)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc210)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc210)
      cir.scope {
        %12 = cir.const #cir.int<0> : !s32i loc(#loc135)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc135)
        cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc213)
        cir.for : cond {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc137)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc138)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc138)
          %17 = cir.cmp(lt, %14, %16) : !u64i, !s32i loc(#loc214)
          %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc139)
          cir.condition(%18) loc(#loc139)
        } body {
          cir.scope {
            %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc141)
            %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc142)
            %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !u64i), !cir.ptr<!s32i> loc(#loc142)
            %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc142)
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc143)
            %19 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc144)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc145)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc216)
          } loc(#loc215)
          cir.yield loc(#loc134)
        } step {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc147)
          %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc148)
          cir.store %15, %3 : !u64i, !cir.ptr<!u64i> loc(#loc217)
          cir.yield loc(#loc212)
        } loc(#loc212)
      } loc(#loc212)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc149)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc150)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc151)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc149)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc152)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc153)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc154)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc154)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc153)
    } loc(#loc209)
    cir.return loc(#loc85)
  } loc(#loc189)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":21:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":48:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":23:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":23:11)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":24:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":24:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":25:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":36:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":25:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":25:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":30:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":32:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":28:23)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":28:30)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":28:32)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":28:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":29:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":29:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":29:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":29:21)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":29:18)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":29:27)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":29:28)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":29:34)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":29:33)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":34:23)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":34:30)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":34:33)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":34:43)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":34:44)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":34:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":35:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":35:37)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":35:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":35:21)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":35:18)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":35:27)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":35:28)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":35:34)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":35:33)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":37:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":47:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":38:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":38:28)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":39:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":39:16)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":41:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":44:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":41:18)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":41:14)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":41:21)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":41:25)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":41:23)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":42:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":43:30)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":43:23)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":43:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":43:18)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":43:19)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":43:31)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":41:30)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":41:29)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":45:22)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":45:27)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":45:28)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":45:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":46:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":46:14)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":85:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":88:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":87:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":87:13)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":56:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":83:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":58:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":58:11)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":59:12)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":59:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":60:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":71:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":60:8)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":60:33)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":61:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":65:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":67:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":63:23)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":63:30)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":63:33)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":63:43)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":63:44)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":63:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":64:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":64:37)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":64:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":64:21)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":64:18)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":64:27)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":64:28)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":64:34)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":64:33)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":69:23)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":69:30)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":69:33)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":69:43)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":69:44)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":69:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":70:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":70:37)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":70:13)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":70:21)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":70:18)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":70:27)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":70:28)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":70:34)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":70:33)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":72:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":82:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":73:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":73:28)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":74:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":74:16)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":76:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":79:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":76:18)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":76:14)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":76:21)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":76:25)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":76:23)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":77:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":78:30)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":78:23)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":78:13)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":78:18)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":78:19)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":78:31)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":76:30)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":76:29)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":80:22)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":80:27)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":80:28)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":80:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":81:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":81:14)
#loc155 = loc(fused[#loc1, #loc2])
#loc156 = loc(fused[#loc3, #loc4])
#loc157 = loc(fused[#loc5, #loc6])
#loc158 = loc(fused[#loc7, #loc8])
#loc159 = loc(fused[#loc9, #loc10])
#loc160 = loc(fused[#loc11, #loc12])
#loc161 = loc(fused[#loc13, #loc14])
#loc162 = loc(fused[#loc16, #loc15])
#loc163 = loc(fused[#loc17, #loc18])
#loc164 = loc(fused[#loc19, #loc20])
#loc165 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc166 = loc(fused[#loc24, #loc26])
#loc167 = loc(fused[#loc27, #loc26])
#loc168 = loc(fused[#loc28, #loc29])
#loc169 = loc(fused[#loc30, #loc31])
#loc170 = loc(fused[#loc33, #loc29])
#loc171 = loc(fused[#loc39, #loc40])
#loc172 = loc(fused[#loc38, #loc40])
#loc173 = loc(fused[#loc37, #loc41])
#loc174 = loc(fused[#loc42, #loc41])
#loc175 = loc(fused[#loc43, #loc44])
#loc176 = loc(fused[#loc45, #loc46])
#loc177 = loc(fused[#loc48, #loc44])
#loc178 = loc(fused[#loc52, #loc53])
#loc179 = loc(fused[#loc54, #loc55])
#loc180 = loc(fused[#loc56, #loc57])
#loc181 = loc(fused[#loc58, #loc59])
#loc182 = loc(fused[#loc61, #loc60])
#loc183 = loc(fused[#loc62, #loc63])
#loc184 = loc(fused[#loc65, #loc59])
#loc185 = loc(fused[#loc68, #loc71])
#loc186 = loc(fused[#loc73, #loc72])
#loc187 = loc(fused[#loc80, #loc81])
#loc188 = loc(fused[#loc82, #loc83])
#loc189 = loc(fused[#loc84, #loc85])
#loc190 = loc(fused[#loc86, #loc87])
#loc191 = loc(fused[#loc89, #loc88])
#loc192 = loc(fused[#loc90, #loc91])
#loc193 = loc(fused[#loc92, #loc93])
#loc194 = loc(fused[#loc94, #loc95, #loc96, #loc91])
#loc195 = loc(fused[#loc99, #loc100])
#loc196 = loc(fused[#loc98, #loc100])
#loc197 = loc(fused[#loc97, #loc101])
#loc198 = loc(fused[#loc102, #loc101])
#loc199 = loc(fused[#loc103, #loc104])
#loc200 = loc(fused[#loc105, #loc106])
#loc201 = loc(fused[#loc108, #loc104])
#loc202 = loc(fused[#loc114, #loc115])
#loc203 = loc(fused[#loc113, #loc115])
#loc204 = loc(fused[#loc112, #loc116])
#loc205 = loc(fused[#loc117, #loc116])
#loc206 = loc(fused[#loc118, #loc119])
#loc207 = loc(fused[#loc120, #loc121])
#loc208 = loc(fused[#loc123, #loc119])
#loc209 = loc(fused[#loc127, #loc128])
#loc210 = loc(fused[#loc129, #loc130])
#loc211 = loc(fused[#loc131, #loc132])
#loc212 = loc(fused[#loc133, #loc134])
#loc213 = loc(fused[#loc136, #loc135])
#loc214 = loc(fused[#loc137, #loc138])
#loc215 = loc(fused[#loc140, #loc134])
#loc216 = loc(fused[#loc143, #loc146])
#loc217 = loc(fused[#loc148, #loc147])
