!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_connect_socket_multiply_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc293)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc294)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc295)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc296)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc297)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc298)
  cir.func private @close(!s32i) -> !s32i loc(#loc299)
  cir.func private @printIntLine(!s32i) loc(#loc300)
  cir.func no_proto @CWE191_Integer_Underflow__int_connect_socket_multiply_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc302)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc22)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc303)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc26)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc26)
        cir.condition(%3) loc(#loc26)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc307)
            %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc308)
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc309)
            %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc310)
            %6 = cir.const #cir.int<1> : !s32i loc(#loc35)
            %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc35)
            cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc309)
            cir.scope {
              cir.do {
                cir.scope {
                  %8 = cir.const #cir.int<2> : !s32i loc(#loc42)
                  %9 = cir.const #cir.int<1> : !s32i loc(#loc43)
                  %10 = cir.const #cir.int<6> : !s32i loc(#loc44)
                  %11 = cir.call @socket(%8, %9, %10) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc45)
                  cir.store %11, %4 : !s32i, !cir.ptr<!s32i> loc(#loc313)
                  cir.scope {
                    %50 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc50)
                    %51 = cir.const #cir.int<1> : !s32i loc(#loc51)
                    %52 = cir.unary(minus, %51) nsw : !s32i, !s32i loc(#loc51)
                    %53 = cir.cmp(eq, %50, %52) : !s32i, !cir.bool loc(#loc315)
                    cir.if %53 {
                      cir.break loc(#loc53)
                    } loc(#loc316)
                  } loc(#loc314)
                  %12 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc317)
                  %13 = cir.const #cir.int<0> : !s32i loc(#loc56)
                  %14 = cir.const #cir.int<16> : !u64i loc(#loc318)
                  cir.libc.memset %14 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc319)
                  %15 = cir.const #cir.int<2> : !s32i loc(#loc61)
                  %16 = cir.cast(integral, %15 : !s32i), !u16i loc(#loc61)
                  %17 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
                  cir.store %16, %17 : !u16i, !cir.ptr<!u16i> loc(#loc320)
                  %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
                  %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
                  %20 = cir.call @inet_addr(%19) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc64)
                  %21 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc65)
                  %22 = cir.get_member %21[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc66)
                  cir.store %20, %22 : !u32i, !cir.ptr<!u32i> loc(#loc321)
                  %23 = cir.const #cir.int<27015> : !s32i loc(#loc69)
                  %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc69)
                  %25 = cir.call @htons(%24) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc70)
                  %26 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
                  cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc322)
                  cir.scope {
                    %50 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc76)
                    %51 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc324)
                    %52 = cir.const #cir.int<16> : !u64i loc(#loc325)
                    %53 = cir.cast(integral, %52 : !u64i), !u32i loc(#loc325)
                    %54 = cir.call @connect(%50, %51, %53) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc81)
                    %55 = cir.const #cir.int<1> : !s32i loc(#loc82)
                    %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc82)
                    %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc326)
                    cir.if %57 {
                      cir.break loc(#loc84)
                    } loc(#loc327)
                  } loc(#loc323)
                  %27 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                  %28 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc86)
                  %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc86)
                  %30 = cir.const #cir.int<3> : !s32i loc(#loc87)
                  %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc87)
                  %32 = cir.const #cir.int<4> : !u64i loc(#loc87)
                  %33 = cir.binop(mul, %31, %32) : !u64i loc(#loc87)
                  %34 = cir.const #cir.int<2> : !s32i loc(#loc87)
                  %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc87)
                  %36 = cir.binop(add, %33, %35) : !u64i loc(#loc87)
                  %37 = cir.const #cir.int<1> : !s32i loc(#loc88)
                  %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc88)
                  %39 = cir.binop(sub, %36, %38) : !u64i loc(#loc328)
                  %40 = cir.const #cir.int<0> : !s32i loc(#loc89)
                  %41 = cir.call @recv(%27, %29, %39, %40) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc90)
                  %42 = cir.cast(integral, %41 : !s64i), !s32i loc(#loc90)
                  cir.store %42, %2 : !s32i, !cir.ptr<!s32i> loc(#loc329)
                  cir.scope {
                    %50 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                    %51 = cir.const #cir.int<1> : !s32i loc(#loc96)
                    %52 = cir.unary(minus, %51) nsw : !s32i, !s32i loc(#loc96)
                    %53 = cir.cmp(eq, %50, %52) : !s32i, !cir.bool loc(#loc331)
                    %54 = cir.ternary(%53, true {
                      %55 = cir.const #true loc(#loc97)
                      cir.yield %55 : !cir.bool loc(#loc97)
                    }, false {
                      %55 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc98)
                      %56 = cir.const #cir.int<0> : !s32i loc(#loc99)
                      %57 = cir.cmp(eq, %55, %56) : !s32i, !cir.bool loc(#loc332)
                      %58 = cir.ternary(%57, true {
                        %59 = cir.const #true loc(#loc97)
                        cir.yield %59 : !cir.bool loc(#loc97)
                      }, false {
                        %59 = cir.const #false loc(#loc97)
                        cir.yield %59 : !cir.bool loc(#loc97)
                      }) : (!cir.bool) -> !cir.bool loc(#loc97)
                      cir.yield %58 : !cir.bool loc(#loc97)
                    }) : (!cir.bool) -> !cir.bool loc(#loc97)
                    cir.if %54 {
                      cir.break loc(#loc101)
                    } loc(#loc333)
                  } loc(#loc330)
                  %43 = cir.const #cir.int<0> : !s32i loc(#loc102)
                  %44 = cir.cast(integral, %43 : !s32i), !s8i loc(#loc102)
                  %45 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc103)
                  %46 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc104)
                  %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc104)
                  cir.store %44, %47 : !s8i, !cir.ptr<!s8i> loc(#loc334)
                  %48 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc105)
                  %49 = cir.call @atoi(%48) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc106)
                  cir.store %49, %0 : !s32i, !cir.ptr<!s32i> loc(#loc335)
                } loc(#loc312)
                cir.yield loc(#loc39)
              } while {
                %8 = cir.const #cir.int<0> : !s32i loc(#loc109)
                %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc109)
                cir.condition(%9) loc(#loc109)
              } loc(#loc311)
            } loc(#loc311)
            cir.scope {
              %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc112)
              %9 = cir.const #cir.int<1> : !s32i loc(#loc113)
              %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc113)
              %11 = cir.cmp(ne, %8, %10) : !s32i, !cir.bool loc(#loc337)
              cir.if %11 {
                %12 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc115)
                %13 = cir.call @close(%12) : (!s32i) -> !s32i loc(#loc116)
              } loc(#loc338)
            } loc(#loc336)
          } loc(#loc306)
          cir.break loc(#loc117)
        } loc(#loc305)
        cir.yield loc(#loc25)
      } loc(#loc304)
    } loc(#loc304)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc120)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc120)
        cir.condition(%3) loc(#loc120)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc124)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc125)
            %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc342)
            cir.if %4 {
              %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc344)
              %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
              %7 = cir.const #cir.int<2> : !s32i loc(#loc128)
              %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc129)
              cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc344)
              %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc130)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc131)
            } loc(#loc343)
          } loc(#loc341)
          cir.break loc(#loc132)
        } loc(#loc340)
        cir.yield loc(#loc119)
      } loc(#loc339)
    } loc(#loc339)
    cir.return loc(#loc19)
  } loc(#loc301)
  cir.func no_proto @CWE191_Integer_Underflow__int_connect_socket_multiply_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc346)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc135)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc347)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc137)
    cir.return loc(#loc134)
  } loc(#loc345)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc348)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc141)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc350)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc146)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc351)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc150)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc150)
        cir.condition(%3) loc(#loc150)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc355)
            %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc356)
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc357)
            %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc358)
            %6 = cir.const #cir.int<1> : !s32i loc(#loc159)
            %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc159)
            cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc357)
            cir.scope {
              cir.do {
                cir.scope {
                  %8 = cir.const #cir.int<2> : !s32i loc(#loc166)
                  %9 = cir.const #cir.int<1> : !s32i loc(#loc167)
                  %10 = cir.const #cir.int<6> : !s32i loc(#loc168)
                  %11 = cir.call @socket(%8, %9, %10) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc169)
                  cir.store %11, %4 : !s32i, !cir.ptr<!s32i> loc(#loc361)
                  cir.scope {
                    %50 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc174)
                    %51 = cir.const #cir.int<1> : !s32i loc(#loc175)
                    %52 = cir.unary(minus, %51) nsw : !s32i, !s32i loc(#loc175)
                    %53 = cir.cmp(eq, %50, %52) : !s32i, !cir.bool loc(#loc363)
                    cir.if %53 {
                      cir.break loc(#loc177)
                    } loc(#loc364)
                  } loc(#loc362)
                  %12 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc365)
                  %13 = cir.const #cir.int<0> : !s32i loc(#loc180)
                  %14 = cir.const #cir.int<16> : !u64i loc(#loc366)
                  cir.libc.memset %14 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc367)
                  %15 = cir.const #cir.int<2> : !s32i loc(#loc185)
                  %16 = cir.cast(integral, %15 : !s32i), !u16i loc(#loc185)
                  %17 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
                  cir.store %16, %17 : !u16i, !cir.ptr<!u16i> loc(#loc368)
                  %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc187)
                  %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc187)
                  %20 = cir.call @inet_addr(%19) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc188)
                  %21 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc65)
                  %22 = cir.get_member %21[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc66)
                  cir.store %20, %22 : !u32i, !cir.ptr<!u32i> loc(#loc369)
                  %23 = cir.const #cir.int<27015> : !s32i loc(#loc191)
                  %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc191)
                  %25 = cir.call @htons(%24) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc192)
                  %26 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
                  cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc370)
                  cir.scope {
                    %50 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc197)
                    %51 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc372)
                    %52 = cir.const #cir.int<16> : !u64i loc(#loc373)
                    %53 = cir.cast(integral, %52 : !u64i), !u32i loc(#loc373)
                    %54 = cir.call @connect(%50, %51, %53) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc202)
                    %55 = cir.const #cir.int<1> : !s32i loc(#loc203)
                    %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc203)
                    %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc374)
                    cir.if %57 {
                      cir.break loc(#loc205)
                    } loc(#loc375)
                  } loc(#loc371)
                  %27 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc206)
                  %28 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc207)
                  %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc207)
                  %30 = cir.const #cir.int<3> : !s32i loc(#loc208)
                  %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc208)
                  %32 = cir.const #cir.int<4> : !u64i loc(#loc208)
                  %33 = cir.binop(mul, %31, %32) : !u64i loc(#loc208)
                  %34 = cir.const #cir.int<2> : !s32i loc(#loc208)
                  %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc208)
                  %36 = cir.binop(add, %33, %35) : !u64i loc(#loc208)
                  %37 = cir.const #cir.int<1> : !s32i loc(#loc209)
                  %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc209)
                  %39 = cir.binop(sub, %36, %38) : !u64i loc(#loc376)
                  %40 = cir.const #cir.int<0> : !s32i loc(#loc210)
                  %41 = cir.call @recv(%27, %29, %39, %40) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc211)
                  %42 = cir.cast(integral, %41 : !s64i), !s32i loc(#loc211)
                  cir.store %42, %2 : !s32i, !cir.ptr<!s32i> loc(#loc377)
                  cir.scope {
                    %50 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc216)
                    %51 = cir.const #cir.int<1> : !s32i loc(#loc217)
                    %52 = cir.unary(minus, %51) nsw : !s32i, !s32i loc(#loc217)
                    %53 = cir.cmp(eq, %50, %52) : !s32i, !cir.bool loc(#loc379)
                    %54 = cir.ternary(%53, true {
                      %55 = cir.const #true loc(#loc218)
                      cir.yield %55 : !cir.bool loc(#loc218)
                    }, false {
                      %55 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc219)
                      %56 = cir.const #cir.int<0> : !s32i loc(#loc220)
                      %57 = cir.cmp(eq, %55, %56) : !s32i, !cir.bool loc(#loc380)
                      %58 = cir.ternary(%57, true {
                        %59 = cir.const #true loc(#loc218)
                        cir.yield %59 : !cir.bool loc(#loc218)
                      }, false {
                        %59 = cir.const #false loc(#loc218)
                        cir.yield %59 : !cir.bool loc(#loc218)
                      }) : (!cir.bool) -> !cir.bool loc(#loc218)
                      cir.yield %58 : !cir.bool loc(#loc218)
                    }) : (!cir.bool) -> !cir.bool loc(#loc218)
                    cir.if %54 {
                      cir.break loc(#loc222)
                    } loc(#loc381)
                  } loc(#loc378)
                  %43 = cir.const #cir.int<0> : !s32i loc(#loc223)
                  %44 = cir.cast(integral, %43 : !s32i), !s8i loc(#loc223)
                  %45 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc224)
                  %46 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc225)
                  %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc225)
                  cir.store %44, %47 : !s8i, !cir.ptr<!s8i> loc(#loc382)
                  %48 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc226)
                  %49 = cir.call @atoi(%48) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc227)
                  cir.store %49, %0 : !s32i, !cir.ptr<!s32i> loc(#loc383)
                } loc(#loc360)
                cir.yield loc(#loc163)
              } while {
                %8 = cir.const #cir.int<0> : !s32i loc(#loc230)
                %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc230)
                cir.condition(%9) loc(#loc230)
              } loc(#loc359)
            } loc(#loc359)
            cir.scope {
              %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc233)
              %9 = cir.const #cir.int<1> : !s32i loc(#loc234)
              %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc234)
              %11 = cir.cmp(ne, %8, %10) : !s32i, !cir.bool loc(#loc385)
              cir.if %11 {
                %12 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc236)
                %13 = cir.call @close(%12) : (!s32i) -> !s32i loc(#loc237)
              } loc(#loc386)
            } loc(#loc384)
          } loc(#loc354)
          cir.break loc(#loc238)
        } loc(#loc353)
        cir.yield loc(#loc149)
      } loc(#loc352)
    } loc(#loc352)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc241)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc241)
        cir.condition(%3) loc(#loc241)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc245)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc246)
            %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc390)
            cir.if %4 {
              cir.scope {
                %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc250)
                %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc251)
                %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc251)
                %8 = cir.const #cir.int<1> : !s32i loc(#loc251)
                %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc251)
                %10 = cir.const #cir.int<2> : !s32i loc(#loc252)
                %11 = cir.binop(div, %9, %10) : !s32i loc(#loc393)
                %12 = cir.cmp(gt, %5, %11) : !s32i, !cir.bool loc(#loc394)
                cir.if %12 {
                  %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc396)
                  %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc259)
                  %15 = cir.const #cir.int<2> : !s32i loc(#loc258)
                  %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc259)
                  cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc396)
                  %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc260)
                  cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc261)
                } else {
                  %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc141)
                  %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc141)
                  cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc262)
                } loc(#loc395)
              } loc(#loc392)
            } loc(#loc391)
          } loc(#loc389)
          cir.break loc(#loc263)
        } loc(#loc388)
        cir.yield loc(#loc240)
      } loc(#loc387)
    } loc(#loc387)
    cir.return loc(#loc143)
  } loc(#loc349)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc398)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc268)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc399)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc272)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc272)
        cir.condition(%3) loc(#loc272)
      } do {
        cir.scope {
          %2 = cir.const #cir.int<2> : !s32i loc(#loc274)
          %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc275)
          cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc402)
          cir.break loc(#loc277)
        } loc(#loc401)
        cir.yield loc(#loc271)
      } loc(#loc400)
    } loc(#loc400)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc280)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc280)
        cir.condition(%3) loc(#loc280)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc284)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc285)
            %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc406)
            cir.if %4 {
              %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc408)
              %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc289)
              %7 = cir.const #cir.int<2> : !s32i loc(#loc288)
              %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc289)
              cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc408)
              %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc290)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc291)
            } loc(#loc407)
          } loc(#loc405)
          cir.break loc(#loc292)
        } loc(#loc404)
        cir.yield loc(#loc279)
      } loc(#loc403)
    } loc(#loc403)
    cir.return loc(#loc265)
  } loc(#loc397)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":77:53)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":44:1)
#loc19 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":119:1)
#loc20 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":46:5)
#loc21 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":46:9)
#loc22 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":48:12)
#loc23 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":48:5)
#loc24 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":49:5)
#loc25 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":108:5)
#loc26 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":49:11)
#loc27 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":50:5)
#loc28 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":51:9)
#loc29 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":106:9)
#loc30 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":56:13)
#loc31 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":56:17)
#loc32 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":57:13)
#loc33 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":57:32)
#loc34 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":58:13)
#loc35 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":58:36)
#loc36 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":59:13)
#loc37 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":59:45)
#loc38 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":60:13)
#loc39 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":95:21)
#loc40 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":61:13)
#loc41 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":94:13)
#loc42 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":70:40)
#loc43 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":70:49)
#loc44 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":70:62)
#loc45 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":70:33)
#loc46 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":70:17)
#loc47 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":70:73)
#loc48 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":71:17)
#loc49 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":74:17)
#loc50 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":71:21)
#loc51 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":71:38)
#loc52 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":72:17)
#loc53 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":73:21)
#loc54 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":75:24)
#loc55 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":75:25)
#loc56 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":75:34)
#loc57 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":75:37)
#loc58 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":75:51)
#loc59 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":75:17)
#loc60 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":75:52)
#loc61 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":76:38)
#loc62 = loc("/usr/include/netinet/in.h":249:5)
#loc63 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":76:17)
#loc64 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":77:43)
#loc65 = loc("/usr/include/netinet/in.h":251:20)
#loc66 = loc("/usr/include/netinet/in.h":33:15)
#loc67 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":77:17)
#loc68 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":77:63)
#loc69 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":78:42)
#loc70 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":78:36)
#loc71 = loc("/usr/include/netinet/in.h":250:15)
#loc72 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":78:17)
#loc73 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":78:50)
#loc74 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":79:17)
#loc75 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":82:17)
#loc76 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":79:29)
#loc77 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":79:62)
#loc78 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":79:63)
#loc79 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":79:72)
#loc80 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":79:86)
#loc81 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":79:21)
#loc82 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":79:92)
#loc83 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":80:17)
#loc84 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":81:21)
#loc85 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":85:35)
#loc86 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":85:50)
#loc87 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":85:63)
#loc88 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":85:81)
#loc89 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":85:84)
#loc90 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":85:30)
#loc91 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":85:17)
#loc92 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":85:85)
#loc93 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":86:17)
#loc94 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":89:17)
#loc95 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":86:21)
#loc96 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":86:35)
#loc97 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":86:48)
#loc98 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":86:51)
#loc99 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":86:65)
#loc100 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":87:17)
#loc101 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":88:21)
#loc102 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":91:43)
#loc103 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":91:29)
#loc104 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":91:17)
#loc105 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":93:29)
#loc106 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":93:24)
#loc107 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":93:17)
#loc108 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":93:40)
#loc109 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":95:20)
#loc110 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":96:13)
#loc111 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":99:13)
#loc112 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":96:17)
#loc113 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":96:34)
#loc114 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":97:13)
#loc115 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":98:30)
#loc116 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":98:17)
#loc117 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":107:9)
#loc118 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":109:5)
#loc119 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":118:5)
#loc120 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":109:11)
#loc121 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":110:5)
#loc122 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":111:9)
#loc123 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":116:9)
#loc124 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":111:12)
#loc125 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":111:19)
#loc126 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":112:9)
#loc127 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":114:13)
#loc128 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":114:33)
#loc129 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":114:26)
#loc130 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":115:26)
#loc131 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":115:13)
#loc132 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":117:9)
#loc133 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":234:1)
#loc134 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":238:1)
#loc135 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":236:5)
#loc136 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":236:13)
#loc137 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":237:5)
#loc138 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":237:13)
#loc139 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc140 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc141 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":203:27)
#loc142 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":126:1)
#loc143 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":208:1)
#loc144 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":128:5)
#loc145 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":128:9)
#loc146 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":130:12)
#loc147 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":130:5)
#loc148 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":131:5)
#loc149 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":190:5)
#loc150 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":131:11)
#loc151 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":132:5)
#loc152 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":133:9)
#loc153 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":188:9)
#loc154 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":138:13)
#loc155 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":138:17)
#loc156 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":139:13)
#loc157 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":139:32)
#loc158 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":140:13)
#loc159 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":140:36)
#loc160 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":141:13)
#loc161 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":141:45)
#loc162 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":142:13)
#loc163 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":177:21)
#loc164 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":143:13)
#loc165 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":176:13)
#loc166 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":152:40)
#loc167 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":152:49)
#loc168 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":152:62)
#loc169 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":152:33)
#loc170 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":152:17)
#loc171 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":152:73)
#loc172 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":153:17)
#loc173 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":156:17)
#loc174 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":153:21)
#loc175 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":153:38)
#loc176 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":154:17)
#loc177 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":155:21)
#loc178 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":157:24)
#loc179 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":157:25)
#loc180 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":157:34)
#loc181 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":157:37)
#loc182 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":157:51)
#loc183 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":157:17)
#loc184 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":157:52)
#loc185 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":158:38)
#loc186 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":158:17)
#loc187 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":159:53)
#loc188 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":159:43)
#loc189 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":159:17)
#loc190 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":159:63)
#loc191 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":160:42)
#loc192 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":160:36)
#loc193 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":160:17)
#loc194 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":160:50)
#loc195 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":161:17)
#loc196 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":164:17)
#loc197 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":161:29)
#loc198 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":161:62)
#loc199 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":161:63)
#loc200 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":161:72)
#loc201 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":161:86)
#loc202 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":161:21)
#loc203 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":161:92)
#loc204 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":162:17)
#loc205 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":163:21)
#loc206 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":167:35)
#loc207 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":167:50)
#loc208 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":167:63)
#loc209 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":167:81)
#loc210 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":167:84)
#loc211 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":167:30)
#loc212 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":167:17)
#loc213 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":167:85)
#loc214 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":168:17)
#loc215 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":171:17)
#loc216 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":168:21)
#loc217 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":168:35)
#loc218 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":168:48)
#loc219 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":168:51)
#loc220 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":168:65)
#loc221 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":169:17)
#loc222 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":170:21)
#loc223 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":173:43)
#loc224 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":173:29)
#loc225 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":173:17)
#loc226 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":175:29)
#loc227 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":175:24)
#loc228 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":175:17)
#loc229 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":175:40)
#loc230 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":177:20)
#loc231 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":178:13)
#loc232 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":181:13)
#loc233 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":178:17)
#loc234 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":178:34)
#loc235 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":179:13)
#loc236 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":180:30)
#loc237 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":180:17)
#loc238 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":189:9)
#loc239 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":191:5)
#loc240 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":207:5)
#loc241 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":191:11)
#loc242 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":192:5)
#loc243 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":193:9)
#loc244 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":205:9)
#loc245 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":193:12)
#loc246 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":193:19)
#loc247 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":194:9)
#loc248 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":196:13)
#loc249 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":204:13)
#loc250 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":196:17)
#loc251 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":196:25)
#loc252 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":196:33)
#loc253 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":196:34)
#loc254 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":197:13)
#loc255 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":200:13)
#loc256 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":202:13)
#loc257 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":198:17)
#loc258 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":198:37)
#loc259 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":198:30)
#loc260 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":199:30)
#loc261 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":199:17)
#loc262 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":203:17)
#loc263 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":206:9)
#loc264 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":211:1)
#loc265 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":232:1)
#loc266 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":213:5)
#loc267 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":213:9)
#loc268 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":215:12)
#loc269 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":215:5)
#loc270 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":216:5)
#loc271 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":221:5)
#loc272 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":216:11)
#loc273 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":217:5)
#loc274 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":219:17)
#loc275 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":219:16)
#loc276 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":219:9)
#loc277 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":220:9)
#loc278 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":222:5)
#loc279 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":231:5)
#loc280 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":222:11)
#loc281 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":223:5)
#loc282 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":224:9)
#loc283 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":229:9)
#loc284 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":224:12)
#loc285 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":224:19)
#loc286 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":225:9)
#loc287 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":227:13)
#loc288 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":227:33)
#loc289 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":227:26)
#loc290 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":228:26)
#loc291 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":228:13)
#loc292 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_16.c":230:9)
#loc293 = loc(fused[#loc1, #loc2])
#loc294 = loc(fused[#loc3, #loc4])
#loc295 = loc(fused[#loc6, #loc7])
#loc296 = loc(fused[#loc8, #loc9])
#loc297 = loc(fused[#loc10, #loc11])
#loc298 = loc(fused[#loc12, #loc13])
#loc299 = loc(fused[#loc14, #loc15])
#loc300 = loc(fused[#loc16, #loc17])
#loc301 = loc(fused[#loc18, #loc19])
#loc302 = loc(fused[#loc20, #loc21])
#loc303 = loc(fused[#loc23, #loc22])
#loc304 = loc(fused[#loc24, #loc25])
#loc305 = loc(fused[#loc27, #loc25])
#loc306 = loc(fused[#loc28, #loc29])
#loc307 = loc(fused[#loc30, #loc31])
#loc308 = loc(fused[#loc32, #loc33])
#loc309 = loc(fused[#loc34, #loc35])
#loc310 = loc(fused[#loc36, #loc37])
#loc311 = loc(fused[#loc38, #loc39])
#loc312 = loc(fused[#loc40, #loc41])
#loc313 = loc(fused[#loc46, #loc47])
#loc314 = loc(fused[#loc48, #loc49])
#loc315 = loc(fused[#loc50, #loc51])
#loc316 = loc(fused[#loc52, #loc49])
#loc317 = loc(fused[#loc54, #loc55])
#loc318 = loc(fused[#loc57, #loc58])
#loc319 = loc(fused[#loc59, #loc60])
#loc320 = loc(fused[#loc63, #loc61])
#loc321 = loc(fused[#loc67, #loc68])
#loc322 = loc(fused[#loc72, #loc73])
#loc323 = loc(fused[#loc74, #loc75])
#loc324 = loc(fused[#loc77, #loc78])
#loc325 = loc(fused[#loc79, #loc80])
#loc326 = loc(fused[#loc81, #loc82])
#loc327 = loc(fused[#loc83, #loc75])
#loc328 = loc(fused[#loc87, #loc88])
#loc329 = loc(fused[#loc91, #loc92])
#loc330 = loc(fused[#loc93, #loc94])
#loc331 = loc(fused[#loc95, #loc96])
#loc332 = loc(fused[#loc98, #loc99])
#loc333 = loc(fused[#loc100, #loc94])
#loc334 = loc(fused[#loc104, #loc102])
#loc335 = loc(fused[#loc107, #loc108])
#loc336 = loc(fused[#loc110, #loc111])
#loc337 = loc(fused[#loc112, #loc113])
#loc338 = loc(fused[#loc114, #loc111])
#loc339 = loc(fused[#loc118, #loc119])
#loc340 = loc(fused[#loc121, #loc119])
#loc341 = loc(fused[#loc122, #loc123])
#loc342 = loc(fused[#loc124, #loc125])
#loc343 = loc(fused[#loc126, #loc123])
#loc344 = loc(fused[#loc127, #loc128])
#loc345 = loc(fused[#loc133, #loc134])
#loc346 = loc(fused[#loc135, #loc136])
#loc347 = loc(fused[#loc137, #loc138])
#loc348 = loc(fused[#loc139, #loc140])
#loc349 = loc(fused[#loc142, #loc143])
#loc350 = loc(fused[#loc144, #loc145])
#loc351 = loc(fused[#loc147, #loc146])
#loc352 = loc(fused[#loc148, #loc149])
#loc353 = loc(fused[#loc151, #loc149])
#loc354 = loc(fused[#loc152, #loc153])
#loc355 = loc(fused[#loc154, #loc155])
#loc356 = loc(fused[#loc156, #loc157])
#loc357 = loc(fused[#loc158, #loc159])
#loc358 = loc(fused[#loc160, #loc161])
#loc359 = loc(fused[#loc162, #loc163])
#loc360 = loc(fused[#loc164, #loc165])
#loc361 = loc(fused[#loc170, #loc171])
#loc362 = loc(fused[#loc172, #loc173])
#loc363 = loc(fused[#loc174, #loc175])
#loc364 = loc(fused[#loc176, #loc173])
#loc365 = loc(fused[#loc178, #loc179])
#loc366 = loc(fused[#loc181, #loc182])
#loc367 = loc(fused[#loc183, #loc184])
#loc368 = loc(fused[#loc186, #loc185])
#loc369 = loc(fused[#loc189, #loc190])
#loc370 = loc(fused[#loc193, #loc194])
#loc371 = loc(fused[#loc195, #loc196])
#loc372 = loc(fused[#loc198, #loc199])
#loc373 = loc(fused[#loc200, #loc201])
#loc374 = loc(fused[#loc202, #loc203])
#loc375 = loc(fused[#loc204, #loc196])
#loc376 = loc(fused[#loc208, #loc209])
#loc377 = loc(fused[#loc212, #loc213])
#loc378 = loc(fused[#loc214, #loc215])
#loc379 = loc(fused[#loc216, #loc217])
#loc380 = loc(fused[#loc219, #loc220])
#loc381 = loc(fused[#loc221, #loc215])
#loc382 = loc(fused[#loc225, #loc223])
#loc383 = loc(fused[#loc228, #loc229])
#loc384 = loc(fused[#loc231, #loc232])
#loc385 = loc(fused[#loc233, #loc234])
#loc386 = loc(fused[#loc235, #loc232])
#loc387 = loc(fused[#loc239, #loc240])
#loc388 = loc(fused[#loc242, #loc240])
#loc389 = loc(fused[#loc243, #loc244])
#loc390 = loc(fused[#loc245, #loc246])
#loc391 = loc(fused[#loc247, #loc244])
#loc392 = loc(fused[#loc248, #loc249])
#loc393 = loc(fused[#loc251, #loc252])
#loc394 = loc(fused[#loc250, #loc253])
#loc395 = loc(fused[#loc254, #loc255, #loc256, #loc249])
#loc396 = loc(fused[#loc257, #loc258])
#loc397 = loc(fused[#loc264, #loc265])
#loc398 = loc(fused[#loc266, #loc267])
#loc399 = loc(fused[#loc269, #loc268])
#loc400 = loc(fused[#loc270, #loc271])
#loc401 = loc(fused[#loc273, #loc271])
#loc402 = loc(fused[#loc276, #loc274])
#loc403 = loc(fused[#loc278, #loc279])
#loc404 = loc(fused[#loc281, #loc279])
#loc405 = loc(fused[#loc282, #loc283])
#loc406 = loc(fused[#loc284, #loc285])
#loc407 = loc(fused[#loc286, #loc283])
#loc408 = loc(fused[#loc287, #loc288])
