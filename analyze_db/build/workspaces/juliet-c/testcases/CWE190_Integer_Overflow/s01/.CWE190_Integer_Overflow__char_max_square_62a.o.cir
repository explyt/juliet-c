!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc39 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:7)
#loc40 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:12)
#loc92 = loc(fused[#loc39, #loc40])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_62a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @_ZN43CWE190_Integer_Overflow__char_max_square_629badSourceERc(!cir.ptr<!s8i>) loc(#loc77)
  cir.func private @printHexCharLine(!s8i) loc(#loc78)
  cir.func @_ZN43CWE190_Integer_Overflow__char_max_square_623badEv() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc80)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc81)
    %2 = cir.const #cir.int<32> : !s8i loc(#loc11)
    cir.store %2, %1 : !s8i, !cir.ptr<!s8i> loc(#loc82)
    cir.call @_ZN43CWE190_Integer_Overflow__char_max_square_629badSourceERc(%1) : (!cir.ptr<!s8i>) -> () loc(#loc13)
    cir.br ^bb1 loc(#loc83)
  ^bb1:  // pred: ^bb0
    %3 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc16)
    %4 = cir.cast(integral, %3 : !s8i), !s32i loc(#loc16)
    %5 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc8)
    %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc8)
    %7 = cir.binop(mul, %4, %6) nsw : !s32i loc(#loc16)
    %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc16)
    cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc80)
    %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc17)
    cir.call @printHexCharLine(%9) : (!s8i) -> () loc(#loc18)
    cir.br ^bb2 loc(#loc15)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc6)
  } loc(#loc79)
  cir.func private @_ZN43CWE190_Integer_Overflow__char_max_square_6213goodG2BSourceERc(!cir.ptr<!s8i>) loc(#loc84)
  cir.func internal private @_ZN43CWE190_Integer_Overflow__char_max_square_62L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc86)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc87)
    %2 = cir.const #cir.int<32> : !s8i loc(#loc27)
    cir.store %2, %1 : !s8i, !cir.ptr<!s8i> loc(#loc88)
    cir.call @_ZN43CWE190_Integer_Overflow__char_max_square_6213goodG2BSourceERc(%1) : (!cir.ptr<!s8i>) -> () loc(#loc29)
    cir.br ^bb1 loc(#loc89)
  ^bb1:  // pred: ^bb0
    %3 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc32)
    %4 = cir.cast(integral, %3 : !s8i), !s32i loc(#loc32)
    %5 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc24)
    %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc24)
    %7 = cir.binop(mul, %4, %6) nsw : !s32i loc(#loc32)
    %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc32)
    cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc86)
    %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc33)
    cir.call @printHexCharLine(%9) : (!s8i) -> () loc(#loc34)
    cir.br ^bb2 loc(#loc31)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc22)
  } loc(#loc85)
  cir.func private @_ZN43CWE190_Integer_Overflow__char_max_square_6213goodB2GSourceERc(!cir.ptr<!s8i>) loc(#loc90)
  cir.func linkonce_odr @_ZSt3absl(%arg0: !s64i loc(fused[#loc39, #loc40])) -> !s64i extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__i", init] {alignment = 8 : i64} loc(#loc92)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc38)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc41)
    %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc42)
    %3 = cir.abs %2 poison : !s64i loc(#loc43)
    cir.store %3, %1 : !s64i, !cir.ptr<!s64i> loc(#loc93)
    %4 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc93)
    cir.return %4 : !s64i loc(#loc93)
  } loc(#loc91)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc46)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc94)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc49)
  cir.func internal private @_ZN43CWE190_Integer_Overflow__char_max_square_62L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc96)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc97)
    %2 = cir.const #cir.int<32> : !s8i loc(#loc56)
    cir.store %2, %1 : !s8i, !cir.ptr<!s8i> loc(#loc98)
    cir.call @_ZN43CWE190_Integer_Overflow__char_max_square_6213goodB2GSourceERc(%1) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    cir.br ^bb1 loc(#loc99)
  ^bb1:  // pred: ^bb0
    %3 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc61)
    %4 = cir.cast(integral, %3 : !s8i), !s64i loc(#loc61)
    %5 = cir.call @_ZSt3absl(%4) : (!s64i) -> !s64i loc(#loc62)
    %6 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc63)
    %7 = cir.const #cir.int<127> : !s32i loc(#loc64)
    %8 = cir.cast(int_to_float, %7 : !s32i), !cir.double loc(#loc64)
    %9 = cir.call @sqrt(%8) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc63)
    %10 = cir.cast(float_to_int, %9 : !cir.double), !s64i loc(#loc63)
    %11 = cir.cmp(le, %5, %10) : !s64i, !cir.bool loc(#loc100)
    cir.brcond %11 ^bb2, ^bb3 loc(#loc101)
  ^bb2:  // pred: ^bb1
    %12 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc69)
    %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc69)
    %14 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc53)
    %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc53)
    %16 = cir.binop(mul, %13, %15) nsw : !s32i loc(#loc69)
    %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc69)
    cir.store %17, %0 : !s8i, !cir.ptr<!s8i> loc(#loc96)
    %18 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc70)
    cir.call @printHexCharLine(%18) : (!s8i) -> () loc(#loc71)
    cir.br ^bb4 loc(#loc67)
  ^bb3:  // pred: ^bb1
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc49)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    cir.br ^bb4 loc(#loc60)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc60)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc51)
  } loc(#loc95)
  cir.func @_ZN43CWE190_Integer_Overflow__char_max_square_624goodEv() extra(#fn_attr) {
    cir.call @_ZN43CWE190_Integer_Overflow__char_max_square_62L7goodG2BEv() : () -> () loc(#loc75)
    cir.call @_ZN43CWE190_Integer_Overflow__char_max_square_62L7goodB2GEv() : () -> () loc(#loc76)
    cir.return loc(#loc74)
  } loc(#loc102)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_62a.cpp":0:0)
#loc1 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":28:1)
#loc2 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":28:26)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":30:1)
#loc6 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":40:1)
#loc7 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":37:9)
#loc8 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":37:30)
#loc9 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":32:5)
#loc10 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":32:10)
#loc11 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":33:12)
#loc12 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":33:5)
#loc13 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":34:5)
#loc14 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":35:5)
#loc15 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":39:5)
#loc16 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":37:23)
#loc17 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":38:26)
#loc18 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":38:9)
#loc19 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":47:1)
#loc20 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":47:30)
#loc21 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":49:1)
#loc22 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":59:1)
#loc23 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":56:9)
#loc24 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":56:30)
#loc25 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":51:5)
#loc26 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":51:10)
#loc27 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":52:12)
#loc28 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":52:5)
#loc29 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":53:5)
#loc30 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":54:5)
#loc31 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":58:5)
#loc32 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":56:23)
#loc33 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":57:26)
#loc34 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":57:9)
#loc35 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":62:1)
#loc36 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":62:30)
#loc37 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":55:3)
#loc38 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:47)
#loc41 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:17)
#loc42 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:41)
#loc43 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:26)
#loc44 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:19)
#loc45 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:44)
#loc46 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":77:19)
#loc50 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":64:1)
#loc51 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":79:1)
#loc52 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":72:9)
#loc53 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":72:30)
#loc54 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":66:5)
#loc55 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":66:10)
#loc56 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":67:12)
#loc57 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":67:5)
#loc58 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":68:5)
#loc59 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":70:5)
#loc60 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":78:5)
#loc61 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":70:19)
#loc62 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":70:9)
#loc63 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":70:34)
#loc64 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":70:47)
#loc65 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":70:55)
#loc66 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":71:5)
#loc67 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":74:5)
#loc68 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":76:5)
#loc69 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":72:23)
#loc70 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":73:26)
#loc71 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":73:9)
#loc72 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":77:9)
#loc73 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":81:1)
#loc74 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":85:1)
#loc75 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":83:5)
#loc76 = loc("CWE190_Integer_Overflow__char_max_square_62a.cpp":84:5)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc3, #loc4])
#loc79 = loc(fused[#loc5, #loc6])
#loc80 = loc(fused[#loc7, #loc8])
#loc81 = loc(fused[#loc9, #loc10])
#loc82 = loc(fused[#loc12, #loc11])
#loc83 = loc(fused[#loc14, #loc15])
#loc84 = loc(fused[#loc19, #loc20])
#loc85 = loc(fused[#loc21, #loc22])
#loc86 = loc(fused[#loc23, #loc24])
#loc87 = loc(fused[#loc25, #loc26])
#loc88 = loc(fused[#loc28, #loc27])
#loc89 = loc(fused[#loc30, #loc31])
#loc90 = loc(fused[#loc35, #loc36])
#loc91 = loc(fused[#loc37, #loc38])
#loc93 = loc(fused[#loc44, #loc45])
#loc94 = loc(fused[#loc47, #loc48])
#loc95 = loc(fused[#loc50, #loc51])
#loc96 = loc(fused[#loc52, #loc53])
#loc97 = loc(fused[#loc54, #loc55])
#loc98 = loc(fused[#loc57, #loc56])
#loc99 = loc(fused[#loc59, #loc60])
#loc100 = loc(fused[#loc62, #loc65])
#loc101 = loc(fused[#loc66, #loc67, #loc68, #loc60])
#loc102 = loc(fused[#loc73, #loc74])
