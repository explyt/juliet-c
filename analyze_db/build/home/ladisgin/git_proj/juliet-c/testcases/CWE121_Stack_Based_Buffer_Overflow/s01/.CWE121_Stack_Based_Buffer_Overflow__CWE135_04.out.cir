!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":173:10)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":173:14)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":173:20)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":173:32)
#loc226 = loc(fused[#loc56, #loc57])
#loc227 = loc(fused[#loc58, #loc59])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc204)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc205)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc206)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc208)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc12)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc209)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc16)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc16)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
        %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
        cir.store %6, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc212)
      } loc(#loc211)
    } loc(#loc210)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc21)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc21)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc216)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc217)
          %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc29)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc30)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc30)
          %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc29)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc216)
          %10 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc28)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc28)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc28)
          %13 = cir.binop(add, %10, %12) : !u64i loc(#loc28)
          %14 = cir.const #cir.int<4> : !u64i loc(#loc28)
          %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc28)
          %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc28)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc28)
          cir.store %17, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc217)
          %18 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc31)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc31)
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc32)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc32)
          %22 = cir.call @wcscpy(%19, %21) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc33)
          %23 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc34)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
          cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc35)
        } loc(#loc215)
      } loc(#loc214)
    } loc(#loc213)
    cir.return loc(#loc9)
  } loc(#loc207)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc222)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    cir.return loc(#loc37)
  } loc(#loc218)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc223)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc224)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc53)
  cir.func @main(%arg0: !s32i loc(fused[#loc56, #loc57]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc58, #loc59])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc226)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc227)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc55)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc60)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc60)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc61)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc62)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc62)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc63)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc50)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc228)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_04_good() : () -> () loc(#loc65)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc51)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc52)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc229)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_04_bad() : () -> () loc(#loc69)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc53)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc72)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc230)
    cir.return %17 : !s32i loc(#loc230)
  } loc(#loc225)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc74)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc231)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc232)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc234)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc83)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc235)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc87)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc87)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc89)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc89)
        %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc89)
        cir.store %6, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc238)
      } loc(#loc237)
    } loc(#loc236)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc93)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc93)
      cir.if %3 {
        %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc74)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc74)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc97)
      } else {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc242)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc243)
          %6 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc104)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc105)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc105)
          %9 = cir.call @wcslen(%8) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc104)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc242)
          %10 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc103)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc103)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc103)
          %13 = cir.binop(add, %10, %12) : !u64i loc(#loc103)
          %14 = cir.const #cir.int<4> : !u64i loc(#loc103)
          %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc103)
          %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc103)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc103)
          cir.store %17, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc243)
          %18 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc106)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc106)
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc107)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc107)
          %22 = cir.call @wcscpy(%19, %21) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc108)
          %23 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc109)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc109)
          cir.call @printWLine(%24) : (!cir.ptr<!s32i>) -> () loc(#loc110)
        } loc(#loc241)
      } loc(#loc240)
    } loc(#loc239)
    cir.return loc(#loc80)
  } loc(#loc233)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc245)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc115)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc246)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc119)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc119)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc121)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc121)
        %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc121)
        cir.store %6, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc249)
      } loc(#loc248)
    } loc(#loc247)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc125)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc125)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc253)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc254)
          %6 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc133)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc134)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc134)
          %9 = cir.call @wcslen(%8) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc133)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc253)
          %10 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc132)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc132)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc132)
          %13 = cir.binop(add, %10, %12) : !u64i loc(#loc132)
          %14 = cir.const #cir.int<4> : !u64i loc(#loc132)
          %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc132)
          %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc132)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc132)
          cir.store %17, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc254)
          %18 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc135)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc135)
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc136)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc136)
          %22 = cir.call @wcscpy(%19, %21) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc137)
          %23 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc138)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc138)
          cir.call @printWLine(%24) : (!cir.ptr<!s32i>) -> () loc(#loc139)
        } loc(#loc252)
      } loc(#loc251)
    } loc(#loc250)
    cir.return loc(#loc112)
  } loc(#loc244)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc140)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc255)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc257)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc147)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc258)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc151)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc151)
      cir.if %3 {
        %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc155)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc155)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc156)
      } else {
        %4 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc140)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc140)
        %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc140)
        cir.store %6, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc261)
      } loc(#loc260)
    } loc(#loc259)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc160)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc160)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc265)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc266)
          %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc168)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc169)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc169)
          %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc168)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc265)
          %10 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc167)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc167)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc167)
          %13 = cir.binop(add, %10, %12) : !u64i loc(#loc167)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc167)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc167)
          %16 = cir.binop(mul, %13, %15) : !u64i loc(#loc167)
          %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc167)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc167)
          cir.store %18, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc266)
          %19 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc170)
          %20 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc171)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc171)
          %22 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc172)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc172)
          %24 = cir.call @strcpy(%21, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc170)
          %25 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc173)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc173)
          cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc174)
        } loc(#loc264)
      } loc(#loc263)
    } loc(#loc262)
    cir.return loc(#loc144)
  } loc(#loc256)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc268)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc179)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc269)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc183)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc183)
      cir.if %3 {
        %4 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc185)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc185)
        %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc185)
        cir.store %6, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc272)
      } loc(#loc271)
    } loc(#loc270)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc189)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc189)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc276)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc277)
          %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc197)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc198)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc198)
          %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc197)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc276)
          %10 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc196)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc196)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc196)
          %13 = cir.binop(add, %10, %12) : !u64i loc(#loc196)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc196)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc196)
          %16 = cir.binop(mul, %13, %15) : !u64i loc(#loc196)
          %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc196)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc196)
          cir.store %18, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc277)
          %19 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc199)
          %20 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc200)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc200)
          %22 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc201)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc201)
          %24 = cir.call @strcpy(%21, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc199)
          %25 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc202)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc202)
          cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc203)
        } loc(#loc275)
      } loc(#loc274)
    } loc(#loc273)
    cir.return loc(#loc176)
  } loc(#loc267)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":40:24)
#loc2 = loc("/usr/include/string.h":407:1)
#loc3 = loc("/usr/include/string.h":408:33)
#loc4 = loc("/usr/include/wchar.h":98:1)
#loc5 = loc("/usr/include/wchar.h":100:14)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":33:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":52:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":35:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":35:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":36:12)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":36:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":37:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":41:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":37:8)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":38:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":40:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":42:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":51:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":42:8)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":43:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":44:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":50:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":46:13)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":46:49)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":47:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":47:35)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":46:30)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":46:45)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":48:26)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":48:32)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":48:19)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":49:31)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":49:13)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":156:1)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":162:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":158:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":158:14)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":159:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":159:14)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":160:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":160:14)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":161:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":161:14)
#loc46 = loc("/usr/include/stdlib.h":575:1)
#loc47 = loc("/usr/include/stdlib.h":575:41)
#loc48 = loc("/usr/include/time.h":76:1)
#loc49 = loc("/usr/include/time.h":76:38)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":178:15)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":180:15)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":183:15)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":185:15)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":173:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":188:1)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":174:1)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":176:27)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":176:22)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":176:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":178:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":179:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":179:56)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":180:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":183:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":184:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":184:55)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":185:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":187:12)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":187:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":71:19)
#loc75 = loc("/usr/include/wchar.h":247:1)
#loc76 = loc("/usr/include/wchar.h":247:51)
#loc77 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc78 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":59:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":83:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":61:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":61:12)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":62:12)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":62:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":63:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":67:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":63:8)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":64:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":66:24)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":66:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":68:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":82:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":68:8)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":69:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":72:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":74:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":71:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":75:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":81:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":77:13)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":77:52)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":78:13)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":78:35)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":77:30)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":77:48)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":79:26)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":79:32)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":79:19)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":80:35)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":80:13)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":86:1)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":105:1)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":88:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":88:12)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":89:12)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":89:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":90:5)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":94:5)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":90:8)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":91:5)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":93:24)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":93:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":95:5)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":104:5)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":95:8)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":96:5)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":97:9)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":103:9)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":99:13)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":99:52)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":100:13)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":100:35)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":99:30)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":99:48)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":101:26)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":101:32)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":101:19)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":102:35)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":102:13)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":120:24)
#loc141 = loc("/usr/include/string.h":141:1)
#loc142 = loc("/usr/include/string.h":142:14)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":108:1)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":132:1)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":110:5)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":110:12)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":111:12)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":111:5)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":112:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":121:5)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":112:8)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":113:5)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":116:5)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":118:5)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":115:19)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":115:9)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":120:9)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":122:5)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":131:5)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":122:8)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":123:5)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":124:9)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":130:9)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":126:13)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":126:49)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":127:13)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":127:35)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":126:30)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":126:45)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":128:19)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":128:26)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":128:32)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":129:31)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":129:13)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":135:1)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":154:1)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":137:5)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":137:12)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":138:12)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":138:5)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":139:5)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":143:5)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":139:8)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":140:5)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":142:24)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":142:9)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":144:5)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":153:5)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":144:8)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":145:5)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":146:9)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":152:9)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":148:13)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":148:49)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":149:13)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":149:35)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":148:30)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":148:45)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":150:19)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":150:26)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":150:32)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":151:31)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":151:13)
#loc204 = loc(fused[#loc2, #loc3])
#loc205 = loc(fused[#loc4, #loc5])
#loc206 = loc(fused[#loc6, #loc7])
#loc207 = loc(fused[#loc8, #loc9])
#loc208 = loc(fused[#loc10, #loc11])
#loc209 = loc(fused[#loc13, #loc12])
#loc210 = loc(fused[#loc14, #loc15])
#loc211 = loc(fused[#loc17, #loc15])
#loc212 = loc(fused[#loc18, #loc1])
#loc213 = loc(fused[#loc19, #loc20])
#loc214 = loc(fused[#loc22, #loc20])
#loc215 = loc(fused[#loc23, #loc24])
#loc216 = loc(fused[#loc25, #loc26])
#loc217 = loc(fused[#loc27, #loc28])
#loc218 = loc(fused[#loc36, #loc37])
#loc219 = loc(fused[#loc38, #loc39])
#loc220 = loc(fused[#loc40, #loc41])
#loc221 = loc(fused[#loc42, #loc43])
#loc222 = loc(fused[#loc44, #loc45])
#loc223 = loc(fused[#loc46, #loc47])
#loc224 = loc(fused[#loc48, #loc49])
#loc225 = loc(fused[#loc54, #loc55])
#loc228 = loc(fused[#loc65, #loc66])
#loc229 = loc(fused[#loc69, #loc70])
#loc230 = loc(fused[#loc73, #loc72])
#loc231 = loc(fused[#loc75, #loc76])
#loc232 = loc(fused[#loc77, #loc78])
#loc233 = loc(fused[#loc79, #loc80])
#loc234 = loc(fused[#loc81, #loc82])
#loc235 = loc(fused[#loc84, #loc83])
#loc236 = loc(fused[#loc85, #loc86])
#loc237 = loc(fused[#loc88, #loc86])
#loc238 = loc(fused[#loc90, #loc89])
#loc239 = loc(fused[#loc91, #loc92])
#loc240 = loc(fused[#loc94, #loc95, #loc96, #loc92])
#loc241 = loc(fused[#loc98, #loc99])
#loc242 = loc(fused[#loc100, #loc101])
#loc243 = loc(fused[#loc102, #loc103])
#loc244 = loc(fused[#loc111, #loc112])
#loc245 = loc(fused[#loc113, #loc114])
#loc246 = loc(fused[#loc116, #loc115])
#loc247 = loc(fused[#loc117, #loc118])
#loc248 = loc(fused[#loc120, #loc118])
#loc249 = loc(fused[#loc122, #loc121])
#loc250 = loc(fused[#loc123, #loc124])
#loc251 = loc(fused[#loc126, #loc124])
#loc252 = loc(fused[#loc127, #loc128])
#loc253 = loc(fused[#loc129, #loc130])
#loc254 = loc(fused[#loc131, #loc132])
#loc255 = loc(fused[#loc141, #loc142])
#loc256 = loc(fused[#loc143, #loc144])
#loc257 = loc(fused[#loc145, #loc146])
#loc258 = loc(fused[#loc148, #loc147])
#loc259 = loc(fused[#loc149, #loc150])
#loc260 = loc(fused[#loc152, #loc153, #loc154, #loc150])
#loc261 = loc(fused[#loc157, #loc140])
#loc262 = loc(fused[#loc158, #loc159])
#loc263 = loc(fused[#loc161, #loc159])
#loc264 = loc(fused[#loc162, #loc163])
#loc265 = loc(fused[#loc164, #loc165])
#loc266 = loc(fused[#loc166, #loc167])
#loc267 = loc(fused[#loc175, #loc176])
#loc268 = loc(fused[#loc177, #loc178])
#loc269 = loc(fused[#loc180, #loc179])
#loc270 = loc(fused[#loc181, #loc182])
#loc271 = loc(fused[#loc184, #loc182])
#loc272 = loc(fused[#loc186, #loc185])
#loc273 = loc(fused[#loc187, #loc188])
#loc274 = loc(fused[#loc190, #loc188])
#loc275 = loc(fused[#loc191, #loc192])
#loc276 = loc(fused[#loc193, #loc194])
#loc277 = loc(fused[#loc195, #loc196])
