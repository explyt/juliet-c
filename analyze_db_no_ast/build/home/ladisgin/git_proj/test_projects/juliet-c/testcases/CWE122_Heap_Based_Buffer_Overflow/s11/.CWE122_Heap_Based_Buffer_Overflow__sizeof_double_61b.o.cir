!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":21:73)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":21:82)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":36:77)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":36:86)
#loc56 = loc(fused[#loc7, #loc8])
#loc66 = loc(fused[#loc31, #loc32])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc53)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc54)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b_badSource(%arg0: !cir.ptr<!cir.double> loc(fused[#loc7, #loc8])) -> !cir.ptr<!cir.double> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data", init] {alignment = 8 : i64} loc(#loc56)
    %1 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["__retval"] {alignment = 8 : i64} loc(#loc6)
    cir.store %arg0, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc9)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc10)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc57)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc10)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc58)
    cir.store %5, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc59)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc17)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc18)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc18)
      %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!cir.double>, !s32i loc(#loc61)
      %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc19)
      cir.if %14 {
        %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc21)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc23)
        cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc21)
      } loc(#loc62)
    } loc(#loc60)
    %6 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc24)
    %7 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc25)
    cir.store %6, %7 : !cir.double, !cir.ptr<!cir.double> loc(#loc63)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc27)
    cir.store %8, %1 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc64)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc64)
    cir.return %9 : !cir.ptr<!cir.double> loc(#loc64)
  } loc(#loc55)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b_goodG2BSource(%arg0: !cir.ptr<!cir.double> loc(fused[#loc31, #loc32])) -> !cir.ptr<!cir.double> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data", init] {alignment = 8 : i64} loc(#loc66)
    %1 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["__retval"] {alignment = 8 : i64} loc(#loc30)
    cir.store %arg0, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc33)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc34)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc67)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc34)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc68)
    cir.store %5, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc69)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc41)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc42)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc42)
      %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!cir.double>, !s32i loc(#loc71)
      %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc43)
      cir.if %14 {
        %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc45)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc46)
        %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc47)
        cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc45)
      } loc(#loc72)
    } loc(#loc70)
    %6 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc48)
    %7 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc49)
    cir.store %6, %7 : !cir.double, !cir.ptr<!cir.double> loc(#loc73)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc51)
    cir.store %8, %1 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc74)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc74)
    cir.return %9 : !cir.ptr<!cir.double> loc(#loc74)
  } loc(#loc65)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":29:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":22:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":25:22)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":25:29)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":25:40)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":25:41)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":26:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":26:33)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":26:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":26:17)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":26:14)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":26:23)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":26:24)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":26:30)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":26:29)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":27:13)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":27:6)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":27:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":28:12)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":28:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":36:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":43:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":37:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":39:22)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":39:29)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":39:41)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":39:42)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":39:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":40:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":40:33)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":40:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":40:17)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":40:14)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":40:23)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":40:24)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":40:30)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":40:29)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":41:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":41:6)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":41:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":42:12)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c":42:5)
#loc53 = loc(fused[#loc1, #loc2])
#loc54 = loc(fused[#loc3, #loc4])
#loc55 = loc(fused[#loc5, #loc6])
#loc57 = loc(fused[#loc11, #loc12])
#loc58 = loc(fused[#loc10, #loc13])
#loc59 = loc(fused[#loc14, #loc13])
#loc60 = loc(fused[#loc15, #loc16])
#loc61 = loc(fused[#loc17, #loc18])
#loc62 = loc(fused[#loc20, #loc16])
#loc63 = loc(fused[#loc26, #loc24])
#loc64 = loc(fused[#loc28, #loc27])
#loc65 = loc(fused[#loc29, #loc30])
#loc67 = loc(fused[#loc35, #loc36])
#loc68 = loc(fused[#loc34, #loc37])
#loc69 = loc(fused[#loc38, #loc37])
#loc70 = loc(fused[#loc39, #loc40])
#loc71 = loc(fused[#loc41, #loc42])
#loc72 = loc(fused[#loc44, #loc40])
#loc73 = loc(fused[#loc50, #loc48])
#loc74 = loc(fused[#loc52, #loc51])
