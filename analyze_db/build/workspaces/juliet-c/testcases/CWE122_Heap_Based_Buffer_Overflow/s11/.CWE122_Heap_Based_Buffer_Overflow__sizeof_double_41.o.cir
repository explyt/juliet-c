!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":21:66)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":21:75)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":45:70)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":45:79)
#loc84 = loc(fused[#loc7, #loc8])
#loc98 = loc(fused[#loc45, #loc46])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printDoubleLine(!cir.double) loc(#loc81)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc82)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41_badSink(%arg0: !cir.ptr<!cir.double> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data", init] {alignment = 8 : i64} loc(#loc84)
    cir.store %arg0, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc9)
    %1 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc10)
    %2 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc11)
    cir.call @printDoubleLine(%2) : (!cir.double) -> () loc(#loc12)
    %3 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc13)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc14)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc14)
    cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc13)
    cir.return loc(#loc6)
  } loc(#loc83)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc85)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc86)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc88)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc23)
    cir.store %1, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc89)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc25)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc90)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc25)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc91)
    cir.store %5, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc92)
    cir.br ^bb1 loc(#loc93)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc32)
    %7 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc33)
    %9 = cir.cmp(eq, %6, %8) : !cir.ptr<!cir.double>, !cir.bool loc(#loc94)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc95)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc35)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc37)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc35)
    cir.br ^bb3 loc(#loc31)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc31)
  ^bb4:  // pred: ^bb3
    %13 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc38)
    %14 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc39)
    cir.store %13, %14 : !cir.double, !cir.ptr<!cir.double> loc(#loc96)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc41)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41_badSink(%15) : (!cir.ptr<!cir.double>) -> () loc(#loc42)
    cir.return loc(#loc20)
  } loc(#loc87)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41_goodG2BSink(%arg0: !cir.ptr<!cir.double> loc(fused[#loc45, #loc46])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data", init] {alignment = 8 : i64} loc(#loc98)
    cir.store %arg0, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc47)
    %1 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc48)
    %2 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc49)
    cir.call @printDoubleLine(%2) : (!cir.double) -> () loc(#loc50)
    %3 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc51)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc52)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc52)
    cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc51)
    cir.return loc(#loc44)
  } loc(#loc97)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc100)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc55)
    cir.return loc(#loc54)
  } loc(#loc99)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc102)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc61)
    cir.store %1, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc103)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc63)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc104)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc63)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc105)
    cir.store %5, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc106)
    cir.br ^bb1 loc(#loc107)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc70)
    %7 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc71)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc71)
    %9 = cir.cmp(eq, %6, %8) : !cir.ptr<!cir.double>, !cir.bool loc(#loc108)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc109)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc73)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc75)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc73)
    cir.br ^bb3 loc(#loc69)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc69)
  ^bb4:  // pred: ^bb3
    %13 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc76)
    %14 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc77)
    cir.store %13, %14 : !cir.double, !cir.ptr<!cir.double> loc(#loc110)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc79)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41_goodG2BSink(%15) : (!cir.ptr<!cir.double>) -> () loc(#loc80)
    cir.return loc(#loc58)
  } loc(#loc101)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":38:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":38:41)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":26:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":22:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":24:22)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":24:21)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":24:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":25:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":25:10)
#loc15 = loc("/usr/include/stdlib.h":672:1)
#loc16 = loc("/usr/include/stdlib.h":672:45)
#loc17 = loc("/usr/include/stdlib.h":756:1)
#loc18 = loc("/usr/include/stdlib.h":756:70)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":28:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":39:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":30:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":30:14)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":32:12)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":32:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":35:22)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":35:29)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":35:40)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":35:41)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":35:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":36:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":36:33)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":36:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":36:17)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":36:23)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":36:24)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":36:30)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":36:29)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":37:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":37:6)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":37:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":38:65)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":38:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":45:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":50:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":46:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":48:22)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":48:21)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":48:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":49:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":49:10)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":65:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":68:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":67:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":67:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":53:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":63:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":55:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":55:14)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":57:12)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":57:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":59:22)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":59:29)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":59:41)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":59:42)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":59:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":60:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":60:33)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":60:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":60:17)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":60:23)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":60:24)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":60:30)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":60:29)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":61:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":61:6)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":61:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":62:69)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c":62:5)
#loc81 = loc(fused[#loc1, #loc2])
#loc82 = loc(fused[#loc3, #loc4])
#loc83 = loc(fused[#loc5, #loc6])
#loc85 = loc(fused[#loc15, #loc16])
#loc86 = loc(fused[#loc17, #loc18])
#loc87 = loc(fused[#loc19, #loc20])
#loc88 = loc(fused[#loc21, #loc22])
#loc89 = loc(fused[#loc24, #loc23])
#loc90 = loc(fused[#loc26, #loc27])
#loc91 = loc(fused[#loc25, #loc28])
#loc92 = loc(fused[#loc29, #loc28])
#loc93 = loc(fused[#loc30, #loc31])
#loc94 = loc(fused[#loc32, #loc33])
#loc95 = loc(fused[#loc34, #loc31])
#loc96 = loc(fused[#loc40, #loc38])
#loc97 = loc(fused[#loc43, #loc44])
#loc99 = loc(fused[#loc53, #loc54])
#loc100 = loc(fused[#loc55, #loc56])
#loc101 = loc(fused[#loc57, #loc58])
#loc102 = loc(fused[#loc59, #loc60])
#loc103 = loc(fused[#loc62, #loc61])
#loc104 = loc(fused[#loc64, #loc65])
#loc105 = loc(fused[#loc63, #loc66])
#loc106 = loc(fused[#loc67, #loc66])
#loc107 = loc(fused[#loc68, #loc69])
#loc108 = loc(fused[#loc70, #loc71])
#loc109 = loc(fused[#loc72, #loc69])
#loc110 = loc(fused[#loc78, #loc76])
