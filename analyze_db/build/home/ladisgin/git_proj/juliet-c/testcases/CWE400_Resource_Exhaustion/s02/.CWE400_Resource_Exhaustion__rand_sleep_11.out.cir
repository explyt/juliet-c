!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc52 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":169:10)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":169:14)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":169:20)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":169:32)
#true = #cir.bool<true> : !cir.bool
#loc218 = loc(fused[#loc52, #loc53])
#loc219 = loc(fused[#loc54, #loc55])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc196)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc197)
  cir.func private @usleep(!u32i) -> !s32i loc(#loc198)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Sleep time possibly too long\00" : !cir.array<!s8i x 29>> : !cir.array<!s8i x 29> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc201)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc15)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc204)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc204)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc19)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc22)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc22)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc22)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc22)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc22)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc22)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc22)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc22)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc22)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc22)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc22)
          cir.yield %24 : !u32i loc(#loc22)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc22)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc22)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc22)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc22)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc22)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc22)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc22)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc22)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc22)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc22)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc22)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc22)
          cir.yield %28 : !u32i loc(#loc22)
        }) : (!cir.bool) -> !u32i loc(#loc22)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc22)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
      } loc(#loc205)
    } loc(#loc203)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc208)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc208)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc26)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc26)
      cir.if %6 {
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
        %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc29)
        %9 = cir.call @usleep(%8) : (!u32i) -> !s32i loc(#loc30)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc9)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc9)
        cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc31)
      } loc(#loc209)
    } loc(#loc207)
    cir.return loc(#loc11)
  } loc(#loc200)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc212)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc214)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc33)
  } loc(#loc210)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc215)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc216)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc49)
  cir.func @main(%arg0: !s32i loc(fused[#loc52, #loc53]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc54, #loc55])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc218)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc219)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc51)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc56)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc56)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc57)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc58)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc58)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc59)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc46)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %8 = cir.get_global @CWE400_Resource_Exhaustion__rand_sleep_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call @CWE400_Resource_Exhaustion__rand_sleep_11_good() : () -> () loc(#loc61)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc47)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc48)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %13 = cir.get_global @CWE400_Resource_Exhaustion__rand_sleep_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call @CWE400_Resource_Exhaustion__rand_sleep_11_bad() : () -> () loc(#loc65)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc49)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc68)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc222)
    cir.return %17 : !s32i loc(#loc222)
  } loc(#loc217)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc223)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Sleep time OK\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Sleep time too long\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc74)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc225)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc80)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc226)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc228)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc228)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc84)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc84)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc87)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc87)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc87)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc87)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc87)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc87)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc87)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc87)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc87)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc87)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc87)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc87)
          cir.yield %24 : !u32i loc(#loc87)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc87)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc87)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc87)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc87)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc87)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc87)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc87)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc87)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc87)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc87)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc87)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc87)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc87)
          cir.yield %28 : !u32i loc(#loc87)
        }) : (!cir.bool) -> !u32i loc(#loc87)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc87)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc230)
      } loc(#loc229)
    } loc(#loc227)
    cir.scope {
      %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc232)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc232)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc91)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc91)
      cir.if %6 {
        %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc72)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc72)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc96)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc100)
          %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc235)
          %10 = cir.ternary(%9, true {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
            %12 = cir.const #cir.int<2000> : !s32i loc(#loc103)
            %13 = cir.cmp(le, %11, %12) : !s32i, !cir.bool loc(#loc236)
            %14 = cir.ternary(%13, true {
              %15 = cir.const #true loc(#loc101)
              cir.yield %15 : !cir.bool loc(#loc101)
            }, false {
              %15 = cir.const #false loc(#loc101)
              cir.yield %15 : !cir.bool loc(#loc101)
            }) : (!cir.bool) -> !cir.bool loc(#loc101)
            cir.yield %14 : !cir.bool loc(#loc101)
          }, false {
            %11 = cir.const #false loc(#loc101)
            cir.yield %11 : !cir.bool loc(#loc101)
          }) : (!cir.bool) -> !cir.bool loc(#loc101)
          cir.if %10 {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc107)
            %13 = cir.call @usleep(%12) : (!u32i) -> !s32i loc(#loc108)
            %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc73)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc73)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc109)
          } else {
            %11 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc74)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc74)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc110)
          } loc(#loc237)
        } loc(#loc234)
      } loc(#loc233)
    } loc(#loc231)
    cir.return loc(#loc76)
  } loc(#loc224)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc239)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc116)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc240)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc242)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc242)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc120)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc120)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc123)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc123)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc123)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc123)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc123)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc123)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc123)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc123)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc123)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc123)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc123)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc123)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc123)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc123)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc123)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc123)
          cir.yield %24 : !u32i loc(#loc123)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc123)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc123)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc123)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc123)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc123)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc123)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc123)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc123)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc123)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc123)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc123)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc123)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc123)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc123)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc123)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc123)
          cir.yield %28 : !u32i loc(#loc123)
        }) : (!cir.bool) -> !u32i loc(#loc123)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc123)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc244)
      } loc(#loc243)
    } loc(#loc241)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc246)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc246)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc127)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc127)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc133)
          %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc249)
          %10 = cir.ternary(%9, true {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc135)
            %12 = cir.const #cir.int<2000> : !s32i loc(#loc136)
            %13 = cir.cmp(le, %11, %12) : !s32i, !cir.bool loc(#loc250)
            %14 = cir.ternary(%13, true {
              %15 = cir.const #true loc(#loc134)
              cir.yield %15 : !cir.bool loc(#loc134)
            }, false {
              %15 = cir.const #false loc(#loc134)
              cir.yield %15 : !cir.bool loc(#loc134)
            }) : (!cir.bool) -> !cir.bool loc(#loc134)
            cir.yield %14 : !cir.bool loc(#loc134)
          }, false {
            %11 = cir.const #false loc(#loc134)
            cir.yield %11 : !cir.bool loc(#loc134)
          }) : (!cir.bool) -> !cir.bool loc(#loc134)
          cir.if %10 {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc140)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc140)
            %13 = cir.call @usleep(%12) : (!u32i) -> !s32i loc(#loc141)
            %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc142)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc142)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc143)
          } else {
            %11 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc144)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc144)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc145)
          } loc(#loc251)
        } loc(#loc248)
      } loc(#loc247)
    } loc(#loc245)
    cir.return loc(#loc112)
  } loc(#loc238)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc253)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc150)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc151)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    cir.scope {
      %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc256)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc256)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc155)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc155)
      cir.if %6 {
        %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc160)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc160)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc161)
      } else {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc162)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc258)
      } loc(#loc257)
    } loc(#loc255)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc260)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc260)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc166)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc166)
      cir.if %6 {
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc169)
        %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc169)
        %9 = cir.call @usleep(%8) : (!u32i) -> !s32i loc(#loc170)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc171)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc171)
        cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc172)
      } loc(#loc261)
    } loc(#loc259)
    cir.return loc(#loc147)
  } loc(#loc252)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc263)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc177)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc178)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc264)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc266)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc266)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc182)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc182)
      cir.if %6 {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc185)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc268)
      } loc(#loc267)
    } loc(#loc265)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc270)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc270)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc189)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc189)
      cir.if %6 {
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc192)
        %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc192)
        %9 = cir.call @usleep(%8) : (!u32i) -> !s32i loc(#loc193)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc194)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc194)
        cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc195)
      } loc(#loc271)
    } loc(#loc269)
    cir.return loc(#loc174)
  } loc(#loc262)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("/usr/include/unistd.h":480:1)
#loc6 = loc("/usr/include/unistd.h":480:43)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":44:19)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":30:1)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":46:1)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":32:5)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":32:9)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":34:14)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":34:13)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":34:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":35:5)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":39:5)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":35:8)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":35:26)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":36:5)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":38:17)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":38:9)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":40:5)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":45:5)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":40:8)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":40:26)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":41:5)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":43:15)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":43:9)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":44:9)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":152:1)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":158:1)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":154:5)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":154:14)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":155:5)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":155:14)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":156:5)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":156:14)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":157:5)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":157:14)
#loc42 = loc("/usr/include/stdlib.h":575:1)
#loc43 = loc("/usr/include/stdlib.h":575:41)
#loc44 = loc("/usr/include/time.h":76:1)
#loc45 = loc("/usr/include/time.h":76:38)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":174:15)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":176:15)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":179:15)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":181:15)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":169:1)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":184:1)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":170:1)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":172:27)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":172:22)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":172:5)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":174:5)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":175:5)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":175:52)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":176:5)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":179:5)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":180:5)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":180:51)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":181:5)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":183:12)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":183:5)
#loc70 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc71 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":66:19)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":74:23)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":78:23)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":53:1)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":81:1)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":55:5)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":55:9)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":57:14)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":57:13)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":57:5)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":58:5)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":62:5)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":58:8)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":58:26)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":59:5)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":61:17)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":61:9)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":63:5)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":80:5)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":63:8)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":63:27)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":64:5)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":67:5)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":69:5)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":66:9)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":71:9)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":79:9)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":71:13)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":71:21)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":71:23)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":71:26)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":71:35)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":72:9)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":75:9)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":77:9)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":73:19)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":73:13)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":74:13)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":78:13)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":84:1)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":107:1)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":86:5)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":86:9)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":88:14)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":88:13)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":88:5)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":89:5)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":93:5)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":89:8)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":89:26)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":90:5)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":92:17)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":92:9)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":94:5)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":106:5)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":94:8)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":94:26)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":95:5)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":97:9)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":105:9)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":97:13)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":97:21)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":97:23)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":97:26)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":97:35)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":98:9)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":101:9)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":103:9)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":99:19)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":99:13)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":100:23)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":100:13)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":104:23)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":104:13)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":110:1)
#loc147 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":131:1)
#loc148 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":112:5)
#loc149 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":112:9)
#loc150 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":114:14)
#loc151 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":114:13)
#loc152 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":114:5)
#loc153 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":115:5)
#loc154 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":124:5)
#loc155 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":115:8)
#loc156 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":115:27)
#loc157 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":116:5)
#loc158 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":119:5)
#loc159 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":121:5)
#loc160 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":118:19)
#loc161 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":118:9)
#loc162 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":123:17)
#loc163 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":123:9)
#loc164 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":125:5)
#loc165 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":130:5)
#loc166 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":125:8)
#loc167 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":125:26)
#loc168 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":126:5)
#loc169 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":128:15)
#loc170 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":128:9)
#loc171 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":129:19)
#loc172 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":129:9)
#loc173 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":134:1)
#loc174 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":150:1)
#loc175 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":136:5)
#loc176 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":136:9)
#loc177 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":138:14)
#loc178 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":138:13)
#loc179 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":138:5)
#loc180 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":139:5)
#loc181 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":143:5)
#loc182 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":139:8)
#loc183 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":139:26)
#loc184 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":140:5)
#loc185 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":142:17)
#loc186 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":142:9)
#loc187 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":144:5)
#loc188 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":149:5)
#loc189 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":144:8)
#loc190 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":144:26)
#loc191 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":145:5)
#loc192 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":147:15)
#loc193 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":147:9)
#loc194 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":148:19)
#loc195 = loc("CWE400_Resource_Exhaustion__rand_sleep_11.c":148:9)
#loc196 = loc(fused[#loc1, #loc2])
#loc197 = loc(fused[#loc3, #loc4])
#loc198 = loc(fused[#loc5, #loc6])
#loc199 = loc(fused[#loc7, #loc8])
#loc200 = loc(fused[#loc10, #loc11])
#loc201 = loc(fused[#loc12, #loc13])
#loc202 = loc(fused[#loc16, #loc14])
#loc203 = loc(fused[#loc17, #loc18])
#loc204 = loc(fused[#loc19, #loc20])
#loc205 = loc(fused[#loc21, #loc18])
#loc206 = loc(fused[#loc23, #loc22])
#loc207 = loc(fused[#loc24, #loc25])
#loc208 = loc(fused[#loc26, #loc27])
#loc209 = loc(fused[#loc28, #loc25])
#loc210 = loc(fused[#loc32, #loc33])
#loc211 = loc(fused[#loc34, #loc35])
#loc212 = loc(fused[#loc36, #loc37])
#loc213 = loc(fused[#loc38, #loc39])
#loc214 = loc(fused[#loc40, #loc41])
#loc215 = loc(fused[#loc42, #loc43])
#loc216 = loc(fused[#loc44, #loc45])
#loc217 = loc(fused[#loc50, #loc51])
#loc220 = loc(fused[#loc61, #loc62])
#loc221 = loc(fused[#loc65, #loc66])
#loc222 = loc(fused[#loc69, #loc68])
#loc223 = loc(fused[#loc70, #loc71])
#loc224 = loc(fused[#loc75, #loc76])
#loc225 = loc(fused[#loc77, #loc78])
#loc226 = loc(fused[#loc81, #loc79])
#loc227 = loc(fused[#loc82, #loc83])
#loc228 = loc(fused[#loc84, #loc85])
#loc229 = loc(fused[#loc86, #loc83])
#loc230 = loc(fused[#loc88, #loc87])
#loc231 = loc(fused[#loc89, #loc90])
#loc232 = loc(fused[#loc91, #loc92])
#loc233 = loc(fused[#loc93, #loc94, #loc95, #loc90])
#loc234 = loc(fused[#loc97, #loc98])
#loc235 = loc(fused[#loc99, #loc100])
#loc236 = loc(fused[#loc102, #loc103])
#loc237 = loc(fused[#loc104, #loc105, #loc106, #loc98])
#loc238 = loc(fused[#loc111, #loc112])
#loc239 = loc(fused[#loc113, #loc114])
#loc240 = loc(fused[#loc117, #loc115])
#loc241 = loc(fused[#loc118, #loc119])
#loc242 = loc(fused[#loc120, #loc121])
#loc243 = loc(fused[#loc122, #loc119])
#loc244 = loc(fused[#loc124, #loc123])
#loc245 = loc(fused[#loc125, #loc126])
#loc246 = loc(fused[#loc127, #loc128])
#loc247 = loc(fused[#loc129, #loc126])
#loc248 = loc(fused[#loc130, #loc131])
#loc249 = loc(fused[#loc132, #loc133])
#loc250 = loc(fused[#loc135, #loc136])
#loc251 = loc(fused[#loc137, #loc138, #loc139, #loc131])
#loc252 = loc(fused[#loc146, #loc147])
#loc253 = loc(fused[#loc148, #loc149])
#loc254 = loc(fused[#loc152, #loc150])
#loc255 = loc(fused[#loc153, #loc154])
#loc256 = loc(fused[#loc155, #loc156])
#loc257 = loc(fused[#loc157, #loc158, #loc159, #loc154])
#loc258 = loc(fused[#loc163, #loc162])
#loc259 = loc(fused[#loc164, #loc165])
#loc260 = loc(fused[#loc166, #loc167])
#loc261 = loc(fused[#loc168, #loc165])
#loc262 = loc(fused[#loc173, #loc174])
#loc263 = loc(fused[#loc175, #loc176])
#loc264 = loc(fused[#loc179, #loc177])
#loc265 = loc(fused[#loc180, #loc181])
#loc266 = loc(fused[#loc182, #loc183])
#loc267 = loc(fused[#loc184, #loc181])
#loc268 = loc(fused[#loc186, #loc185])
#loc269 = loc(fused[#loc187, #loc188])
#loc270 = loc(fused[#loc189, #loc190])
#loc271 = loc(fused[#loc191, #loc188])
