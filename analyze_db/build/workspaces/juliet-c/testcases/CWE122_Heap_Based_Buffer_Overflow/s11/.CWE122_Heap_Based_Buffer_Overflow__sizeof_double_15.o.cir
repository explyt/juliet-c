!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc125)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc126)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc127)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printDoubleLine(!cir.double) loc(#loc128)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc129)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc131)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc16)
    cir.store %1, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc132)
    cir.scope {
      %7 = cir.const #cir.int<6> : !s32i loc(#loc20)
      cir.switch (%7 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc22)
          %9 = cir.const #cir.int<8> : !u64i loc(#loc134)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc135)
          cir.store %11, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc136)
          cir.scope {
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc29)
            %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc30)
            %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!cir.double>, !cir.bool loc(#loc138)
            cir.if %17 {
              %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc32)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc33)
              %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc34)
              cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
            } loc(#loc139)
          } loc(#loc137)
          %12 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc35)
          %13 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc36)
          cir.store %12, %13 : !cir.double, !cir.ptr<!cir.double> loc(#loc140)
          cir.break loc(#loc38)
        } loc(#loc21)
        cir.case(default, []) {
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc40)
          cir.break loc(#loc41)
        } loc(#loc39)
        cir.yield loc(#loc18)
      } loc(#loc18)
    } loc(#loc133)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc42)
    %3 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc43)
    cir.call @printDoubleLine(%3) : (!cir.double) -> () loc(#loc44)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc45)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc46)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc46)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc45)
    cir.return loc(#loc13)
  } loc(#loc130)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc142)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc49)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc143)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc51)
    cir.return loc(#loc48)
  } loc(#loc141)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc145)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc57)
    cir.store %1, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc146)
    cir.scope {
      %7 = cir.const #cir.int<5> : !s32i loc(#loc61)
      cir.switch (%7 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc63)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc63)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc64)
          cir.break loc(#loc65)
        } loc(#loc62)
        cir.case(default, []) {
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc67)
          %9 = cir.const #cir.int<8> : !u64i loc(#loc148)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc67)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc149)
          cir.store %11, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc150)
          cir.scope {
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc74)
            %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc75)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc75)
            %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!cir.double>, !cir.bool loc(#loc152)
            cir.if %17 {
              %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc77)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc78)
              %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc79)
              cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc77)
            } loc(#loc153)
          } loc(#loc151)
          %12 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc80)
          %13 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc81)
          cir.store %12, %13 : !cir.double, !cir.ptr<!cir.double> loc(#loc154)
          cir.break loc(#loc83)
        } loc(#loc66)
        cir.yield loc(#loc59)
      } loc(#loc59)
    } loc(#loc147)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc84)
    %3 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc85)
    cir.call @printDoubleLine(%3) : (!cir.double) -> () loc(#loc86)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc87)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc88)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc88)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc87)
    cir.return loc(#loc54)
  } loc(#loc144)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc156)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc93)
    cir.store %1, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc157)
    cir.scope {
      %7 = cir.const #cir.int<6> : !s32i loc(#loc97)
      cir.switch (%7 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc99)
          %9 = cir.const #cir.int<8> : !u64i loc(#loc159)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc99)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc160)
          cir.store %11, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc161)
          cir.scope {
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc106)
            %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc107)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc107)
            %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!cir.double>, !cir.bool loc(#loc163)
            cir.if %17 {
              %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc109)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc110)
              %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc111)
              cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc109)
            } loc(#loc164)
          } loc(#loc162)
          %12 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc112)
          %13 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc113)
          cir.store %12, %13 : !cir.double, !cir.ptr<!cir.double> loc(#loc165)
          cir.break loc(#loc115)
        } loc(#loc98)
        cir.case(default, []) {
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc117)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc117)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc118)
          cir.break loc(#loc119)
        } loc(#loc116)
        cir.yield loc(#loc95)
      } loc(#loc95)
    } loc(#loc158)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc120)
    %3 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc121)
    cir.call @printDoubleLine(%3) : (!cir.double) -> () loc(#loc122)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc123)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc124)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc124)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc123)
    cir.return loc(#loc90)
  } loc(#loc155)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":37:19)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":38:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":38:41)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":21:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":43:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":23:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":23:14)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":25:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":25:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":26:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":39:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":26:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":28:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":31:26)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":31:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":31:44)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":31:45)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":31:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":32:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":32:37)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":32:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":32:21)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":32:27)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":32:28)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":32:34)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":32:33)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":33:17)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":33:10)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":33:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":34:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":35:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":37:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":38:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":41:22)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":41:21)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":41:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":42:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":42:10)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":97:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":101:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":99:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":99:14)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":100:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":100:14)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":50:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":71:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":52:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":52:14)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":54:12)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":54:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":55:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":67:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":55:12)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":57:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":59:19)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":59:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":60:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":61:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":63:26)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":63:33)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":63:45)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":63:46)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":63:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":64:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":64:37)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":64:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":64:21)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":64:27)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":64:28)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":64:34)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":64:33)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":65:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":65:10)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":65:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":66:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":69:22)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":69:21)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":69:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":70:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":70:10)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":74:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":95:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":76:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":76:14)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":78:12)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":78:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":79:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":91:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":79:12)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":81:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":83:26)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":83:33)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":83:45)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":83:46)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":83:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":84:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":84:37)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":84:13)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":84:21)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":84:27)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":84:28)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":84:34)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":84:33)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":85:17)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":85:10)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":85:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":86:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":87:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":89:19)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":89:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":90:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":93:22)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":93:21)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":93:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":94:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":94:10)
#loc125 = loc(fused[#loc1, #loc2])
#loc126 = loc(fused[#loc3, #loc4])
#loc127 = loc(fused[#loc5, #loc6])
#loc128 = loc(fused[#loc8, #loc9])
#loc129 = loc(fused[#loc10, #loc11])
#loc130 = loc(fused[#loc12, #loc13])
#loc131 = loc(fused[#loc14, #loc15])
#loc132 = loc(fused[#loc17, #loc16])
#loc133 = loc(fused[#loc18, #loc19])
#loc134 = loc(fused[#loc23, #loc24])
#loc135 = loc(fused[#loc22, #loc25])
#loc136 = loc(fused[#loc26, #loc25])
#loc137 = loc(fused[#loc27, #loc28])
#loc138 = loc(fused[#loc29, #loc30])
#loc139 = loc(fused[#loc31, #loc28])
#loc140 = loc(fused[#loc37, #loc35])
#loc141 = loc(fused[#loc47, #loc48])
#loc142 = loc(fused[#loc49, #loc50])
#loc143 = loc(fused[#loc51, #loc52])
#loc144 = loc(fused[#loc53, #loc54])
#loc145 = loc(fused[#loc55, #loc56])
#loc146 = loc(fused[#loc58, #loc57])
#loc147 = loc(fused[#loc59, #loc60])
#loc148 = loc(fused[#loc68, #loc69])
#loc149 = loc(fused[#loc67, #loc70])
#loc150 = loc(fused[#loc71, #loc70])
#loc151 = loc(fused[#loc72, #loc73])
#loc152 = loc(fused[#loc74, #loc75])
#loc153 = loc(fused[#loc76, #loc73])
#loc154 = loc(fused[#loc82, #loc80])
#loc155 = loc(fused[#loc89, #loc90])
#loc156 = loc(fused[#loc91, #loc92])
#loc157 = loc(fused[#loc94, #loc93])
#loc158 = loc(fused[#loc95, #loc96])
#loc159 = loc(fused[#loc100, #loc101])
#loc160 = loc(fused[#loc99, #loc102])
#loc161 = loc(fused[#loc103, #loc102])
#loc162 = loc(fused[#loc104, #loc105])
#loc163 = loc(fused[#loc106, #loc107])
#loc164 = loc(fused[#loc108, #loc105])
#loc165 = loc(fused[#loc114, #loc112])
