!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc13 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":31:18)
#loc53 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":64:18)
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__char_rand_preinc_66a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc60)
  cir.func private @CWE190_Integer_Overflow__char_rand_preinc_66b_badSink(!cir.ptr<!s8i>) loc(#loc61)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_preinc_66_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc63)
    %1 = cir.alloca !cir.array<!s8i x 5>, !cir.ptr<!cir.array<!s8i x 5>>, ["dataArray"] {alignment = 1 : i64} loc(#loc64)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc11)
    cir.store %3, %0 : !s8i, !cir.ptr<!s8i> loc(#loc65)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc13)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %7 ^bb1, ^bb2 loc(#loc13)
  ^bb1:  // pred: ^bb0
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc13)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc13)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc13)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc13)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc13)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc13)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc13)
    cir.br ^bb3(%19 : !u32i) loc(#loc13)
  ^bb2:  // pred: ^bb0
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc13)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc13)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc13)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc13)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc13)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc13)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc13)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc13)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc13)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc13)
    cir.br ^bb3(%35 : !u32i) loc(#loc13)
  ^bb3(%36: !u32i loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":31:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc13)
  ^bb4:  // pred: ^bb3
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc13)
    %38 = cir.cast(integral, %37 : !s32i), !s8i loc(#loc13)
    cir.store %38, %0 : !s8i, !cir.ptr<!s8i> loc(#loc66)
    %39 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc15)
    %40 = cir.const #cir.int<2> : !s32i loc(#loc16)
    %41 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc17)
    %42 = cir.ptr_stride(%41 : !cir.ptr<!s8i>, %40 : !s32i), !cir.ptr<!s8i> loc(#loc17)
    cir.store %39, %42 : !s8i, !cir.ptr<!s8i> loc(#loc67)
    %43 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc18)
    cir.call @CWE190_Integer_Overflow__char_rand_preinc_66b_badSink(%43) : (!cir.ptr<!s8i>) -> () loc(#loc19)
    cir.return loc(#loc6)
  } loc(#loc62)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_preinc_66_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc69)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc22)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc70)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc24)
    cir.return loc(#loc21)
  } loc(#loc68)
  cir.func private @CWE190_Integer_Overflow__char_rand_preinc_66b_goodG2BSink(!cir.ptr<!s8i>) loc(#loc71)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc73)
    %1 = cir.alloca !cir.array<!s8i x 5>, !cir.ptr<!cir.array<!s8i x 5>>, ["dataArray"] {alignment = 1 : i64} loc(#loc74)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc34)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc34)
    cir.store %3, %0 : !s8i, !cir.ptr<!s8i> loc(#loc75)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc36)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc36)
    cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc76)
    %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc38)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc39)
    %8 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc40)
    %9 = cir.ptr_stride(%8 : !cir.ptr<!s8i>, %7 : !s32i), !cir.ptr<!s8i> loc(#loc40)
    cir.store %6, %9 : !s8i, !cir.ptr<!s8i> loc(#loc77)
    %10 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @CWE190_Integer_Overflow__char_rand_preinc_66b_goodG2BSink(%10) : (!cir.ptr<!s8i>) -> () loc(#loc42)
    cir.return loc(#loc29)
  } loc(#loc72)
  cir.func private @CWE190_Integer_Overflow__char_rand_preinc_66b_goodB2GSink(!cir.ptr<!s8i>) loc(#loc78)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc80)
    %1 = cir.alloca !cir.array<!s8i x 5>, !cir.ptr<!cir.array<!s8i x 5>>, ["dataArray"] {alignment = 1 : i64} loc(#loc81)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc51)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc51)
    cir.store %3, %0 : !s8i, !cir.ptr<!s8i> loc(#loc82)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc53)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc53)
    cir.brcond %7 ^bb1, ^bb2 loc(#loc53)
  ^bb1:  // pred: ^bb0
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc53)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc53)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc53)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc53)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc53)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc53)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc53)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc53)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc53)
    cir.br ^bb3(%19 : !u32i) loc(#loc53)
  ^bb2:  // pred: ^bb0
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc53)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc53)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc53)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc53)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc53)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc53)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc53)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc53)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc53)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc53)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc53)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc53)
    cir.br ^bb3(%35 : !u32i) loc(#loc53)
  ^bb3(%36: !u32i loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":64:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc53)
  ^bb4:  // pred: ^bb3
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc53)
    %38 = cir.cast(integral, %37 : !s32i), !s8i loc(#loc53)
    cir.store %38, %0 : !s8i, !cir.ptr<!s8i> loc(#loc83)
    %39 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc55)
    %40 = cir.const #cir.int<2> : !s32i loc(#loc56)
    %41 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc57)
    %42 = cir.ptr_stride(%41 : !cir.ptr<!s8i>, %40 : !s32i), !cir.ptr<!s8i> loc(#loc57)
    cir.store %39, %42 : !s8i, !cir.ptr<!s8i> loc(#loc84)
    %43 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @CWE190_Integer_Overflow__char_rand_preinc_66b_goodB2GSink(%43) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    cir.return loc(#loc46)
  } loc(#loc79)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__char_rand_preinc_66a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":23:1)
#loc4 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":23:76)
#loc5 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":35:1)
#loc7 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":27:5)
#loc8 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":27:10)
#loc9 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":28:5)
#loc10 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":28:21)
#loc11 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":29:12)
#loc12 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":29:5)
#loc14 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":31:5)
#loc15 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":33:20)
#loc16 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":33:15)
#loc17 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":33:5)
#loc18 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":34:59)
#loc19 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":34:5)
#loc20 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":69:1)
#loc21 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":73:1)
#loc22 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":71:5)
#loc23 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":71:13)
#loc24 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":72:5)
#loc25 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":72:13)
#loc26 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":42:1)
#loc27 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":42:80)
#loc28 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":44:1)
#loc29 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":53:1)
#loc30 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":46:5)
#loc31 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":46:10)
#loc32 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":47:5)
#loc33 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":47:21)
#loc34 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":48:12)
#loc35 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":48:5)
#loc36 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":50:12)
#loc37 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":50:5)
#loc38 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":51:20)
#loc39 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":51:15)
#loc40 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":51:5)
#loc41 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":52:63)
#loc42 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":52:5)
#loc43 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":56:1)
#loc44 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":56:80)
#loc45 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":58:1)
#loc46 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":67:1)
#loc47 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":60:5)
#loc48 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":60:10)
#loc49 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":61:5)
#loc50 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":61:21)
#loc51 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":62:12)
#loc52 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":62:5)
#loc54 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":64:5)
#loc55 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":65:20)
#loc56 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":65:15)
#loc57 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":65:5)
#loc58 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":66:63)
#loc59 = loc("CWE190_Integer_Overflow__char_rand_preinc_66a.c":66:5)
#loc60 = loc(fused[#loc1, #loc2])
#loc61 = loc(fused[#loc3, #loc4])
#loc62 = loc(fused[#loc5, #loc6])
#loc63 = loc(fused[#loc7, #loc8])
#loc64 = loc(fused[#loc9, #loc10])
#loc65 = loc(fused[#loc12, #loc11])
#loc66 = loc(fused[#loc14, #loc13])
#loc67 = loc(fused[#loc17, #loc15])
#loc68 = loc(fused[#loc20, #loc21])
#loc69 = loc(fused[#loc22, #loc23])
#loc70 = loc(fused[#loc24, #loc25])
#loc71 = loc(fused[#loc26, #loc27])
#loc72 = loc(fused[#loc28, #loc29])
#loc73 = loc(fused[#loc30, #loc31])
#loc74 = loc(fused[#loc32, #loc33])
#loc75 = loc(fused[#loc35, #loc34])
#loc76 = loc(fused[#loc37, #loc36])
#loc77 = loc(fused[#loc40, #loc38])
#loc78 = loc(fused[#loc43, #loc44])
#loc79 = loc(fused[#loc45, #loc46])
#loc80 = loc(fused[#loc47, #loc48])
#loc81 = loc(fused[#loc49, #loc50])
#loc82 = loc(fused[#loc52, #loc51])
#loc83 = loc(fused[#loc54, #loc53])
#loc84 = loc(fused[#loc57, #loc55])
