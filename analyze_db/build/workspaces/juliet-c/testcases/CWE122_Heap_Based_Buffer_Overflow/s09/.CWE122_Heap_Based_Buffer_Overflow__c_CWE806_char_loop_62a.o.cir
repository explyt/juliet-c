!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc122)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc123)
  cir.func private @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_629badSourceERPc(!cir.ptr<!cir.ptr<!s8i>>) loc(#loc124)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc125)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc126)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc127)
  cir.func @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_623badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc129)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc17)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc18)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc18)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc130)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc131)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc17)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc132)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc133)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc26)
      %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc135)
      cir.if %10 {
        %11 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc28)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc30)
        cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
      } loc(#loc136)
    } loc(#loc134)
    cir.call @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_629badSourceERPc(%0) : (!cir.ptr<!cir.ptr<!s8i>>) -> () loc(#loc31)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc138)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc139)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc140)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc138)
      cir.store %11, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc138)
      %12 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc39)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
      %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc39)
      cir.store %14, %10 : !u64i, !cir.ptr<!u64i> loc(#loc141)
      cir.scope {
        %25 = cir.const #cir.int<0> : !s32i loc(#loc45)
        %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc45)
        cir.store %26, %9 : !u64i, !cir.ptr<!u64i> loc(#loc143)
        cir.for : cond {
          %27 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc47)
          %28 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc48)
          %29 = cir.cmp(lt, %27, %28) : !u64i, !cir.bool loc(#loc144)
          cir.condition(%29) loc(#loc144)
        } body {
          cir.scope {
            %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
            %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc51)
            %29 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %28 : !u64i), !cir.ptr<!s8i> loc(#loc52)
            %30 = cir.load %29 : !cir.ptr<!s8i>, !s8i loc(#loc50)
            %31 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc53)
            %32 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc54)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc54)
            cir.store %30, %33 : !s8i, !cir.ptr<!s8i> loc(#loc146)
          } loc(#loc145)
          cir.yield loc(#loc44)
        } step {
          %27 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc55)
          %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc56)
          cir.store %28, %9 : !u64i, !cir.ptr<!u64i> loc(#loc147)
          cir.yield loc(#loc142)
        } loc(#loc142)
      } loc(#loc142)
      %15 = cir.const #cir.int<0> : !s8i loc(#loc57)
      %16 = cir.const #cir.int<50> : !s32i loc(#loc58)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc59)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc58)
      %19 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc60)
      %20 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %18 : !s32i), !cir.ptr<!s8i> loc(#loc60)
      cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc148)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
      cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc62)
      %22 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc63)
      %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc64)
      cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc63)
    } loc(#loc137)
    cir.return loc(#loc14)
  } loc(#loc128)
  cir.func private @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_6213goodG2BSourceERPc(!cir.ptr<!cir.ptr<!s8i>>) loc(#loc149)
  cir.func internal private @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc151)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc71)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc72)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc72)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc152)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc153)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc71)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc154)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc155)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc80)
      %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc157)
      cir.if %10 {
        %11 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc82)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc83)
        %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc84)
        cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc82)
      } loc(#loc158)
    } loc(#loc156)
    cir.call @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_6213goodG2BSourceERPc(%0) : (!cir.ptr<!cir.ptr<!s8i>>) -> () loc(#loc85)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc160)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc161)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc162)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc160)
      cir.store %11, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc160)
      %12 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc93)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
      %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc93)
      cir.store %14, %10 : !u64i, !cir.ptr<!u64i> loc(#loc163)
      cir.scope {
        %25 = cir.const #cir.int<0> : !s32i loc(#loc99)
        %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc99)
        cir.store %26, %9 : !u64i, !cir.ptr<!u64i> loc(#loc165)
        cir.for : cond {
          %27 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc101)
          %28 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc102)
          %29 = cir.cmp(lt, %27, %28) : !u64i, !cir.bool loc(#loc166)
          cir.condition(%29) loc(#loc166)
        } body {
          cir.scope {
            %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc104)
            %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc105)
            %29 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %28 : !u64i), !cir.ptr<!s8i> loc(#loc106)
            %30 = cir.load %29 : !cir.ptr<!s8i>, !s8i loc(#loc104)
            %31 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc107)
            %32 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc108)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc108)
            cir.store %30, %33 : !s8i, !cir.ptr<!s8i> loc(#loc168)
          } loc(#loc167)
          cir.yield loc(#loc98)
        } step {
          %27 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc109)
          %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc110)
          cir.store %28, %9 : !u64i, !cir.ptr<!u64i> loc(#loc169)
          cir.yield loc(#loc164)
        } loc(#loc164)
      } loc(#loc164)
      %15 = cir.const #cir.int<0> : !s8i loc(#loc111)
      %16 = cir.const #cir.int<50> : !s32i loc(#loc112)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc113)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc112)
      %19 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc114)
      %20 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %18 : !s32i), !cir.ptr<!s8i> loc(#loc114)
      cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc170)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
      cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc116)
      %22 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc117)
      %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc118)
      cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc117)
    } loc(#loc159)
    cir.return loc(#loc68)
  } loc(#loc150)
  cir.func @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_624goodEv() extra(#fn_attr1) {
    cir.call @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62L7goodG2BEv() : () -> () loc(#loc121)
    cir.return loc(#loc120)
  } loc(#loc171)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":27:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":27:28)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("/usr/include/stdlib.h":687:1)
#loc12 = loc("/usr/include/stdlib.h":687:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":29:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":48:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":31:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":31:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":32:20)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":32:27)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":32:31)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":32:42)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":32:43)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":32:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":33:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":33:33)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":33:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":33:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":33:23)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":33:24)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":33:30)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":33:29)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":34:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":35:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":47:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":36:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":36:25)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":37:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":37:16)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":37:19)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":38:19)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":38:26)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":38:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":38:30)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":40:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":43:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":40:18)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":40:14)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":40:21)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":40:25)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":41:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":42:23)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":42:28)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":42:29)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":42:18)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":42:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":40:35)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":40:34)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":44:22)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":44:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":44:17)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":44:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":45:19)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":45:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":46:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":46:14)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":55:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":55:32)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":57:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":76:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":59:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":59:12)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":60:20)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":60:27)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":60:31)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":60:42)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":60:43)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":60:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":61:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":61:33)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":61:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":61:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":61:23)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":61:24)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":61:30)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":61:29)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":62:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":63:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":75:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":64:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":64:25)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":65:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":65:16)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":65:19)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":66:19)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":66:26)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":66:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":66:30)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":68:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":71:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":68:18)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":68:14)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":68:21)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":68:25)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":69:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":70:23)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":70:28)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":70:29)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":70:18)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":70:13)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":68:35)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":68:34)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":72:22)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":72:14)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":72:17)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":72:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":73:19)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":73:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":74:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":74:14)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":78:1)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":81:1)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_62a.cpp":80:5)
#loc122 = loc(fused[#loc1, #loc2])
#loc123 = loc(fused[#loc3, #loc4])
#loc124 = loc(fused[#loc5, #loc6])
#loc125 = loc(fused[#loc7, #loc8])
#loc126 = loc(fused[#loc9, #loc10])
#loc127 = loc(fused[#loc11, #loc12])
#loc128 = loc(fused[#loc13, #loc14])
#loc129 = loc(fused[#loc15, #loc16])
#loc130 = loc(fused[#loc19, #loc20])
#loc131 = loc(fused[#loc18, #loc20])
#loc132 = loc(fused[#loc17, #loc21])
#loc133 = loc(fused[#loc22, #loc21])
#loc134 = loc(fused[#loc23, #loc24])
#loc135 = loc(fused[#loc25, #loc26])
#loc136 = loc(fused[#loc27, #loc24])
#loc137 = loc(fused[#loc32, #loc33])
#loc138 = loc(fused[#loc34, #loc35])
#loc139 = loc(fused[#loc36, #loc37])
#loc140 = loc(fused[#loc36, #loc38])
#loc141 = loc(fused[#loc41, #loc42])
#loc142 = loc(fused[#loc43, #loc44])
#loc143 = loc(fused[#loc46, #loc45])
#loc144 = loc(fused[#loc47, #loc48])
#loc145 = loc(fused[#loc49, #loc44])
#loc146 = loc(fused[#loc54, #loc52])
#loc147 = loc(fused[#loc56, #loc55])
#loc148 = loc(fused[#loc60, #loc57])
#loc149 = loc(fused[#loc65, #loc66])
#loc150 = loc(fused[#loc67, #loc68])
#loc151 = loc(fused[#loc69, #loc70])
#loc152 = loc(fused[#loc73, #loc74])
#loc153 = loc(fused[#loc72, #loc74])
#loc154 = loc(fused[#loc71, #loc75])
#loc155 = loc(fused[#loc76, #loc75])
#loc156 = loc(fused[#loc77, #loc78])
#loc157 = loc(fused[#loc79, #loc80])
#loc158 = loc(fused[#loc81, #loc78])
#loc159 = loc(fused[#loc86, #loc87])
#loc160 = loc(fused[#loc88, #loc89])
#loc161 = loc(fused[#loc90, #loc91])
#loc162 = loc(fused[#loc90, #loc92])
#loc163 = loc(fused[#loc95, #loc96])
#loc164 = loc(fused[#loc97, #loc98])
#loc165 = loc(fused[#loc100, #loc99])
#loc166 = loc(fused[#loc101, #loc102])
#loc167 = loc(fused[#loc103, #loc98])
#loc168 = loc(fused[#loc108, #loc106])
#loc169 = loc(fused[#loc110, #loc109])
#loc170 = loc(fused[#loc114, #loc111])
#loc171 = loc(fused[#loc119, #loc120])
