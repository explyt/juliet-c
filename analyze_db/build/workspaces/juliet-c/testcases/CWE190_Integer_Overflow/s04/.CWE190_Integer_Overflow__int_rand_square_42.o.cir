!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":24:22)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":24:26)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":70:26)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":70:30)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":49:26)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":49:30)
#true = #cir.bool<true> : !cir.bool
#loc107 = loc(fused[#loc5, #loc6])
#loc121 = loc(fused[#loc39, #loc40])
#loc135 = loc(fused[#loc81, #loc82])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc105)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc5, #loc6])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc107)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc8)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc8)
      cir.yield %21 : !u32i loc(#loc8)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc8)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc8)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc8)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc8)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc8)
      cir.yield %25 : !u32i loc(#loc8)
    }) : (!cir.bool) -> !u32i loc(#loc8)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc8)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    cir.return %9 : !s32i loc(#loc109)
  } loc(#loc106)
  cir.func private @printIntLine(!s32i) loc(#loc110)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc112)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc18)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %3 = cir.call @badSource(%2) : (!s32i) -> !s32i loc(#loc21)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc116)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
      %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc28)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc116)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc30)
    } loc(#loc115)
    cir.return loc(#loc15)
  } loc(#loc111)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc118)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc119)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc117)
  cir.func internal private @goodB2GSource(%arg0: !s32i loc(fused[#loc39, #loc40])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc121)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc38)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc41)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc42)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc42)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc42)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc42)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc42)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc42)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc42)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc42)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc42)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc42)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc42)
      cir.yield %21 : !u32i loc(#loc42)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc42)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc42)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc42)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc42)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc42)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc42)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc42)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc42)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc42)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc42)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc42)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc42)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc42)
      cir.yield %25 : !u32i loc(#loc42)
    }) : (!cir.bool) -> !u32i loc(#loc42)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc42)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc122)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc123)
    cir.return %9 : !s32i loc(#loc123)
  } loc(#loc120)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc46)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc126)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc54)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    %3 = cir.call @goodB2GSource(%2) : (!s32i) -> !s32i loc(#loc57)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc128)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
      %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc63)
      %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc63)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc63)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc63)
      %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc130)
      %10 = cir.ternary(%9, true {
        %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
        %12 = cir.abs %11 poison : !s32i loc(#loc66)
        %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc66)
        %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc67)
        %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc68)
        %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc68)
        %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc67)
        %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc67)
        %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc131)
        %20 = cir.ternary(%19, true {
          %21 = cir.const #true loc(#loc64)
          cir.yield %21 : !cir.bool loc(#loc64)
        }, false {
          %21 = cir.const #false loc(#loc64)
          cir.yield %21 : !cir.bool loc(#loc64)
        }) : (!cir.bool) -> !cir.bool loc(#loc64)
        cir.yield %20 : !cir.bool loc(#loc64)
      }, false {
        %11 = cir.const #false loc(#loc64)
        cir.yield %11 : !cir.bool loc(#loc64)
      }) : (!cir.bool) -> !cir.bool loc(#loc64)
      cir.if %10 {
        %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc133)
        %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
        %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc75)
        cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc133)
        %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc76)
        cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc77)
      } else {
        %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc49)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc49)
        cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc78)
      } loc(#loc132)
    } loc(#loc129)
    cir.return loc(#loc51)
  } loc(#loc125)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc81, #loc82])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc135)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc80)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc84)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    cir.return %4 : !s32i loc(#loc137)
  } loc(#loc134)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc139)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc92)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %3 = cir.call @goodG2BSource(%2) : (!s32i) -> !s32i loc(#loc95)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc143)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
      %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc102)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc143)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc103)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc104)
    } loc(#loc142)
    cir.return loc(#loc89)
  } loc(#loc138)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":29:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":25:1)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":27:12)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":27:5)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":28:12)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":28:5)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":31:1)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":42:1)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":33:5)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":33:9)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":35:12)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":35:5)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":36:22)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":36:12)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":36:5)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":36:26)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":37:5)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":41:5)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":39:9)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":39:29)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":39:22)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":40:22)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":40:9)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":95:1)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":99:1)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":97:5)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":97:13)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":98:5)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":98:13)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":70:1)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":75:1)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":71:1)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":73:12)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":73:5)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":74:12)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":74:5)
#loc46 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":91:19)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":77:1)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":93:1)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":79:5)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":79:9)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":81:12)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":81:5)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":82:26)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":82:12)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":82:5)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":82:30)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":84:5)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":92:5)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":84:9)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":84:16)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":84:24)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":84:31)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":84:27)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":84:45)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":84:58)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":84:65)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":85:5)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":88:5)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":90:5)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":86:9)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":86:29)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":86:22)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":87:22)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":87:9)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":91:9)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":49:1)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":54:1)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":50:1)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":52:12)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":52:5)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":53:12)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":53:5)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":56:1)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":67:1)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":58:5)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":58:9)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":60:12)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":60:5)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":61:26)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":61:12)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":61:5)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":61:30)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":62:5)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":66:5)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":64:9)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":64:29)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":64:22)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":65:22)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_square_42.c":65:9)
#loc105 = loc(fused[#loc1, #loc2])
#loc106 = loc(fused[#loc3, #loc4])
#loc108 = loc(fused[#loc9, #loc8])
#loc109 = loc(fused[#loc11, #loc10])
#loc110 = loc(fused[#loc12, #loc13])
#loc111 = loc(fused[#loc14, #loc15])
#loc112 = loc(fused[#loc16, #loc17])
#loc113 = loc(fused[#loc19, #loc18])
#loc114 = loc(fused[#loc22, #loc23])
#loc115 = loc(fused[#loc24, #loc25])
#loc116 = loc(fused[#loc26, #loc27])
#loc117 = loc(fused[#loc31, #loc32])
#loc118 = loc(fused[#loc33, #loc34])
#loc119 = loc(fused[#loc35, #loc36])
#loc120 = loc(fused[#loc37, #loc38])
#loc122 = loc(fused[#loc43, #loc42])
#loc123 = loc(fused[#loc45, #loc44])
#loc124 = loc(fused[#loc47, #loc48])
#loc125 = loc(fused[#loc50, #loc51])
#loc126 = loc(fused[#loc52, #loc53])
#loc127 = loc(fused[#loc55, #loc54])
#loc128 = loc(fused[#loc58, #loc59])
#loc129 = loc(fused[#loc60, #loc61])
#loc130 = loc(fused[#loc62, #loc63])
#loc131 = loc(fused[#loc66, #loc69])
#loc132 = loc(fused[#loc70, #loc71, #loc72, #loc61])
#loc133 = loc(fused[#loc73, #loc74])
#loc134 = loc(fused[#loc79, #loc80])
#loc136 = loc(fused[#loc85, #loc84])
#loc137 = loc(fused[#loc87, #loc86])
#loc138 = loc(fused[#loc88, #loc89])
#loc139 = loc(fused[#loc90, #loc91])
#loc140 = loc(fused[#loc93, #loc92])
#loc141 = loc(fused[#loc96, #loc97])
#loc142 = loc(fused[#loc98, #loc99])
#loc143 = loc(fused[#loc100, #loc101])
