!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc175)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc176)
  cir.func private @printIntLine(!s32i) loc(#loc177)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc178)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc180)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc181)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
      cir.if %3 {
        %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc19)
        %5 = cir.const #cir.int<10> : !s32i loc(#loc20)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc20)
        %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc19)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc184)
        cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc185)
        cir.scope {
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
          %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc26)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc26)
          %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc187)
          cir.if %12 {
            %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc28)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc29)
            %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc30)
            cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
          } loc(#loc188)
        } loc(#loc186)
      } loc(#loc183)
    } loc(#loc182)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc190)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc191)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc190)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc190)
      cir.scope {
        %12 = cir.const #cir.int<0> : !s32i loc(#loc39)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc39)
        cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc193)
        cir.for : cond {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc41)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc42)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc42)
          %17 = cir.cmp(lt, %14, %16) : !u64i, !cir.bool loc(#loc194)
          cir.condition(%17) loc(#loc43)
        } body {
          cir.scope {
            %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc45)
            %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc46)
            %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !u64i), !cir.ptr<!s32i> loc(#loc46)
            %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc46)
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
            %19 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc48)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc49)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc196)
          } loc(#loc195)
          cir.yield loc(#loc38)
        } step {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc51)
          %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc52)
          cir.store %15, %3 : !u64i, !cir.ptr<!u64i> loc(#loc197)
          cir.yield loc(#loc192)
        } loc(#loc192)
      } loc(#loc192)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc54)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc55)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc53)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc56)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc57)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc58)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc57)
    } loc(#loc189)
    cir.return loc(#loc10)
  } loc(#loc179)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc199)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc61)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc200)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc63)
    cir.return loc(#loc60)
  } loc(#loc198)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc201)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc67)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc203)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc72)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc204)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc76)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc76)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc67)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc67)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc80)
      } else {
        %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc81)
        %5 = cir.const #cir.int<10> : !s32i loc(#loc82)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc82)
        %7 = cir.const #cir.int<4> : !u64i loc(#loc207)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc208)
        %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc81)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc209)
        cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc210)
        cir.scope {
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc89)
          %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc90)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc90)
          %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc212)
          cir.if %14 {
            %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc92)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc93)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc94)
            cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc92)
          } loc(#loc213)
        } loc(#loc211)
      } loc(#loc206)
    } loc(#loc205)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc215)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc216)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc215)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc215)
      cir.scope {
        %12 = cir.const #cir.int<0> : !s32i loc(#loc103)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc103)
        cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc218)
        cir.for : cond {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc105)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc106)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc106)
          %17 = cir.cmp(lt, %14, %16) : !u64i, !cir.bool loc(#loc219)
          cir.condition(%17) loc(#loc107)
        } body {
          cir.scope {
            %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc109)
            %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc110)
            %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !u64i), !cir.ptr<!s32i> loc(#loc110)
            %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc110)
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc111)
            %19 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc112)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc113)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc221)
          } loc(#loc220)
          cir.yield loc(#loc102)
        } step {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc115)
          %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc116)
          cir.store %15, %3 : !u64i, !cir.ptr<!u64i> loc(#loc222)
          cir.yield loc(#loc217)
        } loc(#loc217)
      } loc(#loc217)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc118)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc119)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc117)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc120)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc121)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc122)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc122)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc121)
    } loc(#loc214)
    cir.return loc(#loc69)
  } loc(#loc202)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc224)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc127)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc225)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc131)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc131)
      cir.if %3 {
        %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc133)
        %5 = cir.const #cir.int<10> : !s32i loc(#loc134)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc134)
        %7 = cir.const #cir.int<4> : !u64i loc(#loc228)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc229)
        %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc133)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc230)
        cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc231)
        cir.scope {
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc141)
          %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc142)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc142)
          %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc233)
          cir.if %14 {
            %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc144)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc145)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc146)
            cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc144)
          } loc(#loc234)
        } loc(#loc232)
      } loc(#loc227)
    } loc(#loc226)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc236)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc237)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc236)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc236)
      cir.scope {
        %12 = cir.const #cir.int<0> : !s32i loc(#loc155)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc155)
        cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc239)
        cir.for : cond {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc157)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc158)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc158)
          %17 = cir.cmp(lt, %14, %16) : !u64i, !cir.bool loc(#loc240)
          cir.condition(%17) loc(#loc159)
        } body {
          cir.scope {
            %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc161)
            %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc162)
            %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !u64i), !cir.ptr<!s32i> loc(#loc162)
            %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc162)
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc163)
            %19 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc164)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc165)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc242)
          } loc(#loc241)
          cir.yield loc(#loc154)
        } step {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc167)
          %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc168)
          cir.store %15, %3 : !u64i, !cir.ptr<!u64i> loc(#loc243)
          cir.yield loc(#loc238)
        } loc(#loc238)
      } loc(#loc238)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc169)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc170)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc171)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc169)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc172)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc173)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc174)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc174)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc173)
    } loc(#loc235)
    cir.return loc(#loc124)
  } loc(#loc223)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":28:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":49:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":30:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":30:11)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":31:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":31:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":32:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":37:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":32:8)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":33:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":35:23)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":35:30)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":35:32)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":35:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":36:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":36:37)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":36:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":36:21)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":36:27)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":36:28)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":36:34)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":36:33)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":38:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":48:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":39:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":39:28)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":40:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":40:16)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":42:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":45:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":42:18)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":42:14)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":42:21)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":42:25)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":42:23)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":43:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":44:30)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":44:23)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":44:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":44:18)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":44:19)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":44:31)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":42:30)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":42:29)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":46:22)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":46:27)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":46:28)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":46:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":47:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":47:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":108:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":112:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":110:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":110:14)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":111:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":111:14)
#loc65 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc66 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":63:19)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":56:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":82:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":58:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":58:11)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":59:12)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":59:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":60:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":70:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":60:8)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":61:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":64:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":66:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":63:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":68:23)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":68:30)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":68:33)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":68:43)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":68:44)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":68:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":69:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":69:37)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":69:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":69:21)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":69:27)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":69:28)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":69:34)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":69:33)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":71:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":81:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":72:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":72:28)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":73:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":73:16)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":75:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":78:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":75:18)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":75:14)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":75:21)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":75:25)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":75:23)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":76:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":77:30)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":77:23)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":77:13)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":77:18)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":77:19)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":77:31)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":75:30)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":75:29)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":79:22)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":79:27)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":79:28)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":79:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":80:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":80:14)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":85:1)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":106:1)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":87:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":87:11)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":88:12)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":88:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":89:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":94:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":89:8)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":90:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":92:23)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":92:30)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":92:33)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":92:43)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":92:44)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":92:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":93:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":93:37)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":93:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":93:21)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":93:27)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":93:28)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":93:34)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":93:33)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":95:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":105:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":96:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":96:28)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":97:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":97:16)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":99:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":102:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":99:18)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":99:14)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":99:21)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":99:25)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":99:23)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":100:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":101:30)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":101:23)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":101:13)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":101:18)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":101:19)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":101:31)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":99:30)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":99:29)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":103:22)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":103:27)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":103:28)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":103:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":104:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c":104:14)
#loc175 = loc(fused[#loc1, #loc2])
#loc176 = loc(fused[#loc3, #loc4])
#loc177 = loc(fused[#loc5, #loc6])
#loc178 = loc(fused[#loc7, #loc8])
#loc179 = loc(fused[#loc9, #loc10])
#loc180 = loc(fused[#loc11, #loc12])
#loc181 = loc(fused[#loc14, #loc13])
#loc182 = loc(fused[#loc15, #loc16])
#loc183 = loc(fused[#loc18, #loc16])
#loc184 = loc(fused[#loc19, #loc21])
#loc185 = loc(fused[#loc22, #loc21])
#loc186 = loc(fused[#loc23, #loc24])
#loc187 = loc(fused[#loc25, #loc26])
#loc188 = loc(fused[#loc27, #loc24])
#loc189 = loc(fused[#loc31, #loc32])
#loc190 = loc(fused[#loc33, #loc34])
#loc191 = loc(fused[#loc35, #loc36])
#loc192 = loc(fused[#loc37, #loc38])
#loc193 = loc(fused[#loc40, #loc39])
#loc194 = loc(fused[#loc41, #loc42])
#loc195 = loc(fused[#loc44, #loc38])
#loc196 = loc(fused[#loc47, #loc50])
#loc197 = loc(fused[#loc52, #loc51])
#loc198 = loc(fused[#loc59, #loc60])
#loc199 = loc(fused[#loc61, #loc62])
#loc200 = loc(fused[#loc63, #loc64])
#loc201 = loc(fused[#loc65, #loc66])
#loc202 = loc(fused[#loc68, #loc69])
#loc203 = loc(fused[#loc70, #loc71])
#loc204 = loc(fused[#loc73, #loc72])
#loc205 = loc(fused[#loc74, #loc75])
#loc206 = loc(fused[#loc77, #loc78, #loc79, #loc75])
#loc207 = loc(fused[#loc83, #loc84])
#loc208 = loc(fused[#loc82, #loc84])
#loc209 = loc(fused[#loc81, #loc85])
#loc210 = loc(fused[#loc86, #loc85])
#loc211 = loc(fused[#loc87, #loc88])
#loc212 = loc(fused[#loc89, #loc90])
#loc213 = loc(fused[#loc91, #loc88])
#loc214 = loc(fused[#loc95, #loc96])
#loc215 = loc(fused[#loc97, #loc98])
#loc216 = loc(fused[#loc99, #loc100])
#loc217 = loc(fused[#loc101, #loc102])
#loc218 = loc(fused[#loc104, #loc103])
#loc219 = loc(fused[#loc105, #loc106])
#loc220 = loc(fused[#loc108, #loc102])
#loc221 = loc(fused[#loc111, #loc114])
#loc222 = loc(fused[#loc116, #loc115])
#loc223 = loc(fused[#loc123, #loc124])
#loc224 = loc(fused[#loc125, #loc126])
#loc225 = loc(fused[#loc128, #loc127])
#loc226 = loc(fused[#loc129, #loc130])
#loc227 = loc(fused[#loc132, #loc130])
#loc228 = loc(fused[#loc135, #loc136])
#loc229 = loc(fused[#loc134, #loc136])
#loc230 = loc(fused[#loc133, #loc137])
#loc231 = loc(fused[#loc138, #loc137])
#loc232 = loc(fused[#loc139, #loc140])
#loc233 = loc(fused[#loc141, #loc142])
#loc234 = loc(fused[#loc143, #loc140])
#loc235 = loc(fused[#loc147, #loc148])
#loc236 = loc(fused[#loc149, #loc150])
#loc237 = loc(fused[#loc151, #loc152])
#loc238 = loc(fused[#loc153, #loc154])
#loc239 = loc(fused[#loc156, #loc155])
#loc240 = loc(fused[#loc157, #loc158])
#loc241 = loc(fused[#loc160, #loc154])
#loc242 = loc(fused[#loc163, #loc166])
#loc243 = loc(fused[#loc168, #loc167])
