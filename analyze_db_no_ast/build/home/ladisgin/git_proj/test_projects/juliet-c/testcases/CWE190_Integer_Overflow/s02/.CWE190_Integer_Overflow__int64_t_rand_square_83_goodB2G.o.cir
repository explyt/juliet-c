!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":27:58)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":27:114)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":27:122)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":34:58)
!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G = !cir.struct<class "CWE190_Integer_Overflow__int64_t_rand_square_83::CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G" {!s64i} #cir.record.decl.ast>
#loc44 = loc(fused[#loc6, #loc7])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc42)
  cir.func  @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_8355CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2GC2El(%arg0: !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G> loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":27:58), %arg1: !s64i loc(fused[#loc6, #loc7])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G>>, ["this", init] {alignment = 8 : i64} loc(#loc5)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc44)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G>> loc(#loc8)
    cir.store %arg1, %1 : !s64i, !cir.ptr<!s64i> loc(#loc8)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G>>, !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G> loc(#loc5)
    %3 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc9)
    %4 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G> -> !cir.ptr<!s64i> loc(#loc10)
    cir.store %3, %4 : !s64i, !cir.ptr<!s64i> loc(#loc45)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc12)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc12)
    %9 = cir.ternary(%8, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc12)
      %14 = cir.const #cir.int<60> : !s32i loc(#loc12)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc12)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc12)
      %18 = cir.const #cir.int<45> : !s32i loc(#loc12)
      %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc12)
      %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc12)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc12)
      %23 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc12)
      %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc12)
      %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc12)
      %28 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc12)
      %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc12)
      %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc12)
      %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc12)
      cir.yield %33 : !u64i loc(#loc12)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc12)
      %14 = cir.const #cir.int<60> : !s32i loc(#loc12)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc12)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc12)
      %18 = cir.const #cir.int<45> : !s32i loc(#loc12)
      %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc12)
      %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc12)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc12)
      %23 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc12)
      %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc12)
      %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc12)
      %28 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc12)
      %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc12)
      %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc12)
      %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc12)
      %34 = cir.unary(minus, %33) : !u64i, !u64i loc(#loc12)
      %35 = cir.const #cir.int<1> : !s32i loc(#loc12)
      %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc12)
      %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc12)
      cir.yield %37 : !u64i loc(#loc12)
    }) : (!cir.bool) -> !u64i loc(#loc12)
    %10 = cir.cast(integral, %9 : !u64i), !s64i loc(#loc12)
    %11 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G> -> !cir.ptr<!s64i> loc(#loc10)
    cir.store %10, %11 : !s64i, !cir.ptr<!s64i> loc(#loc46)
    cir.return loc(#loc4)
  } loc(#loc43)
  cir.func  @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_8355CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2GC1El(!cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G>, !s64i) alias(@_ZN47CWE190_Integer_Overflow__int64_t_rand_square_8355CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2GC2El) loc(#loc43)
  cir.func private  @imaxabs(!s64i) -> !s64i extra(#fn_attr) loc(#loc47)
  cir.func private  @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc16)
  cir.func private  @printLongLongLine(!s64i) loc(#loc48)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc49)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc21)
  cir.func  @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_8355CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2GD2Ev(%arg0: !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G> loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":34:58)) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G>>, ["this", init] {alignment = 8 : i64} loc(#loc24)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G>> loc(#loc25)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G>>, !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G> loc(#loc24)
    cir.scope {
      %2 = cir.get_member %1[0] {name = "data"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G> -> !cir.ptr<!s64i> loc(#loc10)
      %3 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc28)
      %4 = cir.call @imaxabs(%3) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc29)
      %5 = cir.cast(int_to_float, %4 : !s64i), !cir.long_double<!cir.f80> loc(#loc29)
      %6 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc30)
      %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc31)
      %8 = cir.cast(int_to_float, %7 : !s64i), !cir.long_double<!cir.f80> loc(#loc31)
      %9 = cir.call @sqrtl(%8) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc30)
      %10 = cir.cmp(le, %5, %9) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc52)
      cir.if %10 {
        %11 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc54)
        %12 = cir.get_member %1[0] {name = "data"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G> -> !cir.ptr<!s64i> loc(#loc10)
        %13 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc38)
        %14 = cir.get_member %1[0] {name = "data"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G> -> !cir.ptr<!s64i> loc(#loc10)
        %15 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc37)
        %16 = cir.binop(mul, %13, %15) nsw : !s64i loc(#loc38)
        cir.store %16, %11 : !s64i, !cir.ptr<!s64i> loc(#loc54)
        %17 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc39)
        cir.call @printLongLongLine(%17) : (!s64i) -> () loc(#loc40)
      } else {
        %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc21)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc21)
        cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc41)
      } loc(#loc53)
    } loc(#loc51)
    cir.return loc(#loc23)
  } loc(#loc50)
  cir.func  @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_8355CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2GD1Ev(!cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_833A3ACWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G>) alias(@_ZN47CWE190_Integer_Overflow__int64_t_rand_square_8355CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2GD2Ev) loc(#loc50)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":27:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":32:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":28:1)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":29:12)
#loc10 = loc("./CWE190_Integer_Overflow__int64_t_rand_square_83.h":56:13)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":29:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":31:21)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":31:5)
#loc14 = loc("/usr/include/inttypes.h":351:1)
#loc15 = loc("/usr/include/inttypes.h":351:74)
#loc16 = loc("/usr/include/bits/mathcalls.h":143:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":44:19)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":34:1)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":46:1)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":35:1)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":37:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":45:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":37:27)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":37:9)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":37:36)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":37:42)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":37:51)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":38:5)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":41:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":43:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":39:9)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":39:33)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":39:26)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":40:27)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":40:9)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_square_83_goodB2G.cpp":44:9)
#loc42 = loc(fused[#loc1, #loc2])
#loc43 = loc(fused[#loc3, #loc4])
#loc45 = loc(fused[#loc11, #loc9])
#loc46 = loc(fused[#loc13, #loc12])
#loc47 = loc(fused[#loc14, #loc15])
#loc48 = loc(fused[#loc17, #loc18])
#loc49 = loc(fused[#loc19, #loc20])
#loc50 = loc(fused[#loc22, #loc23])
#loc51 = loc(fused[#loc26, #loc27])
#loc52 = loc(fused[#loc29, #loc32])
#loc53 = loc(fused[#loc33, #loc34, #loc35, #loc27])
#loc54 = loc(fused[#loc36, #loc37])
