!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int_rand_predec_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc84)
  cir.func private  @printIntLine(!s32i) loc(#loc85)
  cir.func no_proto  @CWE191_Integer_Underflow__int_rand_predec_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc87)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc88)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    cir.goto "source" loc(#loc90)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc15)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc16)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc16)
    %7 = cir.ternary(%6, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc16)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc16)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc16)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc16)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc16)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc16)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc16)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc16)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc16)
      cir.yield %24 : !u32i loc(#loc16)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc16)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc16)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc16)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc16)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc16)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc16)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc16)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc16)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc16)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc16)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc16)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc16)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc16)
      cir.yield %28 : !u32i loc(#loc16)
    }) : (!cir.bool) -> !u32i loc(#loc16)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc16)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    cir.goto "sink" loc(#loc92)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc20)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    %10 = cir.unary(dec, %9) : !s32i, !s32i loc(#loc21)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc24)
    cir.return loc(#loc6)
  } loc(#loc86)
  cir.func no_proto  @CWE191_Integer_Underflow__int_rand_predec_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc95)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc96)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc94)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc97)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc33)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc99)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc38)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    cir.goto "source" loc(#loc101)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc42)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc43)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc43)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc43)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc43)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc43)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc43)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc43)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc43)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc43)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc43)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc43)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc43)
      cir.yield %19 : !u32i loc(#loc43)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc43)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc43)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc43)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc43)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc43)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc43)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc43)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc43)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc43)
      %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc43)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc43)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc43)
      %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc43)
      cir.yield %23 : !u32i loc(#loc43)
    }) : (!cir.bool) -> !u32i loc(#loc43)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc43)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    cir.goto "sink" loc(#loc103)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc47)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
      %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc51)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc51)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc51)
      %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc51)
      %13 = cir.cmp(gt, %8, %12) : !s32i, !s32i loc(#loc105)
      %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc52)
      cir.if %14 {
        %15 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc107)
        %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc58)
        %17 = cir.unary(dec, %16) : !s32i, !s32i loc(#loc58)
        cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
        %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc57)
        cir.store %18, %15 : !s32i, !cir.ptr<!s32i> loc(#loc107)
        %19 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc60)
        cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc61)
      } else {
        %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc33)
        %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc33)
        cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc62)
      } loc(#loc106)
    } loc(#loc104)
    cir.return loc(#loc35)
  } loc(#loc98)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc110)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc111)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    cir.goto "source" loc(#loc113)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc73)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc74)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc75)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    cir.goto "sink" loc(#loc115)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc79)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    %6 = cir.unary(dec, %5) : !s32i, !s32i loc(#loc80)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc68)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc83)
    cir.return loc(#loc64)
  } loc(#loc109)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int_rand_predec_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":39:1)
#loc7 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":24:9)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":36:9)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":36:22)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":26:12)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":26:5)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":27:5)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":27:10)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":28:1)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":30:12)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":30:5)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":31:5)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":31:10)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":32:1)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":35:9)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":35:11)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":37:22)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":37:9)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":90:1)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":94:1)
#loc27 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":92:5)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":92:13)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":93:5)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":93:13)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":66:19)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":46:1)
#loc35 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":68:1)
#loc36 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":48:5)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":48:9)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":50:12)
#loc39 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":50:5)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":51:5)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":51:10)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":52:1)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":54:12)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":54:5)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":55:5)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":55:10)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":56:1)
#loc48 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":58:5)
#loc49 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":67:5)
#loc50 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":58:9)
#loc51 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":58:16)
#loc52 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":58:14)
#loc53 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":59:5)
#loc54 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":63:5)
#loc55 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":65:5)
#loc56 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":61:9)
#loc57 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":61:22)
#loc58 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":60:9)
#loc59 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":60:11)
#loc60 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":62:22)
#loc61 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":62:9)
#loc62 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":66:9)
#loc63 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":71:1)
#loc64 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":88:1)
#loc65 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":73:5)
#loc66 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":73:9)
#loc67 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":85:9)
#loc68 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":85:22)
#loc69 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":75:12)
#loc70 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":75:5)
#loc71 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":76:5)
#loc72 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":76:10)
#loc73 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":77:1)
#loc74 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":79:13)
#loc75 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":79:12)
#loc76 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":79:5)
#loc77 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":80:5)
#loc78 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":80:10)
#loc79 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":81:1)
#loc80 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":84:9)
#loc81 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":84:11)
#loc82 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":86:22)
#loc83 = loc("CWE191_Integer_Underflow__int_rand_predec_18.c":86:9)
#loc84 = loc(fused[#loc1, #loc2])
#loc85 = loc(fused[#loc3, #loc4])
#loc86 = loc(fused[#loc5, #loc6])
#loc87 = loc(fused[#loc7, #loc8])
#loc88 = loc(fused[#loc9, #loc10])
#loc89 = loc(fused[#loc12, #loc11])
#loc90 = loc(fused[#loc13, #loc14])
#loc91 = loc(fused[#loc17, #loc16])
#loc92 = loc(fused[#loc18, #loc19])
#loc93 = loc(fused[#loc21, #loc22])
#loc94 = loc(fused[#loc25, #loc26])
#loc95 = loc(fused[#loc27, #loc28])
#loc96 = loc(fused[#loc29, #loc30])
#loc97 = loc(fused[#loc31, #loc32])
#loc98 = loc(fused[#loc34, #loc35])
#loc99 = loc(fused[#loc36, #loc37])
#loc100 = loc(fused[#loc39, #loc38])
#loc101 = loc(fused[#loc40, #loc41])
#loc102 = loc(fused[#loc44, #loc43])
#loc103 = loc(fused[#loc45, #loc46])
#loc104 = loc(fused[#loc48, #loc49])
#loc105 = loc(fused[#loc50, #loc51])
#loc106 = loc(fused[#loc53, #loc54, #loc55, #loc49])
#loc107 = loc(fused[#loc56, #loc57])
#loc108 = loc(fused[#loc58, #loc59])
#loc109 = loc(fused[#loc63, #loc64])
#loc110 = loc(fused[#loc65, #loc66])
#loc111 = loc(fused[#loc67, #loc68])
#loc112 = loc(fused[#loc70, #loc69])
#loc113 = loc(fused[#loc71, #loc72])
#loc114 = loc(fused[#loc76, #loc74])
#loc115 = loc(fused[#loc77, #loc78])
#loc116 = loc(fused[#loc80, #loc81])
