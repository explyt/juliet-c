!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc1)
  cir.func private @printDoubleLine(!cir.double) loc(#loc59)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc61)
    cir.br ^bb1 loc(#loc62)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc62)
  ^bb2:  // pred: ^bb1
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc10)
    cir.brcond %2 ^bb3, ^bb6 loc(#loc10)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc63)
  ^bb4:  // pred: ^bb3
    %3 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc13)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc15)
    %6 = cir.cast(int_to_float, %5 : !s32i), !cir.double loc(#loc15)
    %7 = cir.call @sqrt(%6) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc13)
    cir.store %7, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc64)
    %8 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc18)
    cir.call @printDoubleLine(%8) : (!cir.double) -> () loc(#loc19)
    cir.br ^bb5 loc(#loc12)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc20)
  ^bb6:  // 2 preds: ^bb2, ^bb5
    cir.br ^bb7 loc(#loc9)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc5)
  } loc(#loc60)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc66)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc23)
    cir.return loc(#loc22)
  } loc(#loc65)
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc67)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc29)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc69)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc71)
    cir.br ^bb1 loc(#loc72)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc72)
  ^bb2:  // pred: ^bb1
    %1 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc38)
    cir.brcond %2 ^bb3, ^bb10 loc(#loc38)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc73)
  ^bb4:  // pred: ^bb3
    %3 = cir.const #cir.int<0> : !s32i loc(#loc41)
    %4 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc42)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc74)
    %5 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc43)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc44)
    %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc45)
    %8 = cir.cast(int_to_float, %7 : !s32i), !cir.double loc(#loc45)
    %9 = cir.call @sqrt(%8) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc43)
    cir.store %9, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc75)
    cir.br ^bb5 loc(#loc76)
  ^bb5:  // pred: ^bb4
    %10 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc50)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    %12 = cir.const #cir.int<33> : !s32i loc(#loc51)
    %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc77)
    cir.brcond %13 ^bb6, ^bb7 loc(#loc78)
  ^bb6:  // pred: ^bb5
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc29)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc54)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc55)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc54)
    cir.br ^bb7 loc(#loc49)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc49)
  ^bb8:  // pred: ^bb7
    %18 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc56)
    cir.call @printDoubleLine(%18) : (!cir.double) -> () loc(#loc57)
    cir.br ^bb9 loc(#loc40)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc58)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc37)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc33)
  } loc(#loc70)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_16.c":0:0)
#loc1 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc4 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":24:1)
#loc5 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":36:1)
#loc6 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":29:13)
#loc7 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":29:20)
#loc8 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":26:5)
#loc9 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":35:5)
#loc10 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":26:11)
#loc11 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":28:9)
#loc12 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":33:9)
#loc13 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":30:36)
#loc14 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":30:50)
#loc15 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":30:49)
#loc16 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":30:13)
#loc17 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":30:51)
#loc18 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":32:29)
#loc19 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":32:13)
#loc20 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":34:9)
#loc21 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":63:1)
#loc22 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":66:1)
#loc23 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":65:5)
#loc24 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":65:11)
#loc25 = loc("/usr/include/errno.h":37:1)
#loc26 = loc("/usr/include/errno.h":37:45)
#loc27 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc28 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc29 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":54:27)
#loc30 = loc("/usr/include/stdlib.h":756:1)
#loc31 = loc("/usr/include/stdlib.h":756:70)
#loc32 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":43:1)
#loc33 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":61:1)
#loc34 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":48:13)
#loc35 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":48:20)
#loc36 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":45:5)
#loc37 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":60:5)
#loc38 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":45:11)
#loc39 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":47:9)
#loc40 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":58:9)
#loc41 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":49:21)
#loc42 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":49:13)
#loc43 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":50:36)
#loc44 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":50:50)
#loc45 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":50:49)
#loc46 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":50:13)
#loc47 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":50:51)
#loc48 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":52:13)
#loc49 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":56:13)
#loc50 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":52:17)
#loc51 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":52:26)
#loc52 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":53:13)
#loc53 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":54:17)
#loc54 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":55:17)
#loc55 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":55:22)
#loc56 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":57:29)
#loc57 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":57:13)
#loc58 = loc("CWE391_Unchecked_Error_Condition__sqrt_16.c":59:9)
#loc59 = loc(fused[#loc2, #loc3])
#loc60 = loc(fused[#loc4, #loc5])
#loc61 = loc(fused[#loc6, #loc7])
#loc62 = loc(fused[#loc8, #loc9])
#loc63 = loc(fused[#loc11, #loc12])
#loc64 = loc(fused[#loc16, #loc17])
#loc65 = loc(fused[#loc21, #loc22])
#loc66 = loc(fused[#loc23, #loc24])
#loc67 = loc(fused[#loc25, #loc26])
#loc68 = loc(fused[#loc27, #loc28])
#loc69 = loc(fused[#loc30, #loc31])
#loc70 = loc(fused[#loc32, #loc33])
#loc71 = loc(fused[#loc34, #loc35])
#loc72 = loc(fused[#loc36, #loc37])
#loc73 = loc(fused[#loc39, #loc40])
#loc74 = loc(fused[#loc42, #loc41])
#loc75 = loc(fused[#loc46, #loc47])
#loc76 = loc(fused[#loc48, #loc49])
#loc77 = loc(fused[#loc50, #loc51])
#loc78 = loc(fused[#loc52, #loc49])
