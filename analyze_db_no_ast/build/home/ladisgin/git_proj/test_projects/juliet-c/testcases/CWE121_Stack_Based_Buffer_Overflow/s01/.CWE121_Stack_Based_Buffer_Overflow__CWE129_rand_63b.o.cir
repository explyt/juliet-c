!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":22:66)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":22:72)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":51:70)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":51:76)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":76:70)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":76:76)
#true = #cir.bool<true> : !cir.bool
#loc133 = loc(fused[#loc8, #loc9])
#loc148 = loc(fused[#loc47, #loc48])
#loc163 = loc(fused[#loc88, #loc89])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc130)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc131)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func  @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b_badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc8, #loc9])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc133)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc134)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc12)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc11)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc136)
      %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc137)
      %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc137)
      cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc137)
      cir.scope {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc22)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc23)
        %9 = cir.cmp(ge, %7, %8) : !s32i, !s32i loc(#loc139)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc24)
        cir.if %10 {
          %11 = cir.const #cir.int<1> : !s32i loc(#loc28)
          %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
          %13 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc30)
          %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc30)
          cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc141)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc33)
            cir.store %15, %4 : !s32i, !cir.ptr<!s32i> loc(#loc143)
            cir.for : cond {
              %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc35)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc36)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc144)
              %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc37)
              cir.condition(%19) loc(#loc37)
            } body {
              cir.scope {
                %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc39)
                %17 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc40)
                %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc40)
                %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc40)
                cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc41)
              } loc(#loc145)
              cir.yield loc(#loc32)
            } step {
              %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc42)
              %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc43)
              cir.store %17, %4 : !s32i, !cir.ptr<!s32i> loc(#loc146)
              cir.yield loc(#loc142)
            } loc(#loc142)
          } loc(#loc142)
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc44)
        } loc(#loc140)
      } loc(#loc138)
    } loc(#loc135)
    cir.return loc(#loc7)
  } loc(#loc132)
  cir.func  @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b_goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc47, #loc48])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc148)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc149)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc51)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc151)
      %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc152)
      %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc152)
      cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc152)
      cir.scope {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc61)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc62)
        %9 = cir.cmp(ge, %7, %8) : !s32i, !s32i loc(#loc154)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc63)
        cir.if %10 {
          %11 = cir.const #cir.int<1> : !s32i loc(#loc67)
          %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc68)
          %13 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc69)
          %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc69)
          cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc156)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc72)
            cir.store %15, %4 : !s32i, !cir.ptr<!s32i> loc(#loc158)
            cir.for : cond {
              %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc74)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc75)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc159)
              %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc76)
              cir.condition(%19) loc(#loc76)
            } body {
              cir.scope {
                %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc78)
                %17 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc79)
                %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc79)
                %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc79)
                cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc80)
              } loc(#loc160)
              cir.yield loc(#loc71)
            } step {
              %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc81)
              %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc82)
              cir.store %17, %4 : !s32i, !cir.ptr<!s32i> loc(#loc161)
              cir.yield loc(#loc157)
            } loc(#loc157)
          } loc(#loc157)
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc83)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc83)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc84)
        } loc(#loc155)
      } loc(#loc153)
    } loc(#loc150)
    cir.return loc(#loc46)
  } loc(#loc147)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc85)
  cir.func  @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b_goodB2GSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc88, #loc89])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc163)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc164)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc92)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc166)
      %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc167)
      %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc167)
      cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc167)
      cir.scope {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc102)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc103)
        %9 = cir.cmp(ge, %7, %8) : !s32i, !s32i loc(#loc169)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc104)
        %11 = cir.ternary(%10, true {
          %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc106)
          %13 = cir.const #cir.int<10> : !s32i loc(#loc107)
          %14 = cir.cmp(lt, %12, %13) : !s32i, !s32i loc(#loc170)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc109)
          %16 = cir.ternary(%15, true {
            %17 = cir.const #true loc(#loc105)
            cir.yield %17 : !cir.bool loc(#loc105)
          }, false {
            %17 = cir.const #false loc(#loc105)
            cir.yield %17 : !cir.bool loc(#loc105)
          }) : (!cir.bool) -> !cir.bool loc(#loc105)
          cir.yield %16 : !cir.bool loc(#loc105)
        }, false {
          %12 = cir.const #false loc(#loc105)
          cir.yield %12 : !cir.bool loc(#loc105)
        }) : (!cir.bool) -> !cir.bool loc(#loc105)
        cir.if %11 {
          %12 = cir.const #cir.int<1> : !s32i loc(#loc113)
          %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc114)
          %14 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc115)
          %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc115)
          cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc172)
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc118)
            cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc174)
            cir.for : cond {
              %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc120)
              %18 = cir.const #cir.int<10> : !s32i loc(#loc121)
              %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc175)
              %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc122)
              cir.condition(%20) loc(#loc122)
            } body {
              cir.scope {
                %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc124)
                %18 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc125)
                %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc125)
                %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc125)
                cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc126)
              } loc(#loc176)
              cir.yield loc(#loc117)
            } step {
              %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc127)
              %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc128)
              cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc177)
              cir.yield loc(#loc173)
            } loc(#loc173)
          } loc(#loc173)
        } else {
          %12 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc85)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc85)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc129)
        } loc(#loc171)
      } loc(#loc168)
    } loc(#loc165)
    cir.return loc(#loc87)
  } loc(#loc162)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":41:23)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":22:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":44:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":24:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":24:17)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":23:1)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":24:16)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":25:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":43:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":26:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":26:13)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":27:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":27:30)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":30:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":42:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":30:13)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":30:21)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":30:18)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":31:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":38:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":40:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":32:28)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":32:20)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":32:13)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":34:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":37:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":34:21)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":34:17)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":34:24)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":34:28)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":34:26)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":35:13)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":36:37)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":36:30)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":36:17)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":34:33)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":34:32)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":41:13)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":51:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":73:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":53:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":53:17)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":52:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":53:16)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":54:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":72:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":55:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":55:13)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":56:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":56:30)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":59:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":71:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":59:13)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":59:21)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":59:18)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":60:9)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":67:9)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":69:9)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":61:28)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":61:20)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":61:13)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":63:13)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":66:13)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":63:21)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":63:17)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":63:24)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":63:28)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":63:26)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":64:13)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":65:37)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":65:30)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":65:17)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":63:33)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":63:32)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":70:23)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":70:13)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":94:23)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":76:1)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":97:1)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":78:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":78:17)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":77:1)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":78:16)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":79:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":96:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":80:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":80:13)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":81:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":81:30)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":83:9)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":95:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":83:13)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":83:21)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":83:18)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":83:23)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":83:26)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":83:34)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":83:36)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":83:31)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":84:9)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":91:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":93:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":85:28)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":85:20)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":85:13)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":87:13)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":90:13)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":87:21)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":87:17)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":87:24)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":87:28)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":87:26)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":88:13)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":89:37)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":89:30)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":89:17)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":87:33)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":87:32)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c":94:13)
#loc130 = loc(fused[#loc1, #loc2])
#loc131 = loc(fused[#loc3, #loc4])
#loc132 = loc(fused[#loc6, #loc7])
#loc134 = loc(fused[#loc10, #loc11])
#loc135 = loc(fused[#loc14, #loc15])
#loc136 = loc(fused[#loc16, #loc17])
#loc137 = loc(fused[#loc18, #loc19])
#loc138 = loc(fused[#loc20, #loc21])
#loc139 = loc(fused[#loc22, #loc23])
#loc140 = loc(fused[#loc25, #loc26, #loc27, #loc21])
#loc141 = loc(fused[#loc30, #loc28])
#loc142 = loc(fused[#loc31, #loc32])
#loc143 = loc(fused[#loc34, #loc33])
#loc144 = loc(fused[#loc35, #loc36])
#loc145 = loc(fused[#loc38, #loc32])
#loc146 = loc(fused[#loc43, #loc42])
#loc147 = loc(fused[#loc45, #loc46])
#loc149 = loc(fused[#loc49, #loc50])
#loc150 = loc(fused[#loc53, #loc54])
#loc151 = loc(fused[#loc55, #loc56])
#loc152 = loc(fused[#loc57, #loc58])
#loc153 = loc(fused[#loc59, #loc60])
#loc154 = loc(fused[#loc61, #loc62])
#loc155 = loc(fused[#loc64, #loc65, #loc66, #loc60])
#loc156 = loc(fused[#loc69, #loc67])
#loc157 = loc(fused[#loc70, #loc71])
#loc158 = loc(fused[#loc73, #loc72])
#loc159 = loc(fused[#loc74, #loc75])
#loc160 = loc(fused[#loc77, #loc71])
#loc161 = loc(fused[#loc82, #loc81])
#loc162 = loc(fused[#loc86, #loc87])
#loc164 = loc(fused[#loc90, #loc91])
#loc165 = loc(fused[#loc94, #loc95])
#loc166 = loc(fused[#loc96, #loc97])
#loc167 = loc(fused[#loc98, #loc99])
#loc168 = loc(fused[#loc100, #loc101])
#loc169 = loc(fused[#loc102, #loc103])
#loc170 = loc(fused[#loc106, #loc108])
#loc171 = loc(fused[#loc110, #loc111, #loc112, #loc101])
#loc172 = loc(fused[#loc115, #loc113])
#loc173 = loc(fused[#loc116, #loc117])
#loc174 = loc(fused[#loc119, #loc118])
#loc175 = loc(fused[#loc120, #loc121])
#loc176 = loc(fused[#loc123, #loc117])
#loc177 = loc(fused[#loc128, #loc127])
