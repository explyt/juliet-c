!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":24:16)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":24:27)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":36:20)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":36:31)
#loc46 = loc(fused[#loc7, #loc8])
#loc55 = loc(fused[#loc26, #loc27])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc43)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc44)
  cir.func @_ZN62CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_629badSourceERPl(%arg0: !cir.ptr<!cir.ptr<!s64i>> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc46)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc9)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc10)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc11)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc47)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc48)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc10)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc49)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc15)
    cir.store %7, %8 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc50)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc18)
      %10 = cir.load %9 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc18)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc19)
      %12 = cir.cmp(eq, %10, %11) : !cir.ptr<!s64i>, !cir.bool loc(#loc52)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc21)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc23)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc21)
      } loc(#loc53)
    } loc(#loc51)
    cir.return loc(#loc6)
  } loc(#loc45)
  cir.func @_ZN62CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_6213goodG2BSourceERPl(%arg0: !cir.ptr<!cir.ptr<!s64i>> loc(fused[#loc26, #loc27])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc55)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc28)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc29)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc30)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc30)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc56)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc57)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc29)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc58)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc34)
    cir.store %7, %8 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc59)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc37)
      %10 = cir.load %9 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc37)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc38)
      %12 = cir.cmp(eq, %10, %11) : !cir.ptr<!s64i>, !cir.bool loc(#loc61)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc40)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc41)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc42)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc40)
      } loc(#loc62)
    } loc(#loc60)
    cir.return loc(#loc25)
  } loc(#loc54)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":24:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":29:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":25:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":27:23)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":27:30)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":27:33)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":27:47)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":27:48)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":27:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":28:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":28:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":28:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":28:17)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":28:23)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":28:24)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":28:30)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":28:29)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":36:1)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":41:1)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":37:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":39:23)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":39:30)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":39:34)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":39:48)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":39:49)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":39:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":40:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":40:33)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":40:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":40:17)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":40:23)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":40:24)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":40:30)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_62b.cpp":40:29)
#loc43 = loc(fused[#loc1, #loc2])
#loc44 = loc(fused[#loc3, #loc4])
#loc45 = loc(fused[#loc5, #loc6])
#loc47 = loc(fused[#loc12, #loc13])
#loc48 = loc(fused[#loc11, #loc13])
#loc49 = loc(fused[#loc10, #loc14])
#loc50 = loc(fused[#loc15, #loc14])
#loc51 = loc(fused[#loc16, #loc17])
#loc52 = loc(fused[#loc18, #loc19])
#loc53 = loc(fused[#loc20, #loc17])
#loc54 = loc(fused[#loc24, #loc25])
#loc56 = loc(fused[#loc31, #loc32])
#loc57 = loc(fused[#loc30, #loc32])
#loc58 = loc(fused[#loc29, #loc33])
#loc59 = loc(fused[#loc34, #loc33])
#loc60 = loc(fused[#loc35, #loc36])
#loc61 = loc(fused[#loc37, #loc38])
#loc62 = loc(fused[#loc39, #loc36])
