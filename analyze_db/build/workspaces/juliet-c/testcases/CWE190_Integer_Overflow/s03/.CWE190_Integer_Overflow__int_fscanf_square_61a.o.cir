!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":70:24)
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_61a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @CWE190_Integer_Overflow__int_fscanf_square_61b_badSource(!s32i) -> !s32i loc(#loc82)
  cir.func private @printIntLine(!s32i) loc(#loc83)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_61_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc85)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc86)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    %4 = cir.call @CWE190_Integer_Overflow__int_fscanf_square_61b_badSource(%3) : (!s32i) -> !s32i loc(#loc14)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    cir.br ^bb1 loc(#loc89)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc19)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc21)
    cir.br ^bb2 loc(#loc18)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc6)
  } loc(#loc84)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_61_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc91)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc24)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc92)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    cir.return loc(#loc23)
  } loc(#loc90)
  cir.func private @CWE190_Integer_Overflow__int_fscanf_square_61b_goodG2BSource(!s32i) -> !s32i loc(#loc93)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc95)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc96)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc36)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    %4 = cir.call @CWE190_Integer_Overflow__int_fscanf_square_61b_goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc39)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    cir.br ^bb1 loc(#loc99)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc44)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc46)
    cir.br ^bb2 loc(#loc43)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc31)
  } loc(#loc94)
  cir.func private @CWE190_Integer_Overflow__int_fscanf_square_61b_goodB2GSource(!s32i) -> !s32i loc(#loc100)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc49)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc52)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc103)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc104)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc59)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %4 = cir.call @CWE190_Integer_Overflow__int_fscanf_square_61b_goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc62)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.br ^bb1 loc(#loc107)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc68)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc68)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc68)
    %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc68)
    %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc108)
    cir.brcond %10 ^bb2, ^bb7 loc(#loc69)
  ^bb2:  // pred: ^bb1
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    %12 = cir.abs %11 poison : !s32i loc(#loc71)
    %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc71)
    %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc72)
    %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc73)
    %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc73)
    %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc72)
    %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc72)
    %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc109)
    cir.brcond %19 ^bb3, ^bb4 loc(#loc69)
  ^bb3:  // pred: ^bb2
    %20 = cir.const #true loc(#loc69)
    cir.br ^bb5(%20 : !cir.bool) loc(#loc69)
  ^bb4:  // pred: ^bb2
    %21 = cir.const #false loc(#loc69)
    cir.br ^bb5(%21 : !cir.bool) loc(#loc69)
  ^bb5(%22: !cir.bool loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":70:24)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc69)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8(%22 : !cir.bool) loc(#loc69)
  ^bb7:  // pred: ^bb1
    %23 = cir.const #false loc(#loc69)
    cir.br ^bb8(%23 : !cir.bool) loc(#loc69)
  ^bb8(%24: !cir.bool loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":70:24)):  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc69)
  ^bb9:  // pred: ^bb8
    cir.brcond %24 ^bb10, ^bb11 loc(#loc110)
  ^bb10:  // pred: ^bb9
    %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    %26 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    %27 = cir.binop(mul, %25, %26) nsw : !s32i loc(#loc78)
    cir.store %27, %0 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    %28 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
    cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc80)
    cir.br ^bb12 loc(#loc76)
  ^bb11:  // pred: ^bb9
    %29 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc52)
    %30 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    cir.br ^bb12 loc(#loc66)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc66)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc54)
  } loc(#loc102)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_61a.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":25:1)
#loc2 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":25:70)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":27:1)
#loc6 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":38:1)
#loc7 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":35:9)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":35:29)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":29:5)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":29:9)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":31:12)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":31:5)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":32:69)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":32:12)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":32:5)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":32:73)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":33:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":37:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":35:22)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":36:22)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":36:9)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":81:1)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":85:1)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":83:5)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":83:13)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":84:5)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":84:13)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":45:1)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":45:74)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":47:1)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":58:1)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":55:9)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":55:29)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":49:5)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":49:9)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":51:12)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":51:5)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":52:73)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":52:12)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":52:5)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":52:77)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":53:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":57:5)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":55:22)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":56:22)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":56:9)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":61:1)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":61:74)
#loc49 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":77:19)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":63:1)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":79:1)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":72:9)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":72:29)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":65:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":65:9)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":67:12)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":67:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":68:73)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":68:12)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":68:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":68:77)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":70:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":78:5)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":70:9)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":70:16)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":70:31)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":70:27)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":70:45)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":70:58)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":70:65)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":71:5)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":74:5)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":76:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":72:22)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":73:22)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":73:9)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_square_61a.c":77:9)
#loc82 = loc(fused[#loc1, #loc2])
#loc83 = loc(fused[#loc3, #loc4])
#loc84 = loc(fused[#loc5, #loc6])
#loc85 = loc(fused[#loc7, #loc8])
#loc86 = loc(fused[#loc9, #loc10])
#loc87 = loc(fused[#loc12, #loc11])
#loc88 = loc(fused[#loc15, #loc16])
#loc89 = loc(fused[#loc17, #loc18])
#loc90 = loc(fused[#loc22, #loc23])
#loc91 = loc(fused[#loc24, #loc25])
#loc92 = loc(fused[#loc26, #loc27])
#loc93 = loc(fused[#loc28, #loc29])
#loc94 = loc(fused[#loc30, #loc31])
#loc95 = loc(fused[#loc32, #loc33])
#loc96 = loc(fused[#loc34, #loc35])
#loc97 = loc(fused[#loc37, #loc36])
#loc98 = loc(fused[#loc40, #loc41])
#loc99 = loc(fused[#loc42, #loc43])
#loc100 = loc(fused[#loc47, #loc48])
#loc101 = loc(fused[#loc50, #loc51])
#loc102 = loc(fused[#loc53, #loc54])
#loc103 = loc(fused[#loc55, #loc56])
#loc104 = loc(fused[#loc57, #loc58])
#loc105 = loc(fused[#loc60, #loc59])
#loc106 = loc(fused[#loc63, #loc64])
#loc107 = loc(fused[#loc65, #loc66])
#loc108 = loc(fused[#loc67, #loc68])
#loc109 = loc(fused[#loc71, #loc74])
#loc110 = loc(fused[#loc75, #loc76, #loc77, #loc66])
