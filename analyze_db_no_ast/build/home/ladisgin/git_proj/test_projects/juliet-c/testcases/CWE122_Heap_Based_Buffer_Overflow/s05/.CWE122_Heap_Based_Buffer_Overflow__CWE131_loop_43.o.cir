!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":24:23)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":24:30)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":54:27)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":54:34)
#loc117 = loc(fused[#loc7, #loc8])
#loc137 = loc(fused[#loc61, #loc62])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc114)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc115)
  cir.func internal private  @_ZN49CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43L9badSourceERPi(%arg0: !cir.ptr<!cir.ptr<!s32i>> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc117)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc9)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc10)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc11)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc10)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc118)
    %6 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc13)
    cir.store %5, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc119)
    cir.scope {
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc16)
      %8 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc16)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc17)
      %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s32i>, !cir.bool loc(#loc121)
      cir.if %10 {
        %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc19)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc21)
        cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc19)
      } loc(#loc122)
    } loc(#loc120)
    cir.return loc(#loc6)
  } loc(#loc116)
  cir.func private  @printIntLine(!s32i) loc(#loc123)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc124)
  cir.func  @_ZN49CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_433badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc126)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc30)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc127)
    cir.call @_ZN49CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43L9badSourceERPi(%0) : (!cir.ptr<!cir.ptr<!s32i>>) -> () loc(#loc32)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc129)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc130)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc129)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc129)
      cir.scope {
        %12 = cir.const #cir.int<0> : !s32i loc(#loc41)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc41)
        cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc132)
        cir.for : cond {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc43)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc44)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc44)
          %17 = cir.cmp(lt, %14, %16) : !u64i, !cir.bool loc(#loc133)
          cir.condition(%17) loc(#loc133)
        } body {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc45)
          %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc46)
          %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !u64i), !cir.ptr<!s32i> loc(#loc46)
          %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc46)
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
          %19 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc48)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc49)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc134)
          cir.yield loc(#loc40)
        } step {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc51)
          %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc52)
          cir.store %15, %3 : !u64i, !cir.ptr<!u64i> loc(#loc135)
          cir.yield loc(#loc131)
        } loc(#loc131)
      } loc(#loc131)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc54)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc55)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc53)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc56)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc57)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc58)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc57)
    } loc(#loc128)
    cir.return loc(#loc27)
  } loc(#loc125)
  cir.func internal private  @_ZN49CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43L13goodG2BSourceERPi(%arg0: !cir.ptr<!cir.ptr<!s32i>> loc(fused[#loc61, #loc62])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc137)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc63)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc64)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc65)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc65)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc138)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc139)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc64)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc140)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc69)
    cir.store %7, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc141)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc72)
      %10 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc72)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc73)
      %12 = cir.cmp(eq, %10, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc143)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc75)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc76)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc77)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc75)
      } loc(#loc144)
    } loc(#loc142)
    cir.return loc(#loc60)
  } loc(#loc136)
  cir.func internal private  @_ZN49CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc146)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc82)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc147)
    cir.call @_ZN49CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43L13goodG2BSourceERPi(%0) : (!cir.ptr<!cir.ptr<!s32i>>) -> () loc(#loc84)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc149)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc150)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc149)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc149)
      cir.scope {
        %12 = cir.const #cir.int<0> : !s32i loc(#loc93)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc93)
        cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc152)
        cir.for : cond {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc95)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc96)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc96)
          %17 = cir.cmp(lt, %14, %16) : !u64i, !cir.bool loc(#loc153)
          cir.condition(%17) loc(#loc153)
        } body {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc97)
          %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc98)
          %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !u64i), !cir.ptr<!s32i> loc(#loc98)
          %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc98)
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc99)
          %19 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc100)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc101)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc154)
          cir.yield loc(#loc92)
        } step {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc103)
          %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc104)
          cir.store %15, %3 : !u64i, !cir.ptr<!u64i> loc(#loc155)
          cir.yield loc(#loc151)
        } loc(#loc151)
      } loc(#loc151)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc105)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc106)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc107)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc105)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc108)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc109)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc110)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc110)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc109)
    } loc(#loc148)
    cir.return loc(#loc79)
  } loc(#loc145)
  cir.func  @_ZN49CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_434goodEv() extra(#fn_attr1) {
    cir.call @_ZN49CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43L7goodG2BEv() : () -> () loc(#loc113)
    cir.return loc(#loc112)
  } loc(#loc156)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":24:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":29:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":25:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":27:19)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":27:26)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":27:28)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":27:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":28:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":28:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":28:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":28:17)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":28:23)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":28:24)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":28:30)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":28:29)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc24 = loc("/usr/include/stdlib.h":687:1)
#loc25 = loc("/usr/include/stdlib.h":687:32)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":31:1)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":47:1)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":33:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":33:11)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":34:12)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":34:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":35:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":36:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":46:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":37:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":37:28)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":38:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":38:16)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":40:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":43:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":40:18)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":40:14)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":40:21)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":40:25)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":42:30)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":42:23)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":42:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":42:18)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":42:19)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":42:31)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":40:30)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":40:29)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":44:22)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":44:27)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":44:28)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":44:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":45:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":45:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":54:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":59:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":55:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":57:19)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":57:26)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":57:29)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":57:39)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":57:40)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":57:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":58:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":58:33)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":58:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":58:17)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":58:23)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":58:24)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":58:30)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":58:29)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":61:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":77:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":63:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":63:11)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":64:12)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":64:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":65:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":66:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":76:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":67:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":67:28)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":68:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":68:16)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":70:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":73:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":70:18)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":70:14)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":70:21)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":70:25)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":72:30)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":72:23)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":72:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":72:18)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":72:19)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":72:31)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":70:30)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":70:29)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":74:22)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":74:27)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":74:28)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":74:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":75:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":75:14)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":79:1)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":82:1)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_43.cpp":81:5)
#loc114 = loc(fused[#loc1, #loc2])
#loc115 = loc(fused[#loc3, #loc4])
#loc116 = loc(fused[#loc5, #loc6])
#loc118 = loc(fused[#loc10, #loc12])
#loc119 = loc(fused[#loc13, #loc12])
#loc120 = loc(fused[#loc14, #loc15])
#loc121 = loc(fused[#loc16, #loc17])
#loc122 = loc(fused[#loc18, #loc15])
#loc123 = loc(fused[#loc22, #loc23])
#loc124 = loc(fused[#loc24, #loc25])
#loc125 = loc(fused[#loc26, #loc27])
#loc126 = loc(fused[#loc28, #loc29])
#loc127 = loc(fused[#loc31, #loc30])
#loc128 = loc(fused[#loc33, #loc34])
#loc129 = loc(fused[#loc35, #loc36])
#loc130 = loc(fused[#loc37, #loc38])
#loc131 = loc(fused[#loc39, #loc40])
#loc132 = loc(fused[#loc42, #loc41])
#loc133 = loc(fused[#loc43, #loc44])
#loc134 = loc(fused[#loc47, #loc50])
#loc135 = loc(fused[#loc52, #loc51])
#loc136 = loc(fused[#loc59, #loc60])
#loc138 = loc(fused[#loc66, #loc67])
#loc139 = loc(fused[#loc65, #loc67])
#loc140 = loc(fused[#loc64, #loc68])
#loc141 = loc(fused[#loc69, #loc68])
#loc142 = loc(fused[#loc70, #loc71])
#loc143 = loc(fused[#loc72, #loc73])
#loc144 = loc(fused[#loc74, #loc71])
#loc145 = loc(fused[#loc78, #loc79])
#loc146 = loc(fused[#loc80, #loc81])
#loc147 = loc(fused[#loc83, #loc82])
#loc148 = loc(fused[#loc85, #loc86])
#loc149 = loc(fused[#loc87, #loc88])
#loc150 = loc(fused[#loc89, #loc90])
#loc151 = loc(fused[#loc91, #loc92])
#loc152 = loc(fused[#loc94, #loc93])
#loc153 = loc(fused[#loc95, #loc96])
#loc154 = loc(fused[#loc99, #loc102])
#loc155 = loc(fused[#loc104, #loc103])
#loc156 = loc(fused[#loc111, #loc112])
