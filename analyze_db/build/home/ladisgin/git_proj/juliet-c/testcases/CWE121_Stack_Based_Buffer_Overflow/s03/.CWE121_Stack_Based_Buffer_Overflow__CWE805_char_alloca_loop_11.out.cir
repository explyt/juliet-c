!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":129:10)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":129:14)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":129:20)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":129:32)
#loc248 = loc(fused[#loc79, #loc80])
#loc249 = loc(fused[#loc81, #loc82])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc219)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc220)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc222)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc223)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc10)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc10)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc10)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc10)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc224)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc10)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc223)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc12)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc12)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc12)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc12)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc12)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc224)
    cir.scope {
      %17 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc226)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc226)
      %19 = cir.call %18() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc15)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc15)
      cir.if %20 {
        %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc18)
        cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc228)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc20)
        %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc20)
        %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc21)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc22)
        %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc23)
        cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc229)
      } loc(#loc227)
    } loc(#loc225)
    cir.scope {
      %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc231)
      %18 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc232)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc30)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc30)
      %21 = cir.const #cir.int<67> : !s32i loc(#loc31)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc32)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc33)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc32)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc32)
      cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc233)
      %26 = cir.const #cir.int<0> : !s32i loc(#loc36)
      %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc36)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc37)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc38)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc37)
      %31 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc39)
      %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc39)
      cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc234)
      cir.scope {
        %41 = cir.const #cir.int<0> : !s32i loc(#loc42)
        %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc42)
        cir.store %42, %17 : !u64i, !cir.ptr<!u64i> loc(#loc236)
        cir.for : cond {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc44)
          %44 = cir.const #cir.int<100> : !s32i loc(#loc45)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc45)
          %46 = cir.cmp(lt, %43, %45) : !u64i, !cir.bool loc(#loc237)
          cir.condition(%46) loc(#loc46)
        } body {
          cir.scope {
            %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc48)
            %44 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc49)
            %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc49)
            %46 = cir.load %45 : !cir.ptr<!s8i>, !s8i loc(#loc49)
            %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
            %48 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc51)
            %49 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc52)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc239)
          } loc(#loc238)
          cir.yield loc(#loc41)
        } step {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc54)
          %44 = cir.unary(inc, %43) : !u64i, !u64i loc(#loc55)
          cir.store %44, %17 : !u64i, !cir.ptr<!u64i> loc(#loc240)
          cir.yield loc(#loc235)
        } loc(#loc235)
      } loc(#loc235)
      %33 = cir.const #cir.int<0> : !s32i loc(#loc56)
      %34 = cir.cast(integral, %33 : !s32i), !s8i loc(#loc56)
      %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
      %36 = cir.const #cir.int<100> : !s32i loc(#loc58)
      %37 = cir.const #cir.int<1> : !s32i loc(#loc59)
      %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc58)
      %39 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %38 : !s32i), !cir.ptr<!s8i> loc(#loc60)
      cir.store %34, %39 : !s8i, !cir.ptr<!s8i> loc(#loc241)
      %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
      cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    } loc(#loc230)
    cir.return loc(#loc6)
  } loc(#loc221)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc243)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc244)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    cir.return loc(#loc64)
  } loc(#loc242)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc245)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc246)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc76)
  cir.func @main(%arg0: !s32i loc(fused[#loc79, #loc80]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc81, #loc82])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc248)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc249)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc78)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc83)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc84)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc85)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc85)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc86)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc73)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc250)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11_good() : () -> () loc(#loc88)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc74)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc75)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc251)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11_bad() : () -> () loc(#loc92)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc76)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc95)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc252)
    cir.return %17 : !s32i loc(#loc252)
  } loc(#loc247)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc253)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc99)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc255)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc256)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc105)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc105)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc105)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc105)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc105)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc257)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc105)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc105)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc256)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc107)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc107)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc107)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc107)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc107)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc107)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc107)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc257)
    cir.scope {
      %17 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc259)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc259)
      %19 = cir.call %18() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc110)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc110)
      cir.if %20 {
        %21 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc99)
        %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc99)
        cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc115)
      } else {
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
        cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc261)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc118)
        %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc118)
        %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc120)
        %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc121)
        cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc262)
      } loc(#loc260)
    } loc(#loc258)
    cir.scope {
      %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc264)
      %18 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc265)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc128)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc128)
      %21 = cir.const #cir.int<67> : !s32i loc(#loc129)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc130)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc131)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc130)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc130)
      cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc266)
      %26 = cir.const #cir.int<0> : !s32i loc(#loc134)
      %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc134)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc135)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc136)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc135)
      %31 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc137)
      %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc137)
      cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc267)
      cir.scope {
        %41 = cir.const #cir.int<0> : !s32i loc(#loc140)
        %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc140)
        cir.store %42, %17 : !u64i, !cir.ptr<!u64i> loc(#loc269)
        cir.for : cond {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc142)
          %44 = cir.const #cir.int<100> : !s32i loc(#loc143)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc143)
          %46 = cir.cmp(lt, %43, %45) : !u64i, !cir.bool loc(#loc270)
          cir.condition(%46) loc(#loc144)
        } body {
          cir.scope {
            %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc146)
            %44 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc147)
            %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc147)
            %46 = cir.load %45 : !cir.ptr<!s8i>, !s8i loc(#loc147)
            %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
            %48 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc149)
            %49 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc150)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc272)
          } loc(#loc271)
          cir.yield loc(#loc139)
        } step {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc152)
          %44 = cir.unary(inc, %43) : !u64i, !u64i loc(#loc153)
          cir.store %44, %17 : !u64i, !cir.ptr<!u64i> loc(#loc273)
          cir.yield loc(#loc268)
        } loc(#loc268)
      } loc(#loc268)
      %33 = cir.const #cir.int<0> : !s32i loc(#loc154)
      %34 = cir.cast(integral, %33 : !s32i), !s8i loc(#loc154)
      %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc155)
      %36 = cir.const #cir.int<100> : !s32i loc(#loc156)
      %37 = cir.const #cir.int<1> : !s32i loc(#loc157)
      %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc156)
      %39 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %38 : !s32i), !cir.ptr<!s8i> loc(#loc158)
      cir.store %34, %39 : !s8i, !cir.ptr<!s8i> loc(#loc274)
      %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
      cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc160)
    } loc(#loc263)
    cir.return loc(#loc101)
  } loc(#loc254)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc276)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc277)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc166)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc166)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc166)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc166)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc166)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc278)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc166)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc166)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc277)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc168)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc168)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc168)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc168)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc168)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc168)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc168)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc278)
    cir.scope {
      %17 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc280)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc280)
      %19 = cir.call %18() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc171)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc171)
      cir.if %20 {
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc174)
        cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc282)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc176)
        %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc176)
        %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc177)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc178)
        %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc179)
        cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc283)
      } loc(#loc281)
    } loc(#loc279)
    cir.scope {
      %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc285)
      %18 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc286)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc186)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc186)
      %21 = cir.const #cir.int<67> : !s32i loc(#loc187)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc188)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc189)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc188)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc188)
      cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc287)
      %26 = cir.const #cir.int<0> : !s32i loc(#loc192)
      %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc192)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc193)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc194)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc193)
      %31 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc195)
      %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc195)
      cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc288)
      cir.scope {
        %41 = cir.const #cir.int<0> : !s32i loc(#loc198)
        %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc198)
        cir.store %42, %17 : !u64i, !cir.ptr<!u64i> loc(#loc290)
        cir.for : cond {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc200)
          %44 = cir.const #cir.int<100> : !s32i loc(#loc201)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc201)
          %46 = cir.cmp(lt, %43, %45) : !u64i, !cir.bool loc(#loc291)
          cir.condition(%46) loc(#loc202)
        } body {
          cir.scope {
            %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc204)
            %44 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc205)
            %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc205)
            %46 = cir.load %45 : !cir.ptr<!s8i>, !s8i loc(#loc205)
            %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc206)
            %48 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc207)
            %49 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc208)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc293)
          } loc(#loc292)
          cir.yield loc(#loc197)
        } step {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc210)
          %44 = cir.unary(inc, %43) : !u64i, !u64i loc(#loc211)
          cir.store %44, %17 : !u64i, !cir.ptr<!u64i> loc(#loc294)
          cir.yield loc(#loc289)
        } loc(#loc289)
      } loc(#loc289)
      %33 = cir.const #cir.int<0> : !s32i loc(#loc212)
      %34 = cir.cast(integral, %33 : !s32i), !s8i loc(#loc212)
      %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc213)
      %36 = cir.const #cir.int<100> : !s32i loc(#loc214)
      %37 = cir.const #cir.int<1> : !s32i loc(#loc215)
      %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc214)
      %39 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %38 : !s32i), !cir.ptr<!s8i> loc(#loc216)
      cir.store %34, %39 : !s8i, !cir.ptr<!s8i> loc(#loc295)
      %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc217)
      cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc218)
    } loc(#loc284)
    cir.return loc(#loc162)
  } loc(#loc275)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":23:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":48:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":25:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":25:12)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":26:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":26:36)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":27:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":27:37)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":28:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":34:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":28:8)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":28:26)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":29:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":32:16)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":32:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":33:19)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":33:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":33:14)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":33:15)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":35:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":47:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":36:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":36:16)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":37:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":37:24)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":38:16)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":38:24)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":38:29)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":38:33)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":38:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":38:34)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":39:25)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":39:16)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":39:20)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":39:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":41:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":44:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":41:18)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":41:14)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":41:21)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":41:25)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":41:23)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":42:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":43:30)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":43:23)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":43:13)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":43:18)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":43:19)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":43:31)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":41:31)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":41:30)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":45:23)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":45:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":45:14)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":45:18)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":45:19)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":46:19)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":46:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":113:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":117:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":115:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":115:14)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":116:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":116:14)
#loc69 = loc("/usr/include/stdlib.h":575:1)
#loc70 = loc("/usr/include/stdlib.h":575:41)
#loc71 = loc("/usr/include/time.h":76:1)
#loc72 = loc("/usr/include/time.h":76:38)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":134:15)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":136:15)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":139:15)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":141:15)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":129:1)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":144:1)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":130:1)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":132:27)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":132:22)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":132:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":134:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":135:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":135:73)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":136:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":139:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":140:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":140:72)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":141:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":143:12)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":143:5)
#loc97 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc98 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":63:19)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":55:1)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":84:1)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":57:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":57:12)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":58:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":58:36)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":59:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":59:37)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":60:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":70:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":60:8)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":60:27)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":61:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":64:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":66:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":63:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":68:16)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":68:9)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":69:19)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":69:9)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":69:14)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":69:15)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":71:5)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":83:5)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":72:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":72:16)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":73:9)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":73:24)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":74:16)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":74:24)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":74:29)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":74:33)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":74:9)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":74:34)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":75:25)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":75:16)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":75:20)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":75:9)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":77:9)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":80:9)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":77:18)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":77:14)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":77:21)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":77:25)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":77:23)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":78:9)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":79:30)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":79:23)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":79:13)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":79:18)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":79:19)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":79:31)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":77:31)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":77:30)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":81:23)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":81:9)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":81:14)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":81:18)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":81:19)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":82:19)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":82:9)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":87:1)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":111:1)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":89:5)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":89:12)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":90:5)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":90:36)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":91:5)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":91:37)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":92:5)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":97:5)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":92:8)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":92:26)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":93:5)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":95:16)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":95:9)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":96:19)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":96:9)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":96:14)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":96:15)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":98:5)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":110:5)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":99:9)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":99:16)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":100:9)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":100:24)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":101:16)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":101:24)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":101:29)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":101:33)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":101:9)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":101:34)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":102:25)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":102:16)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":102:20)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":102:9)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":104:9)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":107:9)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":104:18)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":104:14)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":104:21)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":104:25)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":104:23)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":105:9)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":106:30)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":106:23)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":106:13)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":106:18)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":106:19)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":106:31)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":104:31)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":104:30)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":108:23)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":108:9)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":108:14)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":108:18)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":108:19)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":109:19)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c":109:9)
#loc219 = loc(fused[#loc1, #loc2])
#loc220 = loc(fused[#loc3, #loc4])
#loc221 = loc(fused[#loc5, #loc6])
#loc222 = loc(fused[#loc7, #loc8])
#loc223 = loc(fused[#loc9, #loc10])
#loc224 = loc(fused[#loc11, #loc12])
#loc225 = loc(fused[#loc13, #loc14])
#loc226 = loc(fused[#loc15, #loc16])
#loc227 = loc(fused[#loc17, #loc14])
#loc228 = loc(fused[#loc19, #loc18])
#loc229 = loc(fused[#loc21, #loc20])
#loc230 = loc(fused[#loc24, #loc25])
#loc231 = loc(fused[#loc26, #loc27])
#loc232 = loc(fused[#loc28, #loc29])
#loc233 = loc(fused[#loc34, #loc35])
#loc234 = loc(fused[#loc39, #loc36])
#loc235 = loc(fused[#loc40, #loc41])
#loc236 = loc(fused[#loc43, #loc42])
#loc237 = loc(fused[#loc44, #loc45])
#loc238 = loc(fused[#loc47, #loc41])
#loc239 = loc(fused[#loc50, #loc53])
#loc240 = loc(fused[#loc55, #loc54])
#loc241 = loc(fused[#loc57, #loc56])
#loc242 = loc(fused[#loc63, #loc64])
#loc243 = loc(fused[#loc65, #loc66])
#loc244 = loc(fused[#loc67, #loc68])
#loc245 = loc(fused[#loc69, #loc70])
#loc246 = loc(fused[#loc71, #loc72])
#loc247 = loc(fused[#loc77, #loc78])
#loc250 = loc(fused[#loc88, #loc89])
#loc251 = loc(fused[#loc92, #loc93])
#loc252 = loc(fused[#loc96, #loc95])
#loc253 = loc(fused[#loc97, #loc98])
#loc254 = loc(fused[#loc100, #loc101])
#loc255 = loc(fused[#loc102, #loc103])
#loc256 = loc(fused[#loc104, #loc105])
#loc257 = loc(fused[#loc106, #loc107])
#loc258 = loc(fused[#loc108, #loc109])
#loc259 = loc(fused[#loc110, #loc111])
#loc260 = loc(fused[#loc112, #loc113, #loc114, #loc109])
#loc261 = loc(fused[#loc117, #loc116])
#loc262 = loc(fused[#loc119, #loc118])
#loc263 = loc(fused[#loc122, #loc123])
#loc264 = loc(fused[#loc124, #loc125])
#loc265 = loc(fused[#loc126, #loc127])
#loc266 = loc(fused[#loc132, #loc133])
#loc267 = loc(fused[#loc137, #loc134])
#loc268 = loc(fused[#loc138, #loc139])
#loc269 = loc(fused[#loc141, #loc140])
#loc270 = loc(fused[#loc142, #loc143])
#loc271 = loc(fused[#loc145, #loc139])
#loc272 = loc(fused[#loc148, #loc151])
#loc273 = loc(fused[#loc153, #loc152])
#loc274 = loc(fused[#loc155, #loc154])
#loc275 = loc(fused[#loc161, #loc162])
#loc276 = loc(fused[#loc163, #loc164])
#loc277 = loc(fused[#loc165, #loc166])
#loc278 = loc(fused[#loc167, #loc168])
#loc279 = loc(fused[#loc169, #loc170])
#loc280 = loc(fused[#loc171, #loc172])
#loc281 = loc(fused[#loc173, #loc170])
#loc282 = loc(fused[#loc175, #loc174])
#loc283 = loc(fused[#loc177, #loc176])
#loc284 = loc(fused[#loc180, #loc181])
#loc285 = loc(fused[#loc182, #loc183])
#loc286 = loc(fused[#loc184, #loc185])
#loc287 = loc(fused[#loc190, #loc191])
#loc288 = loc(fused[#loc195, #loc192])
#loc289 = loc(fused[#loc196, #loc197])
#loc290 = loc(fused[#loc199, #loc198])
#loc291 = loc(fused[#loc200, #loc201])
#loc292 = loc(fused[#loc203, #loc197])
#loc293 = loc(fused[#loc206, #loc209])
#loc294 = loc(fused[#loc211, #loc210])
#loc295 = loc(fused[#loc213, #loc212])
