!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__network_connection_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc76)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"123.123.123.123\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc78)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc79)
  cir.func private @close(!s32i) -> !s32i loc(#loc80)
  cir.func no_proto @CWE510_Trapdoor__network_connection_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc82)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc83)
    cir.goto "sink" loc(#loc84)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc20)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc17)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.scope {
      cir.do {
        cir.scope {
          %4 = cir.const #cir.int<2> : !s32i loc(#loc25)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc26)
          %6 = cir.const #cir.int<6> : !s32i loc(#loc27)
          %7 = cir.call @socket(%4, %5, %6) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc28)
          cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc87)
          cir.scope {
            %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc33)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc34)
            %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc34)
            %26 = cir.cmp(eq, %23, %25) : !s32i, !cir.bool loc(#loc89)
            cir.if %26 {
              cir.break loc(#loc36)
            } loc(#loc90)
          } loc(#loc88)
          %8 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc91)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc39)
          %10 = cir.const #cir.int<16> : !u64i loc(#loc92)
          cir.libc.memset %10 bytes from %8 set to %9 : !cir.ptr<!void>, !s32i, !u64i loc(#loc93)
          %11 = cir.const #cir.int<2> : !s32i loc(#loc44)
          %12 = cir.cast(integral, %11 : !s32i), !u16i loc(#loc44)
          %13 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc45)
          cir.store %12, %13 : !u16i, !cir.ptr<!u16i> loc(#loc94)
          %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc5)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc5)
          %16 = cir.call @inet_addr(%15) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc47)
          %17 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc48)
          %18 = cir.get_member %17[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc49)
          cir.store %16, %18 : !u32i, !cir.ptr<!u32i> loc(#loc95)
          %19 = cir.const #cir.int<80> : !s32i loc(#loc52)
          %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc52)
          %21 = cir.call @htons(%20) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc53)
          %22 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc54)
          cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc96)
          cir.scope {
            %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc59)
            %24 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc98)
            %25 = cir.const #cir.int<16> : !u64i loc(#loc99)
            %26 = cir.cast(integral, %25 : !u64i), !u32i loc(#loc99)
            %27 = cir.call @connect(%23, %24, %26) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc64)
            %28 = cir.const #cir.int<1> : !s32i loc(#loc65)
            %29 = cir.unary(minus, %28) nsw : !s32i, !s32i loc(#loc65)
            %30 = cir.cmp(eq, %27, %29) : !s32i, !cir.bool loc(#loc100)
            cir.if %30 {
              cir.break loc(#loc67)
            } loc(#loc101)
          } loc(#loc97)
        } loc(#loc86)
        cir.yield loc(#loc22)
      } while {
        %4 = cir.const #cir.int<0> : !s32i loc(#loc68)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc68)
        cir.condition(%5) loc(#loc68)
      } loc(#loc85)
    } loc(#loc85)
    cir.scope {
      %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc71)
      %5 = cir.const #cir.int<1> : !s32i loc(#loc72)
      %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc72)
      %7 = cir.cmp(ne, %4, %6) : !s32i, !cir.bool loc(#loc103)
      cir.if %7 {
        %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc74)
        %9 = cir.call @close(%8) : (!s32i) -> !s32i loc(#loc75)
      } loc(#loc104)
    } loc(#loc102)
    cir.return loc(#loc13)
  } loc(#loc81)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__network_connection_18.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE510_Trapdoor__network_connection_18.c":66:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/unistd.h":358:1)
#loc11 = loc("/usr/include/unistd.h":358:27)
#loc12 = loc("CWE510_Trapdoor__network_connection_18.c":39:1)
#loc13 = loc("CWE510_Trapdoor__network_connection_18.c":87:1)
#loc14 = loc("CWE510_Trapdoor__network_connection_18.c":48:9)
#loc15 = loc("CWE510_Trapdoor__network_connection_18.c":48:28)
#loc16 = loc("CWE510_Trapdoor__network_connection_18.c":49:9)
#loc17 = loc("CWE510_Trapdoor__network_connection_18.c":49:32)
#loc18 = loc("CWE510_Trapdoor__network_connection_18.c":41:5)
#loc19 = loc("CWE510_Trapdoor__network_connection_18.c":41:10)
#loc20 = loc("CWE510_Trapdoor__network_connection_18.c":42:1)
#loc21 = loc("CWE510_Trapdoor__network_connection_18.c":50:9)
#loc22 = loc("CWE510_Trapdoor__network_connection_18.c":75:17)
#loc23 = loc("CWE510_Trapdoor__network_connection_18.c":51:9)
#loc24 = loc("CWE510_Trapdoor__network_connection_18.c":74:9)
#loc25 = loc("CWE510_Trapdoor__network_connection_18.c":59:36)
#loc26 = loc("CWE510_Trapdoor__network_connection_18.c":59:45)
#loc27 = loc("CWE510_Trapdoor__network_connection_18.c":59:58)
#loc28 = loc("CWE510_Trapdoor__network_connection_18.c":59:29)
#loc29 = loc("CWE510_Trapdoor__network_connection_18.c":59:13)
#loc30 = loc("CWE510_Trapdoor__network_connection_18.c":59:69)
#loc31 = loc("CWE510_Trapdoor__network_connection_18.c":60:13)
#loc32 = loc("CWE510_Trapdoor__network_connection_18.c":63:13)
#loc33 = loc("CWE510_Trapdoor__network_connection_18.c":60:17)
#loc34 = loc("CWE510_Trapdoor__network_connection_18.c":60:34)
#loc35 = loc("CWE510_Trapdoor__network_connection_18.c":61:13)
#loc36 = loc("CWE510_Trapdoor__network_connection_18.c":62:17)
#loc37 = loc("CWE510_Trapdoor__network_connection_18.c":64:20)
#loc38 = loc("CWE510_Trapdoor__network_connection_18.c":64:21)
#loc39 = loc("CWE510_Trapdoor__network_connection_18.c":64:30)
#loc40 = loc("CWE510_Trapdoor__network_connection_18.c":64:33)
#loc41 = loc("CWE510_Trapdoor__network_connection_18.c":64:47)
#loc42 = loc("CWE510_Trapdoor__network_connection_18.c":64:13)
#loc43 = loc("CWE510_Trapdoor__network_connection_18.c":64:48)
#loc44 = loc("CWE510_Trapdoor__network_connection_18.c":65:34)
#loc45 = loc("/usr/include/netinet/in.h":249:5)
#loc46 = loc("CWE510_Trapdoor__network_connection_18.c":65:13)
#loc47 = loc("CWE510_Trapdoor__network_connection_18.c":66:39)
#loc48 = loc("/usr/include/netinet/in.h":251:20)
#loc49 = loc("/usr/include/netinet/in.h":33:15)
#loc50 = loc("CWE510_Trapdoor__network_connection_18.c":66:13)
#loc51 = loc("CWE510_Trapdoor__network_connection_18.c":66:59)
#loc52 = loc("CWE510_Trapdoor__network_connection_18.c":67:38)
#loc53 = loc("CWE510_Trapdoor__network_connection_18.c":67:32)
#loc54 = loc("/usr/include/netinet/in.h":250:15)
#loc55 = loc("CWE510_Trapdoor__network_connection_18.c":67:13)
#loc56 = loc("CWE510_Trapdoor__network_connection_18.c":67:40)
#loc57 = loc("CWE510_Trapdoor__network_connection_18.c":69:13)
#loc58 = loc("CWE510_Trapdoor__network_connection_18.c":72:13)
#loc59 = loc("CWE510_Trapdoor__network_connection_18.c":69:25)
#loc60 = loc("CWE510_Trapdoor__network_connection_18.c":69:58)
#loc61 = loc("CWE510_Trapdoor__network_connection_18.c":69:59)
#loc62 = loc("CWE510_Trapdoor__network_connection_18.c":69:68)
#loc63 = loc("CWE510_Trapdoor__network_connection_18.c":69:82)
#loc64 = loc("CWE510_Trapdoor__network_connection_18.c":69:17)
#loc65 = loc("CWE510_Trapdoor__network_connection_18.c":69:88)
#loc66 = loc("CWE510_Trapdoor__network_connection_18.c":70:13)
#loc67 = loc("CWE510_Trapdoor__network_connection_18.c":71:17)
#loc68 = loc("CWE510_Trapdoor__network_connection_18.c":75:16)
#loc69 = loc("CWE510_Trapdoor__network_connection_18.c":76:9)
#loc70 = loc("CWE510_Trapdoor__network_connection_18.c":79:9)
#loc71 = loc("CWE510_Trapdoor__network_connection_18.c":76:13)
#loc72 = loc("CWE510_Trapdoor__network_connection_18.c":76:30)
#loc73 = loc("CWE510_Trapdoor__network_connection_18.c":77:9)
#loc74 = loc("CWE510_Trapdoor__network_connection_18.c":78:26)
#loc75 = loc("CWE510_Trapdoor__network_connection_18.c":78:13)
#loc76 = loc(fused[#loc1, #loc2])
#loc77 = loc(fused[#loc3, #loc4])
#loc78 = loc(fused[#loc6, #loc7])
#loc79 = loc(fused[#loc8, #loc9])
#loc80 = loc(fused[#loc10, #loc11])
#loc81 = loc(fused[#loc12, #loc13])
#loc82 = loc(fused[#loc14, #loc15])
#loc83 = loc(fused[#loc16, #loc17])
#loc84 = loc(fused[#loc18, #loc19])
#loc85 = loc(fused[#loc21, #loc22])
#loc86 = loc(fused[#loc23, #loc24])
#loc87 = loc(fused[#loc29, #loc30])
#loc88 = loc(fused[#loc31, #loc32])
#loc89 = loc(fused[#loc33, #loc34])
#loc90 = loc(fused[#loc35, #loc32])
#loc91 = loc(fused[#loc37, #loc38])
#loc92 = loc(fused[#loc40, #loc41])
#loc93 = loc(fused[#loc42, #loc43])
#loc94 = loc(fused[#loc46, #loc44])
#loc95 = loc(fused[#loc50, #loc51])
#loc96 = loc(fused[#loc55, #loc56])
#loc97 = loc(fused[#loc57, #loc58])
#loc98 = loc(fused[#loc60, #loc61])
#loc99 = loc(fused[#loc62, #loc63])
#loc100 = loc(fused[#loc64, #loc65])
#loc101 = loc(fused[#loc66, #loc58])
#loc102 = loc(fused[#loc69, #loc70])
#loc103 = loc(fused[#loc71, #loc72])
#loc104 = loc(fused[#loc73, #loc70])
