!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_CWE121_Stack_Based_Buffer_Overflow__CWE135_34_unionType = !cir.record<union "CWE121_Stack_Based_Buffer_Overflow__CWE135_34_unionType" {!cir.ptr<!void>, !cir.ptr<!void>}>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc108)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc109)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc110)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc112)
    %1 = cir.alloca !ty_CWE121_Stack_Based_Buffer_Overflow__CWE135_34_unionType, !cir.ptr<!ty_CWE121_Stack_Based_Buffer_Overflow__CWE135_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc113)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc14)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc114)
    %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
    cir.store %5, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc115)
    %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc17)
    %7 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE121_Stack_Based_Buffer_Overflow__CWE135_34_unionType> -> !cir.ptr<!cir.ptr<!void>> loc(#loc18)
    cir.store %6, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc116)
    cir.scope {
      %8 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc118)
      %9 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE121_Stack_Based_Buffer_Overflow__CWE135_34_unionType> -> !cir.ptr<!cir.ptr<!void>> loc(#loc24)
      %10 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc23)
      cir.store %10, %8 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc118)
      cir.scope {
        %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc120)
        %12 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc121)
        %13 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc31)
        %14 = cir.load %8 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc32)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
        %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc31)
        cir.store %16, %11 : !u64i, !cir.ptr<!u64i> loc(#loc120)
        %17 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc30)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc30)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc30)
        %20 = cir.binop(add, %17, %19) : !u64i loc(#loc30)
        %21 = cir.const #cir.int<4> : !u64i loc(#loc30)
        %22 = cir.binop(mul, %20, %21) : !u64i loc(#loc30)
        %23 = cir.alloca !u8i, !cir.ptr<!u8i>, %22 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc30)
        %24 = cir.cast(bitcast, %23 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc30)
        cir.store %24, %12 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc121)
        %25 = cir.load %12 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc33)
        %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc33)
        %27 = cir.load %8 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc34)
        %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc34)
        %29 = cir.call @wcscpy(%26, %28) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc35)
        %30 = cir.load %12 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc36)
        %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
        cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc37)
      } loc(#loc119)
    } loc(#loc117)
    cir.return loc(#loc9)
  } loc(#loc111)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc123)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc124)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    cir.return loc(#loc39)
  } loc(#loc122)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc44)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc125)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc127)
    %1 = cir.alloca !ty_CWE121_Stack_Based_Buffer_Overflow__CWE135_34_unionType, !cir.ptr<!ty_CWE121_Stack_Based_Buffer_Overflow__CWE135_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc128)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc53)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc129)
    %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc44)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc44)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc44)
    cir.store %5, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc130)
    %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc56)
    %7 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE121_Stack_Based_Buffer_Overflow__CWE135_34_unionType> -> !cir.ptr<!cir.ptr<!void>> loc(#loc18)
    cir.store %6, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc131)
    cir.scope {
      %8 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc133)
      %9 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE121_Stack_Based_Buffer_Overflow__CWE135_34_unionType> -> !cir.ptr<!cir.ptr<!void>> loc(#loc24)
      %10 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc61)
      cir.store %10, %8 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc133)
      cir.scope {
        %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc135)
        %12 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc136)
        %13 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc68)
        %14 = cir.load %8 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc69)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc69)
        %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc68)
        cir.store %16, %11 : !u64i, !cir.ptr<!u64i> loc(#loc135)
        %17 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc67)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc67)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc67)
        %20 = cir.binop(add, %17, %19) : !u64i loc(#loc67)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc67)
        %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc67)
        %23 = cir.binop(mul, %20, %22) : !u64i loc(#loc67)
        %24 = cir.alloca !u8i, !cir.ptr<!u8i>, %23 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc67)
        %25 = cir.cast(bitcast, %24 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc67)
        cir.store %25, %12 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc136)
        %26 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc70)
        %27 = cir.load %12 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc71)
        %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc71)
        %29 = cir.load %8 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc72)
        %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc72)
        %31 = cir.call @strcpy(%28, %30) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc70)
        %32 = cir.load %12 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc73)
        %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc73)
        cir.call @printLine(%33) : (!cir.ptr<!s8i>) -> () loc(#loc74)
      } loc(#loc134)
    } loc(#loc132)
    cir.return loc(#loc48)
  } loc(#loc126)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc137)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc138)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc140)
    %1 = cir.alloca !ty_CWE121_Stack_Based_Buffer_Overflow__CWE135_34_unionType, !cir.ptr<!ty_CWE121_Stack_Based_Buffer_Overflow__CWE135_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc141)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc85)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc142)
    %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc87)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc87)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc87)
    cir.store %5, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc143)
    %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc89)
    %7 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE121_Stack_Based_Buffer_Overflow__CWE135_34_unionType> -> !cir.ptr<!cir.ptr<!void>> loc(#loc18)
    cir.store %6, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc144)
    cir.scope {
      %8 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc146)
      %9 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE121_Stack_Based_Buffer_Overflow__CWE135_34_unionType> -> !cir.ptr<!cir.ptr<!void>> loc(#loc24)
      %10 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc94)
      cir.store %10, %8 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc146)
      cir.scope {
        %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc148)
        %12 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc149)
        %13 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc101)
        %14 = cir.load %8 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc102)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc102)
        %16 = cir.call @wcslen(%15) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc101)
        cir.store %16, %11 : !u64i, !cir.ptr<!u64i> loc(#loc148)
        %17 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc100)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc100)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc100)
        %20 = cir.binop(add, %17, %19) : !u64i loc(#loc100)
        %21 = cir.const #cir.int<4> : !u64i loc(#loc100)
        %22 = cir.binop(mul, %20, %21) : !u64i loc(#loc100)
        %23 = cir.alloca !u8i, !cir.ptr<!u8i>, %22 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc100)
        %24 = cir.cast(bitcast, %23 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc100)
        cir.store %24, %12 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc149)
        %25 = cir.load %12 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc103)
        %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc103)
        %27 = cir.load %8 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc104)
        %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc104)
        %29 = cir.call @wcscpy(%26, %28) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc105)
        %30 = cir.load %12 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc106)
        %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc106)
        cir.call @printWLine(%31) : (!cir.ptr<!s32i>) -> () loc(#loc107)
      } loc(#loc147)
    } loc(#loc145)
    cir.return loc(#loc80)
  } loc(#loc139)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":39:20)
#loc2 = loc("/usr/include/string.h":407:1)
#loc3 = loc("/usr/include/string.h":408:33)
#loc4 = loc("/usr/include/wchar.h":98:1)
#loc5 = loc("/usr/include/wchar.h":100:14)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":33:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":51:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":35:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":35:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":36:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":36:61)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":37:12)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":37:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":39:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":40:26)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":27:12)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":40:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":41:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":50:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":42:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":42:31)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":28:12)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":43:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":49:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":45:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":45:49)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":46:13)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":46:35)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":45:30)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":45:45)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":47:26)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":47:32)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":47:19)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":48:31)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":48:13)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":99:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":103:1)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":101:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":101:13)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":102:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":102:13)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":64:20)
#loc45 = loc("/usr/include/string.h":141:1)
#loc46 = loc("/usr/include/string.h":142:14)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":58:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":76:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":60:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":60:12)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":61:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":61:61)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":62:12)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":62:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":64:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":65:26)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":65:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":66:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":75:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":67:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":67:31)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":68:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":74:9)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":70:13)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":70:49)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":71:13)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":71:35)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":70:30)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":70:45)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":72:19)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":72:26)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":72:32)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":73:31)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":73:13)
#loc75 = loc("/usr/include/wchar.h":247:1)
#loc76 = loc("/usr/include/wchar.h":247:51)
#loc77 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc78 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":79:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":97:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":81:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":81:12)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":82:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":82:61)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":83:12)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":83:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":85:20)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":85:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":86:26)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":86:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":87:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":96:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":88:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":88:31)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":89:9)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":95:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":91:13)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":91:52)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":92:13)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":92:35)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":91:30)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":91:48)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":93:26)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":93:32)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":93:19)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":94:35)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c":94:13)
#loc108 = loc(fused[#loc2, #loc3])
#loc109 = loc(fused[#loc4, #loc5])
#loc110 = loc(fused[#loc6, #loc7])
#loc111 = loc(fused[#loc8, #loc9])
#loc112 = loc(fused[#loc10, #loc11])
#loc113 = loc(fused[#loc12, #loc13])
#loc114 = loc(fused[#loc15, #loc14])
#loc115 = loc(fused[#loc16, #loc1])
#loc116 = loc(fused[#loc19, #loc17])
#loc117 = loc(fused[#loc20, #loc21])
#loc118 = loc(fused[#loc22, #loc23])
#loc119 = loc(fused[#loc25, #loc26])
#loc120 = loc(fused[#loc27, #loc28])
#loc121 = loc(fused[#loc29, #loc30])
#loc122 = loc(fused[#loc38, #loc39])
#loc123 = loc(fused[#loc40, #loc41])
#loc124 = loc(fused[#loc42, #loc43])
#loc125 = loc(fused[#loc45, #loc46])
#loc126 = loc(fused[#loc47, #loc48])
#loc127 = loc(fused[#loc49, #loc50])
#loc128 = loc(fused[#loc51, #loc52])
#loc129 = loc(fused[#loc54, #loc53])
#loc130 = loc(fused[#loc55, #loc44])
#loc131 = loc(fused[#loc57, #loc56])
#loc132 = loc(fused[#loc58, #loc59])
#loc133 = loc(fused[#loc60, #loc61])
#loc134 = loc(fused[#loc62, #loc63])
#loc135 = loc(fused[#loc64, #loc65])
#loc136 = loc(fused[#loc66, #loc67])
#loc137 = loc(fused[#loc75, #loc76])
#loc138 = loc(fused[#loc77, #loc78])
#loc139 = loc(fused[#loc79, #loc80])
#loc140 = loc(fused[#loc81, #loc82])
#loc141 = loc(fused[#loc83, #loc84])
#loc142 = loc(fused[#loc86, #loc85])
#loc143 = loc(fused[#loc88, #loc87])
#loc144 = loc(fused[#loc90, #loc89])
#loc145 = loc(fused[#loc91, #loc92])
#loc146 = loc(fused[#loc93, #loc94])
#loc147 = loc(fused[#loc95, #loc96])
#loc148 = loc(fused[#loc97, #loc98])
#loc149 = loc(fused[#loc99, #loc100])
