!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc19 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":29:30)
#loc58 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":53:30)
#loc90 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":83:30)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc160)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc161)
  cir.func private @printUnsignedLine(!u32i) loc(#loc162)
  cir.func no_proto @CWE191_Integer_Underflow__unsigned_int_rand_sub_10_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc165)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc13)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc13)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc166)
    cir.br ^bb1 loc(#loc167)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc160)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc168)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc19)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc19)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc19)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc19)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc19)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc19)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc19)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc19)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc19)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc19)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc19)
    cir.br ^bb5(%22 : !u32i) loc(#loc19)
  ^bb4:  // pred: ^bb2
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc19)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc19)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc19)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc19)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc19)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc19)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc19)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc19)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc19)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc19)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc19)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc19)
    cir.br ^bb5(%38 : !u32i) loc(#loc19)
  ^bb5(%39: !u32i loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":29:30)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc19)
  ^bb6:  // pred: ^bb5
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc19)
    %41 = cir.cast(integral, %40 : !s32i), !u32i loc(#loc19)
    cir.store %41, %1 : !u32i, !cir.ptr<!u32i> loc(#loc169)
    cir.br ^bb7 loc(#loc16)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc170)
  ^bb9:  // pred: ^bb8
    %42 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc160)
    %43 = cir.load %42 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %44 = cir.cast(int_to_bool, %43 : !s32i), !cir.bool loc(#loc23)
    cir.brcond %44 ^bb10, ^bb13 loc(#loc171)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc172)
  ^bb11:  // pred: ^bb10
    %45 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc27)
    %46 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %47 = cir.cast(integral, %46 : !s32i), !u32i loc(#loc10)
    %48 = cir.binop(sub, %45, %47) : !u32i loc(#loc173)
    cir.store %48, %0 : !u32i, !cir.ptr<!u32i> loc(#loc164)
    %49 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc28)
    cir.call @printUnsignedLine(%49) : (!u32i) -> () loc(#loc29)
    cir.br ^bb12 loc(#loc26)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc22)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc22)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc8)
  } loc(#loc163)
  cir.func no_proto @CWE191_Integer_Underflow__unsigned_int_rand_sub_10_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc177)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc174)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc179)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc180)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc45)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc183)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc52)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc52)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc184)
    cir.br ^bb1 loc(#loc185)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc160)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc56)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc186)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc58)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc58)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc58)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc58)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc58)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc58)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc58)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc58)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc58)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc58)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc58)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc58)
    cir.br ^bb5(%22 : !u32i) loc(#loc58)
  ^bb4:  // pred: ^bb2
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc58)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc58)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc58)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc58)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc58)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc58)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc58)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc58)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc58)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc58)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc58)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc58)
    cir.br ^bb5(%38 : !u32i) loc(#loc58)
  ^bb5(%39: !u32i loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":53:30)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc58)
  ^bb6:  // pred: ^bb5
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc58)
    %41 = cir.cast(integral, %40 : !s32i), !u32i loc(#loc58)
    cir.store %41, %1 : !u32i, !cir.ptr<!u32i> loc(#loc187)
    cir.br ^bb7 loc(#loc55)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc55)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc188)
  ^bb9:  // pred: ^bb8
    %42 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc179)
    %43 = cir.load %42 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    %44 = cir.cast(int_to_bool, %43 : !s32i), !cir.bool loc(#loc62)
    cir.brcond %44 ^bb10, ^bb11 loc(#loc189)
  ^bb10:  // pred: ^bb9
    %45 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
    %46 = cir.cast(array_to_ptrdecay, %45 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%46) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    cir.br ^bb17 loc(#loc64)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc190)
  ^bb12:  // pred: ^bb11
    %47 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc69)
    %48 = cir.const #cir.int<0> : !s32i loc(#loc70)
    %49 = cir.cast(integral, %48 : !s32i), !u32i loc(#loc70)
    %50 = cir.cmp(gt, %47, %49) : !u32i, !cir.bool loc(#loc191)
    cir.brcond %50 ^bb13, ^bb14 loc(#loc192)
  ^bb13:  // pred: ^bb12
    %51 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc74)
    %52 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %53 = cir.cast(integral, %52 : !s32i), !u32i loc(#loc49)
    %54 = cir.binop(sub, %51, %53) : !u32i loc(#loc193)
    cir.store %54, %0 : !u32i, !cir.ptr<!u32i> loc(#loc182)
    %55 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc75)
    cir.call @printUnsignedLine(%55) : (!u32i) -> () loc(#loc76)
    cir.br ^bb15 loc(#loc72)
  ^bb14:  // pred: ^bb12
    %56 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc45)
    %57 = cir.cast(array_to_ptrdecay, %56 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%57) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    cir.br ^bb15 loc(#loc68)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc68)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc61)
  ^bb17:  // 2 preds: ^bb10, ^bb16
    cir.br ^bb18 loc(#loc61)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc47)
  } loc(#loc181)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc196)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc84)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc84)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc197)
    cir.br ^bb1 loc(#loc198)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc160)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc88)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc199)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc90)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc90)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc90)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc90)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc90)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc90)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc90)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc90)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc90)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc90)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc90)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc90)
    cir.br ^bb5(%22 : !u32i) loc(#loc90)
  ^bb4:  // pred: ^bb2
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc90)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc90)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc90)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc90)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc90)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc90)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc90)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc90)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc90)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc90)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc90)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc90)
    cir.br ^bb5(%38 : !u32i) loc(#loc90)
  ^bb5(%39: !u32i loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":83:30)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc90)
  ^bb6:  // pred: ^bb5
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc90)
    %41 = cir.cast(integral, %40 : !s32i), !u32i loc(#loc90)
    cir.store %41, %1 : !u32i, !cir.ptr<!u32i> loc(#loc200)
    cir.br ^bb7 loc(#loc87)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc87)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc201)
  ^bb9:  // pred: ^bb8
    %42 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc160)
    %43 = cir.load %42 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %44 = cir.cast(int_to_bool, %43 : !s32i), !cir.bool loc(#loc94)
    cir.brcond %44 ^bb10, ^bb16 loc(#loc202)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc203)
  ^bb11:  // pred: ^bb10
    %45 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc98)
    %46 = cir.const #cir.int<0> : !s32i loc(#loc99)
    %47 = cir.cast(integral, %46 : !s32i), !u32i loc(#loc99)
    %48 = cir.cmp(gt, %45, %47) : !u32i, !cir.bool loc(#loc204)
    cir.brcond %48 ^bb12, ^bb13 loc(#loc205)
  ^bb12:  // pred: ^bb11
    %49 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc103)
    %50 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %51 = cir.cast(integral, %50 : !s32i), !u32i loc(#loc81)
    %52 = cir.binop(sub, %49, %51) : !u32i loc(#loc206)
    cir.store %52, %0 : !u32i, !cir.ptr<!u32i> loc(#loc195)
    %53 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc104)
    cir.call @printUnsignedLine(%53) : (!u32i) -> () loc(#loc105)
    cir.br ^bb14 loc(#loc101)
  ^bb13:  // pred: ^bb11
    %54 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc106)
    %55 = cir.cast(array_to_ptrdecay, %54 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc106)
    cir.call @printLine(%55) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    cir.br ^bb14 loc(#loc97)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc97)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc93)
  ^bb16:  // 2 preds: ^bb9, ^bb15
    cir.br ^bb17 loc(#loc93)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc79)
  } loc(#loc194)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc209)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc114)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc114)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc210)
    cir.br ^bb1 loc(#loc211)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc179)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc118)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc212)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc122)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc122)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc123)
    cir.br ^bb4 loc(#loc120)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc124)
    %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc125)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc125)
    cir.store %11, %1 : !u32i, !cir.ptr<!u32i> loc(#loc213)
    cir.br ^bb4 loc(#loc117)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc117)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc214)
  ^bb6:  // pred: ^bb5
    %12 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc160)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc129)
    cir.brcond %14 ^bb7, ^bb10 loc(#loc215)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc216)
  ^bb8:  // pred: ^bb7
    %15 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc133)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc111)
    %18 = cir.binop(sub, %15, %17) : !u32i loc(#loc217)
    cir.store %18, %0 : !u32i, !cir.ptr<!u32i> loc(#loc208)
    %19 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc134)
    cir.call @printUnsignedLine(%19) : (!u32i) -> () loc(#loc135)
    cir.br ^bb9 loc(#loc132)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc128)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc128)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc109)
  } loc(#loc207)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc219)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc220)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc142)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc142)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc221)
    cir.br ^bb1 loc(#loc222)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc160)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc146)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc146)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc223)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc148)
    %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc149)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc149)
    cir.store %9, %1 : !u32i, !cir.ptr<!u32i> loc(#loc224)
    cir.br ^bb3 loc(#loc145)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc145)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc225)
  ^bb5:  // pred: ^bb4
    %10 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc160)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc153)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc153)
    cir.brcond %12 ^bb6, ^bb9 loc(#loc226)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc227)
  ^bb7:  // pred: ^bb6
    %13 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc157)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc139)
    %16 = cir.binop(sub, %13, %15) : !u32i loc(#loc228)
    cir.store %16, %0 : !u32i, !cir.ptr<!u32i> loc(#loc219)
    %17 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc158)
    cir.call @printUnsignedLine(%17) : (!u32i) -> () loc(#loc159)
    cir.br ^bb8 loc(#loc156)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc152)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc152)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc137)
  } loc(#loc218)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc7 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":22:1)
#loc8 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":39:1)
#loc9 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":35:13)
#loc10 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":35:42)
#loc11 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":24:5)
#loc12 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":24:18)
#loc13 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":25:12)
#loc14 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":25:5)
#loc15 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":26:5)
#loc16 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":30:5)
#loc17 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":26:8)
#loc18 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":27:5)
#loc20 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":29:9)
#loc21 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":31:5)
#loc22 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":38:5)
#loc23 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":31:8)
#loc24 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":32:5)
#loc25 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":33:9)
#loc26 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":37:9)
#loc27 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":35:35)
#loc28 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":36:31)
#loc29 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":36:13)
#loc30 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":145:1)
#loc31 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":151:1)
#loc32 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":147:5)
#loc33 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":147:14)
#loc34 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":148:5)
#loc35 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":148:14)
#loc36 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":149:5)
#loc37 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":149:14)
#loc38 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":150:5)
#loc39 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":150:14)
#loc40 = loc("../../../testcasesupport/std_testcase.h":117:1)
#loc41 = loc("../../../testcasesupport/std_testcase.h":117:12)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":58:19)
#loc45 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":70:23)
#loc46 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":46:1)
#loc47 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":73:1)
#loc48 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":65:13)
#loc49 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":65:42)
#loc50 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":48:5)
#loc51 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":48:18)
#loc52 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":49:12)
#loc53 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":49:5)
#loc54 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":50:5)
#loc55 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":54:5)
#loc56 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":50:8)
#loc57 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":51:5)
#loc59 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":53:9)
#loc60 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":55:5)
#loc61 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":72:5)
#loc62 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":55:8)
#loc63 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":56:5)
#loc64 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":59:5)
#loc65 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":61:5)
#loc66 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":58:9)
#loc67 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":63:9)
#loc68 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":71:9)
#loc69 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":63:13)
#loc70 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":63:20)
#loc71 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":64:9)
#loc72 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":67:9)
#loc73 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":69:9)
#loc74 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":65:35)
#loc75 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":66:31)
#loc76 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":66:13)
#loc77 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":70:13)
#loc78 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":76:1)
#loc79 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":98:1)
#loc80 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":90:13)
#loc81 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":90:42)
#loc82 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":78:5)
#loc83 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":78:18)
#loc84 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":79:12)
#loc85 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":79:5)
#loc86 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":80:5)
#loc87 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":84:5)
#loc88 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":80:8)
#loc89 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":81:5)
#loc91 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":83:9)
#loc92 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":85:5)
#loc93 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":97:5)
#loc94 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":85:8)
#loc95 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":86:5)
#loc96 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":88:9)
#loc97 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":96:9)
#loc98 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":88:13)
#loc99 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":88:20)
#loc100 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":89:9)
#loc101 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":92:9)
#loc102 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":94:9)
#loc103 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":90:35)
#loc104 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":91:31)
#loc105 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":91:13)
#loc106 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":95:23)
#loc107 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":95:13)
#loc108 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":101:1)
#loc109 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":123:1)
#loc110 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":119:13)
#loc111 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":119:42)
#loc112 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":103:5)
#loc113 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":103:18)
#loc114 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":104:12)
#loc115 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":104:5)
#loc116 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":105:5)
#loc117 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":114:5)
#loc118 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":105:8)
#loc119 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":106:5)
#loc120 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":109:5)
#loc121 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":111:5)
#loc122 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":108:19)
#loc123 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":108:9)
#loc124 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":113:17)
#loc125 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":113:16)
#loc126 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":113:9)
#loc127 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":115:5)
#loc128 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":122:5)
#loc129 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":115:8)
#loc130 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":116:5)
#loc131 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":117:9)
#loc132 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":121:9)
#loc133 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":119:35)
#loc134 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":120:31)
#loc135 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":120:13)
#loc136 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":126:1)
#loc137 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":143:1)
#loc138 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":139:13)
#loc139 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":139:42)
#loc140 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":128:5)
#loc141 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":128:18)
#loc142 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":129:12)
#loc143 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":129:5)
#loc144 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":130:5)
#loc145 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":134:5)
#loc146 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":130:8)
#loc147 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":131:5)
#loc148 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":133:17)
#loc149 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":133:16)
#loc150 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":133:9)
#loc151 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":135:5)
#loc152 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":142:5)
#loc153 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":135:8)
#loc154 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":136:5)
#loc155 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":137:9)
#loc156 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":141:9)
#loc157 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":139:35)
#loc158 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":140:31)
#loc159 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_10.c":140:13)
#loc160 = loc(fused[#loc1, #loc2])
#loc161 = loc(fused[#loc3, #loc4])
#loc162 = loc(fused[#loc5, #loc6])
#loc163 = loc(fused[#loc7, #loc8])
#loc164 = loc(fused[#loc9, #loc10])
#loc165 = loc(fused[#loc11, #loc12])
#loc166 = loc(fused[#loc14, #loc13])
#loc167 = loc(fused[#loc15, #loc16])
#loc168 = loc(fused[#loc18, #loc16])
#loc169 = loc(fused[#loc20, #loc19])
#loc170 = loc(fused[#loc21, #loc22])
#loc171 = loc(fused[#loc24, #loc22])
#loc172 = loc(fused[#loc25, #loc26])
#loc173 = loc(fused[#loc27, #loc10])
#loc174 = loc(fused[#loc30, #loc31])
#loc175 = loc(fused[#loc32, #loc33])
#loc176 = loc(fused[#loc34, #loc35])
#loc177 = loc(fused[#loc36, #loc37])
#loc178 = loc(fused[#loc38, #loc39])
#loc179 = loc(fused[#loc40, #loc41])
#loc180 = loc(fused[#loc42, #loc43])
#loc181 = loc(fused[#loc46, #loc47])
#loc182 = loc(fused[#loc48, #loc49])
#loc183 = loc(fused[#loc50, #loc51])
#loc184 = loc(fused[#loc53, #loc52])
#loc185 = loc(fused[#loc54, #loc55])
#loc186 = loc(fused[#loc57, #loc55])
#loc187 = loc(fused[#loc59, #loc58])
#loc188 = loc(fused[#loc60, #loc61])
#loc189 = loc(fused[#loc63, #loc64, #loc65, #loc61])
#loc190 = loc(fused[#loc67, #loc68])
#loc191 = loc(fused[#loc69, #loc70])
#loc192 = loc(fused[#loc71, #loc72, #loc73, #loc68])
#loc193 = loc(fused[#loc74, #loc49])
#loc194 = loc(fused[#loc78, #loc79])
#loc195 = loc(fused[#loc80, #loc81])
#loc196 = loc(fused[#loc82, #loc83])
#loc197 = loc(fused[#loc85, #loc84])
#loc198 = loc(fused[#loc86, #loc87])
#loc199 = loc(fused[#loc89, #loc87])
#loc200 = loc(fused[#loc91, #loc90])
#loc201 = loc(fused[#loc92, #loc93])
#loc202 = loc(fused[#loc95, #loc93])
#loc203 = loc(fused[#loc96, #loc97])
#loc204 = loc(fused[#loc98, #loc99])
#loc205 = loc(fused[#loc100, #loc101, #loc102, #loc97])
#loc206 = loc(fused[#loc103, #loc81])
#loc207 = loc(fused[#loc108, #loc109])
#loc208 = loc(fused[#loc110, #loc111])
#loc209 = loc(fused[#loc112, #loc113])
#loc210 = loc(fused[#loc115, #loc114])
#loc211 = loc(fused[#loc116, #loc117])
#loc212 = loc(fused[#loc119, #loc120, #loc121, #loc117])
#loc213 = loc(fused[#loc126, #loc124])
#loc214 = loc(fused[#loc127, #loc128])
#loc215 = loc(fused[#loc130, #loc128])
#loc216 = loc(fused[#loc131, #loc132])
#loc217 = loc(fused[#loc133, #loc111])
#loc218 = loc(fused[#loc136, #loc137])
#loc219 = loc(fused[#loc138, #loc139])
#loc220 = loc(fused[#loc140, #loc141])
#loc221 = loc(fused[#loc143, #loc142])
#loc222 = loc(fused[#loc144, #loc145])
#loc223 = loc(fused[#loc147, #loc145])
#loc224 = loc(fused[#loc150, #loc148])
#loc225 = loc(fused[#loc151, #loc152])
#loc226 = loc(fused[#loc154, #loc152])
#loc227 = loc(fused[#loc155, #loc156])
#loc228 = loc(fused[#loc157, #loc139])
