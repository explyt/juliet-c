!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":113:10)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":113:14)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":113:20)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":113:32)
#loc175 = loc(fused[#loc63, #loc64])
#loc176 = loc(fused[#loc65, #loc66])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc153)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc154)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc155)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printDoubleLine(!cir.double) loc(#loc156)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc157)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc159)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc16)
    cir.store %1, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc160)
    cir.scope {
      %7 = cir.const #cir.int<6> : !s32i loc(#loc20)
      cir.switch (%7 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc22)
          %9 = cir.const #cir.int<8> : !u64i loc(#loc162)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc163)
          cir.store %11, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc164)
          cir.scope {
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc29)
            %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc30)
            %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!cir.double>, !cir.bool loc(#loc166)
            cir.if %17 {
              %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc33)
              %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc34)
              cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
            } loc(#loc167)
          } loc(#loc165)
          %12 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc35)
          %13 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc36)
          cir.store %12, %13 : !cir.double, !cir.ptr<!cir.double> loc(#loc168)
          cir.break loc(#loc38)
        } loc(#loc21)
        cir.case(default, []) {
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc40)
          cir.break loc(#loc41)
        } loc(#loc39)
        cir.yield loc(#loc18)
      } loc(#loc18)
    } loc(#loc161)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc42)
    %3 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc43)
    cir.call @printDoubleLine(%3) : (!cir.double) -> () loc(#loc44)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc45)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc46)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc46)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc45)
    cir.return loc(#loc13)
  } loc(#loc158)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc170)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc171)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    cir.return loc(#loc48)
  } loc(#loc169)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc172)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc173)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc60)
  cir.func @main(%arg0: !s32i loc(fused[#loc63, #loc64]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc65, #loc66])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc175)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc176)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc62)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc67)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc67)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc68)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc69)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc69)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc70)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc57)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc177)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15_good() : () -> () loc(#loc72)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc58)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc59)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15_bad() : () -> () loc(#loc76)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc60)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc79)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc179)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc179)
    cir.return %17 : !s32i loc(#loc179)
  } loc(#loc174)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc181)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc85)
    cir.store %1, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc182)
    cir.scope {
      %7 = cir.const #cir.int<5> : !s32i loc(#loc89)
      cir.switch (%7 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc91)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc91)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc92)
          cir.break loc(#loc93)
        } loc(#loc90)
        cir.case(default, []) {
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc95)
          %9 = cir.const #cir.int<8> : !u64i loc(#loc184)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc95)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc185)
          cir.store %11, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc186)
          cir.scope {
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc102)
            %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc103)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc103)
            %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!cir.double>, !cir.bool loc(#loc188)
            cir.if %17 {
              %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc105)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc106)
              %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc107)
              cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc105)
            } loc(#loc189)
          } loc(#loc187)
          %12 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc108)
          %13 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc109)
          cir.store %12, %13 : !cir.double, !cir.ptr<!cir.double> loc(#loc190)
          cir.break loc(#loc111)
        } loc(#loc94)
        cir.yield loc(#loc87)
      } loc(#loc87)
    } loc(#loc183)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc112)
    %3 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc113)
    cir.call @printDoubleLine(%3) : (!cir.double) -> () loc(#loc114)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc115)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc116)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc116)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc115)
    cir.return loc(#loc82)
  } loc(#loc180)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc192)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc121)
    cir.store %1, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc193)
    cir.scope {
      %7 = cir.const #cir.int<6> : !s32i loc(#loc125)
      cir.switch (%7 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc127)
          %9 = cir.const #cir.int<8> : !u64i loc(#loc195)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc127)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc196)
          cir.store %11, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc197)
          cir.scope {
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc134)
            %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc135)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc135)
            %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!cir.double>, !cir.bool loc(#loc199)
            cir.if %17 {
              %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc137)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc138)
              %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc139)
              cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc137)
            } loc(#loc200)
          } loc(#loc198)
          %12 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc140)
          %13 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc141)
          cir.store %12, %13 : !cir.double, !cir.ptr<!cir.double> loc(#loc201)
          cir.break loc(#loc143)
        } loc(#loc126)
        cir.case(default, []) {
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc145)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc145)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc146)
          cir.break loc(#loc147)
        } loc(#loc144)
        cir.yield loc(#loc123)
      } loc(#loc123)
    } loc(#loc194)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc148)
    %3 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc149)
    cir.call @printDoubleLine(%3) : (!cir.double) -> () loc(#loc150)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc151)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc152)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc152)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc151)
    cir.return loc(#loc118)
  } loc(#loc191)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":37:19)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":38:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":38:41)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":21:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":43:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":23:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":23:14)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":25:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":25:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":26:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":39:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":26:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":28:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":31:26)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":31:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":31:44)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":31:45)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":31:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":32:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":32:37)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":32:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":32:21)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":32:27)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":32:28)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":32:34)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":32:33)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":33:17)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":33:10)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":33:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":34:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":35:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":37:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":38:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":41:22)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":41:21)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":41:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":42:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":42:10)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":97:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":101:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":99:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":99:14)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":100:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":100:14)
#loc53 = loc("/usr/include/stdlib.h":575:1)
#loc54 = loc("/usr/include/stdlib.h":575:41)
#loc55 = loc("/usr/include/time.h":76:1)
#loc56 = loc("/usr/include/time.h":76:38)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":118:15)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":120:15)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":123:15)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":125:15)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":113:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":128:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":114:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":116:27)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":116:22)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":116:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":118:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":119:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":119:62)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":120:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":123:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":124:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":124:61)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":125:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":127:12)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":127:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":50:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":71:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":52:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":52:14)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":54:12)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":54:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":55:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":67:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":55:12)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":57:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":59:19)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":59:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":60:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":61:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":63:26)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":63:33)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":63:45)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":63:46)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":63:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":64:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":64:37)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":64:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":64:21)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":64:27)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":64:28)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":64:34)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":64:33)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":65:17)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":65:10)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":65:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":66:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":69:22)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":69:21)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":69:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":70:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":70:10)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":74:1)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":95:1)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":76:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":76:14)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":78:12)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":78:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":79:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":91:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":79:12)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":81:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":83:26)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":83:33)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":83:45)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":83:46)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":83:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":84:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":84:37)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":84:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":84:21)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":84:27)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":84:28)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":84:34)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":84:33)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":85:17)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":85:10)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":85:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":86:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":87:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":89:19)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":89:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":90:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":93:22)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":93:21)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":93:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":94:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c":94:10)
#loc153 = loc(fused[#loc1, #loc2])
#loc154 = loc(fused[#loc3, #loc4])
#loc155 = loc(fused[#loc5, #loc6])
#loc156 = loc(fused[#loc8, #loc9])
#loc157 = loc(fused[#loc10, #loc11])
#loc158 = loc(fused[#loc12, #loc13])
#loc159 = loc(fused[#loc14, #loc15])
#loc160 = loc(fused[#loc17, #loc16])
#loc161 = loc(fused[#loc18, #loc19])
#loc162 = loc(fused[#loc23, #loc24])
#loc163 = loc(fused[#loc22, #loc25])
#loc164 = loc(fused[#loc26, #loc25])
#loc165 = loc(fused[#loc27, #loc28])
#loc166 = loc(fused[#loc29, #loc30])
#loc167 = loc(fused[#loc31, #loc28])
#loc168 = loc(fused[#loc37, #loc35])
#loc169 = loc(fused[#loc47, #loc48])
#loc170 = loc(fused[#loc49, #loc50])
#loc171 = loc(fused[#loc51, #loc52])
#loc172 = loc(fused[#loc53, #loc54])
#loc173 = loc(fused[#loc55, #loc56])
#loc174 = loc(fused[#loc61, #loc62])
#loc177 = loc(fused[#loc72, #loc73])
#loc178 = loc(fused[#loc76, #loc77])
#loc179 = loc(fused[#loc80, #loc79])
#loc180 = loc(fused[#loc81, #loc82])
#loc181 = loc(fused[#loc83, #loc84])
#loc182 = loc(fused[#loc86, #loc85])
#loc183 = loc(fused[#loc87, #loc88])
#loc184 = loc(fused[#loc96, #loc97])
#loc185 = loc(fused[#loc95, #loc98])
#loc186 = loc(fused[#loc99, #loc98])
#loc187 = loc(fused[#loc100, #loc101])
#loc188 = loc(fused[#loc102, #loc103])
#loc189 = loc(fused[#loc104, #loc101])
#loc190 = loc(fused[#loc110, #loc108])
#loc191 = loc(fused[#loc117, #loc118])
#loc192 = loc(fused[#loc119, #loc120])
#loc193 = loc(fused[#loc122, #loc121])
#loc194 = loc(fused[#loc123, #loc124])
#loc195 = loc(fused[#loc128, #loc129])
#loc196 = loc(fused[#loc127, #loc130])
#loc197 = loc(fused[#loc131, #loc130])
#loc198 = loc(fused[#loc132, #loc133])
#loc199 = loc(fused[#loc134, #loc135])
#loc200 = loc(fused[#loc136, #loc133])
#loc201 = loc(fused[#loc142, #loc140])
