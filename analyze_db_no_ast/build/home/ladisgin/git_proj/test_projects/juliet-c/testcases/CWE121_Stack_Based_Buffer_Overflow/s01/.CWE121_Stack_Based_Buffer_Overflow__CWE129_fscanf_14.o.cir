!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @globalFive : !s32i {alignment = 4 : i64} loc(#loc307)
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc308)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc309)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private  @printIntLine(!s32i) loc(#loc310)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc311)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc313)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc18)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc314)
    cir.scope {
      %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc307)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc23)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !s32i loc(#loc316)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc24)
      cir.if %7 {
        %8 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc26)
        %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc309)
        %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc27)
        %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
        %13 = cir.call @__isoc99_fscanf(%10, %12, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc26)
      } loc(#loc317)
    } loc(#loc315)
    cir.scope {
      %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc307)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc30)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc31)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !s32i loc(#loc319)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc32)
      cir.if %7 {
        cir.scope {
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc322)
          %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc323)
          %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc323)
          cir.store %10, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc323)
          cir.scope {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
            %12 = cir.const #cir.int<0> : !s32i loc(#loc43)
            %13 = cir.cmp(ge, %11, %12) : !s32i, !s32i loc(#loc325)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc44)
            cir.if %14 {
              %15 = cir.const #cir.int<1> : !s32i loc(#loc48)
              %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
              %17 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc50)
              %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc50)
              cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc327)
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc53)
                cir.store %19, %8 : !s32i, !cir.ptr<!s32i> loc(#loc329)
                cir.for : cond {
                  %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc55)
                  %21 = cir.const #cir.int<10> : !s32i loc(#loc56)
                  %22 = cir.cmp(lt, %20, %21) : !s32i, !s32i loc(#loc330)
                  %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc57)
                  cir.condition(%23) loc(#loc57)
                } body {
                  cir.scope {
                    %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc59)
                    %21 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc60)
                    %22 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc60)
                    %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc60)
                    cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc61)
                  } loc(#loc331)
                  cir.yield loc(#loc52)
                } step {
                  %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc62)
                  %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc63)
                  cir.store %21, %8 : !s32i, !cir.ptr<!s32i> loc(#loc332)
                  cir.yield loc(#loc328)
                } loc(#loc328)
              } loc(#loc328)
            } else {
              %15 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc12)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc12)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc64)
            } loc(#loc326)
          } loc(#loc324)
        } loc(#loc321)
      } loc(#loc320)
    } loc(#loc318)
    cir.return loc(#loc14)
  } loc(#loc312)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc334)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc335)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc336)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc71)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc337)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc73)
    cir.return loc(#loc66)
  } loc(#loc333)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc75)
  cir.global "private"  constant internal dsolocal @".str3" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc76)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc339)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc82)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc340)
    cir.scope {
      %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc307)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc86)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc87)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !s32i loc(#loc342)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc88)
      cir.if %7 {
        %8 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc90)
        %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc309)
        %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc91)
        %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc92)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc92)
        %13 = cir.call @__isoc99_fscanf(%10, %12, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc90)
      } loc(#loc343)
    } loc(#loc341)
    cir.scope {
      %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc307)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc95)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc96)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !s32i loc(#loc345)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc97)
      cir.if %7 {
        %8 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc75)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc75)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc101)
      } else {
        cir.scope {
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc348)
          %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc349)
          %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc349)
          cir.store %10, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc349)
          cir.scope {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
            %12 = cir.const #cir.int<0> : !s32i loc(#loc111)
            %13 = cir.cmp(ge, %11, %12) : !s32i, !s32i loc(#loc351)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc112)
            %15 = cir.ternary(%14, true {
              %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc115)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc352)
              %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc117)
              %20 = cir.ternary(%19, true {
                %21 = cir.const #true loc(#loc113)
                cir.yield %21 : !cir.bool loc(#loc113)
              }, false {
                %21 = cir.const #false loc(#loc113)
                cir.yield %21 : !cir.bool loc(#loc113)
              }) : (!cir.bool) -> !cir.bool loc(#loc113)
              cir.yield %20 : !cir.bool loc(#loc113)
            }, false {
              %16 = cir.const #false loc(#loc113)
              cir.yield %16 : !cir.bool loc(#loc113)
            }) : (!cir.bool) -> !cir.bool loc(#loc113)
            cir.if %15 {
              %16 = cir.const #cir.int<1> : !s32i loc(#loc121)
              %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
              %18 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc123)
              %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc123)
              cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc354)
              cir.scope {
                %20 = cir.const #cir.int<0> : !s32i loc(#loc126)
                cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc356)
                cir.for : cond {
                  %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc128)
                  %22 = cir.const #cir.int<10> : !s32i loc(#loc129)
                  %23 = cir.cmp(lt, %21, %22) : !s32i, !s32i loc(#loc357)
                  %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc130)
                  cir.condition(%24) loc(#loc130)
                } body {
                  cir.scope {
                    %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc132)
                    %22 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc133)
                    %23 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc133)
                    %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc133)
                    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc134)
                  } loc(#loc358)
                  cir.yield loc(#loc125)
                } step {
                  %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc135)
                  %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc136)
                  cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc359)
                  cir.yield loc(#loc355)
                } loc(#loc355)
              } loc(#loc355)
            } else {
              %16 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc76)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc76)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc137)
            } loc(#loc353)
          } loc(#loc350)
        } loc(#loc347)
      } loc(#loc346)
    } loc(#loc344)
    cir.return loc(#loc78)
  } loc(#loc338)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc361)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc142)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc143)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc362)
    cir.scope {
      %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc307)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc147)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc148)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !s32i loc(#loc364)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc149)
      cir.if %7 {
        %8 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc151)
        %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc309)
        %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc152)
        %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc153)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc153)
        %13 = cir.call @__isoc99_fscanf(%10, %12, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc151)
      } loc(#loc365)
    } loc(#loc363)
    cir.scope {
      %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc307)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc156)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc157)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !s32i loc(#loc367)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc158)
      cir.if %7 {
        cir.scope {
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc370)
          %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc371)
          %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc371)
          cir.store %10, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc371)
          cir.scope {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc168)
            %12 = cir.const #cir.int<0> : !s32i loc(#loc169)
            %13 = cir.cmp(ge, %11, %12) : !s32i, !s32i loc(#loc373)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc170)
            %15 = cir.ternary(%14, true {
              %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc172)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc173)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc374)
              %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc175)
              %20 = cir.ternary(%19, true {
                %21 = cir.const #true loc(#loc171)
                cir.yield %21 : !cir.bool loc(#loc171)
              }, false {
                %21 = cir.const #false loc(#loc171)
                cir.yield %21 : !cir.bool loc(#loc171)
              }) : (!cir.bool) -> !cir.bool loc(#loc171)
              cir.yield %20 : !cir.bool loc(#loc171)
            }, false {
              %16 = cir.const #false loc(#loc171)
              cir.yield %16 : !cir.bool loc(#loc171)
            }) : (!cir.bool) -> !cir.bool loc(#loc171)
            cir.if %15 {
              %16 = cir.const #cir.int<1> : !s32i loc(#loc179)
              %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc180)
              %18 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc181)
              %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc181)
              cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc376)
              cir.scope {
                %20 = cir.const #cir.int<0> : !s32i loc(#loc184)
                cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc378)
                cir.for : cond {
                  %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc186)
                  %22 = cir.const #cir.int<10> : !s32i loc(#loc187)
                  %23 = cir.cmp(lt, %21, %22) : !s32i, !s32i loc(#loc379)
                  %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc188)
                  cir.condition(%24) loc(#loc188)
                } body {
                  cir.scope {
                    %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc190)
                    %22 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc191)
                    %23 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc191)
                    %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc191)
                    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc192)
                  } loc(#loc380)
                  cir.yield loc(#loc183)
                } step {
                  %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc193)
                  %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc194)
                  cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc381)
                  cir.yield loc(#loc377)
                } loc(#loc377)
              } loc(#loc377)
            } else {
              %16 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc195)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc195)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc196)
            } loc(#loc375)
          } loc(#loc372)
        } loc(#loc369)
      } loc(#loc368)
    } loc(#loc366)
    cir.return loc(#loc139)
  } loc(#loc360)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc383)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc201)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc202)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc384)
    cir.scope {
      %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc307)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc206)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc207)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !s32i loc(#loc386)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc208)
      cir.if %7 {
        %8 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc212)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc212)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc213)
      } else {
        %8 = cir.const #cir.int<7> : !s32i loc(#loc214)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc388)
      } loc(#loc387)
    } loc(#loc385)
    cir.scope {
      %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc307)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc218)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc219)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !s32i loc(#loc390)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc220)
      cir.if %7 {
        cir.scope {
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc393)
          %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc394)
          %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc394)
          cir.store %10, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc394)
          cir.scope {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc230)
            %12 = cir.const #cir.int<0> : !s32i loc(#loc231)
            %13 = cir.cmp(ge, %11, %12) : !s32i, !s32i loc(#loc396)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc232)
            cir.if %14 {
              %15 = cir.const #cir.int<1> : !s32i loc(#loc236)
              %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc237)
              %17 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc238)
              %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc238)
              cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc398)
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc241)
                cir.store %19, %8 : !s32i, !cir.ptr<!s32i> loc(#loc400)
                cir.for : cond {
                  %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc243)
                  %21 = cir.const #cir.int<10> : !s32i loc(#loc244)
                  %22 = cir.cmp(lt, %20, %21) : !s32i, !s32i loc(#loc401)
                  %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc245)
                  cir.condition(%23) loc(#loc245)
                } body {
                  cir.scope {
                    %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc247)
                    %21 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc248)
                    %22 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc248)
                    %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc248)
                    cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc249)
                  } loc(#loc402)
                  cir.yield loc(#loc240)
                } step {
                  %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc250)
                  %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc251)
                  cir.store %21, %8 : !s32i, !cir.ptr<!s32i> loc(#loc403)
                  cir.yield loc(#loc399)
                } loc(#loc399)
              } loc(#loc399)
            } else {
              %15 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc252)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc252)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc253)
            } loc(#loc397)
          } loc(#loc395)
        } loc(#loc392)
      } loc(#loc391)
    } loc(#loc389)
    cir.return loc(#loc198)
  } loc(#loc382)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc405)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc258)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc259)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc406)
    cir.scope {
      %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc307)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc263)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc264)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !s32i loc(#loc408)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc265)
      cir.if %7 {
        %8 = cir.const #cir.int<7> : !s32i loc(#loc267)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc410)
      } loc(#loc409)
    } loc(#loc407)
    cir.scope {
      %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc307)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc271)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc272)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !s32i loc(#loc412)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc273)
      cir.if %7 {
        cir.scope {
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc415)
          %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc416)
          %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc416)
          cir.store %10, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc416)
          cir.scope {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc283)
            %12 = cir.const #cir.int<0> : !s32i loc(#loc284)
            %13 = cir.cmp(ge, %11, %12) : !s32i, !s32i loc(#loc418)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc285)
            cir.if %14 {
              %15 = cir.const #cir.int<1> : !s32i loc(#loc289)
              %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc290)
              %17 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc291)
              %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc291)
              cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc420)
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc294)
                cir.store %19, %8 : !s32i, !cir.ptr<!s32i> loc(#loc422)
                cir.for : cond {
                  %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc296)
                  %21 = cir.const #cir.int<10> : !s32i loc(#loc297)
                  %22 = cir.cmp(lt, %20, %21) : !s32i, !s32i loc(#loc423)
                  %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc298)
                  cir.condition(%23) loc(#loc298)
                } body {
                  cir.scope {
                    %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc300)
                    %21 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc301)
                    %22 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc301)
                    %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc301)
                    cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc302)
                  } loc(#loc424)
                  cir.yield loc(#loc293)
                } step {
                  %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc303)
                  %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc304)
                  cir.store %21, %8 : !s32i, !cir.ptr<!s32i> loc(#loc425)
                  cir.yield loc(#loc421)
                } loc(#loc421)
              } loc(#loc421)
            } else {
              %15 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc305)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc305)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc306)
            } loc(#loc419)
          } loc(#loc417)
        } loc(#loc414)
      } loc(#loc413)
    } loc(#loc411)
    cir.return loc(#loc255)
  } loc(#loc404)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":118:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":118:12)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":30:23)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":50:27)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":22:1)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":54:1)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":24:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":24:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":26:13)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":26:12)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":26:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":27:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":31:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":27:8)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":27:20)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":27:18)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":28:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":30:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":30:16)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":32:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":53:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":32:8)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":32:20)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":32:18)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":33:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":34:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":52:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":35:13)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":35:17)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":36:13)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":36:34)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":39:13)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":51:13)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":39:17)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":39:25)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":39:22)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":40:13)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":47:13)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":49:13)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":41:32)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":41:24)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":41:17)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":43:17)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":46:17)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":43:25)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":43:21)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":43:28)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":43:32)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":43:30)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":44:17)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":45:41)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":45:34)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":45:21)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":43:37)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":43:36)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":50:17)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":210:1)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":216:1)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":212:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":212:14)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":213:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":213:14)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":214:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":214:14)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":215:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":215:14)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":74:19)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":93:27)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":61:1)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":97:1)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":63:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":63:9)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":65:13)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":65:12)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":65:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":66:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":70:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":66:8)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":66:20)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":66:18)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":67:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":69:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":69:16)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":69:23)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":71:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":96:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":71:8)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":71:20)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":71:18)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":72:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":75:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":77:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":74:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":78:9)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":95:9)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":79:13)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":79:17)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":80:13)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":80:34)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":82:13)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":94:13)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":82:17)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":82:25)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":82:22)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":82:27)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":82:30)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":82:38)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":82:40)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":82:35)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":83:13)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":90:13)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":92:13)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":84:32)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":84:24)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":84:17)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":86:17)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":89:17)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":86:25)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":86:21)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":86:28)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":86:32)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":86:30)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":87:17)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":88:41)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":88:34)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":88:21)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":86:37)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":86:36)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":93:17)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":100:1)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":131:1)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":102:5)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":102:9)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":104:13)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":104:12)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":104:5)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":105:5)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":109:5)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":105:8)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":105:20)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":105:18)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":106:5)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":108:9)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":108:16)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":108:23)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":110:5)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":130:5)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":110:8)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":110:20)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":110:18)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":111:5)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":112:9)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":129:9)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":113:13)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":113:17)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":114:13)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":114:34)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":116:13)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":128:13)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":116:17)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":116:25)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":116:22)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":116:27)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":116:30)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":116:38)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":116:40)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":116:35)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":117:13)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":124:13)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":126:13)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":118:32)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":118:24)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":118:17)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":120:17)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":123:17)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":120:25)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":120:21)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":120:28)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":120:32)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":120:30)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":121:17)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":122:41)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":122:34)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":122:21)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":120:37)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":120:36)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":127:27)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":127:17)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":134:1)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":172:1)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":136:5)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":136:9)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":138:13)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":138:12)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":138:5)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":139:5)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":149:5)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":139:8)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":139:20)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":139:18)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":140:5)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":143:5)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":145:5)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":142:19)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":142:9)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":148:16)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":148:9)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":150:5)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":171:5)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":150:8)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":150:20)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":150:18)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":151:5)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":152:9)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":170:9)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":153:13)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":153:17)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":154:13)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":154:34)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":157:13)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":169:13)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":157:17)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":157:25)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":157:22)
#loc233 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":158:13)
#loc234 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":165:13)
#loc235 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":167:13)
#loc236 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":159:32)
#loc237 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":159:24)
#loc238 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":159:17)
#loc239 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":161:17)
#loc240 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":164:17)
#loc241 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":161:25)
#loc242 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":161:21)
#loc243 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":161:28)
#loc244 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":161:32)
#loc245 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":161:30)
#loc246 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":162:17)
#loc247 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":163:41)
#loc248 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":163:34)
#loc249 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":163:21)
#loc250 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":161:37)
#loc251 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":161:36)
#loc252 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":168:27)
#loc253 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":168:17)
#loc254 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":175:1)
#loc255 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":208:1)
#loc256 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":177:5)
#loc257 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":177:9)
#loc258 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":179:13)
#loc259 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":179:12)
#loc260 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":179:5)
#loc261 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":180:5)
#loc262 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":185:5)
#loc263 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":180:8)
#loc264 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":180:20)
#loc265 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":180:18)
#loc266 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":181:5)
#loc267 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":184:16)
#loc268 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":184:9)
#loc269 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":186:5)
#loc270 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":207:5)
#loc271 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":186:8)
#loc272 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":186:20)
#loc273 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":186:18)
#loc274 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":187:5)
#loc275 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":188:9)
#loc276 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":206:9)
#loc277 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":189:13)
#loc278 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":189:17)
#loc279 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":190:13)
#loc280 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":190:34)
#loc281 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":193:13)
#loc282 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":205:13)
#loc283 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":193:17)
#loc284 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":193:25)
#loc285 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":193:22)
#loc286 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":194:13)
#loc287 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":201:13)
#loc288 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":203:13)
#loc289 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":195:32)
#loc290 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":195:24)
#loc291 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":195:17)
#loc292 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":197:17)
#loc293 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":200:17)
#loc294 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":197:25)
#loc295 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":197:21)
#loc296 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":197:28)
#loc297 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":197:32)
#loc298 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":197:30)
#loc299 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":198:17)
#loc300 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":199:41)
#loc301 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":199:34)
#loc302 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":199:21)
#loc303 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":197:37)
#loc304 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":197:36)
#loc305 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":204:27)
#loc306 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c":204:17)
#loc307 = loc(fused[#loc1, #loc2])
#loc308 = loc(fused[#loc3, #loc4])
#loc309 = loc(fused[#loc5, #loc6])
#loc310 = loc(fused[#loc8, #loc9])
#loc311 = loc(fused[#loc10, #loc11])
#loc312 = loc(fused[#loc13, #loc14])
#loc313 = loc(fused[#loc15, #loc16])
#loc314 = loc(fused[#loc19, #loc17])
#loc315 = loc(fused[#loc20, #loc21])
#loc316 = loc(fused[#loc22, #loc23])
#loc317 = loc(fused[#loc25, #loc21])
#loc318 = loc(fused[#loc28, #loc29])
#loc319 = loc(fused[#loc30, #loc31])
#loc320 = loc(fused[#loc33, #loc29])
#loc321 = loc(fused[#loc34, #loc35])
#loc322 = loc(fused[#loc36, #loc37])
#loc323 = loc(fused[#loc38, #loc39])
#loc324 = loc(fused[#loc40, #loc41])
#loc325 = loc(fused[#loc42, #loc43])
#loc326 = loc(fused[#loc45, #loc46, #loc47, #loc41])
#loc327 = loc(fused[#loc50, #loc48])
#loc328 = loc(fused[#loc51, #loc52])
#loc329 = loc(fused[#loc54, #loc53])
#loc330 = loc(fused[#loc55, #loc56])
#loc331 = loc(fused[#loc58, #loc52])
#loc332 = loc(fused[#loc63, #loc62])
#loc333 = loc(fused[#loc65, #loc66])
#loc334 = loc(fused[#loc67, #loc68])
#loc335 = loc(fused[#loc69, #loc70])
#loc336 = loc(fused[#loc71, #loc72])
#loc337 = loc(fused[#loc73, #loc74])
#loc338 = loc(fused[#loc77, #loc78])
#loc339 = loc(fused[#loc79, #loc80])
#loc340 = loc(fused[#loc83, #loc81])
#loc341 = loc(fused[#loc84, #loc85])
#loc342 = loc(fused[#loc86, #loc87])
#loc343 = loc(fused[#loc89, #loc85])
#loc344 = loc(fused[#loc93, #loc94])
#loc345 = loc(fused[#loc95, #loc96])
#loc346 = loc(fused[#loc98, #loc99, #loc100, #loc94])
#loc347 = loc(fused[#loc102, #loc103])
#loc348 = loc(fused[#loc104, #loc105])
#loc349 = loc(fused[#loc106, #loc107])
#loc350 = loc(fused[#loc108, #loc109])
#loc351 = loc(fused[#loc110, #loc111])
#loc352 = loc(fused[#loc114, #loc116])
#loc353 = loc(fused[#loc118, #loc119, #loc120, #loc109])
#loc354 = loc(fused[#loc123, #loc121])
#loc355 = loc(fused[#loc124, #loc125])
#loc356 = loc(fused[#loc127, #loc126])
#loc357 = loc(fused[#loc128, #loc129])
#loc358 = loc(fused[#loc131, #loc125])
#loc359 = loc(fused[#loc136, #loc135])
#loc360 = loc(fused[#loc138, #loc139])
#loc361 = loc(fused[#loc140, #loc141])
#loc362 = loc(fused[#loc144, #loc142])
#loc363 = loc(fused[#loc145, #loc146])
#loc364 = loc(fused[#loc147, #loc148])
#loc365 = loc(fused[#loc150, #loc146])
#loc366 = loc(fused[#loc154, #loc155])
#loc367 = loc(fused[#loc156, #loc157])
#loc368 = loc(fused[#loc159, #loc155])
#loc369 = loc(fused[#loc160, #loc161])
#loc370 = loc(fused[#loc162, #loc163])
#loc371 = loc(fused[#loc164, #loc165])
#loc372 = loc(fused[#loc166, #loc167])
#loc373 = loc(fused[#loc168, #loc169])
#loc374 = loc(fused[#loc172, #loc174])
#loc375 = loc(fused[#loc176, #loc177, #loc178, #loc167])
#loc376 = loc(fused[#loc181, #loc179])
#loc377 = loc(fused[#loc182, #loc183])
#loc378 = loc(fused[#loc185, #loc184])
#loc379 = loc(fused[#loc186, #loc187])
#loc380 = loc(fused[#loc189, #loc183])
#loc381 = loc(fused[#loc194, #loc193])
#loc382 = loc(fused[#loc197, #loc198])
#loc383 = loc(fused[#loc199, #loc200])
#loc384 = loc(fused[#loc203, #loc201])
#loc385 = loc(fused[#loc204, #loc205])
#loc386 = loc(fused[#loc206, #loc207])
#loc387 = loc(fused[#loc209, #loc210, #loc211, #loc205])
#loc388 = loc(fused[#loc215, #loc214])
#loc389 = loc(fused[#loc216, #loc217])
#loc390 = loc(fused[#loc218, #loc219])
#loc391 = loc(fused[#loc221, #loc217])
#loc392 = loc(fused[#loc222, #loc223])
#loc393 = loc(fused[#loc224, #loc225])
#loc394 = loc(fused[#loc226, #loc227])
#loc395 = loc(fused[#loc228, #loc229])
#loc396 = loc(fused[#loc230, #loc231])
#loc397 = loc(fused[#loc233, #loc234, #loc235, #loc229])
#loc398 = loc(fused[#loc238, #loc236])
#loc399 = loc(fused[#loc239, #loc240])
#loc400 = loc(fused[#loc242, #loc241])
#loc401 = loc(fused[#loc243, #loc244])
#loc402 = loc(fused[#loc246, #loc240])
#loc403 = loc(fused[#loc251, #loc250])
#loc404 = loc(fused[#loc254, #loc255])
#loc405 = loc(fused[#loc256, #loc257])
#loc406 = loc(fused[#loc260, #loc258])
#loc407 = loc(fused[#loc261, #loc262])
#loc408 = loc(fused[#loc263, #loc264])
#loc409 = loc(fused[#loc266, #loc262])
#loc410 = loc(fused[#loc268, #loc267])
#loc411 = loc(fused[#loc269, #loc270])
#loc412 = loc(fused[#loc271, #loc272])
#loc413 = loc(fused[#loc274, #loc270])
#loc414 = loc(fused[#loc275, #loc276])
#loc415 = loc(fused[#loc277, #loc278])
#loc416 = loc(fused[#loc279, #loc280])
#loc417 = loc(fused[#loc281, #loc282])
#loc418 = loc(fused[#loc283, #loc284])
#loc419 = loc(fused[#loc286, #loc287, #loc288, #loc282])
#loc420 = loc(fused[#loc291, #loc289])
#loc421 = loc(fused[#loc292, #loc293])
#loc422 = loc(fused[#loc295, #loc294])
#loc423 = loc(fused[#loc296, #loc297])
#loc424 = loc(fused[#loc299, #loc293])
#loc425 = loc(fused[#loc304, #loc303])
