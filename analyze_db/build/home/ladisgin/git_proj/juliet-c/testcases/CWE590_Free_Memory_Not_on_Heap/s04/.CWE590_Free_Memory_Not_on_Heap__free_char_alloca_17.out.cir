!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc58 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":88:10)
#loc59 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":88:14)
#loc60 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":88:20)
#loc61 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":88:32)
#loc153 = loc(fused[#loc58, #loc59])
#loc154 = loc(fused[#loc60, #loc61])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE590_Free_Memory_Not_on_Heap/s04/CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc132)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc133)
  cir.func no_proto @CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc135)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc11)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc137)
    cir.scope {
      %7 = cir.const #cir.int<0> : !s32i loc(#loc15)
      cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc139)
      cir.for : cond {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc140)
        cir.condition(%10) loc(#loc19)
      } body {
        cir.scope {
          cir.scope {
            %8 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc143)
            %9 = cir.const #cir.int<100> : !s32i loc(#loc24)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc24)
            %11 = cir.const #cir.int<1> : !u64i loc(#loc24)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc24)
            %13 = cir.alloca !u8i, !cir.ptr<!u8i>, %12 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc24)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc24)
            %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc24)
            cir.store %15, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc143)
            %16 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc25)
            %18 = cir.const #cir.int<65> : !s32i loc(#loc26)
            %19 = cir.const #cir.int<100> : !s32i loc(#loc27)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc28)
            %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc27)
            %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc27)
            cir.libc.memset %22 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc144)
            %23 = cir.const #cir.int<0> : !s32i loc(#loc31)
            %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc31)
            %25 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
            %26 = cir.const #cir.int<100> : !s32i loc(#loc33)
            %27 = cir.const #cir.int<1> : !s32i loc(#loc34)
            %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc33)
            %29 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc35)
            cir.store %24, %29 : !s8i, !cir.ptr<!s8i> loc(#loc145)
            %30 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
            cir.store %30, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc146)
          } loc(#loc142)
        } loc(#loc141)
        cir.yield loc(#loc14)
      } step {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
        %9 = cir.unary(inc, %8) : !s32i, !s32i loc(#loc39)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
        cir.yield loc(#loc138)
      } loc(#loc138)
    } loc(#loc138)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc41)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc42)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc43)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc42)
    cir.return loc(#loc6)
  } loc(#loc134)
  cir.func no_proto @CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc149)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc45)
  } loc(#loc148)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc150)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc151)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc55)
  cir.func @main(%arg0: !s32i loc(fused[#loc58, #loc59]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc60, #loc61])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc153)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc154)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc57)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc62)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc62)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc63)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc64)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc64)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc65)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc52)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %8 = cir.get_global @CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc155)
    cir.call @CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17_good() : () -> () loc(#loc67)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc53)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc54)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %13 = cir.get_global @CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call @CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17_bad() : () -> () loc(#loc71)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc55)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc74)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    cir.return %17 : !s32i loc(#loc157)
  } loc(#loc152)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc158)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"malloc() failed\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc78)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc159)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc161)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc162)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc87)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc163)
    cir.scope {
      %7 = cir.const #cir.int<0> : !s32i loc(#loc91)
      cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
      cir.for : cond {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc94)
        %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc166)
        cir.condition(%10) loc(#loc95)
      } body {
        cir.scope {
          cir.scope {
            %8 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc169)
            %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc101)
            %10 = cir.const #cir.int<100> : !s32i loc(#loc102)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc102)
            %12 = cir.const #cir.int<1> : !u64i loc(#loc170)
            %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc171)
            %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc101)
            %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc172)
            cir.store %15, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc169)
            cir.scope {
              %31 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
              %32 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc108)
              %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc108)
              %34 = cir.cmp(eq, %31, %33) : !cir.ptr<!s8i>, !cir.bool loc(#loc174)
              cir.if %34 {
                %35 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc78)
                %36 = cir.cast(array_to_ptrdecay, %35 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc78)
                cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc110)
                %37 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc111)
                %38 = cir.const #cir.int<1> : !s32i loc(#loc112)
                cir.call @exit(%38) : (!s32i) -> () extra(#fn_attr) loc(#loc111)
              } loc(#loc175)
            } loc(#loc173)
            %16 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc113)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc113)
            %18 = cir.const #cir.int<65> : !s32i loc(#loc114)
            %19 = cir.const #cir.int<100> : !s32i loc(#loc115)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc116)
            %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc115)
            %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc115)
            cir.libc.memset %22 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc176)
            %23 = cir.const #cir.int<0> : !s32i loc(#loc119)
            %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc119)
            %25 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
            %26 = cir.const #cir.int<100> : !s32i loc(#loc121)
            %27 = cir.const #cir.int<1> : !s32i loc(#loc122)
            %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc121)
            %29 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc123)
            cir.store %24, %29 : !s8i, !cir.ptr<!s8i> loc(#loc177)
            %30 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
            cir.store %30, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc178)
          } loc(#loc168)
        } loc(#loc167)
        cir.yield loc(#loc90)
      } step {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc126)
        %9 = cir.unary(inc, %8) : !s32i, !s32i loc(#loc127)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc179)
        cir.yield loc(#loc164)
      } loc(#loc164)
    } loc(#loc164)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
    cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc129)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc130)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc131)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc130)
    cir.return loc(#loc82)
  } loc(#loc160)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE590_Free_Memory_Not_on_Heap/s04/CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":23:1)
#loc6 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":41:1)
#loc7 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":25:5)
#loc8 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":25:9)
#loc9 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":26:5)
#loc10 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":26:12)
#loc11 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":27:12)
#loc12 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":27:5)
#loc13 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":28:5)
#loc14 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":37:5)
#loc15 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":28:13)
#loc16 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":28:9)
#loc17 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":28:16)
#loc18 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":28:20)
#loc19 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":28:18)
#loc20 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":29:5)
#loc21 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":30:9)
#loc22 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":36:9)
#loc23 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":32:13)
#loc24 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":32:41)
#loc25 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":33:20)
#loc26 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":33:32)
#loc27 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":33:37)
#loc28 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":33:41)
#loc29 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":33:13)
#loc30 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":33:42)
#loc31 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":34:33)
#loc32 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":34:13)
#loc33 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":34:24)
#loc34 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":34:28)
#loc35 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":34:29)
#loc36 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":35:20)
#loc37 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":35:13)
#loc38 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":28:24)
#loc39 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":28:23)
#loc40 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":38:15)
#loc41 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":38:5)
#loc42 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":40:5)
#loc43 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":40:10)
#loc44 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":73:1)
#loc45 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":76:1)
#loc46 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":75:5)
#loc47 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":75:13)
#loc48 = loc("/usr/include/stdlib.h":575:1)
#loc49 = loc("/usr/include/stdlib.h":575:41)
#loc50 = loc("/usr/include/time.h":76:1)
#loc51 = loc("/usr/include/time.h":76:38)
#loc52 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":93:15)
#loc53 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":95:15)
#loc54 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":98:15)
#loc55 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":100:15)
#loc56 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":88:1)
#loc57 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":103:1)
#loc62 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":89:1)
#loc63 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":91:27)
#loc64 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":91:22)
#loc65 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":91:5)
#loc66 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":93:5)
#loc67 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":94:5)
#loc68 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":94:62)
#loc69 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":95:5)
#loc70 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":98:5)
#loc71 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":99:5)
#loc72 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":99:61)
#loc73 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":100:5)
#loc74 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":102:12)
#loc75 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":102:5)
#loc76 = loc("/usr/include/stdlib.h":672:1)
#loc77 = loc("/usr/include/stdlib.h":672:45)
#loc78 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":60:27)
#loc79 = loc("/usr/include/stdlib.h":756:1)
#loc80 = loc("/usr/include/stdlib.h":756:70)
#loc81 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":48:1)
#loc82 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":71:1)
#loc83 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":50:5)
#loc84 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":50:9)
#loc85 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":51:5)
#loc86 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":51:12)
#loc87 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":52:12)
#loc88 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":52:5)
#loc89 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":53:5)
#loc90 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":67:5)
#loc91 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":53:13)
#loc92 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":53:9)
#loc93 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":53:16)
#loc94 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":53:20)
#loc95 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":53:18)
#loc96 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":54:5)
#loc97 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":55:9)
#loc98 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":66:9)
#loc99 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":57:13)
#loc100 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":57:64)
#loc101 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":57:41)
#loc102 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":57:48)
#loc103 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":57:52)
#loc104 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":57:63)
#loc105 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":58:13)
#loc106 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":62:13)
#loc107 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":58:17)
#loc108 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":58:31)
#loc109 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":59:13)
#loc110 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":60:17)
#loc111 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":61:17)
#loc112 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":61:22)
#loc113 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":63:20)
#loc114 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":63:32)
#loc115 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":63:37)
#loc116 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":63:41)
#loc117 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":63:13)
#loc118 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":63:42)
#loc119 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":64:33)
#loc120 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":64:13)
#loc121 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":64:24)
#loc122 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":64:28)
#loc123 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":64:29)
#loc124 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":65:20)
#loc125 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":65:13)
#loc126 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":53:24)
#loc127 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":53:23)
#loc128 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":68:15)
#loc129 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":68:5)
#loc130 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":70:5)
#loc131 = loc("CWE590_Free_Memory_Not_on_Heap__free_char_alloca_17.c":70:10)
#loc132 = loc(fused[#loc1, #loc2])
#loc133 = loc(fused[#loc3, #loc4])
#loc134 = loc(fused[#loc5, #loc6])
#loc135 = loc(fused[#loc7, #loc8])
#loc136 = loc(fused[#loc9, #loc10])
#loc137 = loc(fused[#loc12, #loc11])
#loc138 = loc(fused[#loc13, #loc14])
#loc139 = loc(fused[#loc16, #loc15])
#loc140 = loc(fused[#loc17, #loc18])
#loc141 = loc(fused[#loc20, #loc14])
#loc142 = loc(fused[#loc21, #loc22])
#loc143 = loc(fused[#loc23, #loc24])
#loc144 = loc(fused[#loc29, #loc30])
#loc145 = loc(fused[#loc32, #loc31])
#loc146 = loc(fused[#loc37, #loc36])
#loc147 = loc(fused[#loc39, #loc38])
#loc148 = loc(fused[#loc44, #loc45])
#loc149 = loc(fused[#loc46, #loc47])
#loc150 = loc(fused[#loc48, #loc49])
#loc151 = loc(fused[#loc50, #loc51])
#loc152 = loc(fused[#loc56, #loc57])
#loc155 = loc(fused[#loc67, #loc68])
#loc156 = loc(fused[#loc71, #loc72])
#loc157 = loc(fused[#loc75, #loc74])
#loc158 = loc(fused[#loc76, #loc77])
#loc159 = loc(fused[#loc79, #loc80])
#loc160 = loc(fused[#loc81, #loc82])
#loc161 = loc(fused[#loc83, #loc84])
#loc162 = loc(fused[#loc85, #loc86])
#loc163 = loc(fused[#loc88, #loc87])
#loc164 = loc(fused[#loc89, #loc90])
#loc165 = loc(fused[#loc92, #loc91])
#loc166 = loc(fused[#loc93, #loc94])
#loc167 = loc(fused[#loc96, #loc90])
#loc168 = loc(fused[#loc97, #loc98])
#loc169 = loc(fused[#loc99, #loc100])
#loc170 = loc(fused[#loc103, #loc104])
#loc171 = loc(fused[#loc102, #loc104])
#loc172 = loc(fused[#loc101, #loc100])
#loc173 = loc(fused[#loc105, #loc106])
#loc174 = loc(fused[#loc107, #loc108])
#loc175 = loc(fused[#loc109, #loc106])
#loc176 = loc(fused[#loc117, #loc118])
#loc177 = loc(fused[#loc120, #loc119])
#loc178 = loc(fused[#loc125, #loc124])
#loc179 = loc(fused[#loc127, #loc126])
