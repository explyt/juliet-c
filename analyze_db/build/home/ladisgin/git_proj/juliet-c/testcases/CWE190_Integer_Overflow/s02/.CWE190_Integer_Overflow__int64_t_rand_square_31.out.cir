!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":101:10)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":101:14)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":101:20)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":101:32)
#loc135 = loc(fused[#loc44, #loc45])
#loc136 = loc(fused[#loc46, #loc47])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc117)
  cir.func private @printLongLongLine(!s64i) loc(#loc118)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc120)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc121)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc11)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc11)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc11)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc11)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc11)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc11)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc11)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc11)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc11)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc11)
      cir.yield %29 : !u64i loc(#loc11)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc11)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc11)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc11)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc11)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc11)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc11)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc11)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc11)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc11)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc11)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc11)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc11)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc11)
      cir.yield %33 : !u64i loc(#loc11)
    }) : (!cir.bool) -> !u64i loc(#loc11)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc11)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc122)
    cir.scope {
      %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc124)
      %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc125)
      %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc16)
      cir.store %10, %8 : !s64i, !cir.ptr<!s64i> loc(#loc124)
      %11 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc18)
      cir.store %11, %9 : !s64i, !cir.ptr<!s64i> loc(#loc125)
      cir.scope {
        %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc127)
        %13 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc23)
        %14 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc22)
        %15 = cir.binop(mul, %13, %14) nsw : !s64i loc(#loc23)
        cir.store %15, %12 : !s64i, !cir.ptr<!s64i> loc(#loc127)
        %16 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc24)
        cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc25)
      } loc(#loc126)
    } loc(#loc123)
    cir.return loc(#loc6)
  } loc(#loc119)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc129)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc130)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc128)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc131)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc132)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc133)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc41)
  cir.func @main(%arg0: !s32i loc(fused[#loc44, #loc45]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc46, #loc47])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc135)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc43)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc48)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc48)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc49)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc50)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc50)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc51)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc38)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %8 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_square_31_good : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call @CWE190_Integer_Overflow__int64_t_rand_square_31_good() : () -> () loc(#loc53)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc39)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc40)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %13 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_square_31_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc138)
    cir.call @CWE190_Integer_Overflow__int64_t_rand_square_31_bad() : () -> () loc(#loc57)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc41)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc60)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    cir.return %17 : !s32i loc(#loc139)
  } loc(#loc134)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc141)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc66)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc142)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc68)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc68)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc143)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc145)
      %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc146)
      %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc73)
      cir.store %6, %4 : !s64i, !cir.ptr<!s64i> loc(#loc145)
      %7 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc75)
      cir.store %7, %5 : !s64i, !cir.ptr<!s64i> loc(#loc146)
      cir.scope {
        %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc148)
        %9 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc80)
        %10 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc79)
        %11 = cir.binop(mul, %9, %10) nsw : !s64i loc(#loc80)
        cir.store %11, %8 : !s64i, !cir.ptr<!s64i> loc(#loc148)
        %12 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc81)
        cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc82)
      } loc(#loc147)
    } loc(#loc144)
    cir.return loc(#loc63)
  } loc(#loc140)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr) loc(#loc149)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc85)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc86)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc151)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc91)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc152)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc93)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc93)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc93)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc93)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc93)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc93)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc93)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc93)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc93)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc93)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc93)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc93)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc93)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc93)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc93)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc93)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc93)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc93)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc93)
      cir.yield %29 : !u64i loc(#loc93)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc93)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc93)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc93)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc93)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc93)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc93)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc93)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc93)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc93)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc93)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc93)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc93)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc93)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc93)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc93)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc93)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc93)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc93)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc93)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc93)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc93)
      cir.yield %33 : !u64i loc(#loc93)
    }) : (!cir.bool) -> !u64i loc(#loc93)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc93)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc153)
    cir.scope {
      %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc155)
      %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc156)
      %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc98)
      cir.store %10, %8 : !s64i, !cir.ptr<!s64i> loc(#loc155)
      %11 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc100)
      cir.store %11, %9 : !s64i, !cir.ptr<!s64i> loc(#loc156)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc103)
        %13 = cir.call @imaxabs(%12) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc104)
        %14 = cir.cast(int_to_float, %13 : !s64i), !cir.long_double<!cir.f80> loc(#loc104)
        %15 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc105)
        %16 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc106)
        %17 = cir.cast(int_to_float, %16 : !s64i), !cir.long_double<!cir.f80> loc(#loc106)
        %18 = cir.call @sqrtl(%17) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc105)
        %19 = cir.cmp(le, %14, %18) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc158)
        cir.if %19 {
          %20 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc160)
          %21 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc113)
          %22 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc112)
          %23 = cir.binop(mul, %21, %22) nsw : !s64i loc(#loc113)
          cir.store %23, %20 : !s64i, !cir.ptr<!s64i> loc(#loc160)
          %24 = cir.load %20 : !cir.ptr<!s64i>, !s64i loc(#loc114)
          cir.call @printLongLongLine(%24) : (!s64i) -> () loc(#loc115)
        } else {
          %20 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc86)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc86)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc116)
        } loc(#loc159)
      } loc(#loc157)
    } loc(#loc154)
    cir.return loc(#loc88)
  } loc(#loc150)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":40:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":27:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":27:13)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":28:12)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":28:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":30:21)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":30:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":31:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":39:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":32:9)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":32:28)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":33:9)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":33:24)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":34:9)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":38:9)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":36:13)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":36:37)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":36:30)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":37:31)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":37:13)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":87:1)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":91:1)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":89:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":89:13)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":90:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":90:13)
#loc32 = loc("/usr/include/stdlib.h":575:1)
#loc33 = loc("/usr/include/stdlib.h":575:41)
#loc34 = loc("/usr/include/time.h":76:1)
#loc35 = loc("/usr/include/time.h":76:38)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":106:15)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":108:15)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":111:15)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":113:15)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":101:1)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":116:1)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":102:1)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":104:27)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":104:22)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":104:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":106:5)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":107:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":107:58)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":108:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":111:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":112:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":112:57)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":113:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":115:12)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":115:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":47:1)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":62:1)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":49:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":49:13)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":50:12)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":50:5)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":52:12)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":52:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":53:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":61:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":54:9)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":54:28)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":55:9)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":55:24)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":56:9)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":60:9)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":58:13)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":58:37)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":58:30)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":59:31)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":59:13)
#loc83 = loc("/usr/include/inttypes.h":351:1)
#loc84 = loc("/usr/include/inttypes.h":351:74)
#loc85 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":82:23)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":65:1)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":85:1)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":67:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":67:13)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":68:12)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":68:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":70:21)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":70:5)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":71:5)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":84:5)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":72:9)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":72:28)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":73:9)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":73:24)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":75:9)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":83:9)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":75:31)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":75:13)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":75:40)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":75:46)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":75:55)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":76:9)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":79:9)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":81:9)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":77:13)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":77:37)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":77:30)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":78:31)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":78:13)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_rand_square_31.c":82:13)
#loc117 = loc(fused[#loc1, #loc2])
#loc118 = loc(fused[#loc3, #loc4])
#loc119 = loc(fused[#loc5, #loc6])
#loc120 = loc(fused[#loc7, #loc8])
#loc121 = loc(fused[#loc10, #loc9])
#loc122 = loc(fused[#loc12, #loc11])
#loc123 = loc(fused[#loc13, #loc14])
#loc124 = loc(fused[#loc15, #loc16])
#loc125 = loc(fused[#loc17, #loc18])
#loc126 = loc(fused[#loc19, #loc20])
#loc127 = loc(fused[#loc21, #loc22])
#loc128 = loc(fused[#loc26, #loc27])
#loc129 = loc(fused[#loc28, #loc29])
#loc130 = loc(fused[#loc30, #loc31])
#loc131 = loc(fused[#loc32, #loc33])
#loc132 = loc(fused[#loc34, #loc35])
#loc133 = loc(fused[#loc36, #loc37])
#loc134 = loc(fused[#loc42, #loc43])
#loc137 = loc(fused[#loc53, #loc54])
#loc138 = loc(fused[#loc57, #loc58])
#loc139 = loc(fused[#loc61, #loc60])
#loc140 = loc(fused[#loc62, #loc63])
#loc141 = loc(fused[#loc64, #loc65])
#loc142 = loc(fused[#loc67, #loc66])
#loc143 = loc(fused[#loc69, #loc68])
#loc144 = loc(fused[#loc70, #loc71])
#loc145 = loc(fused[#loc72, #loc73])
#loc146 = loc(fused[#loc74, #loc75])
#loc147 = loc(fused[#loc76, #loc77])
#loc148 = loc(fused[#loc78, #loc79])
#loc149 = loc(fused[#loc83, #loc84])
#loc150 = loc(fused[#loc87, #loc88])
#loc151 = loc(fused[#loc89, #loc90])
#loc152 = loc(fused[#loc92, #loc91])
#loc153 = loc(fused[#loc94, #loc93])
#loc154 = loc(fused[#loc95, #loc96])
#loc155 = loc(fused[#loc97, #loc98])
#loc156 = loc(fused[#loc99, #loc100])
#loc157 = loc(fused[#loc101, #loc102])
#loc158 = loc(fused[#loc104, #loc107])
#loc159 = loc(fused[#loc108, #loc109, #loc110, #loc102])
#loc160 = loc(fused[#loc111, #loc112])
