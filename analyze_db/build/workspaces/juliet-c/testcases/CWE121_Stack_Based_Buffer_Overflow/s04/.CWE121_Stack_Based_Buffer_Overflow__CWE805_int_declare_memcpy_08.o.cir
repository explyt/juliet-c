!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @printIntLine(!s32i) loc(#loc113)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc115)
    %1 = cir.alloca !cir.array<!s32i x 50>, !cir.ptr<!cir.array<!s32i x 50>>, ["dataBadBuffer"] {alignment = 16 : i64} loc(#loc116)
    %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["dataGoodBuffer"] {alignment = 16 : i64} loc(#loc117)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc119)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc13)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
      cir.if %5 {
        %6 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 50>>), !cir.ptr<!s32i> loc(#loc16)
        cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc121)
      } loc(#loc120)
    } loc(#loc118)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc123)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc123)
      cir.store %4, %3 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc123)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc22)
      %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc23)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc23)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc24)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc24)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc124)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc125)
      cir.libc.memcpy %12 bytes from %8 to %6 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc126)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc30)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc31)
      %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc32)
    } loc(#loc122)
    cir.return loc(#loc4)
  } loc(#loc114)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc128)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc129)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc127)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc40)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc41)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc131)
    cir.return %2 : !s32i loc(#loc131)
  } loc(#loc130)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc132)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc45)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc134)
    %1 = cir.alloca !cir.array<!s32i x 50>, !cir.ptr<!cir.array<!s32i x 50>>, ["dataBadBuffer"] {alignment = 16 : i64} loc(#loc135)
    %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["dataGoodBuffer"] {alignment = 16 : i64} loc(#loc136)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc138)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc56)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc56)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc45)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc45)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc61)
      } else {
        %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc62)
        cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc140)
      } loc(#loc139)
    } loc(#loc137)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc142)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc142)
      cir.store %4, %3 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc142)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc68)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc68)
      %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc69)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc69)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc70)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc70)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc143)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc144)
      cir.libc.memcpy %12 bytes from %8 to %6 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc145)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc75)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc76)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc77)
      %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc75)
      cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc78)
    } loc(#loc141)
    cir.return loc(#loc47)
  } loc(#loc133)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc80)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc81)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc147)
    cir.return %2 : !s32i loc(#loc147)
  } loc(#loc146)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc149)
    %1 = cir.alloca !cir.array<!s32i x 50>, !cir.ptr<!cir.array<!s32i x 50>>, ["dataBadBuffer"] {alignment = 16 : i64} loc(#loc150)
    %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["dataGoodBuffer"] {alignment = 16 : i64} loc(#loc151)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc153)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc93)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc93)
      cir.if %5 {
        %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc96)
        cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc155)
      } loc(#loc154)
    } loc(#loc152)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc157)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc157)
      cir.store %4, %3 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc157)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc102)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc102)
      %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc103)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc103)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc104)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc104)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc158)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc159)
      cir.libc.memcpy %12 bytes from %8 to %6 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc160)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc109)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc110)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc111)
      %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc109)
      cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc112)
    } loc(#loc156)
    cir.return loc(#loc84)
  } loc(#loc148)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":35:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":52:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":37:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":37:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":38:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":38:25)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":39:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":39:27)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":40:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":45:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":40:8)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":40:26)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":41:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":44:16)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":44:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":46:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":51:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":47:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":47:29)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":49:16)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":49:22)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":49:30)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":49:34)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":49:44)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":49:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":49:45)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":50:22)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":50:27)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":50:28)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":50:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":101:1)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":105:1)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":103:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":103:14)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":104:5)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":104:14)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":23:1)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":26:1)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":25:12)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":25:5)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":67:19)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":59:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":80:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":61:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":61:11)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":62:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":62:25)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":63:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":63:27)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":64:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":73:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":64:8)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":64:27)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":65:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":68:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":70:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":67:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":72:16)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":72:9)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":74:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":79:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":75:9)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":75:29)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":77:16)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":77:22)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":77:30)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":77:34)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":77:44)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":77:9)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":77:45)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":78:22)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":78:27)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":78:28)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":78:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":28:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":31:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":30:12)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":30:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":83:1)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":99:1)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":85:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":85:11)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":86:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":86:25)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":87:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":87:27)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":88:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":92:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":88:8)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":88:26)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":89:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":91:16)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":91:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":93:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":98:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":94:9)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":94:29)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":96:16)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":96:22)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":96:30)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":96:34)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":96:44)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":96:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":96:45)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":97:22)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":97:27)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":97:28)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c":97:9)
#loc113 = loc(fused[#loc1, #loc2])
#loc114 = loc(fused[#loc3, #loc4])
#loc115 = loc(fused[#loc5, #loc6])
#loc116 = loc(fused[#loc7, #loc8])
#loc117 = loc(fused[#loc9, #loc10])
#loc118 = loc(fused[#loc11, #loc12])
#loc119 = loc(fused[#loc13, #loc14])
#loc120 = loc(fused[#loc15, #loc12])
#loc121 = loc(fused[#loc17, #loc16])
#loc122 = loc(fused[#loc18, #loc19])
#loc123 = loc(fused[#loc20, #loc21])
#loc124 = loc(fused[#loc25, #loc26])
#loc125 = loc(fused[#loc24, #loc26])
#loc126 = loc(fused[#loc27, #loc28])
#loc127 = loc(fused[#loc33, #loc34])
#loc128 = loc(fused[#loc35, #loc36])
#loc129 = loc(fused[#loc37, #loc38])
#loc130 = loc(fused[#loc39, #loc40])
#loc131 = loc(fused[#loc42, #loc41])
#loc132 = loc(fused[#loc43, #loc44])
#loc133 = loc(fused[#loc46, #loc47])
#loc134 = loc(fused[#loc48, #loc49])
#loc135 = loc(fused[#loc50, #loc51])
#loc136 = loc(fused[#loc52, #loc53])
#loc137 = loc(fused[#loc54, #loc55])
#loc138 = loc(fused[#loc56, #loc57])
#loc139 = loc(fused[#loc58, #loc59, #loc60, #loc55])
#loc140 = loc(fused[#loc63, #loc62])
#loc141 = loc(fused[#loc64, #loc65])
#loc142 = loc(fused[#loc66, #loc67])
#loc143 = loc(fused[#loc71, #loc72])
#loc144 = loc(fused[#loc70, #loc72])
#loc145 = loc(fused[#loc73, #loc74])
#loc146 = loc(fused[#loc79, #loc80])
#loc147 = loc(fused[#loc82, #loc81])
#loc148 = loc(fused[#loc83, #loc84])
#loc149 = loc(fused[#loc85, #loc86])
#loc150 = loc(fused[#loc87, #loc88])
#loc151 = loc(fused[#loc89, #loc90])
#loc152 = loc(fused[#loc91, #loc92])
#loc153 = loc(fused[#loc93, #loc94])
#loc154 = loc(fused[#loc95, #loc92])
#loc155 = loc(fused[#loc97, #loc96])
#loc156 = loc(fused[#loc98, #loc99])
#loc157 = loc(fused[#loc100, #loc101])
#loc158 = loc(fused[#loc105, #loc106])
#loc159 = loc(fused[#loc104, #loc106])
#loc160 = loc(fused[#loc107, #loc108])
