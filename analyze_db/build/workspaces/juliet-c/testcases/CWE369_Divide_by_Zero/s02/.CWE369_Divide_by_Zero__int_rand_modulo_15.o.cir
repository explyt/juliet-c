!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":31:16)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":65:16)
#loc93 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":102:16)
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc175)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc176)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc177)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_modulo_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc179)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.br ^bb1 loc(#loc181)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc17)
    cir.br ^bb2 loc(#loc15)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc15)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc18)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc19)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %7 ^bb5, ^bb6 loc(#loc19)
  ^bb5:  // pred: ^bb4
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc19)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc19)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc19)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc19)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc19)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc19)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc19)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc19)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc19)
    cir.br ^bb7(%19 : !u32i) loc(#loc19)
  ^bb6:  // pred: ^bb4
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc19)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc19)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc19)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc19)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc19)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc19)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc19)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc19)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc19)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc19)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc19)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc19)
    cir.br ^bb7(%35 : !u32i) loc(#loc19)
  ^bb7(%36: !u32i loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":31:16)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc19)
  ^bb8:  // pred: ^bb7
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc19)
    cir.store %37, %0 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    cir.br ^bb10 loc(#loc21)
  ^bb9:  // pred: ^bb2
    %38 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
    %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc22)
    cir.br ^bb10 loc(#loc23)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc16)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc183)
  ^bb12:  // pred: ^bb11
    %40 = cir.const #cir.int<7> : !s32i loc(#loc26)
    cir.br ^bb13 loc(#loc24)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %40 : !s32i, ^bb16 [
      7: ^bb15
    ] loc(#loc24)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc27)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    %41 = cir.const #cir.int<100> : !s32i loc(#loc28)
    %42 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    %43 = cir.binop(rem, %41, %42) : !s32i loc(#loc184)
    cir.call @printIntLine(%43) : (!s32i) -> () loc(#loc30)
    cir.br ^bb17 loc(#loc31)
  ^bb16:  // pred: ^bb13
    %44 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc32)
    %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc33)
    cir.br ^bb17 loc(#loc34)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc25)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc9)
  } loc(#loc178)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_modulo_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc186)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc187)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc188)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc189)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc43)
    cir.return loc(#loc36)
  } loc(#loc185)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc45)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc191)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc51)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    cir.br ^bb1 loc(#loc193)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc55)
    cir.br ^bb2 loc(#loc53)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc53)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc56)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc57)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc57)
    cir.brcond %7 ^bb5, ^bb6 loc(#loc57)
  ^bb5:  // pred: ^bb4
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc57)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc57)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc57)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc57)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc57)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc57)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc57)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc57)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc57)
    cir.br ^bb7(%19 : !u32i) loc(#loc57)
  ^bb6:  // pred: ^bb4
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc57)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc57)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc57)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc57)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc57)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc57)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc57)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc57)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc57)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc57)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc57)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc57)
    cir.br ^bb7(%35 : !u32i) loc(#loc57)
  ^bb7(%36: !u32i loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":65:16)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc57)
  ^bb8:  // pred: ^bb7
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc57)
    cir.store %37, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.br ^bb10 loc(#loc59)
  ^bb9:  // pred: ^bb2
    %38 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc60)
    %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    cir.br ^bb10 loc(#loc62)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc54)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc195)
  ^bb12:  // pred: ^bb11
    %40 = cir.const #cir.int<8> : !s32i loc(#loc65)
    cir.br ^bb13 loc(#loc63)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %40 : !s32i, ^bb16 [
      7: ^bb15
    ] loc(#loc63)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc66)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    %41 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc67)
    %42 = cir.cast(array_to_ptrdecay, %41 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%42) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    cir.br ^bb22 loc(#loc69)
  ^bb16:  // pred: ^bb13
    cir.br ^bb17 loc(#loc196)
  ^bb17:  // pred: ^bb16
    %43 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
    %44 = cir.const #cir.int<0> : !s32i loc(#loc73)
    %45 = cir.cmp(ne, %43, %44) : !s32i, !cir.bool loc(#loc197)
    cir.brcond %45 ^bb18, ^bb19 loc(#loc198)
  ^bb18:  // pred: ^bb17
    %46 = cir.const #cir.int<100> : !s32i loc(#loc77)
    %47 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    %48 = cir.binop(rem, %46, %47) : !s32i loc(#loc199)
    cir.call @printIntLine(%48) : (!s32i) -> () loc(#loc79)
    cir.br ^bb20 loc(#loc75)
  ^bb19:  // pred: ^bb17
    %49 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc45)
    %50 = cir.cast(array_to_ptrdecay, %49 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%50) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    cir.br ^bb20 loc(#loc71)
  ^bb20:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc71)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc81)
  ^bb22:  // 2 preds: ^bb15, ^bb21
    cir.br ^bb23 loc(#loc64)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc47)
  } loc(#loc190)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc201)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc87)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    cir.br ^bb1 loc(#loc203)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc91)
    cir.br ^bb2 loc(#loc89)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc89)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc92)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc93)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc93)
    cir.brcond %7 ^bb5, ^bb6 loc(#loc93)
  ^bb5:  // pred: ^bb4
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc93)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc93)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc93)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc93)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc93)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc93)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc93)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc93)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc93)
    cir.br ^bb7(%19 : !u32i) loc(#loc93)
  ^bb6:  // pred: ^bb4
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc93)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc93)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc93)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc93)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc93)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc93)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc93)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc93)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc93)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc93)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc93)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc93)
    cir.br ^bb7(%35 : !u32i) loc(#loc93)
  ^bb7(%36: !u32i loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":102:16)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc93)
  ^bb8:  // pred: ^bb7
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc93)
    cir.store %37, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    cir.br ^bb10 loc(#loc95)
  ^bb9:  // pred: ^bb2
    %38 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc96)
    %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc96)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    cir.br ^bb10 loc(#loc98)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc90)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc205)
  ^bb12:  // pred: ^bb11
    %40 = cir.const #cir.int<7> : !s32i loc(#loc101)
    cir.br ^bb13 loc(#loc99)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %40 : !s32i, ^bb21 [
      7: ^bb15
    ] loc(#loc99)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc102)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc206)
  ^bb16:  // pred: ^bb15
    %41 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    %42 = cir.const #cir.int<0> : !s32i loc(#loc106)
    %43 = cir.cmp(ne, %41, %42) : !s32i, !cir.bool loc(#loc207)
    cir.brcond %43 ^bb17, ^bb18 loc(#loc208)
  ^bb17:  // pred: ^bb16
    %44 = cir.const #cir.int<100> : !s32i loc(#loc110)
    %45 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
    %46 = cir.binop(rem, %44, %45) : !s32i loc(#loc209)
    cir.call @printIntLine(%46) : (!s32i) -> () loc(#loc112)
    cir.br ^bb19 loc(#loc108)
  ^bb18:  // pred: ^bb16
    %47 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc113)
    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc113)
    cir.call @printLine(%48) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    cir.br ^bb19 loc(#loc104)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc104)
  ^bb20:  // pred: ^bb19
    cir.br ^bb22 loc(#loc115)
  ^bb21:  // pred: ^bb13
    %49 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc116)
    %50 = cir.cast(array_to_ptrdecay, %49 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc116)
    cir.call @printLine(%50) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    cir.br ^bb22 loc(#loc118)
  ^bb22:  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc100)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc83)
  } loc(#loc200)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc211)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc123)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc124)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    cir.br ^bb1 loc(#loc213)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc128)
    cir.br ^bb2 loc(#loc126)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc126)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc129)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc130)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc130)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc131)
    cir.br ^bb6 loc(#loc132)
  ^bb5:  // pred: ^bb2
    %6 = cir.const #cir.int<7> : !s32i loc(#loc133)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    cir.br ^bb6 loc(#loc135)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc127)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc215)
  ^bb8:  // pred: ^bb7
    %7 = cir.const #cir.int<7> : !s32i loc(#loc138)
    cir.br ^bb9 loc(#loc136)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %7 : !s32i, ^bb12 [
      7: ^bb11
    ] loc(#loc136)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc139)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    %8 = cir.const #cir.int<100> : !s32i loc(#loc140)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc141)
    %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc216)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc142)
    cir.br ^bb13 loc(#loc143)
  ^bb12:  // pred: ^bb9
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc144)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc144)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc145)
    cir.br ^bb13 loc(#loc146)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc137)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc120)
  } loc(#loc210)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc218)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc151)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc152)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    cir.br ^bb1 loc(#loc220)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc156)
    cir.br ^bb2 loc(#loc154)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc154)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc157)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.const #cir.int<7> : !s32i loc(#loc158)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    cir.br ^bb6 loc(#loc160)
  ^bb5:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc161)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc161)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc162)
    cir.br ^bb6 loc(#loc163)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc155)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc222)
  ^bb8:  // pred: ^bb7
    %7 = cir.const #cir.int<7> : !s32i loc(#loc166)
    cir.br ^bb9 loc(#loc164)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %7 : !s32i, ^bb12 [
      7: ^bb11
    ] loc(#loc164)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc167)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    %8 = cir.const #cir.int<100> : !s32i loc(#loc168)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc169)
    %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc223)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc170)
    cir.br ^bb13 loc(#loc171)
  ^bb12:  // pred: ^bb9
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc172)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc172)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc173)
    cir.br ^bb13 loc(#loc174)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc165)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc148)
  } loc(#loc217)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":35:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":22:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":49:1)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":24:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":24:9)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":26:13)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":26:12)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":26:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":27:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":37:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":27:12)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":29:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":31:9)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":32:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":35:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":36:9)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":38:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":48:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":38:12)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":40:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":42:22)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":42:28)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":42:9)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":43:9)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":46:19)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":46:9)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":47:9)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":189:1)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":195:1)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":191:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":191:14)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":192:5)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":192:14)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":193:5)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":193:14)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":194:5)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":194:14)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":86:23)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":56:1)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":90:1)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":58:5)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":58:9)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":60:13)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":60:12)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":60:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":61:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":71:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":61:12)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":63:5)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":65:9)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":66:9)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":69:19)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":69:9)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":70:9)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":72:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":89:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":72:12)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":74:5)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":76:19)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":76:9)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":77:9)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":80:9)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":87:9)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":80:13)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":80:21)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":81:9)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":83:9)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":85:9)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":82:26)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":82:32)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":82:13)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":86:13)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":88:9)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":93:1)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":127:1)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":95:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":95:9)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":97:13)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":97:12)
#loc88 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":97:5)
#loc89 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":98:5)
#loc90 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":108:5)
#loc91 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":98:12)
#loc92 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":100:5)
#loc94 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":102:9)
#loc95 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":103:9)
#loc96 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":106:19)
#loc97 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":106:9)
#loc98 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":107:9)
#loc99 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":109:5)
#loc100 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":126:5)
#loc101 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":109:12)
#loc102 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":111:5)
#loc103 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":113:9)
#loc104 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":120:9)
#loc105 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":113:13)
#loc106 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":113:21)
#loc107 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":114:9)
#loc108 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":116:9)
#loc109 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":118:9)
#loc110 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":115:26)
#loc111 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":115:32)
#loc112 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":115:13)
#loc113 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":119:23)
#loc114 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":119:13)
#loc115 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":121:9)
#loc116 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":124:19)
#loc117 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":124:9)
#loc118 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":125:9)
#loc119 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":130:1)
#loc120 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":157:1)
#loc121 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":132:5)
#loc122 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":132:9)
#loc123 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":134:13)
#loc124 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":134:12)
#loc125 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":134:5)
#loc126 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":135:5)
#loc127 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":145:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":135:12)
#loc129 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":137:5)
#loc130 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":139:19)
#loc131 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":139:9)
#loc132 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":140:9)
#loc133 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":143:16)
#loc134 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":143:9)
#loc135 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":144:9)
#loc136 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":146:5)
#loc137 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":156:5)
#loc138 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":146:12)
#loc139 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":148:5)
#loc140 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":150:22)
#loc141 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":150:28)
#loc142 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":150:9)
#loc143 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":151:9)
#loc144 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":154:19)
#loc145 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":154:9)
#loc146 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":155:9)
#loc147 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":160:1)
#loc148 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":187:1)
#loc149 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":162:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":162:9)
#loc151 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":164:13)
#loc152 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":164:12)
#loc153 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":164:5)
#loc154 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":165:5)
#loc155 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":175:5)
#loc156 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":165:12)
#loc157 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":167:5)
#loc158 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":169:16)
#loc159 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":169:9)
#loc160 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":170:9)
#loc161 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":173:19)
#loc162 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":173:9)
#loc163 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":174:9)
#loc164 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":176:5)
#loc165 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":186:5)
#loc166 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":176:12)
#loc167 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":178:5)
#loc168 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":180:22)
#loc169 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":180:28)
#loc170 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":180:9)
#loc171 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":181:9)
#loc172 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":184:19)
#loc173 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":184:9)
#loc174 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":185:9)
#loc175 = loc(fused[#loc1, #loc2])
#loc176 = loc(fused[#loc3, #loc4])
#loc177 = loc(fused[#loc6, #loc7])
#loc178 = loc(fused[#loc8, #loc9])
#loc179 = loc(fused[#loc10, #loc11])
#loc180 = loc(fused[#loc14, #loc12])
#loc181 = loc(fused[#loc15, #loc16])
#loc182 = loc(fused[#loc20, #loc19])
#loc183 = loc(fused[#loc24, #loc25])
#loc184 = loc(fused[#loc28, #loc29])
#loc185 = loc(fused[#loc35, #loc36])
#loc186 = loc(fused[#loc37, #loc38])
#loc187 = loc(fused[#loc39, #loc40])
#loc188 = loc(fused[#loc41, #loc42])
#loc189 = loc(fused[#loc43, #loc44])
#loc190 = loc(fused[#loc46, #loc47])
#loc191 = loc(fused[#loc48, #loc49])
#loc192 = loc(fused[#loc52, #loc50])
#loc193 = loc(fused[#loc53, #loc54])
#loc194 = loc(fused[#loc58, #loc57])
#loc195 = loc(fused[#loc63, #loc64])
#loc196 = loc(fused[#loc70, #loc71])
#loc197 = loc(fused[#loc72, #loc73])
#loc198 = loc(fused[#loc74, #loc75, #loc76, #loc71])
#loc199 = loc(fused[#loc77, #loc78])
#loc200 = loc(fused[#loc82, #loc83])
#loc201 = loc(fused[#loc84, #loc85])
#loc202 = loc(fused[#loc88, #loc86])
#loc203 = loc(fused[#loc89, #loc90])
#loc204 = loc(fused[#loc94, #loc93])
#loc205 = loc(fused[#loc99, #loc100])
#loc206 = loc(fused[#loc103, #loc104])
#loc207 = loc(fused[#loc105, #loc106])
#loc208 = loc(fused[#loc107, #loc108, #loc109, #loc104])
#loc209 = loc(fused[#loc110, #loc111])
#loc210 = loc(fused[#loc119, #loc120])
#loc211 = loc(fused[#loc121, #loc122])
#loc212 = loc(fused[#loc125, #loc123])
#loc213 = loc(fused[#loc126, #loc127])
#loc214 = loc(fused[#loc134, #loc133])
#loc215 = loc(fused[#loc136, #loc137])
#loc216 = loc(fused[#loc140, #loc141])
#loc217 = loc(fused[#loc147, #loc148])
#loc218 = loc(fused[#loc149, #loc150])
#loc219 = loc(fused[#loc153, #loc151])
#loc220 = loc(fused[#loc154, #loc155])
#loc221 = loc(fused[#loc159, #loc158])
#loc222 = loc(fused[#loc164, #loc165])
#loc223 = loc(fused[#loc168, #loc169])
