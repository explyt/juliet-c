!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc62)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc63)
  cir.func private  @printHexCharLine(!s8i) loc(#loc64)
  cir.func no_proto  @CWE197_Numeric_Truncation_Error__int_rand_to_char_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc66)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc12)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc67)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc69)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc69)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc16)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc16)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc21)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc21)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc21)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc21)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc21)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc21)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc21)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc21)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc21)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc21)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc21)
          cir.yield %24 : !u32i loc(#loc21)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc21)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc21)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc21)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc21)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc21)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc21)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc21)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc21)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc21)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc21)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc21)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc21)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc21)
          cir.yield %28 : !u32i loc(#loc21)
        }) : (!cir.bool) -> !u32i loc(#loc21)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc21)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
      } else {
        %7 = cir.const #cir.int<127> : !s32i loc(#loc23)
        %8 = cir.const #cir.int<5> : !s32i loc(#loc24)
        %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc23)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc72)
      } loc(#loc70)
    } loc(#loc68)
    cir.scope {
      %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc74)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc29)
      cir.store %5, %3 : !s8i, !cir.ptr<!s8i> loc(#loc74)
      %6 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc30)
      cir.call @printHexCharLine(%6) : (!s8i) -> () loc(#loc31)
    } loc(#loc73)
    cir.return loc(#loc8)
  } loc(#loc65)
  cir.func no_proto  @CWE197_Numeric_Truncation_Error__int_rand_to_char_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc76)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc33)
  } loc(#loc75)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc78)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc40)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc41)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc81)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc81)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc45)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc45)
      cir.if %6 {
        %7 = cir.const #cir.int<127> : !s32i loc(#loc50)
        %8 = cir.const #cir.int<5> : !s32i loc(#loc51)
        %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc50)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
      } else {
        %7 = cir.const #cir.int<127> : !s32i loc(#loc53)
        %8 = cir.const #cir.int<5> : !s32i loc(#loc54)
        %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc53)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
      } loc(#loc82)
    } loc(#loc80)
    cir.scope {
      %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc86)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
      %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc59)
      cir.store %5, %3 : !s8i, !cir.ptr<!s8i> loc(#loc86)
      %6 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc60)
      cir.call @printHexCharLine(%6) : (!s8i) -> () loc(#loc61)
    } loc(#loc85)
    cir.return loc(#loc37)
  } loc(#loc77)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc7 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":21:1)
#loc8 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":41:1)
#loc9 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":23:5)
#loc10 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":23:9)
#loc11 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":25:13)
#loc12 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":25:12)
#loc13 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":25:5)
#loc14 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":26:5)
#loc15 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":35:5)
#loc16 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":26:8)
#loc17 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":26:33)
#loc18 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":27:5)
#loc19 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":30:5)
#loc20 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":32:5)
#loc21 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":29:16)
#loc22 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":29:9)
#loc23 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":34:16)
#loc24 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":34:25)
#loc25 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":34:9)
#loc26 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":36:5)
#loc27 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":40:5)
#loc28 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":38:9)
#loc29 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":38:31)
#loc30 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":39:26)
#loc31 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":39:9)
#loc32 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":71:1)
#loc33 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":74:1)
#loc34 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":73:5)
#loc35 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":73:13)
#loc36 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":49:1)
#loc37 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":69:1)
#loc38 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":51:5)
#loc39 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":51:9)
#loc40 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":53:13)
#loc41 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":53:12)
#loc42 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":53:5)
#loc43 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":54:5)
#loc44 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":63:5)
#loc45 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":54:8)
#loc46 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":54:33)
#loc47 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":55:5)
#loc48 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":58:5)
#loc49 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":60:5)
#loc50 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":57:16)
#loc51 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":57:25)
#loc52 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":57:9)
#loc53 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":62:16)
#loc54 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":62:25)
#loc55 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":62:9)
#loc56 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":64:5)
#loc57 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":68:5)
#loc58 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":66:9)
#loc59 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":66:31)
#loc60 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":67:26)
#loc61 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_12.c":67:9)
#loc62 = loc(fused[#loc1, #loc2])
#loc63 = loc(fused[#loc3, #loc4])
#loc64 = loc(fused[#loc5, #loc6])
#loc65 = loc(fused[#loc7, #loc8])
#loc66 = loc(fused[#loc9, #loc10])
#loc67 = loc(fused[#loc13, #loc11])
#loc68 = loc(fused[#loc14, #loc15])
#loc69 = loc(fused[#loc16, #loc17])
#loc70 = loc(fused[#loc18, #loc19, #loc20, #loc15])
#loc71 = loc(fused[#loc22, #loc21])
#loc72 = loc(fused[#loc25, #loc24])
#loc73 = loc(fused[#loc26, #loc27])
#loc74 = loc(fused[#loc28, #loc29])
#loc75 = loc(fused[#loc32, #loc33])
#loc76 = loc(fused[#loc34, #loc35])
#loc77 = loc(fused[#loc36, #loc37])
#loc78 = loc(fused[#loc38, #loc39])
#loc79 = loc(fused[#loc42, #loc40])
#loc80 = loc(fused[#loc43, #loc44])
#loc81 = loc(fused[#loc45, #loc46])
#loc82 = loc(fused[#loc47, #loc48, #loc49, #loc44])
#loc83 = loc(fused[#loc52, #loc51])
#loc84 = loc(fused[#loc55, #loc54])
#loc85 = loc(fused[#loc56, #loc57])
#loc86 = loc(fused[#loc58, #loc59])
