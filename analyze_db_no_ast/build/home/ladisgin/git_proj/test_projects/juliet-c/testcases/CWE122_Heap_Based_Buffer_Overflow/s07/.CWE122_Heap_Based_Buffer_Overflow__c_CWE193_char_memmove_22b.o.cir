!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":31:78)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":31:85)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":51:83)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":51:90)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":68:83)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":68:90)
#loc103 = loc(fused[#loc9, #loc10])
#loc117 = loc(fused[#loc40, #loc41])
#loc130 = loc(fused[#loc73, #loc74])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22_badGlobal : !s32i {alignment = 4 : i64} loc(#loc99)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc100)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc101)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22_badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc9, #loc10])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc103)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc8)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc11)
    cir.scope {
      %4 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22_badGlobal : !cir.ptr<!s32i> loc(#loc99)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc14)
      cir.if %6 {
        %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc16)
        %8 = cir.const #cir.int<10> : !s32i loc(#loc17)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc17)
        %10 = cir.const #cir.int<1> : !u64i loc(#loc106)
        %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc107)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc108)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc109)
        cir.scope {
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
          %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc25)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc25)
          %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !s32i loc(#loc111)
          %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc26)
          cir.if %18 {
            %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc28)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc29)
            %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc30)
            cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
          } loc(#loc112)
        } loc(#loc110)
      } loc(#loc105)
    } loc(#loc104)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc113)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc113)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc113)
  } loc(#loc102)
  cir.global "private"  external @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22_goodG2B1Global : !s32i {alignment = 4 : i64} loc(#loc114)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc115)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc37)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22_goodG2B1Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc40, #loc41])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc117)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc39)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc42)
    cir.scope {
      %4 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22_goodG2B1Global : !cir.ptr<!s32i> loc(#loc114)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc45)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc45)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc37)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc37)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc49)
      } else {
        %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc50)
        %8 = cir.const #cir.int<10> : !s32i loc(#loc51)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc52)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc51)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc51)
        %12 = cir.const #cir.int<1> : !u64i loc(#loc120)
        %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc121)
        %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc50)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc122)
        cir.store %15, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc123)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc61)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc61)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !s32i loc(#loc125)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc62)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc64)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc65)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc66)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc64)
          } loc(#loc126)
        } loc(#loc124)
      } loc(#loc119)
    } loc(#loc118)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc127)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc127)
  } loc(#loc116)
  cir.global "private"  external @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22_goodG2B2Global : !s32i {alignment = 4 : i64} loc(#loc128)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22_goodG2B2Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc73, #loc74])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc130)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc72)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc75)
    cir.scope {
      %4 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22_goodG2B2Global : !cir.ptr<!s32i> loc(#loc128)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc78)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc78)
      cir.if %6 {
        %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc80)
        %8 = cir.const #cir.int<10> : !s32i loc(#loc81)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc82)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc81)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc81)
        %12 = cir.const #cir.int<1> : !u64i loc(#loc133)
        %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc134)
        %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc80)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc135)
        cir.store %15, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc136)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc90)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc91)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc91)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !s32i loc(#loc138)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc92)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc94)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc95)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc96)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc94)
          } loc(#loc139)
        } loc(#loc137)
      } loc(#loc132)
    } loc(#loc131)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc140)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc140)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc140)
  } loc(#loc129)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":29:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":29:12)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":31:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":40:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":32:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":33:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":38:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":33:8)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":34:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":36:24)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":36:31)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":36:34)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":36:45)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":36:46)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":36:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":37:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":37:37)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":37:13)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":37:21)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":37:18)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":37:27)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":37:28)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":37:34)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":37:33)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":39:12)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":39:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":47:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":47:12)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":56:19)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":51:1)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":65:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":52:1)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":53:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":63:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":53:8)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":54:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":57:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":59:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":56:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":61:24)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":61:32)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":61:35)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":61:38)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":61:49)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":61:31)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":61:50)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":61:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":62:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":62:37)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":62:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":62:21)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":62:18)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":62:27)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":62:28)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":62:34)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":62:33)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":64:12)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":64:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":48:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":48:12)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":68:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":77:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":69:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":70:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":75:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":70:8)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":71:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":73:24)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":73:32)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":73:35)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":73:38)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":73:49)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":73:31)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":73:50)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":73:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":74:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":74:37)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":74:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":74:21)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":74:18)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":74:27)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":74:28)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":74:34)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":74:33)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":76:12)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c":76:5)
#loc99 = loc(fused[#loc1, #loc2])
#loc100 = loc(fused[#loc3, #loc4])
#loc101 = loc(fused[#loc5, #loc6])
#loc102 = loc(fused[#loc7, #loc8])
#loc104 = loc(fused[#loc12, #loc13])
#loc105 = loc(fused[#loc15, #loc13])
#loc106 = loc(fused[#loc18, #loc19])
#loc107 = loc(fused[#loc17, #loc19])
#loc108 = loc(fused[#loc16, #loc20])
#loc109 = loc(fused[#loc21, #loc20])
#loc110 = loc(fused[#loc22, #loc23])
#loc111 = loc(fused[#loc24, #loc25])
#loc112 = loc(fused[#loc27, #loc23])
#loc113 = loc(fused[#loc32, #loc31])
#loc114 = loc(fused[#loc33, #loc34])
#loc115 = loc(fused[#loc35, #loc36])
#loc116 = loc(fused[#loc38, #loc39])
#loc118 = loc(fused[#loc43, #loc44])
#loc119 = loc(fused[#loc46, #loc47, #loc48, #loc44])
#loc120 = loc(fused[#loc53, #loc54])
#loc121 = loc(fused[#loc55, #loc54])
#loc122 = loc(fused[#loc50, #loc56])
#loc123 = loc(fused[#loc57, #loc56])
#loc124 = loc(fused[#loc58, #loc59])
#loc125 = loc(fused[#loc60, #loc61])
#loc126 = loc(fused[#loc63, #loc59])
#loc127 = loc(fused[#loc68, #loc67])
#loc128 = loc(fused[#loc69, #loc70])
#loc129 = loc(fused[#loc71, #loc72])
#loc131 = loc(fused[#loc76, #loc77])
#loc132 = loc(fused[#loc79, #loc77])
#loc133 = loc(fused[#loc83, #loc84])
#loc134 = loc(fused[#loc85, #loc84])
#loc135 = loc(fused[#loc80, #loc86])
#loc136 = loc(fused[#loc87, #loc86])
#loc137 = loc(fused[#loc88, #loc89])
#loc138 = loc(fused[#loc90, #loc91])
#loc139 = loc(fused[#loc93, #loc89])
#loc140 = loc(fused[#loc98, #loc97])
