!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":88:10)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":88:14)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":88:20)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":88:32)
#loc173 = loc(fused[#loc76, #loc77])
#loc174 = loc(fused[#loc78, #loc79])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc145)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc146)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc147)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc148)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc149)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc151)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc152)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc17)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc18)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc18)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc153)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc154)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc17)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc155)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc156)
    cir.scope {
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc26)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc26)
      %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc158)
      cir.if %17 {
        %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc28)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc30)
        cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
      } loc(#loc159)
    } loc(#loc157)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc31)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc31)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc33)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc34)
    cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc160)
    cir.scope {
      %14 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc162)
      %15 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc163)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
      cir.store %16, %14 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc162)
      %17 = cir.load %14 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
      cir.store %17, %15 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc163)
      cir.scope {
        %18 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc165)
        %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc45)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc45)
        %21 = cir.const #cir.int<67> : !s32i loc(#loc46)
        %22 = cir.const #cir.int<100> : !s32i loc(#loc47)
        %23 = cir.const #cir.int<1> : !s32i loc(#loc48)
        %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc47)
        %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc47)
        cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc166)
        %26 = cir.const #cir.int<0> : !s32i loc(#loc51)
        %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc51)
        %28 = cir.const #cir.int<100> : !s32i loc(#loc52)
        %29 = cir.const #cir.int<1> : !s32i loc(#loc53)
        %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc52)
        %31 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc54)
        %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc54)
        cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc167)
        %33 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc55)
        %34 = cir.load %15 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
        %35 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc57)
        %36 = cir.call @strcat(%34, %35) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc55)
        %37 = cir.load %15 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
        cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc59)
        %38 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc60)
        %39 = cir.load %15 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
        %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc61)
        cir.call @free(%40) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc60)
      } loc(#loc164)
    } loc(#loc161)
    cir.return loc(#loc12)
  } loc(#loc150)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc64)
    cir.return loc(#loc63)
  } loc(#loc168)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc170)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc73)
  cir.func @main(%arg0: !s32i loc(fused[#loc76, #loc77]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc78, #loc79])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc173)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc174)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc75)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc80)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc81)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc82)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc82)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc83)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc70)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31_good : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31_good() : () -> () loc(#loc85)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc71)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc72)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31_bad() : () -> () loc(#loc89)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc73)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc92)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc177)
    cir.return %17 : !s32i loc(#loc177)
  } loc(#loc172)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc179)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc98)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc180)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc100)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc101)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc101)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc181)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc182)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc100)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc183)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc184)
    cir.scope {
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc109)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc109)
      %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc186)
      cir.if %17 {
        %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc111)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc112)
        %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc113)
        cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc111)
      } loc(#loc187)
    } loc(#loc185)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc114)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc114)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc116)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc117)
    cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc188)
    cir.scope {
      %14 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc190)
      %15 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc191)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc121)
      cir.store %16, %14 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc190)
      %17 = cir.load %14 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
      cir.store %17, %15 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc191)
      cir.scope {
        %18 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc193)
        %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc128)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc128)
        %21 = cir.const #cir.int<67> : !s32i loc(#loc129)
        %22 = cir.const #cir.int<100> : !s32i loc(#loc130)
        %23 = cir.const #cir.int<1> : !s32i loc(#loc131)
        %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc130)
        %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc130)
        cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc194)
        %26 = cir.const #cir.int<0> : !s32i loc(#loc134)
        %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc134)
        %28 = cir.const #cir.int<100> : !s32i loc(#loc135)
        %29 = cir.const #cir.int<1> : !s32i loc(#loc136)
        %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc135)
        %31 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc137)
        %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc137)
        cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc195)
        %33 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc138)
        %34 = cir.load %15 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
        %35 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc140)
        %36 = cir.call @strcat(%34, %35) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc138)
        %37 = cir.load %15 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
        cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc142)
        %38 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc143)
        %39 = cir.load %15 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc144)
        %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc144)
        cir.call @free(%40) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc143)
      } loc(#loc192)
    } loc(#loc189)
    cir.return loc(#loc95)
  } loc(#loc178)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":149:1)
#loc6 = loc("/usr/include/string.h":150:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":23:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":44:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":25:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":25:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":26:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":26:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":28:20)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":28:27)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":28:30)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":28:41)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":28:42)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":28:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":29:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":29:33)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":29:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":29:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":29:23)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":29:24)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":29:30)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":29:29)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":30:15)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":30:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":30:10)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":30:11)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":31:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":43:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":32:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":32:27)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":33:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":33:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":34:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":42:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":35:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":35:28)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":36:20)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":36:28)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":36:33)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":36:37)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":36:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":36:38)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":37:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":37:20)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":37:24)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":37:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":39:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":39:20)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":39:26)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":40:23)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":40:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":41:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":41:18)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":74:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":77:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":76:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":76:13)
#loc66 = loc("/usr/include/stdlib.h":575:1)
#loc67 = loc("/usr/include/stdlib.h":575:41)
#loc68 = loc("/usr/include/time.h":76:1)
#loc69 = loc("/usr/include/time.h":76:38)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":93:15)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":95:15)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":98:15)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":100:15)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":88:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":103:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":89:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":91:27)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":91:22)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":91:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":93:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":94:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":94:64)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":95:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":98:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":99:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":99:63)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":100:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":102:12)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":102:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":51:1)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":72:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":53:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":53:12)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":54:12)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":54:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":56:20)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":56:27)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":56:31)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":56:42)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":56:43)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":56:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":57:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":57:33)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":57:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":57:17)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":57:23)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":57:24)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":57:30)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":57:29)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":58:15)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":58:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":58:10)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":58:11)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":59:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":71:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":60:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":60:27)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":61:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":61:23)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":62:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":70:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":63:13)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":63:28)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":64:20)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":64:28)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":64:33)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":64:37)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":64:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":64:38)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":65:29)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":65:20)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":65:24)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":65:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":67:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":67:20)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":67:26)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":68:23)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":68:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":69:13)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c":69:18)
#loc145 = loc(fused[#loc1, #loc2])
#loc146 = loc(fused[#loc3, #loc4])
#loc147 = loc(fused[#loc5, #loc6])
#loc148 = loc(fused[#loc7, #loc8])
#loc149 = loc(fused[#loc9, #loc10])
#loc150 = loc(fused[#loc11, #loc12])
#loc151 = loc(fused[#loc13, #loc14])
#loc152 = loc(fused[#loc16, #loc15])
#loc153 = loc(fused[#loc19, #loc20])
#loc154 = loc(fused[#loc18, #loc20])
#loc155 = loc(fused[#loc17, #loc21])
#loc156 = loc(fused[#loc22, #loc21])
#loc157 = loc(fused[#loc23, #loc24])
#loc158 = loc(fused[#loc25, #loc26])
#loc159 = loc(fused[#loc27, #loc24])
#loc160 = loc(fused[#loc32, #loc31])
#loc161 = loc(fused[#loc35, #loc36])
#loc162 = loc(fused[#loc37, #loc38])
#loc163 = loc(fused[#loc39, #loc40])
#loc164 = loc(fused[#loc41, #loc42])
#loc165 = loc(fused[#loc43, #loc44])
#loc166 = loc(fused[#loc49, #loc50])
#loc167 = loc(fused[#loc54, #loc51])
#loc168 = loc(fused[#loc62, #loc63])
#loc169 = loc(fused[#loc64, #loc65])
#loc170 = loc(fused[#loc66, #loc67])
#loc171 = loc(fused[#loc68, #loc69])
#loc172 = loc(fused[#loc74, #loc75])
#loc175 = loc(fused[#loc85, #loc86])
#loc176 = loc(fused[#loc89, #loc90])
#loc177 = loc(fused[#loc93, #loc92])
#loc178 = loc(fused[#loc94, #loc95])
#loc179 = loc(fused[#loc96, #loc97])
#loc180 = loc(fused[#loc99, #loc98])
#loc181 = loc(fused[#loc102, #loc103])
#loc182 = loc(fused[#loc101, #loc103])
#loc183 = loc(fused[#loc100, #loc104])
#loc184 = loc(fused[#loc105, #loc104])
#loc185 = loc(fused[#loc106, #loc107])
#loc186 = loc(fused[#loc108, #loc109])
#loc187 = loc(fused[#loc110, #loc107])
#loc188 = loc(fused[#loc115, #loc114])
#loc189 = loc(fused[#loc118, #loc119])
#loc190 = loc(fused[#loc120, #loc121])
#loc191 = loc(fused[#loc122, #loc123])
#loc192 = loc(fused[#loc124, #loc125])
#loc193 = loc(fused[#loc126, #loc127])
#loc194 = loc(fused[#loc132, #loc133])
#loc195 = loc(fused[#loc137, #loc134])
