!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":25:68)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":25:72)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":68:73)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":68:77)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":106:73)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":106:77)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":139:72)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":139:76)
#true = #cir.bool<true> : !cir.bool
#loc328 = loc(fused[#loc16, #loc17])
#loc357 = loc(fused[#loc91, #loc92])
#loc387 = loc(fused[#loc172, #loc173])
#loc417 = loc(fused[#loc251, #loc252])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_badGlobal : !s32i {alignment = 4 : i64} loc(#loc321)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc322)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc323)
  cir.func private  @printIntLine(!s32i) loc(#loc324)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc325)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc11)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc326)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_badSink(%arg0: !s32i loc(fused[#loc16, #loc17])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc328)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc18)
    cir.scope {
      %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_badGlobal : !cir.ptr<!s32i> loc(#loc321)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc21)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc332)
          %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc333)
          %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc29)
          %7 = cir.const #cir.int<10> : !s32i loc(#loc30)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc30)
          %9 = cir.const #cir.int<4> : !u64i loc(#loc334)
          %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc335)
          %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc29)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc336)
          cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc333)
          cir.scope {
            %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc36)
            %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !s32i loc(#loc338)
            %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc37)
            cir.if %20 {
              %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc39)
              %22 = cir.const #cir.int<1> : !s32i loc(#loc40)
              %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc41)
              cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc39)
            } loc(#loc339)
          } loc(#loc337)
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc44)
            cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc341)
            cir.for : cond {
              %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc46)
              %18 = cir.const #cir.int<10> : !s32i loc(#loc47)
              %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc342)
              %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc48)
              cir.condition(%20) loc(#loc48)
            } body {
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc50)
                %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
                %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc52)
                %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc53)
                cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc344)
              } loc(#loc343)
              cir.yield loc(#loc43)
            } step {
              %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc54)
              %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc55)
              cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc345)
              cir.yield loc(#loc340)
            } loc(#loc340)
          } loc(#loc340)
          cir.scope {
            %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc58)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc59)
            %18 = cir.cmp(ge, %16, %17) : !s32i, !s32i loc(#loc347)
            %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc60)
            cir.if %19 {
              %20 = cir.const #cir.int<1> : !s32i loc(#loc64)
              %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
              %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
              %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc67)
              cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc349)
              cir.scope {
                %24 = cir.const #cir.int<0> : !s32i loc(#loc70)
                cir.store %24, %4 : !s32i, !cir.ptr<!s32i> loc(#loc351)
                cir.for : cond {
                  %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc72)
                  %26 = cir.const #cir.int<10> : !s32i loc(#loc73)
                  %27 = cir.cmp(lt, %25, %26) : !s32i, !s32i loc(#loc352)
                  %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc74)
                  cir.condition(%28) loc(#loc74)
                } body {
                  cir.scope {
                    %25 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc76)
                    %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc77)
                    %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc78)
                    %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc76)
                    cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc79)
                  } loc(#loc353)
                  cir.yield loc(#loc69)
                } step {
                  %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc80)
                  %26 = cir.unary(inc, %25) : !s32i, !s32i loc(#loc81)
                  cir.store %26, %4 : !s32i, !cir.ptr<!s32i> loc(#loc354)
                  cir.yield loc(#loc350)
                } loc(#loc350)
              } loc(#loc350)
            } else {
              %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc11)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc82)
            } loc(#loc348)
          } loc(#loc346)
          %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc83)
          %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc84)
          cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc83)
        } loc(#loc331)
      } loc(#loc330)
    } loc(#loc329)
    cir.return loc(#loc15)
  } loc(#loc327)
  cir.global "private"  external @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G1Global : !s32i {alignment = 4 : i64} loc(#loc355)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc87)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc88)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G1Sink(%arg0: !s32i loc(fused[#loc91, #loc92])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc357)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    cir.scope {
      %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G1Global : !cir.ptr<!s32i> loc(#loc355)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc96)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc96)
      cir.if %3 {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc87)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc87)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc100)
      } else {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc361)
          %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc362)
          %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc107)
          %7 = cir.const #cir.int<10> : !s32i loc(#loc108)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc108)
          %9 = cir.const #cir.int<4> : !u64i loc(#loc363)
          %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc364)
          %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc107)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc365)
          cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc362)
          cir.scope {
            %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc113)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc114)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc114)
            %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !s32i loc(#loc367)
            %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc115)
            cir.if %20 {
              %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc117)
              %22 = cir.const #cir.int<1> : !s32i loc(#loc118)
              %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc119)
              cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc117)
            } loc(#loc368)
          } loc(#loc366)
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc122)
            cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc370)
            cir.for : cond {
              %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc124)
              %18 = cir.const #cir.int<10> : !s32i loc(#loc125)
              %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc371)
              %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc126)
              cir.condition(%20) loc(#loc126)
            } body {
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc128)
                %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc129)
                %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc130)
                %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc131)
                cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc373)
              } loc(#loc372)
              cir.yield loc(#loc121)
            } step {
              %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc132)
              %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc133)
              cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc374)
              cir.yield loc(#loc369)
            } loc(#loc369)
          } loc(#loc369)
          cir.scope {
            %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc136)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc137)
            %18 = cir.cmp(ge, %16, %17) : !s32i, !s32i loc(#loc376)
            %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc138)
            %20 = cir.ternary(%19, true {
              %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc140)
              %22 = cir.const #cir.int<10> : !s32i loc(#loc141)
              %23 = cir.cmp(lt, %21, %22) : !s32i, !s32i loc(#loc377)
              %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc143)
              %25 = cir.ternary(%24, true {
                %26 = cir.const #true loc(#loc139)
                cir.yield %26 : !cir.bool loc(#loc139)
              }, false {
                %26 = cir.const #false loc(#loc139)
                cir.yield %26 : !cir.bool loc(#loc139)
              }) : (!cir.bool) -> !cir.bool loc(#loc139)
              cir.yield %25 : !cir.bool loc(#loc139)
            }, false {
              %21 = cir.const #false loc(#loc139)
              cir.yield %21 : !cir.bool loc(#loc139)
            }) : (!cir.bool) -> !cir.bool loc(#loc139)
            cir.if %20 {
              %21 = cir.const #cir.int<1> : !s32i loc(#loc147)
              %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc148)
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc149)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc150)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc379)
              cir.scope {
                %25 = cir.const #cir.int<0> : !s32i loc(#loc153)
                cir.store %25, %4 : !s32i, !cir.ptr<!s32i> loc(#loc381)
                cir.for : cond {
                  %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc155)
                  %27 = cir.const #cir.int<10> : !s32i loc(#loc156)
                  %28 = cir.cmp(lt, %26, %27) : !s32i, !s32i loc(#loc382)
                  %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc157)
                  cir.condition(%29) loc(#loc157)
                } body {
                  cir.scope {
                    %26 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc159)
                    %27 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc160)
                    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc161)
                    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc159)
                    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc162)
                  } loc(#loc383)
                  cir.yield loc(#loc152)
                } step {
                  %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc163)
                  %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc164)
                  cir.store %27, %4 : !s32i, !cir.ptr<!s32i> loc(#loc384)
                  cir.yield loc(#loc380)
                } loc(#loc380)
              } loc(#loc380)
            } else {
              %21 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc88)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc88)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc165)
            } loc(#loc378)
          } loc(#loc375)
          %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc166)
          %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc167)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc167)
          cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc166)
        } loc(#loc360)
      } loc(#loc359)
    } loc(#loc358)
    cir.return loc(#loc90)
  } loc(#loc356)
  cir.global "private"  external @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G2Global : !s32i {alignment = 4 : i64} loc(#loc385)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G2Sink(%arg0: !s32i loc(fused[#loc172, #loc173])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc387)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    cir.scope {
      %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G2Global : !cir.ptr<!s32i> loc(#loc385)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc177)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc177)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc391)
          %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc392)
          %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc185)
          %7 = cir.const #cir.int<10> : !s32i loc(#loc186)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc186)
          %9 = cir.const #cir.int<4> : !u64i loc(#loc393)
          %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc394)
          %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc185)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc395)
          cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc392)
          cir.scope {
            %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc191)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc192)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc192)
            %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !s32i loc(#loc397)
            %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc193)
            cir.if %20 {
              %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc195)
              %22 = cir.const #cir.int<1> : !s32i loc(#loc196)
              %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc197)
              cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc195)
            } loc(#loc398)
          } loc(#loc396)
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc200)
            cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc400)
            cir.for : cond {
              %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc202)
              %18 = cir.const #cir.int<10> : !s32i loc(#loc203)
              %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc401)
              %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc204)
              cir.condition(%20) loc(#loc204)
            } body {
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc206)
                %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc207)
                %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc208)
                %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc209)
                cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc403)
              } loc(#loc402)
              cir.yield loc(#loc199)
            } step {
              %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc210)
              %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc211)
              cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc404)
              cir.yield loc(#loc399)
            } loc(#loc399)
          } loc(#loc399)
          cir.scope {
            %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc214)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc215)
            %18 = cir.cmp(ge, %16, %17) : !s32i, !s32i loc(#loc406)
            %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc216)
            %20 = cir.ternary(%19, true {
              %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc218)
              %22 = cir.const #cir.int<10> : !s32i loc(#loc219)
              %23 = cir.cmp(lt, %21, %22) : !s32i, !s32i loc(#loc407)
              %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc221)
              %25 = cir.ternary(%24, true {
                %26 = cir.const #true loc(#loc217)
                cir.yield %26 : !cir.bool loc(#loc217)
              }, false {
                %26 = cir.const #false loc(#loc217)
                cir.yield %26 : !cir.bool loc(#loc217)
              }) : (!cir.bool) -> !cir.bool loc(#loc217)
              cir.yield %25 : !cir.bool loc(#loc217)
            }, false {
              %21 = cir.const #false loc(#loc217)
              cir.yield %21 : !cir.bool loc(#loc217)
            }) : (!cir.bool) -> !cir.bool loc(#loc217)
            cir.if %20 {
              %21 = cir.const #cir.int<1> : !s32i loc(#loc225)
              %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc226)
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc227)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc228)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc409)
              cir.scope {
                %25 = cir.const #cir.int<0> : !s32i loc(#loc231)
                cir.store %25, %4 : !s32i, !cir.ptr<!s32i> loc(#loc411)
                cir.for : cond {
                  %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc233)
                  %27 = cir.const #cir.int<10> : !s32i loc(#loc234)
                  %28 = cir.cmp(lt, %26, %27) : !s32i, !s32i loc(#loc412)
                  %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc235)
                  cir.condition(%29) loc(#loc235)
                } body {
                  cir.scope {
                    %26 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc237)
                    %27 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc238)
                    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc239)
                    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc237)
                    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc240)
                  } loc(#loc413)
                  cir.yield loc(#loc230)
                } step {
                  %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc241)
                  %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc242)
                  cir.store %27, %4 : !s32i, !cir.ptr<!s32i> loc(#loc414)
                  cir.yield loc(#loc410)
                } loc(#loc410)
              } loc(#loc410)
            } else {
              %21 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc243)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc243)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc244)
            } loc(#loc408)
          } loc(#loc405)
          %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc245)
          %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc246)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc246)
          cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc245)
        } loc(#loc390)
      } loc(#loc389)
    } loc(#loc388)
    cir.return loc(#loc171)
  } loc(#loc386)
  cir.global "private"  external @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodG2BGlobal : !s32i {alignment = 4 : i64} loc(#loc415)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodG2BSink(%arg0: !s32i loc(fused[#loc251, #loc252])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc417)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc253)
    cir.scope {
      %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodG2BGlobal : !cir.ptr<!s32i> loc(#loc415)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc256)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc256)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc421)
          %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc422)
          %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc264)
          %7 = cir.const #cir.int<10> : !s32i loc(#loc265)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc265)
          %9 = cir.const #cir.int<4> : !u64i loc(#loc423)
          %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc424)
          %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc264)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc425)
          cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc422)
          cir.scope {
            %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc270)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc271)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc271)
            %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !s32i loc(#loc427)
            %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc272)
            cir.if %20 {
              %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc274)
              %22 = cir.const #cir.int<1> : !s32i loc(#loc275)
              %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc276)
              cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc274)
            } loc(#loc428)
          } loc(#loc426)
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc279)
            cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc430)
            cir.for : cond {
              %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc281)
              %18 = cir.const #cir.int<10> : !s32i loc(#loc282)
              %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc431)
              %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc283)
              cir.condition(%20) loc(#loc283)
            } body {
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc285)
                %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc286)
                %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc287)
                %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc288)
                cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc433)
              } loc(#loc432)
              cir.yield loc(#loc278)
            } step {
              %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc289)
              %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc290)
              cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc434)
              cir.yield loc(#loc429)
            } loc(#loc429)
          } loc(#loc429)
          cir.scope {
            %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc293)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc294)
            %18 = cir.cmp(ge, %16, %17) : !s32i, !s32i loc(#loc436)
            %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc295)
            cir.if %19 {
              %20 = cir.const #cir.int<1> : !s32i loc(#loc299)
              %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc300)
              %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc301)
              %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc302)
              cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc438)
              cir.scope {
                %24 = cir.const #cir.int<0> : !s32i loc(#loc305)
                cir.store %24, %4 : !s32i, !cir.ptr<!s32i> loc(#loc440)
                cir.for : cond {
                  %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc307)
                  %26 = cir.const #cir.int<10> : !s32i loc(#loc308)
                  %27 = cir.cmp(lt, %25, %26) : !s32i, !s32i loc(#loc441)
                  %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc309)
                  cir.condition(%28) loc(#loc309)
                } body {
                  cir.scope {
                    %25 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc311)
                    %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc312)
                    %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc313)
                    %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc311)
                    cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc314)
                  } loc(#loc442)
                  cir.yield loc(#loc304)
                } step {
                  %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc315)
                  %26 = cir.unary(inc, %25) : !s32i, !s32i loc(#loc316)
                  cir.store %26, %4 : !s32i, !cir.ptr<!s32i> loc(#loc443)
                  cir.yield loc(#loc439)
                } loc(#loc439)
              } loc(#loc439)
            } else {
              %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc317)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc317)
              cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc318)
            } loc(#loc437)
          } loc(#loc435)
          %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc319)
          %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc320)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc320)
          cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc319)
        } loc(#loc420)
      } loc(#loc419)
    } loc(#loc418)
    cir.return loc(#loc250)
  } loc(#loc416)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":23:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":23:12)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":51:27)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":25:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":56:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":26:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":27:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":55:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":27:8)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":28:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":29:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":54:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":30:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":30:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":31:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":31:58)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":31:35)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":31:42)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":31:47)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":31:57)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":32:13)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":32:43)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":32:17)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":32:27)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":32:24)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":32:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":32:34)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":32:40)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":32:39)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":34:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":37:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":34:22)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":34:18)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":34:25)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":34:29)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":34:27)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":35:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":36:29)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":36:17)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":36:24)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":36:25)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":34:34)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":34:33)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":40:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":52:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":40:17)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":40:25)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":40:22)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":41:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":48:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":50:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":42:32)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":42:17)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":42:24)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":42:28)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":44:17)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":47:17)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":44:25)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":44:21)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":44:28)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":44:32)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":44:30)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":45:17)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":46:34)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":46:41)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":46:42)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":46:21)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":44:37)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":44:36)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":51:17)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":53:13)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":53:18)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":63:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":63:12)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":73:19)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":98:27)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":68:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":103:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":69:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":70:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":102:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":70:8)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":71:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":74:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":76:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":73:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":77:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":101:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":78:13)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":78:17)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":79:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":79:58)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":79:35)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":79:42)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":79:47)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":79:57)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":80:13)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":80:43)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":80:17)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":80:27)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":80:24)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":80:33)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":80:34)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":80:40)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":80:39)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":82:13)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":85:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":82:22)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":82:18)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":82:25)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":82:29)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":82:27)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":83:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":84:29)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":84:17)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":84:24)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":84:25)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":82:34)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":82:33)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":87:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":99:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":87:17)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":87:25)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":87:22)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":87:27)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":87:30)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":87:38)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":87:40)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":87:35)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":88:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":95:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":97:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":89:32)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":89:17)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":89:24)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":89:28)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":91:17)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":94:17)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":91:25)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":91:21)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":91:28)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":91:32)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":91:30)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":92:17)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":93:34)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":93:41)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":93:42)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":93:21)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":91:37)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":91:36)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":98:17)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":100:13)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":100:18)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":64:1)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":64:12)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":106:1)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":136:1)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":107:1)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":108:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":135:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":108:8)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":109:5)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":110:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":134:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":111:13)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":111:17)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":112:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":112:58)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":112:35)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":112:42)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":112:47)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":112:57)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":113:13)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":113:43)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":113:17)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":113:27)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":113:24)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":113:33)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":113:34)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":113:40)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":113:39)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":115:13)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":118:13)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":115:22)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":115:18)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":115:25)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":115:29)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":115:27)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":116:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":117:29)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":117:17)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":117:24)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":117:25)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":115:34)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":115:33)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":120:13)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":132:13)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":120:17)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":120:25)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":120:22)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":120:27)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":120:30)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":120:38)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":120:40)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":120:35)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":121:13)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":128:13)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":130:13)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":122:32)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":122:17)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":122:24)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":122:28)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":124:17)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":127:17)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":124:25)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":124:21)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":124:28)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":124:32)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":124:30)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":125:17)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":126:34)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":126:41)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":126:42)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":126:21)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":124:37)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":124:36)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":131:27)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":131:17)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":133:13)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":133:18)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":65:1)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":65:12)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":139:1)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":170:1)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":140:1)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":141:5)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":169:5)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":141:8)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":142:5)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":143:9)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":168:9)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":144:13)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":144:17)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":145:13)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":145:58)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":145:35)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":145:42)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":145:47)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":145:57)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":146:13)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":146:43)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":146:17)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":146:27)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":146:24)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":146:33)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":146:34)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":146:40)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":146:39)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":148:13)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":151:13)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":148:22)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":148:18)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":148:25)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":148:29)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":148:27)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":149:13)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":150:29)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":150:17)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":150:24)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":150:25)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":148:34)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":148:33)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":154:13)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":166:13)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":154:17)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":154:25)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":154:22)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":155:13)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":162:13)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":164:13)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":156:32)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":156:17)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":156:24)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":156:28)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":158:17)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":161:17)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":158:25)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":158:21)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":158:28)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":158:32)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":158:30)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":159:17)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":160:34)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":160:41)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":160:42)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":160:21)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":158:37)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":158:36)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":165:27)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":165:17)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":167:13)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c":167:18)
#loc321 = loc(fused[#loc1, #loc2])
#loc322 = loc(fused[#loc3, #loc4])
#loc323 = loc(fused[#loc5, #loc6])
#loc324 = loc(fused[#loc7, #loc8])
#loc325 = loc(fused[#loc9, #loc10])
#loc326 = loc(fused[#loc12, #loc13])
#loc327 = loc(fused[#loc14, #loc15])
#loc329 = loc(fused[#loc19, #loc20])
#loc330 = loc(fused[#loc22, #loc20])
#loc331 = loc(fused[#loc23, #loc24])
#loc332 = loc(fused[#loc25, #loc26])
#loc333 = loc(fused[#loc27, #loc28])
#loc334 = loc(fused[#loc31, #loc32])
#loc335 = loc(fused[#loc30, #loc32])
#loc336 = loc(fused[#loc29, #loc28])
#loc337 = loc(fused[#loc33, #loc34])
#loc338 = loc(fused[#loc35, #loc36])
#loc339 = loc(fused[#loc38, #loc34])
#loc340 = loc(fused[#loc42, #loc43])
#loc341 = loc(fused[#loc45, #loc44])
#loc342 = loc(fused[#loc46, #loc47])
#loc343 = loc(fused[#loc49, #loc43])
#loc344 = loc(fused[#loc51, #loc50])
#loc345 = loc(fused[#loc55, #loc54])
#loc346 = loc(fused[#loc56, #loc57])
#loc347 = loc(fused[#loc58, #loc59])
#loc348 = loc(fused[#loc61, #loc62, #loc63, #loc57])
#loc349 = loc(fused[#loc65, #loc64])
#loc350 = loc(fused[#loc68, #loc69])
#loc351 = loc(fused[#loc71, #loc70])
#loc352 = loc(fused[#loc72, #loc73])
#loc353 = loc(fused[#loc75, #loc69])
#loc354 = loc(fused[#loc81, #loc80])
#loc355 = loc(fused[#loc85, #loc86])
#loc356 = loc(fused[#loc89, #loc90])
#loc358 = loc(fused[#loc94, #loc95])
#loc359 = loc(fused[#loc97, #loc98, #loc99, #loc95])
#loc360 = loc(fused[#loc101, #loc102])
#loc361 = loc(fused[#loc103, #loc104])
#loc362 = loc(fused[#loc105, #loc106])
#loc363 = loc(fused[#loc109, #loc110])
#loc364 = loc(fused[#loc108, #loc110])
#loc365 = loc(fused[#loc107, #loc106])
#loc366 = loc(fused[#loc111, #loc112])
#loc367 = loc(fused[#loc113, #loc114])
#loc368 = loc(fused[#loc116, #loc112])
#loc369 = loc(fused[#loc120, #loc121])
#loc370 = loc(fused[#loc123, #loc122])
#loc371 = loc(fused[#loc124, #loc125])
#loc372 = loc(fused[#loc127, #loc121])
#loc373 = loc(fused[#loc129, #loc128])
#loc374 = loc(fused[#loc133, #loc132])
#loc375 = loc(fused[#loc134, #loc135])
#loc376 = loc(fused[#loc136, #loc137])
#loc377 = loc(fused[#loc140, #loc142])
#loc378 = loc(fused[#loc144, #loc145, #loc146, #loc135])
#loc379 = loc(fused[#loc148, #loc147])
#loc380 = loc(fused[#loc151, #loc152])
#loc381 = loc(fused[#loc154, #loc153])
#loc382 = loc(fused[#loc155, #loc156])
#loc383 = loc(fused[#loc158, #loc152])
#loc384 = loc(fused[#loc164, #loc163])
#loc385 = loc(fused[#loc168, #loc169])
#loc386 = loc(fused[#loc170, #loc171])
#loc388 = loc(fused[#loc175, #loc176])
#loc389 = loc(fused[#loc178, #loc176])
#loc390 = loc(fused[#loc179, #loc180])
#loc391 = loc(fused[#loc181, #loc182])
#loc392 = loc(fused[#loc183, #loc184])
#loc393 = loc(fused[#loc187, #loc188])
#loc394 = loc(fused[#loc186, #loc188])
#loc395 = loc(fused[#loc185, #loc184])
#loc396 = loc(fused[#loc189, #loc190])
#loc397 = loc(fused[#loc191, #loc192])
#loc398 = loc(fused[#loc194, #loc190])
#loc399 = loc(fused[#loc198, #loc199])
#loc400 = loc(fused[#loc201, #loc200])
#loc401 = loc(fused[#loc202, #loc203])
#loc402 = loc(fused[#loc205, #loc199])
#loc403 = loc(fused[#loc207, #loc206])
#loc404 = loc(fused[#loc211, #loc210])
#loc405 = loc(fused[#loc212, #loc213])
#loc406 = loc(fused[#loc214, #loc215])
#loc407 = loc(fused[#loc218, #loc220])
#loc408 = loc(fused[#loc222, #loc223, #loc224, #loc213])
#loc409 = loc(fused[#loc226, #loc225])
#loc410 = loc(fused[#loc229, #loc230])
#loc411 = loc(fused[#loc232, #loc231])
#loc412 = loc(fused[#loc233, #loc234])
#loc413 = loc(fused[#loc236, #loc230])
#loc414 = loc(fused[#loc242, #loc241])
#loc415 = loc(fused[#loc247, #loc248])
#loc416 = loc(fused[#loc249, #loc250])
#loc418 = loc(fused[#loc254, #loc255])
#loc419 = loc(fused[#loc257, #loc255])
#loc420 = loc(fused[#loc258, #loc259])
#loc421 = loc(fused[#loc260, #loc261])
#loc422 = loc(fused[#loc262, #loc263])
#loc423 = loc(fused[#loc266, #loc267])
#loc424 = loc(fused[#loc265, #loc267])
#loc425 = loc(fused[#loc264, #loc263])
#loc426 = loc(fused[#loc268, #loc269])
#loc427 = loc(fused[#loc270, #loc271])
#loc428 = loc(fused[#loc273, #loc269])
#loc429 = loc(fused[#loc277, #loc278])
#loc430 = loc(fused[#loc280, #loc279])
#loc431 = loc(fused[#loc281, #loc282])
#loc432 = loc(fused[#loc284, #loc278])
#loc433 = loc(fused[#loc286, #loc285])
#loc434 = loc(fused[#loc290, #loc289])
#loc435 = loc(fused[#loc291, #loc292])
#loc436 = loc(fused[#loc293, #loc294])
#loc437 = loc(fused[#loc296, #loc297, #loc298, #loc292])
#loc438 = loc(fused[#loc300, #loc299])
#loc439 = loc(fused[#loc303, #loc304])
#loc440 = loc(fused[#loc306, #loc305])
#loc441 = loc(fused[#loc307, #loc308])
#loc442 = loc(fused[#loc310, #loc304])
#loc443 = loc(fused[#loc316, #loc315])
