!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc112 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":113:44)
#loc175 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":181:10)
#loc176 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":181:14)
#loc177 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":181:20)
#loc178 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":181:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc282 = loc(fused[#loc175, #loc176])
#loc283 = loc(fused[#loc177, #loc178])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.goodG2B.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc212)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_connect_socket_execlp_68_bad.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc213)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc214)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc215)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc216)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc11)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc217)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc218)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc219)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc220)
  cir.func private @close(!s32i) -> !s32i loc(#loc221)
  cir.global external dsolocal @CWE78_OS_Command_Injection__char_connect_socket_execlp_68_badData = #cir.ptr<null> : !cir.ptr<!s8i> {alignment = 8 : i64} loc(#loc222)
  cir.func no_proto private @CWE78_OS_Command_Injection__char_connect_socket_execlp_68b_badSink(...) loc(#loc223)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execlp_68_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc225)
    %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc226)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc227)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc228)
    %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc229)
    %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc230)
    %6 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc213)
    %7 = cir.get_global @__const.CWE78_OS_Command_Injection__char_connect_socket_execlp_68_bad.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc213)
    cir.copy %7 to %6 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc213)
    %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc40)
    cir.store %8, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc231)
    cir.br ^bb1 loc(#loc232)
  ^bb1:  // pred: ^bb0
    %9 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc35)
    cir.store %10, %3 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    %11 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc44)
    %12 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
    %13 = cir.call @strlen(%12) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc44)
    cir.store %13, %4 : !u64i, !cir.ptr<!u64i> loc(#loc229)
    cir.br ^bb2 loc(#loc233)
  ^bb2:  // pred: ^bb1
    cir.br ^bb4 loc(#loc233)
  ^bb3:  // pred: ^bb32
    %14 = cir.const #cir.int<0> : !s32i loc(#loc48)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc48)
    cir.brcond %15 ^bb4, ^bb33 loc(#loc48)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %16 = cir.const #cir.int<2> : !s32i loc(#loc49)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %18 = cir.const #cir.int<6> : !s32i loc(#loc51)
    %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc52)
    cir.store %19, %3 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    cir.br ^bb5 loc(#loc235)
  ^bb5:  // pred: ^bb4
    %20 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc58)
    %23 = cir.cmp(eq, %20, %22) : !s32i, !cir.bool loc(#loc236)
    cir.brcond %23 ^bb6, ^bb7 loc(#loc237)
  ^bb6:  // pred: ^bb5
    cir.br ^bb33 loc(#loc60)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc56)
  ^bb8:  // pred: ^bb7
    %24 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc238)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc63)
    %26 = cir.const #cir.int<16> : !u64i loc(#loc239)
    cir.libc.memset %26 bytes from %24 set to %25 : !cir.ptr<!void>, !s32i, !u64i loc(#loc240)
    %27 = cir.const #cir.int<2> : !s32i loc(#loc68)
    %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc68)
    %29 = cir.get_member %1[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
    cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc241)
    %30 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc11)
    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc11)
    %32 = cir.call @inet_addr(%31) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc71)
    %33 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
    %34 = cir.get_member %33[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
    cir.store %32, %34 : !u32i, !cir.ptr<!u32i> loc(#loc242)
    %35 = cir.const #cir.int<27015> : !s32i loc(#loc76)
    %36 = cir.cast(integral, %35 : !s32i), !u16i loc(#loc76)
    %37 = cir.call @htons(%36) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc77)
    %38 = cir.get_member %1[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
    cir.store %37, %38 : !u16i, !cir.ptr<!u16i> loc(#loc243)
    cir.br ^bb9 loc(#loc244)
  ^bb9:  // pred: ^bb8
    %39 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    %40 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc245)
    %41 = cir.const #cir.int<16> : !u64i loc(#loc246)
    %42 = cir.cast(integral, %41 : !u64i), !u32i loc(#loc246)
    %43 = cir.call @connect(%39, %40, %42) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc88)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %45 = cir.unary(minus, %44) : !s32i, !s32i loc(#loc89)
    %46 = cir.cmp(eq, %43, %45) : !s32i, !cir.bool loc(#loc247)
    cir.brcond %46 ^bb10, ^bb11 loc(#loc248)
  ^bb10:  // pred: ^bb9
    cir.br ^bb33 loc(#loc91)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc82)
  ^bb12:  // pred: ^bb11
    %47 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    %48 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
    %49 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc94)
    %50 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %49 : !u64i), !cir.ptr<!s8i> loc(#loc95)
    %51 = cir.cast(bitcast, %50 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc249)
    %52 = cir.const #cir.int<1> : !u64i loc(#loc250)
    %53 = cir.const #cir.int<100> : !s32i loc(#loc100)
    %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc100)
    %55 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc101)
    %56 = cir.binop(sub, %54, %55) : !u64i loc(#loc251)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc102)
    %58 = cir.cast(integral, %57 : !s32i), !u64i loc(#loc102)
    %59 = cir.binop(sub, %56, %58) : !u64i loc(#loc252)
    %60 = cir.binop(mul, %52, %59) : !u64i loc(#loc253)
    %61 = cir.const #cir.int<0> : !s32i loc(#loc104)
    %62 = cir.call @recv(%47, %51, %60, %61) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc105)
    %63 = cir.cast(integral, %62 : !s64i), !s32i loc(#loc105)
    cir.store %63, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    cir.br ^bb13 loc(#loc255)
  ^bb13:  // pred: ^bb12
    %64 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    %65 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc111)
    %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc256)
    cir.brcond %67 ^bb14, ^bb15 loc(#loc112)
  ^bb14:  // pred: ^bb13
    %68 = cir.const #true loc(#loc112)
    cir.br ^bb20(%68 : !cir.bool) loc(#loc112)
  ^bb15:  // pred: ^bb13
    %69 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    %70 = cir.const #cir.int<0> : !s32i loc(#loc114)
    %71 = cir.cmp(eq, %69, %70) : !s32i, !cir.bool loc(#loc257)
    cir.brcond %71 ^bb16, ^bb17 loc(#loc112)
  ^bb16:  // pred: ^bb15
    %72 = cir.const #true loc(#loc112)
    cir.br ^bb18(%72 : !cir.bool) loc(#loc112)
  ^bb17:  // pred: ^bb15
    %73 = cir.const #false loc(#loc112)
    cir.br ^bb18(%73 : !cir.bool) loc(#loc112)
  ^bb18(%74: !cir.bool loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":113:44)):  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc112)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20(%74 : !cir.bool) loc(#loc112)
  ^bb20(%75: !cir.bool loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":113:44)):  // 2 preds: ^bb14, ^bb19
    cir.br ^bb21 loc(#loc112)
  ^bb21:  // pred: ^bb20
    cir.brcond %75 ^bb22, ^bb23 loc(#loc258)
  ^bb22:  // pred: ^bb21
    cir.br ^bb33 loc(#loc116)
  ^bb23:  // pred: ^bb21
    cir.br ^bb24 loc(#loc109)
  ^bb24:  // pred: ^bb23
    %76 = cir.const #cir.int<0> : !s32i loc(#loc117)
    %77 = cir.cast(integral, %76 : !s32i), !s8i loc(#loc117)
    %78 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
    %79 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc119)
    %80 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc120)
    %81 = cir.cast(integral, %80 : !s32i), !u64i loc(#loc120)
    %82 = cir.const #cir.int<1> : !u64i loc(#loc259)
    %83 = cir.binop(div, %81, %82) : !u64i loc(#loc260)
    %84 = cir.binop(add, %79, %83) : !u64i loc(#loc261)
    %85 = cir.ptr_stride(%78 : !cir.ptr<!s8i>, %84 : !u64i), !cir.ptr<!s8i> loc(#loc123)
    cir.store %77, %85 : !s8i, !cir.ptr<!s8i> loc(#loc262)
    %86 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
    %87 = cir.const #cir.int<13> : !s32i loc(#loc125)
    %88 = cir.call @strchr(%86, %87) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc126)
    cir.store %88, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc263)
    cir.br ^bb25 loc(#loc264)
  ^bb25:  // pred: ^bb24
    %89 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
    %90 = cir.cast(ptr_to_bool, %89 : !cir.ptr<!s8i>), !cir.bool loc(#loc131)
    cir.brcond %90 ^bb26, ^bb27 loc(#loc265)
  ^bb26:  // pred: ^bb25
    %91 = cir.const #cir.int<0> : !s32i loc(#loc133)
    %92 = cir.cast(integral, %91 : !s32i), !s8i loc(#loc133)
    %93 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
    cir.store %92, %93 : !s8i, !cir.ptr<!s8i> loc(#loc266)
    cir.br ^bb27 loc(#loc130)
  ^bb27:  // 2 preds: ^bb25, ^bb26
    cir.br ^bb28 loc(#loc130)
  ^bb28:  // pred: ^bb27
    %94 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc136)
    %95 = cir.const #cir.int<10> : !s32i loc(#loc137)
    %96 = cir.call @strchr(%94, %95) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc138)
    cir.store %96, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc267)
    cir.br ^bb29 loc(#loc268)
  ^bb29:  // pred: ^bb28
    %97 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
    %98 = cir.cast(ptr_to_bool, %97 : !cir.ptr<!s8i>), !cir.bool loc(#loc143)
    cir.brcond %98 ^bb30, ^bb31 loc(#loc269)
  ^bb30:  // pred: ^bb29
    %99 = cir.const #cir.int<0> : !s32i loc(#loc145)
    %100 = cir.cast(integral, %99 : !s32i), !s8i loc(#loc145)
    %101 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
    cir.store %100, %101 : !s8i, !cir.ptr<!s8i> loc(#loc270)
    cir.br ^bb31 loc(#loc142)
  ^bb31:  // 2 preds: ^bb29, ^bb30
    cir.br ^bb32 loc(#loc142)
  ^bb32:  // pred: ^bb31
    cir.br ^bb3 loc(#loc47)
  ^bb33:  // 4 preds: ^bb3, ^bb6, ^bb10, ^bb22
    cir.br ^bb34 loc(#loc47)
  ^bb34:  // pred: ^bb33
    cir.br ^bb35 loc(#loc271)
  ^bb35:  // pred: ^bb34
    %102 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc150)
    %103 = cir.const #cir.int<1> : !s32i loc(#loc151)
    %104 = cir.unary(minus, %103) : !s32i, !s32i loc(#loc151)
    %105 = cir.cmp(ne, %102, %104) : !s32i, !cir.bool loc(#loc272)
    cir.brcond %105 ^bb36, ^bb37 loc(#loc273)
  ^bb36:  // pred: ^bb35
    %106 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc153)
    %107 = cir.call @close(%106) : (!s32i) -> !s32i loc(#loc154)
    cir.br ^bb37 loc(#loc149)
  ^bb37:  // 2 preds: ^bb35, ^bb36
    cir.br ^bb38 loc(#loc149)
  ^bb38:  // pred: ^bb37
    cir.br ^bb39 loc(#loc43)
  ^bb39:  // pred: ^bb38
    %108 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc155)
    %109 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execlp_68_badData : !cir.ptr<!cir.ptr<!s8i>> loc(#loc222)
    cir.store %108, %109 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc274)
    %110 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execlp_68b_badSink : !cir.ptr<!cir.func<!void (...)>> loc(#loc275)
    %111 = cir.cast(bitcast, %110 : !cir.ptr<!cir.func<!void (...)>>), !cir.ptr<!cir.func<!void ()>> loc(#loc275)
    cir.call %111() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc157)
    cir.return loc(#loc27)
  } loc(#loc224)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execlp_68_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc277)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc161)
    cir.return loc(#loc160)
  } loc(#loc276)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc278)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc279)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc280)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc169)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc172)
  cir.func @main(%arg0: !s32i loc(fused[#loc175, #loc176]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc177, #loc178])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc282)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc283)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc174)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc179)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc179)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc180)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc181)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc181)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc182)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc169)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc169)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc183)
    %8 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execlp_68_good : !cir.ptr<!cir.func<!void ()>> loc(#loc284)
    cir.call @CWE78_OS_Command_Injection__char_connect_socket_execlp_68_good() : () -> () loc(#loc184)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc170)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc170)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc186)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc171)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc171)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc187)
    %13 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execlp_68_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc285)
    cir.call @CWE78_OS_Command_Injection__char_connect_socket_execlp_68_bad() : () -> () loc(#loc188)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc172)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc172)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc190)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc191)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc286)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc286)
    cir.return %17 : !s32i loc(#loc286)
  } loc(#loc281)
  cir.global external dsolocal @CWE78_OS_Command_Injection__char_connect_socket_execlp_68_goodG2BData = #cir.ptr<null> : !cir.ptr<!s8i> {alignment = 8 : i64} loc(#loc287)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc288)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc197)
  cir.func no_proto private @CWE78_OS_Command_Injection__char_connect_socket_execlp_68b_goodG2BSink(...) loc(#loc289)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc291)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc212)
    %2 = cir.get_global @__const.goodG2B.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc212)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc212)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc204)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc292)
    %4 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc206)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc207)
    %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc197)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc197)
    %8 = cir.call @strcat(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc206)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc208)
    %10 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execlp_68_goodG2BData : !cir.ptr<!cir.ptr<!s8i>> loc(#loc287)
    cir.store %9, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc293)
    %11 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execlp_68b_goodG2BSink : !cir.ptr<!cir.func<!void (...)>> loc(#loc294)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!cir.func<!void (...)>>), !cir.ptr<!cir.func<!void ()>> loc(#loc294)
    cir.call %12() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc210)
    cir.return loc(#loc201)
  } loc(#loc290)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":158:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":158:28)
#loc3 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":74:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":74:28)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/sys/socket.h":102:1)
#loc8 = loc("/usr/include/sys/socket.h":102:62)
#loc9 = loc("/usr/include/arpa/inet.h":34:1)
#loc10 = loc("/usr/include/arpa/inet.h":34:47)
#loc11 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":103:49)
#loc12 = loc("/usr/include/netinet/in.h":404:1)
#loc13 = loc("/usr/include/netinet/in.h":405:40)
#loc14 = loc("/usr/include/sys/socket.h":126:1)
#loc15 = loc("/usr/include/sys/socket.h":126:75)
#loc16 = loc("/usr/include/sys/socket.h":145:1)
#loc17 = loc("/usr/include/sys/socket.h":145:68)
#loc18 = loc("/usr/include/string.h":246:1)
#loc19 = loc("/usr/include/string.h":247:33)
#loc20 = loc("/usr/include/unistd.h":358:1)
#loc21 = loc("/usr/include/unistd.h":358:27)
#loc22 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":63:1)
#loc23 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":63:8)
#loc24 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":69:1)
#loc25 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":69:73)
#loc26 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":71:1)
#loc27 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":145:1)
#loc28 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":81:9)
#loc29 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":81:13)
#loc30 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":82:9)
#loc31 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":82:28)
#loc32 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":83:9)
#loc33 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":83:15)
#loc34 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":84:9)
#loc35 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":84:32)
#loc36 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":85:9)
#loc37 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":85:37)
#loc38 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":73:5)
#loc39 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":73:12)
#loc40 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":75:12)
#loc41 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":75:5)
#loc42 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":76:5)
#loc43 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":142:5)
#loc44 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":85:26)
#loc45 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":85:33)
#loc46 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":86:9)
#loc47 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":131:17)
#loc48 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":131:16)
#loc49 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":96:36)
#loc50 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":96:45)
#loc51 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":96:58)
#loc52 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":96:29)
#loc53 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":96:13)
#loc54 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":96:69)
#loc55 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":97:13)
#loc56 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":100:13)
#loc57 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":97:17)
#loc58 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":97:34)
#loc59 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":98:13)
#loc60 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":99:17)
#loc61 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":101:20)
#loc62 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":101:21)
#loc63 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":101:30)
#loc64 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":101:33)
#loc65 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":101:47)
#loc66 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":101:13)
#loc67 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":101:48)
#loc68 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":102:34)
#loc69 = loc("/usr/include/netinet/in.h":249:5)
#loc70 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":102:13)
#loc71 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":103:39)
#loc72 = loc("/usr/include/netinet/in.h":251:20)
#loc73 = loc("/usr/include/netinet/in.h":33:15)
#loc74 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":103:13)
#loc75 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":103:59)
#loc76 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":104:38)
#loc77 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":104:32)
#loc78 = loc("/usr/include/netinet/in.h":250:15)
#loc79 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":104:13)
#loc80 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":104:46)
#loc81 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":105:13)
#loc82 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":108:13)
#loc83 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":105:25)
#loc84 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":105:58)
#loc85 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":105:59)
#loc86 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":105:68)
#loc87 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":105:82)
#loc88 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":105:17)
#loc89 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":105:88)
#loc90 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":106:13)
#loc91 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":107:17)
#loc92 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":112:31)
#loc93 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":112:55)
#loc94 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":112:62)
#loc95 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":112:60)
#loc96 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":112:46)
#loc97 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":112:69)
#loc98 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":112:72)
#loc99 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":112:83)
#loc100 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":112:88)
#loc101 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":112:94)
#loc102 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":112:104)
#loc103 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":112:105)
#loc104 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":112:108)
#loc105 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":112:26)
#loc106 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":112:13)
#loc107 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":112:109)
#loc108 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":113:13)
#loc109 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":116:13)
#loc110 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":113:17)
#loc111 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":113:31)
#loc113 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":113:47)
#loc114 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":113:61)
#loc115 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":114:13)
#loc116 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":115:17)
#loc117 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":118:57)
#loc118 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":118:13)
#loc119 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":118:18)
#loc120 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":118:28)
#loc121 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":118:41)
#loc122 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":118:52)
#loc123 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":118:53)
#loc124 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":120:30)
#loc125 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":120:36)
#loc126 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":120:23)
#loc127 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":120:13)
#loc128 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":120:40)
#loc129 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":121:13)
#loc130 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":124:13)
#loc131 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":121:17)
#loc132 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":122:13)
#loc133 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":123:28)
#loc134 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":123:18)
#loc135 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":123:17)
#loc136 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":125:30)
#loc137 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":125:36)
#loc138 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":125:23)
#loc139 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":125:13)
#loc140 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":125:40)
#loc141 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":126:13)
#loc142 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":129:13)
#loc143 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":126:17)
#loc144 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":127:13)
#loc145 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":128:28)
#loc146 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":128:18)
#loc147 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":128:17)
#loc148 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":132:9)
#loc149 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":135:9)
#loc150 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":132:13)
#loc151 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":132:30)
#loc152 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":133:9)
#loc153 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":134:26)
#loc154 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":134:13)
#loc155 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":143:73)
#loc156 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":143:5)
#loc157 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":144:5)
#loc158 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":144:72)
#loc159 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":166:1)
#loc160 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":169:1)
#loc161 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":168:5)
#loc162 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":168:13)
#loc163 = loc("/usr/include/stdlib.h":575:1)
#loc164 = loc("/usr/include/stdlib.h":575:41)
#loc165 = loc("/usr/include/time.h":76:1)
#loc166 = loc("/usr/include/time.h":76:38)
#loc167 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc168 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc169 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":186:15)
#loc170 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":188:15)
#loc171 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":191:15)
#loc172 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":193:15)
#loc173 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":181:1)
#loc174 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":196:1)
#loc179 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":182:1)
#loc180 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":184:27)
#loc181 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":184:22)
#loc182 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":184:5)
#loc183 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":186:5)
#loc184 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":187:5)
#loc185 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":187:68)
#loc186 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":188:5)
#loc187 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":191:5)
#loc188 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":192:5)
#loc189 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":192:67)
#loc190 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":193:5)
#loc191 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":195:12)
#loc192 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":195:5)
#loc193 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":64:1)
#loc194 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":64:8)
#loc195 = loc("/usr/include/string.h":149:1)
#loc196 = loc("/usr/include/string.h":150:14)
#loc197 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":161:18)
#loc198 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":152:1)
#loc199 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":152:77)
#loc200 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":155:1)
#loc201 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":164:1)
#loc202 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":157:5)
#loc203 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":157:12)
#loc204 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":159:12)
#loc205 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":159:5)
#loc206 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":161:5)
#loc207 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":161:12)
#loc208 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":162:77)
#loc209 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":162:5)
#loc210 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":163:5)
#loc211 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_68a.c":163:76)
#loc212 = loc(fused[#loc1, #loc2])
#loc213 = loc(fused[#loc3, #loc4])
#loc214 = loc(fused[#loc5, #loc6])
#loc215 = loc(fused[#loc7, #loc8])
#loc216 = loc(fused[#loc9, #loc10])
#loc217 = loc(fused[#loc12, #loc13])
#loc218 = loc(fused[#loc14, #loc15])
#loc219 = loc(fused[#loc16, #loc17])
#loc220 = loc(fused[#loc18, #loc19])
#loc221 = loc(fused[#loc20, #loc21])
#loc222 = loc(fused[#loc22, #loc23])
#loc223 = loc(fused[#loc24, #loc25])
#loc224 = loc(fused[#loc26, #loc27])
#loc225 = loc(fused[#loc28, #loc29])
#loc226 = loc(fused[#loc30, #loc31])
#loc227 = loc(fused[#loc32, #loc33])
#loc228 = loc(fused[#loc34, #loc35])
#loc229 = loc(fused[#loc36, #loc37])
#loc230 = loc(fused[#loc38, #loc39])
#loc231 = loc(fused[#loc41, #loc40])
#loc232 = loc(fused[#loc42, #loc43])
#loc233 = loc(fused[#loc46, #loc47])
#loc234 = loc(fused[#loc53, #loc54])
#loc235 = loc(fused[#loc55, #loc56])
#loc236 = loc(fused[#loc57, #loc58])
#loc237 = loc(fused[#loc59, #loc56])
#loc238 = loc(fused[#loc61, #loc62])
#loc239 = loc(fused[#loc64, #loc65])
#loc240 = loc(fused[#loc66, #loc67])
#loc241 = loc(fused[#loc70, #loc68])
#loc242 = loc(fused[#loc74, #loc75])
#loc243 = loc(fused[#loc79, #loc80])
#loc244 = loc(fused[#loc81, #loc82])
#loc245 = loc(fused[#loc84, #loc85])
#loc246 = loc(fused[#loc86, #loc87])
#loc247 = loc(fused[#loc88, #loc89])
#loc248 = loc(fused[#loc90, #loc82])
#loc249 = loc(fused[#loc96, #loc97])
#loc250 = loc(fused[#loc98, #loc99])
#loc251 = loc(fused[#loc100, #loc101])
#loc252 = loc(fused[#loc100, #loc102])
#loc253 = loc(fused[#loc98, #loc103])
#loc254 = loc(fused[#loc106, #loc107])
#loc255 = loc(fused[#loc108, #loc109])
#loc256 = loc(fused[#loc110, #loc111])
#loc257 = loc(fused[#loc113, #loc114])
#loc258 = loc(fused[#loc115, #loc109])
#loc259 = loc(fused[#loc121, #loc122])
#loc260 = loc(fused[#loc120, #loc122])
#loc261 = loc(fused[#loc119, #loc122])
#loc262 = loc(fused[#loc118, #loc117])
#loc263 = loc(fused[#loc127, #loc128])
#loc264 = loc(fused[#loc129, #loc130])
#loc265 = loc(fused[#loc132, #loc130])
#loc266 = loc(fused[#loc135, #loc133])
#loc267 = loc(fused[#loc139, #loc140])
#loc268 = loc(fused[#loc141, #loc142])
#loc269 = loc(fused[#loc144, #loc142])
#loc270 = loc(fused[#loc147, #loc145])
#loc271 = loc(fused[#loc148, #loc149])
#loc272 = loc(fused[#loc150, #loc151])
#loc273 = loc(fused[#loc152, #loc149])
#loc274 = loc(fused[#loc156, #loc155])
#loc275 = loc(fused[#loc157, #loc158])
#loc276 = loc(fused[#loc159, #loc160])
#loc277 = loc(fused[#loc161, #loc162])
#loc278 = loc(fused[#loc163, #loc164])
#loc279 = loc(fused[#loc165, #loc166])
#loc280 = loc(fused[#loc167, #loc168])
#loc281 = loc(fused[#loc173, #loc174])
#loc284 = loc(fused[#loc184, #loc185])
#loc285 = loc(fused[#loc188, #loc189])
#loc286 = loc(fused[#loc192, #loc191])
#loc287 = loc(fused[#loc193, #loc194])
#loc288 = loc(fused[#loc195, #loc196])
#loc289 = loc(fused[#loc198, #loc199])
#loc290 = loc(fused[#loc200, #loc201])
#loc291 = loc(fused[#loc202, #loc203])
#loc292 = loc(fused[#loc205, #loc204])
#loc293 = loc(fused[#loc209, #loc208])
#loc294 = loc(fused[#loc210, #loc211])
