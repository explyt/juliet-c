!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":204:10)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":204:14)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":204:20)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":204:32)
#loc477 = loc(fused[#loc111, #loc112])
#loc478 = loc(fused[#loc113, #loc114])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc433)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc434)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc435)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc436)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc437)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc438)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc439)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc440)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc441)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc443)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc23)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc444)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc446)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc446)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc27)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc27)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc449)
          %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc34)
          %8 = cir.const #cir.int<50> : !s32i loc(#loc35)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc35)
          %10 = cir.const #cir.int<4> : !u64i loc(#loc450)
          %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc451)
          %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc34)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc452)
          cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc449)
          cir.scope {
            %29 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc40)
            %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc41)
            %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc41)
            %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s32i>, !cir.bool loc(#loc454)
            cir.if %32 {
              %33 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc43)
              %34 = cir.const #cir.int<1> : !s32i loc(#loc44)
              %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc45)
              cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc43)
            } loc(#loc455)
          } loc(#loc453)
          %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc46)
          %15 = cir.const #cir.int<65> : !s32i loc(#loc47)
          %16 = cir.const #cir.int<50> : !s32i loc(#loc48)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc49)
          %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc48)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc48)
          %20 = cir.call @wmemset(%14, %15, %19) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc50)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc51)
          %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
          %23 = cir.const #cir.int<50> : !s32i loc(#loc53)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc54)
          %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc53)
          %26 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc55)
          cir.store %21, %26 : !s32i, !cir.ptr<!s32i> loc(#loc456)
          %27 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc56)
          %28 = cir.cast(bitcast, %27 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc56)
          cir.store %28, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc457)
        } loc(#loc448)
      } loc(#loc447)
    } loc(#loc445)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc459)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc459)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc60)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc60)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc462)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc463)
          %8 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc69)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc70)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc70)
          %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc69)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc462)
          %12 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc71)
          %13 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc72)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc73)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc73)
          %16 = cir.binop(add, %13, %15) : !u64i loc(#loc464)
          %17 = cir.const #cir.int<4> : !u64i loc(#loc465)
          %18 = cir.call @calloc(%16, %17) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc71)
          cir.store %18, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc463)
          cir.scope {
            %28 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc78)
            %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc79)
            %30 = cir.cmp(eq, %28, %29) : !cir.ptr<!void>, !cir.bool loc(#loc467)
            cir.if %30 {
              %31 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc81)
              %32 = cir.const #cir.int<1> : !s32i loc(#loc82)
              %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc83)
              cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc81)
            } loc(#loc468)
          } loc(#loc466)
          %19 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc84)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc84)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc85)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc85)
          %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc86)
          %24 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc87)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc87)
          cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc88)
          %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc89)
          %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc90)
          cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc89)
        } loc(#loc461)
      } loc(#loc460)
    } loc(#loc458)
    cir.return loc(#loc20)
  } loc(#loc442)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc470)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc93)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc471)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc95)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc472)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc97)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc473)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc99)
    cir.return loc(#loc92)
  } loc(#loc469)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc474)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc475)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc108)
  cir.func @main(%arg0: !s32i loc(fused[#loc111, #loc112]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc113, #loc114])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc477)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc478)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc110)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc115)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc116)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc117)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc117)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc118)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc105)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc105)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc119)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc479)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_11_good() : () -> () loc(#loc120)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc106)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc106)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc122)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc107)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc107)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc123)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc480)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_11_bad() : () -> () loc(#loc124)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc108)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc108)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc126)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc127)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc481)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc481)
    cir.return %17 : !s32i loc(#loc481)
  } loc(#loc476)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc482)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc131)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc483)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc484)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc486)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc140)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc487)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc489)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc489)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc144)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc144)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc492)
          %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc151)
          %8 = cir.const #cir.int<50> : !s32i loc(#loc152)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc152)
          %10 = cir.const #cir.int<4> : !u64i loc(#loc493)
          %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc494)
          %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc151)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc495)
          cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc492)
          cir.scope {
            %29 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc157)
            %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc158)
            %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc158)
            %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s32i>, !cir.bool loc(#loc497)
            cir.if %32 {
              %33 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc160)
              %34 = cir.const #cir.int<1> : !s32i loc(#loc161)
              %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc162)
              cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc160)
            } loc(#loc498)
          } loc(#loc496)
          %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc163)
          %15 = cir.const #cir.int<65> : !s32i loc(#loc164)
          %16 = cir.const #cir.int<50> : !s32i loc(#loc165)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc166)
          %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc165)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc165)
          %20 = cir.call @wmemset(%14, %15, %19) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc167)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc168)
          %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc169)
          %23 = cir.const #cir.int<50> : !s32i loc(#loc170)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc171)
          %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc170)
          %26 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc172)
          cir.store %21, %26 : !s32i, !cir.ptr<!s32i> loc(#loc499)
          %27 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc173)
          %28 = cir.cast(bitcast, %27 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc173)
          cir.store %28, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc500)
        } loc(#loc491)
      } loc(#loc490)
    } loc(#loc488)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc502)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc502)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc177)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc177)
      cir.if %5 {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc131)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc131)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc182)
      } else {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc505)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc506)
          %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc189)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc190)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc190)
          %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc189)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc505)
          %12 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc191)
          %13 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc192)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc193)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc193)
          %16 = cir.binop(add, %13, %15) : !u64i loc(#loc507)
          %17 = cir.const #cir.int<4> : !u64i loc(#loc508)
          %18 = cir.call @calloc(%16, %17) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc191)
          cir.store %18, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc506)
          cir.scope {
            %28 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc198)
            %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc199)
            %30 = cir.cmp(eq, %28, %29) : !cir.ptr<!void>, !cir.bool loc(#loc510)
            cir.if %30 {
              %31 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc201)
              %32 = cir.const #cir.int<1> : !s32i loc(#loc202)
              %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc203)
              cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc201)
            } loc(#loc511)
          } loc(#loc509)
          %19 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc204)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc204)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc205)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc205)
          %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc206)
          %24 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc207)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc207)
          cir.call @printWLine(%25) : (!cir.ptr<!s32i>) -> () loc(#loc208)
          %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc209)
          %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc210)
          cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc209)
        } loc(#loc504)
      } loc(#loc503)
    } loc(#loc501)
    cir.return loc(#loc137)
  } loc(#loc485)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc513)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc215)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc514)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc516)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc516)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc219)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc219)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc519)
          %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc226)
          %8 = cir.const #cir.int<50> : !s32i loc(#loc227)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc227)
          %10 = cir.const #cir.int<4> : !u64i loc(#loc520)
          %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc521)
          %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc226)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc522)
          cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc519)
          cir.scope {
            %29 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc232)
            %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc233)
            %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc233)
            %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s32i>, !cir.bool loc(#loc524)
            cir.if %32 {
              %33 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc235)
              %34 = cir.const #cir.int<1> : !s32i loc(#loc236)
              %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc237)
              cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc235)
            } loc(#loc525)
          } loc(#loc523)
          %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc238)
          %15 = cir.const #cir.int<65> : !s32i loc(#loc239)
          %16 = cir.const #cir.int<50> : !s32i loc(#loc240)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc241)
          %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc240)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc240)
          %20 = cir.call @wmemset(%14, %15, %19) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc242)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc243)
          %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc244)
          %23 = cir.const #cir.int<50> : !s32i loc(#loc245)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc246)
          %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc245)
          %26 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc247)
          cir.store %21, %26 : !s32i, !cir.ptr<!s32i> loc(#loc526)
          %27 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc248)
          %28 = cir.cast(bitcast, %27 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc248)
          cir.store %28, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc527)
        } loc(#loc518)
      } loc(#loc517)
    } loc(#loc515)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc529)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc529)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc252)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc252)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc532)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc533)
          %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc261)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc262)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc262)
          %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc261)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc532)
          %12 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc263)
          %13 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc264)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc265)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc265)
          %16 = cir.binop(add, %13, %15) : !u64i loc(#loc534)
          %17 = cir.const #cir.int<4> : !u64i loc(#loc535)
          %18 = cir.call @calloc(%16, %17) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc263)
          cir.store %18, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc533)
          cir.scope {
            %28 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc270)
            %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc271)
            %30 = cir.cmp(eq, %28, %29) : !cir.ptr<!void>, !cir.bool loc(#loc537)
            cir.if %30 {
              %31 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc273)
              %32 = cir.const #cir.int<1> : !s32i loc(#loc274)
              %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc275)
              cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc273)
            } loc(#loc538)
          } loc(#loc536)
          %19 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc276)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc276)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc277)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc277)
          %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc278)
          %24 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc279)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc279)
          cir.call @printWLine(%25) : (!cir.ptr<!s32i>) -> () loc(#loc280)
          %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc281)
          %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc282)
          cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc281)
        } loc(#loc531)
      } loc(#loc530)
    } loc(#loc528)
    cir.return loc(#loc212)
  } loc(#loc512)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc539)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc541)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc289)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc542)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc544)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc544)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc293)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc293)
      cir.if %5 {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc298)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc298)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc299)
      } else {
        cir.scope {
          %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc547)
          %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc304)
          %8 = cir.const #cir.int<50> : !s32i loc(#loc305)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc305)
          %10 = cir.const #cir.int<1> : !u64i loc(#loc548)
          %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc549)
          %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc304)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc550)
          cir.store %13, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc547)
          cir.scope {
            %30 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc310)
            %31 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc311)
            %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc311)
            %33 = cir.cmp(eq, %30, %32) : !cir.ptr<!s8i>, !cir.bool loc(#loc552)
            cir.if %33 {
              %34 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc313)
              %35 = cir.const #cir.int<1> : !s32i loc(#loc314)
              %36 = cir.unary(minus, %35) : !s32i, !s32i loc(#loc315)
              cir.call @exit(%36) : (!s32i) -> () extra(#fn_attr) loc(#loc313)
            } loc(#loc553)
          } loc(#loc551)
          %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc316)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc316)
          %16 = cir.const #cir.int<65> : !s32i loc(#loc317)
          %17 = cir.const #cir.int<50> : !s32i loc(#loc318)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc319)
          %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc318)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc318)
          cir.libc.memset %20 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc554)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc322)
          %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc322)
          %23 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc323)
          %24 = cir.const #cir.int<50> : !s32i loc(#loc324)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc325)
          %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc324)
          %27 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc326)
          cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc555)
          %28 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc327)
          %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc327)
          cir.store %29, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc556)
        } loc(#loc546)
      } loc(#loc545)
    } loc(#loc543)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc558)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc558)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc331)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc331)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc561)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc562)
          %8 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc340)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc341)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc341)
          %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc340)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc561)
          %12 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc342)
          %13 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc343)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc344)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc344)
          %16 = cir.binop(add, %13, %15) : !u64i loc(#loc563)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc345)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc345)
          %19 = cir.call @calloc(%16, %18) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc342)
          cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc562)
          cir.scope {
            %30 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc348)
            %31 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc349)
            %32 = cir.cmp(eq, %30, %31) : !cir.ptr<!void>, !cir.bool loc(#loc565)
            cir.if %32 {
              %33 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc351)
              %34 = cir.const #cir.int<1> : !s32i loc(#loc352)
              %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc353)
              cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc351)
            } loc(#loc566)
          } loc(#loc564)
          %20 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc354)
          %21 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc355)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc355)
          %23 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc356)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc356)
          %25 = cir.call @strcpy(%22, %24) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc354)
          %26 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc357)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc357)
          cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc358)
          %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc359)
          %29 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc360)
          cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc359)
        } loc(#loc560)
      } loc(#loc559)
    } loc(#loc557)
    cir.return loc(#loc286)
  } loc(#loc540)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc568)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc365)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc569)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc571)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc571)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc369)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc369)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc574)
          %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc376)
          %8 = cir.const #cir.int<50> : !s32i loc(#loc377)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc377)
          %10 = cir.const #cir.int<1> : !u64i loc(#loc575)
          %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc576)
          %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc376)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc577)
          cir.store %13, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc574)
          cir.scope {
            %30 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc382)
            %31 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc383)
            %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc383)
            %33 = cir.cmp(eq, %30, %32) : !cir.ptr<!s8i>, !cir.bool loc(#loc579)
            cir.if %33 {
              %34 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc385)
              %35 = cir.const #cir.int<1> : !s32i loc(#loc386)
              %36 = cir.unary(minus, %35) : !s32i, !s32i loc(#loc387)
              cir.call @exit(%36) : (!s32i) -> () extra(#fn_attr) loc(#loc385)
            } loc(#loc580)
          } loc(#loc578)
          %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc388)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc388)
          %16 = cir.const #cir.int<65> : !s32i loc(#loc389)
          %17 = cir.const #cir.int<50> : !s32i loc(#loc390)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc391)
          %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc390)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc390)
          cir.libc.memset %20 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc581)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc394)
          %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc394)
          %23 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc395)
          %24 = cir.const #cir.int<50> : !s32i loc(#loc396)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc397)
          %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc396)
          %27 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc398)
          cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc582)
          %28 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc399)
          %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc399)
          cir.store %29, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc583)
        } loc(#loc573)
      } loc(#loc572)
    } loc(#loc570)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc585)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc585)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc403)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc403)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc588)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc589)
          %8 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc412)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc413)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc413)
          %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc412)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc588)
          %12 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc414)
          %13 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc415)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc416)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc416)
          %16 = cir.binop(add, %13, %15) : !u64i loc(#loc590)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc417)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc417)
          %19 = cir.call @calloc(%16, %18) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc414)
          cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc589)
          cir.scope {
            %30 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc420)
            %31 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc421)
            %32 = cir.cmp(eq, %30, %31) : !cir.ptr<!void>, !cir.bool loc(#loc592)
            cir.if %32 {
              %33 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc423)
              %34 = cir.const #cir.int<1> : !s32i loc(#loc424)
              %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc425)
              cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc423)
            } loc(#loc593)
          } loc(#loc591)
          %20 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc426)
          %21 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc427)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc427)
          %23 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc428)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc428)
          %25 = cir.call @strcpy(%22, %24) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc426)
          %26 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc429)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc429)
          cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc430)
          %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc431)
          %29 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc432)
          cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc431)
        } loc(#loc587)
      } loc(#loc586)
    } loc(#loc584)
    cir.return loc(#loc362)
  } loc(#loc567)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("/usr/include/wchar.h":296:1)
#loc8 = loc("/usr/include/wchar.h":296:65)
#loc9 = loc("/usr/include/string.h":407:1)
#loc10 = loc("/usr/include/string.h":408:33)
#loc11 = loc("/usr/include/stdlib.h":675:1)
#loc12 = loc("/usr/include/stdlib.h":676:14)
#loc13 = loc("/usr/include/wchar.h":98:1)
#loc14 = loc("/usr/include/wchar.h":100:14)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":24:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":51:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":26:12)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":27:12)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":27:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":28:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":38:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":28:8)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":28:26)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":29:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":30:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":37:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":31:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":31:75)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":31:50)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":31:57)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":31:60)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":31:74)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":32:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":32:50)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":32:17)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":32:34)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":32:40)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":32:41)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":32:47)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":32:46)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":33:21)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":33:36)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":33:42)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":33:45)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":33:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":34:35)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":34:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":34:27)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":34:30)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":34:31)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":36:28)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":36:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":39:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":50:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":39:8)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":39:26)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":40:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":41:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":49:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":43:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":43:49)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":44:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":44:68)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":43:30)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":43:45)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":44:35)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":44:42)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":44:50)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":44:53)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":44:67)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":45:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":45:41)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":45:17)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":45:25)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":45:31)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":45:32)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":45:38)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":45:37)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":46:26)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":46:32)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":46:19)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":47:31)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":47:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":48:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":48:18)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":187:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":193:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":189:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":189:14)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":190:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":190:14)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":191:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":191:14)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":192:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":192:14)
#loc101 = loc("/usr/include/stdlib.h":575:1)
#loc102 = loc("/usr/include/stdlib.h":575:41)
#loc103 = loc("/usr/include/time.h":76:1)
#loc104 = loc("/usr/include/time.h":76:38)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":209:15)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":211:15)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":214:15)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":216:15)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":204:1)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":219:1)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":205:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":207:27)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":207:22)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":207:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":209:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":210:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":210:55)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":211:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":214:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":215:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":215:54)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":216:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":218:12)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":218:5)
#loc129 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc130 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":76:19)
#loc132 = loc("/usr/include/wchar.h":247:1)
#loc133 = loc("/usr/include/wchar.h":247:51)
#loc134 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc135 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":58:1)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":90:1)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":60:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":60:12)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":61:12)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":61:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":62:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":72:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":62:8)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":62:26)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":63:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":64:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":71:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":65:13)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":65:75)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":65:50)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":65:57)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":65:60)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":65:74)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":66:13)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":66:50)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":66:17)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":66:34)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":66:40)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":66:41)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":66:47)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":66:46)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":67:21)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":67:36)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":67:42)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":67:45)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":67:13)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":68:35)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":68:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":68:27)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":68:30)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":68:31)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":70:28)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":70:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":73:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":89:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":73:8)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":73:27)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":74:5)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":77:5)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":79:5)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":76:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":80:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":88:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":82:13)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":82:52)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":83:13)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":83:68)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":82:30)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":82:48)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":83:35)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":83:42)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":83:50)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":83:53)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":83:67)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":84:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":84:41)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":84:17)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":84:25)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":84:31)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":84:32)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":84:38)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":84:37)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":85:26)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":85:32)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":85:19)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":86:35)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":86:13)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":87:13)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":87:18)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":93:1)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":120:1)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":95:5)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":95:12)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":96:12)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":96:5)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":97:5)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":107:5)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":97:8)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":97:26)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":98:5)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":99:9)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":106:9)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":100:13)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":100:75)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":100:50)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":100:57)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":100:60)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":100:74)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":101:13)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":101:50)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":101:17)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":101:34)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":101:40)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":101:41)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":101:47)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":101:46)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":102:21)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":102:36)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":102:42)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":102:45)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":102:13)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":103:35)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":103:13)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":103:27)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":103:30)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":103:31)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":105:28)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":105:13)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":108:5)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":119:5)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":108:8)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":108:26)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":109:5)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":110:9)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":118:9)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":112:13)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":112:52)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":113:13)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":113:68)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":112:30)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":112:48)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":113:35)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":113:42)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":113:50)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":113:53)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":113:67)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":114:13)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":114:41)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":114:17)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":114:25)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":114:31)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":114:32)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":114:38)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":114:37)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":115:26)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":115:32)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":115:19)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":116:35)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":116:13)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":117:13)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":117:18)
#loc283 = loc("/usr/include/string.h":141:1)
#loc284 = loc("/usr/include/string.h":142:14)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":123:1)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":155:1)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":125:5)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":125:12)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":126:12)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":126:5)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":127:5)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":142:5)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":127:8)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":127:27)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":128:5)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":131:5)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":133:5)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":130:19)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":130:9)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":134:9)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":141:9)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":135:13)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":135:67)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":135:45)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":135:52)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":135:55)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":135:66)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":136:13)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":136:51)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":136:17)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":136:35)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":136:41)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":136:42)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":136:48)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":136:47)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":137:20)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":137:36)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":137:41)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":137:44)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":137:13)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":137:45)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":138:36)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":138:13)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":138:28)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":138:31)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":138:32)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":140:28)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":140:13)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":143:5)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":154:5)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":143:8)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":143:26)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":144:5)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":145:9)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":153:9)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":147:13)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":147:49)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":148:13)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":148:54)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":147:30)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":147:45)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":148:35)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":148:42)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":148:50)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":148:53)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":149:13)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":149:41)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":149:17)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":149:25)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":149:31)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":149:32)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":149:38)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":149:37)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":150:19)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":150:26)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":150:32)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":151:31)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":151:13)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":152:13)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":152:18)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":158:1)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":185:1)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":160:5)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":160:12)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":161:12)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":161:5)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":162:5)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":172:5)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":162:8)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":162:26)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":163:5)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":164:9)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":171:9)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":165:13)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":165:67)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":165:45)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":165:52)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":165:55)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":165:66)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":166:13)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":166:51)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":166:17)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":166:35)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":166:41)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":166:42)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":166:48)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":166:47)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":167:20)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":167:36)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":167:41)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":167:44)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":167:13)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":167:45)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":168:36)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":168:13)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":168:28)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":168:31)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":168:32)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":170:28)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":170:13)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":173:5)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":184:5)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":173:8)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":173:26)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":174:5)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":175:9)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":183:9)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":177:13)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":177:49)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":178:13)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":178:54)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":177:30)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":177:45)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":178:35)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":178:42)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":178:50)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":178:53)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":179:13)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":179:41)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":179:17)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":179:25)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":179:31)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":179:32)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":179:38)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":179:37)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":180:19)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":180:26)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":180:32)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":181:31)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":181:13)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":182:13)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c":182:18)
#loc433 = loc(fused[#loc1, #loc2])
#loc434 = loc(fused[#loc3, #loc4])
#loc435 = loc(fused[#loc5, #loc6])
#loc436 = loc(fused[#loc7, #loc8])
#loc437 = loc(fused[#loc9, #loc10])
#loc438 = loc(fused[#loc11, #loc12])
#loc439 = loc(fused[#loc13, #loc14])
#loc440 = loc(fused[#loc15, #loc16])
#loc441 = loc(fused[#loc17, #loc18])
#loc442 = loc(fused[#loc19, #loc20])
#loc443 = loc(fused[#loc21, #loc22])
#loc444 = loc(fused[#loc24, #loc23])
#loc445 = loc(fused[#loc25, #loc26])
#loc446 = loc(fused[#loc27, #loc28])
#loc447 = loc(fused[#loc29, #loc26])
#loc448 = loc(fused[#loc30, #loc31])
#loc449 = loc(fused[#loc32, #loc33])
#loc450 = loc(fused[#loc36, #loc37])
#loc451 = loc(fused[#loc35, #loc37])
#loc452 = loc(fused[#loc34, #loc33])
#loc453 = loc(fused[#loc38, #loc39])
#loc454 = loc(fused[#loc40, #loc41])
#loc455 = loc(fused[#loc42, #loc39])
#loc456 = loc(fused[#loc52, #loc51])
#loc457 = loc(fused[#loc57, #loc56])
#loc458 = loc(fused[#loc58, #loc59])
#loc459 = loc(fused[#loc60, #loc61])
#loc460 = loc(fused[#loc62, #loc59])
#loc461 = loc(fused[#loc63, #loc64])
#loc462 = loc(fused[#loc65, #loc66])
#loc463 = loc(fused[#loc67, #loc68])
#loc464 = loc(fused[#loc72, #loc73])
#loc465 = loc(fused[#loc74, #loc75])
#loc466 = loc(fused[#loc76, #loc77])
#loc467 = loc(fused[#loc78, #loc79])
#loc468 = loc(fused[#loc80, #loc77])
#loc469 = loc(fused[#loc91, #loc92])
#loc470 = loc(fused[#loc93, #loc94])
#loc471 = loc(fused[#loc95, #loc96])
#loc472 = loc(fused[#loc97, #loc98])
#loc473 = loc(fused[#loc99, #loc100])
#loc474 = loc(fused[#loc101, #loc102])
#loc475 = loc(fused[#loc103, #loc104])
#loc476 = loc(fused[#loc109, #loc110])
#loc479 = loc(fused[#loc120, #loc121])
#loc480 = loc(fused[#loc124, #loc125])
#loc481 = loc(fused[#loc128, #loc127])
#loc482 = loc(fused[#loc129, #loc130])
#loc483 = loc(fused[#loc132, #loc133])
#loc484 = loc(fused[#loc134, #loc135])
#loc485 = loc(fused[#loc136, #loc137])
#loc486 = loc(fused[#loc138, #loc139])
#loc487 = loc(fused[#loc141, #loc140])
#loc488 = loc(fused[#loc142, #loc143])
#loc489 = loc(fused[#loc144, #loc145])
#loc490 = loc(fused[#loc146, #loc143])
#loc491 = loc(fused[#loc147, #loc148])
#loc492 = loc(fused[#loc149, #loc150])
#loc493 = loc(fused[#loc153, #loc154])
#loc494 = loc(fused[#loc152, #loc154])
#loc495 = loc(fused[#loc151, #loc150])
#loc496 = loc(fused[#loc155, #loc156])
#loc497 = loc(fused[#loc157, #loc158])
#loc498 = loc(fused[#loc159, #loc156])
#loc499 = loc(fused[#loc169, #loc168])
#loc500 = loc(fused[#loc174, #loc173])
#loc501 = loc(fused[#loc175, #loc176])
#loc502 = loc(fused[#loc177, #loc178])
#loc503 = loc(fused[#loc179, #loc180, #loc181, #loc176])
#loc504 = loc(fused[#loc183, #loc184])
#loc505 = loc(fused[#loc185, #loc186])
#loc506 = loc(fused[#loc187, #loc188])
#loc507 = loc(fused[#loc192, #loc193])
#loc508 = loc(fused[#loc194, #loc195])
#loc509 = loc(fused[#loc196, #loc197])
#loc510 = loc(fused[#loc198, #loc199])
#loc511 = loc(fused[#loc200, #loc197])
#loc512 = loc(fused[#loc211, #loc212])
#loc513 = loc(fused[#loc213, #loc214])
#loc514 = loc(fused[#loc216, #loc215])
#loc515 = loc(fused[#loc217, #loc218])
#loc516 = loc(fused[#loc219, #loc220])
#loc517 = loc(fused[#loc221, #loc218])
#loc518 = loc(fused[#loc222, #loc223])
#loc519 = loc(fused[#loc224, #loc225])
#loc520 = loc(fused[#loc228, #loc229])
#loc521 = loc(fused[#loc227, #loc229])
#loc522 = loc(fused[#loc226, #loc225])
#loc523 = loc(fused[#loc230, #loc231])
#loc524 = loc(fused[#loc232, #loc233])
#loc525 = loc(fused[#loc234, #loc231])
#loc526 = loc(fused[#loc244, #loc243])
#loc527 = loc(fused[#loc249, #loc248])
#loc528 = loc(fused[#loc250, #loc251])
#loc529 = loc(fused[#loc252, #loc253])
#loc530 = loc(fused[#loc254, #loc251])
#loc531 = loc(fused[#loc255, #loc256])
#loc532 = loc(fused[#loc257, #loc258])
#loc533 = loc(fused[#loc259, #loc260])
#loc534 = loc(fused[#loc264, #loc265])
#loc535 = loc(fused[#loc266, #loc267])
#loc536 = loc(fused[#loc268, #loc269])
#loc537 = loc(fused[#loc270, #loc271])
#loc538 = loc(fused[#loc272, #loc269])
#loc539 = loc(fused[#loc283, #loc284])
#loc540 = loc(fused[#loc285, #loc286])
#loc541 = loc(fused[#loc287, #loc288])
#loc542 = loc(fused[#loc290, #loc289])
#loc543 = loc(fused[#loc291, #loc292])
#loc544 = loc(fused[#loc293, #loc294])
#loc545 = loc(fused[#loc295, #loc296, #loc297, #loc292])
#loc546 = loc(fused[#loc300, #loc301])
#loc547 = loc(fused[#loc302, #loc303])
#loc548 = loc(fused[#loc306, #loc307])
#loc549 = loc(fused[#loc305, #loc307])
#loc550 = loc(fused[#loc304, #loc303])
#loc551 = loc(fused[#loc308, #loc309])
#loc552 = loc(fused[#loc310, #loc311])
#loc553 = loc(fused[#loc312, #loc309])
#loc554 = loc(fused[#loc320, #loc321])
#loc555 = loc(fused[#loc323, #loc322])
#loc556 = loc(fused[#loc328, #loc327])
#loc557 = loc(fused[#loc329, #loc330])
#loc558 = loc(fused[#loc331, #loc332])
#loc559 = loc(fused[#loc333, #loc330])
#loc560 = loc(fused[#loc334, #loc335])
#loc561 = loc(fused[#loc336, #loc337])
#loc562 = loc(fused[#loc338, #loc339])
#loc563 = loc(fused[#loc343, #loc344])
#loc564 = loc(fused[#loc346, #loc347])
#loc565 = loc(fused[#loc348, #loc349])
#loc566 = loc(fused[#loc350, #loc347])
#loc567 = loc(fused[#loc361, #loc362])
#loc568 = loc(fused[#loc363, #loc364])
#loc569 = loc(fused[#loc366, #loc365])
#loc570 = loc(fused[#loc367, #loc368])
#loc571 = loc(fused[#loc369, #loc370])
#loc572 = loc(fused[#loc371, #loc368])
#loc573 = loc(fused[#loc372, #loc373])
#loc574 = loc(fused[#loc374, #loc375])
#loc575 = loc(fused[#loc378, #loc379])
#loc576 = loc(fused[#loc377, #loc379])
#loc577 = loc(fused[#loc376, #loc375])
#loc578 = loc(fused[#loc380, #loc381])
#loc579 = loc(fused[#loc382, #loc383])
#loc580 = loc(fused[#loc384, #loc381])
#loc581 = loc(fused[#loc392, #loc393])
#loc582 = loc(fused[#loc395, #loc394])
#loc583 = loc(fused[#loc400, #loc399])
#loc584 = loc(fused[#loc401, #loc402])
#loc585 = loc(fused[#loc403, #loc404])
#loc586 = loc(fused[#loc405, #loc402])
#loc587 = loc(fused[#loc406, #loc407])
#loc588 = loc(fused[#loc408, #loc409])
#loc589 = loc(fused[#loc410, #loc411])
#loc590 = loc(fused[#loc415, #loc416])
#loc591 = loc(fused[#loc418, #loc419])
#loc592 = loc(fused[#loc420, #loc421])
#loc593 = loc(fused[#loc422, #loc419])
