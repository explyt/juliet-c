!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!ty__stdThreadLock = !cir.struct<struct "_stdThreadLock" incomplete>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE667_Improper_Locking/CWE667_Improper_Locking__basic_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @good2.goodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc1)
  cir.global "private" internal dsolocal @good1.goodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc2)
  cir.global "private" internal dsolocal @CWE667_Improper_Locking__basic_04_bad.badLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc3)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc108)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Creating lock...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc6)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc109)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Could not create lock\00" : !cir.array<!s8i x 22>> : !cir.array<!s8i x 22> {alignment = 1 : i64} loc(#loc9)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Acquiring lock...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc12)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc111)
  cir.func no_proto @CWE667_Improper_Locking__basic_04_bad() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc113)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %1 ^bb2, ^bb9 loc(#loc114)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc115)
  ^bb3:  // pred: ^bb2
    %2 = cir.get_global @CWE667_Improper_Locking__basic_04_bad.badLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc3)
    %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc6)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc6)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc23)
    cir.br ^bb4 loc(#loc116)
  ^bb4:  // pred: ^bb3
    %5 = cir.call @stdThreadLockCreate(%2) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc26)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc26)
    %7 = cir.unary(not, %6) : !cir.bool, !cir.bool loc(#loc26)
    cir.brcond %7 ^bb5, ^bb6 loc(#loc117)
  ^bb5:  // pred: ^bb4
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc9)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc28)
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc29)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc30)
    cir.call @exit(%11) : (!s32i) -> () extra(#fn_attr) loc(#loc29)
    cir.br ^bb6 loc(#loc25)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc25)
  ^bb7:  // pred: ^bb6
    %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc12)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc12)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc31)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc32)
    cir.call @stdThreadLockAcquire(%14) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc33)
    cir.br ^bb8 loc(#loc22)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc18)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc18)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc16)
  } loc(#loc112)
  cir.func no_proto @CWE667_Improper_Locking__basic_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc119)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc120)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc118)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Releasing lock...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc41)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc121)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Destroying lock...\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc44)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc122)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc124)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<0> : !s32i loc(#loc51)
    %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc51)
    cir.brcond %1 ^bb2, ^bb3 loc(#loc125)
  ^bb2:  // pred: ^bb1
    %2 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc40)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    cir.br ^bb10 loc(#loc53)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc126)
  ^bb4:  // pred: ^bb3
    %4 = cir.get_global @good1.goodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc2)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc58)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    cir.br ^bb5 loc(#loc127)
  ^bb5:  // pred: ^bb4
    %7 = cir.call @stdThreadLockCreate(%4) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc62)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc62)
    %9 = cir.unary(not, %8) : !cir.bool, !cir.bool loc(#loc62)
    cir.brcond %9 ^bb6, ^bb7 loc(#loc128)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc64)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc66)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc67)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc66)
    cir.br ^bb7 loc(#loc61)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc61)
  ^bb8:  // pred: ^bb7
    %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc68)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %16 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc70)
    cir.call @stdThreadLockAcquire(%16) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc71)
    %17 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc41)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %19 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc73)
    cir.call @stdThreadLockRelease(%19) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc74)
    %20 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc44)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %22 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc76)
    cir.call @stdThreadLockDestroy(%22) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc77)
    cir.br ^bb9 loc(#loc57)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc50)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc50)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc48)
  } loc(#loc123)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc130)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc82)
    cir.brcond %1 ^bb2, ^bb9 loc(#loc131)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc132)
  ^bb3:  // pred: ^bb2
    %2 = cir.get_global @good2.goodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc1)
    %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc86)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc86)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    cir.br ^bb4 loc(#loc133)
  ^bb4:  // pred: ^bb3
    %5 = cir.call @stdThreadLockCreate(%2) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc90)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc90)
    %7 = cir.unary(not, %6) : !cir.bool, !cir.bool loc(#loc90)
    cir.brcond %7 ^bb5, ^bb6 loc(#loc134)
  ^bb5:  // pred: ^bb4
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc92)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc94)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc95)
    cir.call @exit(%11) : (!s32i) -> () extra(#fn_attr) loc(#loc94)
    cir.br ^bb6 loc(#loc89)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc89)
  ^bb7:  // pred: ^bb6
    %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc96)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc96)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc98)
    cir.call @stdThreadLockAcquire(%14) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc99)
    %15 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc100)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc100)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    %17 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc102)
    cir.call @stdThreadLockRelease(%17) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc103)
    %18 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc104)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc104)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    %20 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc106)
    cir.call @stdThreadLockDestroy(%20) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc107)
    cir.br ^bb8 loc(#loc85)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc81)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc81)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc79)
  } loc(#loc129)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE667_Improper_Locking/CWE667_Improper_Locking__basic_04.c":0:0)
#loc1 = loc("CWE667_Improper_Locking__basic_04.c":86:34)
#loc2 = loc("CWE667_Improper_Locking__basic_04.c":62:34)
#loc3 = loc("CWE667_Improper_Locking__basic_04.c":33:34)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE667_Improper_Locking__basic_04.c":34:23)
#loc7 = loc("../../testcasesupport/std_thread.h":18:1)
#loc8 = loc("../../testcasesupport/std_thread.h":18:44)
#loc9 = loc("CWE667_Improper_Locking__basic_04.c":37:27)
#loc10 = loc("/usr/include/stdlib.h":756:1)
#loc11 = loc("/usr/include/stdlib.h":756:70)
#loc12 = loc("CWE667_Improper_Locking__basic_04.c":40:23)
#loc13 = loc("../../testcasesupport/std_thread.h":19:1)
#loc14 = loc("../../testcasesupport/std_thread.h":19:45)
#loc15 = loc("CWE667_Improper_Locking__basic_04.c":28:1)
#loc16 = loc("CWE667_Improper_Locking__basic_04.c":45:1)
#loc17 = loc("CWE667_Improper_Locking__basic_04.c":30:5)
#loc18 = loc("CWE667_Improper_Locking__basic_04.c":44:5)
#loc19 = loc("CWE667_Improper_Locking__basic_04.c":30:8)
#loc20 = loc("CWE667_Improper_Locking__basic_04.c":31:5)
#loc21 = loc("CWE667_Improper_Locking__basic_04.c":32:9)
#loc22 = loc("CWE667_Improper_Locking__basic_04.c":43:9)
#loc23 = loc("CWE667_Improper_Locking__basic_04.c":34:13)
#loc24 = loc("CWE667_Improper_Locking__basic_04.c":35:13)
#loc25 = loc("CWE667_Improper_Locking__basic_04.c":39:13)
#loc26 = loc("CWE667_Improper_Locking__basic_04.c":35:18)
#loc27 = loc("CWE667_Improper_Locking__basic_04.c":36:13)
#loc28 = loc("CWE667_Improper_Locking__basic_04.c":37:17)
#loc29 = loc("CWE667_Improper_Locking__basic_04.c":38:17)
#loc30 = loc("CWE667_Improper_Locking__basic_04.c":38:22)
#loc31 = loc("CWE667_Improper_Locking__basic_04.c":40:13)
#loc32 = loc("CWE667_Improper_Locking__basic_04.c":41:34)
#loc33 = loc("CWE667_Improper_Locking__basic_04.c":41:13)
#loc34 = loc("CWE667_Improper_Locking__basic_04.c":104:1)
#loc35 = loc("CWE667_Improper_Locking__basic_04.c":108:1)
#loc36 = loc("CWE667_Improper_Locking__basic_04.c":106:5)
#loc37 = loc("CWE667_Improper_Locking__basic_04.c":106:11)
#loc38 = loc("CWE667_Improper_Locking__basic_04.c":107:5)
#loc39 = loc("CWE667_Improper_Locking__basic_04.c":107:11)
#loc40 = loc("CWE667_Improper_Locking__basic_04.c":57:19)
#loc41 = loc("CWE667_Improper_Locking__basic_04.c":72:23)
#loc42 = loc("../../testcasesupport/std_thread.h":20:1)
#loc43 = loc("../../testcasesupport/std_thread.h":20:45)
#loc44 = loc("CWE667_Improper_Locking__basic_04.c":74:23)
#loc45 = loc("../../testcasesupport/std_thread.h":21:1)
#loc46 = loc("../../testcasesupport/std_thread.h":21:45)
#loc47 = loc("CWE667_Improper_Locking__basic_04.c":52:1)
#loc48 = loc("CWE667_Improper_Locking__basic_04.c":78:1)
#loc49 = loc("CWE667_Improper_Locking__basic_04.c":54:5)
#loc50 = loc("CWE667_Improper_Locking__basic_04.c":77:5)
#loc51 = loc("CWE667_Improper_Locking__basic_04.c":54:8)
#loc52 = loc("CWE667_Improper_Locking__basic_04.c":55:5)
#loc53 = loc("CWE667_Improper_Locking__basic_04.c":58:5)
#loc54 = loc("CWE667_Improper_Locking__basic_04.c":60:5)
#loc55 = loc("CWE667_Improper_Locking__basic_04.c":57:9)
#loc56 = loc("CWE667_Improper_Locking__basic_04.c":61:9)
#loc57 = loc("CWE667_Improper_Locking__basic_04.c":76:9)
#loc58 = loc("CWE667_Improper_Locking__basic_04.c":63:23)
#loc59 = loc("CWE667_Improper_Locking__basic_04.c":63:13)
#loc60 = loc("CWE667_Improper_Locking__basic_04.c":64:13)
#loc61 = loc("CWE667_Improper_Locking__basic_04.c":68:13)
#loc62 = loc("CWE667_Improper_Locking__basic_04.c":64:18)
#loc63 = loc("CWE667_Improper_Locking__basic_04.c":65:13)
#loc64 = loc("CWE667_Improper_Locking__basic_04.c":66:27)
#loc65 = loc("CWE667_Improper_Locking__basic_04.c":66:17)
#loc66 = loc("CWE667_Improper_Locking__basic_04.c":67:17)
#loc67 = loc("CWE667_Improper_Locking__basic_04.c":67:22)
#loc68 = loc("CWE667_Improper_Locking__basic_04.c":69:23)
#loc69 = loc("CWE667_Improper_Locking__basic_04.c":69:13)
#loc70 = loc("CWE667_Improper_Locking__basic_04.c":70:34)
#loc71 = loc("CWE667_Improper_Locking__basic_04.c":70:13)
#loc72 = loc("CWE667_Improper_Locking__basic_04.c":72:13)
#loc73 = loc("CWE667_Improper_Locking__basic_04.c":73:34)
#loc74 = loc("CWE667_Improper_Locking__basic_04.c":73:13)
#loc75 = loc("CWE667_Improper_Locking__basic_04.c":74:13)
#loc76 = loc("CWE667_Improper_Locking__basic_04.c":75:34)
#loc77 = loc("CWE667_Improper_Locking__basic_04.c":75:13)
#loc78 = loc("CWE667_Improper_Locking__basic_04.c":81:1)
#loc79 = loc("CWE667_Improper_Locking__basic_04.c":102:1)
#loc80 = loc("CWE667_Improper_Locking__basic_04.c":83:5)
#loc81 = loc("CWE667_Improper_Locking__basic_04.c":101:5)
#loc82 = loc("CWE667_Improper_Locking__basic_04.c":83:8)
#loc83 = loc("CWE667_Improper_Locking__basic_04.c":84:5)
#loc84 = loc("CWE667_Improper_Locking__basic_04.c":85:9)
#loc85 = loc("CWE667_Improper_Locking__basic_04.c":100:9)
#loc86 = loc("CWE667_Improper_Locking__basic_04.c":87:23)
#loc87 = loc("CWE667_Improper_Locking__basic_04.c":87:13)
#loc88 = loc("CWE667_Improper_Locking__basic_04.c":88:13)
#loc89 = loc("CWE667_Improper_Locking__basic_04.c":92:13)
#loc90 = loc("CWE667_Improper_Locking__basic_04.c":88:18)
#loc91 = loc("CWE667_Improper_Locking__basic_04.c":89:13)
#loc92 = loc("CWE667_Improper_Locking__basic_04.c":90:27)
#loc93 = loc("CWE667_Improper_Locking__basic_04.c":90:17)
#loc94 = loc("CWE667_Improper_Locking__basic_04.c":91:17)
#loc95 = loc("CWE667_Improper_Locking__basic_04.c":91:22)
#loc96 = loc("CWE667_Improper_Locking__basic_04.c":93:23)
#loc97 = loc("CWE667_Improper_Locking__basic_04.c":93:13)
#loc98 = loc("CWE667_Improper_Locking__basic_04.c":94:34)
#loc99 = loc("CWE667_Improper_Locking__basic_04.c":94:13)
#loc100 = loc("CWE667_Improper_Locking__basic_04.c":96:23)
#loc101 = loc("CWE667_Improper_Locking__basic_04.c":96:13)
#loc102 = loc("CWE667_Improper_Locking__basic_04.c":97:34)
#loc103 = loc("CWE667_Improper_Locking__basic_04.c":97:13)
#loc104 = loc("CWE667_Improper_Locking__basic_04.c":98:23)
#loc105 = loc("CWE667_Improper_Locking__basic_04.c":98:13)
#loc106 = loc("CWE667_Improper_Locking__basic_04.c":99:34)
#loc107 = loc("CWE667_Improper_Locking__basic_04.c":99:13)
#loc108 = loc(fused[#loc4, #loc5])
#loc109 = loc(fused[#loc7, #loc8])
#loc110 = loc(fused[#loc10, #loc11])
#loc111 = loc(fused[#loc13, #loc14])
#loc112 = loc(fused[#loc15, #loc16])
#loc113 = loc(fused[#loc17, #loc18])
#loc114 = loc(fused[#loc20, #loc18])
#loc115 = loc(fused[#loc21, #loc22])
#loc116 = loc(fused[#loc24, #loc25])
#loc117 = loc(fused[#loc27, #loc25])
#loc118 = loc(fused[#loc34, #loc35])
#loc119 = loc(fused[#loc36, #loc37])
#loc120 = loc(fused[#loc38, #loc39])
#loc121 = loc(fused[#loc42, #loc43])
#loc122 = loc(fused[#loc45, #loc46])
#loc123 = loc(fused[#loc47, #loc48])
#loc124 = loc(fused[#loc49, #loc50])
#loc125 = loc(fused[#loc52, #loc53, #loc54, #loc50])
#loc126 = loc(fused[#loc56, #loc57])
#loc127 = loc(fused[#loc60, #loc61])
#loc128 = loc(fused[#loc63, #loc61])
#loc129 = loc(fused[#loc78, #loc79])
#loc130 = loc(fused[#loc80, #loc81])
#loc131 = loc(fused[#loc83, #loc81])
#loc132 = loc(fused[#loc84, #loc85])
#loc133 = loc(fused[#loc88, #loc89])
#loc134 = loc(fused[#loc91, #loc89])
