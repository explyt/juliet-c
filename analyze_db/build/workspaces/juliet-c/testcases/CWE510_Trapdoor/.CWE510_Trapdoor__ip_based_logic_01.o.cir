!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc265)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc266)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc267)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc268)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc269)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc270)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc271)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"192.168.30.123\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc15)
  cir.func private @inet_ntoa(!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc272)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc273)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc21)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc274)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc24)
  cir.func private @close(!s32i) -> !s32i loc(#loc275)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_01_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc278)
      %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc279)
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc280)
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc281)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc282)
      %5 = cir.const #cir.int<16> : !u64i loc(#loc283)
      %6 = cir.cast(integral, %5 : !u64i), !s32i loc(#loc283)
      cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc280)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc37)
      %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc37)
      cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc281)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc39)
      %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc39)
      cir.store %10, %4 : !s32i, !cir.ptr<!s32i> loc(#loc282)
      cir.scope {
        cir.do {
          cir.scope {
            %11 = cir.const #cir.int<2> : !s32i loc(#loc45)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc46)
            %13 = cir.const #cir.int<6> : !s32i loc(#loc47)
            %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc48)
            cir.store %14, %3 : !s32i, !cir.ptr<!s32i> loc(#loc286)
            cir.scope {
              %33 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc53)
              %34 = cir.const #cir.int<1> : !s32i loc(#loc54)
              %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc54)
              %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc288)
              cir.if %36 {
                cir.break loc(#loc56)
              } loc(#loc289)
            } loc(#loc287)
            %15 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc290)
            %16 = cir.const #cir.int<0> : !s32i loc(#loc59)
            %17 = cir.const #cir.int<16> : !u64i loc(#loc291)
            cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc292)
            %18 = cir.const #cir.int<2> : !s32i loc(#loc64)
            %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc64)
            %20 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
            cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc293)
            %21 = cir.const #cir.int<0> : !s32i loc(#loc67)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc67)
            %23 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
            %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc69)
            cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc294)
            %25 = cir.const #cir.int<20000> : !s32i loc(#loc71)
            %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc71)
            %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc72)
            %28 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
            cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc295)
            cir.scope {
              %33 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc78)
              %34 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc297)
              %35 = cir.const #cir.int<16> : !u64i loc(#loc298)
              %36 = cir.cast(integral, %35 : !u64i), !u32i loc(#loc298)
              %37 = cir.call @bind(%33, %34, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc83)
              %38 = cir.const #cir.int<1> : !s32i loc(#loc84)
              %39 = cir.unary(minus, %38) nsw : !s32i, !s32i loc(#loc84)
              %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc299)
              cir.if %40 {
                cir.break loc(#loc86)
              } loc(#loc300)
            } loc(#loc296)
            cir.scope {
              %33 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc89)
              %34 = cir.const #cir.int<5> : !s32i loc(#loc90)
              %35 = cir.call @listen(%33, %34) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc91)
              %36 = cir.const #cir.int<1> : !s32i loc(#loc92)
              %37 = cir.unary(minus, %36) nsw : !s32i, !s32i loc(#loc92)
              %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc302)
              cir.if %38 {
                cir.break loc(#loc94)
              } loc(#loc303)
            } loc(#loc301)
            %29 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc95)
            %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc96)
            %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc97)
            %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc98)
            cir.store %32, %4 : !s32i, !cir.ptr<!s32i> loc(#loc304)
            cir.scope {
              %33 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc103)
              %34 = cir.const #cir.int<1> : !s32i loc(#loc104)
              %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc104)
              %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc306)
              cir.if %36 {
                cir.break loc(#loc106)
              } loc(#loc307)
            } loc(#loc305)
            cir.scope {
              %33 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc109)
              %34 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc309)
              %35 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc310)
              %36 = cir.call @getsockname(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc114)
              %37 = cir.const #cir.int<1> : !s32i loc(#loc115)
              %38 = cir.unary(minus, %37) nsw : !s32i, !s32i loc(#loc116)
              %39 = cir.cmp(eq, %36, %38) : !s32i, !cir.bool loc(#loc311)
              cir.if %39 {
                cir.break loc(#loc118)
              } loc(#loc312)
            } loc(#loc308)
            cir.scope {
              %33 = cir.get_global @strcmp : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i>> loc(#loc121)
              %34 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc15)
              %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc15)
              %36 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
              %37 = cir.load %36 : !cir.ptr<!ty_in_addr>, !ty_in_addr loc(#loc122)
              %38 = cir.call @inet_ntoa(%37) : (!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc122)
              %39 = cir.call @strcmp(%35, %38) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc121)
              %40 = cir.const #cir.int<0> : !s32i loc(#loc123)
              %41 = cir.cmp(eq, %39, %40) : !s32i, !cir.bool loc(#loc314)
              cir.if %41 {
                cir.scope {
                  %42 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc129)
                  %43 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc20)
                  %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc20)
                  %45 = cir.cast(bitcast, %44 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
                  %46 = cir.const #cir.int<15> : !u64i loc(#loc317)
                  %47 = cir.const #cir.int<0> : !s32i loc(#loc132)
                  %48 = cir.call @send(%42, %45, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc133)
                  %49 = cir.const #cir.int<1> : !s32i loc(#loc134)
                  %50 = cir.unary(minus, %49) nsw : !s32i, !s32i loc(#loc134)
                  %51 = cir.cast(integral, %50 : !s32i), !s64i loc(#loc134)
                  %52 = cir.cmp(eq, %48, %51) : !s64i, !cir.bool loc(#loc318)
                  cir.if %52 {
                    cir.break loc(#loc136)
                  } loc(#loc319)
                } loc(#loc316)
              } else {
                cir.scope {
                  %42 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc139)
                  %43 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc21)
                  %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc21)
                  %45 = cir.cast(bitcast, %44 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc21)
                  %46 = cir.const #cir.int<8> : !u64i loc(#loc321)
                  %47 = cir.const #cir.int<0> : !s32i loc(#loc142)
                  %48 = cir.call @send(%42, %45, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc143)
                  %49 = cir.const #cir.int<1> : !s32i loc(#loc144)
                  %50 = cir.unary(minus, %49) nsw : !s32i, !s32i loc(#loc144)
                  %51 = cir.cast(integral, %50 : !s32i), !s64i loc(#loc144)
                  %52 = cir.cmp(eq, %48, %51) : !s64i, !cir.bool loc(#loc322)
                  cir.if %52 {
                    %53 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc24)
                    %54 = cir.cast(array_to_ptrdecay, %53 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc24)
                    cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc146)
                  } loc(#loc323)
                } loc(#loc320)
              } loc(#loc315)
            } loc(#loc313)
          } loc(#loc285)
          cir.yield loc(#loc42)
        } while {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc147)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc147)
          cir.condition(%12) loc(#loc147)
        } loc(#loc284)
      } loc(#loc284)
      cir.scope {
        %11 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc150)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc151)
        %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc151)
        %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc325)
        cir.if %14 {
          %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc153)
          %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc154)
        } loc(#loc326)
      } loc(#loc324)
      cir.scope {
        %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc157)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc158)
        %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc158)
        %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc328)
        cir.if %14 {
          %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc160)
          %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc161)
        } loc(#loc329)
      } loc(#loc327)
    } loc(#loc277)
    cir.return loc(#loc28)
  } loc(#loc276)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc331)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc164)
    cir.return loc(#loc163)
  } loc(#loc330)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc334)
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc335)
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc336)
      %3 = cir.const #cir.int<1> : !s32i loc(#loc173)
      %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc173)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc335)
      %5 = cir.const #cir.int<1> : !s32i loc(#loc175)
      %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc175)
      cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc336)
      cir.scope {
        cir.do {
          cir.scope {
            %7 = cir.const #cir.int<2> : !s32i loc(#loc180)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc181)
            %9 = cir.const #cir.int<6> : !s32i loc(#loc182)
            %10 = cir.call @socket(%7, %8, %9) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc183)
            cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc339)
            cir.scope {
              %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc188)
              %30 = cir.const #cir.int<1> : !s32i loc(#loc189)
              %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc189)
              %32 = cir.cmp(eq, %29, %31) : !s32i, !cir.bool loc(#loc341)
              cir.if %32 {
                cir.break loc(#loc191)
              } loc(#loc342)
            } loc(#loc340)
            %11 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc343)
            %12 = cir.const #cir.int<0> : !s32i loc(#loc194)
            %13 = cir.const #cir.int<16> : !u64i loc(#loc344)
            cir.libc.memset %13 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc345)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc199)
            %15 = cir.cast(integral, %14 : !s32i), !u16i loc(#loc199)
            %16 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
            cir.store %15, %16 : !u16i, !cir.ptr<!u16i> loc(#loc346)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc201)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc201)
            %19 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
            %20 = cir.get_member %19[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc69)
            cir.store %18, %20 : !u32i, !cir.ptr<!u32i> loc(#loc347)
            %21 = cir.const #cir.int<20000> : !s32i loc(#loc203)
            %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc203)
            %23 = cir.call @htons(%22) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc204)
            %24 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
            cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc348)
            cir.scope {
              %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc209)
              %30 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc350)
              %31 = cir.const #cir.int<16> : !u64i loc(#loc351)
              %32 = cir.cast(integral, %31 : !u64i), !u32i loc(#loc351)
              %33 = cir.call @bind(%29, %30, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc214)
              %34 = cir.const #cir.int<1> : !s32i loc(#loc215)
              %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc215)
              %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc352)
              cir.if %36 {
                cir.break loc(#loc217)
              } loc(#loc353)
            } loc(#loc349)
            cir.scope {
              %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc220)
              %30 = cir.const #cir.int<5> : !s32i loc(#loc221)
              %31 = cir.call @listen(%29, %30) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc222)
              %32 = cir.const #cir.int<1> : !s32i loc(#loc223)
              %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc223)
              %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc355)
              cir.if %34 {
                cir.break loc(#loc225)
              } loc(#loc356)
            } loc(#loc354)
            %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc226)
            %26 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc227)
            %27 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc228)
            %28 = cir.call @accept(%25, %26, %27) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc229)
            cir.store %28, %2 : !s32i, !cir.ptr<!s32i> loc(#loc357)
            cir.scope {
              %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc234)
              %30 = cir.const #cir.int<1> : !s32i loc(#loc235)
              %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc235)
              %32 = cir.cmp(eq, %29, %31) : !s32i, !cir.bool loc(#loc359)
              cir.if %32 {
                cir.break loc(#loc237)
              } loc(#loc360)
            } loc(#loc358)
            cir.scope {
              %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc240)
              %30 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc241)
              %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc241)
              %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc241)
              %33 = cir.const #cir.int<8> : !u64i loc(#loc362)
              %34 = cir.const #cir.int<0> : !s32i loc(#loc244)
              %35 = cir.call @send(%29, %32, %33, %34) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc245)
              %36 = cir.const #cir.int<1> : !s32i loc(#loc246)
              %37 = cir.unary(minus, %36) nsw : !s32i, !s32i loc(#loc246)
              %38 = cir.cast(integral, %37 : !s32i), !s64i loc(#loc246)
              %39 = cir.cmp(eq, %35, %38) : !s64i, !cir.bool loc(#loc363)
              cir.if %39 {
                %40 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc248)
                %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc248)
                cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc249)
              } loc(#loc364)
            } loc(#loc361)
          } loc(#loc338)
          cir.yield loc(#loc177)
        } while {
          %7 = cir.const #cir.int<0> : !s32i loc(#loc250)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc250)
          cir.condition(%8) loc(#loc250)
        } loc(#loc337)
      } loc(#loc337)
      cir.scope {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc253)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc254)
        %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc254)
        %10 = cir.cmp(ne, %7, %9) : !s32i, !cir.bool loc(#loc366)
        cir.if %10 {
          %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc256)
          %12 = cir.call @close(%11) : (!s32i) -> !s32i loc(#loc257)
        } loc(#loc367)
      } loc(#loc365)
      cir.scope {
        %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc260)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc261)
        %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc261)
        %10 = cir.cmp(ne, %7, %9) : !s32i, !cir.bool loc(#loc369)
        cir.if %10 {
          %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc263)
          %12 = cir.call @close(%11) : (!s32i) -> !s32i loc(#loc264)
        } loc(#loc370)
      } loc(#loc368)
    } loc(#loc333)
    cir.return loc(#loc167)
  } loc(#loc332)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_01.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":116:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":117:33)
#loc13 = loc("/usr/include/string.h":156:1)
#loc14 = loc("/usr/include/string.h":157:33)
#loc15 = loc("CWE510_Trapdoor__ip_based_logic_01.c":88:24)
#loc16 = loc("/usr/include/arpa/inet.h":53:1)
#loc17 = loc("/usr/include/arpa/inet.h":53:46)
#loc18 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":138:1)
#loc19 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":138:74)
#loc20 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:40)
#loc21 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:40)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE510_Trapdoor__ip_based_logic_01.c":100:31)
#loc25 = loc("/usr/include/unistd.h":358:1)
#loc26 = loc("/usr/include/unistd.h":358:27)
#loc27 = loc("CWE510_Trapdoor__ip_based_logic_01.c":41:1)
#loc28 = loc("CWE510_Trapdoor__ip_based_logic_01.c":120:1)
#loc29 = loc("CWE510_Trapdoor__ip_based_logic_01.c":43:5)
#loc30 = loc("CWE510_Trapdoor__ip_based_logic_01.c":119:5)
#loc31 = loc("CWE510_Trapdoor__ip_based_logic_01.c":48:9)
#loc32 = loc("CWE510_Trapdoor__ip_based_logic_01.c":48:28)
#loc33 = loc("CWE510_Trapdoor__ip_based_logic_01.c":48:37)
#loc34 = loc("CWE510_Trapdoor__ip_based_logic_01.c":49:9)
#loc35 = loc("CWE510_Trapdoor__ip_based_logic_01.c":49:52)
#loc36 = loc("CWE510_Trapdoor__ip_based_logic_01.c":50:9)
#loc37 = loc("CWE510_Trapdoor__ip_based_logic_01.c":50:31)
#loc38 = loc("CWE510_Trapdoor__ip_based_logic_01.c":51:9)
#loc39 = loc("CWE510_Trapdoor__ip_based_logic_01.c":51:31)
#loc40 = loc("CWE510_Trapdoor__ip_based_logic_01.c":49:32)
#loc41 = loc("CWE510_Trapdoor__ip_based_logic_01.c":52:9)
#loc42 = loc("CWE510_Trapdoor__ip_based_logic_01.c":104:17)
#loc43 = loc("CWE510_Trapdoor__ip_based_logic_01.c":53:9)
#loc44 = loc("CWE510_Trapdoor__ip_based_logic_01.c":103:9)
#loc45 = loc("CWE510_Trapdoor__ip_based_logic_01.c":61:35)
#loc46 = loc("CWE510_Trapdoor__ip_based_logic_01.c":61:44)
#loc47 = loc("CWE510_Trapdoor__ip_based_logic_01.c":61:57)
#loc48 = loc("CWE510_Trapdoor__ip_based_logic_01.c":61:28)
#loc49 = loc("CWE510_Trapdoor__ip_based_logic_01.c":61:13)
#loc50 = loc("CWE510_Trapdoor__ip_based_logic_01.c":61:68)
#loc51 = loc("CWE510_Trapdoor__ip_based_logic_01.c":62:13)
#loc52 = loc("CWE510_Trapdoor__ip_based_logic_01.c":65:13)
#loc53 = loc("CWE510_Trapdoor__ip_based_logic_01.c":62:17)
#loc54 = loc("CWE510_Trapdoor__ip_based_logic_01.c":62:33)
#loc55 = loc("CWE510_Trapdoor__ip_based_logic_01.c":63:13)
#loc56 = loc("CWE510_Trapdoor__ip_based_logic_01.c":64:17)
#loc57 = loc("CWE510_Trapdoor__ip_based_logic_01.c":66:20)
#loc58 = loc("CWE510_Trapdoor__ip_based_logic_01.c":66:21)
#loc59 = loc("CWE510_Trapdoor__ip_based_logic_01.c":66:30)
#loc60 = loc("CWE510_Trapdoor__ip_based_logic_01.c":66:33)
#loc61 = loc("CWE510_Trapdoor__ip_based_logic_01.c":66:47)
#loc62 = loc("CWE510_Trapdoor__ip_based_logic_01.c":66:13)
#loc63 = loc("CWE510_Trapdoor__ip_based_logic_01.c":66:48)
#loc64 = loc("CWE510_Trapdoor__ip_based_logic_01.c":67:34)
#loc65 = loc("/usr/include/netinet/in.h":249:5)
#loc66 = loc("CWE510_Trapdoor__ip_based_logic_01.c":67:13)
#loc67 = loc("CWE510_Trapdoor__ip_based_logic_01.c":68:39)
#loc68 = loc("/usr/include/netinet/in.h":251:20)
#loc69 = loc("/usr/include/netinet/in.h":33:15)
#loc70 = loc("CWE510_Trapdoor__ip_based_logic_01.c":68:13)
#loc71 = loc("CWE510_Trapdoor__ip_based_logic_01.c":69:38)
#loc72 = loc("CWE510_Trapdoor__ip_based_logic_01.c":69:32)
#loc73 = loc("/usr/include/netinet/in.h":250:15)
#loc74 = loc("CWE510_Trapdoor__ip_based_logic_01.c":69:13)
#loc75 = loc("CWE510_Trapdoor__ip_based_logic_01.c":69:43)
#loc76 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:13)
#loc77 = loc("CWE510_Trapdoor__ip_based_logic_01.c":73:13)
#loc78 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:22)
#loc79 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:54)
#loc80 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:55)
#loc81 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:64)
#loc82 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:78)
#loc83 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:17)
#loc84 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:84)
#loc85 = loc("CWE510_Trapdoor__ip_based_logic_01.c":71:13)
#loc86 = loc("CWE510_Trapdoor__ip_based_logic_01.c":72:17)
#loc87 = loc("CWE510_Trapdoor__ip_based_logic_01.c":74:13)
#loc88 = loc("CWE510_Trapdoor__ip_based_logic_01.c":77:13)
#loc89 = loc("CWE510_Trapdoor__ip_based_logic_01.c":74:24)
#loc90 = loc("CWE510_Trapdoor__ip_based_logic_01.c":74:38)
#loc91 = loc("CWE510_Trapdoor__ip_based_logic_01.c":74:17)
#loc92 = loc("CWE510_Trapdoor__ip_based_logic_01.c":74:44)
#loc93 = loc("CWE510_Trapdoor__ip_based_logic_01.c":75:13)
#loc94 = loc("CWE510_Trapdoor__ip_based_logic_01.c":76:17)
#loc95 = loc("CWE510_Trapdoor__ip_based_logic_01.c":78:35)
#loc96 = loc("CWE510_Trapdoor__ip_based_logic_01.c":78:49)
#loc97 = loc("CWE510_Trapdoor__ip_based_logic_01.c":78:55)
#loc98 = loc("CWE510_Trapdoor__ip_based_logic_01.c":78:28)
#loc99 = loc("CWE510_Trapdoor__ip_based_logic_01.c":78:13)
#loc100 = loc("CWE510_Trapdoor__ip_based_logic_01.c":78:59)
#loc101 = loc("CWE510_Trapdoor__ip_based_logic_01.c":79:13)
#loc102 = loc("CWE510_Trapdoor__ip_based_logic_01.c":82:13)
#loc103 = loc("CWE510_Trapdoor__ip_based_logic_01.c":79:17)
#loc104 = loc("CWE510_Trapdoor__ip_based_logic_01.c":79:33)
#loc105 = loc("CWE510_Trapdoor__ip_based_logic_01.c":80:13)
#loc106 = loc("CWE510_Trapdoor__ip_based_logic_01.c":81:17)
#loc107 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:13)
#loc108 = loc("CWE510_Trapdoor__ip_based_logic_01.c":86:13)
#loc109 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:29)
#loc110 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:62)
#loc111 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:63)
#loc112 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:78)
#loc113 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:79)
#loc114 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:17)
#loc115 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:101)
#loc116 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:100)
#loc117 = loc("CWE510_Trapdoor__ip_based_logic_01.c":84:13)
#loc118 = loc("CWE510_Trapdoor__ip_based_logic_01.c":85:17)
#loc119 = loc("CWE510_Trapdoor__ip_based_logic_01.c":88:13)
#loc120 = loc("CWE510_Trapdoor__ip_based_logic_01.c":102:13)
#loc121 = loc("CWE510_Trapdoor__ip_based_logic_01.c":88:17)
#loc122 = loc("CWE510_Trapdoor__ip_based_logic_01.c":88:42)
#loc123 = loc("CWE510_Trapdoor__ip_based_logic_01.c":88:80)
#loc124 = loc("CWE510_Trapdoor__ip_based_logic_01.c":89:13)
#loc125 = loc("CWE510_Trapdoor__ip_based_logic_01.c":95:13)
#loc126 = loc("CWE510_Trapdoor__ip_based_logic_01.c":97:13)
#loc127 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:17)
#loc128 = loc("CWE510_Trapdoor__ip_based_logic_01.c":94:17)
#loc129 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:26)
#loc130 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:55)
#loc131 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:75)
#loc132 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:78)
#loc133 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:21)
#loc134 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:85)
#loc135 = loc("CWE510_Trapdoor__ip_based_logic_01.c":91:17)
#loc136 = loc("CWE510_Trapdoor__ip_based_logic_01.c":93:21)
#loc137 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:17)
#loc138 = loc("CWE510_Trapdoor__ip_based_logic_01.c":101:17)
#loc139 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:26)
#loc140 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:57)
#loc141 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:79)
#loc142 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:82)
#loc143 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:21)
#loc144 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:88)
#loc145 = loc("CWE510_Trapdoor__ip_based_logic_01.c":99:17)
#loc146 = loc("CWE510_Trapdoor__ip_based_logic_01.c":100:21)
#loc147 = loc("CWE510_Trapdoor__ip_based_logic_01.c":104:16)
#loc148 = loc("CWE510_Trapdoor__ip_based_logic_01.c":105:9)
#loc149 = loc("CWE510_Trapdoor__ip_based_logic_01.c":108:9)
#loc150 = loc("CWE510_Trapdoor__ip_based_logic_01.c":105:13)
#loc151 = loc("CWE510_Trapdoor__ip_based_logic_01.c":105:29)
#loc152 = loc("CWE510_Trapdoor__ip_based_logic_01.c":106:9)
#loc153 = loc("CWE510_Trapdoor__ip_based_logic_01.c":107:26)
#loc154 = loc("CWE510_Trapdoor__ip_based_logic_01.c":107:13)
#loc155 = loc("CWE510_Trapdoor__ip_based_logic_01.c":109:9)
#loc156 = loc("CWE510_Trapdoor__ip_based_logic_01.c":112:9)
#loc157 = loc("CWE510_Trapdoor__ip_based_logic_01.c":109:13)
#loc158 = loc("CWE510_Trapdoor__ip_based_logic_01.c":109:29)
#loc159 = loc("CWE510_Trapdoor__ip_based_logic_01.c":110:9)
#loc160 = loc("CWE510_Trapdoor__ip_based_logic_01.c":111:26)
#loc161 = loc("CWE510_Trapdoor__ip_based_logic_01.c":111:13)
#loc162 = loc("CWE510_Trapdoor__ip_based_logic_01.c":191:1)
#loc163 = loc("CWE510_Trapdoor__ip_based_logic_01.c":194:1)
#loc164 = loc("CWE510_Trapdoor__ip_based_logic_01.c":193:5)
#loc165 = loc("CWE510_Trapdoor__ip_based_logic_01.c":193:11)
#loc166 = loc("CWE510_Trapdoor__ip_based_logic_01.c":126:1)
#loc167 = loc("CWE510_Trapdoor__ip_based_logic_01.c":189:1)
#loc168 = loc("CWE510_Trapdoor__ip_based_logic_01.c":128:5)
#loc169 = loc("CWE510_Trapdoor__ip_based_logic_01.c":188:5)
#loc170 = loc("CWE510_Trapdoor__ip_based_logic_01.c":133:9)
#loc171 = loc("CWE510_Trapdoor__ip_based_logic_01.c":133:28)
#loc172 = loc("CWE510_Trapdoor__ip_based_logic_01.c":134:9)
#loc173 = loc("CWE510_Trapdoor__ip_based_logic_01.c":134:31)
#loc174 = loc("CWE510_Trapdoor__ip_based_logic_01.c":135:9)
#loc175 = loc("CWE510_Trapdoor__ip_based_logic_01.c":135:31)
#loc176 = loc("CWE510_Trapdoor__ip_based_logic_01.c":136:9)
#loc177 = loc("CWE510_Trapdoor__ip_based_logic_01.c":173:17)
#loc178 = loc("CWE510_Trapdoor__ip_based_logic_01.c":137:9)
#loc179 = loc("CWE510_Trapdoor__ip_based_logic_01.c":172:9)
#loc180 = loc("CWE510_Trapdoor__ip_based_logic_01.c":145:35)
#loc181 = loc("CWE510_Trapdoor__ip_based_logic_01.c":145:44)
#loc182 = loc("CWE510_Trapdoor__ip_based_logic_01.c":145:57)
#loc183 = loc("CWE510_Trapdoor__ip_based_logic_01.c":145:28)
#loc184 = loc("CWE510_Trapdoor__ip_based_logic_01.c":145:13)
#loc185 = loc("CWE510_Trapdoor__ip_based_logic_01.c":145:68)
#loc186 = loc("CWE510_Trapdoor__ip_based_logic_01.c":146:13)
#loc187 = loc("CWE510_Trapdoor__ip_based_logic_01.c":149:13)
#loc188 = loc("CWE510_Trapdoor__ip_based_logic_01.c":146:17)
#loc189 = loc("CWE510_Trapdoor__ip_based_logic_01.c":146:33)
#loc190 = loc("CWE510_Trapdoor__ip_based_logic_01.c":147:13)
#loc191 = loc("CWE510_Trapdoor__ip_based_logic_01.c":148:17)
#loc192 = loc("CWE510_Trapdoor__ip_based_logic_01.c":150:20)
#loc193 = loc("CWE510_Trapdoor__ip_based_logic_01.c":150:21)
#loc194 = loc("CWE510_Trapdoor__ip_based_logic_01.c":150:30)
#loc195 = loc("CWE510_Trapdoor__ip_based_logic_01.c":150:33)
#loc196 = loc("CWE510_Trapdoor__ip_based_logic_01.c":150:47)
#loc197 = loc("CWE510_Trapdoor__ip_based_logic_01.c":150:13)
#loc198 = loc("CWE510_Trapdoor__ip_based_logic_01.c":150:48)
#loc199 = loc("CWE510_Trapdoor__ip_based_logic_01.c":151:34)
#loc200 = loc("CWE510_Trapdoor__ip_based_logic_01.c":151:13)
#loc201 = loc("CWE510_Trapdoor__ip_based_logic_01.c":152:39)
#loc202 = loc("CWE510_Trapdoor__ip_based_logic_01.c":152:13)
#loc203 = loc("CWE510_Trapdoor__ip_based_logic_01.c":153:38)
#loc204 = loc("CWE510_Trapdoor__ip_based_logic_01.c":153:32)
#loc205 = loc("CWE510_Trapdoor__ip_based_logic_01.c":153:13)
#loc206 = loc("CWE510_Trapdoor__ip_based_logic_01.c":153:43)
#loc207 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:13)
#loc208 = loc("CWE510_Trapdoor__ip_based_logic_01.c":157:13)
#loc209 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:22)
#loc210 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:54)
#loc211 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:55)
#loc212 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:64)
#loc213 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:78)
#loc214 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:17)
#loc215 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:84)
#loc216 = loc("CWE510_Trapdoor__ip_based_logic_01.c":155:13)
#loc217 = loc("CWE510_Trapdoor__ip_based_logic_01.c":156:17)
#loc218 = loc("CWE510_Trapdoor__ip_based_logic_01.c":158:13)
#loc219 = loc("CWE510_Trapdoor__ip_based_logic_01.c":161:13)
#loc220 = loc("CWE510_Trapdoor__ip_based_logic_01.c":158:24)
#loc221 = loc("CWE510_Trapdoor__ip_based_logic_01.c":158:38)
#loc222 = loc("CWE510_Trapdoor__ip_based_logic_01.c":158:17)
#loc223 = loc("CWE510_Trapdoor__ip_based_logic_01.c":158:44)
#loc224 = loc("CWE510_Trapdoor__ip_based_logic_01.c":159:13)
#loc225 = loc("CWE510_Trapdoor__ip_based_logic_01.c":160:17)
#loc226 = loc("CWE510_Trapdoor__ip_based_logic_01.c":162:35)
#loc227 = loc("CWE510_Trapdoor__ip_based_logic_01.c":162:49)
#loc228 = loc("CWE510_Trapdoor__ip_based_logic_01.c":162:55)
#loc229 = loc("CWE510_Trapdoor__ip_based_logic_01.c":162:28)
#loc230 = loc("CWE510_Trapdoor__ip_based_logic_01.c":162:13)
#loc231 = loc("CWE510_Trapdoor__ip_based_logic_01.c":162:59)
#loc232 = loc("CWE510_Trapdoor__ip_based_logic_01.c":163:13)
#loc233 = loc("CWE510_Trapdoor__ip_based_logic_01.c":166:13)
#loc234 = loc("CWE510_Trapdoor__ip_based_logic_01.c":163:17)
#loc235 = loc("CWE510_Trapdoor__ip_based_logic_01.c":163:33)
#loc236 = loc("CWE510_Trapdoor__ip_based_logic_01.c":164:13)
#loc237 = loc("CWE510_Trapdoor__ip_based_logic_01.c":165:17)
#loc238 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:13)
#loc239 = loc("CWE510_Trapdoor__ip_based_logic_01.c":171:13)
#loc240 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:22)
#loc241 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:36)
#loc242 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:53)
#loc243 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:75)
#loc244 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:78)
#loc245 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:17)
#loc246 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:84)
#loc247 = loc("CWE510_Trapdoor__ip_based_logic_01.c":169:13)
#loc248 = loc("CWE510_Trapdoor__ip_based_logic_01.c":170:27)
#loc249 = loc("CWE510_Trapdoor__ip_based_logic_01.c":170:17)
#loc250 = loc("CWE510_Trapdoor__ip_based_logic_01.c":173:16)
#loc251 = loc("CWE510_Trapdoor__ip_based_logic_01.c":174:9)
#loc252 = loc("CWE510_Trapdoor__ip_based_logic_01.c":177:9)
#loc253 = loc("CWE510_Trapdoor__ip_based_logic_01.c":174:13)
#loc254 = loc("CWE510_Trapdoor__ip_based_logic_01.c":174:29)
#loc255 = loc("CWE510_Trapdoor__ip_based_logic_01.c":175:9)
#loc256 = loc("CWE510_Trapdoor__ip_based_logic_01.c":176:26)
#loc257 = loc("CWE510_Trapdoor__ip_based_logic_01.c":176:13)
#loc258 = loc("CWE510_Trapdoor__ip_based_logic_01.c":178:9)
#loc259 = loc("CWE510_Trapdoor__ip_based_logic_01.c":181:9)
#loc260 = loc("CWE510_Trapdoor__ip_based_logic_01.c":178:13)
#loc261 = loc("CWE510_Trapdoor__ip_based_logic_01.c":178:29)
#loc262 = loc("CWE510_Trapdoor__ip_based_logic_01.c":179:9)
#loc263 = loc("CWE510_Trapdoor__ip_based_logic_01.c":180:26)
#loc264 = loc("CWE510_Trapdoor__ip_based_logic_01.c":180:13)
#loc265 = loc(fused[#loc1, #loc2])
#loc266 = loc(fused[#loc3, #loc4])
#loc267 = loc(fused[#loc5, #loc6])
#loc268 = loc(fused[#loc7, #loc8])
#loc269 = loc(fused[#loc9, #loc10])
#loc270 = loc(fused[#loc11, #loc12])
#loc271 = loc(fused[#loc13, #loc14])
#loc272 = loc(fused[#loc16, #loc17])
#loc273 = loc(fused[#loc18, #loc19])
#loc274 = loc(fused[#loc22, #loc23])
#loc275 = loc(fused[#loc25, #loc26])
#loc276 = loc(fused[#loc27, #loc28])
#loc277 = loc(fused[#loc29, #loc30])
#loc278 = loc(fused[#loc31, #loc32])
#loc279 = loc(fused[#loc31, #loc33])
#loc280 = loc(fused[#loc34, #loc35])
#loc281 = loc(fused[#loc36, #loc37])
#loc282 = loc(fused[#loc38, #loc39])
#loc283 = loc(fused[#loc40, #loc35])
#loc284 = loc(fused[#loc41, #loc42])
#loc285 = loc(fused[#loc43, #loc44])
#loc286 = loc(fused[#loc49, #loc50])
#loc287 = loc(fused[#loc51, #loc52])
#loc288 = loc(fused[#loc53, #loc54])
#loc289 = loc(fused[#loc55, #loc52])
#loc290 = loc(fused[#loc57, #loc58])
#loc291 = loc(fused[#loc60, #loc61])
#loc292 = loc(fused[#loc62, #loc63])
#loc293 = loc(fused[#loc66, #loc64])
#loc294 = loc(fused[#loc70, #loc67])
#loc295 = loc(fused[#loc74, #loc75])
#loc296 = loc(fused[#loc76, #loc77])
#loc297 = loc(fused[#loc79, #loc80])
#loc298 = loc(fused[#loc81, #loc82])
#loc299 = loc(fused[#loc83, #loc84])
#loc300 = loc(fused[#loc85, #loc77])
#loc301 = loc(fused[#loc87, #loc88])
#loc302 = loc(fused[#loc91, #loc92])
#loc303 = loc(fused[#loc93, #loc88])
#loc304 = loc(fused[#loc99, #loc100])
#loc305 = loc(fused[#loc101, #loc102])
#loc306 = loc(fused[#loc103, #loc104])
#loc307 = loc(fused[#loc105, #loc102])
#loc308 = loc(fused[#loc107, #loc108])
#loc309 = loc(fused[#loc110, #loc111])
#loc310 = loc(fused[#loc112, #loc113])
#loc311 = loc(fused[#loc114, #loc115])
#loc312 = loc(fused[#loc117, #loc108])
#loc313 = loc(fused[#loc119, #loc120])
#loc314 = loc(fused[#loc121, #loc123])
#loc315 = loc(fused[#loc124, #loc125, #loc126, #loc120])
#loc316 = loc(fused[#loc127, #loc128])
#loc317 = loc(fused[#loc130, #loc131])
#loc318 = loc(fused[#loc133, #loc134])
#loc319 = loc(fused[#loc135, #loc128])
#loc320 = loc(fused[#loc137, #loc138])
#loc321 = loc(fused[#loc140, #loc141])
#loc322 = loc(fused[#loc143, #loc144])
#loc323 = loc(fused[#loc145, #loc138])
#loc324 = loc(fused[#loc148, #loc149])
#loc325 = loc(fused[#loc150, #loc151])
#loc326 = loc(fused[#loc152, #loc149])
#loc327 = loc(fused[#loc155, #loc156])
#loc328 = loc(fused[#loc157, #loc158])
#loc329 = loc(fused[#loc159, #loc156])
#loc330 = loc(fused[#loc162, #loc163])
#loc331 = loc(fused[#loc164, #loc165])
#loc332 = loc(fused[#loc166, #loc167])
#loc333 = loc(fused[#loc168, #loc169])
#loc334 = loc(fused[#loc170, #loc171])
#loc335 = loc(fused[#loc172, #loc173])
#loc336 = loc(fused[#loc174, #loc175])
#loc337 = loc(fused[#loc176, #loc177])
#loc338 = loc(fused[#loc178, #loc179])
#loc339 = loc(fused[#loc184, #loc185])
#loc340 = loc(fused[#loc186, #loc187])
#loc341 = loc(fused[#loc188, #loc189])
#loc342 = loc(fused[#loc190, #loc187])
#loc343 = loc(fused[#loc192, #loc193])
#loc344 = loc(fused[#loc195, #loc196])
#loc345 = loc(fused[#loc197, #loc198])
#loc346 = loc(fused[#loc200, #loc199])
#loc347 = loc(fused[#loc202, #loc201])
#loc348 = loc(fused[#loc205, #loc206])
#loc349 = loc(fused[#loc207, #loc208])
#loc350 = loc(fused[#loc210, #loc211])
#loc351 = loc(fused[#loc212, #loc213])
#loc352 = loc(fused[#loc214, #loc215])
#loc353 = loc(fused[#loc216, #loc208])
#loc354 = loc(fused[#loc218, #loc219])
#loc355 = loc(fused[#loc222, #loc223])
#loc356 = loc(fused[#loc224, #loc219])
#loc357 = loc(fused[#loc230, #loc231])
#loc358 = loc(fused[#loc232, #loc233])
#loc359 = loc(fused[#loc234, #loc235])
#loc360 = loc(fused[#loc236, #loc233])
#loc361 = loc(fused[#loc238, #loc239])
#loc362 = loc(fused[#loc242, #loc243])
#loc363 = loc(fused[#loc245, #loc246])
#loc364 = loc(fused[#loc247, #loc239])
#loc365 = loc(fused[#loc251, #loc252])
#loc366 = loc(fused[#loc253, #loc254])
#loc367 = loc(fused[#loc255, #loc252])
#loc368 = loc(fused[#loc258, #loc259])
#loc369 = loc(fused[#loc260, #loc261])
#loc370 = loc(fused[#loc262, #loc259])
