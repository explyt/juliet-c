!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc201)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc202)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc203)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc204)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc206)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc207)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc16)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc208)
    cir.br ^bb1 loc(#loc209)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc20)
    cir.br ^bb2 loc(#loc18)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc18)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc21)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc22)
    %5 = cir.const #cir.int<50> : !s32i loc(#loc23)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc23)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc210)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc211)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc212)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc213)
    cir.br ^bb5 loc(#loc214)
  ^bb5:  // pred: ^bb4
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc215)
    cir.brcond %14 ^bb6, ^bb7 loc(#loc216)
  ^bb6:  // pred: ^bb5
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc33)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc35)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
    cir.br ^bb7 loc(#loc29)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc29)
  ^bb8:  // pred: ^bb7
    %18 = cir.const #cir.int<0> : !s32i loc(#loc36)
    %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc36)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc38)
    %22 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc39)
    cir.store %19, %22 : !s8i, !cir.ptr<!s8i> loc(#loc217)
    cir.br ^bb10 loc(#loc40)
  ^bb9:  // pred: ^bb2
    %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc41)
    cir.br ^bb10 loc(#loc42)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc19)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc218)
  ^bb12:  // pred: ^bb11
    %25 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc45)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc45)
    %27 = cir.const #cir.int<67> : !s32i loc(#loc46)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc47)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc47)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc47)
    cir.libc.memset %31 bytes from %26 set to %27 : !cir.ptr<!void>, !s32i, !u64i loc(#loc219)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc51)
    %33 = cir.cast(integral, %32 : !s32i), !s8i loc(#loc51)
    %34 = cir.const #cir.int<100> : !s32i loc(#loc52)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %36 = cir.binop(sub, %34, %35) nsw : !s32i loc(#loc52)
    %37 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc54)
    %38 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %36 : !s32i), !cir.ptr<!s8i> loc(#loc54)
    cir.store %33, %38 : !s8i, !cir.ptr<!s8i> loc(#loc220)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc55)
    %41 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc56)
    %42 = cir.cast(bitcast, %41 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc56)
    %43 = cir.const #cir.int<100> : !s32i loc(#loc57)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc57)
    %45 = cir.const #cir.int<1> : !u64i loc(#loc221)
    %46 = cir.binop(mul, %44, %45) : !u64i loc(#loc222)
    cir.libc.memmove %46 bytes from %42 to %40 : !cir.ptr<!void>, !u64i loc(#loc223)
    %47 = cir.const #cir.int<0> : !s32i loc(#loc62)
    %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc62)
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
    %50 = cir.const #cir.int<100> : !s32i loc(#loc64)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %52 = cir.binop(sub, %50, %51) nsw : !s32i loc(#loc64)
    %53 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %52 : !s32i), !cir.ptr<!s8i> loc(#loc66)
    cir.store %48, %53 : !s8i, !cir.ptr<!s8i> loc(#loc224)
    %54 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %55 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc69)
    %56 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
    %57 = cir.cast(bitcast, %56 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc70)
    cir.call @free(%57) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc69)
    cir.br ^bb13 loc(#loc44)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc11)
  } loc(#loc205)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc226)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc73)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc227)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc75)
    cir.return loc(#loc72)
  } loc(#loc225)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc229)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc230)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc83)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc231)
    cir.br ^bb1 loc(#loc232)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc87)
    cir.br ^bb2 loc(#loc85)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc85)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc88)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc89)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    cir.br ^bb10 loc(#loc91)
  ^bb5:  // pred: ^bb2
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc92)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc93)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc93)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc233)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc234)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc92)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc235)
    cir.store %12, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc236)
    cir.br ^bb6 loc(#loc237)
  ^bb6:  // pred: ^bb5
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc101)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc101)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc238)
    cir.brcond %16 ^bb7, ^bb8 loc(#loc239)
  ^bb7:  // pred: ^bb6
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc103)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc104)
    %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc105)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc103)
    cir.br ^bb8 loc(#loc99)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc99)
  ^bb9:  // pred: ^bb8
    %20 = cir.const #cir.int<0> : !s32i loc(#loc106)
    %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc106)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc108)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc109)
    cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc240)
    cir.br ^bb10 loc(#loc110)
  ^bb10:  // 2 preds: ^bb4, ^bb9
    cir.br ^bb11 loc(#loc86)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc241)
  ^bb12:  // pred: ^bb11
    %25 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc113)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc113)
    %27 = cir.const #cir.int<67> : !s32i loc(#loc114)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc115)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc116)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc115)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc115)
    cir.libc.memset %31 bytes from %26 set to %27 : !cir.ptr<!void>, !s32i, !u64i loc(#loc242)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc119)
    %33 = cir.cast(integral, %32 : !s32i), !s8i loc(#loc119)
    %34 = cir.const #cir.int<100> : !s32i loc(#loc120)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc121)
    %36 = cir.binop(sub, %34, %35) nsw : !s32i loc(#loc120)
    %37 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc122)
    %38 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %36 : !s32i), !cir.ptr<!s8i> loc(#loc122)
    cir.store %33, %38 : !s8i, !cir.ptr<!s8i> loc(#loc243)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc123)
    %41 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc124)
    %42 = cir.cast(bitcast, %41 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc124)
    %43 = cir.const #cir.int<100> : !s32i loc(#loc125)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc125)
    %45 = cir.const #cir.int<1> : !u64i loc(#loc244)
    %46 = cir.binop(mul, %44, %45) : !u64i loc(#loc245)
    cir.libc.memmove %46 bytes from %42 to %40 : !cir.ptr<!void>, !u64i loc(#loc246)
    %47 = cir.const #cir.int<0> : !s32i loc(#loc130)
    %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc130)
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
    %50 = cir.const #cir.int<100> : !s32i loc(#loc132)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc133)
    %52 = cir.binop(sub, %50, %51) nsw : !s32i loc(#loc132)
    %53 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %52 : !s32i), !cir.ptr<!s8i> loc(#loc134)
    cir.store %48, %53 : !s8i, !cir.ptr<!s8i> loc(#loc247)
    %54 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
    cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc136)
    %55 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc137)
    %56 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc138)
    %57 = cir.cast(bitcast, %56 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc138)
    cir.call @free(%57) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc137)
    cir.br ^bb13 loc(#loc112)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc78)
  } loc(#loc228)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc249)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc250)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc145)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc251)
    cir.br ^bb1 loc(#loc252)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc149)
    cir.br ^bb2 loc(#loc147)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc147)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc150)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc151)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc152)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc152)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc253)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc254)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc151)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc255)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc256)
    cir.br ^bb5 loc(#loc257)
  ^bb5:  // pred: ^bb4
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc160)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc160)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc258)
    cir.brcond %14 ^bb6, ^bb7 loc(#loc259)
  ^bb6:  // pred: ^bb5
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc162)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc163)
    %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc164)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc162)
    cir.br ^bb7 loc(#loc158)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc158)
  ^bb8:  // pred: ^bb7
    %18 = cir.const #cir.int<0> : !s32i loc(#loc165)
    %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc165)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc166)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc167)
    %22 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc168)
    cir.store %19, %22 : !s8i, !cir.ptr<!s8i> loc(#loc260)
    cir.br ^bb10 loc(#loc169)
  ^bb9:  // pred: ^bb2
    %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc170)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc170)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc171)
    cir.br ^bb10 loc(#loc172)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc148)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc261)
  ^bb12:  // pred: ^bb11
    %25 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc175)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc175)
    %27 = cir.const #cir.int<67> : !s32i loc(#loc176)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc177)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc178)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc177)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc177)
    cir.libc.memset %31 bytes from %26 set to %27 : !cir.ptr<!void>, !s32i, !u64i loc(#loc262)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc181)
    %33 = cir.cast(integral, %32 : !s32i), !s8i loc(#loc181)
    %34 = cir.const #cir.int<100> : !s32i loc(#loc182)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc183)
    %36 = cir.binop(sub, %34, %35) nsw : !s32i loc(#loc182)
    %37 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc184)
    %38 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %36 : !s32i), !cir.ptr<!s8i> loc(#loc184)
    cir.store %33, %38 : !s8i, !cir.ptr<!s8i> loc(#loc263)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc185)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc185)
    %41 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc186)
    %42 = cir.cast(bitcast, %41 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc186)
    %43 = cir.const #cir.int<100> : !s32i loc(#loc187)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc187)
    %45 = cir.const #cir.int<1> : !u64i loc(#loc264)
    %46 = cir.binop(mul, %44, %45) : !u64i loc(#loc265)
    cir.libc.memmove %46 bytes from %42 to %40 : !cir.ptr<!void>, !u64i loc(#loc266)
    %47 = cir.const #cir.int<0> : !s32i loc(#loc192)
    %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc192)
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc193)
    %50 = cir.const #cir.int<100> : !s32i loc(#loc194)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc195)
    %52 = cir.binop(sub, %50, %51) nsw : !s32i loc(#loc194)
    %53 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %52 : !s32i), !cir.ptr<!s8i> loc(#loc196)
    cir.store %48, %53 : !s8i, !cir.ptr<!s8i> loc(#loc267)
    %54 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc197)
    cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc198)
    %55 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc199)
    %56 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc200)
    %57 = cir.cast(bitcast, %56 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc200)
    cir.call @free(%57) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc199)
    cir.br ^bb13 loc(#loc174)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc140)
  } loc(#loc248)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":37:19)
#loc8 = loc("/usr/include/stdlib.h":687:1)
#loc9 = loc("/usr/include/stdlib.h":687:32)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":23:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":50:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":41:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":41:24)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":25:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":26:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":26:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":27:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":39:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":27:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":29:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":31:24)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":31:31)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":31:34)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":31:45)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":31:46)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":31:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":32:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":32:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":32:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":32:21)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":32:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":32:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":32:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":32:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":33:19)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":33:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":33:14)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":33:15)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":34:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":37:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":38:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":40:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":49:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":42:16)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":42:24)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":42:29)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":42:33)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":42:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":42:34)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":43:25)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":43:16)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":43:20)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":43:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":45:17)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":45:23)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":45:31)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":45:35)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":45:46)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":45:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":45:47)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":46:23)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":46:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":46:14)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":46:18)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":46:19)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":47:19)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":47:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":48:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":48:14)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":116:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":120:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":118:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":118:14)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":119:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":119:14)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":57:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":84:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":75:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":75:24)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":59:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":59:12)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":60:12)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":60:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":61:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":73:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":61:12)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":63:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":65:19)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":65:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":66:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":69:24)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":69:31)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":69:35)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":69:46)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":69:47)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":69:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":70:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":70:37)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":70:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":70:21)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":70:27)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":70:28)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":70:34)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":70:33)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":71:19)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":71:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":71:14)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":71:15)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":72:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":74:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":83:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":76:16)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":76:24)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":76:29)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":76:33)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":76:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":76:34)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":77:25)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":77:16)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":77:20)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":77:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":79:17)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":79:23)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":79:31)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":79:35)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":79:46)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":79:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":79:47)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":80:23)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":80:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":80:14)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":80:18)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":80:19)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":81:19)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":81:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":82:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":82:14)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":87:1)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":114:1)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":105:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":105:24)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":89:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":89:12)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":90:12)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":90:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":91:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":103:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":91:12)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":93:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":95:24)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":95:31)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":95:35)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":95:46)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":95:47)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":95:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":96:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":96:37)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":96:13)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":96:21)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":96:27)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":96:28)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":96:34)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":96:33)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":97:19)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":97:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":97:14)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":97:15)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":98:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":101:19)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":101:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":102:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":104:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":113:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":106:16)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":106:24)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":106:29)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":106:33)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":106:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":106:34)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":107:25)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":107:16)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":107:20)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":107:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":109:17)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":109:23)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":109:31)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":109:35)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":109:46)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":109:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":109:47)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":110:23)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":110:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":110:14)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":110:18)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":110:19)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":111:19)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":111:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":112:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c":112:14)
#loc201 = loc(fused[#loc1, #loc2])
#loc202 = loc(fused[#loc3, #loc4])
#loc203 = loc(fused[#loc5, #loc6])
#loc204 = loc(fused[#loc8, #loc9])
#loc205 = loc(fused[#loc10, #loc11])
#loc206 = loc(fused[#loc12, #loc13])
#loc207 = loc(fused[#loc14, #loc15])
#loc208 = loc(fused[#loc17, #loc16])
#loc209 = loc(fused[#loc18, #loc19])
#loc210 = loc(fused[#loc24, #loc25])
#loc211 = loc(fused[#loc23, #loc25])
#loc212 = loc(fused[#loc22, #loc26])
#loc213 = loc(fused[#loc27, #loc26])
#loc214 = loc(fused[#loc28, #loc29])
#loc215 = loc(fused[#loc30, #loc31])
#loc216 = loc(fused[#loc32, #loc29])
#loc217 = loc(fused[#loc37, #loc36])
#loc218 = loc(fused[#loc43, #loc44])
#loc219 = loc(fused[#loc49, #loc50])
#loc220 = loc(fused[#loc54, #loc51])
#loc221 = loc(fused[#loc58, #loc59])
#loc222 = loc(fused[#loc57, #loc59])
#loc223 = loc(fused[#loc60, #loc61])
#loc224 = loc(fused[#loc63, #loc62])
#loc225 = loc(fused[#loc71, #loc72])
#loc226 = loc(fused[#loc73, #loc74])
#loc227 = loc(fused[#loc75, #loc76])
#loc228 = loc(fused[#loc77, #loc78])
#loc229 = loc(fused[#loc79, #loc80])
#loc230 = loc(fused[#loc81, #loc82])
#loc231 = loc(fused[#loc84, #loc83])
#loc232 = loc(fused[#loc85, #loc86])
#loc233 = loc(fused[#loc94, #loc95])
#loc234 = loc(fused[#loc93, #loc95])
#loc235 = loc(fused[#loc92, #loc96])
#loc236 = loc(fused[#loc97, #loc96])
#loc237 = loc(fused[#loc98, #loc99])
#loc238 = loc(fused[#loc100, #loc101])
#loc239 = loc(fused[#loc102, #loc99])
#loc240 = loc(fused[#loc107, #loc106])
#loc241 = loc(fused[#loc111, #loc112])
#loc242 = loc(fused[#loc117, #loc118])
#loc243 = loc(fused[#loc122, #loc119])
#loc244 = loc(fused[#loc126, #loc127])
#loc245 = loc(fused[#loc125, #loc127])
#loc246 = loc(fused[#loc128, #loc129])
#loc247 = loc(fused[#loc131, #loc130])
#loc248 = loc(fused[#loc139, #loc140])
#loc249 = loc(fused[#loc141, #loc142])
#loc250 = loc(fused[#loc143, #loc144])
#loc251 = loc(fused[#loc146, #loc145])
#loc252 = loc(fused[#loc147, #loc148])
#loc253 = loc(fused[#loc153, #loc154])
#loc254 = loc(fused[#loc152, #loc154])
#loc255 = loc(fused[#loc151, #loc155])
#loc256 = loc(fused[#loc156, #loc155])
#loc257 = loc(fused[#loc157, #loc158])
#loc258 = loc(fused[#loc159, #loc160])
#loc259 = loc(fused[#loc161, #loc158])
#loc260 = loc(fused[#loc166, #loc165])
#loc261 = loc(fused[#loc173, #loc174])
#loc262 = loc(fused[#loc179, #loc180])
#loc263 = loc(fused[#loc184, #loc181])
#loc264 = loc(fused[#loc188, #loc189])
#loc265 = loc(fused[#loc187, #loc189])
#loc266 = loc(fused[#loc190, #loc191])
#loc267 = loc(fused[#loc193, #loc192])
