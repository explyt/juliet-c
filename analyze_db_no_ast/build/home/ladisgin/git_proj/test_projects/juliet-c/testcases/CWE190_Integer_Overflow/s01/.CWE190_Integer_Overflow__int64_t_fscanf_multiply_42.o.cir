!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":23:26)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":23:34)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":69:30)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":69:38)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":48:30)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":48:38)
#loc125 = loc(fused[#loc9, #loc10])
#loc140 = loc(fused[#loc47, #loc48])
#loc157 = loc(fused[#loc93, #loc94])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc121)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc122)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc123)
  cir.func internal private  @badSource(%arg0: !s64i loc(fused[#loc9, #loc10])) -> !s64i extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc125)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc8)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc11)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc12)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc122)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc13)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc123)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc123)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc12)
    %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc14)
    cir.store %8, %1 : !s64i, !cir.ptr<!s64i> loc(#loc126)
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc126)
    cir.return %9 : !s64i loc(#loc126)
  } loc(#loc124)
  cir.func private  @printLongLongLine(!s64i) loc(#loc127)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_fscanf_multiply_42_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc129)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc22)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc130)
    %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc24)
    %3 = cir.call @badSource(%2) : (!s64i) -> !s64i loc(#loc25)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc131)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc30)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc31)
      %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc31)
      %7 = cir.cmp(gt, %4, %6) : !s64i, !s32i loc(#loc133)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc32)
      cir.if %8 {
        %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc135)
        %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc36)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc35)
        %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc35)
        %13 = cir.binop(mul, %10, %12) nsw : !s64i loc(#loc36)
        cir.store %13, %9 : !s64i, !cir.ptr<!s64i> loc(#loc135)
        %14 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc37)
        cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc38)
      } loc(#loc134)
    } loc(#loc132)
    cir.return loc(#loc19)
  } loc(#loc128)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_fscanf_multiply_42_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc138)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    cir.return loc(#loc40)
  } loc(#loc136)
  cir.func internal private  @goodB2GSource(%arg0: !s64i loc(fused[#loc47, #loc48])) -> !s64i extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc140)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc46)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc49)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc50)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc122)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc51)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc141)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc141)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc50)
    %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc54)
    cir.store %8, %1 : !s64i, !cir.ptr<!s64i> loc(#loc142)
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc142)
    cir.return %9 : !s64i loc(#loc142)
  } loc(#loc139)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc143)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc58)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc145)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc63)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc146)
    %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc65)
    %3 = cir.call @goodB2GSource(%2) : (!s64i) -> !s64i loc(#loc66)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc147)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc71)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc72)
      %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc72)
      %7 = cir.cmp(gt, %4, %6) : !s64i, !s32i loc(#loc149)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc73)
      cir.if %8 {
        cir.scope {
          %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc77)
          %10 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc78)
          %11 = cir.const #cir.int<2> : !s32i loc(#loc79)
          %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc79)
          %13 = cir.binop(div, %10, %12) : !s64i loc(#loc152)
          %14 = cir.cmp(lt, %9, %13) : !s64i, !s32i loc(#loc153)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc81)
          cir.if %15 {
            %16 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc155)
            %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc87)
            %18 = cir.const #cir.int<2> : !s32i loc(#loc86)
            %19 = cir.cast(integral, %18 : !s32i), !s64i loc(#loc86)
            %20 = cir.binop(mul, %17, %19) nsw : !s64i loc(#loc87)
            cir.store %20, %16 : !s64i, !cir.ptr<!s64i> loc(#loc155)
            %21 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc88)
            cir.call @printLongLongLine(%21) : (!s64i) -> () loc(#loc89)
          } else {
            %16 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc58)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc58)
            cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc90)
          } loc(#loc154)
        } loc(#loc151)
      } loc(#loc150)
    } loc(#loc148)
    cir.return loc(#loc60)
  } loc(#loc144)
  cir.func internal private  @goodG2BSource(%arg0: !s64i loc(fused[#loc93, #loc94])) -> !s64i extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc157)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc92)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc95)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc96)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc96)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc158)
    %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc98)
    cir.store %4, %1 : !s64i, !cir.ptr<!s64i> loc(#loc159)
    %5 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc159)
    cir.return %5 : !s64i loc(#loc159)
  } loc(#loc156)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc161)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc104)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc162)
    %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc106)
    %3 = cir.call @goodG2BSource(%2) : (!s64i) -> !s64i loc(#loc107)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc163)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc112)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc113)
      %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc113)
      %7 = cir.cmp(gt, %4, %6) : !s64i, !s32i loc(#loc165)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc114)
      cir.if %8 {
        %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc167)
        %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc118)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc117)
        %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc117)
        %13 = cir.binop(mul, %10, %12) nsw : !s64i loc(#loc118)
        cir.store %13, %9 : !s64i, !cir.ptr<!s64i> loc(#loc167)
        %14 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc119)
        cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc120)
      } loc(#loc166)
    } loc(#loc164)
    cir.return loc(#loc101)
  } loc(#loc160)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":26:20)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":26:24)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":23:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":28:1)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":24:1)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":26:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":26:13)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":27:12)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":27:5)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":30:1)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":41:1)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":32:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":32:13)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":33:12)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":33:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":34:22)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":34:12)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":34:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":34:26)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":35:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":40:5)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":35:8)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":35:15)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":35:13)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":36:5)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":38:9)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":38:33)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":38:26)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":39:27)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":39:9)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":96:1)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":100:1)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":98:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":98:13)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":99:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":99:13)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":69:1)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":74:1)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":70:1)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":72:5)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":72:13)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":72:20)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":72:24)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":73:12)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":73:5)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":91:23)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":76:1)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":94:1)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":78:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":78:13)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":79:12)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":79:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":80:26)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":80:12)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":80:5)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":80:30)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":81:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":93:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":81:8)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":81:15)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":81:13)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":82:5)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":84:9)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":92:9)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":84:13)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":84:21)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":84:31)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":84:32)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":84:18)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":85:9)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":88:9)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":90:9)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":86:13)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":86:37)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":86:30)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":87:31)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":87:13)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":91:13)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":48:1)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":53:1)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":49:1)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":51:12)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":51:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":52:12)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":52:5)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":55:1)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":66:1)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":57:5)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":57:13)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":58:12)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":58:5)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":59:26)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":59:12)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":59:5)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":59:30)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":60:5)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":65:5)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":60:8)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":60:15)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":60:13)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":61:5)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":63:9)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":63:33)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":63:26)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":64:27)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_42.c":64:9)
#loc121 = loc(fused[#loc1, #loc2])
#loc122 = loc(fused[#loc3, #loc4])
#loc123 = loc(fused[#loc5, #loc6])
#loc124 = loc(fused[#loc7, #loc8])
#loc126 = loc(fused[#loc15, #loc14])
#loc127 = loc(fused[#loc16, #loc17])
#loc128 = loc(fused[#loc18, #loc19])
#loc129 = loc(fused[#loc20, #loc21])
#loc130 = loc(fused[#loc23, #loc22])
#loc131 = loc(fused[#loc26, #loc27])
#loc132 = loc(fused[#loc28, #loc29])
#loc133 = loc(fused[#loc30, #loc31])
#loc134 = loc(fused[#loc33, #loc29])
#loc135 = loc(fused[#loc34, #loc35])
#loc136 = loc(fused[#loc39, #loc40])
#loc137 = loc(fused[#loc41, #loc42])
#loc138 = loc(fused[#loc43, #loc44])
#loc139 = loc(fused[#loc45, #loc46])
#loc141 = loc(fused[#loc52, #loc53])
#loc142 = loc(fused[#loc55, #loc54])
#loc143 = loc(fused[#loc56, #loc57])
#loc144 = loc(fused[#loc59, #loc60])
#loc145 = loc(fused[#loc61, #loc62])
#loc146 = loc(fused[#loc64, #loc63])
#loc147 = loc(fused[#loc67, #loc68])
#loc148 = loc(fused[#loc69, #loc70])
#loc149 = loc(fused[#loc71, #loc72])
#loc150 = loc(fused[#loc74, #loc70])
#loc151 = loc(fused[#loc75, #loc76])
#loc152 = loc(fused[#loc78, #loc79])
#loc153 = loc(fused[#loc77, #loc80])
#loc154 = loc(fused[#loc82, #loc83, #loc84, #loc76])
#loc155 = loc(fused[#loc85, #loc86])
#loc156 = loc(fused[#loc91, #loc92])
#loc158 = loc(fused[#loc97, #loc96])
#loc159 = loc(fused[#loc99, #loc98])
#loc160 = loc(fused[#loc100, #loc101])
#loc161 = loc(fused[#loc102, #loc103])
#loc162 = loc(fused[#loc105, #loc104])
#loc163 = loc(fused[#loc108, #loc109])
#loc164 = loc(fused[#loc110, #loc111])
#loc165 = loc(fused[#loc112, #loc113])
#loc166 = loc(fused[#loc115, #loc111])
#loc167 = loc(fused[#loc116, #loc117])
