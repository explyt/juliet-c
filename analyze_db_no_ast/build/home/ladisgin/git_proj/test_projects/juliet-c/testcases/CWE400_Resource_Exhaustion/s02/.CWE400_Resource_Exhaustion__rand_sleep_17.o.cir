!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc135)
  cir.func private  @usleep(!u32i) -> !s32i loc(#loc136)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc137)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Sleep time possibly too long\00" : !cir.array<!s8i x 29>> : !cir.array<!s8i x 29> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_sleep_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc139)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc140)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc141)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc16)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc20)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc144)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc145)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc24)
        cir.condition(%9) loc(#loc24)
      } body {
        cir.scope {
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc26)
          %8 = cir.binop(and, %6, %7) : !s32i loc(#loc26)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc26)
          %10 = cir.ternary(%9, true {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc26)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc26)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc26)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc26)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc26)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc26)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc26)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc26)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc26)
            cir.yield %23 : !u32i loc(#loc26)
          }, false {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc26)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc26)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc26)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc26)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc26)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc26)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc26)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc26)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc26)
            %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc26)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc26)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc26)
            %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc26)
            cir.yield %27 : !u32i loc(#loc26)
          }) : (!cir.bool) -> !u32i loc(#loc26)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc26)
          cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc147)
        } loc(#loc146)
        cir.yield loc(#loc19)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc29)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc148)
        cir.yield loc(#loc143)
      } loc(#loc143)
    } loc(#loc143)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc32)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc150)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc34)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc35)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc151)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc36)
        cir.condition(%9) loc(#loc36)
      } body {
        cir.scope {
          %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc38)
          %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc38)
          %8 = cir.call @usleep(%7) : (!u32i) -> !s32i loc(#loc39)
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc7)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc40)
        } loc(#loc152)
        cir.yield loc(#loc31)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc41)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc42)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc153)
        cir.yield loc(#loc149)
      } loc(#loc149)
    } loc(#loc149)
    cir.return loc(#loc9)
  } loc(#loc138)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_sleep_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc155)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc44)
  } loc(#loc154)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Sleep time OK\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc49)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"Sleep time too long\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc50)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc159)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc160)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc59)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc63)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc163)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc66)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc164)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc67)
        cir.condition(%9) loc(#loc67)
      } body {
        cir.scope {
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc69)
          %8 = cir.binop(and, %6, %7) : !s32i loc(#loc69)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc69)
          %10 = cir.ternary(%9, true {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc69)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc69)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc69)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc69)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc69)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc69)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc69)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc69)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc69)
            cir.yield %23 : !u32i loc(#loc69)
          }, false {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc69)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc69)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc69)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc69)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc69)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc69)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc69)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc69)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc69)
            %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc69)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc69)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc69)
            %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc69)
            cir.yield %27 : !u32i loc(#loc69)
          }) : (!cir.bool) -> !u32i loc(#loc69)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc69)
          cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc166)
        } loc(#loc165)
        cir.yield loc(#loc62)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc72)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc167)
        cir.yield loc(#loc162)
      } loc(#loc162)
    } loc(#loc162)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc75)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc169)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc77)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc78)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc170)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc79)
        cir.condition(%9) loc(#loc79)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc83)
            %7 = cir.const #cir.int<0> : !s32i loc(#loc84)
            %8 = cir.cmp(gt, %6, %7) : !s32i, !s32i loc(#loc173)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc85)
            %10 = cir.ternary(%9, true {
              %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc87)
              %12 = cir.const #cir.int<2000> : !s32i loc(#loc88)
              %13 = cir.cmp(le, %11, %12) : !s32i, !s32i loc(#loc174)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc89)
              %15 = cir.ternary(%14, true {
                %16 = cir.const #true loc(#loc86)
                cir.yield %16 : !cir.bool loc(#loc86)
              }, false {
                %16 = cir.const #false loc(#loc86)
                cir.yield %16 : !cir.bool loc(#loc86)
              }) : (!cir.bool) -> !cir.bool loc(#loc86)
              cir.yield %15 : !cir.bool loc(#loc86)
            }, false {
              %11 = cir.const #false loc(#loc86)
              cir.yield %11 : !cir.bool loc(#loc86)
            }) : (!cir.bool) -> !cir.bool loc(#loc86)
            cir.if %10 {
              %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc93)
              %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc93)
              %13 = cir.call @usleep(%12) : (!u32i) -> !s32i loc(#loc94)
              %14 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc49)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc49)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc95)
            } else {
              %11 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc50)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc50)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc96)
            } loc(#loc175)
          } loc(#loc172)
        } loc(#loc171)
        cir.yield loc(#loc74)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc97)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc98)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc176)
        cir.yield loc(#loc168)
      } loc(#loc168)
    } loc(#loc168)
    cir.return loc(#loc52)
  } loc(#loc157)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc178)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc179)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc180)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc107)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc111)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc114)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc184)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc115)
        cir.condition(%9) loc(#loc115)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<20> : !s32i loc(#loc117)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc186)
        } loc(#loc185)
        cir.yield loc(#loc110)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc120)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
        cir.yield loc(#loc182)
      } loc(#loc182)
    } loc(#loc182)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc123)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc189)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc125)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc126)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc190)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc127)
        cir.condition(%9) loc(#loc127)
      } body {
        cir.scope {
          %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc129)
          %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc129)
          %8 = cir.call @usleep(%7) : (!u32i) -> !s32i loc(#loc130)
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc131)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc131)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc132)
        } loc(#loc191)
        cir.yield loc(#loc122)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc133)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc134)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc192)
        cir.yield loc(#loc188)
      } loc(#loc188)
    } loc(#loc188)
    cir.return loc(#loc100)
  } loc(#loc177)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/unistd.h":480:1)
#loc4 = loc("/usr/include/unistd.h":480:43)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":45:19)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":30:1)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":47:1)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":32:5)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":32:9)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":32:11)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":33:5)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":33:9)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":35:14)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":35:13)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":35:5)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":36:5)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":40:5)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":36:13)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":36:9)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":36:16)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":36:20)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":36:18)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":37:5)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":39:17)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":39:9)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":36:24)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":36:23)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":41:5)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":46:5)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":41:13)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":41:9)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":41:16)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":41:20)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":41:18)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":42:5)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":44:15)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":44:9)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":45:9)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":41:24)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":41:23)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":100:1)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":104:1)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":102:5)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":102:13)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":103:5)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":103:13)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":71:23)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":75:23)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":54:1)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":78:1)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":56:5)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":56:9)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":56:11)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":57:5)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":57:9)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":59:14)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":59:13)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":59:5)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":60:5)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":64:5)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":60:13)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":60:9)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":60:16)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":60:20)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":60:18)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":61:5)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":63:17)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":63:9)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":60:24)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":60:23)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":65:5)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":77:5)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":65:13)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":65:9)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":65:16)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":65:20)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":65:18)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":66:5)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":68:9)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":76:9)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":68:13)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":68:21)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":68:19)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":68:23)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":68:26)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":68:35)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":68:32)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":69:9)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":72:9)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":74:9)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":70:19)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":70:13)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":71:13)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":75:13)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":65:24)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":65:23)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":81:1)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":98:1)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":83:5)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":83:9)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":83:11)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":84:5)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":84:9)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":86:14)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":86:13)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":86:5)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":87:5)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":91:5)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":87:13)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":87:9)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":87:16)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":87:20)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":87:18)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":88:5)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":90:17)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":90:9)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":87:24)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":87:23)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":92:5)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":97:5)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":92:13)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":92:9)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":92:16)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":92:20)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":92:18)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":93:5)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":95:15)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":95:9)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":96:19)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":96:9)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":92:24)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_sleep_17.c":92:23)
#loc135 = loc(fused[#loc1, #loc2])
#loc136 = loc(fused[#loc3, #loc4])
#loc137 = loc(fused[#loc5, #loc6])
#loc138 = loc(fused[#loc8, #loc9])
#loc139 = loc(fused[#loc10, #loc11])
#loc140 = loc(fused[#loc10, #loc12])
#loc141 = loc(fused[#loc13, #loc14])
#loc142 = loc(fused[#loc17, #loc15])
#loc143 = loc(fused[#loc18, #loc19])
#loc144 = loc(fused[#loc21, #loc20])
#loc145 = loc(fused[#loc22, #loc23])
#loc146 = loc(fused[#loc25, #loc19])
#loc147 = loc(fused[#loc27, #loc26])
#loc148 = loc(fused[#loc29, #loc28])
#loc149 = loc(fused[#loc30, #loc31])
#loc150 = loc(fused[#loc33, #loc32])
#loc151 = loc(fused[#loc34, #loc35])
#loc152 = loc(fused[#loc37, #loc31])
#loc153 = loc(fused[#loc42, #loc41])
#loc154 = loc(fused[#loc43, #loc44])
#loc155 = loc(fused[#loc45, #loc46])
#loc156 = loc(fused[#loc47, #loc48])
#loc157 = loc(fused[#loc51, #loc52])
#loc158 = loc(fused[#loc53, #loc54])
#loc159 = loc(fused[#loc53, #loc55])
#loc160 = loc(fused[#loc56, #loc57])
#loc161 = loc(fused[#loc60, #loc58])
#loc162 = loc(fused[#loc61, #loc62])
#loc163 = loc(fused[#loc64, #loc63])
#loc164 = loc(fused[#loc65, #loc66])
#loc165 = loc(fused[#loc68, #loc62])
#loc166 = loc(fused[#loc70, #loc69])
#loc167 = loc(fused[#loc72, #loc71])
#loc168 = loc(fused[#loc73, #loc74])
#loc169 = loc(fused[#loc76, #loc75])
#loc170 = loc(fused[#loc77, #loc78])
#loc171 = loc(fused[#loc80, #loc74])
#loc172 = loc(fused[#loc81, #loc82])
#loc173 = loc(fused[#loc83, #loc84])
#loc174 = loc(fused[#loc87, #loc88])
#loc175 = loc(fused[#loc90, #loc91, #loc92, #loc82])
#loc176 = loc(fused[#loc98, #loc97])
#loc177 = loc(fused[#loc99, #loc100])
#loc178 = loc(fused[#loc101, #loc102])
#loc179 = loc(fused[#loc101, #loc103])
#loc180 = loc(fused[#loc104, #loc105])
#loc181 = loc(fused[#loc108, #loc106])
#loc182 = loc(fused[#loc109, #loc110])
#loc183 = loc(fused[#loc112, #loc111])
#loc184 = loc(fused[#loc113, #loc114])
#loc185 = loc(fused[#loc116, #loc110])
#loc186 = loc(fused[#loc118, #loc117])
#loc187 = loc(fused[#loc120, #loc119])
#loc188 = loc(fused[#loc121, #loc122])
#loc189 = loc(fused[#loc124, #loc123])
#loc190 = loc(fused[#loc125, #loc126])
#loc191 = loc(fused[#loc128, #loc122])
#loc192 = loc(fused[#loc134, #loc133])
