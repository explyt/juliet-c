!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc175 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":173:10)
#loc176 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":173:14)
#loc177 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":173:20)
#loc178 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":173:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc289 = loc(fused[#loc175, #loc176])
#loc290 = loc(fused[#loc177, #loc178])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc221)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc222)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc223)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc224)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc225)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc226)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc227)
  cir.func private @close(!s32i) -> !s32i loc(#loc228)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc229)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc19)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__listen_socket_32.c\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc19)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__listen_socket_32_bad()\00" : !cir.array<!s8i x 56>> : !cir.array<!s8i x 56> {alignment = 1 : i64} loc(#loc19)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc231)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc232)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc233)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc232)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc233)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc29)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc236)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc34)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc35)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc236)
      cir.scope {
        %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc238)
        %11 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc239)
        %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc240)
        %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc241)
        %14 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc242)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc43)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc43)
        cir.store %16, %12 : !s32i, !cir.ptr<!s32i> loc(#loc240)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc45)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc45)
        cir.store %18, %13 : !s32i, !cir.ptr<!s32i> loc(#loc241)
        cir.scope {
          cir.do {
            %19 = cir.const #cir.int<2> : !s32i loc(#loc50)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc51)
            %21 = cir.const #cir.int<6> : !s32i loc(#loc52)
            %22 = cir.call @socket(%19, %20, %21) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc53)
            cir.store %22, %12 : !s32i, !cir.ptr<!s32i> loc(#loc244)
            cir.scope {
              %64 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc58)
              %65 = cir.const #cir.int<1> : !s32i loc(#loc59)
              %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc59)
              %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc246)
              cir.if %67 {
                cir.break loc(#loc61)
              } loc(#loc247)
            } loc(#loc245)
            %23 = cir.cast(bitcast, %11 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc248)
            %24 = cir.const #cir.int<0> : !s32i loc(#loc64)
            %25 = cir.const #cir.int<16> : !u64i loc(#loc249)
            cir.libc.memset %25 bytes from %23 set to %24 : !cir.ptr<!void>, !s32i, !u64i loc(#loc250)
            %26 = cir.const #cir.int<2> : !s32i loc(#loc69)
            %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc69)
            %28 = cir.get_member %11[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
            cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc251)
            %29 = cir.const #cir.int<0> : !s32i loc(#loc72)
            %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc72)
            %31 = cir.get_member %11[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
            %32 = cir.get_member %31[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
            cir.store %30, %32 : !u32i, !cir.ptr<!u32i> loc(#loc252)
            %33 = cir.const #cir.int<27015> : !s32i loc(#loc76)
            %34 = cir.cast(integral, %33 : !s32i), !u16i loc(#loc76)
            %35 = cir.call @htons(%34) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc77)
            %36 = cir.get_member %11[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
            cir.store %35, %36 : !u16i, !cir.ptr<!u16i> loc(#loc253)
            cir.scope {
              %64 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc83)
              %65 = cir.cast(bitcast, %11 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc255)
              %66 = cir.const #cir.int<16> : !u64i loc(#loc256)
              %67 = cir.cast(integral, %66 : !u64i), !u32i loc(#loc256)
              %68 = cir.call @bind(%64, %65, %67) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc88)
              %69 = cir.const #cir.int<1> : !s32i loc(#loc89)
              %70 = cir.unary(minus, %69) : !s32i, !s32i loc(#loc89)
              %71 = cir.cmp(eq, %68, %70) : !s32i, !cir.bool loc(#loc257)
              cir.if %71 {
                cir.break loc(#loc91)
              } loc(#loc258)
            } loc(#loc254)
            cir.scope {
              %64 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc94)
              %65 = cir.const #cir.int<5> : !s32i loc(#loc95)
              %66 = cir.call @listen(%64, %65) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc96)
              %67 = cir.const #cir.int<1> : !s32i loc(#loc97)
              %68 = cir.unary(minus, %67) : !s32i, !s32i loc(#loc97)
              %69 = cir.cmp(eq, %66, %68) : !s32i, !cir.bool loc(#loc260)
              cir.if %69 {
                cir.break loc(#loc99)
              } loc(#loc261)
            } loc(#loc259)
            %37 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc100)
            %38 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc101)
            %39 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc102)
            %40 = cir.call @accept(%37, %38, %39) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc103)
            cir.store %40, %13 : !s32i, !cir.ptr<!s32i> loc(#loc262)
            cir.scope {
              %64 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc108)
              %65 = cir.const #cir.int<1> : !s32i loc(#loc109)
              %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc109)
              %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc264)
              cir.if %67 {
                cir.break loc(#loc111)
              } loc(#loc265)
            } loc(#loc263)
            %41 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc112)
            %42 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc113)
            %43 = cir.cast(bitcast, %42 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc113)
            %44 = cir.const #cir.int<3> : !s32i loc(#loc114)
            %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc114)
            %46 = cir.const #cir.int<4> : !u64i loc(#loc114)
            %47 = cir.binop(mul, %45, %46) : !u64i loc(#loc114)
            %48 = cir.const #cir.int<2> : !s32i loc(#loc114)
            %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc114)
            %50 = cir.binop(add, %47, %49) : !u64i loc(#loc114)
            %51 = cir.const #cir.int<1> : !s32i loc(#loc115)
            %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc115)
            %53 = cir.binop(sub, %50, %52) : !u64i loc(#loc266)
            %54 = cir.const #cir.int<0> : !s32i loc(#loc116)
            %55 = cir.call @recv(%41, %43, %53, %54) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc117)
            %56 = cir.cast(integral, %55 : !s64i), !s32i loc(#loc117)
            cir.store %56, %10 : !s32i, !cir.ptr<!s32i> loc(#loc267)
            cir.scope {
              %64 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc122)
              %65 = cir.const #cir.int<1> : !s32i loc(#loc123)
              %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc123)
              %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc269)
              %68 = cir.ternary(%67, true {
                %69 = cir.const #true loc(#loc124)
                cir.yield %69 : !cir.bool loc(#loc124)
              }, false {
                %69 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc125)
                %70 = cir.const #cir.int<0> : !s32i loc(#loc126)
                %71 = cir.cmp(eq, %69, %70) : !s32i, !cir.bool loc(#loc270)
                %72 = cir.ternary(%71, true {
                  %73 = cir.const #true loc(#loc124)
                  cir.yield %73 : !cir.bool loc(#loc124)
                }, false {
                  %73 = cir.const #false loc(#loc124)
                  cir.yield %73 : !cir.bool loc(#loc124)
                }) : (!cir.bool) -> !cir.bool loc(#loc124)
                cir.yield %72 : !cir.bool loc(#loc124)
              }) : (!cir.bool) -> !cir.bool loc(#loc124)
              cir.if %68 {
                cir.break loc(#loc128)
              } loc(#loc271)
            } loc(#loc268)
            %57 = cir.const #cir.int<0> : !s32i loc(#loc129)
            %58 = cir.cast(integral, %57 : !s32i), !s8i loc(#loc129)
            %59 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc130)
            %60 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc131)
            %61 = cir.ptr_stride(%60 : !cir.ptr<!s8i>, %59 : !s32i), !cir.ptr<!s8i> loc(#loc131)
            cir.store %58, %61 : !s8i, !cir.ptr<!s8i> loc(#loc272)
            %62 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc132)
            %63 = cir.call @atoi(%62) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc133)
            cir.store %63, %5 : !s32i, !cir.ptr<!s32i> loc(#loc273)
            cir.yield loc(#loc49)
          } while {
            %19 = cir.const #cir.int<0> : !s32i loc(#loc136)
            %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc136)
            cir.condition(%20) loc(#loc136)
          } loc(#loc243)
        } loc(#loc243)
        cir.scope {
          %19 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc139)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc140)
          %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc140)
          %22 = cir.cmp(ne, %19, %21) : !s32i, !cir.bool loc(#loc275)
          cir.if %22 {
            %23 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc142)
            %24 = cir.call @close(%23) : (!s32i) -> !s32i loc(#loc143)
          } loc(#loc276)
        } loc(#loc274)
        cir.scope {
          %19 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc146)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc147)
          %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc147)
          %22 = cir.cmp(ne, %19, %21) : !s32i, !cir.bool loc(#loc278)
          cir.if %22 {
            %23 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc149)
            %24 = cir.call @close(%23) : (!s32i) -> !s32i loc(#loc150)
          } loc(#loc279)
        } loc(#loc277)
      } loc(#loc237)
      %8 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc151)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc152)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc280)
    } loc(#loc235)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc282)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc157)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc158)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc282)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc19)
      cir.scope {
        cir.scope {
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc19)
          %10 = cir.const #cir.int<5> : !s32i loc(#loc19)
          %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc19)
          cir.if %11 {
          } else {
            %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc19)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc19)
            %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc19)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc19)
            %16 = cir.const #cir.int<130> : !s32i loc(#loc19)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc19)
            %18 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 56>> loc(#loc19)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 56>>), !cir.ptr<!s8i> loc(#loc19)
            cir.call @__assert_fail(%13, %15, %17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc19)
          } loc(#loc19)
        } loc(#loc19)
      } loc(#loc19)
    } loc(#loc281)
    cir.return loc(#loc21)
  } loc(#loc230)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc284)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc161)
    cir.return loc(#loc160)
  } loc(#loc283)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc285)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc286)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc287)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc169)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc172)
  cir.func @main(%arg0: !s32i loc(fused[#loc175, #loc176]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc177, #loc178])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc289)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc290)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc174)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc179)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc179)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc180)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc181)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc181)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc182)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc169)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc169)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc183)
    %8 = cir.get_global @CWE617_Reachable_Assertion__listen_socket_32_good : !cir.ptr<!cir.func<!void ()>> loc(#loc291)
    cir.call @CWE617_Reachable_Assertion__listen_socket_32_good() : () -> () loc(#loc184)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc170)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc170)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc186)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc171)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc171)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc187)
    %13 = cir.get_global @CWE617_Reachable_Assertion__listen_socket_32_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc292)
    cir.call @CWE617_Reachable_Assertion__listen_socket_32_bad() : () -> () loc(#loc188)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc172)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc172)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc190)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc191)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc293)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc293)
    cir.return %17 : !s32i loc(#loc293)
  } loc(#loc288)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc193)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc295)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc296)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc297)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc296)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc297)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc202)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc203)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc298)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc300)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc208)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc209)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc300)
      %8 = cir.const #cir.int<5> : !s32i loc(#loc210)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc211)
      %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc210)
      cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc301)
      %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc213)
      %12 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc214)
      cir.store %11, %12 : !s32i, !cir.ptr<!s32i> loc(#loc302)
    } loc(#loc299)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc304)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc219)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc220)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc304)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc193)
      cir.scope {
        cir.scope {
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc193)
          %10 = cir.const #cir.int<5> : !s32i loc(#loc193)
          %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc193)
          cir.if %11 {
          } else {
            %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc193)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc193)
            %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc193)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc193)
            %16 = cir.const #cir.int<155> : !s32i loc(#loc193)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc193)
            %18 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc193)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc193)
            cir.call @__assert_fail(%13, %15, %17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc193)
          } loc(#loc193)
        } loc(#loc193)
      } loc(#loc193)
    } loc(#loc303)
    cir.return loc(#loc195)
  } loc(#loc294)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_32.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("/usr/include/assert.h":67:1)
#loc18 = loc("/usr/include/assert.h":69:43)
#loc19 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":130:9)
#loc20 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":47:1)
#loc21 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":132:1)
#loc22 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":49:5)
#loc23 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":49:9)
#loc24 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":50:5)
#loc25 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":50:22)
#loc26 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":51:5)
#loc27 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":51:22)
#loc28 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":53:13)
#loc29 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":53:12)
#loc30 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":53:5)
#loc31 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":54:5)
#loc32 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":126:5)
#loc33 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":55:9)
#loc34 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":55:21)
#loc35 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":55:20)
#loc36 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":56:9)
#loc37 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":124:9)
#loc38 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":61:13)
#loc39 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":61:17)
#loc40 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":62:13)
#loc41 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":62:32)
#loc42 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":63:13)
#loc43 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":63:35)
#loc44 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":64:13)
#loc45 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":64:35)
#loc46 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":65:13)
#loc47 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":65:45)
#loc48 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":66:13)
#loc49 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":109:21)
#loc50 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":76:39)
#loc51 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":76:48)
#loc52 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":76:61)
#loc53 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":76:32)
#loc54 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":76:17)
#loc55 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":76:72)
#loc56 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":77:17)
#loc57 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":80:17)
#loc58 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":77:21)
#loc59 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":77:37)
#loc60 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":78:17)
#loc61 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":79:21)
#loc62 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":81:24)
#loc63 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":81:25)
#loc64 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":81:34)
#loc65 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":81:37)
#loc66 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":81:51)
#loc67 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":81:17)
#loc68 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":81:52)
#loc69 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":82:38)
#loc70 = loc("/usr/include/netinet/in.h":249:5)
#loc71 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":82:17)
#loc72 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":83:43)
#loc73 = loc("/usr/include/netinet/in.h":251:20)
#loc74 = loc("/usr/include/netinet/in.h":33:15)
#loc75 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":83:17)
#loc76 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":84:42)
#loc77 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":84:36)
#loc78 = loc("/usr/include/netinet/in.h":250:15)
#loc79 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":84:17)
#loc80 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":84:50)
#loc81 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":85:17)
#loc82 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":88:17)
#loc83 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":85:26)
#loc84 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":85:58)
#loc85 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":85:59)
#loc86 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":85:68)
#loc87 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":85:82)
#loc88 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":85:21)
#loc89 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":85:88)
#loc90 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":86:17)
#loc91 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":87:21)
#loc92 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":89:17)
#loc93 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":92:17)
#loc94 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":89:28)
#loc95 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":89:42)
#loc96 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":89:21)
#loc97 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":89:61)
#loc98 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":90:17)
#loc99 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":91:21)
#loc100 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":93:39)
#loc101 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":93:53)
#loc102 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":93:59)
#loc103 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":93:32)
#loc104 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":93:17)
#loc105 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":93:63)
#loc106 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":94:17)
#loc107 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":97:17)
#loc108 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":94:21)
#loc109 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":94:37)
#loc110 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":95:17)
#loc111 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":96:21)
#loc112 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":99:35)
#loc113 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":99:49)
#loc114 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":99:62)
#loc115 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":99:80)
#loc116 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":99:83)
#loc117 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":99:30)
#loc118 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":99:17)
#loc119 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":99:84)
#loc120 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":100:17)
#loc121 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":103:17)
#loc122 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":100:21)
#loc123 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":100:35)
#loc124 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":100:48)
#loc125 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":100:51)
#loc126 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":100:65)
#loc127 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":101:17)
#loc128 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":102:21)
#loc129 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":105:43)
#loc130 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":105:29)
#loc131 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":105:17)
#loc132 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":107:29)
#loc133 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":107:24)
#loc134 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":107:17)
#loc135 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":107:40)
#loc136 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":109:20)
#loc137 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":110:13)
#loc138 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":113:13)
#loc139 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":110:17)
#loc140 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":110:33)
#loc141 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":111:13)
#loc142 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":112:30)
#loc143 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":112:17)
#loc144 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":114:13)
#loc145 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":117:13)
#loc146 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":114:17)
#loc147 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":114:33)
#loc148 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":115:13)
#loc149 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":116:30)
#loc150 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":116:17)
#loc151 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":125:21)
#loc152 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":125:10)
#loc153 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":125:9)
#loc154 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":127:5)
#loc155 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":131:5)
#loc156 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":128:9)
#loc157 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":128:21)
#loc158 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":128:20)
#loc159 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":159:1)
#loc160 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":162:1)
#loc161 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":161:5)
#loc162 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":161:13)
#loc163 = loc("/usr/include/stdlib.h":575:1)
#loc164 = loc("/usr/include/stdlib.h":575:41)
#loc165 = loc("/usr/include/time.h":76:1)
#loc166 = loc("/usr/include/time.h":76:38)
#loc167 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc168 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc169 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":178:15)
#loc170 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":180:15)
#loc171 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":183:15)
#loc172 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":185:15)
#loc173 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":173:1)
#loc174 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":188:1)
#loc179 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":174:1)
#loc180 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":176:27)
#loc181 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":176:22)
#loc182 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":176:5)
#loc183 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":178:5)
#loc184 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":179:5)
#loc185 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":179:55)
#loc186 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":180:5)
#loc187 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":183:5)
#loc188 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":184:5)
#loc189 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":184:54)
#loc190 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":185:5)
#loc191 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":187:12)
#loc192 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":187:5)
#loc193 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":155:9)
#loc194 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":139:1)
#loc195 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":157:1)
#loc196 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":141:5)
#loc197 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":141:9)
#loc198 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":142:5)
#loc199 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":142:22)
#loc200 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":143:5)
#loc201 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":143:22)
#loc202 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":145:13)
#loc203 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":145:12)
#loc204 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":145:5)
#loc205 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":146:5)
#loc206 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":151:5)
#loc207 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":147:9)
#loc208 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":147:21)
#loc209 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":147:20)
#loc210 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":149:16)
#loc211 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":149:29)
#loc212 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":149:9)
#loc213 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":150:21)
#loc214 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":150:10)
#loc215 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":150:9)
#loc216 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":152:5)
#loc217 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":156:5)
#loc218 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":153:9)
#loc219 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":153:21)
#loc220 = loc("CWE617_Reachable_Assertion__listen_socket_32.c":153:20)
#loc221 = loc(fused[#loc1, #loc2])
#loc222 = loc(fused[#loc3, #loc4])
#loc223 = loc(fused[#loc5, #loc6])
#loc224 = loc(fused[#loc7, #loc8])
#loc225 = loc(fused[#loc9, #loc10])
#loc226 = loc(fused[#loc11, #loc12])
#loc227 = loc(fused[#loc13, #loc14])
#loc228 = loc(fused[#loc15, #loc16])
#loc229 = loc(fused[#loc17, #loc18])
#loc230 = loc(fused[#loc20, #loc21])
#loc231 = loc(fused[#loc22, #loc23])
#loc232 = loc(fused[#loc24, #loc25])
#loc233 = loc(fused[#loc26, #loc27])
#loc234 = loc(fused[#loc30, #loc28])
#loc235 = loc(fused[#loc31, #loc32])
#loc236 = loc(fused[#loc33, #loc34])
#loc237 = loc(fused[#loc36, #loc37])
#loc238 = loc(fused[#loc38, #loc39])
#loc239 = loc(fused[#loc40, #loc41])
#loc240 = loc(fused[#loc42, #loc43])
#loc241 = loc(fused[#loc44, #loc45])
#loc242 = loc(fused[#loc46, #loc47])
#loc243 = loc(fused[#loc48, #loc49])
#loc244 = loc(fused[#loc54, #loc55])
#loc245 = loc(fused[#loc56, #loc57])
#loc246 = loc(fused[#loc58, #loc59])
#loc247 = loc(fused[#loc60, #loc57])
#loc248 = loc(fused[#loc62, #loc63])
#loc249 = loc(fused[#loc65, #loc66])
#loc250 = loc(fused[#loc67, #loc68])
#loc251 = loc(fused[#loc71, #loc69])
#loc252 = loc(fused[#loc75, #loc72])
#loc253 = loc(fused[#loc79, #loc80])
#loc254 = loc(fused[#loc81, #loc82])
#loc255 = loc(fused[#loc84, #loc85])
#loc256 = loc(fused[#loc86, #loc87])
#loc257 = loc(fused[#loc88, #loc89])
#loc258 = loc(fused[#loc90, #loc82])
#loc259 = loc(fused[#loc92, #loc93])
#loc260 = loc(fused[#loc96, #loc97])
#loc261 = loc(fused[#loc98, #loc93])
#loc262 = loc(fused[#loc104, #loc105])
#loc263 = loc(fused[#loc106, #loc107])
#loc264 = loc(fused[#loc108, #loc109])
#loc265 = loc(fused[#loc110, #loc107])
#loc266 = loc(fused[#loc114, #loc115])
#loc267 = loc(fused[#loc118, #loc119])
#loc268 = loc(fused[#loc120, #loc121])
#loc269 = loc(fused[#loc122, #loc123])
#loc270 = loc(fused[#loc125, #loc126])
#loc271 = loc(fused[#loc127, #loc121])
#loc272 = loc(fused[#loc131, #loc129])
#loc273 = loc(fused[#loc134, #loc135])
#loc274 = loc(fused[#loc137, #loc138])
#loc275 = loc(fused[#loc139, #loc140])
#loc276 = loc(fused[#loc141, #loc138])
#loc277 = loc(fused[#loc144, #loc145])
#loc278 = loc(fused[#loc146, #loc147])
#loc279 = loc(fused[#loc148, #loc145])
#loc280 = loc(fused[#loc153, #loc151])
#loc281 = loc(fused[#loc154, #loc155])
#loc282 = loc(fused[#loc156, #loc157])
#loc283 = loc(fused[#loc159, #loc160])
#loc284 = loc(fused[#loc161, #loc162])
#loc285 = loc(fused[#loc163, #loc164])
#loc286 = loc(fused[#loc165, #loc166])
#loc287 = loc(fused[#loc167, #loc168])
#loc288 = loc(fused[#loc173, #loc174])
#loc291 = loc(fused[#loc184, #loc185])
#loc292 = loc(fused[#loc188, #loc189])
#loc293 = loc(fused[#loc192, #loc191])
#loc294 = loc(fused[#loc194, #loc195])
#loc295 = loc(fused[#loc196, #loc197])
#loc296 = loc(fused[#loc198, #loc199])
#loc297 = loc(fused[#loc200, #loc201])
#loc298 = loc(fused[#loc204, #loc202])
#loc299 = loc(fused[#loc205, #loc206])
#loc300 = loc(fused[#loc207, #loc208])
#loc301 = loc(fused[#loc212, #loc211])
#loc302 = loc(fused[#loc215, #loc213])
#loc303 = loc(fused[#loc216, #loc217])
#loc304 = loc(fused[#loc218, #loc219])
