!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc707)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc708)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc709)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc710)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc711)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc712)
  cir.func private @close(!s32i) -> !s32i loc(#loc713)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc714)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc715)
  cir.func private @printIntLine(!s32i) loc(#loc716)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc717)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc24)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc718)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc720)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc32)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc721)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc36)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc37)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc723)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc726)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc727)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc728)
          %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc729)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc46)
          %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc46)
          cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc728)
          cir.scope {
            cir.do {
              cir.scope {
                %12 = cir.const #cir.int<2> : !s32i loc(#loc53)
                %13 = cir.const #cir.int<1> : !s32i loc(#loc54)
                %14 = cir.const #cir.int<6> : !s32i loc(#loc55)
                %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc56)
                cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc732)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc61)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc62)
                  %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc62)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc734)
                  cir.if %57 {
                    cir.break loc(#loc64)
                  } loc(#loc735)
                } loc(#loc733)
                %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc736)
                %17 = cir.const #cir.int<0> : !s32i loc(#loc67)
                %18 = cir.const #cir.int<16> : !u64i loc(#loc737)
                cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc738)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc72)
                %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc72)
                %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
                cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc739)
                %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
                %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc75)
                %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
                %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc77)
                cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc740)
                %27 = cir.const #cir.int<27015> : !s32i loc(#loc80)
                %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc80)
                %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc81)
                %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
                cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc741)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc87)
                  %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc743)
                  %56 = cir.const #cir.int<16> : !u64i loc(#loc744)
                  %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc744)
                  %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc92)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc93)
                  %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc93)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc745)
                  cir.if %61 {
                    cir.break loc(#loc95)
                  } loc(#loc746)
                } loc(#loc742)
                %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc97)
                %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc97)
                %34 = cir.const #cir.int<3> : !s32i loc(#loc98)
                %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc98)
                %36 = cir.const #cir.int<4> : !u64i loc(#loc98)
                %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc98)
                %38 = cir.const #cir.int<2> : !s32i loc(#loc98)
                %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc98)
                %40 = cir.binop(add, %37, %39) : !u64i loc(#loc98)
                %41 = cir.const #cir.int<1> : !s32i loc(#loc99)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc99)
                %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc747)
                %44 = cir.const #cir.int<0> : !s32i loc(#loc100)
                %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc101)
                %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc101)
                cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc748)
                cir.scope {
                  %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc106)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc107)
                  %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc107)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc750)
                  %58 = cir.ternary(%57, true {
                    %59 = cir.const #true loc(#loc108)
                    cir.yield %59 : !cir.bool loc(#loc108)
                  }, false {
                    %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                    %60 = cir.const #cir.int<0> : !s32i loc(#loc110)
                    %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc751)
                    %62 = cir.ternary(%61, true {
                      %63 = cir.const #true loc(#loc108)
                      cir.yield %63 : !cir.bool loc(#loc108)
                    }, false {
                      %63 = cir.const #false loc(#loc108)
                      cir.yield %63 : !cir.bool loc(#loc108)
                    }) : (!cir.bool) -> !cir.bool loc(#loc108)
                    cir.yield %62 : !cir.bool loc(#loc108)
                  }) : (!cir.bool) -> !cir.bool loc(#loc108)
                  cir.if %58 {
                    cir.break loc(#loc112)
                  } loc(#loc752)
                } loc(#loc749)
                %47 = cir.const #cir.int<0> : !s32i loc(#loc113)
                %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc113)
                %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc114)
                %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc115)
                %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc115)
                cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc753)
                %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc116)
                %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc117)
                cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc754)
              } loc(#loc731)
              cir.yield loc(#loc50)
            } while {
              %12 = cir.const #cir.int<0> : !s32i loc(#loc120)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc120)
              cir.condition(%13) loc(#loc120)
            } loc(#loc730)
          } loc(#loc730)
          cir.scope {
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc123)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc124)
            %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc124)
            %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc756)
            cir.if %15 {
              %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc126)
              %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc127)
            } loc(#loc757)
          } loc(#loc755)
        } loc(#loc725)
      } loc(#loc724)
    } loc(#loc722)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc130)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc131)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc759)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc762)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc763)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc139)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc140)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc140)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc764)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc765)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc139)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc766)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc763)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc145)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc146)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc146)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc768)
            cir.if %21 {
              %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc148)
              %23 = cir.const #cir.int<1> : !s32i loc(#loc149)
              %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc150)
              cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc148)
            } loc(#loc769)
          } loc(#loc767)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc153)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc771)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc155)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc156)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc772)
              cir.condition(%21) loc(#loc157)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc159)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc160)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc161)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc162)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc774)
              } loc(#loc773)
              cir.yield loc(#loc152)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc163)
              %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc164)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc775)
              cir.yield loc(#loc770)
            } loc(#loc770)
          } loc(#loc770)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc167)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc168)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc777)
            cir.if %20 {
              %21 = cir.const #cir.int<1> : !s32i loc(#loc172)
              %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc173)
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc174)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc175)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc779)
              cir.scope {
                %25 = cir.const #cir.int<0> : !s32i loc(#loc178)
                cir.store %25, %6 : !s32i, !cir.ptr<!s32i> loc(#loc781)
                cir.for : cond {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc180)
                  %27 = cir.const #cir.int<10> : !s32i loc(#loc181)
                  %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc782)
                  cir.condition(%28) loc(#loc182)
                } body {
                  cir.scope {
                    %26 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc184)
                    %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc185)
                    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc186)
                    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc184)
                    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc187)
                  } loc(#loc783)
                  cir.yield loc(#loc177)
                } step {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc188)
                  %27 = cir.unary(inc, %26) nsw : !s32i, !s32i loc(#loc189)
                  cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc784)
                  cir.yield loc(#loc780)
                } loc(#loc780)
              } loc(#loc780)
            } else {
              %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc24)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc24)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc190)
            } loc(#loc778)
          } loc(#loc776)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc191)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc192)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc192)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc191)
        } loc(#loc761)
      } loc(#loc760)
    } loc(#loc758)
    cir.return loc(#loc28)
  } loc(#loc719)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc786)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc195)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc787)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc197)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc788)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc199)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc789)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc201)
    cir.return loc(#loc194)
  } loc(#loc785)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc203)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc204)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc791)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc209)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc210)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc792)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc214)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc215)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc794)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc797)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc798)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc799)
          %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc800)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc224)
          %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc224)
          cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc799)
          cir.scope {
            cir.do {
              cir.scope {
                %12 = cir.const #cir.int<2> : !s32i loc(#loc231)
                %13 = cir.const #cir.int<1> : !s32i loc(#loc232)
                %14 = cir.const #cir.int<6> : !s32i loc(#loc233)
                %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc234)
                cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc803)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc239)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc240)
                  %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc240)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc805)
                  cir.if %57 {
                    cir.break loc(#loc242)
                  } loc(#loc806)
                } loc(#loc804)
                %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc807)
                %17 = cir.const #cir.int<0> : !s32i loc(#loc245)
                %18 = cir.const #cir.int<16> : !u64i loc(#loc808)
                cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc809)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc250)
                %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc250)
                %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
                cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc810)
                %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc252)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc252)
                %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc253)
                %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
                %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc77)
                cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc811)
                %27 = cir.const #cir.int<27015> : !s32i loc(#loc256)
                %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc256)
                %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc257)
                %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
                cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc812)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc262)
                  %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc814)
                  %56 = cir.const #cir.int<16> : !u64i loc(#loc815)
                  %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc815)
                  %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc267)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc268)
                  %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc268)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc816)
                  cir.if %61 {
                    cir.break loc(#loc270)
                  } loc(#loc817)
                } loc(#loc813)
                %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc271)
                %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc272)
                %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc272)
                %34 = cir.const #cir.int<3> : !s32i loc(#loc273)
                %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc273)
                %36 = cir.const #cir.int<4> : !u64i loc(#loc273)
                %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc273)
                %38 = cir.const #cir.int<2> : !s32i loc(#loc273)
                %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc273)
                %40 = cir.binop(add, %37, %39) : !u64i loc(#loc273)
                %41 = cir.const #cir.int<1> : !s32i loc(#loc274)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc274)
                %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc818)
                %44 = cir.const #cir.int<0> : !s32i loc(#loc275)
                %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc276)
                %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc276)
                cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc819)
                cir.scope {
                  %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc281)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc282)
                  %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc282)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc821)
                  %58 = cir.ternary(%57, true {
                    %59 = cir.const #true loc(#loc283)
                    cir.yield %59 : !cir.bool loc(#loc283)
                  }, false {
                    %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc284)
                    %60 = cir.const #cir.int<0> : !s32i loc(#loc285)
                    %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc822)
                    %62 = cir.ternary(%61, true {
                      %63 = cir.const #true loc(#loc283)
                      cir.yield %63 : !cir.bool loc(#loc283)
                    }, false {
                      %63 = cir.const #false loc(#loc283)
                      cir.yield %63 : !cir.bool loc(#loc283)
                    }) : (!cir.bool) -> !cir.bool loc(#loc283)
                    cir.yield %62 : !cir.bool loc(#loc283)
                  }) : (!cir.bool) -> !cir.bool loc(#loc283)
                  cir.if %58 {
                    cir.break loc(#loc287)
                  } loc(#loc823)
                } loc(#loc820)
                %47 = cir.const #cir.int<0> : !s32i loc(#loc288)
                %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc288)
                %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc289)
                %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc290)
                %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc290)
                cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc824)
                %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc291)
                %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc292)
                cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc825)
              } loc(#loc802)
              cir.yield loc(#loc228)
            } while {
              %12 = cir.const #cir.int<0> : !s32i loc(#loc295)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc295)
              cir.condition(%13) loc(#loc295)
            } loc(#loc801)
          } loc(#loc801)
          cir.scope {
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc298)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc299)
            %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc299)
            %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc827)
            cir.if %15 {
              %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc301)
              %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc302)
            } loc(#loc828)
          } loc(#loc826)
        } loc(#loc796)
      } loc(#loc795)
    } loc(#loc793)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc305)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc306)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc830)
      cir.if %5 {
        %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc203)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc203)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc310)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc833)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc834)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc317)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc318)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc318)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc835)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc836)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc317)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc837)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc834)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc323)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc324)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc324)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc839)
            cir.if %21 {
              %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc326)
              %23 = cir.const #cir.int<1> : !s32i loc(#loc327)
              %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc328)
              cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc326)
            } loc(#loc840)
          } loc(#loc838)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc331)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc842)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc333)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc334)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc843)
              cir.condition(%21) loc(#loc335)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc337)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc338)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc339)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc340)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc845)
              } loc(#loc844)
              cir.yield loc(#loc330)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc341)
              %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc342)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc846)
              cir.yield loc(#loc841)
            } loc(#loc841)
          } loc(#loc841)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc345)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc346)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc848)
            %21 = cir.ternary(%20, true {
              %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc348)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc349)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc849)
              %25 = cir.ternary(%24, true {
                %26 = cir.const #true loc(#loc347)
                cir.yield %26 : !cir.bool loc(#loc347)
              }, false {
                %26 = cir.const #false loc(#loc347)
                cir.yield %26 : !cir.bool loc(#loc347)
              }) : (!cir.bool) -> !cir.bool loc(#loc347)
              cir.yield %25 : !cir.bool loc(#loc347)
            }, false {
              %22 = cir.const #false loc(#loc347)
              cir.yield %22 : !cir.bool loc(#loc347)
            }) : (!cir.bool) -> !cir.bool loc(#loc347)
            cir.if %21 {
              %22 = cir.const #cir.int<1> : !s32i loc(#loc354)
              %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc355)
              %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc356)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc357)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc851)
              cir.scope {
                %26 = cir.const #cir.int<0> : !s32i loc(#loc360)
                cir.store %26, %6 : !s32i, !cir.ptr<!s32i> loc(#loc853)
                cir.for : cond {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc362)
                  %28 = cir.const #cir.int<10> : !s32i loc(#loc363)
                  %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc854)
                  cir.condition(%29) loc(#loc364)
                } body {
                  cir.scope {
                    %27 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc366)
                    %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc367)
                    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc368)
                    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc366)
                    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc369)
                  } loc(#loc855)
                  cir.yield loc(#loc359)
                } step {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc370)
                  %28 = cir.unary(inc, %27) nsw : !s32i, !s32i loc(#loc371)
                  cir.store %28, %6 : !s32i, !cir.ptr<!s32i> loc(#loc856)
                  cir.yield loc(#loc852)
                } loc(#loc852)
              } loc(#loc852)
            } else {
              %22 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc204)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc204)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc372)
            } loc(#loc850)
          } loc(#loc847)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc373)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc374)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc374)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc373)
        } loc(#loc832)
      } loc(#loc831)
    } loc(#loc829)
    cir.return loc(#loc206)
  } loc(#loc790)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc858)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc379)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc380)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc859)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc384)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc385)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc861)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc864)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc865)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc866)
          %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc867)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc394)
          %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc394)
          cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc866)
          cir.scope {
            cir.do {
              cir.scope {
                %12 = cir.const #cir.int<2> : !s32i loc(#loc401)
                %13 = cir.const #cir.int<1> : !s32i loc(#loc402)
                %14 = cir.const #cir.int<6> : !s32i loc(#loc403)
                %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc404)
                cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc870)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc409)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc410)
                  %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc410)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc872)
                  cir.if %57 {
                    cir.break loc(#loc412)
                  } loc(#loc873)
                } loc(#loc871)
                %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc874)
                %17 = cir.const #cir.int<0> : !s32i loc(#loc415)
                %18 = cir.const #cir.int<16> : !u64i loc(#loc875)
                cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc876)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc420)
                %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc420)
                %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
                cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc877)
                %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc422)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc422)
                %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc423)
                %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
                %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc77)
                cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc878)
                %27 = cir.const #cir.int<27015> : !s32i loc(#loc426)
                %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc426)
                %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc427)
                %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
                cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc879)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc432)
                  %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc881)
                  %56 = cir.const #cir.int<16> : !u64i loc(#loc882)
                  %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc882)
                  %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc437)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc438)
                  %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc438)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc883)
                  cir.if %61 {
                    cir.break loc(#loc440)
                  } loc(#loc884)
                } loc(#loc880)
                %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc441)
                %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc442)
                %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc442)
                %34 = cir.const #cir.int<3> : !s32i loc(#loc443)
                %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc443)
                %36 = cir.const #cir.int<4> : !u64i loc(#loc443)
                %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc443)
                %38 = cir.const #cir.int<2> : !s32i loc(#loc443)
                %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc443)
                %40 = cir.binop(add, %37, %39) : !u64i loc(#loc443)
                %41 = cir.const #cir.int<1> : !s32i loc(#loc444)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc444)
                %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc885)
                %44 = cir.const #cir.int<0> : !s32i loc(#loc445)
                %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc446)
                %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc446)
                cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc886)
                cir.scope {
                  %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc451)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc452)
                  %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc452)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc888)
                  %58 = cir.ternary(%57, true {
                    %59 = cir.const #true loc(#loc453)
                    cir.yield %59 : !cir.bool loc(#loc453)
                  }, false {
                    %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc454)
                    %60 = cir.const #cir.int<0> : !s32i loc(#loc455)
                    %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc889)
                    %62 = cir.ternary(%61, true {
                      %63 = cir.const #true loc(#loc453)
                      cir.yield %63 : !cir.bool loc(#loc453)
                    }, false {
                      %63 = cir.const #false loc(#loc453)
                      cir.yield %63 : !cir.bool loc(#loc453)
                    }) : (!cir.bool) -> !cir.bool loc(#loc453)
                    cir.yield %62 : !cir.bool loc(#loc453)
                  }) : (!cir.bool) -> !cir.bool loc(#loc453)
                  cir.if %58 {
                    cir.break loc(#loc457)
                  } loc(#loc890)
                } loc(#loc887)
                %47 = cir.const #cir.int<0> : !s32i loc(#loc458)
                %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc458)
                %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc459)
                %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc460)
                %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc460)
                cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc891)
                %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc461)
                %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc462)
                cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc892)
              } loc(#loc869)
              cir.yield loc(#loc398)
            } while {
              %12 = cir.const #cir.int<0> : !s32i loc(#loc465)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc465)
              cir.condition(%13) loc(#loc465)
            } loc(#loc868)
          } loc(#loc868)
          cir.scope {
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc468)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc469)
            %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc469)
            %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc894)
            cir.if %15 {
              %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc471)
              %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc472)
            } loc(#loc895)
          } loc(#loc893)
        } loc(#loc863)
      } loc(#loc862)
    } loc(#loc860)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc475)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc476)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc897)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc900)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc901)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc484)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc485)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc485)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc902)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc903)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc484)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc904)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc901)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc490)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc491)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc491)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc906)
            cir.if %21 {
              %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc493)
              %23 = cir.const #cir.int<1> : !s32i loc(#loc494)
              %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc495)
              cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc493)
            } loc(#loc907)
          } loc(#loc905)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc498)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc909)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc500)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc501)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc910)
              cir.condition(%21) loc(#loc502)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc504)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc505)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc506)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc507)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc912)
              } loc(#loc911)
              cir.yield loc(#loc497)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc508)
              %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc509)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc913)
              cir.yield loc(#loc908)
            } loc(#loc908)
          } loc(#loc908)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc512)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc513)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc915)
            %21 = cir.ternary(%20, true {
              %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc515)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc516)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc916)
              %25 = cir.ternary(%24, true {
                %26 = cir.const #true loc(#loc514)
                cir.yield %26 : !cir.bool loc(#loc514)
              }, false {
                %26 = cir.const #false loc(#loc514)
                cir.yield %26 : !cir.bool loc(#loc514)
              }) : (!cir.bool) -> !cir.bool loc(#loc514)
              cir.yield %25 : !cir.bool loc(#loc514)
            }, false {
              %22 = cir.const #false loc(#loc514)
              cir.yield %22 : !cir.bool loc(#loc514)
            }) : (!cir.bool) -> !cir.bool loc(#loc514)
            cir.if %21 {
              %22 = cir.const #cir.int<1> : !s32i loc(#loc521)
              %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc522)
              %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc523)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc524)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc918)
              cir.scope {
                %26 = cir.const #cir.int<0> : !s32i loc(#loc527)
                cir.store %26, %6 : !s32i, !cir.ptr<!s32i> loc(#loc920)
                cir.for : cond {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc529)
                  %28 = cir.const #cir.int<10> : !s32i loc(#loc530)
                  %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc921)
                  cir.condition(%29) loc(#loc531)
                } body {
                  cir.scope {
                    %27 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc533)
                    %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc534)
                    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc535)
                    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc533)
                    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc536)
                  } loc(#loc922)
                  cir.yield loc(#loc526)
                } step {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc537)
                  %28 = cir.unary(inc, %27) nsw : !s32i, !s32i loc(#loc538)
                  cir.store %28, %6 : !s32i, !cir.ptr<!s32i> loc(#loc923)
                  cir.yield loc(#loc919)
                } loc(#loc919)
              } loc(#loc919)
            } else {
              %22 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc539)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc539)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc540)
            } loc(#loc917)
          } loc(#loc914)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc541)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc542)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc542)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc541)
        } loc(#loc899)
      } loc(#loc898)
    } loc(#loc896)
    cir.return loc(#loc376)
  } loc(#loc857)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc925)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc547)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc548)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc926)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc552)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc553)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc928)
      cir.if %5 {
        %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc557)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc557)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc558)
      } else {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc559)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc930)
      } loc(#loc929)
    } loc(#loc927)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc563)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc564)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc932)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc935)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc936)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc572)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc573)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc573)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc937)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc938)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc572)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc939)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc936)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc578)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc579)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc579)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc941)
            cir.if %21 {
              %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc581)
              %23 = cir.const #cir.int<1> : !s32i loc(#loc582)
              %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc583)
              cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc581)
            } loc(#loc942)
          } loc(#loc940)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc586)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc944)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc588)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc589)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc945)
              cir.condition(%21) loc(#loc590)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc592)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc593)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc594)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc595)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc947)
              } loc(#loc946)
              cir.yield loc(#loc585)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc596)
              %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc597)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc948)
              cir.yield loc(#loc943)
            } loc(#loc943)
          } loc(#loc943)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc600)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc601)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc950)
            cir.if %20 {
              %21 = cir.const #cir.int<1> : !s32i loc(#loc605)
              %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc606)
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc607)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc608)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc952)
              cir.scope {
                %25 = cir.const #cir.int<0> : !s32i loc(#loc611)
                cir.store %25, %6 : !s32i, !cir.ptr<!s32i> loc(#loc954)
                cir.for : cond {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc613)
                  %27 = cir.const #cir.int<10> : !s32i loc(#loc614)
                  %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc955)
                  cir.condition(%28) loc(#loc615)
                } body {
                  cir.scope {
                    %26 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc617)
                    %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc618)
                    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc619)
                    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc617)
                    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc620)
                  } loc(#loc956)
                  cir.yield loc(#loc610)
                } step {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc621)
                  %27 = cir.unary(inc, %26) nsw : !s32i, !s32i loc(#loc622)
                  cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc957)
                  cir.yield loc(#loc953)
                } loc(#loc953)
              } loc(#loc953)
            } else {
              %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc623)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc623)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc624)
            } loc(#loc951)
          } loc(#loc949)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc625)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc626)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc626)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc625)
        } loc(#loc934)
      } loc(#loc933)
    } loc(#loc931)
    cir.return loc(#loc544)
  } loc(#loc924)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc959)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc631)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc632)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc960)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc636)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc637)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc962)
      cir.if %5 {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc639)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc964)
      } loc(#loc963)
    } loc(#loc961)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc643)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc644)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc966)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc969)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc970)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc652)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc653)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc653)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc971)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc972)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc652)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc973)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc970)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc658)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc659)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc659)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc975)
            cir.if %21 {
              %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc661)
              %23 = cir.const #cir.int<1> : !s32i loc(#loc662)
              %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc663)
              cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc661)
            } loc(#loc976)
          } loc(#loc974)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc666)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc978)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc668)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc669)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc979)
              cir.condition(%21) loc(#loc670)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc672)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc673)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc674)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc675)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc981)
              } loc(#loc980)
              cir.yield loc(#loc665)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc676)
              %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc677)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc982)
              cir.yield loc(#loc977)
            } loc(#loc977)
          } loc(#loc977)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc680)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc681)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc984)
            cir.if %20 {
              %21 = cir.const #cir.int<1> : !s32i loc(#loc685)
              %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc686)
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc687)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc688)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc986)
              cir.scope {
                %25 = cir.const #cir.int<0> : !s32i loc(#loc691)
                cir.store %25, %6 : !s32i, !cir.ptr<!s32i> loc(#loc988)
                cir.for : cond {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc693)
                  %27 = cir.const #cir.int<10> : !s32i loc(#loc694)
                  %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc989)
                  cir.condition(%28) loc(#loc695)
                } body {
                  cir.scope {
                    %26 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc697)
                    %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc698)
                    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc699)
                    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc697)
                    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc700)
                  } loc(#loc990)
                  cir.yield loc(#loc690)
                } step {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc701)
                  %27 = cir.unary(inc, %26) nsw : !s32i, !s32i loc(#loc702)
                  cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc991)
                  cir.yield loc(#loc987)
                } loc(#loc987)
              } loc(#loc987)
            } else {
              %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc703)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc703)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc704)
            } loc(#loc985)
          } loc(#loc983)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc705)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc706)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc706)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc705)
        } loc(#loc968)
      } loc(#loc967)
    } loc(#loc965)
    cir.return loc(#loc628)
  } loc(#loc958)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":82:53)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("/usr/include/stdlib.h":672:1)
#loc17 = loc("/usr/include/stdlib.h":672:45)
#loc18 = loc("/usr/include/stdlib.h":756:1)
#loc19 = loc("/usr/include/stdlib.h":756:70)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":137:27)
#loc25 = loc("/usr/include/stdlib.h":687:1)
#loc26 = loc("/usr/include/stdlib.h":687:32)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":49:1)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":142:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":51:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":51:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":53:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":53:12)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":53:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":54:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":112:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":54:8)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":54:27)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":55:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":56:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":111:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":61:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":61:17)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":62:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":62:32)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":63:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":63:36)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":64:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":64:45)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":65:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":100:21)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":66:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":99:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":75:40)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":75:49)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":75:62)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":75:33)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":75:17)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":75:73)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":76:17)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":79:17)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":76:21)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":76:38)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":77:17)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":78:21)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":80:24)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":80:25)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":80:34)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":80:37)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":80:51)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":80:17)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":80:52)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":81:38)
#loc73 = loc("/usr/include/netinet/in.h":249:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":81:17)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":82:43)
#loc76 = loc("/usr/include/netinet/in.h":251:20)
#loc77 = loc("/usr/include/netinet/in.h":33:15)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":82:17)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":82:63)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":83:42)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":83:36)
#loc82 = loc("/usr/include/netinet/in.h":250:15)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":83:17)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":83:50)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":84:17)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":87:17)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":84:29)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":84:62)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":84:63)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":84:72)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":84:86)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":84:21)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":84:92)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":85:17)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":86:21)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":90:35)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":90:50)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":90:63)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":90:81)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":90:84)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":90:30)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":90:17)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":90:85)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":91:17)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":94:17)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":91:21)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":91:35)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":91:48)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":91:51)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":91:65)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":92:17)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":93:21)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":96:43)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":96:29)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":96:17)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":98:29)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":98:24)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":98:17)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":98:40)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":100:20)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":101:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":104:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":101:17)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":101:34)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":102:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":103:30)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":103:17)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":113:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":141:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":113:8)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":113:27)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":114:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":115:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":140:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":116:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":116:17)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":117:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":117:58)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":117:35)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":117:42)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":117:47)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":117:57)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":118:13)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":118:43)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":118:17)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":118:27)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":118:33)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":118:34)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":118:40)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":118:39)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":120:13)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":123:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":120:22)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":120:18)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":120:25)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":120:29)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":120:27)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":121:13)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":122:29)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":122:17)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":122:24)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":122:25)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":120:34)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":120:33)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":126:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":138:13)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":126:17)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":126:25)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":127:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":134:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":136:13)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":128:32)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":128:17)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":128:24)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":128:28)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":130:17)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":133:17)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":130:25)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":130:21)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":130:28)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":130:32)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":130:30)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":131:17)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":132:34)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":132:41)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":132:42)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":132:21)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":130:37)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":130:36)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":137:17)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":139:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":139:18)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":434:1)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":440:1)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":436:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":436:14)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":437:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":437:14)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":438:5)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":438:14)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":439:5)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":439:14)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":216:19)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":241:27)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":149:1)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":246:1)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":151:5)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":151:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":153:13)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":153:12)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":153:5)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":154:5)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":212:5)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":154:8)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":154:27)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":155:5)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":156:9)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":211:9)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":161:13)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":161:17)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":162:13)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":162:32)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":163:13)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":163:36)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":164:13)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":164:45)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":165:13)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":200:21)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":166:13)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":199:13)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":175:40)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":175:49)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":175:62)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":175:33)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":175:17)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":175:73)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":176:17)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":179:17)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":176:21)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":176:38)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":177:17)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":178:21)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":180:24)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":180:25)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":180:34)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":180:37)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":180:51)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":180:17)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":180:52)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":181:38)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":181:17)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":182:53)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":182:43)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":182:17)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":182:63)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":183:42)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":183:36)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":183:17)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":183:50)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":184:17)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":187:17)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":184:29)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":184:62)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":184:63)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":184:72)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":184:86)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":184:21)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":184:92)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":185:17)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":186:21)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":190:35)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":190:50)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":190:63)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":190:81)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":190:84)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":190:30)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":190:17)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":190:85)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":191:17)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":194:17)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":191:21)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":191:35)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":191:48)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":191:51)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":191:65)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":192:17)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":193:21)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":196:43)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":196:29)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":196:17)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":198:29)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":198:24)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":198:17)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":198:40)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":200:20)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":201:13)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":204:13)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":201:17)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":201:34)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":202:13)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":203:30)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":203:17)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":213:5)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":245:5)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":213:8)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":213:27)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":214:5)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":217:5)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":219:5)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":216:9)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":220:9)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":244:9)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":221:13)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":221:17)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":222:13)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":222:58)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":222:35)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":222:42)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":222:47)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":222:57)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":223:13)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":223:43)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":223:17)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":223:27)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":223:33)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":223:34)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":223:40)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":223:39)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":225:13)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":228:13)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":225:22)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":225:18)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":225:25)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":225:29)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":225:27)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":226:13)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":227:29)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":227:17)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":227:24)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":227:25)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":225:34)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":225:33)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":230:13)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":242:13)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":230:17)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":230:25)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":230:27)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":230:30)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":230:38)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":230:40)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":231:13)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":238:13)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":240:13)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":232:32)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":232:17)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":232:24)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":232:28)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":234:17)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":237:17)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":234:25)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":234:21)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":234:28)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":234:32)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":234:30)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":235:17)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":236:34)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":236:41)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":236:42)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":236:21)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":234:37)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":234:36)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":241:17)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":243:13)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":243:18)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":249:1)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":341:1)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":251:5)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":251:9)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":253:13)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":253:12)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":253:5)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":254:5)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":312:5)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":254:8)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":254:27)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":255:5)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":256:9)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":311:9)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":261:13)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":261:17)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":262:13)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":262:32)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":263:13)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":263:36)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":264:13)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":264:45)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":265:13)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":300:21)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":266:13)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":299:13)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":275:40)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":275:49)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":275:62)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":275:33)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":275:17)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":275:73)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":276:17)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":279:17)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":276:21)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":276:38)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":277:17)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":278:21)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":280:24)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":280:25)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":280:34)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":280:37)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":280:51)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":280:17)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":280:52)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":281:38)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":281:17)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":282:53)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":282:43)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":282:17)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":282:63)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":283:42)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":283:36)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":283:17)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":283:50)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":284:17)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":287:17)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":284:29)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":284:62)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":284:63)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":284:72)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":284:86)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":284:21)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":284:92)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":285:17)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":286:21)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":290:35)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":290:50)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":290:63)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":290:81)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":290:84)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":290:30)
#loc447 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":290:17)
#loc448 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":290:85)
#loc449 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":291:17)
#loc450 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":294:17)
#loc451 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":291:21)
#loc452 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":291:35)
#loc453 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":291:48)
#loc454 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":291:51)
#loc455 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":291:65)
#loc456 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":292:17)
#loc457 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":293:21)
#loc458 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":296:43)
#loc459 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":296:29)
#loc460 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":296:17)
#loc461 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":298:29)
#loc462 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":298:24)
#loc463 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":298:17)
#loc464 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":298:40)
#loc465 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":300:20)
#loc466 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":301:13)
#loc467 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":304:13)
#loc468 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":301:17)
#loc469 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":301:34)
#loc470 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":302:13)
#loc471 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":303:30)
#loc472 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":303:17)
#loc473 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":313:5)
#loc474 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":340:5)
#loc475 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":313:8)
#loc476 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":313:27)
#loc477 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":314:5)
#loc478 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":315:9)
#loc479 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":339:9)
#loc480 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":316:13)
#loc481 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":316:17)
#loc482 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":317:13)
#loc483 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":317:58)
#loc484 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":317:35)
#loc485 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":317:42)
#loc486 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":317:47)
#loc487 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":317:57)
#loc488 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":318:13)
#loc489 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":318:43)
#loc490 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":318:17)
#loc491 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":318:27)
#loc492 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":318:33)
#loc493 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":318:34)
#loc494 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":318:40)
#loc495 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":318:39)
#loc496 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":320:13)
#loc497 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":323:13)
#loc498 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":320:22)
#loc499 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":320:18)
#loc500 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":320:25)
#loc501 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":320:29)
#loc502 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":320:27)
#loc503 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":321:13)
#loc504 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":322:29)
#loc505 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":322:17)
#loc506 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":322:24)
#loc507 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":322:25)
#loc508 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":320:34)
#loc509 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":320:33)
#loc510 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":325:13)
#loc511 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":337:13)
#loc512 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":325:17)
#loc513 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":325:25)
#loc514 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":325:27)
#loc515 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":325:30)
#loc516 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":325:38)
#loc517 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":325:40)
#loc518 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":326:13)
#loc519 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":333:13)
#loc520 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":335:13)
#loc521 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":327:32)
#loc522 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":327:17)
#loc523 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":327:24)
#loc524 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":327:28)
#loc525 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":329:17)
#loc526 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":332:17)
#loc527 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":329:25)
#loc528 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":329:21)
#loc529 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":329:28)
#loc530 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":329:32)
#loc531 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":329:30)
#loc532 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":330:17)
#loc533 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":331:34)
#loc534 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":331:41)
#loc535 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":331:42)
#loc536 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":331:21)
#loc537 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":329:37)
#loc538 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":329:36)
#loc539 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":336:27)
#loc540 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":336:17)
#loc541 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":338:13)
#loc542 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":338:18)
#loc543 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":344:1)
#loc544 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":389:1)
#loc545 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":346:5)
#loc546 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":346:9)
#loc547 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":348:13)
#loc548 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":348:12)
#loc549 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":348:5)
#loc550 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":349:5)
#loc551 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":359:5)
#loc552 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":349:8)
#loc553 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":349:27)
#loc554 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":350:5)
#loc555 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":353:5)
#loc556 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":355:5)
#loc557 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":352:19)
#loc558 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":352:9)
#loc559 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":358:16)
#loc560 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":358:9)
#loc561 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":360:5)
#loc562 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":388:5)
#loc563 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":360:8)
#loc564 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":360:27)
#loc565 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":361:5)
#loc566 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":362:9)
#loc567 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":387:9)
#loc568 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":363:13)
#loc569 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":363:17)
#loc570 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":364:13)
#loc571 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":364:58)
#loc572 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":364:35)
#loc573 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":364:42)
#loc574 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":364:47)
#loc575 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":364:57)
#loc576 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":365:13)
#loc577 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":365:43)
#loc578 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":365:17)
#loc579 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":365:27)
#loc580 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":365:33)
#loc581 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":365:34)
#loc582 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":365:40)
#loc583 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":365:39)
#loc584 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":367:13)
#loc585 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":370:13)
#loc586 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":367:22)
#loc587 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":367:18)
#loc588 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":367:25)
#loc589 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":367:29)
#loc590 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":367:27)
#loc591 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":368:13)
#loc592 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":369:29)
#loc593 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":369:17)
#loc594 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":369:24)
#loc595 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":369:25)
#loc596 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":367:34)
#loc597 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":367:33)
#loc598 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":373:13)
#loc599 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":385:13)
#loc600 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":373:17)
#loc601 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":373:25)
#loc602 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":374:13)
#loc603 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":381:13)
#loc604 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":383:13)
#loc605 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":375:32)
#loc606 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":375:17)
#loc607 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":375:24)
#loc608 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":375:28)
#loc609 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":377:17)
#loc610 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":380:17)
#loc611 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":377:25)
#loc612 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":377:21)
#loc613 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":377:28)
#loc614 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":377:32)
#loc615 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":377:30)
#loc616 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":378:17)
#loc617 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":379:34)
#loc618 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":379:41)
#loc619 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":379:42)
#loc620 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":379:21)
#loc621 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":377:37)
#loc622 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":377:36)
#loc623 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":384:27)
#loc624 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":384:17)
#loc625 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":386:13)
#loc626 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":386:18)
#loc627 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":392:1)
#loc628 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":432:1)
#loc629 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":394:5)
#loc630 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":394:9)
#loc631 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":396:13)
#loc632 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":396:12)
#loc633 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":396:5)
#loc634 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":397:5)
#loc635 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":402:5)
#loc636 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":397:8)
#loc637 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":397:27)
#loc638 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":398:5)
#loc639 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":401:16)
#loc640 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":401:9)
#loc641 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":403:5)
#loc642 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":431:5)
#loc643 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":403:8)
#loc644 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":403:27)
#loc645 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":404:5)
#loc646 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":405:9)
#loc647 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":430:9)
#loc648 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":406:13)
#loc649 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":406:17)
#loc650 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":407:13)
#loc651 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":407:58)
#loc652 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":407:35)
#loc653 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":407:42)
#loc654 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":407:47)
#loc655 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":407:57)
#loc656 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":408:13)
#loc657 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":408:43)
#loc658 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":408:17)
#loc659 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":408:27)
#loc660 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":408:33)
#loc661 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":408:34)
#loc662 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":408:40)
#loc663 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":408:39)
#loc664 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":410:13)
#loc665 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":413:13)
#loc666 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":410:22)
#loc667 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":410:18)
#loc668 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":410:25)
#loc669 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":410:29)
#loc670 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":410:27)
#loc671 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":411:13)
#loc672 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":412:29)
#loc673 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":412:17)
#loc674 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":412:24)
#loc675 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":412:25)
#loc676 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":410:34)
#loc677 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":410:33)
#loc678 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":416:13)
#loc679 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":428:13)
#loc680 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":416:17)
#loc681 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":416:25)
#loc682 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":417:13)
#loc683 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":424:13)
#loc684 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":426:13)
#loc685 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":418:32)
#loc686 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":418:17)
#loc687 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":418:24)
#loc688 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":418:28)
#loc689 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":420:17)
#loc690 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":423:17)
#loc691 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":420:25)
#loc692 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":420:21)
#loc693 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":420:28)
#loc694 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":420:32)
#loc695 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":420:30)
#loc696 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":421:17)
#loc697 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":422:34)
#loc698 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":422:41)
#loc699 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":422:42)
#loc700 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":422:21)
#loc701 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":420:37)
#loc702 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":420:36)
#loc703 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":427:27)
#loc704 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":427:17)
#loc705 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":429:13)
#loc706 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":429:18)
#loc707 = loc(fused[#loc1, #loc2])
#loc708 = loc(fused[#loc3, #loc4])
#loc709 = loc(fused[#loc6, #loc7])
#loc710 = loc(fused[#loc8, #loc9])
#loc711 = loc(fused[#loc10, #loc11])
#loc712 = loc(fused[#loc12, #loc13])
#loc713 = loc(fused[#loc14, #loc15])
#loc714 = loc(fused[#loc16, #loc17])
#loc715 = loc(fused[#loc18, #loc19])
#loc716 = loc(fused[#loc20, #loc21])
#loc717 = loc(fused[#loc22, #loc23])
#loc718 = loc(fused[#loc25, #loc26])
#loc719 = loc(fused[#loc27, #loc28])
#loc720 = loc(fused[#loc29, #loc30])
#loc721 = loc(fused[#loc33, #loc31])
#loc722 = loc(fused[#loc34, #loc35])
#loc723 = loc(fused[#loc36, #loc37])
#loc724 = loc(fused[#loc38, #loc35])
#loc725 = loc(fused[#loc39, #loc40])
#loc726 = loc(fused[#loc41, #loc42])
#loc727 = loc(fused[#loc43, #loc44])
#loc728 = loc(fused[#loc45, #loc46])
#loc729 = loc(fused[#loc47, #loc48])
#loc730 = loc(fused[#loc49, #loc50])
#loc731 = loc(fused[#loc51, #loc52])
#loc732 = loc(fused[#loc57, #loc58])
#loc733 = loc(fused[#loc59, #loc60])
#loc734 = loc(fused[#loc61, #loc62])
#loc735 = loc(fused[#loc63, #loc60])
#loc736 = loc(fused[#loc65, #loc66])
#loc737 = loc(fused[#loc68, #loc69])
#loc738 = loc(fused[#loc70, #loc71])
#loc739 = loc(fused[#loc74, #loc72])
#loc740 = loc(fused[#loc78, #loc79])
#loc741 = loc(fused[#loc83, #loc84])
#loc742 = loc(fused[#loc85, #loc86])
#loc743 = loc(fused[#loc88, #loc89])
#loc744 = loc(fused[#loc90, #loc91])
#loc745 = loc(fused[#loc92, #loc93])
#loc746 = loc(fused[#loc94, #loc86])
#loc747 = loc(fused[#loc98, #loc99])
#loc748 = loc(fused[#loc102, #loc103])
#loc749 = loc(fused[#loc104, #loc105])
#loc750 = loc(fused[#loc106, #loc107])
#loc751 = loc(fused[#loc109, #loc110])
#loc752 = loc(fused[#loc111, #loc105])
#loc753 = loc(fused[#loc115, #loc113])
#loc754 = loc(fused[#loc118, #loc119])
#loc755 = loc(fused[#loc121, #loc122])
#loc756 = loc(fused[#loc123, #loc124])
#loc757 = loc(fused[#loc125, #loc122])
#loc758 = loc(fused[#loc128, #loc129])
#loc759 = loc(fused[#loc130, #loc131])
#loc760 = loc(fused[#loc132, #loc129])
#loc761 = loc(fused[#loc133, #loc134])
#loc762 = loc(fused[#loc135, #loc136])
#loc763 = loc(fused[#loc137, #loc138])
#loc764 = loc(fused[#loc141, #loc142])
#loc765 = loc(fused[#loc140, #loc142])
#loc766 = loc(fused[#loc139, #loc138])
#loc767 = loc(fused[#loc143, #loc144])
#loc768 = loc(fused[#loc145, #loc146])
#loc769 = loc(fused[#loc147, #loc144])
#loc770 = loc(fused[#loc151, #loc152])
#loc771 = loc(fused[#loc154, #loc153])
#loc772 = loc(fused[#loc155, #loc156])
#loc773 = loc(fused[#loc158, #loc152])
#loc774 = loc(fused[#loc160, #loc159])
#loc775 = loc(fused[#loc164, #loc163])
#loc776 = loc(fused[#loc165, #loc166])
#loc777 = loc(fused[#loc167, #loc168])
#loc778 = loc(fused[#loc169, #loc170, #loc171, #loc166])
#loc779 = loc(fused[#loc173, #loc172])
#loc780 = loc(fused[#loc176, #loc177])
#loc781 = loc(fused[#loc179, #loc178])
#loc782 = loc(fused[#loc180, #loc181])
#loc783 = loc(fused[#loc183, #loc177])
#loc784 = loc(fused[#loc189, #loc188])
#loc785 = loc(fused[#loc193, #loc194])
#loc786 = loc(fused[#loc195, #loc196])
#loc787 = loc(fused[#loc197, #loc198])
#loc788 = loc(fused[#loc199, #loc200])
#loc789 = loc(fused[#loc201, #loc202])
#loc790 = loc(fused[#loc205, #loc206])
#loc791 = loc(fused[#loc207, #loc208])
#loc792 = loc(fused[#loc211, #loc209])
#loc793 = loc(fused[#loc212, #loc213])
#loc794 = loc(fused[#loc214, #loc215])
#loc795 = loc(fused[#loc216, #loc213])
#loc796 = loc(fused[#loc217, #loc218])
#loc797 = loc(fused[#loc219, #loc220])
#loc798 = loc(fused[#loc221, #loc222])
#loc799 = loc(fused[#loc223, #loc224])
#loc800 = loc(fused[#loc225, #loc226])
#loc801 = loc(fused[#loc227, #loc228])
#loc802 = loc(fused[#loc229, #loc230])
#loc803 = loc(fused[#loc235, #loc236])
#loc804 = loc(fused[#loc237, #loc238])
#loc805 = loc(fused[#loc239, #loc240])
#loc806 = loc(fused[#loc241, #loc238])
#loc807 = loc(fused[#loc243, #loc244])
#loc808 = loc(fused[#loc246, #loc247])
#loc809 = loc(fused[#loc248, #loc249])
#loc810 = loc(fused[#loc251, #loc250])
#loc811 = loc(fused[#loc254, #loc255])
#loc812 = loc(fused[#loc258, #loc259])
#loc813 = loc(fused[#loc260, #loc261])
#loc814 = loc(fused[#loc263, #loc264])
#loc815 = loc(fused[#loc265, #loc266])
#loc816 = loc(fused[#loc267, #loc268])
#loc817 = loc(fused[#loc269, #loc261])
#loc818 = loc(fused[#loc273, #loc274])
#loc819 = loc(fused[#loc277, #loc278])
#loc820 = loc(fused[#loc279, #loc280])
#loc821 = loc(fused[#loc281, #loc282])
#loc822 = loc(fused[#loc284, #loc285])
#loc823 = loc(fused[#loc286, #loc280])
#loc824 = loc(fused[#loc290, #loc288])
#loc825 = loc(fused[#loc293, #loc294])
#loc826 = loc(fused[#loc296, #loc297])
#loc827 = loc(fused[#loc298, #loc299])
#loc828 = loc(fused[#loc300, #loc297])
#loc829 = loc(fused[#loc303, #loc304])
#loc830 = loc(fused[#loc305, #loc306])
#loc831 = loc(fused[#loc307, #loc308, #loc309, #loc304])
#loc832 = loc(fused[#loc311, #loc312])
#loc833 = loc(fused[#loc313, #loc314])
#loc834 = loc(fused[#loc315, #loc316])
#loc835 = loc(fused[#loc319, #loc320])
#loc836 = loc(fused[#loc318, #loc320])
#loc837 = loc(fused[#loc317, #loc316])
#loc838 = loc(fused[#loc321, #loc322])
#loc839 = loc(fused[#loc323, #loc324])
#loc840 = loc(fused[#loc325, #loc322])
#loc841 = loc(fused[#loc329, #loc330])
#loc842 = loc(fused[#loc332, #loc331])
#loc843 = loc(fused[#loc333, #loc334])
#loc844 = loc(fused[#loc336, #loc330])
#loc845 = loc(fused[#loc338, #loc337])
#loc846 = loc(fused[#loc342, #loc341])
#loc847 = loc(fused[#loc343, #loc344])
#loc848 = loc(fused[#loc345, #loc346])
#loc849 = loc(fused[#loc348, #loc350])
#loc850 = loc(fused[#loc351, #loc352, #loc353, #loc344])
#loc851 = loc(fused[#loc355, #loc354])
#loc852 = loc(fused[#loc358, #loc359])
#loc853 = loc(fused[#loc361, #loc360])
#loc854 = loc(fused[#loc362, #loc363])
#loc855 = loc(fused[#loc365, #loc359])
#loc856 = loc(fused[#loc371, #loc370])
#loc857 = loc(fused[#loc375, #loc376])
#loc858 = loc(fused[#loc377, #loc378])
#loc859 = loc(fused[#loc381, #loc379])
#loc860 = loc(fused[#loc382, #loc383])
#loc861 = loc(fused[#loc384, #loc385])
#loc862 = loc(fused[#loc386, #loc383])
#loc863 = loc(fused[#loc387, #loc388])
#loc864 = loc(fused[#loc389, #loc390])
#loc865 = loc(fused[#loc391, #loc392])
#loc866 = loc(fused[#loc393, #loc394])
#loc867 = loc(fused[#loc395, #loc396])
#loc868 = loc(fused[#loc397, #loc398])
#loc869 = loc(fused[#loc399, #loc400])
#loc870 = loc(fused[#loc405, #loc406])
#loc871 = loc(fused[#loc407, #loc408])
#loc872 = loc(fused[#loc409, #loc410])
#loc873 = loc(fused[#loc411, #loc408])
#loc874 = loc(fused[#loc413, #loc414])
#loc875 = loc(fused[#loc416, #loc417])
#loc876 = loc(fused[#loc418, #loc419])
#loc877 = loc(fused[#loc421, #loc420])
#loc878 = loc(fused[#loc424, #loc425])
#loc879 = loc(fused[#loc428, #loc429])
#loc880 = loc(fused[#loc430, #loc431])
#loc881 = loc(fused[#loc433, #loc434])
#loc882 = loc(fused[#loc435, #loc436])
#loc883 = loc(fused[#loc437, #loc438])
#loc884 = loc(fused[#loc439, #loc431])
#loc885 = loc(fused[#loc443, #loc444])
#loc886 = loc(fused[#loc447, #loc448])
#loc887 = loc(fused[#loc449, #loc450])
#loc888 = loc(fused[#loc451, #loc452])
#loc889 = loc(fused[#loc454, #loc455])
#loc890 = loc(fused[#loc456, #loc450])
#loc891 = loc(fused[#loc460, #loc458])
#loc892 = loc(fused[#loc463, #loc464])
#loc893 = loc(fused[#loc466, #loc467])
#loc894 = loc(fused[#loc468, #loc469])
#loc895 = loc(fused[#loc470, #loc467])
#loc896 = loc(fused[#loc473, #loc474])
#loc897 = loc(fused[#loc475, #loc476])
#loc898 = loc(fused[#loc477, #loc474])
#loc899 = loc(fused[#loc478, #loc479])
#loc900 = loc(fused[#loc480, #loc481])
#loc901 = loc(fused[#loc482, #loc483])
#loc902 = loc(fused[#loc486, #loc487])
#loc903 = loc(fused[#loc485, #loc487])
#loc904 = loc(fused[#loc484, #loc483])
#loc905 = loc(fused[#loc488, #loc489])
#loc906 = loc(fused[#loc490, #loc491])
#loc907 = loc(fused[#loc492, #loc489])
#loc908 = loc(fused[#loc496, #loc497])
#loc909 = loc(fused[#loc499, #loc498])
#loc910 = loc(fused[#loc500, #loc501])
#loc911 = loc(fused[#loc503, #loc497])
#loc912 = loc(fused[#loc505, #loc504])
#loc913 = loc(fused[#loc509, #loc508])
#loc914 = loc(fused[#loc510, #loc511])
#loc915 = loc(fused[#loc512, #loc513])
#loc916 = loc(fused[#loc515, #loc517])
#loc917 = loc(fused[#loc518, #loc519, #loc520, #loc511])
#loc918 = loc(fused[#loc522, #loc521])
#loc919 = loc(fused[#loc525, #loc526])
#loc920 = loc(fused[#loc528, #loc527])
#loc921 = loc(fused[#loc529, #loc530])
#loc922 = loc(fused[#loc532, #loc526])
#loc923 = loc(fused[#loc538, #loc537])
#loc924 = loc(fused[#loc543, #loc544])
#loc925 = loc(fused[#loc545, #loc546])
#loc926 = loc(fused[#loc549, #loc547])
#loc927 = loc(fused[#loc550, #loc551])
#loc928 = loc(fused[#loc552, #loc553])
#loc929 = loc(fused[#loc554, #loc555, #loc556, #loc551])
#loc930 = loc(fused[#loc560, #loc559])
#loc931 = loc(fused[#loc561, #loc562])
#loc932 = loc(fused[#loc563, #loc564])
#loc933 = loc(fused[#loc565, #loc562])
#loc934 = loc(fused[#loc566, #loc567])
#loc935 = loc(fused[#loc568, #loc569])
#loc936 = loc(fused[#loc570, #loc571])
#loc937 = loc(fused[#loc574, #loc575])
#loc938 = loc(fused[#loc573, #loc575])
#loc939 = loc(fused[#loc572, #loc571])
#loc940 = loc(fused[#loc576, #loc577])
#loc941 = loc(fused[#loc578, #loc579])
#loc942 = loc(fused[#loc580, #loc577])
#loc943 = loc(fused[#loc584, #loc585])
#loc944 = loc(fused[#loc587, #loc586])
#loc945 = loc(fused[#loc588, #loc589])
#loc946 = loc(fused[#loc591, #loc585])
#loc947 = loc(fused[#loc593, #loc592])
#loc948 = loc(fused[#loc597, #loc596])
#loc949 = loc(fused[#loc598, #loc599])
#loc950 = loc(fused[#loc600, #loc601])
#loc951 = loc(fused[#loc602, #loc603, #loc604, #loc599])
#loc952 = loc(fused[#loc606, #loc605])
#loc953 = loc(fused[#loc609, #loc610])
#loc954 = loc(fused[#loc612, #loc611])
#loc955 = loc(fused[#loc613, #loc614])
#loc956 = loc(fused[#loc616, #loc610])
#loc957 = loc(fused[#loc622, #loc621])
#loc958 = loc(fused[#loc627, #loc628])
#loc959 = loc(fused[#loc629, #loc630])
#loc960 = loc(fused[#loc633, #loc631])
#loc961 = loc(fused[#loc634, #loc635])
#loc962 = loc(fused[#loc636, #loc637])
#loc963 = loc(fused[#loc638, #loc635])
#loc964 = loc(fused[#loc640, #loc639])
#loc965 = loc(fused[#loc641, #loc642])
#loc966 = loc(fused[#loc643, #loc644])
#loc967 = loc(fused[#loc645, #loc642])
#loc968 = loc(fused[#loc646, #loc647])
#loc969 = loc(fused[#loc648, #loc649])
#loc970 = loc(fused[#loc650, #loc651])
#loc971 = loc(fused[#loc654, #loc655])
#loc972 = loc(fused[#loc653, #loc655])
#loc973 = loc(fused[#loc652, #loc651])
#loc974 = loc(fused[#loc656, #loc657])
#loc975 = loc(fused[#loc658, #loc659])
#loc976 = loc(fused[#loc660, #loc657])
#loc977 = loc(fused[#loc664, #loc665])
#loc978 = loc(fused[#loc667, #loc666])
#loc979 = loc(fused[#loc668, #loc669])
#loc980 = loc(fused[#loc671, #loc665])
#loc981 = loc(fused[#loc673, #loc672])
#loc982 = loc(fused[#loc677, #loc676])
#loc983 = loc(fused[#loc678, #loc679])
#loc984 = loc(fused[#loc680, #loc681])
#loc985 = loc(fused[#loc682, #loc683, #loc684, #loc679])
#loc986 = loc(fused[#loc686, #loc685])
#loc987 = loc(fused[#loc689, #loc690])
#loc988 = loc(fused[#loc692, #loc691])
#loc989 = loc(fused[#loc693, #loc694])
#loc990 = loc(fused[#loc696, #loc690])
#loc991 = loc(fused[#loc702, #loc701])
