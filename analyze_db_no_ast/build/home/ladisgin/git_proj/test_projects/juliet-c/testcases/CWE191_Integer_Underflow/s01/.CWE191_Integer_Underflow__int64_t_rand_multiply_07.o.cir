!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_rand_multiply_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc208)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc209)
  cir.func private  @printLongLongLine(!s64i) loc(#loc210)
  cir.func no_proto  @CWE191_Integer_Underflow__int64_t_rand_multiply_07_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc212)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc213)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc208)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc16)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc215)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc17)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc19)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc19)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc19)
          %15 = cir.const #cir.int<60> : !s32i loc(#loc19)
          %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc19)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc19)
          %19 = cir.const #cir.int<45> : !s32i loc(#loc19)
          %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc19)
          %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc19)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc19)
          %24 = cir.const #cir.int<30> : !s32i loc(#loc19)
          %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc19)
          %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc19)
          %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc19)
          %29 = cir.const #cir.int<15> : !s32i loc(#loc19)
          %30 = cir.shift(left, %28 : !u64i, %29 : !s32i) -> !u64i loc(#loc19)
          %31 = cir.binop(xor, %26, %30) : !u64i loc(#loc19)
          %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc19)
          %34 = cir.binop(xor, %31, %33) : !u64i loc(#loc19)
          cir.yield %34 : !u64i loc(#loc19)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc19)
          %15 = cir.const #cir.int<60> : !s32i loc(#loc19)
          %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc19)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc19)
          %19 = cir.const #cir.int<45> : !s32i loc(#loc19)
          %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc19)
          %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc19)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc19)
          %24 = cir.const #cir.int<30> : !s32i loc(#loc19)
          %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc19)
          %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc19)
          %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc19)
          %29 = cir.const #cir.int<15> : !s32i loc(#loc19)
          %30 = cir.shift(left, %28 : !u64i, %29 : !s32i) -> !u64i loc(#loc19)
          %31 = cir.binop(xor, %26, %30) : !u64i loc(#loc19)
          %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc19)
          %34 = cir.binop(xor, %31, %33) : !u64i loc(#loc19)
          %35 = cir.unary(minus, %34) : !u64i, !u64i loc(#loc19)
          %36 = cir.const #cir.int<1> : !s32i loc(#loc19)
          %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc19)
          %38 = cir.binop(sub, %35, %37) : !u64i loc(#loc19)
          cir.yield %38 : !u64i loc(#loc19)
        }) : (!cir.bool) -> !u64i loc(#loc19)
        %12 = cir.cast(integral, %11 : !u64i), !s64i loc(#loc19)
        cir.store %12, %0 : !s64i, !cir.ptr<!s64i> loc(#loc217)
      } loc(#loc216)
    } loc(#loc214)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc208)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc23)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc24)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc219)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc25)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc29)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc30)
          %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc30)
          %10 = cir.cmp(lt, %7, %9) : !s64i, !s32i loc(#loc222)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc31)
          cir.if %11 {
            %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc224)
            %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc35)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc34)
            %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc34)
            %16 = cir.binop(mul, %13, %15) nsw : !s64i loc(#loc35)
            cir.store %16, %12 : !s64i, !cir.ptr<!s64i> loc(#loc224)
            %17 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc36)
            cir.call @printLongLongLine(%17) : (!s64i) -> () loc(#loc37)
          } loc(#loc223)
        } loc(#loc221)
      } loc(#loc220)
    } loc(#loc218)
    cir.return loc(#loc8)
  } loc(#loc211)
  cir.func no_proto  @CWE191_Integer_Underflow__int64_t_rand_multiply_07_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc226)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc227)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc228)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc229)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc39)
  } loc(#loc225)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc230)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc232)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc56)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc233)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc208)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc60)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc61)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc235)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc62)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc64)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc64)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc64)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc64)
          %15 = cir.const #cir.int<60> : !s32i loc(#loc64)
          %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc64)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc64)
          %19 = cir.const #cir.int<45> : !s32i loc(#loc64)
          %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc64)
          %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc64)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc64)
          %24 = cir.const #cir.int<30> : !s32i loc(#loc64)
          %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc64)
          %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc64)
          %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc64)
          %29 = cir.const #cir.int<15> : !s32i loc(#loc64)
          %30 = cir.shift(left, %28 : !u64i, %29 : !s32i) -> !u64i loc(#loc64)
          %31 = cir.binop(xor, %26, %30) : !u64i loc(#loc64)
          %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc64)
          %34 = cir.binop(xor, %31, %33) : !u64i loc(#loc64)
          cir.yield %34 : !u64i loc(#loc64)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc64)
          %15 = cir.const #cir.int<60> : !s32i loc(#loc64)
          %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc64)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc64)
          %19 = cir.const #cir.int<45> : !s32i loc(#loc64)
          %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc64)
          %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc64)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc64)
          %24 = cir.const #cir.int<30> : !s32i loc(#loc64)
          %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc64)
          %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc64)
          %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc64)
          %29 = cir.const #cir.int<15> : !s32i loc(#loc64)
          %30 = cir.shift(left, %28 : !u64i, %29 : !s32i) -> !u64i loc(#loc64)
          %31 = cir.binop(xor, %26, %30) : !u64i loc(#loc64)
          %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc64)
          %34 = cir.binop(xor, %31, %33) : !u64i loc(#loc64)
          %35 = cir.unary(minus, %34) : !u64i, !u64i loc(#loc64)
          %36 = cir.const #cir.int<1> : !s32i loc(#loc64)
          %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc64)
          %38 = cir.binop(sub, %35, %37) : !u64i loc(#loc64)
          cir.yield %38 : !u64i loc(#loc64)
        }) : (!cir.bool) -> !u64i loc(#loc64)
        %12 = cir.cast(integral, %11 : !u64i), !s64i loc(#loc64)
        cir.store %12, %0 : !s64i, !cir.ptr<!s64i> loc(#loc237)
      } loc(#loc236)
    } loc(#loc234)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc208)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc68)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc69)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc239)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc70)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc74)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc77)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc78)
          %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc78)
          %10 = cir.cmp(lt, %7, %9) : !s64i, !s32i loc(#loc242)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc79)
          cir.if %11 {
            cir.scope {
              %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc83)
              %13 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc84)
              %14 = cir.unary(minus, %13) : !s64i, !s64i loc(#loc84)
              %15 = cir.const #cir.int<1> : !s64i loc(#loc84)
              %16 = cir.binop(sub, %14, %15) nsw : !s64i loc(#loc84)
              %17 = cir.const #cir.int<2> : !s32i loc(#loc85)
              %18 = cir.cast(integral, %17 : !s32i), !s64i loc(#loc85)
              %19 = cir.binop(div, %16, %18) : !s64i loc(#loc245)
              %20 = cir.cmp(gt, %12, %19) : !s64i, !s32i loc(#loc246)
              %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc87)
              cir.if %21 {
                %22 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc248)
                %23 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc93)
                %24 = cir.const #cir.int<2> : !s32i loc(#loc92)
                %25 = cir.cast(integral, %24 : !s32i), !s64i loc(#loc92)
                %26 = cir.binop(mul, %23, %25) nsw : !s64i loc(#loc93)
                cir.store %26, %22 : !s64i, !cir.ptr<!s64i> loc(#loc248)
                %27 = cir.load %22 : !cir.ptr<!s64i>, !s64i loc(#loc94)
                cir.call @printLongLongLine(%27) : (!s64i) -> () loc(#loc95)
              } else {
                %22 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc51)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc51)
                cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc96)
              } loc(#loc247)
            } loc(#loc244)
          } loc(#loc243)
        } loc(#loc241)
      } loc(#loc240)
    } loc(#loc238)
    cir.return loc(#loc53)
  } loc(#loc231)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc250)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc101)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc251)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc208)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc105)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc106)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc253)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc107)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc109)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc109)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc109)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc109)
          %15 = cir.const #cir.int<60> : !s32i loc(#loc109)
          %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc109)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc109)
          %19 = cir.const #cir.int<45> : !s32i loc(#loc109)
          %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc109)
          %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc109)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc109)
          %24 = cir.const #cir.int<30> : !s32i loc(#loc109)
          %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc109)
          %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc109)
          %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
          %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc109)
          %29 = cir.const #cir.int<15> : !s32i loc(#loc109)
          %30 = cir.shift(left, %28 : !u64i, %29 : !s32i) -> !u64i loc(#loc109)
          %31 = cir.binop(xor, %26, %30) : !u64i loc(#loc109)
          %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc109)
          %34 = cir.binop(xor, %31, %33) : !u64i loc(#loc109)
          cir.yield %34 : !u64i loc(#loc109)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc109)
          %15 = cir.const #cir.int<60> : !s32i loc(#loc109)
          %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc109)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc109)
          %19 = cir.const #cir.int<45> : !s32i loc(#loc109)
          %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc109)
          %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc109)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc109)
          %24 = cir.const #cir.int<30> : !s32i loc(#loc109)
          %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc109)
          %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc109)
          %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
          %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc109)
          %29 = cir.const #cir.int<15> : !s32i loc(#loc109)
          %30 = cir.shift(left, %28 : !u64i, %29 : !s32i) -> !u64i loc(#loc109)
          %31 = cir.binop(xor, %26, %30) : !u64i loc(#loc109)
          %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc109)
          %34 = cir.binop(xor, %31, %33) : !u64i loc(#loc109)
          %35 = cir.unary(minus, %34) : !u64i, !u64i loc(#loc109)
          %36 = cir.const #cir.int<1> : !s32i loc(#loc109)
          %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc109)
          %38 = cir.binop(sub, %35, %37) : !u64i loc(#loc109)
          cir.yield %38 : !u64i loc(#loc109)
        }) : (!cir.bool) -> !u64i loc(#loc109)
        %12 = cir.cast(integral, %11 : !u64i), !s64i loc(#loc109)
        cir.store %12, %0 : !s64i, !cir.ptr<!s64i> loc(#loc255)
      } loc(#loc254)
    } loc(#loc252)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc208)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc113)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc114)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc257)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc115)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc119)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc120)
          %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc120)
          %10 = cir.cmp(lt, %7, %9) : !s64i, !s32i loc(#loc260)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc121)
          cir.if %11 {
            cir.scope {
              %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc125)
              %13 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc126)
              %14 = cir.unary(minus, %13) : !s64i, !s64i loc(#loc126)
              %15 = cir.const #cir.int<1> : !s64i loc(#loc126)
              %16 = cir.binop(sub, %14, %15) nsw : !s64i loc(#loc126)
              %17 = cir.const #cir.int<2> : !s32i loc(#loc127)
              %18 = cir.cast(integral, %17 : !s32i), !s64i loc(#loc127)
              %19 = cir.binop(div, %16, %18) : !s64i loc(#loc263)
              %20 = cir.cmp(gt, %12, %19) : !s64i, !s32i loc(#loc264)
              %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc129)
              cir.if %21 {
                %22 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc266)
                %23 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc135)
                %24 = cir.const #cir.int<2> : !s32i loc(#loc134)
                %25 = cir.cast(integral, %24 : !s32i), !s64i loc(#loc134)
                %26 = cir.binop(mul, %23, %25) nsw : !s64i loc(#loc135)
                cir.store %26, %22 : !s64i, !cir.ptr<!s64i> loc(#loc266)
                %27 = cir.load %22 : !cir.ptr<!s64i>, !s64i loc(#loc136)
                cir.call @printLongLongLine(%27) : (!s64i) -> () loc(#loc137)
              } else {
                %22 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc138)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc138)
                cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc139)
              } loc(#loc265)
            } loc(#loc262)
          } loc(#loc261)
        } loc(#loc259)
      } loc(#loc258)
    } loc(#loc256)
    cir.return loc(#loc98)
  } loc(#loc249)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc268)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc144)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc269)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc208)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc148)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc149)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc271)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc150)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc154)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc154)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc155)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc156)
        %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc157)
        %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc157)
        cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc273)
      } loc(#loc272)
    } loc(#loc270)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc208)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc161)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc162)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc275)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc163)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc167)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc168)
          %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc168)
          %10 = cir.cmp(lt, %7, %9) : !s64i, !s32i loc(#loc278)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc169)
          cir.if %11 {
            %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc280)
            %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc173)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc172)
            %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc172)
            %16 = cir.binop(mul, %13, %15) nsw : !s64i loc(#loc173)
            cir.store %16, %12 : !s64i, !cir.ptr<!s64i> loc(#loc280)
            %17 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc174)
            cir.call @printLongLongLine(%17) : (!s64i) -> () loc(#loc175)
          } loc(#loc279)
        } loc(#loc277)
      } loc(#loc276)
    } loc(#loc274)
    cir.return loc(#loc141)
  } loc(#loc267)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc282)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc180)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc283)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc208)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc184)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc185)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc285)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc186)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc188)
        %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc189)
        %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc189)
        cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc287)
      } loc(#loc286)
    } loc(#loc284)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc208)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc193)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc194)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc289)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc195)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc199)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc200)
          %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc200)
          %10 = cir.cmp(lt, %7, %9) : !s64i, !s32i loc(#loc292)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc201)
          cir.if %11 {
            %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc294)
            %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc205)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc204)
            %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc204)
            %16 = cir.binop(mul, %13, %15) nsw : !s64i loc(#loc205)
            cir.store %16, %12 : !s64i, !cir.ptr<!s64i> loc(#loc294)
            %17 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc206)
            cir.call @printLongLongLine(%17) : (!s64i) -> () loc(#loc207)
          } loc(#loc293)
        } loc(#loc291)
      } loc(#loc290)
    } loc(#loc288)
    cir.return loc(#loc177)
  } loc(#loc281)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":0:0)
#loc1 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":23:1)
#loc2 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":23:25)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":27:1)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":45:1)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":29:5)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":29:13)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":30:12)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":30:5)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":31:5)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":35:5)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":31:8)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":31:20)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":31:18)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":32:5)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":34:25)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":34:9)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":36:5)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":44:5)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":36:8)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":36:20)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":36:18)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":37:5)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":38:9)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":43:9)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":38:12)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":38:19)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":38:17)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":39:9)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":41:13)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":41:37)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":41:30)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":42:31)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":42:13)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":159:1)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":165:1)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":161:5)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":161:14)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":162:5)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":162:14)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":163:5)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":163:14)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":164:5)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":164:14)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":64:19)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":78:27)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":52:1)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":82:1)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":54:5)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":54:13)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":55:12)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":55:5)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":56:5)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":60:5)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":56:8)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":56:20)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":56:18)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":57:5)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":59:25)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":59:9)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":61:5)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":81:5)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":61:8)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":61:20)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":61:18)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":62:5)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":65:5)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":67:5)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":64:9)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":68:9)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":80:9)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":68:12)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":68:19)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":68:17)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":69:9)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":71:13)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":79:13)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":71:17)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":71:25)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":71:35)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":71:36)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":71:22)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":72:13)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":75:13)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":77:13)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":73:17)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":73:41)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":73:34)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":74:35)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":74:17)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":78:17)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":85:1)
#loc98 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":110:1)
#loc99 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":87:5)
#loc100 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":87:13)
#loc101 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":88:12)
#loc102 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":88:5)
#loc103 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":89:5)
#loc104 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":93:5)
#loc105 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":89:8)
#loc106 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":89:20)
#loc107 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":89:18)
#loc108 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":90:5)
#loc109 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":92:25)
#loc110 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":92:9)
#loc111 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":94:5)
#loc112 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":109:5)
#loc113 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":94:8)
#loc114 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":94:20)
#loc115 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":94:18)
#loc116 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":95:5)
#loc117 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":96:9)
#loc118 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":108:9)
#loc119 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":96:12)
#loc120 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":96:19)
#loc121 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":96:17)
#loc122 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":97:9)
#loc123 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":99:13)
#loc124 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":107:13)
#loc125 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":99:17)
#loc126 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":99:25)
#loc127 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":99:35)
#loc128 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":99:36)
#loc129 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":99:22)
#loc130 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":100:13)
#loc131 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":103:13)
#loc132 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":105:13)
#loc133 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":101:17)
#loc134 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":101:41)
#loc135 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":101:34)
#loc136 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":102:35)
#loc137 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":102:17)
#loc138 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":106:27)
#loc139 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":106:17)
#loc140 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":113:1)
#loc141 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":136:1)
#loc142 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":115:5)
#loc143 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":115:13)
#loc144 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":116:12)
#loc145 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":116:5)
#loc146 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":117:5)
#loc147 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":126:5)
#loc148 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":117:8)
#loc149 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":117:20)
#loc150 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":117:18)
#loc151 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":118:5)
#loc152 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":121:5)
#loc153 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":123:5)
#loc154 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":120:19)
#loc155 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":120:9)
#loc156 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":125:17)
#loc157 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":125:16)
#loc158 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":125:9)
#loc159 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":127:5)
#loc160 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":135:5)
#loc161 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":127:8)
#loc162 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":127:20)
#loc163 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":127:18)
#loc164 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":128:5)
#loc165 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":129:9)
#loc166 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":134:9)
#loc167 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":129:12)
#loc168 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":129:19)
#loc169 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":129:17)
#loc170 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":130:9)
#loc171 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":132:13)
#loc172 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":132:37)
#loc173 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":132:30)
#loc174 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":133:31)
#loc175 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":133:13)
#loc176 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":139:1)
#loc177 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":157:1)
#loc178 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":141:5)
#loc179 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":141:13)
#loc180 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":142:12)
#loc181 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":142:5)
#loc182 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":143:5)
#loc183 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":147:5)
#loc184 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":143:8)
#loc185 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":143:20)
#loc186 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":143:18)
#loc187 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":144:5)
#loc188 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":146:17)
#loc189 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":146:16)
#loc190 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":146:9)
#loc191 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":148:5)
#loc192 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":156:5)
#loc193 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":148:8)
#loc194 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":148:20)
#loc195 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":148:18)
#loc196 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":149:5)
#loc197 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":150:9)
#loc198 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":155:9)
#loc199 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":150:12)
#loc200 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":150:19)
#loc201 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":150:17)
#loc202 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":151:9)
#loc203 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":153:13)
#loc204 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":153:37)
#loc205 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":153:30)
#loc206 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":154:31)
#loc207 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_07.c":154:13)
#loc208 = loc(fused[#loc1, #loc2])
#loc209 = loc(fused[#loc3, #loc4])
#loc210 = loc(fused[#loc5, #loc6])
#loc211 = loc(fused[#loc7, #loc8])
#loc212 = loc(fused[#loc9, #loc10])
#loc213 = loc(fused[#loc12, #loc11])
#loc214 = loc(fused[#loc13, #loc14])
#loc215 = loc(fused[#loc15, #loc16])
#loc216 = loc(fused[#loc18, #loc14])
#loc217 = loc(fused[#loc20, #loc19])
#loc218 = loc(fused[#loc21, #loc22])
#loc219 = loc(fused[#loc23, #loc24])
#loc220 = loc(fused[#loc26, #loc22])
#loc221 = loc(fused[#loc27, #loc28])
#loc222 = loc(fused[#loc29, #loc30])
#loc223 = loc(fused[#loc32, #loc28])
#loc224 = loc(fused[#loc33, #loc34])
#loc225 = loc(fused[#loc38, #loc39])
#loc226 = loc(fused[#loc40, #loc41])
#loc227 = loc(fused[#loc42, #loc43])
#loc228 = loc(fused[#loc44, #loc45])
#loc229 = loc(fused[#loc46, #loc47])
#loc230 = loc(fused[#loc48, #loc49])
#loc231 = loc(fused[#loc52, #loc53])
#loc232 = loc(fused[#loc54, #loc55])
#loc233 = loc(fused[#loc57, #loc56])
#loc234 = loc(fused[#loc58, #loc59])
#loc235 = loc(fused[#loc60, #loc61])
#loc236 = loc(fused[#loc63, #loc59])
#loc237 = loc(fused[#loc65, #loc64])
#loc238 = loc(fused[#loc66, #loc67])
#loc239 = loc(fused[#loc68, #loc69])
#loc240 = loc(fused[#loc71, #loc72, #loc73, #loc67])
#loc241 = loc(fused[#loc75, #loc76])
#loc242 = loc(fused[#loc77, #loc78])
#loc243 = loc(fused[#loc80, #loc76])
#loc244 = loc(fused[#loc81, #loc82])
#loc245 = loc(fused[#loc84, #loc85])
#loc246 = loc(fused[#loc83, #loc86])
#loc247 = loc(fused[#loc88, #loc89, #loc90, #loc82])
#loc248 = loc(fused[#loc91, #loc92])
#loc249 = loc(fused[#loc97, #loc98])
#loc250 = loc(fused[#loc99, #loc100])
#loc251 = loc(fused[#loc102, #loc101])
#loc252 = loc(fused[#loc103, #loc104])
#loc253 = loc(fused[#loc105, #loc106])
#loc254 = loc(fused[#loc108, #loc104])
#loc255 = loc(fused[#loc110, #loc109])
#loc256 = loc(fused[#loc111, #loc112])
#loc257 = loc(fused[#loc113, #loc114])
#loc258 = loc(fused[#loc116, #loc112])
#loc259 = loc(fused[#loc117, #loc118])
#loc260 = loc(fused[#loc119, #loc120])
#loc261 = loc(fused[#loc122, #loc118])
#loc262 = loc(fused[#loc123, #loc124])
#loc263 = loc(fused[#loc126, #loc127])
#loc264 = loc(fused[#loc125, #loc128])
#loc265 = loc(fused[#loc130, #loc131, #loc132, #loc124])
#loc266 = loc(fused[#loc133, #loc134])
#loc267 = loc(fused[#loc140, #loc141])
#loc268 = loc(fused[#loc142, #loc143])
#loc269 = loc(fused[#loc145, #loc144])
#loc270 = loc(fused[#loc146, #loc147])
#loc271 = loc(fused[#loc148, #loc149])
#loc272 = loc(fused[#loc151, #loc152, #loc153, #loc147])
#loc273 = loc(fused[#loc158, #loc156])
#loc274 = loc(fused[#loc159, #loc160])
#loc275 = loc(fused[#loc161, #loc162])
#loc276 = loc(fused[#loc164, #loc160])
#loc277 = loc(fused[#loc165, #loc166])
#loc278 = loc(fused[#loc167, #loc168])
#loc279 = loc(fused[#loc170, #loc166])
#loc280 = loc(fused[#loc171, #loc172])
#loc281 = loc(fused[#loc176, #loc177])
#loc282 = loc(fused[#loc178, #loc179])
#loc283 = loc(fused[#loc181, #loc180])
#loc284 = loc(fused[#loc182, #loc183])
#loc285 = loc(fused[#loc184, #loc185])
#loc286 = loc(fused[#loc187, #loc183])
#loc287 = loc(fused[#loc190, #loc188])
#loc288 = loc(fused[#loc191, #loc192])
#loc289 = loc(fused[#loc193, #loc194])
#loc290 = loc(fused[#loc196, #loc192])
#loc291 = loc(fused[#loc197, #loc198])
#loc292 = loc(fused[#loc199, #loc200])
#loc293 = loc(fused[#loc202, #loc198])
#loc294 = loc(fused[#loc203, #loc204])
