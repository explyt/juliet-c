!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":217:10)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":217:14)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":217:20)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":217:32)
#loc298 = loc(fused[#loc77, #loc78])
#loc299 = loc(fused[#loc79, #loc80])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc267)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc268)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc269)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc270)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc271)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printIntLine(!s32i) loc(#loc272)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_multiply_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc274)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc18)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc275)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc267)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc22)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc279)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc279)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc279)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc30)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc31)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc31)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc31)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc31)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc31)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc31)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc31)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc31)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc269)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc32)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc33)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc281)
            cir.if %21 {
              %22 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc38)
              %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc39)
              cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc283)
            } else {
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc42)
            } loc(#loc282)
          } loc(#loc280)
        } loc(#loc278)
      } loc(#loc277)
    } loc(#loc276)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc267)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc45)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc45)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc50)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc287)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc289)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc53)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc54)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc289)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc55)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc56)
          } loc(#loc288)
        } loc(#loc286)
      } loc(#loc285)
    } loc(#loc284)
    cir.return loc(#loc15)
  } loc(#loc273)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_multiply_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc291)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc292)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc293)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc294)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    cir.return loc(#loc58)
  } loc(#loc290)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc295)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc296)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc74)
  cir.func @main(%arg0: !s32i loc(fused[#loc77, #loc78]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc79, #loc80])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc298)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc299)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc76)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc81)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc82)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc83)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc83)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc84)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc71)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_fgets_multiply_05_good : !cir.ptr<!cir.func<!void ()>> loc(#loc300)
    cir.call @CWE190_Integer_Overflow__int_fgets_multiply_05_good() : () -> () loc(#loc86)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc72)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc73)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_fgets_multiply_05_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc301)
    cir.call @CWE190_Integer_Overflow__int_fgets_multiply_05_bad() : () -> () loc(#loc90)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc74)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc93)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc302)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc302)
    cir.return %17 : !s32i loc(#loc302)
  } loc(#loc297)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc303)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc97)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc98)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc305)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc103)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc306)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc267)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc107)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc107)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc310)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc310)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc310)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc115)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc116)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc116)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc116)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc116)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc116)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc116)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc116)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc116)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc269)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc117)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc118)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc119)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc119)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc312)
            cir.if %21 {
              %22 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc123)
              %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc124)
              cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc314)
            } else {
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc127)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc127)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc128)
            } loc(#loc313)
          } loc(#loc311)
        } loc(#loc309)
      } loc(#loc308)
    } loc(#loc307)
    cir.scope {
      %2 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc303)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc131)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc131)
      cir.if %4 {
        %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc97)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc97)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc135)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc138)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc139)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc318)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc143)
              %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc144)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc145)
              %11 = cir.binop(div, %9, %10) : !s32i loc(#loc321)
              %12 = cir.cmp(lt, %8, %11) : !s32i, !cir.bool loc(#loc322)
              cir.if %12 {
                %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc324)
                %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
                %15 = cir.const #cir.int<2> : !s32i loc(#loc151)
                %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc152)
                cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc324)
                %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc153)
                cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc154)
              } else {
                %13 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc98)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc98)
                cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc155)
              } loc(#loc323)
            } loc(#loc320)
          } loc(#loc319)
        } loc(#loc317)
      } loc(#loc316)
    } loc(#loc315)
    cir.return loc(#loc100)
  } loc(#loc304)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc326)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc160)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc327)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc267)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc164)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc164)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc331)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc331)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc331)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc172)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc173)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc173)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc173)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc173)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc173)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc173)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc173)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc173)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc269)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc174)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc175)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc176)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc176)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc333)
            cir.if %21 {
              %22 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc180)
              %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc181)
              cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc335)
            } else {
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc184)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc184)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc185)
            } loc(#loc334)
          } loc(#loc332)
        } loc(#loc330)
      } loc(#loc329)
    } loc(#loc328)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc267)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc188)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc188)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc192)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc193)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc339)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc197)
              %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc198)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc199)
              %11 = cir.binop(div, %9, %10) : !s32i loc(#loc342)
              %12 = cir.cmp(lt, %8, %11) : !s32i, !cir.bool loc(#loc343)
              cir.if %12 {
                %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc345)
                %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc206)
                %15 = cir.const #cir.int<2> : !s32i loc(#loc205)
                %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc206)
                cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc345)
                %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc207)
                cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc208)
              } else {
                %13 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc209)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc209)
                cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc210)
              } loc(#loc344)
            } loc(#loc341)
          } loc(#loc340)
        } loc(#loc338)
      } loc(#loc337)
    } loc(#loc336)
    cir.return loc(#loc157)
  } loc(#loc325)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc347)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc215)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc348)
    cir.scope {
      %2 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc303)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc219)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc219)
      cir.if %4 {
        %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc223)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc223)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc224)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc225)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc351)
      } loc(#loc350)
    } loc(#loc349)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc267)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc229)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc229)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc233)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc234)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc355)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc357)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc238)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc237)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc238)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc357)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc239)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc240)
          } loc(#loc356)
        } loc(#loc354)
      } loc(#loc353)
    } loc(#loc352)
    cir.return loc(#loc212)
  } loc(#loc346)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc359)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc245)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc360)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc267)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc249)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc249)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc251)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc363)
      } loc(#loc362)
    } loc(#loc361)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc267)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc255)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc255)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc259)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc260)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc367)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc369)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc264)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc263)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc264)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc369)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc265)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc266)
          } loc(#loc368)
        } loc(#loc366)
      } loc(#loc365)
    } loc(#loc364)
    cir.return loc(#loc242)
  } loc(#loc358)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_05.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":25:1)
#loc2 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":25:25)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":47:27)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":30:1)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":60:1)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":32:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":32:9)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":34:12)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":34:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":35:5)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":50:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":35:8)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":36:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":37:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":49:9)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":38:13)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":38:49)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":40:13)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":48:13)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":40:23)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":40:36)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":40:53)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":40:17)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":40:63)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":41:13)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":44:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":46:13)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":43:29)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":43:24)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":43:17)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":43:40)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":47:17)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":51:5)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":59:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":51:8)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":52:5)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":53:9)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":58:9)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":53:12)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":53:19)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":54:9)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":56:13)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":56:33)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":56:26)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":57:26)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":57:13)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":200:1)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":206:1)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":202:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":202:14)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":203:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":203:14)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":204:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":204:14)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":205:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":205:14)
#loc67 = loc("/usr/include/stdlib.h":575:1)
#loc68 = loc("/usr/include/stdlib.h":575:41)
#loc69 = loc("/usr/include/time.h":76:1)
#loc70 = loc("/usr/include/time.h":76:38)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":222:15)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":224:15)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":227:15)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":229:15)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":217:1)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":232:1)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":218:1)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":220:27)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":220:22)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":220:5)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":222:5)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":223:5)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":223:57)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":224:5)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":227:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":228:5)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":228:56)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":229:5)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":231:12)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":231:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":26:1)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":26:26)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":91:19)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":105:27)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":67:1)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":109:1)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":69:5)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":69:9)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":71:12)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":71:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":72:5)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":87:5)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":72:8)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":73:5)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":74:9)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":86:9)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":75:13)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":75:49)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":77:13)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":85:13)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":77:23)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":77:36)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":77:53)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":77:17)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":77:63)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":78:13)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":81:13)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":83:13)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":80:29)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":80:24)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":80:17)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":80:40)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":84:27)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":84:17)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":88:5)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":108:5)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":88:8)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":89:5)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":92:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":94:5)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":91:9)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":95:9)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":107:9)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":95:12)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":95:19)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":96:9)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":98:13)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":106:13)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":98:17)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":98:25)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":98:33)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":98:34)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":99:13)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":102:13)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":104:13)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":100:17)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":100:37)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":100:30)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":101:30)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":101:17)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":105:17)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":112:1)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":149:1)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":114:5)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":114:9)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":116:12)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":116:5)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":117:5)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":132:5)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":117:8)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":118:5)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":119:9)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":131:9)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":120:13)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":120:49)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":122:13)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":130:13)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":122:23)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":122:36)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":122:53)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":122:17)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":122:63)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":123:13)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":126:13)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":128:13)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":125:29)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":125:24)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":125:17)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":125:40)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":129:27)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":129:17)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":133:5)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":148:5)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":133:8)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":134:5)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":135:9)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":147:9)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":135:12)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":135:19)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":136:9)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":138:13)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":146:13)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":138:17)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":138:25)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":138:33)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":138:34)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":139:13)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":142:13)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":144:13)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":140:17)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":140:37)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":140:30)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":141:30)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":141:17)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":145:27)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":145:17)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":152:1)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":176:1)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":154:5)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":154:9)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":156:12)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":156:5)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":157:5)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":166:5)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":157:8)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":158:5)
#loc221 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":161:5)
#loc222 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":163:5)
#loc223 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":160:19)
#loc224 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":160:9)
#loc225 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":165:16)
#loc226 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":165:9)
#loc227 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":167:5)
#loc228 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":175:5)
#loc229 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":167:8)
#loc230 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":168:5)
#loc231 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":169:9)
#loc232 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":174:9)
#loc233 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":169:12)
#loc234 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":169:19)
#loc235 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":170:9)
#loc236 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":172:13)
#loc237 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":172:33)
#loc238 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":172:26)
#loc239 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":173:26)
#loc240 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":173:13)
#loc241 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":179:1)
#loc242 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":198:1)
#loc243 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":181:5)
#loc244 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":181:9)
#loc245 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":183:12)
#loc246 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":183:5)
#loc247 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":184:5)
#loc248 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":188:5)
#loc249 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":184:8)
#loc250 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":185:5)
#loc251 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":187:16)
#loc252 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":187:9)
#loc253 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":189:5)
#loc254 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":197:5)
#loc255 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":189:8)
#loc256 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":190:5)
#loc257 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":191:9)
#loc258 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":196:9)
#loc259 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":191:12)
#loc260 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":191:19)
#loc261 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":192:9)
#loc262 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":194:13)
#loc263 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":194:33)
#loc264 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":194:26)
#loc265 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":195:26)
#loc266 = loc("CWE190_Integer_Overflow__int_fgets_multiply_05.c":195:13)
#loc267 = loc(fused[#loc1, #loc2])
#loc268 = loc(fused[#loc3, #loc4])
#loc269 = loc(fused[#loc5, #loc6])
#loc270 = loc(fused[#loc7, #loc8])
#loc271 = loc(fused[#loc9, #loc10])
#loc272 = loc(fused[#loc12, #loc13])
#loc273 = loc(fused[#loc14, #loc15])
#loc274 = loc(fused[#loc16, #loc17])
#loc275 = loc(fused[#loc19, #loc18])
#loc276 = loc(fused[#loc20, #loc21])
#loc277 = loc(fused[#loc23, #loc21])
#loc278 = loc(fused[#loc24, #loc25])
#loc279 = loc(fused[#loc26, #loc27])
#loc280 = loc(fused[#loc28, #loc29])
#loc281 = loc(fused[#loc33, #loc34])
#loc282 = loc(fused[#loc35, #loc36, #loc37, #loc29])
#loc283 = loc(fused[#loc40, #loc41])
#loc284 = loc(fused[#loc43, #loc44])
#loc285 = loc(fused[#loc46, #loc44])
#loc286 = loc(fused[#loc47, #loc48])
#loc287 = loc(fused[#loc49, #loc50])
#loc288 = loc(fused[#loc51, #loc48])
#loc289 = loc(fused[#loc52, #loc53])
#loc290 = loc(fused[#loc57, #loc58])
#loc291 = loc(fused[#loc59, #loc60])
#loc292 = loc(fused[#loc61, #loc62])
#loc293 = loc(fused[#loc63, #loc64])
#loc294 = loc(fused[#loc65, #loc66])
#loc295 = loc(fused[#loc67, #loc68])
#loc296 = loc(fused[#loc69, #loc70])
#loc297 = loc(fused[#loc75, #loc76])
#loc300 = loc(fused[#loc86, #loc87])
#loc301 = loc(fused[#loc90, #loc91])
#loc302 = loc(fused[#loc94, #loc93])
#loc303 = loc(fused[#loc95, #loc96])
#loc304 = loc(fused[#loc99, #loc100])
#loc305 = loc(fused[#loc101, #loc102])
#loc306 = loc(fused[#loc104, #loc103])
#loc307 = loc(fused[#loc105, #loc106])
#loc308 = loc(fused[#loc108, #loc106])
#loc309 = loc(fused[#loc109, #loc110])
#loc310 = loc(fused[#loc111, #loc112])
#loc311 = loc(fused[#loc113, #loc114])
#loc312 = loc(fused[#loc118, #loc119])
#loc313 = loc(fused[#loc120, #loc121, #loc122, #loc114])
#loc314 = loc(fused[#loc125, #loc126])
#loc315 = loc(fused[#loc129, #loc130])
#loc316 = loc(fused[#loc132, #loc133, #loc134, #loc130])
#loc317 = loc(fused[#loc136, #loc137])
#loc318 = loc(fused[#loc138, #loc139])
#loc319 = loc(fused[#loc140, #loc137])
#loc320 = loc(fused[#loc141, #loc142])
#loc321 = loc(fused[#loc144, #loc145])
#loc322 = loc(fused[#loc143, #loc146])
#loc323 = loc(fused[#loc147, #loc148, #loc149, #loc142])
#loc324 = loc(fused[#loc150, #loc151])
#loc325 = loc(fused[#loc156, #loc157])
#loc326 = loc(fused[#loc158, #loc159])
#loc327 = loc(fused[#loc161, #loc160])
#loc328 = loc(fused[#loc162, #loc163])
#loc329 = loc(fused[#loc165, #loc163])
#loc330 = loc(fused[#loc166, #loc167])
#loc331 = loc(fused[#loc168, #loc169])
#loc332 = loc(fused[#loc170, #loc171])
#loc333 = loc(fused[#loc175, #loc176])
#loc334 = loc(fused[#loc177, #loc178, #loc179, #loc171])
#loc335 = loc(fused[#loc182, #loc183])
#loc336 = loc(fused[#loc186, #loc187])
#loc337 = loc(fused[#loc189, #loc187])
#loc338 = loc(fused[#loc190, #loc191])
#loc339 = loc(fused[#loc192, #loc193])
#loc340 = loc(fused[#loc194, #loc191])
#loc341 = loc(fused[#loc195, #loc196])
#loc342 = loc(fused[#loc198, #loc199])
#loc343 = loc(fused[#loc197, #loc200])
#loc344 = loc(fused[#loc201, #loc202, #loc203, #loc196])
#loc345 = loc(fused[#loc204, #loc205])
#loc346 = loc(fused[#loc211, #loc212])
#loc347 = loc(fused[#loc213, #loc214])
#loc348 = loc(fused[#loc216, #loc215])
#loc349 = loc(fused[#loc217, #loc218])
#loc350 = loc(fused[#loc220, #loc221, #loc222, #loc218])
#loc351 = loc(fused[#loc226, #loc225])
#loc352 = loc(fused[#loc227, #loc228])
#loc353 = loc(fused[#loc230, #loc228])
#loc354 = loc(fused[#loc231, #loc232])
#loc355 = loc(fused[#loc233, #loc234])
#loc356 = loc(fused[#loc235, #loc232])
#loc357 = loc(fused[#loc236, #loc237])
#loc358 = loc(fused[#loc241, #loc242])
#loc359 = loc(fused[#loc243, #loc244])
#loc360 = loc(fused[#loc246, #loc245])
#loc361 = loc(fused[#loc247, #loc248])
#loc362 = loc(fused[#loc250, #loc248])
#loc363 = loc(fused[#loc252, #loc251])
#loc364 = loc(fused[#loc253, #loc254])
#loc365 = loc(fused[#loc256, #loc254])
#loc366 = loc(fused[#loc257, #loc258])
#loc367 = loc(fused[#loc259, #loc260])
#loc368 = loc(fused[#loc261, #loc258])
#loc369 = loc(fused[#loc262, #loc263])
