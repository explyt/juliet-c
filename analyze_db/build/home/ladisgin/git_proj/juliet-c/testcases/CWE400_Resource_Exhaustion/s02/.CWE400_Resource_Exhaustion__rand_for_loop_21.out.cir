!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":25:21)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":25:25)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":168:10)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":168:14)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":168:20)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":168:32)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":61:26)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":61:30)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":96:26)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":96:30)
#loc185 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":126:25)
#loc186 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":126:29)
#true = #cir.bool<true> : !cir.bool
#loc224 = loc(fused[#loc8, #loc9])
#loc247 = loc(fused[#loc63, #loc64])
#loc248 = loc(fused[#loc65, #loc66])
#loc254 = loc(fused[#loc86, #loc87])
#loc275 = loc(fused[#loc137, #loc138])
#loc296 = loc(fused[#loc185, #loc186])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc221)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc222)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc5)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc8, #loc9])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc224)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc10)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc222)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc13)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc13)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc228)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc18)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc18)
          cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc228)
          cir.scope {
            %7 = cir.const #cir.int<0> : !s32i loc(#loc21)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc21)
            cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc230)
            cir.for : cond {
              %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc23)
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
              %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc24)
              %12 = cir.cmp(lt, %9, %11) : !u64i, !cir.bool loc(#loc231)
              cir.condition(%12) loc(#loc25)
            } body {
              cir.scope {
                %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc5)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc5)
                cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc27)
              } loc(#loc232)
              cir.yield loc(#loc20)
            } step {
              %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc28)
              %10 = cir.unary(inc, %9) : !u64i, !u64i loc(#loc29)
              cir.store %10, %4 : !u64i, !cir.ptr<!u64i> loc(#loc233)
              cir.yield loc(#loc229)
            } loc(#loc229)
          } loc(#loc229)
        } loc(#loc227)
      } loc(#loc226)
    } loc(#loc225)
    cir.return loc(#loc7)
  } loc(#loc223)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc235)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc35)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc37)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc37)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc37)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc37)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc37)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc37)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc37)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc37)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc37)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc37)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc37)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc37)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc37)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc37)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc37)
      cir.yield %23 : !u32i loc(#loc37)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc37)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc37)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc37)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc37)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc37)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc37)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc37)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc37)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc37)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc37)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc37)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc37)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc37)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc37)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc37)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc37)
      cir.yield %27 : !u32i loc(#loc37)
    }) : (!cir.bool) -> !u32i loc(#loc37)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc37)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %10 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc222)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc238)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    cir.call @badSink(%11) : (!s32i) -> () loc(#loc42)
    cir.return loc(#loc31)
  } loc(#loc234)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc240)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc241)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc242)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    cir.return loc(#loc44)
  } loc(#loc239)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc243)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc244)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc245)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc60)
  cir.func @main(%arg0: !s32i loc(fused[#loc63, #loc64]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc65, #loc66])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc247)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc248)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc62)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc67)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc67)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc68)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc69)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc69)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc70)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc57)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %8 = cir.get_global @CWE400_Resource_Exhaustion__rand_for_loop_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc249)
    cir.call @CWE400_Resource_Exhaustion__rand_for_loop_21_good() : () -> () loc(#loc72)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc58)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc59)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %13 = cir.get_global @CWE400_Resource_Exhaustion__rand_for_loop_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc250)
    cir.call @CWE400_Resource_Exhaustion__rand_for_loop_21_bad() : () -> () loc(#loc76)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc60)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc79)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc251)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc251)
    cir.return %17 : !s32i loc(#loc251)
  } loc(#loc246)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc252)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc83)
  cir.func internal private @goodB2G1Sink(%arg0: !s32i loc(fused[#loc86, #loc87])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc254)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc252)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc91)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc91)
      cir.if %3 {
        %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc83)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc83)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc95)
      } else {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc258)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc99)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc99)
          cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc258)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc103)
            %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc260)
            %10 = cir.ternary(%9, true {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
              %12 = cir.const #cir.int<20> : !s32i loc(#loc106)
              %13 = cir.cmp(le, %11, %12) : !s32i, !cir.bool loc(#loc261)
              %14 = cir.ternary(%13, true {
                %15 = cir.const #true loc(#loc104)
                cir.yield %15 : !cir.bool loc(#loc104)
              }, false {
                %15 = cir.const #false loc(#loc104)
                cir.yield %15 : !cir.bool loc(#loc104)
              }) : (!cir.bool) -> !cir.bool loc(#loc104)
              cir.yield %14 : !cir.bool loc(#loc104)
            }, false {
              %11 = cir.const #false loc(#loc104)
              cir.yield %11 : !cir.bool loc(#loc104)
            }) : (!cir.bool) -> !cir.bool loc(#loc104)
            cir.if %10 {
              cir.scope {
                %11 = cir.const #cir.int<0> : !s32i loc(#loc110)
                %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc110)
                cir.store %12, %4 : !u64i, !cir.ptr<!u64i> loc(#loc264)
                cir.for : cond {
                  %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc112)
                  %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                  %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc113)
                  %16 = cir.cmp(lt, %13, %15) : !u64i, !cir.bool loc(#loc265)
                  cir.condition(%16) loc(#loc114)
                } body {
                  cir.scope {
                    %13 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc116)
                    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc116)
                    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc117)
                  } loc(#loc266)
                  cir.yield loc(#loc109)
                } step {
                  %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc118)
                  %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc119)
                  cir.store %14, %4 : !u64i, !cir.ptr<!u64i> loc(#loc267)
                  cir.yield loc(#loc263)
                } loc(#loc263)
              } loc(#loc263)
            } loc(#loc262)
          } loc(#loc259)
        } loc(#loc257)
      } loc(#loc256)
    } loc(#loc255)
    cir.return loc(#loc85)
  } loc(#loc253)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc269)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc124)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc125)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc270)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc127)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc127)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc127)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc127)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc127)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc127)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc127)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc127)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc127)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc127)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc127)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc127)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc127)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc127)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc127)
      cir.yield %23 : !u32i loc(#loc127)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc127)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc127)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc127)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc127)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc127)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc127)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc127)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc127)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc127)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc127)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc127)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc127)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc127)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc127)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc127)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc127)
      cir.yield %27 : !u32i loc(#loc127)
    }) : (!cir.bool) -> !u32i loc(#loc127)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc127)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc271)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc129)
    %10 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc252)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc272)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc131)
    cir.call @goodB2G1Sink(%11) : (!s32i) -> () loc(#loc132)
    cir.return loc(#loc121)
  } loc(#loc268)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc273)
  cir.func internal private @goodB2G2Sink(%arg0: !s32i loc(fused[#loc137, #loc138])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc275)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc273)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc142)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc142)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc279)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc147)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc147)
          cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc279)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc150)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc151)
            %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc281)
            %10 = cir.ternary(%9, true {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc153)
              %12 = cir.const #cir.int<20> : !s32i loc(#loc154)
              %13 = cir.cmp(le, %11, %12) : !s32i, !cir.bool loc(#loc282)
              %14 = cir.ternary(%13, true {
                %15 = cir.const #true loc(#loc152)
                cir.yield %15 : !cir.bool loc(#loc152)
              }, false {
                %15 = cir.const #false loc(#loc152)
                cir.yield %15 : !cir.bool loc(#loc152)
              }) : (!cir.bool) -> !cir.bool loc(#loc152)
              cir.yield %14 : !cir.bool loc(#loc152)
            }, false {
              %11 = cir.const #false loc(#loc152)
              cir.yield %11 : !cir.bool loc(#loc152)
            }) : (!cir.bool) -> !cir.bool loc(#loc152)
            cir.if %10 {
              cir.scope {
                %11 = cir.const #cir.int<0> : !s32i loc(#loc158)
                %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc158)
                cir.store %12, %4 : !u64i, !cir.ptr<!u64i> loc(#loc285)
                cir.for : cond {
                  %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc160)
                  %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
                  %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc161)
                  %16 = cir.cmp(lt, %13, %15) : !u64i, !cir.bool loc(#loc286)
                  cir.condition(%16) loc(#loc162)
                } body {
                  cir.scope {
                    %13 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc164)
                    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc164)
                    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc165)
                  } loc(#loc287)
                  cir.yield loc(#loc157)
                } step {
                  %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc166)
                  %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc167)
                  cir.store %14, %4 : !u64i, !cir.ptr<!u64i> loc(#loc288)
                  cir.yield loc(#loc284)
                } loc(#loc284)
              } loc(#loc284)
            } loc(#loc283)
          } loc(#loc280)
        } loc(#loc278)
      } loc(#loc277)
    } loc(#loc276)
    cir.return loc(#loc136)
  } loc(#loc274)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc290)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc172)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc173)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc291)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc175)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc175)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc175)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc175)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc175)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc175)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc175)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc175)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc175)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc175)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc175)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc175)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc175)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc175)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc175)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc175)
      cir.yield %23 : !u32i loc(#loc175)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc175)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc175)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc175)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc175)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc175)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc175)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc175)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc175)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc175)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc175)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc175)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc175)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc175)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc175)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc175)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc175)
      cir.yield %27 : !u32i loc(#loc175)
    }) : (!cir.bool) -> !u32i loc(#loc175)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc175)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc292)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc177)
    %10 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc273)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc293)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc179)
    cir.call @goodB2G2Sink(%11) : (!s32i) -> () loc(#loc180)
    cir.return loc(#loc169)
  } loc(#loc289)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc294)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc185, #loc186])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc296)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc294)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc190)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc190)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc300)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc195)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc195)
          cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc300)
          cir.scope {
            %7 = cir.const #cir.int<0> : !s32i loc(#loc198)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc198)
            cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc302)
            cir.for : cond {
              %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc200)
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc201)
              %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc201)
              %12 = cir.cmp(lt, %9, %11) : !u64i, !cir.bool loc(#loc303)
              cir.condition(%12) loc(#loc202)
            } body {
              cir.scope {
                %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc204)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc204)
                cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc205)
              } loc(#loc304)
              cir.yield loc(#loc197)
            } step {
              %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc206)
              %10 = cir.unary(inc, %9) : !u64i, !u64i loc(#loc207)
              cir.store %10, %4 : !u64i, !cir.ptr<!u64i> loc(#loc305)
              cir.yield loc(#loc301)
            } loc(#loc301)
          } loc(#loc301)
        } loc(#loc299)
      } loc(#loc298)
    } loc(#loc297)
    cir.return loc(#loc184)
  } loc(#loc295)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc307)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc212)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc213)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc308)
    %3 = cir.const #cir.int<20> : !s32i loc(#loc215)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc309)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc217)
    %5 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc294)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc310)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc219)
    cir.call @goodG2BSink(%6) : (!s32i) -> () loc(#loc220)
    cir.return loc(#loc209)
  } loc(#loc306)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_21.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":23:1)
#loc4 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":23:24)
#loc5 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":34:27)
#loc6 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":25:1)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":38:1)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":26:1)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":27:5)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":37:5)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":27:8)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":28:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":29:9)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":36:9)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":30:13)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":30:24)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":32:13)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":35:13)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":32:22)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":32:18)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":32:25)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":32:37)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":32:27)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":33:13)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":34:17)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":32:45)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":32:44)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":40:1)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":49:1)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":42:5)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":42:9)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":44:14)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":44:13)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":44:5)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":46:13)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":46:5)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":47:17)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":47:5)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":48:13)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":48:5)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":152:1)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":157:1)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":154:5)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":154:14)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":155:5)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":155:14)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":156:5)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":156:13)
#loc51 = loc("/usr/include/stdlib.h":575:1)
#loc52 = loc("/usr/include/stdlib.h":575:41)
#loc53 = loc("/usr/include/time.h":76:1)
#loc54 = loc("/usr/include/time.h":76:38)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":173:15)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":175:15)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":178:15)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":180:15)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":168:1)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":183:1)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":169:1)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":171:27)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":171:22)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":171:5)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":173:5)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":174:5)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":174:55)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":175:5)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":178:5)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":179:5)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":179:54)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":180:5)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":182:12)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":182:5)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":56:1)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":56:29)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":66:19)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":61:1)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":82:1)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":62:1)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":63:5)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":81:5)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":63:8)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":64:5)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":67:5)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":69:5)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":66:9)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":70:9)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":80:9)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":71:13)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":71:24)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":73:13)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":79:13)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":73:17)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":73:25)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":73:27)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":73:30)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":73:39)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":74:13)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":75:17)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":78:17)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":75:26)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":75:22)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":75:29)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":75:41)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":75:31)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":76:17)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":77:31)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":77:21)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":75:49)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":75:48)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":84:1)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":93:1)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":86:5)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":86:9)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":88:14)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":88:13)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":88:5)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":90:13)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":90:5)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":91:22)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":91:5)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":92:18)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":92:5)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":57:1)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":57:29)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":96:1)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":112:1)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":97:1)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":98:5)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":111:5)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":98:8)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":99:5)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":100:9)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":110:9)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":101:13)
#loc147 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":101:24)
#loc148 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":103:13)
#loc149 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":109:13)
#loc150 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":103:17)
#loc151 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":103:25)
#loc152 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":103:27)
#loc153 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":103:30)
#loc154 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":103:39)
#loc155 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":104:13)
#loc156 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":105:17)
#loc157 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":108:17)
#loc158 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":105:26)
#loc159 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":105:22)
#loc160 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":105:29)
#loc161 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":105:41)
#loc162 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":105:31)
#loc163 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":106:17)
#loc164 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":107:31)
#loc165 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":107:21)
#loc166 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":105:49)
#loc167 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":105:48)
#loc168 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":114:1)
#loc169 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":123:1)
#loc170 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":116:5)
#loc171 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":116:9)
#loc172 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":118:14)
#loc173 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":118:13)
#loc174 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":118:5)
#loc175 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":120:13)
#loc176 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":120:5)
#loc177 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":121:22)
#loc178 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":121:5)
#loc179 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":122:18)
#loc180 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":122:5)
#loc181 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":58:1)
#loc182 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":58:28)
#loc183 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":126:1)
#loc184 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":139:1)
#loc187 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":127:1)
#loc188 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":128:5)
#loc189 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":138:5)
#loc190 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":128:8)
#loc191 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":129:5)
#loc192 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":130:9)
#loc193 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":137:9)
#loc194 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":131:13)
#loc195 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":131:24)
#loc196 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":133:13)
#loc197 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":136:13)
#loc198 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":133:22)
#loc199 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":133:18)
#loc200 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":133:25)
#loc201 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":133:37)
#loc202 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":133:27)
#loc203 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":134:13)
#loc204 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":135:27)
#loc205 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":135:17)
#loc206 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":133:45)
#loc207 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":133:44)
#loc208 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":141:1)
#loc209 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":150:1)
#loc210 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":143:5)
#loc211 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":143:9)
#loc212 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":145:14)
#loc213 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":145:13)
#loc214 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":145:5)
#loc215 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":147:13)
#loc216 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":147:5)
#loc217 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":148:21)
#loc218 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":148:5)
#loc219 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":149:17)
#loc220 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":149:5)
#loc221 = loc(fused[#loc1, #loc2])
#loc222 = loc(fused[#loc3, #loc4])
#loc223 = loc(fused[#loc6, #loc7])
#loc225 = loc(fused[#loc11, #loc12])
#loc226 = loc(fused[#loc14, #loc12])
#loc227 = loc(fused[#loc15, #loc16])
#loc228 = loc(fused[#loc17, #loc18])
#loc229 = loc(fused[#loc19, #loc20])
#loc230 = loc(fused[#loc22, #loc21])
#loc231 = loc(fused[#loc23, #loc24])
#loc232 = loc(fused[#loc26, #loc20])
#loc233 = loc(fused[#loc29, #loc28])
#loc234 = loc(fused[#loc30, #loc31])
#loc235 = loc(fused[#loc32, #loc33])
#loc236 = loc(fused[#loc36, #loc34])
#loc237 = loc(fused[#loc38, #loc37])
#loc238 = loc(fused[#loc40, #loc39])
#loc239 = loc(fused[#loc43, #loc44])
#loc240 = loc(fused[#loc45, #loc46])
#loc241 = loc(fused[#loc47, #loc48])
#loc242 = loc(fused[#loc49, #loc50])
#loc243 = loc(fused[#loc51, #loc52])
#loc244 = loc(fused[#loc53, #loc54])
#loc245 = loc(fused[#loc55, #loc56])
#loc246 = loc(fused[#loc61, #loc62])
#loc249 = loc(fused[#loc72, #loc73])
#loc250 = loc(fused[#loc76, #loc77])
#loc251 = loc(fused[#loc80, #loc79])
#loc252 = loc(fused[#loc81, #loc82])
#loc253 = loc(fused[#loc84, #loc85])
#loc255 = loc(fused[#loc89, #loc90])
#loc256 = loc(fused[#loc92, #loc93, #loc94, #loc90])
#loc257 = loc(fused[#loc96, #loc97])
#loc258 = loc(fused[#loc98, #loc99])
#loc259 = loc(fused[#loc100, #loc101])
#loc260 = loc(fused[#loc102, #loc103])
#loc261 = loc(fused[#loc105, #loc106])
#loc262 = loc(fused[#loc107, #loc101])
#loc263 = loc(fused[#loc108, #loc109])
#loc264 = loc(fused[#loc111, #loc110])
#loc265 = loc(fused[#loc112, #loc113])
#loc266 = loc(fused[#loc115, #loc109])
#loc267 = loc(fused[#loc119, #loc118])
#loc268 = loc(fused[#loc120, #loc121])
#loc269 = loc(fused[#loc122, #loc123])
#loc270 = loc(fused[#loc126, #loc124])
#loc271 = loc(fused[#loc128, #loc127])
#loc272 = loc(fused[#loc130, #loc129])
#loc273 = loc(fused[#loc133, #loc134])
#loc274 = loc(fused[#loc135, #loc136])
#loc276 = loc(fused[#loc140, #loc141])
#loc277 = loc(fused[#loc143, #loc141])
#loc278 = loc(fused[#loc144, #loc145])
#loc279 = loc(fused[#loc146, #loc147])
#loc280 = loc(fused[#loc148, #loc149])
#loc281 = loc(fused[#loc150, #loc151])
#loc282 = loc(fused[#loc153, #loc154])
#loc283 = loc(fused[#loc155, #loc149])
#loc284 = loc(fused[#loc156, #loc157])
#loc285 = loc(fused[#loc159, #loc158])
#loc286 = loc(fused[#loc160, #loc161])
#loc287 = loc(fused[#loc163, #loc157])
#loc288 = loc(fused[#loc167, #loc166])
#loc289 = loc(fused[#loc168, #loc169])
#loc290 = loc(fused[#loc170, #loc171])
#loc291 = loc(fused[#loc174, #loc172])
#loc292 = loc(fused[#loc176, #loc175])
#loc293 = loc(fused[#loc178, #loc177])
#loc294 = loc(fused[#loc181, #loc182])
#loc295 = loc(fused[#loc183, #loc184])
#loc297 = loc(fused[#loc188, #loc189])
#loc298 = loc(fused[#loc191, #loc189])
#loc299 = loc(fused[#loc192, #loc193])
#loc300 = loc(fused[#loc194, #loc195])
#loc301 = loc(fused[#loc196, #loc197])
#loc302 = loc(fused[#loc199, #loc198])
#loc303 = loc(fused[#loc200, #loc201])
#loc304 = loc(fused[#loc203, #loc197])
#loc305 = loc(fused[#loc207, #loc206])
#loc306 = loc(fused[#loc208, #loc209])
#loc307 = loc(fused[#loc210, #loc211])
#loc308 = loc(fused[#loc214, #loc212])
#loc309 = loc(fused[#loc216, #loc215])
#loc310 = loc(fused[#loc218, #loc217])
