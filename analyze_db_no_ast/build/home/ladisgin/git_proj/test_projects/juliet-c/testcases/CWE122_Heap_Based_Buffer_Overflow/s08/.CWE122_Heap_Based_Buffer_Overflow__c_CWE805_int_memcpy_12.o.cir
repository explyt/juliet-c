!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc135)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc136)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc137)
  cir.func private  @printIntLine(!s32i) loc(#loc138)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc139)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc141)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc142)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc144)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc144)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc24)
        %7 = cir.const #cir.int<50> : !s32i loc(#loc25)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc25)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc146)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc147)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc148)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc149)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc33)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !s32i loc(#loc151)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc34)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc36)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc37)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc38)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc36)
          } loc(#loc152)
        } loc(#loc150)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc39)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc40)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc40)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc153)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc154)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc39)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc155)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc156)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc48)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc48)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !s32i loc(#loc158)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc49)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc51)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc52)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc53)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc51)
          } loc(#loc159)
        } loc(#loc157)
      } loc(#loc145)
    } loc(#loc143)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc161)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc161)
      cir.store %3, %2 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc161)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc58)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc59)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc59)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc60)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc60)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc162)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc163)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc164)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc66)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc67)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc65)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc68)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc69)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc70)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc70)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc69)
    } loc(#loc160)
    cir.return loc(#loc12)
  } loc(#loc140)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc166)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc73)
    cir.return loc(#loc72)
  } loc(#loc165)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc168)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc79)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc169)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc171)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc171)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc83)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc83)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc88)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc89)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc89)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc173)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc174)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc88)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc175)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc176)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc96)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc97)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc97)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !s32i loc(#loc178)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc98)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc100)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc101)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc102)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc100)
          } loc(#loc179)
        } loc(#loc177)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc103)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc104)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc104)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc180)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc181)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc103)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc182)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc183)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc111)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc112)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc112)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !s32i loc(#loc185)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc113)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc115)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc116)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc117)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc115)
          } loc(#loc186)
        } loc(#loc184)
      } loc(#loc172)
    } loc(#loc170)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc188)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc188)
      cir.store %3, %2 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc188)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc122)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc122)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc123)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc123)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc124)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc124)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc189)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc190)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc191)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc129)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc130)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc131)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc129)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc132)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc133)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc134)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc134)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc133)
    } loc(#loc187)
    cir.return loc(#loc76)
  } loc(#loc167)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":21:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":44:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":23:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":23:11)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":24:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":24:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":25:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":36:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":25:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":25:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":30:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":32:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":28:23)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":28:30)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":28:33)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":28:43)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":28:44)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":28:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":29:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":29:37)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":29:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":29:21)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":29:18)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":29:27)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":29:28)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":29:34)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":29:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":34:23)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":34:30)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":34:34)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":34:44)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":34:45)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":34:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":35:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":35:37)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":35:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":35:21)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":35:18)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":35:27)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":35:28)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":35:34)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":35:33)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":37:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":43:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":38:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":38:29)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":40:16)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":40:22)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":40:30)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":40:34)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":40:44)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":40:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":40:45)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":41:22)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":41:27)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":41:28)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":41:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":42:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":42:14)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":77:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":80:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":79:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":79:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":52:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":75:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":54:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":54:11)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":55:12)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":55:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":56:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":67:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":56:8)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":56:33)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":57:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":61:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":63:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":59:23)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":59:30)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":59:34)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":59:44)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":59:45)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":59:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":60:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":60:37)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":60:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":60:21)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":60:18)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":60:27)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":60:28)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":60:34)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":60:33)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":65:23)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":65:30)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":65:34)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":65:44)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":65:45)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":65:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":66:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":66:37)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":66:13)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":66:21)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":66:18)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":66:27)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":66:28)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":66:34)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":66:33)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":68:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":74:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":69:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":69:29)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":71:16)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":71:22)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":71:30)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":71:34)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":71:44)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":71:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":71:45)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":72:22)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":72:27)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":72:28)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":72:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":73:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c":73:14)
#loc135 = loc(fused[#loc1, #loc2])
#loc136 = loc(fused[#loc3, #loc4])
#loc137 = loc(fused[#loc5, #loc6])
#loc138 = loc(fused[#loc7, #loc8])
#loc139 = loc(fused[#loc9, #loc10])
#loc140 = loc(fused[#loc11, #loc12])
#loc141 = loc(fused[#loc13, #loc14])
#loc142 = loc(fused[#loc16, #loc15])
#loc143 = loc(fused[#loc17, #loc18])
#loc144 = loc(fused[#loc19, #loc20])
#loc145 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc146 = loc(fused[#loc26, #loc27])
#loc147 = loc(fused[#loc25, #loc27])
#loc148 = loc(fused[#loc24, #loc28])
#loc149 = loc(fused[#loc29, #loc28])
#loc150 = loc(fused[#loc30, #loc31])
#loc151 = loc(fused[#loc32, #loc33])
#loc152 = loc(fused[#loc35, #loc31])
#loc153 = loc(fused[#loc41, #loc42])
#loc154 = loc(fused[#loc40, #loc42])
#loc155 = loc(fused[#loc39, #loc43])
#loc156 = loc(fused[#loc44, #loc43])
#loc157 = loc(fused[#loc45, #loc46])
#loc158 = loc(fused[#loc47, #loc48])
#loc159 = loc(fused[#loc50, #loc46])
#loc160 = loc(fused[#loc54, #loc55])
#loc161 = loc(fused[#loc56, #loc57])
#loc162 = loc(fused[#loc61, #loc62])
#loc163 = loc(fused[#loc60, #loc62])
#loc164 = loc(fused[#loc63, #loc64])
#loc165 = loc(fused[#loc71, #loc72])
#loc166 = loc(fused[#loc73, #loc74])
#loc167 = loc(fused[#loc75, #loc76])
#loc168 = loc(fused[#loc77, #loc78])
#loc169 = loc(fused[#loc80, #loc79])
#loc170 = loc(fused[#loc81, #loc82])
#loc171 = loc(fused[#loc83, #loc84])
#loc172 = loc(fused[#loc85, #loc86, #loc87, #loc82])
#loc173 = loc(fused[#loc90, #loc91])
#loc174 = loc(fused[#loc89, #loc91])
#loc175 = loc(fused[#loc88, #loc92])
#loc176 = loc(fused[#loc93, #loc92])
#loc177 = loc(fused[#loc94, #loc95])
#loc178 = loc(fused[#loc96, #loc97])
#loc179 = loc(fused[#loc99, #loc95])
#loc180 = loc(fused[#loc105, #loc106])
#loc181 = loc(fused[#loc104, #loc106])
#loc182 = loc(fused[#loc103, #loc107])
#loc183 = loc(fused[#loc108, #loc107])
#loc184 = loc(fused[#loc109, #loc110])
#loc185 = loc(fused[#loc111, #loc112])
#loc186 = loc(fused[#loc114, #loc110])
#loc187 = loc(fused[#loc118, #loc119])
#loc188 = loc(fused[#loc120, #loc121])
#loc189 = loc(fused[#loc125, #loc126])
#loc190 = loc(fused[#loc124, #loc126])
#loc191 = loc(fused[#loc127, #loc128])
