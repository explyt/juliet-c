!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":38:16)
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc158)
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc159)
  cir.func private @printIntLine(!s32i) loc(#loc160)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_043badEv() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc162)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc163)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc164)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc165)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc17)
    cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    cir.br ^bb1 loc(#loc167)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc168)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc23)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc23)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc23)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc23)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc23)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc23)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc23)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc23)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc23)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc23)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc23)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc23)
    cir.br ^bb5(%23 : !u32i) loc(#loc23)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc23)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc23)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc23)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc23)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc23)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc23)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc23)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc23)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc23)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc23)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc23)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc23)
    cir.br ^bb5(%39 : !u32i) loc(#loc23)
  ^bb5(%40: !u32i loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":38:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc23)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc23)
    cir.store %41, %3 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    cir.br ^bb7 loc(#loc20)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc170)
  ^bb9:  // pred: ^bb8
    %42 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc27)
    %44 = cir.const #cir.int<4> : !u64i loc(#loc171)
    %45 = cir.binop(mul, %43, %44) : !u64i loc(#loc172)
    cir.store %45, %0 : !u64i, !cir.ptr<!u64i> loc(#loc173)
    %46 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc31)
    %47 = cir.call @_Znam(%46) : (!u64i) -> !cir.ptr<!void> loc(#loc32)
    %48 = cir.cast(bitcast, %47 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc174)
    %49 = cir.cast(bitcast, %48 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc174)
    cir.store %49, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc175)
    cir.br ^bb10 loc(#loc176)
  ^bb10:  // pred: ^bb9
    %50 = cir.const #cir.int<0> : !s32i loc(#loc38)
    %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc38)
    cir.store %51, %1 : !u64i, !cir.ptr<!u64i> loc(#loc177)
    cir.br ^bb11 loc(#loc176)
  ^bb11:  // 2 preds: ^bb10, ^bb15
    %52 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc40)
    %53 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc41)
    %55 = cir.cmp(lt, %52, %54) : !u64i, !cir.bool loc(#loc178)
    cir.brcond %55 ^bb12, ^bb16 loc(#loc178)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc179)
  ^bb13:  // pred: ^bb12
    %56 = cir.const #cir.int<0> : !s32i loc(#loc43)
    %57 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
    %58 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc45)
    %59 = cir.ptr_stride(%57 : !cir.ptr<!s32i>, %58 : !u64i), !cir.ptr<!s32i> loc(#loc46)
    cir.store %56, %59 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.br ^bb14 loc(#loc37)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc37)
  ^bb15:  // pred: ^bb14
    %60 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc47)
    %61 = cir.unary(inc, %60) : !u64i, !u64i loc(#loc48)
    cir.store %61, %1 : !u64i, !cir.ptr<!u64i> loc(#loc181)
    cir.br ^bb11 loc(#loc176)
  ^bb16:  // pred: ^bb11
    cir.br ^bb17 loc(#loc37)
  ^bb17:  // pred: ^bb16
    %62 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
    %63 = cir.const #cir.int<0> : !s32i loc(#loc50)
    %64 = cir.ptr_stride(%62 : !cir.ptr<!s32i>, %63 : !s32i), !cir.ptr<!s32i> loc(#loc51)
    %65 = cir.load %64 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    cir.call @printIntLine(%65) : (!s32i) -> () loc(#loc52)
    %66 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
    cir.delete.array %66 : <!s32i> loc(#loc53)
    cir.br ^bb18 loc(#loc26)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc8)
  } loc(#loc161)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc182)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc56)
  cir.func internal private @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04L8goodG2B1Ev() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc184)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc185)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc186)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc187)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc66)
    %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc67)
    cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    cir.br ^bb1 loc(#loc189)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.int<0> : !s32i loc(#loc71)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc71)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc190)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc56)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    cir.br ^bb4 loc(#loc73)
  ^bb3:  // pred: ^bb1
    %10 = cir.const #cir.int<20> : !s32i loc(#loc76)
    cir.store %10, %3 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    cir.br ^bb4 loc(#loc70)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc70)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc192)
  ^bb6:  // pred: ^bb5
    %11 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc80)
    %13 = cir.const #cir.int<4> : !u64i loc(#loc193)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc194)
    cir.store %14, %0 : !u64i, !cir.ptr<!u64i> loc(#loc195)
    %15 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc84)
    %16 = cir.call @_Znam(%15) : (!u64i) -> !cir.ptr<!void> loc(#loc85)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc196)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc196)
    cir.store %18, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc197)
    cir.br ^bb7 loc(#loc198)
  ^bb7:  // pred: ^bb6
    %19 = cir.const #cir.int<0> : !s32i loc(#loc91)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc91)
    cir.store %20, %1 : !u64i, !cir.ptr<!u64i> loc(#loc199)
    cir.br ^bb8 loc(#loc198)
  ^bb8:  // 2 preds: ^bb7, ^bb12
    %21 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc93)
    %22 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc94)
    %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc200)
    cir.brcond %24 ^bb9, ^bb13 loc(#loc200)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc201)
  ^bb10:  // pred: ^bb9
    %25 = cir.const #cir.int<0> : !s32i loc(#loc96)
    %26 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc97)
    %27 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc98)
    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !u64i), !cir.ptr<!s32i> loc(#loc99)
    cir.store %25, %28 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    cir.br ^bb11 loc(#loc90)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc90)
  ^bb12:  // pred: ^bb11
    %29 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc100)
    %30 = cir.unary(inc, %29) : !u64i, !u64i loc(#loc101)
    cir.store %30, %1 : !u64i, !cir.ptr<!u64i> loc(#loc203)
    cir.br ^bb8 loc(#loc198)
  ^bb13:  // pred: ^bb8
    cir.br ^bb14 loc(#loc90)
  ^bb14:  // pred: ^bb13
    %31 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc102)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc103)
    %33 = cir.ptr_stride(%31 : !cir.ptr<!s32i>, %32 : !s32i), !cir.ptr<!s32i> loc(#loc104)
    %34 = cir.load %33 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    cir.call @printIntLine(%34) : (!s32i) -> () loc(#loc105)
    %35 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc106)
    cir.delete.array %35 : <!s32i> loc(#loc106)
    cir.br ^bb15 loc(#loc79)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc58)
  } loc(#loc183)
  cir.func internal private @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04L8goodG2B2Ev() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc205)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc206)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc207)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc208)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc116)
    %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc117)
    cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    cir.br ^bb1 loc(#loc210)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.int<1> : !s32i loc(#loc121)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc121)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc211)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<20> : !s32i loc(#loc123)
    cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    cir.br ^bb3 loc(#loc120)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc120)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc213)
  ^bb5:  // pred: ^bb4
    %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc127)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc214)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc215)
    cir.store %12, %0 : !u64i, !cir.ptr<!u64i> loc(#loc216)
    %13 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc131)
    %14 = cir.call @_Znam(%13) : (!u64i) -> !cir.ptr<!void> loc(#loc132)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc217)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc217)
    cir.store %16, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc218)
    cir.br ^bb6 loc(#loc219)
  ^bb6:  // pred: ^bb5
    %17 = cir.const #cir.int<0> : !s32i loc(#loc138)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc138)
    cir.store %18, %1 : !u64i, !cir.ptr<!u64i> loc(#loc220)
    cir.br ^bb7 loc(#loc219)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %19 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc140)
    %20 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc141)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc141)
    %22 = cir.cmp(lt, %19, %21) : !u64i, !cir.bool loc(#loc221)
    cir.brcond %22 ^bb8, ^bb12 loc(#loc221)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc222)
  ^bb9:  // pred: ^bb8
    %23 = cir.const #cir.int<0> : !s32i loc(#loc143)
    %24 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc144)
    %25 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc145)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !u64i), !cir.ptr<!s32i> loc(#loc146)
    cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    cir.br ^bb10 loc(#loc137)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc137)
  ^bb11:  // pred: ^bb10
    %27 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc147)
    %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc148)
    cir.store %28, %1 : !u64i, !cir.ptr<!u64i> loc(#loc224)
    cir.br ^bb7 loc(#loc219)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc137)
  ^bb13:  // pred: ^bb12
    %29 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc149)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc150)
    %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc151)
    %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc152)
    %33 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc153)
    cir.delete.array %33 : <!s32i> loc(#loc153)
    cir.br ^bb14 loc(#loc126)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc108)
  } loc(#loc204)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_044goodEv() extra(#fn_attr1) {
    cir.call @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04L8goodG2B1Ev() : () -> () loc(#loc156)
    cir.call @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04L8goodG2B2Ev() : () -> () loc(#loc157)
    cir.return loc(#loc155)
  } loc(#loc225)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc4 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":30:1)
#loc8 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":53:1)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":41:9)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":41:16)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":41:26)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":42:9)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":42:14)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":32:5)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":32:9)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":34:13)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":34:12)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":34:5)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":35:5)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":39:5)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":35:8)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":36:5)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":38:9)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":40:5)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":52:5)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":44:21)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":44:28)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":44:38)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":44:9)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":45:37)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":30:6)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":45:28)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":45:46)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":45:9)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":46:9)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":49:9)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":46:18)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":46:14)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":46:21)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":46:33)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":47:9)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":48:29)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":48:13)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":48:24)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":48:25)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":46:40)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":46:39)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":50:22)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":50:33)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":50:34)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":50:9)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":51:19)
#loc54 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc55 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":68:19)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":60:1)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":88:1)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":76:9)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":76:16)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":76:26)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":77:9)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":77:14)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":62:5)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":62:9)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":64:13)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":64:12)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":64:5)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":65:5)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":74:5)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":65:8)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":66:5)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":69:5)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":71:5)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":68:9)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":73:16)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":73:9)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":75:5)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":87:5)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":79:21)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":79:28)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":79:38)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":79:9)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":80:37)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":60:13)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":80:28)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":80:46)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":80:9)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":81:9)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":84:9)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":81:18)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":81:14)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":81:21)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":81:33)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":82:9)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":83:29)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":83:13)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":83:24)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":83:25)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":81:40)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":81:39)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":85:22)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":85:33)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":85:34)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":85:9)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":86:19)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":91:1)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":114:1)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":102:9)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":102:16)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":102:26)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":103:9)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":103:14)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":93:5)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":93:9)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":95:13)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":95:12)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":95:5)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":96:5)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":100:5)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":96:8)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":97:5)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":99:16)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":99:9)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":101:5)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":113:5)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":105:21)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":105:28)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":105:38)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":105:9)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":106:37)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":91:13)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":106:28)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":106:46)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":106:9)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":107:9)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":110:9)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":107:18)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":107:14)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":107:21)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":107:33)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":108:9)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":109:29)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":109:13)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":109:24)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":109:25)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":107:40)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":107:39)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":111:22)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":111:33)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":111:34)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":111:9)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":112:19)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":116:1)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":120:1)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":118:5)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_04.cpp":119:5)
#loc158 = loc(fused[#loc1, #loc2])
#loc159 = loc(fused[#loc3, #loc4])
#loc160 = loc(fused[#loc5, #loc6])
#loc161 = loc(fused[#loc7, #loc8])
#loc162 = loc(fused[#loc9, #loc10])
#loc163 = loc(fused[#loc9, #loc11])
#loc164 = loc(fused[#loc12, #loc13])
#loc165 = loc(fused[#loc14, #loc15])
#loc166 = loc(fused[#loc18, #loc16])
#loc167 = loc(fused[#loc19, #loc20])
#loc168 = loc(fused[#loc22, #loc20])
#loc169 = loc(fused[#loc24, #loc23])
#loc170 = loc(fused[#loc25, #loc26])
#loc171 = loc(fused[#loc28, #loc29])
#loc172 = loc(fused[#loc27, #loc29])
#loc173 = loc(fused[#loc30, #loc29])
#loc174 = loc(fused[#loc33, #loc34])
#loc175 = loc(fused[#loc35, #loc34])
#loc176 = loc(fused[#loc36, #loc37])
#loc177 = loc(fused[#loc39, #loc38])
#loc178 = loc(fused[#loc40, #loc41])
#loc179 = loc(fused[#loc42, #loc37])
#loc180 = loc(fused[#loc44, #loc43])
#loc181 = loc(fused[#loc48, #loc47])
#loc182 = loc(fused[#loc54, #loc55])
#loc183 = loc(fused[#loc57, #loc58])
#loc184 = loc(fused[#loc59, #loc60])
#loc185 = loc(fused[#loc59, #loc61])
#loc186 = loc(fused[#loc62, #loc63])
#loc187 = loc(fused[#loc64, #loc65])
#loc188 = loc(fused[#loc68, #loc66])
#loc189 = loc(fused[#loc69, #loc70])
#loc190 = loc(fused[#loc72, #loc73, #loc74, #loc70])
#loc191 = loc(fused[#loc77, #loc76])
#loc192 = loc(fused[#loc78, #loc79])
#loc193 = loc(fused[#loc81, #loc82])
#loc194 = loc(fused[#loc80, #loc82])
#loc195 = loc(fused[#loc83, #loc82])
#loc196 = loc(fused[#loc86, #loc87])
#loc197 = loc(fused[#loc88, #loc87])
#loc198 = loc(fused[#loc89, #loc90])
#loc199 = loc(fused[#loc92, #loc91])
#loc200 = loc(fused[#loc93, #loc94])
#loc201 = loc(fused[#loc95, #loc90])
#loc202 = loc(fused[#loc97, #loc96])
#loc203 = loc(fused[#loc101, #loc100])
#loc204 = loc(fused[#loc107, #loc108])
#loc205 = loc(fused[#loc109, #loc110])
#loc206 = loc(fused[#loc109, #loc111])
#loc207 = loc(fused[#loc112, #loc113])
#loc208 = loc(fused[#loc114, #loc115])
#loc209 = loc(fused[#loc118, #loc116])
#loc210 = loc(fused[#loc119, #loc120])
#loc211 = loc(fused[#loc122, #loc120])
#loc212 = loc(fused[#loc124, #loc123])
#loc213 = loc(fused[#loc125, #loc126])
#loc214 = loc(fused[#loc128, #loc129])
#loc215 = loc(fused[#loc127, #loc129])
#loc216 = loc(fused[#loc130, #loc129])
#loc217 = loc(fused[#loc133, #loc134])
#loc218 = loc(fused[#loc135, #loc134])
#loc219 = loc(fused[#loc136, #loc137])
#loc220 = loc(fused[#loc139, #loc138])
#loc221 = loc(fused[#loc140, #loc141])
#loc222 = loc(fused[#loc142, #loc137])
#loc223 = loc(fused[#loc144, #loc143])
#loc224 = loc(fused[#loc148, #loc147])
#loc225 = loc(fused[#loc154, #loc155])
