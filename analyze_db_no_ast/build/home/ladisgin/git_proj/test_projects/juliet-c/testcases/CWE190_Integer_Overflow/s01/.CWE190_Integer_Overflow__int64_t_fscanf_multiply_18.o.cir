!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc106)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc107)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc108)
  cir.func private  @printLongLongLine(!s64i) loc(#loc109)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_fscanf_multiply_18_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc111)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc13)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc112)
    cir.goto "source" loc(#loc113)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc17)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc18)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc107)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc19)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc108)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc108)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc18)
    cir.goto "sink" loc(#loc114)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc22)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc25)
      %9 = cir.const #cir.int<0> : !s32i loc(#loc26)
      %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc26)
      %11 = cir.cmp(gt, %8, %10) : !s64i, !s32i loc(#loc116)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc27)
      cir.if %12 {
        %13 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc118)
        %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc31)
        %15 = cir.const #cir.int<2> : !s32i loc(#loc30)
        %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc30)
        %17 = cir.binop(mul, %14, %16) nsw : !s64i loc(#loc31)
        cir.store %17, %13 : !s64i, !cir.ptr<!s64i> loc(#loc118)
        %18 = cir.load %13 : !cir.ptr<!s64i>, !s64i loc(#loc32)
        cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc33)
      } loc(#loc117)
    } loc(#loc115)
    cir.return loc(#loc10)
  } loc(#loc110)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_fscanf_multiply_18_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc120)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc121)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc119)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc122)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc42)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc124)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc47)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc125)
    cir.goto "source" loc(#loc126)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc51)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc52)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc107)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc53)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc127)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc127)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc52)
    cir.goto "sink" loc(#loc128)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc58)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc61)
      %9 = cir.const #cir.int<0> : !s32i loc(#loc62)
      %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc62)
      %11 = cir.cmp(gt, %8, %10) : !s64i, !s32i loc(#loc130)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc63)
      cir.if %12 {
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc67)
          %14 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc68)
          %15 = cir.const #cir.int<2> : !s32i loc(#loc69)
          %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc69)
          %17 = cir.binop(div, %14, %16) : !s64i loc(#loc133)
          %18 = cir.cmp(lt, %13, %17) : !s64i, !s32i loc(#loc134)
          %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc71)
          cir.if %19 {
            %20 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc136)
            %21 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc77)
            %22 = cir.const #cir.int<2> : !s32i loc(#loc76)
            %23 = cir.cast(integral, %22 : !s32i), !s64i loc(#loc76)
            %24 = cir.binop(mul, %21, %23) nsw : !s64i loc(#loc77)
            cir.store %24, %20 : !s64i, !cir.ptr<!s64i> loc(#loc136)
            %25 = cir.load %20 : !cir.ptr<!s64i>, !s64i loc(#loc78)
            cir.call @printLongLongLine(%25) : (!s64i) -> () loc(#loc79)
          } else {
            %20 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc42)
            %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc42)
            cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc80)
          } loc(#loc135)
        } loc(#loc132)
      } loc(#loc131)
    } loc(#loc129)
    cir.return loc(#loc44)
  } loc(#loc123)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc138)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc85)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc139)
    cir.goto "source" loc(#loc140)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc89)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc90)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc90)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc141)
    cir.goto "sink" loc(#loc142)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc94)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc97)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc98)
      %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc98)
      %7 = cir.cmp(gt, %4, %6) : !s64i, !s32i loc(#loc144)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc99)
      cir.if %8 {
        %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc146)
        %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc103)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc102)
        %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc102)
        %13 = cir.binop(mul, %10, %12) nsw : !s64i loc(#loc103)
        cir.store %13, %9 : !s64i, !cir.ptr<!s64i> loc(#loc146)
        %14 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc104)
        cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc105)
      } loc(#loc145)
    } loc(#loc143)
    cir.return loc(#loc82)
  } loc(#loc137)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":30:20)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":30:24)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":23:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":39:1)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":25:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":25:13)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":26:12)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":27:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":27:10)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":28:1)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":30:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":30:13)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":31:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":31:10)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":32:1)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":33:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":38:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":33:8)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":33:15)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":33:13)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":34:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":36:9)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":36:33)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":36:26)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":37:27)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":37:9)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":90:1)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":94:1)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":92:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":92:13)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":93:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":93:13)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":66:23)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":46:1)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":69:1)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":48:5)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":48:13)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":49:12)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":49:5)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":50:5)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":50:10)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":51:1)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":53:5)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":53:13)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":53:20)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":53:24)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":54:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":54:10)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":55:1)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":56:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":68:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":56:8)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":56:15)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":56:13)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":57:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":59:9)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":67:9)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":59:13)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":59:21)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":59:31)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":59:32)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":59:18)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":60:9)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":63:9)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":65:9)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":61:13)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":61:37)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":61:30)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":62:31)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":62:13)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":66:13)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":72:1)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":88:1)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":74:5)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":74:13)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":75:12)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":75:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":76:5)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":76:10)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":77:1)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":79:12)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":79:5)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":80:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":80:10)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":81:1)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":82:5)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":87:5)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":82:8)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":82:15)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":82:13)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":83:5)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":85:9)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":85:33)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":85:26)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":86:27)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_18.c":86:9)
#loc106 = loc(fused[#loc1, #loc2])
#loc107 = loc(fused[#loc3, #loc4])
#loc108 = loc(fused[#loc5, #loc6])
#loc109 = loc(fused[#loc7, #loc8])
#loc110 = loc(fused[#loc9, #loc10])
#loc111 = loc(fused[#loc11, #loc12])
#loc112 = loc(fused[#loc14, #loc13])
#loc113 = loc(fused[#loc15, #loc16])
#loc114 = loc(fused[#loc20, #loc21])
#loc115 = loc(fused[#loc23, #loc24])
#loc116 = loc(fused[#loc25, #loc26])
#loc117 = loc(fused[#loc28, #loc24])
#loc118 = loc(fused[#loc29, #loc30])
#loc119 = loc(fused[#loc34, #loc35])
#loc120 = loc(fused[#loc36, #loc37])
#loc121 = loc(fused[#loc38, #loc39])
#loc122 = loc(fused[#loc40, #loc41])
#loc123 = loc(fused[#loc43, #loc44])
#loc124 = loc(fused[#loc45, #loc46])
#loc125 = loc(fused[#loc48, #loc47])
#loc126 = loc(fused[#loc49, #loc50])
#loc127 = loc(fused[#loc54, #loc55])
#loc128 = loc(fused[#loc56, #loc57])
#loc129 = loc(fused[#loc59, #loc60])
#loc130 = loc(fused[#loc61, #loc62])
#loc131 = loc(fused[#loc64, #loc60])
#loc132 = loc(fused[#loc65, #loc66])
#loc133 = loc(fused[#loc68, #loc69])
#loc134 = loc(fused[#loc67, #loc70])
#loc135 = loc(fused[#loc72, #loc73, #loc74, #loc66])
#loc136 = loc(fused[#loc75, #loc76])
#loc137 = loc(fused[#loc81, #loc82])
#loc138 = loc(fused[#loc83, #loc84])
#loc139 = loc(fused[#loc86, #loc85])
#loc140 = loc(fused[#loc87, #loc88])
#loc141 = loc(fused[#loc91, #loc90])
#loc142 = loc(fused[#loc92, #loc93])
#loc143 = loc(fused[#loc95, #loc96])
#loc144 = loc(fused[#loc97, #loc98])
#loc145 = loc(fused[#loc100, #loc96])
#loc146 = loc(fused[#loc101, #loc102])
