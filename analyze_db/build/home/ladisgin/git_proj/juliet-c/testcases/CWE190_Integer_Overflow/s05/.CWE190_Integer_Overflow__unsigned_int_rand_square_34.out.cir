!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":36:26)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":109:10)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":109:14)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":109:20)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":109:32)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":78:26)
!ty_CWE190_Integer_Overflow__unsigned_int_rand_square_34_unionType = !cir.struct<union "CWE190_Integer_Overflow__unsigned_int_rand_square_34_unionType" {!u32i, !u32i}>
#loc143 = loc(fused[#loc48, #loc49])
#loc144 = loc(fused[#loc50, #loc51])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc123)
  cir.func private @printUnsignedLine(!u32i) loc(#loc124)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_square_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc126)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc127)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc128)
    %3 = cir.alloca !ty_CWE190_Integer_Overflow__unsigned_int_rand_square_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__unsigned_int_rand_square_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc129)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc15)
    %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc15)
    cir.store %5, %2 : !u32i, !cir.ptr<!u32i> loc(#loc130)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc17)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %9 ^bb1, ^bb2 loc(#loc17)
  ^bb1:  // pred: ^bb0
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc17)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc17)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc17)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc17)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc17)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc17)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc17)
    cir.br ^bb3(%21 : !u32i) loc(#loc17)
  ^bb2:  // pred: ^bb0
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc17)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc17)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc17)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc17)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc17)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc17)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc17)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc17)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc17)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc17)
    cir.br ^bb3(%37 : !u32i) loc(#loc17)
  ^bb3(%38: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":36:26)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc17)
    %40 = cir.cast(integral, %39 : !s32i), !u32i loc(#loc17)
    cir.store %40, %2 : !u32i, !cir.ptr<!u32i> loc(#loc131)
    %41 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc19)
    %42 = cir.get_member %3[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__unsigned_int_rand_square_34_unionType> -> !cir.ptr<!u32i> loc(#loc20)
    cir.store %41, %42 : !u32i, !cir.ptr<!u32i> loc(#loc132)
    cir.br ^bb5 loc(#loc133)
  ^bb5:  // pred: ^bb4
    %43 = cir.get_member %3[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__unsigned_int_rand_square_34_unionType> -> !cir.ptr<!u32i> loc(#loc24)
    %44 = cir.load %43 : !cir.ptr<!u32i>, !u32i loc(#loc8)
    cir.store %44, %0 : !u32i, !cir.ptr<!u32i> loc(#loc126)
    cir.br ^bb6 loc(#loc134)
  ^bb6:  // pred: ^bb5
    %45 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc27)
    %46 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc10)
    %47 = cir.binop(mul, %45, %46) : !u32i loc(#loc135)
    cir.store %47, %1 : !u32i, !cir.ptr<!u32i> loc(#loc127)
    %48 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc28)
    cir.call @printUnsignedLine(%48) : (!u32i) -> () loc(#loc29)
    cir.br ^bb7 loc(#loc26)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc23)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc6)
  } loc(#loc125)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_square_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc138)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc136)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc139)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc140)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc141)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc45)
  cir.func @main(%arg0: !s32i loc(fused[#loc48, #loc49]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc50, #loc51])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc143)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc144)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc47)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc52)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc52)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc53)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc54)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc54)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc55)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc42)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %8 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_rand_square_34_good : !cir.ptr<!cir.func<!void ()>> loc(#loc145)
    cir.call @CWE190_Integer_Overflow__unsigned_int_rand_square_34_good() : () -> () loc(#loc57)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc44)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %13 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_rand_square_34_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc146)
    cir.call @CWE190_Integer_Overflow__unsigned_int_rand_square_34_bad() : () -> () loc(#loc61)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc45)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc64)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc147)
    cir.return %17 : !s32i loc(#loc147)
  } loc(#loc142)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc149)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc150)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc151)
    %3 = cir.alloca !ty_CWE190_Integer_Overflow__unsigned_int_rand_square_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__unsigned_int_rand_square_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc152)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc76)
    %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc76)
    cir.store %5, %2 : !u32i, !cir.ptr<!u32i> loc(#loc153)
    %6 = cir.const #cir.int<2> : !s32i loc(#loc78)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc78)
    cir.store %7, %2 : !u32i, !cir.ptr<!u32i> loc(#loc154)
    %8 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc80)
    %9 = cir.get_member %3[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__unsigned_int_rand_square_34_unionType> -> !cir.ptr<!u32i> loc(#loc20)
    cir.store %8, %9 : !u32i, !cir.ptr<!u32i> loc(#loc155)
    cir.br ^bb1 loc(#loc156)
  ^bb1:  // pred: ^bb0
    %10 = cir.get_member %3[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__unsigned_int_rand_square_34_unionType> -> !cir.ptr<!u32i> loc(#loc24)
    %11 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc69)
    cir.store %11, %0 : !u32i, !cir.ptr<!u32i> loc(#loc149)
    cir.br ^bb2 loc(#loc157)
  ^bb2:  // pred: ^bb1
    %12 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc86)
    %13 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc71)
    %14 = cir.binop(mul, %12, %13) : !u32i loc(#loc158)
    cir.store %14, %1 : !u32i, !cir.ptr<!u32i> loc(#loc150)
    %15 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc87)
    cir.call @printUnsignedLine(%15) : (!u32i) -> () loc(#loc88)
    cir.br ^bb3 loc(#loc85)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc83)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc67)
  } loc(#loc148)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc90)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc160)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc161)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc162)
    %3 = cir.alloca !ty_CWE190_Integer_Overflow__unsigned_int_rand_square_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__unsigned_int_rand_square_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc163)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc101)
    %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc101)
    cir.store %5, %2 : !u32i, !cir.ptr<!u32i> loc(#loc164)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc103)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc103)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc103)
    cir.brcond %9 ^bb1, ^bb2 loc(#loc103)
  ^bb1:  // pred: ^bb0
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc103)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc103)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc103)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc103)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc103)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc103)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc103)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc103)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc103)
    cir.br ^bb3(%21 : !u32i) loc(#loc103)
  ^bb2:  // pred: ^bb0
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc103)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc103)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc103)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc103)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc103)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc103)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc103)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc103)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc103)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc103)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc103)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc103)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc103)
    cir.br ^bb3(%37 : !u32i) loc(#loc103)
  ^bb3(%38: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":78:26)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc103)
  ^bb4:  // pred: ^bb3
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc103)
    %40 = cir.cast(integral, %39 : !s32i), !u32i loc(#loc103)
    cir.store %40, %2 : !u32i, !cir.ptr<!u32i> loc(#loc165)
    %41 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc105)
    %42 = cir.get_member %3[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__unsigned_int_rand_square_34_unionType> -> !cir.ptr<!u32i> loc(#loc20)
    cir.store %41, %42 : !u32i, !cir.ptr<!u32i> loc(#loc166)
    cir.br ^bb5 loc(#loc167)
  ^bb5:  // pred: ^bb4
    %43 = cir.get_member %3[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__unsigned_int_rand_square_34_unionType> -> !cir.ptr<!u32i> loc(#loc24)
    %44 = cir.load %43 : !cir.ptr<!u32i>, !u32i loc(#loc94)
    cir.store %44, %0 : !u32i, !cir.ptr<!u32i> loc(#loc160)
    cir.br ^bb6 loc(#loc168)
  ^bb6:  // pred: ^bb5
    %45 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc111)
    %46 = cir.cast(integral, %45 : !u32i), !s64i loc(#loc111)
    %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc111)
    %48 = cir.abs %47 poison : !s32i loc(#loc112)
    %49 = cir.cast(integral, %48 : !s32i), !s64i loc(#loc112)
    %50 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc113)
    %51 = cir.const #cir.int<2147483647> : !s32i loc(#loc114)
    %52 = cir.cast(integral, %51 : !s32i), !u32i loc(#loc114)
    %53 = cir.const #cir.int<2> : !u32i loc(#loc114)
    %54 = cir.binop(mul, %52, %53) : !u32i loc(#loc114)
    %55 = cir.const #cir.int<1> : !u32i loc(#loc114)
    %56 = cir.binop(add, %54, %55) : !u32i loc(#loc114)
    %57 = cir.cast(int_to_float, %56 : !u32i), !cir.double loc(#loc114)
    %58 = cir.call @sqrt(%57) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc113)
    %59 = cir.cast(float_to_int, %58 : !cir.double), !s64i loc(#loc113)
    %60 = cir.cmp(lt, %49, %59) : !s64i, !cir.bool loc(#loc169)
    cir.brcond %60 ^bb7, ^bb8 loc(#loc170)
  ^bb7:  // pred: ^bb6
    %61 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc119)
    %62 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc96)
    %63 = cir.binop(mul, %61, %62) : !u32i loc(#loc171)
    cir.store %63, %1 : !u32i, !cir.ptr<!u32i> loc(#loc161)
    %64 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc120)
    cir.call @printUnsignedLine(%64) : (!u32i) -> () loc(#loc121)
    cir.br ^bb9 loc(#loc117)
  ^bb8:  // pred: ^bb6
    %65 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc90)
    %66 = cir.cast(array_to_ptrdecay, %65 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc90)
    cir.call @printLine(%66) : (!cir.ptr<!s8i>) -> () loc(#loc122)
    cir.br ^bb9 loc(#loc110)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc110)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc108)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc92)
  } loc(#loc159)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":30:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":46:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":39:9)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":39:37)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":42:13)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":42:42)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":32:5)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":32:18)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":33:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":33:68)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":34:12)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":34:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":36:5)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":37:26)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":24:18)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":37:5)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":38:5)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":45:5)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":25:18)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":40:9)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":44:9)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":42:35)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":43:31)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":43:13)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":95:1)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":99:1)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":97:5)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":97:13)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":98:5)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":98:13)
#loc36 = loc("/usr/include/stdlib.h":575:1)
#loc37 = loc("/usr/include/stdlib.h":575:41)
#loc38 = loc("/usr/include/time.h":76:1)
#loc39 = loc("/usr/include/time.h":76:38)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":114:15)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":116:15)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":119:15)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":121:15)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":109:1)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":124:1)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":110:1)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":112:27)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":112:22)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":112:5)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":114:5)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":115:5)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":115:63)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":116:5)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":119:5)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":120:5)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":120:62)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":121:5)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":123:12)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":123:5)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":53:1)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":69:1)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":62:9)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":62:37)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":65:13)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":65:42)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":55:5)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":55:18)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":56:5)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":56:68)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":57:12)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":57:5)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":59:12)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":59:5)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":60:26)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":60:5)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":61:5)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":68:5)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":63:9)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":67:9)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":65:35)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":66:31)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":66:13)
#loc89 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":90:23)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":72:1)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":93:1)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":81:9)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":81:37)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":85:13)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":85:42)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":74:5)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":74:18)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":75:5)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":75:68)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":76:12)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":76:5)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":78:5)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":79:26)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":79:5)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":80:5)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":92:5)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":83:9)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":91:9)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":83:23)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":83:13)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":83:37)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":83:50)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":83:58)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":84:9)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":87:9)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":89:9)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":85:35)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":86:31)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":86:13)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_34.c":90:13)
#loc123 = loc(fused[#loc1, #loc2])
#loc124 = loc(fused[#loc3, #loc4])
#loc125 = loc(fused[#loc5, #loc6])
#loc126 = loc(fused[#loc7, #loc8])
#loc127 = loc(fused[#loc9, #loc10])
#loc128 = loc(fused[#loc11, #loc12])
#loc129 = loc(fused[#loc13, #loc14])
#loc130 = loc(fused[#loc16, #loc15])
#loc131 = loc(fused[#loc18, #loc17])
#loc132 = loc(fused[#loc21, #loc19])
#loc133 = loc(fused[#loc22, #loc23])
#loc134 = loc(fused[#loc25, #loc26])
#loc135 = loc(fused[#loc27, #loc10])
#loc136 = loc(fused[#loc30, #loc31])
#loc137 = loc(fused[#loc32, #loc33])
#loc138 = loc(fused[#loc34, #loc35])
#loc139 = loc(fused[#loc36, #loc37])
#loc140 = loc(fused[#loc38, #loc39])
#loc141 = loc(fused[#loc40, #loc41])
#loc142 = loc(fused[#loc46, #loc47])
#loc145 = loc(fused[#loc57, #loc58])
#loc146 = loc(fused[#loc61, #loc62])
#loc147 = loc(fused[#loc65, #loc64])
#loc148 = loc(fused[#loc66, #loc67])
#loc149 = loc(fused[#loc68, #loc69])
#loc150 = loc(fused[#loc70, #loc71])
#loc151 = loc(fused[#loc72, #loc73])
#loc152 = loc(fused[#loc74, #loc75])
#loc153 = loc(fused[#loc77, #loc76])
#loc154 = loc(fused[#loc79, #loc78])
#loc155 = loc(fused[#loc81, #loc80])
#loc156 = loc(fused[#loc82, #loc83])
#loc157 = loc(fused[#loc84, #loc85])
#loc158 = loc(fused[#loc86, #loc71])
#loc159 = loc(fused[#loc91, #loc92])
#loc160 = loc(fused[#loc93, #loc94])
#loc161 = loc(fused[#loc95, #loc96])
#loc162 = loc(fused[#loc97, #loc98])
#loc163 = loc(fused[#loc99, #loc100])
#loc164 = loc(fused[#loc102, #loc101])
#loc165 = loc(fused[#loc104, #loc103])
#loc166 = loc(fused[#loc106, #loc105])
#loc167 = loc(fused[#loc107, #loc108])
#loc168 = loc(fused[#loc109, #loc110])
#loc169 = loc(fused[#loc112, #loc115])
#loc170 = loc(fused[#loc116, #loc117, #loc118, #loc110])
#loc171 = loc(fused[#loc119, #loc96])
