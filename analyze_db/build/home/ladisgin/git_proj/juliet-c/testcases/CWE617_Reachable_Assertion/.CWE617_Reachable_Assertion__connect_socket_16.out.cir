!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc133 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":151:10)
#loc134 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":151:14)
#loc135 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":151:20)
#loc136 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":151:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc216 = loc(fused[#loc133, #loc134])
#loc217 = loc(fused[#loc135, #loc136])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__connect_socket_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc166)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc167)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc168)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc169)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc170)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc171)
  cir.func private @close(!s32i) -> !s32i loc(#loc172)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc173)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc18)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"CWE617_Reachable_Assertion__connect_socket_16.c\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc18)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void CWE617_Reachable_Assertion__connect_socket_16_bad()\00" : !cir.array<!s8i x 57>> : !cir.array<!s8i x 57> {alignment = 1 : i64} loc(#loc18)
  cir.func no_proto @CWE617_Reachable_Assertion__connect_socket_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc175)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    cir.scope {
      cir.while {
        %4 = cir.const #cir.int<1> : !s32i loc(#loc28)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc28)
        cir.condition(%5) loc(#loc28)
      } do {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc179)
          %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc180)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc181)
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc182)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc36)
          %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc36)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc181)
          cir.scope {
            cir.do {
              %10 = cir.const #cir.int<2> : !s32i loc(#loc41)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc42)
              %12 = cir.const #cir.int<6> : !s32i loc(#loc43)
              %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc44)
              cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc184)
              cir.scope {
                %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc49)
                %53 = cir.const #cir.int<1> : !s32i loc(#loc50)
                %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc50)
                %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc186)
                cir.if %55 {
                  cir.break loc(#loc52)
                } loc(#loc187)
              } loc(#loc185)
              %14 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc188)
              %15 = cir.const #cir.int<0> : !s32i loc(#loc55)
              %16 = cir.const #cir.int<16> : !u64i loc(#loc189)
              cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc190)
              %17 = cir.const #cir.int<2> : !s32i loc(#loc60)
              %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc60)
              %19 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc61)
              cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc191)
              %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
              %22 = cir.call @inet_addr(%21) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc63)
              %23 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc64)
              %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc65)
              cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc192)
              %25 = cir.const #cir.int<27015> : !s32i loc(#loc68)
              %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc68)
              %27 = cir.call @htons(%26) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc69)
              %28 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
              cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc193)
              cir.scope {
                %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc75)
                %53 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc195)
                %54 = cir.const #cir.int<16> : !u64i loc(#loc196)
                %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc196)
                %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc80)
                %57 = cir.const #cir.int<1> : !s32i loc(#loc81)
                %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc81)
                %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc197)
                cir.if %59 {
                  cir.break loc(#loc83)
                } loc(#loc198)
              } loc(#loc194)
              %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc84)
              %30 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc85)
              %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc85)
              %32 = cir.const #cir.int<3> : !s32i loc(#loc86)
              %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc86)
              %34 = cir.const #cir.int<4> : !u64i loc(#loc86)
              %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc86)
              %36 = cir.const #cir.int<2> : !s32i loc(#loc86)
              %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc86)
              %38 = cir.binop(add, %35, %37) : !u64i loc(#loc86)
              %39 = cir.const #cir.int<1> : !s32i loc(#loc87)
              %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc87)
              %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc199)
              %42 = cir.const #cir.int<0> : !s32i loc(#loc88)
              %43 = cir.call @recv(%29, %31, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc89)
              %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc89)
              cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc200)
              cir.scope {
                %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc94)
                %53 = cir.const #cir.int<1> : !s32i loc(#loc95)
                %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc95)
                %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc202)
                %56 = cir.ternary(%55, true {
                  %57 = cir.const #true loc(#loc96)
                  cir.yield %57 : !cir.bool loc(#loc96)
                }, false {
                  %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                  %58 = cir.const #cir.int<0> : !s32i loc(#loc98)
                  %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc203)
                  %60 = cir.ternary(%59, true {
                    %61 = cir.const #true loc(#loc96)
                    cir.yield %61 : !cir.bool loc(#loc96)
                  }, false {
                    %61 = cir.const #false loc(#loc96)
                    cir.yield %61 : !cir.bool loc(#loc96)
                  }) : (!cir.bool) -> !cir.bool loc(#loc96)
                  cir.yield %60 : !cir.bool loc(#loc96)
                }) : (!cir.bool) -> !cir.bool loc(#loc96)
                cir.if %56 {
                  cir.break loc(#loc100)
                } loc(#loc204)
              } loc(#loc201)
              %45 = cir.const #cir.int<0> : !s32i loc(#loc101)
              %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc101)
              %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc102)
              %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc103)
              %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc103)
              cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc205)
              %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc104)
              %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc105)
              cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
              cir.yield loc(#loc40)
            } while {
              %10 = cir.const #cir.int<0> : !s32i loc(#loc108)
              %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc108)
              cir.condition(%11) loc(#loc108)
            } loc(#loc183)
          } loc(#loc183)
          cir.scope {
            %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc111)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc112)
            %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc112)
            %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc208)
            cir.if %13 {
              %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc114)
              %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc115)
            } loc(#loc209)
          } loc(#loc207)
        } loc(#loc178)
        cir.break loc(#loc116)
      } loc(#loc177)
    } loc(#loc177)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc18)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc18)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc18)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc18)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc18)
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc18)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc18)
          %11 = cir.const #cir.int<113> : !s32i loc(#loc18)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc18)
          %13 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 57>> loc(#loc18)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 57>>), !cir.ptr<!s8i> loc(#loc18)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc18)
        } loc(#loc18)
      } loc(#loc18)
    } loc(#loc18)
    cir.return loc(#loc20)
  } loc(#loc174)
  cir.func no_proto @CWE617_Reachable_Assertion__connect_socket_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc119)
    cir.return loc(#loc118)
  } loc(#loc210)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc212)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc213)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc214)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc127)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc128)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc129)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc130)
  cir.func @main(%arg0: !s32i loc(fused[#loc133, #loc134]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc135, #loc136])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc216)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc217)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc132)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc137)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc138)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc139)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc139)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc140)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc127)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc127)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc141)
    %8 = cir.get_global @CWE617_Reachable_Assertion__connect_socket_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call @CWE617_Reachable_Assertion__connect_socket_16_good() : () -> () loc(#loc142)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc128)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc128)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc144)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc129)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc129)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc145)
    %13 = cir.get_global @CWE617_Reachable_Assertion__connect_socket_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call @CWE617_Reachable_Assertion__connect_socket_16_bad() : () -> () loc(#loc146)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc130)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc130)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc148)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc149)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc220)
    cir.return %17 : !s32i loc(#loc220)
  } loc(#loc215)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc151)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc222)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc156)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc157)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    cir.scope {
      cir.while {
        %4 = cir.const #cir.int<1> : !s32i loc(#loc161)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc161)
        cir.condition(%5) loc(#loc161)
      } do {
        %4 = cir.const #cir.int<5> : !s32i loc(#loc162)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc163)
        %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc162)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
        cir.break loc(#loc165)
      } loc(#loc224)
    } loc(#loc224)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc151)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc151)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc151)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc151)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc151)
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc151)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc151)
          %11 = cir.const #cir.int<133> : !s32i loc(#loc151)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc151)
          %13 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc151)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc151)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc151)
        } loc(#loc151)
      } loc(#loc151)
    } loc(#loc151)
    cir.return loc(#loc153)
  } loc(#loc221)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__connect_socket_16.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":80:53)
#loc6 = loc("/usr/include/netinet/in.h":404:1)
#loc7 = loc("/usr/include/netinet/in.h":405:40)
#loc8 = loc("/usr/include/sys/socket.h":126:1)
#loc9 = loc("/usr/include/sys/socket.h":126:75)
#loc10 = loc("/usr/include/sys/socket.h":145:1)
#loc11 = loc("/usr/include/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("/usr/include/assert.h":67:1)
#loc17 = loc("/usr/include/assert.h":69:43)
#loc18 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":113:5)
#loc19 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":47:1)
#loc20 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":114:1)
#loc21 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":49:5)
#loc22 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":49:9)
#loc23 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":51:13)
#loc24 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":51:12)
#loc25 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":51:5)
#loc26 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":52:5)
#loc27 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":111:5)
#loc28 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":52:11)
#loc29 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":54:9)
#loc30 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":109:9)
#loc31 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":59:13)
#loc32 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":59:17)
#loc33 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":60:13)
#loc34 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":60:32)
#loc35 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":61:13)
#loc36 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":61:36)
#loc37 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":62:13)
#loc38 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":62:45)
#loc39 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":63:13)
#loc40 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":98:21)
#loc41 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":73:40)
#loc42 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":73:49)
#loc43 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":73:62)
#loc44 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":73:33)
#loc45 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":73:17)
#loc46 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":73:73)
#loc47 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":74:17)
#loc48 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":77:17)
#loc49 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":74:21)
#loc50 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":74:38)
#loc51 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":75:17)
#loc52 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":76:21)
#loc53 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":78:24)
#loc54 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":78:25)
#loc55 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":78:34)
#loc56 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":78:37)
#loc57 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":78:51)
#loc58 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":78:17)
#loc59 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":78:52)
#loc60 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":79:38)
#loc61 = loc("/usr/include/netinet/in.h":249:5)
#loc62 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":79:17)
#loc63 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":80:43)
#loc64 = loc("/usr/include/netinet/in.h":251:20)
#loc65 = loc("/usr/include/netinet/in.h":33:15)
#loc66 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":80:17)
#loc67 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":80:63)
#loc68 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":81:42)
#loc69 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":81:36)
#loc70 = loc("/usr/include/netinet/in.h":250:15)
#loc71 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":81:17)
#loc72 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":81:50)
#loc73 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":82:17)
#loc74 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":85:17)
#loc75 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":82:29)
#loc76 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":82:62)
#loc77 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":82:63)
#loc78 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":82:72)
#loc79 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":82:86)
#loc80 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":82:21)
#loc81 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":82:92)
#loc82 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":83:17)
#loc83 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":84:21)
#loc84 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":88:35)
#loc85 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":88:50)
#loc86 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":88:63)
#loc87 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":88:81)
#loc88 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":88:84)
#loc89 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":88:30)
#loc90 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":88:17)
#loc91 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":88:85)
#loc92 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":89:17)
#loc93 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":92:17)
#loc94 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":89:21)
#loc95 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":89:35)
#loc96 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":89:48)
#loc97 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":89:51)
#loc98 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":89:65)
#loc99 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":90:17)
#loc100 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":91:21)
#loc101 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":94:43)
#loc102 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":94:29)
#loc103 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":94:17)
#loc104 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":96:29)
#loc105 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":96:24)
#loc106 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":96:17)
#loc107 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":96:40)
#loc108 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":98:20)
#loc109 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":99:13)
#loc110 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":102:13)
#loc111 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":99:17)
#loc112 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":99:34)
#loc113 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":100:13)
#loc114 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":101:30)
#loc115 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":101:17)
#loc116 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":110:9)
#loc117 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":136:1)
#loc118 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":139:1)
#loc119 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":138:5)
#loc120 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":138:13)
#loc121 = loc("/usr/include/stdlib.h":575:1)
#loc122 = loc("/usr/include/stdlib.h":575:41)
#loc123 = loc("/usr/include/time.h":76:1)
#loc124 = loc("/usr/include/time.h":76:38)
#loc125 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc126 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc127 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":156:15)
#loc128 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":158:15)
#loc129 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":161:15)
#loc130 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":163:15)
#loc131 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":151:1)
#loc132 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":166:1)
#loc137 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":152:1)
#loc138 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":154:27)
#loc139 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":154:22)
#loc140 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":154:5)
#loc141 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":156:5)
#loc142 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":157:5)
#loc143 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":157:56)
#loc144 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":158:5)
#loc145 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":161:5)
#loc146 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":162:5)
#loc147 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":162:55)
#loc148 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":163:5)
#loc149 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":165:12)
#loc150 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":165:5)
#loc151 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":133:5)
#loc152 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":121:1)
#loc153 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":134:1)
#loc154 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":123:5)
#loc155 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":123:9)
#loc156 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":125:13)
#loc157 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":125:12)
#loc158 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":125:5)
#loc159 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":126:5)
#loc160 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":131:5)
#loc161 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":126:11)
#loc162 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":129:16)
#loc163 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":129:29)
#loc164 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":129:9)
#loc165 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":130:9)
#loc166 = loc(fused[#loc1, #loc2])
#loc167 = loc(fused[#loc3, #loc4])
#loc168 = loc(fused[#loc6, #loc7])
#loc169 = loc(fused[#loc8, #loc9])
#loc170 = loc(fused[#loc10, #loc11])
#loc171 = loc(fused[#loc12, #loc13])
#loc172 = loc(fused[#loc14, #loc15])
#loc173 = loc(fused[#loc16, #loc17])
#loc174 = loc(fused[#loc19, #loc20])
#loc175 = loc(fused[#loc21, #loc22])
#loc176 = loc(fused[#loc25, #loc23])
#loc177 = loc(fused[#loc26, #loc27])
#loc178 = loc(fused[#loc29, #loc30])
#loc179 = loc(fused[#loc31, #loc32])
#loc180 = loc(fused[#loc33, #loc34])
#loc181 = loc(fused[#loc35, #loc36])
#loc182 = loc(fused[#loc37, #loc38])
#loc183 = loc(fused[#loc39, #loc40])
#loc184 = loc(fused[#loc45, #loc46])
#loc185 = loc(fused[#loc47, #loc48])
#loc186 = loc(fused[#loc49, #loc50])
#loc187 = loc(fused[#loc51, #loc48])
#loc188 = loc(fused[#loc53, #loc54])
#loc189 = loc(fused[#loc56, #loc57])
#loc190 = loc(fused[#loc58, #loc59])
#loc191 = loc(fused[#loc62, #loc60])
#loc192 = loc(fused[#loc66, #loc67])
#loc193 = loc(fused[#loc71, #loc72])
#loc194 = loc(fused[#loc73, #loc74])
#loc195 = loc(fused[#loc76, #loc77])
#loc196 = loc(fused[#loc78, #loc79])
#loc197 = loc(fused[#loc80, #loc81])
#loc198 = loc(fused[#loc82, #loc74])
#loc199 = loc(fused[#loc86, #loc87])
#loc200 = loc(fused[#loc90, #loc91])
#loc201 = loc(fused[#loc92, #loc93])
#loc202 = loc(fused[#loc94, #loc95])
#loc203 = loc(fused[#loc97, #loc98])
#loc204 = loc(fused[#loc99, #loc93])
#loc205 = loc(fused[#loc103, #loc101])
#loc206 = loc(fused[#loc106, #loc107])
#loc207 = loc(fused[#loc109, #loc110])
#loc208 = loc(fused[#loc111, #loc112])
#loc209 = loc(fused[#loc113, #loc110])
#loc210 = loc(fused[#loc117, #loc118])
#loc211 = loc(fused[#loc119, #loc120])
#loc212 = loc(fused[#loc121, #loc122])
#loc213 = loc(fused[#loc123, #loc124])
#loc214 = loc(fused[#loc125, #loc126])
#loc215 = loc(fused[#loc131, #loc132])
#loc218 = loc(fused[#loc142, #loc143])
#loc219 = loc(fused[#loc146, #loc147])
#loc220 = loc(fused[#loc150, #loc149])
#loc221 = loc(fused[#loc152, #loc153])
#loc222 = loc(fused[#loc154, #loc155])
#loc223 = loc(fused[#loc158, #loc156])
#loc224 = loc(fused[#loc159, #loc160])
#loc225 = loc(fused[#loc164, #loc163])
