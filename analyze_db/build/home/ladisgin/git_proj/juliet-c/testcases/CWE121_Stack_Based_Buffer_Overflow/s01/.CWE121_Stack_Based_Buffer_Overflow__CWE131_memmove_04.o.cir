!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc96)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc98)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc99)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc9)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc100)
    cir.br ^bb1 loc(#loc101)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc102)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<10> : !s32i loc(#loc15)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc15)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc15)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc15)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc15)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc103)
    cir.br ^bb3 loc(#loc12)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc12)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc104)
  ^bb5:  // pred: ^bb4
    %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc98)
    cir.store %10, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc98)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc19)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc19)
    %13 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc20)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc20)
    %15 = cir.const #cir.int<10> : !s32i loc(#loc21)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc21)
    %17 = cir.const #cir.int<4> : !u64i loc(#loc105)
    %18 = cir.binop(mul, %16, %17) : !u64i loc(#loc106)
    cir.libc.memmove %18 bytes from %14 to %12 : !cir.ptr<!void>, !u64i loc(#loc107)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc27)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc28)
    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc29)
    cir.br ^bb6 loc(#loc18)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc4)
  } loc(#loc97)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc109)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc110)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc108)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc111)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc38)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc113)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc114)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc45)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc115)
    cir.br ^bb1 loc(#loc116)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc49)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc49)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc117)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc38)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    cir.br ^bb4 loc(#loc51)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<10> : !s32i loc(#loc54)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc54)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc54)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc54)
    %11 = cir.alloca !u8i, !cir.ptr<!u8i>, %10 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc54)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc54)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc54)
    cir.store %13, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc118)
    cir.br ^bb4 loc(#loc48)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc48)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc119)
  ^bb6:  // pred: ^bb5
    %14 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc113)
    cir.store %14, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc113)
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc58)
    %17 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc59)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc59)
    %19 = cir.const #cir.int<10> : !s32i loc(#loc60)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc60)
    %21 = cir.const #cir.int<4> : !u64i loc(#loc120)
    %22 = cir.binop(mul, %20, %21) : !u64i loc(#loc121)
    cir.libc.memmove %22 bytes from %18 to %16 : !cir.ptr<!void>, !u64i loc(#loc122)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc66)
    %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc67)
    %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc68)
    cir.br ^bb7 loc(#loc57)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc40)
  } loc(#loc112)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc124)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc125)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc75)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc126)
    cir.br ^bb1 loc(#loc127)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc79)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc128)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<10> : !s32i loc(#loc81)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc81)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc81)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc81)
    %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc81)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc81)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc81)
    cir.store %11, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc129)
    cir.br ^bb3 loc(#loc78)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc78)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc130)
  ^bb5:  // pred: ^bb4
    %12 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc124)
    cir.store %12, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc124)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc85)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc85)
    %15 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc86)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc86)
    %17 = cir.const #cir.int<10> : !s32i loc(#loc87)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc87)
    %19 = cir.const #cir.int<4> : !u64i loc(#loc131)
    %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc132)
    cir.libc.memmove %20 bytes from %16 to %14 : !cir.ptr<!void>, !u64i loc(#loc133)
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc93)
    %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc94)
    %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc95)
    cir.br ^bb6 loc(#loc84)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc70)
  } loc(#loc123)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":28:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":43:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":38:9)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":38:28)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":30:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":30:11)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":31:12)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":31:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":32:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":36:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":32:8)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":33:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":35:23)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":35:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":37:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":42:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":40:17)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":40:23)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":40:31)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":40:34)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":40:44)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":40:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":40:45)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":41:22)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":41:27)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":41:28)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":41:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":90:1)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":94:1)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":92:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":92:14)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":93:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":93:14)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":57:19)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":50:1)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":70:1)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":65:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":65:28)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":52:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":52:11)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":53:12)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":53:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":54:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":63:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":54:8)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":55:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":58:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":60:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":57:9)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":62:23)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":62:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":64:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":69:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":67:17)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":67:23)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":67:31)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":67:34)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":67:44)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":67:9)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":67:45)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":68:22)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":68:27)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":68:28)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":68:9)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":73:1)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":88:1)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":83:9)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":83:28)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":75:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":75:11)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":76:12)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":76:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":77:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":81:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":77:8)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":78:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":80:23)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":80:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":82:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":87:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":85:17)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":85:23)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":85:31)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":85:34)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":85:44)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":85:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":85:45)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":86:22)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":86:27)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":86:28)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c":86:9)
#loc96 = loc(fused[#loc1, #loc2])
#loc97 = loc(fused[#loc3, #loc4])
#loc98 = loc(fused[#loc5, #loc6])
#loc99 = loc(fused[#loc7, #loc8])
#loc100 = loc(fused[#loc10, #loc9])
#loc101 = loc(fused[#loc11, #loc12])
#loc102 = loc(fused[#loc14, #loc12])
#loc103 = loc(fused[#loc16, #loc15])
#loc104 = loc(fused[#loc17, #loc18])
#loc105 = loc(fused[#loc22, #loc23])
#loc106 = loc(fused[#loc21, #loc23])
#loc107 = loc(fused[#loc24, #loc25])
#loc108 = loc(fused[#loc30, #loc31])
#loc109 = loc(fused[#loc32, #loc33])
#loc110 = loc(fused[#loc34, #loc35])
#loc111 = loc(fused[#loc36, #loc37])
#loc112 = loc(fused[#loc39, #loc40])
#loc113 = loc(fused[#loc41, #loc42])
#loc114 = loc(fused[#loc43, #loc44])
#loc115 = loc(fused[#loc46, #loc45])
#loc116 = loc(fused[#loc47, #loc48])
#loc117 = loc(fused[#loc50, #loc51, #loc52, #loc48])
#loc118 = loc(fused[#loc55, #loc54])
#loc119 = loc(fused[#loc56, #loc57])
#loc120 = loc(fused[#loc61, #loc62])
#loc121 = loc(fused[#loc60, #loc62])
#loc122 = loc(fused[#loc63, #loc64])
#loc123 = loc(fused[#loc69, #loc70])
#loc124 = loc(fused[#loc71, #loc72])
#loc125 = loc(fused[#loc73, #loc74])
#loc126 = loc(fused[#loc76, #loc75])
#loc127 = loc(fused[#loc77, #loc78])
#loc128 = loc(fused[#loc80, #loc78])
#loc129 = loc(fused[#loc82, #loc81])
#loc130 = loc(fused[#loc83, #loc84])
#loc131 = loc(fused[#loc88, #loc89])
#loc132 = loc(fused[#loc87, #loc89])
#loc133 = loc(fused[#loc90, #loc91])
