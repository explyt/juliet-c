!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc182)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc183)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc184)
  cir.func private  @printIntLine(!s32i) loc(#loc185)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc186)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc188)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc189)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc182)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc19)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc22)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc22)
        %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc192)
        cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc193)
        cir.scope {
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
          %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc28)
          %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !s32i loc(#loc195)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc29)
          cir.if %14 {
            %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc31)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc32)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc33)
            cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
          } loc(#loc196)
        } loc(#loc194)
      } loc(#loc191)
    } loc(#loc190)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc198)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc199)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc198)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc198)
      cir.scope {
        %12 = cir.const #cir.int<0> : !s32i loc(#loc42)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc42)
        cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc201)
        cir.for : cond {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc44)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc45)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc45)
          %17 = cir.cmp(lt, %14, %16) : !u64i, !s32i loc(#loc202)
          %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc46)
          cir.condition(%18) loc(#loc46)
        } body {
          cir.scope {
            %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc48)
            %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc49)
            %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !u64i), !cir.ptr<!s32i> loc(#loc49)
            %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc49)
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
            %19 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc51)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc52)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc204)
          } loc(#loc203)
          cir.yield loc(#loc41)
        } step {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc54)
          %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc55)
          cir.store %15, %3 : !u64i, !cir.ptr<!u64i> loc(#loc205)
          cir.yield loc(#loc200)
        } loc(#loc200)
      } loc(#loc200)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc56)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc57)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc58)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc56)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc59)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc60)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc61)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc61)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc60)
    } loc(#loc197)
    cir.return loc(#loc12)
  } loc(#loc187)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc64)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc66)
    cir.return loc(#loc63)
  } loc(#loc206)
  cir.global "private"  external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc209)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc210)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc72)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc212)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc77)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc213)
    cir.scope {
      %2 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc209)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc81)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc81)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc72)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc72)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc85)
      } else {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc86)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc87)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc87)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc216)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc217)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc86)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc218)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc219)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc94)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc95)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc95)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !s32i loc(#loc221)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc96)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc98)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc99)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc100)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc98)
          } loc(#loc222)
        } loc(#loc220)
      } loc(#loc215)
    } loc(#loc214)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc224)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc225)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc224)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc224)
      cir.scope {
        %12 = cir.const #cir.int<0> : !s32i loc(#loc109)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc109)
        cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc227)
        cir.for : cond {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc111)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc112)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc112)
          %17 = cir.cmp(lt, %14, %16) : !u64i, !s32i loc(#loc228)
          %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc113)
          cir.condition(%18) loc(#loc113)
        } body {
          cir.scope {
            %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc115)
            %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc116)
            %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !u64i), !cir.ptr<!s32i> loc(#loc116)
            %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc116)
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
            %19 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc118)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc119)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc230)
          } loc(#loc229)
          cir.yield loc(#loc108)
        } step {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc121)
          %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc122)
          cir.store %15, %3 : !u64i, !cir.ptr<!u64i> loc(#loc231)
          cir.yield loc(#loc226)
        } loc(#loc226)
      } loc(#loc226)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc123)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc124)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc125)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc123)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc126)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc127)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc128)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc128)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc127)
    } loc(#loc223)
    cir.return loc(#loc74)
  } loc(#loc211)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc233)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc133)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc234)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc182)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc137)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc137)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc139)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc140)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc140)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc237)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc238)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc139)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc239)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc240)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc147)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc148)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc148)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !s32i loc(#loc242)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc149)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc151)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc152)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc153)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc151)
          } loc(#loc243)
        } loc(#loc241)
      } loc(#loc236)
    } loc(#loc235)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc245)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc246)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc245)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc245)
      cir.scope {
        %12 = cir.const #cir.int<0> : !s32i loc(#loc162)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc162)
        cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc248)
        cir.for : cond {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc164)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc165)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc165)
          %17 = cir.cmp(lt, %14, %16) : !u64i, !s32i loc(#loc249)
          %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc166)
          cir.condition(%18) loc(#loc166)
        } body {
          cir.scope {
            %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc168)
            %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc169)
            %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !u64i), !cir.ptr<!s32i> loc(#loc169)
            %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc169)
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc170)
            %19 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc171)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc172)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc251)
          } loc(#loc250)
          cir.yield loc(#loc161)
        } step {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc174)
          %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc175)
          cir.store %15, %3 : !u64i, !cir.ptr<!u64i> loc(#loc252)
          cir.yield loc(#loc247)
        } loc(#loc247)
      } loc(#loc247)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc176)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc177)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc178)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc176)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc179)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc180)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc181)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc181)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc180)
    } loc(#loc244)
    cir.return loc(#loc130)
  } loc(#loc232)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":21:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":42:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":23:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":23:11)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":24:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":24:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":25:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":30:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":25:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":26:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":28:23)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":28:30)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":28:32)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":28:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":29:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":29:37)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":29:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":29:21)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":29:18)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":29:27)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":29:28)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":29:34)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":29:33)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":31:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":41:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":32:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":32:28)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":33:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":33:16)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":35:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":38:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":35:18)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":35:14)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":35:21)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":35:25)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":35:23)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":36:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":37:30)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":37:23)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":37:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":37:18)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":37:19)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":37:31)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":35:30)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":35:29)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":39:22)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":39:27)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":39:28)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":39:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":40:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":40:14)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":101:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":105:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":103:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":103:14)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":104:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":104:14)
#loc68 = loc("../../../testcasesupport/std_testcase.h":117:1)
#loc69 = loc("../../../testcasesupport/std_testcase.h":117:12)
#loc70 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc71 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":56:19)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":49:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":75:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":51:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":51:11)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":52:12)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":52:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":53:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":63:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":53:8)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":54:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":57:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":59:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":56:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":61:23)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":61:30)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":61:33)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":61:43)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":61:44)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":61:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":62:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":62:37)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":62:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":62:21)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":62:18)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":62:27)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":62:28)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":62:34)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":62:33)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":64:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":74:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":65:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":65:28)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":66:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":66:16)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":68:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":71:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":68:18)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":68:14)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":68:21)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":68:25)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":68:23)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":69:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":70:30)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":70:23)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":70:13)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":70:18)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":70:19)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":70:31)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":68:30)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":68:29)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":72:22)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":72:27)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":72:28)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":72:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":73:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":73:14)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":78:1)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":99:1)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":80:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":80:11)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":81:12)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":81:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":82:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":87:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":82:8)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":83:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":85:23)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":85:30)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":85:33)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":85:43)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":85:44)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":85:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":86:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":86:37)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":86:13)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":86:21)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":86:18)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":86:27)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":86:28)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":86:34)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":86:33)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":88:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":98:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":89:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":89:28)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":90:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":90:16)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":92:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":95:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":92:18)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":92:14)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":92:21)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":92:25)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":92:23)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":93:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":94:30)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":94:23)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":94:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":94:18)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":94:19)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":94:31)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":92:30)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":92:29)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":96:22)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":96:27)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":96:28)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":96:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":97:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c":97:14)
#loc182 = loc(fused[#loc1, #loc2])
#loc183 = loc(fused[#loc3, #loc4])
#loc184 = loc(fused[#loc5, #loc6])
#loc185 = loc(fused[#loc7, #loc8])
#loc186 = loc(fused[#loc9, #loc10])
#loc187 = loc(fused[#loc11, #loc12])
#loc188 = loc(fused[#loc13, #loc14])
#loc189 = loc(fused[#loc16, #loc15])
#loc190 = loc(fused[#loc17, #loc18])
#loc191 = loc(fused[#loc20, #loc18])
#loc192 = loc(fused[#loc21, #loc23])
#loc193 = loc(fused[#loc24, #loc23])
#loc194 = loc(fused[#loc25, #loc26])
#loc195 = loc(fused[#loc27, #loc28])
#loc196 = loc(fused[#loc30, #loc26])
#loc197 = loc(fused[#loc34, #loc35])
#loc198 = loc(fused[#loc36, #loc37])
#loc199 = loc(fused[#loc38, #loc39])
#loc200 = loc(fused[#loc40, #loc41])
#loc201 = loc(fused[#loc43, #loc42])
#loc202 = loc(fused[#loc44, #loc45])
#loc203 = loc(fused[#loc47, #loc41])
#loc204 = loc(fused[#loc50, #loc53])
#loc205 = loc(fused[#loc55, #loc54])
#loc206 = loc(fused[#loc62, #loc63])
#loc207 = loc(fused[#loc64, #loc65])
#loc208 = loc(fused[#loc66, #loc67])
#loc209 = loc(fused[#loc68, #loc69])
#loc210 = loc(fused[#loc70, #loc71])
#loc211 = loc(fused[#loc73, #loc74])
#loc212 = loc(fused[#loc75, #loc76])
#loc213 = loc(fused[#loc78, #loc77])
#loc214 = loc(fused[#loc79, #loc80])
#loc215 = loc(fused[#loc82, #loc83, #loc84, #loc80])
#loc216 = loc(fused[#loc88, #loc89])
#loc217 = loc(fused[#loc87, #loc89])
#loc218 = loc(fused[#loc86, #loc90])
#loc219 = loc(fused[#loc91, #loc90])
#loc220 = loc(fused[#loc92, #loc93])
#loc221 = loc(fused[#loc94, #loc95])
#loc222 = loc(fused[#loc97, #loc93])
#loc223 = loc(fused[#loc101, #loc102])
#loc224 = loc(fused[#loc103, #loc104])
#loc225 = loc(fused[#loc105, #loc106])
#loc226 = loc(fused[#loc107, #loc108])
#loc227 = loc(fused[#loc110, #loc109])
#loc228 = loc(fused[#loc111, #loc112])
#loc229 = loc(fused[#loc114, #loc108])
#loc230 = loc(fused[#loc117, #loc120])
#loc231 = loc(fused[#loc122, #loc121])
#loc232 = loc(fused[#loc129, #loc130])
#loc233 = loc(fused[#loc131, #loc132])
#loc234 = loc(fused[#loc134, #loc133])
#loc235 = loc(fused[#loc135, #loc136])
#loc236 = loc(fused[#loc138, #loc136])
#loc237 = loc(fused[#loc141, #loc142])
#loc238 = loc(fused[#loc140, #loc142])
#loc239 = loc(fused[#loc139, #loc143])
#loc240 = loc(fused[#loc144, #loc143])
#loc241 = loc(fused[#loc145, #loc146])
#loc242 = loc(fused[#loc147, #loc148])
#loc243 = loc(fused[#loc150, #loc146])
#loc244 = loc(fused[#loc154, #loc155])
#loc245 = loc(fused[#loc156, #loc157])
#loc246 = loc(fused[#loc158, #loc159])
#loc247 = loc(fused[#loc160, #loc161])
#loc248 = loc(fused[#loc163, #loc162])
#loc249 = loc(fused[#loc164, #loc165])
#loc250 = loc(fused[#loc167, #loc161])
#loc251 = loc(fused[#loc170, #loc173])
#loc252 = loc(fused[#loc175, #loc174])
