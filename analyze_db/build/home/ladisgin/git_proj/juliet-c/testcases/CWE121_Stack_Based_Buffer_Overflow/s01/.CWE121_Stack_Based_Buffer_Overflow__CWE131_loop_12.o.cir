!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc95)
  cir.func private @printIntLine(!s32i) loc(#loc96)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc98)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc99)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc100)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc13)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc101)
    cir.br ^bb1 loc(#loc102)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc103)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc103)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc104)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<10> : !s32i loc(#loc22)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc22)
    %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc22)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc22)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc22)
    cir.store %12, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc105)
    cir.br ^bb4 loc(#loc20)
  ^bb3:  // pred: ^bb1
    %13 = cir.const #cir.int<10> : !s32i loc(#loc24)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc24)
    %15 = cir.const #cir.int<4> : !u64i loc(#loc24)
    %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc24)
    %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc24)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc24)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc24)
    cir.store %19, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc106)
    cir.br ^bb4 loc(#loc16)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc16)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc107)
  ^bb6:  // pred: ^bb5
    %20 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc98)
    cir.store %20, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc98)
    cir.br ^bb7 loc(#loc108)
  ^bb7:  // pred: ^bb6
    %21 = cir.const #cir.int<0> : !s32i loc(#loc30)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc30)
    cir.store %22, %1 : !u64i, !cir.ptr<!u64i> loc(#loc109)
    cir.br ^bb8 loc(#loc108)
  ^bb8:  // 2 preds: ^bb7, ^bb12
    %23 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc32)
    %24 = cir.const #cir.int<10> : !s32i loc(#loc33)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc33)
    %26 = cir.cmp(lt, %23, %25) : !u64i, !cir.bool loc(#loc110)
    cir.brcond %26 ^bb9, ^bb13 loc(#loc34)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc111)
  ^bb10:  // pred: ^bb9
    %27 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc36)
    %28 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc37)
    %29 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %27 : !u64i), !cir.ptr<!s32i> loc(#loc37)
    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    %31 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
    %32 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc39)
    %33 = cir.ptr_stride(%31 : !cir.ptr<!s32i>, %32 : !u64i), !cir.ptr<!s32i> loc(#loc40)
    cir.store %30, %33 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    cir.br ^bb11 loc(#loc29)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc29)
  ^bb12:  // pred: ^bb11
    %34 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc42)
    %35 = cir.unary(inc, %34) : !u64i, !u64i loc(#loc43)
    cir.store %35, %1 : !u64i, !cir.ptr<!u64i> loc(#loc113)
    cir.br ^bb8 loc(#loc108)
  ^bb13:  // pred: ^bb8
    cir.br ^bb14 loc(#loc29)
  ^bb14:  // pred: ^bb13
    %36 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
    %37 = cir.const #cir.int<0> : !s32i loc(#loc45)
    %38 = cir.ptr_stride(%36 : !cir.ptr<!s32i>, %37 : !s32i), !cir.ptr<!s32i> loc(#loc46)
    %39 = cir.load %38 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    cir.call @printIntLine(%39) : (!s32i) -> () loc(#loc47)
    cir.br ^bb15 loc(#loc27)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc6)
  } loc(#loc97)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc115)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc49)
  } loc(#loc114)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc117)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc118)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc119)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc60)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc120)
    cir.br ^bb1 loc(#loc121)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc122)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc122)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc64)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc64)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc123)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<10> : !s32i loc(#loc69)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc69)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc69)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc69)
    %12 = cir.alloca !u8i, !cir.ptr<!u8i>, %11 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc69)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc69)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc69)
    cir.store %14, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc124)
    cir.br ^bb4 loc(#loc67)
  ^bb3:  // pred: ^bb1
    %15 = cir.const #cir.int<10> : !s32i loc(#loc71)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc71)
    %17 = cir.const #cir.int<4> : !u64i loc(#loc71)
    %18 = cir.binop(mul, %16, %17) : !u64i loc(#loc71)
    %19 = cir.alloca !u8i, !cir.ptr<!u8i>, %18 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc71)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc71)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc71)
    cir.store %21, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc125)
    cir.br ^bb4 loc(#loc63)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc63)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc126)
  ^bb6:  // pred: ^bb5
    %22 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc117)
    cir.store %22, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc117)
    cir.br ^bb7 loc(#loc127)
  ^bb7:  // pred: ^bb6
    %23 = cir.const #cir.int<0> : !s32i loc(#loc77)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc77)
    cir.store %24, %1 : !u64i, !cir.ptr<!u64i> loc(#loc128)
    cir.br ^bb8 loc(#loc127)
  ^bb8:  // 2 preds: ^bb7, ^bb12
    %25 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc79)
    %26 = cir.const #cir.int<10> : !s32i loc(#loc80)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc80)
    %28 = cir.cmp(lt, %25, %27) : !u64i, !cir.bool loc(#loc129)
    cir.brcond %28 ^bb9, ^bb13 loc(#loc81)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc130)
  ^bb10:  // pred: ^bb9
    %29 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc83)
    %30 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc84)
    %31 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %29 : !u64i), !cir.ptr<!s32i> loc(#loc84)
    %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    %33 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc85)
    %34 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc86)
    %35 = cir.ptr_stride(%33 : !cir.ptr<!s32i>, %34 : !u64i), !cir.ptr<!s32i> loc(#loc87)
    cir.store %32, %35 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    cir.br ^bb11 loc(#loc76)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc76)
  ^bb12:  // pred: ^bb11
    %36 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc89)
    %37 = cir.unary(inc, %36) : !u64i, !u64i loc(#loc90)
    cir.store %37, %1 : !u64i, !cir.ptr<!u64i> loc(#loc132)
    cir.br ^bb8 loc(#loc127)
  ^bb13:  // pred: ^bb8
    cir.br ^bb14 loc(#loc76)
  ^bb14:  // pred: ^bb13
    %38 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
    %39 = cir.const #cir.int<0> : !s32i loc(#loc92)
    %40 = cir.ptr_stride(%38 : !cir.ptr<!s32i>, %39 : !s32i), !cir.ptr<!s32i> loc(#loc93)
    %41 = cir.load %40 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    cir.call @printIntLine(%41) : (!s32i) -> () loc(#loc94)
    cir.br ^bb15 loc(#loc74)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc53)
  } loc(#loc116)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":21:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":45:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":36:9)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":36:28)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":37:9)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":37:16)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":23:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":23:11)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":24:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":24:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":25:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":34:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":25:8)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":25:33)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":26:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":29:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":31:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":28:23)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":28:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":33:23)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":33:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":35:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":44:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":39:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":42:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":39:18)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":39:14)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":39:21)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":39:25)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":39:23)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":40:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":41:30)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":41:23)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":41:13)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":41:18)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":41:19)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":41:31)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":39:30)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":39:29)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":43:22)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":43:27)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":43:28)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":43:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":79:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":82:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":81:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":81:13)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":53:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":77:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":68:9)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":68:28)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":69:9)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":69:16)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":55:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":55:11)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":56:12)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":56:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":57:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":66:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":57:8)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":57:33)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":58:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":61:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":63:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":60:23)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":60:9)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":65:23)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":65:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":67:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":76:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":71:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":74:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":71:18)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":71:14)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":71:21)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":71:25)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":71:23)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":72:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":73:30)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":73:23)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":73:13)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":73:18)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":73:19)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":73:31)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":71:30)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":71:29)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":75:22)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":75:27)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":75:28)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c":75:9)
#loc95 = loc(fused[#loc1, #loc2])
#loc96 = loc(fused[#loc3, #loc4])
#loc97 = loc(fused[#loc5, #loc6])
#loc98 = loc(fused[#loc7, #loc8])
#loc99 = loc(fused[#loc9, #loc10])
#loc100 = loc(fused[#loc11, #loc12])
#loc101 = loc(fused[#loc14, #loc13])
#loc102 = loc(fused[#loc15, #loc16])
#loc103 = loc(fused[#loc17, #loc18])
#loc104 = loc(fused[#loc19, #loc20, #loc21, #loc16])
#loc105 = loc(fused[#loc23, #loc22])
#loc106 = loc(fused[#loc25, #loc24])
#loc107 = loc(fused[#loc26, #loc27])
#loc108 = loc(fused[#loc28, #loc29])
#loc109 = loc(fused[#loc31, #loc30])
#loc110 = loc(fused[#loc32, #loc33])
#loc111 = loc(fused[#loc35, #loc29])
#loc112 = loc(fused[#loc38, #loc41])
#loc113 = loc(fused[#loc43, #loc42])
#loc114 = loc(fused[#loc48, #loc49])
#loc115 = loc(fused[#loc50, #loc51])
#loc116 = loc(fused[#loc52, #loc53])
#loc117 = loc(fused[#loc54, #loc55])
#loc118 = loc(fused[#loc56, #loc57])
#loc119 = loc(fused[#loc58, #loc59])
#loc120 = loc(fused[#loc61, #loc60])
#loc121 = loc(fused[#loc62, #loc63])
#loc122 = loc(fused[#loc64, #loc65])
#loc123 = loc(fused[#loc66, #loc67, #loc68, #loc63])
#loc124 = loc(fused[#loc70, #loc69])
#loc125 = loc(fused[#loc72, #loc71])
#loc126 = loc(fused[#loc73, #loc74])
#loc127 = loc(fused[#loc75, #loc76])
#loc128 = loc(fused[#loc78, #loc77])
#loc129 = loc(fused[#loc79, #loc80])
#loc130 = loc(fused[#loc82, #loc76])
#loc131 = loc(fused[#loc85, #loc88])
#loc132 = loc(fused[#loc90, #loc89])
