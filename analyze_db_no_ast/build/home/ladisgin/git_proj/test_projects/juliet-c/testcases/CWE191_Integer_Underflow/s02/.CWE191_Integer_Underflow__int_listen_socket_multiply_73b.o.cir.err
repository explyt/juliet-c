clang: warning: argument unused during compilation: '-c' [-Wunused-command-line-argument]
NYI
UNREACHABLE executed at /home/ladisgin/git_proj/clangir/clang/lib/CIR/CodeGen/CIRGenExprScalar.cpp:1700!
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /home/ladisgin/git_proj/clangir/build/bin/clang -S -Xclang -emit-cir -I ../../../testcasesupport -c CWE191_Integer_Underflow__int_listen_socket_multiply_73b.cpp -o .CWE191_Integer_Underflow__int_listen_socket_multiply_73b.o.cir
1.	<eof> parser at end of file
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang     0x000000000b7d3f02 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 59
1  clang     0x000000000b7d4340
2  clang     0x000000000b7d1b42 llvm::sys::RunSignalHandlers() + 131
3  clang     0x000000000b7d37e2 llvm::sys::CleanupOnSignal(unsigned long) + 117
4  clang     0x000000000b70064a
5  clang     0x000000000b700ad9
6  libc.so.6 0x00007f74ee64fd00
7  libc.so.6 0x00007f74ee6a8664
8  libc.so.6 0x00007f74ee64fc4e gsignal + 30
9  libc.so.6 0x00007f74ee637902 abort + 223
10 clang     0x000000000b70ab07
11 clang     0x000000000dd8bb8e
12 clang     0x000000000dd85393
13 clang     0x000000000dd96617
14 clang     0x000000000dd94c79
15 clang     0x000000000dd92ada
16 clang     0x000000000dd84047
17 clang     0x000000000dd893cc cir::CIRGenFunction::buildScalarExpr(clang::Expr const*) + 138
18 clang     0x000000000dd3b910
19 clang     0x000000000dd41e3f cir::CIRGenFunction::buildPointerWithAlignment(clang::Expr const*, cir::LValueBaseInfo*, cir::TBAAAccessInfo*, cir::KnownNonNull_t) + 69
20 clang     0x000000000dde1884 cir::CIRGenFunction::buildCXXMemberOrOperatorMemberCallExpr(clang::CallExpr const*, clang::CXXMethodDecl const*, cir::ReturnValueSlot, bool, clang::NestedNameSpecifier*, bool, clang::Expr const*) + 1280
21 clang     0x000000000dd4a982 cir::CIRGenFunction::buildCXXMemberCallExpr(clang::CXXMemberCallExpr const*, cir::ReturnValueSlot) + 370
22 clang     0x000000000dd42c29 cir::CIRGenFunction::buildCallExpr(clang::CallExpr const*, cir::ReturnValueSlot) + 219
23 clang     0x000000000dd8ca9b
24 clang     0x000000000dd94df5
25 clang     0x000000000dd92be2
26 clang     0x000000000dd84047
27 clang     0x000000000dd893cc cir::CIRGenFunction::buildScalarExpr(clang::Expr const*) + 138
28 clang     0x000000000dd3b910
29 clang     0x000000000dd41e3f cir::CIRGenFunction::buildPointerWithAlignment(clang::Expr const*, cir::LValueBaseInfo*, cir::TBAAAccessInfo*, cir::KnownNonNull_t) + 69
30 clang     0x000000000dd42182 cir::CIRGenFunction::buildUnaryOpLValue(clang::UnaryOperator const*) + 474
31 clang     0x000000000dd48fd1 cir::CIRGenFunction::buildLValue(clang::Expr const*) + 1383
32 clang     0x000000000dd4a9c2 cir::CIRGenFunction::buildReferenceBindingToExpr(clang::Expr const*) + 52
33 clang     0x000000000dda8a0b
34 clang     0x000000000dda8f0c cir::CIRGenFunction::buildReturnStmt(clang::ReturnStmt const&) + 254
35 clang     0x000000000dda7bc0 cir::CIRGenFunction::buildSimpleStmt(clang::Stmt const*, bool) + 516
36 clang     0x000000000dda748a cir::CIRGenFunction::buildStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 72
37 clang     0x000000000dda71ba cir::CIRGenFunction::buildCompoundStmtWithoutScope(clang::CompoundStmt const&, bool, cir::AggValueSlot) + 924
38 clang     0x000000000dd2209f cir::CIRGenFunction::buildFunctionBody(clang::Stmt const*) + 187
39 clang     0x000000000dd1c815 cir::CIRGenFunction::generateCode(clang::GlobalDecl, mlir::cir::FuncOp, cir::CIRGenFunctionInfo const&) + 2329
40 clang     0x000000000dce67a2 cir::CIRGenModule::buildGlobalFunctionDefinition(clang::GlobalDecl, mlir::Operation*) + 544
41 clang     0x000000000dce9b8f cir::CIRGenModule::buildGlobalDefinition(clang::GlobalDecl, mlir::Operation*) + 323
42 clang     0x000000000dcef60e cir::CIRGenModule::buildGlobalDecl(clang::GlobalDecl&) + 488
43 clang     0x000000000dcef869 cir::CIRGenModule::buildDeferred(unsigned int) + 595
44 clang     0x000000000dcef8bc cir::CIRGenModule::buildDeferred(unsigned int) + 678
45 clang     0x000000000dcefccd cir::CIRGenModule::Release() + 41
46 clang     0x000000000dce20c1 cir::CIRGenerator::HandleTranslationUnit(clang::ASTContext&) + 103
47 clang     0x000000000da4d053
48 clang     0x0000000011cc5279 clang::ParseAST(clang::Sema&, bool, bool) + 1049
49 clang     0x000000000cd33ea2 clang::ASTFrontendAction::ExecuteAction() + 328
50 clang     0x000000000da4ad8f cir::CIRGenAction::ExecuteAction() + 73
51 clang     0x000000000cd337ff clang::FrontendAction::Execute() + 139
52 clang     0x000000000cc526b7 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1019
53 clang     0x000000000cee12dd clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 1322
54 clang     0x00000000099a75fd cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 1791
55 clang     0x0000000009999715
56 clang     0x00000000099998f9
57 clang     0x000000000999ae97
58 clang     0x000000000caa073d
59 clang     0x000000000ca9f4ac
60 clang     0x000000000ca9f8d1
61 clang     0x000000000a3e4d10
62 clang     0x000000000b700ca6 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 212
63 clang     0x000000000ca9f6a0 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const + 490
64 clang     0x000000000ca3d77d clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 893
65 clang     0x000000000ca3daa9 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const + 145
66 clang     0x000000000ca5050a clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 638
67 clang     0x000000000999aa53 clang_main(int, char**, llvm::ToolContext const&) + 4440
68 clang     0x00000000099d020b main + 112
69 libc.so.6 0x00007f74ee639088
70 libc.so.6 0x00007f74ee63914b __libc_start_main + 139
71 clang     0x0000000009998b65 _start + 37
clang: error: clang frontend command failed with exit code 134 (use -v to see invocation)
clang version 20.0.0git (git@github.com:llvm/clangir.git d7de21ff0bfc89f47dbf03a469008fb2a4730e02)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /home/ladisgin/git_proj/clangir/build/bin
Build config: +unoptimized, +assertions
clang: error: unable to execute command: Aborted (core dumped)
clang: note: diagnostic msg: Error generating preprocessed source(s).
