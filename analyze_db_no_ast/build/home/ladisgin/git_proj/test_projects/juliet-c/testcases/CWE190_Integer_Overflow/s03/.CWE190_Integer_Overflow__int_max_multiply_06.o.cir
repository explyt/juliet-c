!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc202)
  cir.func no_proto  @CWE190_Integer_Overflow__int_max_multiply_06_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc204)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc11)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc12)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc207)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc15)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
      } loc(#loc208)
    } loc(#loc206)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc19)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc20)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc211)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc21)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc26)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !s32i loc(#loc214)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc27)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc216)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc30)
            %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc31)
            cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc216)
            %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc32)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc33)
          } loc(#loc215)
        } loc(#loc213)
      } loc(#loc212)
    } loc(#loc210)
    cir.return loc(#loc4)
  } loc(#loc203)
  cir.func no_proto  @CWE190_Integer_Overflow__int_max_multiply_06_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc35)
  } loc(#loc217)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc222)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc46)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc47)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc224)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc52)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc56)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc57)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc227)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc58)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc60)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
      } loc(#loc228)
    } loc(#loc226)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc64)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc65)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !s32i loc(#loc231)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc66)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc46)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc46)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc70)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc74)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !s32i loc(#loc234)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc75)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
              %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc80)
              %12 = cir.const #cir.int<2> : !s32i loc(#loc81)
              %13 = cir.binop(div, %11, %12) : !s32i loc(#loc237)
              %14 = cir.cmp(lt, %10, %13) : !s32i, !s32i loc(#loc238)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc83)
              cir.if %15 {
                %16 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc240)
                %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
                %18 = cir.const #cir.int<2> : !s32i loc(#loc88)
                %19 = cir.binop(mul, %17, %18) nsw : !s32i loc(#loc89)
                cir.store %19, %16 : !s32i, !cir.ptr<!s32i> loc(#loc240)
                %20 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc90)
                cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc91)
              } else {
                %16 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc47)
                %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc47)
                cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc92)
              } loc(#loc239)
            } loc(#loc236)
          } loc(#loc235)
        } loc(#loc233)
      } loc(#loc232)
    } loc(#loc230)
    cir.return loc(#loc49)
  } loc(#loc223)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc242)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc97)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc243)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc101)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc102)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc245)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc103)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc105)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc247)
      } loc(#loc246)
    } loc(#loc244)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc109)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc110)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc249)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc111)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc115)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc116)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !s32i loc(#loc252)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc117)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
              %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc122)
              %12 = cir.const #cir.int<2> : !s32i loc(#loc123)
              %13 = cir.binop(div, %11, %12) : !s32i loc(#loc255)
              %14 = cir.cmp(lt, %10, %13) : !s32i, !s32i loc(#loc256)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc125)
              cir.if %15 {
                %16 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc258)
                %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc131)
                %18 = cir.const #cir.int<2> : !s32i loc(#loc130)
                %19 = cir.binop(mul, %17, %18) nsw : !s32i loc(#loc131)
                cir.store %19, %16 : !s32i, !cir.ptr<!s32i> loc(#loc258)
                %20 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc132)
                cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc133)
              } else {
                %16 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc134)
                %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc134)
                cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc135)
              } loc(#loc257)
            } loc(#loc254)
          } loc(#loc253)
        } loc(#loc251)
      } loc(#loc250)
    } loc(#loc248)
    cir.return loc(#loc94)
  } loc(#loc241)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc260)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc140)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc261)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc144)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc145)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !s32i loc(#loc263)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc146)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc150)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc150)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc151)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc152)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc265)
      } loc(#loc264)
    } loc(#loc262)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc156)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc157)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc267)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc158)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc162)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc163)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !s32i loc(#loc270)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc164)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc272)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc168)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc167)
            %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc168)
            cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc272)
            %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc169)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc170)
          } loc(#loc271)
        } loc(#loc269)
      } loc(#loc268)
    } loc(#loc266)
    cir.return loc(#loc137)
  } loc(#loc259)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc274)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc175)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc275)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc179)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc180)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc277)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc181)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc183)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc279)
      } loc(#loc278)
    } loc(#loc276)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc187)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc188)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc281)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc189)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc193)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc194)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !s32i loc(#loc284)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc195)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc286)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc199)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc198)
            %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc199)
            cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc286)
            %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc200)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc201)
          } loc(#loc285)
        } loc(#loc283)
      } loc(#loc282)
    } loc(#loc280)
    cir.return loc(#loc172)
  } loc(#loc273)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_06.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":27:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":46:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":29:5)
#loc6 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":29:9)
#loc7 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":31:12)
#loc8 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":31:5)
#loc9 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":32:5)
#loc10 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":36:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":32:8)
#loc12 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":32:27)
#loc13 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":32:25)
#loc14 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":33:5)
#loc15 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":35:16)
#loc16 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":35:9)
#loc17 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":37:5)
#loc18 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":45:5)
#loc19 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":37:8)
#loc20 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":37:27)
#loc21 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":37:25)
#loc22 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":38:5)
#loc23 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":39:9)
#loc24 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":44:9)
#loc25 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":39:12)
#loc26 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":39:19)
#loc27 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":39:17)
#loc28 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":40:9)
#loc29 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":42:13)
#loc30 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":42:33)
#loc31 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":42:26)
#loc32 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":43:26)
#loc33 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":43:13)
#loc34 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":164:1)
#loc35 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":170:1)
#loc36 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":166:5)
#loc37 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":166:14)
#loc38 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":167:5)
#loc39 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":167:14)
#loc40 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":168:5)
#loc41 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":168:14)
#loc42 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":169:5)
#loc43 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":169:14)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":66:19)
#loc47 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":80:27)
#loc48 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":53:1)
#loc49 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":84:1)
#loc50 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":55:5)
#loc51 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":55:9)
#loc52 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":57:12)
#loc53 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":57:5)
#loc54 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":58:5)
#loc55 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":62:5)
#loc56 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":58:8)
#loc57 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":58:27)
#loc58 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":58:25)
#loc59 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":59:5)
#loc60 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":61:16)
#loc61 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":61:9)
#loc62 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":63:5)
#loc63 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":83:5)
#loc64 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":63:8)
#loc65 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":63:27)
#loc66 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":63:25)
#loc67 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":64:5)
#loc68 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":67:5)
#loc69 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":69:5)
#loc70 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":66:9)
#loc71 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":70:9)
#loc72 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":82:9)
#loc73 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":70:12)
#loc74 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":70:19)
#loc75 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":70:17)
#loc76 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":71:9)
#loc77 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":73:13)
#loc78 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":81:13)
#loc79 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":73:17)
#loc80 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":73:25)
#loc81 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":73:33)
#loc82 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":73:34)
#loc83 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":73:22)
#loc84 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":74:13)
#loc85 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":77:13)
#loc86 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":79:13)
#loc87 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":75:17)
#loc88 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":75:37)
#loc89 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":75:30)
#loc90 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":76:30)
#loc91 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":76:17)
#loc92 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":80:17)
#loc93 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":87:1)
#loc94 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":113:1)
#loc95 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":89:5)
#loc96 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":89:9)
#loc97 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":91:12)
#loc98 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":91:5)
#loc99 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":92:5)
#loc100 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":96:5)
#loc101 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":92:8)
#loc102 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":92:27)
#loc103 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":92:25)
#loc104 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":93:5)
#loc105 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":95:16)
#loc106 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":95:9)
#loc107 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":97:5)
#loc108 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":112:5)
#loc109 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":97:8)
#loc110 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":97:27)
#loc111 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":97:25)
#loc112 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":98:5)
#loc113 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":99:9)
#loc114 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":111:9)
#loc115 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":99:12)
#loc116 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":99:19)
#loc117 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":99:17)
#loc118 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":100:9)
#loc119 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":102:13)
#loc120 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":110:13)
#loc121 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":102:17)
#loc122 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":102:25)
#loc123 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":102:33)
#loc124 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":102:34)
#loc125 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":102:22)
#loc126 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":103:13)
#loc127 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":106:13)
#loc128 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":108:13)
#loc129 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":104:17)
#loc130 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":104:37)
#loc131 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":104:30)
#loc132 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":105:30)
#loc133 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":105:17)
#loc134 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":109:27)
#loc135 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":109:17)
#loc136 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":116:1)
#loc137 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":140:1)
#loc138 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":118:5)
#loc139 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":118:9)
#loc140 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":120:12)
#loc141 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":120:5)
#loc142 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":121:5)
#loc143 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":130:5)
#loc144 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":121:8)
#loc145 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":121:27)
#loc146 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":121:25)
#loc147 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":122:5)
#loc148 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":125:5)
#loc149 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":127:5)
#loc150 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":124:19)
#loc151 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":124:9)
#loc152 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":129:16)
#loc153 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":129:9)
#loc154 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":131:5)
#loc155 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":139:5)
#loc156 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":131:8)
#loc157 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":131:27)
#loc158 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":131:25)
#loc159 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":132:5)
#loc160 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":133:9)
#loc161 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":138:9)
#loc162 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":133:12)
#loc163 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":133:19)
#loc164 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":133:17)
#loc165 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":134:9)
#loc166 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":136:13)
#loc167 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":136:33)
#loc168 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":136:26)
#loc169 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":137:26)
#loc170 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":137:13)
#loc171 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":143:1)
#loc172 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":162:1)
#loc173 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":145:5)
#loc174 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":145:9)
#loc175 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":147:12)
#loc176 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":147:5)
#loc177 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":148:5)
#loc178 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":152:5)
#loc179 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":148:8)
#loc180 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":148:27)
#loc181 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":148:25)
#loc182 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":149:5)
#loc183 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":151:16)
#loc184 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":151:9)
#loc185 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":153:5)
#loc186 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":161:5)
#loc187 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":153:8)
#loc188 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":153:27)
#loc189 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":153:25)
#loc190 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":154:5)
#loc191 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":155:9)
#loc192 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":160:9)
#loc193 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":155:12)
#loc194 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":155:19)
#loc195 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":155:17)
#loc196 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":156:9)
#loc197 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":158:13)
#loc198 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":158:33)
#loc199 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":158:26)
#loc200 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":159:26)
#loc201 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":159:13)
#loc202 = loc(fused[#loc1, #loc2])
#loc203 = loc(fused[#loc3, #loc4])
#loc204 = loc(fused[#loc5, #loc6])
#loc205 = loc(fused[#loc8, #loc7])
#loc206 = loc(fused[#loc9, #loc10])
#loc207 = loc(fused[#loc11, #loc12])
#loc208 = loc(fused[#loc14, #loc10])
#loc209 = loc(fused[#loc16, #loc15])
#loc210 = loc(fused[#loc17, #loc18])
#loc211 = loc(fused[#loc19, #loc20])
#loc212 = loc(fused[#loc22, #loc18])
#loc213 = loc(fused[#loc23, #loc24])
#loc214 = loc(fused[#loc25, #loc26])
#loc215 = loc(fused[#loc28, #loc24])
#loc216 = loc(fused[#loc29, #loc30])
#loc217 = loc(fused[#loc34, #loc35])
#loc218 = loc(fused[#loc36, #loc37])
#loc219 = loc(fused[#loc38, #loc39])
#loc220 = loc(fused[#loc40, #loc41])
#loc221 = loc(fused[#loc42, #loc43])
#loc222 = loc(fused[#loc44, #loc45])
#loc223 = loc(fused[#loc48, #loc49])
#loc224 = loc(fused[#loc50, #loc51])
#loc225 = loc(fused[#loc53, #loc52])
#loc226 = loc(fused[#loc54, #loc55])
#loc227 = loc(fused[#loc56, #loc57])
#loc228 = loc(fused[#loc59, #loc55])
#loc229 = loc(fused[#loc61, #loc60])
#loc230 = loc(fused[#loc62, #loc63])
#loc231 = loc(fused[#loc64, #loc65])
#loc232 = loc(fused[#loc67, #loc68, #loc69, #loc63])
#loc233 = loc(fused[#loc71, #loc72])
#loc234 = loc(fused[#loc73, #loc74])
#loc235 = loc(fused[#loc76, #loc72])
#loc236 = loc(fused[#loc77, #loc78])
#loc237 = loc(fused[#loc80, #loc81])
#loc238 = loc(fused[#loc79, #loc82])
#loc239 = loc(fused[#loc84, #loc85, #loc86, #loc78])
#loc240 = loc(fused[#loc87, #loc88])
#loc241 = loc(fused[#loc93, #loc94])
#loc242 = loc(fused[#loc95, #loc96])
#loc243 = loc(fused[#loc98, #loc97])
#loc244 = loc(fused[#loc99, #loc100])
#loc245 = loc(fused[#loc101, #loc102])
#loc246 = loc(fused[#loc104, #loc100])
#loc247 = loc(fused[#loc106, #loc105])
#loc248 = loc(fused[#loc107, #loc108])
#loc249 = loc(fused[#loc109, #loc110])
#loc250 = loc(fused[#loc112, #loc108])
#loc251 = loc(fused[#loc113, #loc114])
#loc252 = loc(fused[#loc115, #loc116])
#loc253 = loc(fused[#loc118, #loc114])
#loc254 = loc(fused[#loc119, #loc120])
#loc255 = loc(fused[#loc122, #loc123])
#loc256 = loc(fused[#loc121, #loc124])
#loc257 = loc(fused[#loc126, #loc127, #loc128, #loc120])
#loc258 = loc(fused[#loc129, #loc130])
#loc259 = loc(fused[#loc136, #loc137])
#loc260 = loc(fused[#loc138, #loc139])
#loc261 = loc(fused[#loc141, #loc140])
#loc262 = loc(fused[#loc142, #loc143])
#loc263 = loc(fused[#loc144, #loc145])
#loc264 = loc(fused[#loc147, #loc148, #loc149, #loc143])
#loc265 = loc(fused[#loc153, #loc152])
#loc266 = loc(fused[#loc154, #loc155])
#loc267 = loc(fused[#loc156, #loc157])
#loc268 = loc(fused[#loc159, #loc155])
#loc269 = loc(fused[#loc160, #loc161])
#loc270 = loc(fused[#loc162, #loc163])
#loc271 = loc(fused[#loc165, #loc161])
#loc272 = loc(fused[#loc166, #loc167])
#loc273 = loc(fused[#loc171, #loc172])
#loc274 = loc(fused[#loc173, #loc174])
#loc275 = loc(fused[#loc176, #loc175])
#loc276 = loc(fused[#loc177, #loc178])
#loc277 = loc(fused[#loc179, #loc180])
#loc278 = loc(fused[#loc182, #loc178])
#loc279 = loc(fused[#loc184, #loc183])
#loc280 = loc(fused[#loc185, #loc186])
#loc281 = loc(fused[#loc187, #loc188])
#loc282 = loc(fused[#loc190, #loc186])
#loc283 = loc(fused[#loc191, #loc192])
#loc284 = loc(fused[#loc193, #loc194])
#loc285 = loc(fused[#loc196, #loc192])
#loc286 = loc(fused[#loc197, #loc198])
