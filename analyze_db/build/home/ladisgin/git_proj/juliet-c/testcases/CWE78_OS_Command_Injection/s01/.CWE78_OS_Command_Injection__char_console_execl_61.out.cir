!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc12 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":45:69)
#loc13 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":45:76)
#loc72 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":80:73)
#loc73 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":80:80)
#true = #cir.bool<true> : !cir.bool
#loc84 = loc(fused[#loc12, #loc13])
#loc107 = loc(fused[#loc72, #loc73])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_console_execl_61b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc79)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc80)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc81)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc9)
  cir.func @CWE78_OS_Command_Injection__char_console_execl_61b_badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc12, #loc13])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc84)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc11)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc14)
    cir.scope {
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc86)
      %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc19)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
      %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc19)
      cir.store %7, %4 : !u64i, !cir.ptr<!u64i> loc(#loc86)
      cir.scope {
        %8 = cir.const #cir.int<100> : !s32i loc(#loc23)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc23)
        %10 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc24)
        %11 = cir.binop(sub, %9, %10) : !u64i loc(#loc88)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc25)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc25)
        %14 = cir.cmp(gt, %11, %13) : !u64i, !cir.bool loc(#loc89)
        cir.if %14 {
          cir.scope {
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
            %16 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc30)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !u64i), !cir.ptr<!s8i> loc(#loc31)
            %18 = cir.const #cir.int<100> : !s32i loc(#loc32)
            %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc32)
            %20 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc33)
            %21 = cir.binop(sub, %19, %20) : !u64i loc(#loc92)
            %22 = cir.cast(integral, %21 : !u64i), !s32i loc(#loc92)
            %23 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc81)
            %24 = cir.load %23 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc34)
            %25 = cir.call @fgets(%17, %22, %24) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc35)
            %26 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
            %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
            %28 = cir.cmp(ne, %25, %27) : !cir.ptr<!s8i>, !cir.bool loc(#loc93)
            cir.if %28 {
              %29 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc40)
              %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
              %31 = cir.call @strlen(%30) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc40)
              cir.store %31, %4 : !u64i, !cir.ptr<!u64i> loc(#loc95)
              cir.scope {
                %32 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc46)
                %33 = cir.const #cir.int<0> : !s32i loc(#loc47)
                %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc47)
                %35 = cir.cmp(gt, %32, %34) : !u64i, !cir.bool loc(#loc97)
                %36 = cir.ternary(%35, true {
                  %37 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
                  %38 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc50)
                  %39 = cir.const #cir.int<1> : !s32i loc(#loc51)
                  %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc51)
                  %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc98)
                  %42 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %41 : !u64i), !cir.ptr<!s8i> loc(#loc52)
                  %43 = cir.load %42 : !cir.ptr<!s8i>, !s8i loc(#loc49)
                  %44 = cir.cast(integral, %43 : !s8i), !s32i loc(#loc49)
                  %45 = cir.const #cir.int<10> : !s32i loc(#loc53)
                  %46 = cir.cmp(eq, %44, %45) : !s32i, !cir.bool loc(#loc99)
                  %47 = cir.ternary(%46, true {
                    %48 = cir.const #true loc(#loc48)
                    cir.yield %48 : !cir.bool loc(#loc48)
                  }, false {
                    %48 = cir.const #false loc(#loc48)
                    cir.yield %48 : !cir.bool loc(#loc48)
                  }) : (!cir.bool) -> !cir.bool loc(#loc48)
                  cir.yield %47 : !cir.bool loc(#loc48)
                }, false {
                  %37 = cir.const #false loc(#loc48)
                  cir.yield %37 : !cir.bool loc(#loc48)
                }) : (!cir.bool) -> !cir.bool loc(#loc48)
                cir.if %36 {
                  %37 = cir.const #cir.int<0> : !s32i loc(#loc55)
                  %38 = cir.cast(integral, %37 : !s32i), !s8i loc(#loc55)
                  %39 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
                  %40 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc57)
                  %41 = cir.const #cir.int<1> : !s32i loc(#loc58)
                  %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc58)
                  %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc101)
                  %44 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc59)
                  cir.store %38, %44 : !s8i, !cir.ptr<!s8i> loc(#loc102)
                } loc(#loc100)
              } loc(#loc96)
            } else {
              %29 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc9)
              %30 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc60)
              %31 = cir.const #cir.int<0> : !s32i loc(#loc61)
              %32 = cir.cast(integral, %31 : !s32i), !s8i loc(#loc61)
              %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
              %34 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc63)
              %35 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc64)
              cir.store %32, %35 : !s8i, !cir.ptr<!s8i> loc(#loc103)
            } loc(#loc94)
          } loc(#loc91)
        } loc(#loc90)
      } loc(#loc87)
    } loc(#loc85)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc104)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc104)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc104)
  } loc(#loc83)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc69)
  cir.func @CWE78_OS_Command_Injection__char_console_execl_61b_goodG2BSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc72, #loc73])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc107)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc71)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc74)
    %2 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc75)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc76)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc69)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc69)
    %6 = cir.call @strcat(%3, %5) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc75)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
    cir.store %7, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc108)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
    cir.return %8 : !cir.ptr<!s8i> loc(#loc108)
  } loc(#loc106)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_console_execl_61b.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":66:27)
#loc10 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":45:1)
#loc11 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":73:1)
#loc14 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":46:1)
#loc15 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":47:5)
#loc16 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":71:5)
#loc17 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":49:9)
#loc18 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":49:37)
#loc19 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":49:26)
#loc20 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":49:33)
#loc21 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":51:9)
#loc22 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":70:9)
#loc23 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":51:13)
#loc24 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":51:17)
#loc25 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":51:27)
#loc26 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":52:9)
#loc27 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":54:13)
#loc28 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":69:13)
#loc29 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":54:23)
#loc30 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":54:28)
#loc31 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":54:27)
#loc32 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":54:43)
#loc33 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":54:47)
#loc34 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":54:57)
#loc35 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":54:17)
#loc36 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":54:67)
#loc37 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":55:13)
#loc38 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":63:13)
#loc39 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":65:13)
#loc40 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":58:27)
#loc41 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":58:34)
#loc42 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":58:17)
#loc43 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":58:38)
#loc44 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":59:17)
#loc45 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":62:17)
#loc46 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":59:21)
#loc47 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":59:31)
#loc48 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":59:33)
#loc49 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":59:36)
#loc50 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":59:41)
#loc51 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":59:49)
#loc52 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":59:50)
#loc53 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":59:55)
#loc54 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":60:17)
#loc55 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":61:39)
#loc56 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":61:21)
#loc57 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":61:26)
#loc58 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":61:34)
#loc59 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":61:35)
#loc60 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":66:17)
#loc61 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":68:33)
#loc62 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":68:17)
#loc63 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":68:22)
#loc64 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":68:29)
#loc65 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":72:12)
#loc66 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":72:5)
#loc67 = loc("/usr/include/string.h":149:1)
#loc68 = loc("/usr/include/string.h":150:14)
#loc69 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":83:18)
#loc70 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":80:1)
#loc71 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":85:1)
#loc74 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":81:1)
#loc75 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":83:5)
#loc76 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":83:12)
#loc77 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":84:12)
#loc78 = loc("CWE78_OS_Command_Injection__char_console_execl_61b.c":84:5)
#loc79 = loc(fused[#loc1, #loc2])
#loc80 = loc(fused[#loc3, #loc4])
#loc81 = loc(fused[#loc5, #loc6])
#loc82 = loc(fused[#loc7, #loc8])
#loc83 = loc(fused[#loc10, #loc11])
#loc85 = loc(fused[#loc15, #loc16])
#loc86 = loc(fused[#loc17, #loc18])
#loc87 = loc(fused[#loc21, #loc22])
#loc88 = loc(fused[#loc23, #loc24])
#loc89 = loc(fused[#loc23, #loc25])
#loc90 = loc(fused[#loc26, #loc22])
#loc91 = loc(fused[#loc27, #loc28])
#loc92 = loc(fused[#loc32, #loc33])
#loc93 = loc(fused[#loc35, #loc36])
#loc94 = loc(fused[#loc37, #loc38, #loc39, #loc28])
#loc95 = loc(fused[#loc42, #loc43])
#loc96 = loc(fused[#loc44, #loc45])
#loc97 = loc(fused[#loc46, #loc47])
#loc98 = loc(fused[#loc50, #loc51])
#loc99 = loc(fused[#loc49, #loc53])
#loc100 = loc(fused[#loc54, #loc45])
#loc101 = loc(fused[#loc57, #loc58])
#loc102 = loc(fused[#loc56, #loc55])
#loc103 = loc(fused[#loc62, #loc61])
#loc104 = loc(fused[#loc66, #loc65])
#loc105 = loc(fused[#loc67, #loc68])
#loc106 = loc(fused[#loc70, #loc71])
#loc108 = loc(fused[#loc78, #loc77])
