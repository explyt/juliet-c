!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":172:10)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":172:14)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":172:20)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":172:32)
#true = #cir.bool<true> : !cir.bool
#loc331 = loc(fused[#loc110, #loc111])
#loc332 = loc(fused[#loc112, #loc113])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc289)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc290)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc291)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc292)
  cir.func private @printIntLine(!s32i) loc(#loc293)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc294)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc14)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc295)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc297)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc22)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc298)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc26)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc26)
        cir.condition(%4) loc(#loc26)
      } do {
        %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc27)
        %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc290)
        %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc28)
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
        %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc27)
        cir.break loc(#loc29)
      } loc(#loc299)
    } loc(#loc299)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc32)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc32)
        cir.condition(%4) loc(#loc32)
      } do {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc302)
          %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc303)
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc39)
          %6 = cir.const #cir.int<10> : !s32i loc(#loc40)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc40)
          %8 = cir.const #cir.int<4> : !u64i loc(#loc304)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc305)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc39)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc306)
          cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc303)
          cir.scope {
            %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc46)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc46)
            %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc308)
            cir.if %18 {
              %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc48)
              %20 = cir.const #cir.int<1> : !s32i loc(#loc49)
              %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc50)
              cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc48)
            } loc(#loc309)
          } loc(#loc307)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc53)
            cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc311)
            cir.for : cond {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc55)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc56)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc312)
              cir.condition(%18) loc(#loc57)
            } body {
              cir.scope {
                %16 = cir.const #cir.int<0> : !s32i loc(#loc59)
                %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
                %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc61)
                %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc62)
                cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc314)
              } loc(#loc313)
              cir.yield loc(#loc52)
            } step {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc63)
              %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc64)
              cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc315)
              cir.yield loc(#loc310)
            } loc(#loc310)
          } loc(#loc310)
          cir.scope {
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc67)
            %16 = cir.const #cir.int<0> : !s32i loc(#loc68)
            %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc317)
            cir.if %17 {
              %18 = cir.const #cir.int<1> : !s32i loc(#loc72)
              %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc73)
              %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
              %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc75)
              cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc319)
              cir.scope {
                %22 = cir.const #cir.int<0> : !s32i loc(#loc78)
                cir.store %22, %3 : !s32i, !cir.ptr<!s32i> loc(#loc321)
                cir.for : cond {
                  %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc80)
                  %24 = cir.const #cir.int<10> : !s32i loc(#loc81)
                  %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc322)
                  cir.condition(%25) loc(#loc82)
                } body {
                  cir.scope {
                    %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
                    %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                    %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc86)
                    %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc84)
                    cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc87)
                  } loc(#loc323)
                  cir.yield loc(#loc77)
                } step {
                  %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                  %24 = cir.unary(inc, %23) : !s32i, !s32i loc(#loc89)
                  cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc324)
                  cir.yield loc(#loc320)
                } loc(#loc320)
              } loc(#loc320)
            } else {
              %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc14)
              %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc14)
              cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc90)
            } loc(#loc318)
          } loc(#loc316)
          %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc91)
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc92)
          cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc91)
        } loc(#loc301)
        cir.break loc(#loc93)
      } loc(#loc300)
    } loc(#loc300)
    cir.return loc(#loc18)
  } loc(#loc296)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc326)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc96)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc327)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc98)
    cir.return loc(#loc95)
  } loc(#loc325)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc328)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc329)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc107)
  cir.func @main(%arg0: !s32i loc(fused[#loc110, #loc111]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc112, #loc113])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc331)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc332)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc109)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc114)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc115)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc116)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc116)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc117)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc104)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc104)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc118)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc333)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16_good() : () -> () loc(#loc119)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc105)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc105)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc106)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc106)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc122)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc334)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16_bad() : () -> () loc(#loc123)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc107)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc107)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc125)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc126)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc335)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc335)
    cir.return %17 : !s32i loc(#loc335)
  } loc(#loc330)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc128)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc337)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc133)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc134)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc338)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc138)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc138)
        cir.condition(%4) loc(#loc138)
      } do {
        %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc139)
        %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc290)
        %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc140)
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc141)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc141)
        %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc139)
        cir.break loc(#loc142)
      } loc(#loc339)
    } loc(#loc339)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc145)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc145)
        cir.condition(%4) loc(#loc145)
      } do {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc342)
          %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc343)
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc152)
          %6 = cir.const #cir.int<10> : !s32i loc(#loc153)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc153)
          %8 = cir.const #cir.int<4> : !u64i loc(#loc344)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc345)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc152)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc346)
          cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc343)
          cir.scope {
            %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc158)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc159)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc159)
            %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc348)
            cir.if %18 {
              %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc161)
              %20 = cir.const #cir.int<1> : !s32i loc(#loc162)
              %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc163)
              cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc161)
            } loc(#loc349)
          } loc(#loc347)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc166)
            cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc351)
            cir.for : cond {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc168)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc169)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc352)
              cir.condition(%18) loc(#loc170)
            } body {
              cir.scope {
                %16 = cir.const #cir.int<0> : !s32i loc(#loc172)
                %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc173)
                %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc174)
                %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc175)
                cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc354)
              } loc(#loc353)
              cir.yield loc(#loc165)
            } step {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc176)
              %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc177)
              cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc355)
              cir.yield loc(#loc350)
            } loc(#loc350)
          } loc(#loc350)
          cir.scope {
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc180)
            %16 = cir.const #cir.int<0> : !s32i loc(#loc181)
            %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc357)
            %18 = cir.ternary(%17, true {
              %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc183)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc184)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc358)
              %22 = cir.ternary(%21, true {
                %23 = cir.const #true loc(#loc182)
                cir.yield %23 : !cir.bool loc(#loc182)
              }, false {
                %23 = cir.const #false loc(#loc182)
                cir.yield %23 : !cir.bool loc(#loc182)
              }) : (!cir.bool) -> !cir.bool loc(#loc182)
              cir.yield %22 : !cir.bool loc(#loc182)
            }, false {
              %19 = cir.const #false loc(#loc182)
              cir.yield %19 : !cir.bool loc(#loc182)
            }) : (!cir.bool) -> !cir.bool loc(#loc182)
            cir.if %18 {
              %19 = cir.const #cir.int<1> : !s32i loc(#loc189)
              %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc190)
              %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc191)
              %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc192)
              cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc360)
              cir.scope {
                %23 = cir.const #cir.int<0> : !s32i loc(#loc195)
                cir.store %23, %3 : !s32i, !cir.ptr<!s32i> loc(#loc362)
                cir.for : cond {
                  %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc197)
                  %25 = cir.const #cir.int<10> : !s32i loc(#loc198)
                  %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc363)
                  cir.condition(%26) loc(#loc199)
                } body {
                  cir.scope {
                    %24 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc201)
                    %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc202)
                    %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc203)
                    %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc201)
                    cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc204)
                  } loc(#loc364)
                  cir.yield loc(#loc194)
                } step {
                  %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc205)
                  %25 = cir.unary(inc, %24) : !s32i, !s32i loc(#loc206)
                  cir.store %25, %3 : !s32i, !cir.ptr<!s32i> loc(#loc365)
                  cir.yield loc(#loc361)
                } loc(#loc361)
              } loc(#loc361)
            } else {
              %19 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc128)
              %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc128)
              cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc207)
            } loc(#loc359)
          } loc(#loc356)
          %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc208)
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc209)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc209)
          cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc208)
        } loc(#loc341)
        cir.break loc(#loc210)
      } loc(#loc340)
    } loc(#loc340)
    cir.return loc(#loc130)
  } loc(#loc336)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc367)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc215)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc216)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc368)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc220)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc220)
        cir.condition(%4) loc(#loc220)
      } do {
        %3 = cir.const #cir.int<7> : !s32i loc(#loc221)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc370)
        cir.break loc(#loc223)
      } loc(#loc369)
    } loc(#loc369)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc226)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc226)
        cir.condition(%4) loc(#loc226)
      } do {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc373)
          %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc374)
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc233)
          %6 = cir.const #cir.int<10> : !s32i loc(#loc234)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc234)
          %8 = cir.const #cir.int<4> : !u64i loc(#loc375)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc376)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc233)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc377)
          cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc374)
          cir.scope {
            %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc239)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc240)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc240)
            %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc379)
            cir.if %18 {
              %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc242)
              %20 = cir.const #cir.int<1> : !s32i loc(#loc243)
              %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc244)
              cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc242)
            } loc(#loc380)
          } loc(#loc378)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc247)
            cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc382)
            cir.for : cond {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc249)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc250)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc383)
              cir.condition(%18) loc(#loc251)
            } body {
              cir.scope {
                %16 = cir.const #cir.int<0> : !s32i loc(#loc253)
                %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc254)
                %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc255)
                %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc256)
                cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc385)
              } loc(#loc384)
              cir.yield loc(#loc246)
            } step {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc257)
              %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc258)
              cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc386)
              cir.yield loc(#loc381)
            } loc(#loc381)
          } loc(#loc381)
          cir.scope {
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc261)
            %16 = cir.const #cir.int<0> : !s32i loc(#loc262)
            %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc388)
            cir.if %17 {
              %18 = cir.const #cir.int<1> : !s32i loc(#loc266)
              %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc267)
              %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc268)
              %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc269)
              cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc390)
              cir.scope {
                %22 = cir.const #cir.int<0> : !s32i loc(#loc272)
                cir.store %22, %3 : !s32i, !cir.ptr<!s32i> loc(#loc392)
                cir.for : cond {
                  %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc274)
                  %24 = cir.const #cir.int<10> : !s32i loc(#loc275)
                  %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc393)
                  cir.condition(%25) loc(#loc276)
                } body {
                  cir.scope {
                    %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc278)
                    %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc279)
                    %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc280)
                    %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc278)
                    cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc281)
                  } loc(#loc394)
                  cir.yield loc(#loc271)
                } step {
                  %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc282)
                  %24 = cir.unary(inc, %23) : !s32i, !s32i loc(#loc283)
                  cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc395)
                  cir.yield loc(#loc391)
                } loc(#loc391)
              } loc(#loc391)
            } else {
              %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc284)
              %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc284)
              cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc285)
            } loc(#loc389)
          } loc(#loc387)
          %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc286)
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc287)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc287)
          cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc286)
        } loc(#loc372)
        cir.break loc(#loc288)
      } loc(#loc371)
    } loc(#loc371)
    cir.return loc(#loc212)
  } loc(#loc366)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":30:23)
#loc6 = loc("/usr/include/stdlib.h":672:1)
#loc7 = loc("/usr/include/stdlib.h":672:45)
#loc8 = loc("/usr/include/stdlib.h":756:1)
#loc9 = loc("/usr/include/stdlib.h":756:70)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":57:27)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":22:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":63:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":24:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":24:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":26:13)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":26:12)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":26:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":27:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":32:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":27:11)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":30:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":30:16)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":31:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":33:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":62:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":33:11)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":35:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":60:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":36:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":36:17)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":37:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":37:58)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":37:35)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":37:42)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":37:47)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":37:57)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":38:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":38:43)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":38:17)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":38:27)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":38:33)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":38:34)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":38:40)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":38:39)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":40:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":43:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":40:22)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":40:18)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":40:25)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":40:29)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":40:27)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":41:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":42:29)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":42:17)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":42:24)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":42:25)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":40:34)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":40:33)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":46:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":58:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":46:17)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":46:25)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":47:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":54:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":56:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":48:32)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":48:17)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":48:24)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":48:28)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":50:17)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":53:17)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":50:25)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":50:21)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":50:28)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":50:32)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":50:30)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":51:17)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":52:34)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":52:41)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":52:42)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":52:21)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":50:37)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":50:36)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":57:17)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":59:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":59:18)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":61:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":157:1)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":161:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":159:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":159:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":160:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":160:13)
#loc100 = loc("/usr/include/stdlib.h":575:1)
#loc101 = loc("/usr/include/stdlib.h":575:41)
#loc102 = loc("/usr/include/time.h":76:1)
#loc103 = loc("/usr/include/time.h":76:38)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":177:15)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":179:15)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":182:15)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":184:15)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":172:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":187:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":173:1)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":175:27)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":175:22)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":175:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":177:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":178:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":178:64)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":179:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":182:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":183:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":183:63)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":184:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":186:12)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":186:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":104:27)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":70:1)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":110:1)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":72:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":72:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":74:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":74:12)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":74:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":75:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":80:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":75:11)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":78:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":78:16)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":78:23)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":79:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":81:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":109:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":81:11)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":83:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":107:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":84:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":84:17)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":85:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":85:58)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":85:35)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":85:42)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":85:47)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":85:57)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":86:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":86:43)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":86:17)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":86:27)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":86:33)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":86:34)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":86:40)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":86:39)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":88:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":91:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":88:22)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":88:18)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":88:25)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":88:29)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":88:27)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":89:13)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":90:29)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":90:17)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":90:24)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":90:25)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":88:34)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":88:33)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":93:13)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":105:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":93:17)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":93:25)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":93:27)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":93:30)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":93:38)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":93:40)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":94:13)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":101:13)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":103:13)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":95:32)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":95:17)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":95:24)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":95:28)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":97:17)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":100:17)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":97:25)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":97:21)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":97:28)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":97:32)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":97:30)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":98:17)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":99:34)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":99:41)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":99:42)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":99:21)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":97:37)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":97:36)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":104:17)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":106:13)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":106:18)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":108:9)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":113:1)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":155:1)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":115:5)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":115:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":117:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":117:12)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":117:5)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":118:5)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":124:5)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":118:11)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":122:16)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":122:9)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":123:9)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":125:5)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":154:5)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":125:11)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":127:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":152:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":128:13)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":128:17)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":129:13)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":129:58)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":129:35)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":129:42)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":129:47)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":129:57)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":130:13)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":130:43)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":130:17)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":130:27)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":130:33)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":130:34)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":130:40)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":130:39)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":132:13)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":135:13)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":132:22)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":132:18)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":132:25)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":132:29)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":132:27)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":133:13)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":134:29)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":134:17)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":134:24)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":134:25)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":132:34)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":132:33)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":138:13)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":150:13)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":138:17)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":138:25)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":139:13)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":146:13)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":148:13)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":140:32)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":140:17)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":140:24)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":140:28)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":142:17)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":145:17)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":142:25)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":142:21)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":142:28)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":142:32)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":142:30)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":143:17)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":144:34)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":144:41)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":144:42)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":144:21)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":142:37)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":142:36)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":149:27)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":149:17)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":151:13)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":151:18)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c":153:9)
#loc289 = loc(fused[#loc1, #loc2])
#loc290 = loc(fused[#loc3, #loc4])
#loc291 = loc(fused[#loc6, #loc7])
#loc292 = loc(fused[#loc8, #loc9])
#loc293 = loc(fused[#loc10, #loc11])
#loc294 = loc(fused[#loc12, #loc13])
#loc295 = loc(fused[#loc15, #loc16])
#loc296 = loc(fused[#loc17, #loc18])
#loc297 = loc(fused[#loc19, #loc20])
#loc298 = loc(fused[#loc23, #loc21])
#loc299 = loc(fused[#loc24, #loc25])
#loc300 = loc(fused[#loc30, #loc31])
#loc301 = loc(fused[#loc33, #loc34])
#loc302 = loc(fused[#loc35, #loc36])
#loc303 = loc(fused[#loc37, #loc38])
#loc304 = loc(fused[#loc41, #loc42])
#loc305 = loc(fused[#loc40, #loc42])
#loc306 = loc(fused[#loc39, #loc38])
#loc307 = loc(fused[#loc43, #loc44])
#loc308 = loc(fused[#loc45, #loc46])
#loc309 = loc(fused[#loc47, #loc44])
#loc310 = loc(fused[#loc51, #loc52])
#loc311 = loc(fused[#loc54, #loc53])
#loc312 = loc(fused[#loc55, #loc56])
#loc313 = loc(fused[#loc58, #loc52])
#loc314 = loc(fused[#loc60, #loc59])
#loc315 = loc(fused[#loc64, #loc63])
#loc316 = loc(fused[#loc65, #loc66])
#loc317 = loc(fused[#loc67, #loc68])
#loc318 = loc(fused[#loc69, #loc70, #loc71, #loc66])
#loc319 = loc(fused[#loc73, #loc72])
#loc320 = loc(fused[#loc76, #loc77])
#loc321 = loc(fused[#loc79, #loc78])
#loc322 = loc(fused[#loc80, #loc81])
#loc323 = loc(fused[#loc83, #loc77])
#loc324 = loc(fused[#loc89, #loc88])
#loc325 = loc(fused[#loc94, #loc95])
#loc326 = loc(fused[#loc96, #loc97])
#loc327 = loc(fused[#loc98, #loc99])
#loc328 = loc(fused[#loc100, #loc101])
#loc329 = loc(fused[#loc102, #loc103])
#loc330 = loc(fused[#loc108, #loc109])
#loc333 = loc(fused[#loc119, #loc120])
#loc334 = loc(fused[#loc123, #loc124])
#loc335 = loc(fused[#loc127, #loc126])
#loc336 = loc(fused[#loc129, #loc130])
#loc337 = loc(fused[#loc131, #loc132])
#loc338 = loc(fused[#loc135, #loc133])
#loc339 = loc(fused[#loc136, #loc137])
#loc340 = loc(fused[#loc143, #loc144])
#loc341 = loc(fused[#loc146, #loc147])
#loc342 = loc(fused[#loc148, #loc149])
#loc343 = loc(fused[#loc150, #loc151])
#loc344 = loc(fused[#loc154, #loc155])
#loc345 = loc(fused[#loc153, #loc155])
#loc346 = loc(fused[#loc152, #loc151])
#loc347 = loc(fused[#loc156, #loc157])
#loc348 = loc(fused[#loc158, #loc159])
#loc349 = loc(fused[#loc160, #loc157])
#loc350 = loc(fused[#loc164, #loc165])
#loc351 = loc(fused[#loc167, #loc166])
#loc352 = loc(fused[#loc168, #loc169])
#loc353 = loc(fused[#loc171, #loc165])
#loc354 = loc(fused[#loc173, #loc172])
#loc355 = loc(fused[#loc177, #loc176])
#loc356 = loc(fused[#loc178, #loc179])
#loc357 = loc(fused[#loc180, #loc181])
#loc358 = loc(fused[#loc183, #loc185])
#loc359 = loc(fused[#loc186, #loc187, #loc188, #loc179])
#loc360 = loc(fused[#loc190, #loc189])
#loc361 = loc(fused[#loc193, #loc194])
#loc362 = loc(fused[#loc196, #loc195])
#loc363 = loc(fused[#loc197, #loc198])
#loc364 = loc(fused[#loc200, #loc194])
#loc365 = loc(fused[#loc206, #loc205])
#loc366 = loc(fused[#loc211, #loc212])
#loc367 = loc(fused[#loc213, #loc214])
#loc368 = loc(fused[#loc217, #loc215])
#loc369 = loc(fused[#loc218, #loc219])
#loc370 = loc(fused[#loc222, #loc221])
#loc371 = loc(fused[#loc224, #loc225])
#loc372 = loc(fused[#loc227, #loc228])
#loc373 = loc(fused[#loc229, #loc230])
#loc374 = loc(fused[#loc231, #loc232])
#loc375 = loc(fused[#loc235, #loc236])
#loc376 = loc(fused[#loc234, #loc236])
#loc377 = loc(fused[#loc233, #loc232])
#loc378 = loc(fused[#loc237, #loc238])
#loc379 = loc(fused[#loc239, #loc240])
#loc380 = loc(fused[#loc241, #loc238])
#loc381 = loc(fused[#loc245, #loc246])
#loc382 = loc(fused[#loc248, #loc247])
#loc383 = loc(fused[#loc249, #loc250])
#loc384 = loc(fused[#loc252, #loc246])
#loc385 = loc(fused[#loc254, #loc253])
#loc386 = loc(fused[#loc258, #loc257])
#loc387 = loc(fused[#loc259, #loc260])
#loc388 = loc(fused[#loc261, #loc262])
#loc389 = loc(fused[#loc263, #loc264, #loc265, #loc260])
#loc390 = loc(fused[#loc267, #loc266])
#loc391 = loc(fused[#loc270, #loc271])
#loc392 = loc(fused[#loc273, #loc272])
#loc393 = loc(fused[#loc274, #loc275])
#loc394 = loc(fused[#loc277, #loc271])
#loc395 = loc(fused[#loc283, #loc282])
