!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":28:21)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":28:28)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":107:10)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":107:14)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":107:20)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":107:32)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":64:25)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":64:32)
#loc147 = loc(fused[#loc9, #loc10])
#loc172 = loc(fused[#loc74, #loc75])
#loc173 = loc(fused[#loc76, #loc77])
#loc178 = loc(fused[#loc94, #loc95])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2BSink.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc143)
  cir.global "private" constant cir_private @__const.badSink.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc144)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc145)
  cir.func internal private @badSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc9, #loc10])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc144)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc148)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc149)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc147)
    cir.store %arg0, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc14)
    cir.br ^bb1 loc(#loc150)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @__const.badSink.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc144)
    cir.copy %4 to %0 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc144)
    %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc17)
    %6 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc18)
    %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc17)
    cir.store %7, %2 : !u64i, !cir.ptr<!u64i> loc(#loc151)
    cir.br ^bb2 loc(#loc152)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<0> : !s32i loc(#loc23)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc23)
    cir.store %9, %1 : !u64i, !cir.ptr<!u64i> loc(#loc153)
    cir.br ^bb3 loc(#loc152)
  ^bb3:  // 2 preds: ^bb2, ^bb7
    %10 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc25)
    %11 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc26)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc27)
    %14 = cir.binop(add, %11, %13) : !u64i loc(#loc154)
    %15 = cir.cmp(lt, %10, %14) : !u64i, !cir.bool loc(#loc155)
    cir.brcond %15 ^bb4, ^bb8 loc(#loc28)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc156)
  ^bb5:  // pred: ^bb4
    %16 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc30)
    %17 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc31)
    %18 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %16 : !u64i), !cir.ptr<!s8i> loc(#loc31)
    %19 = cir.load %18 : !cir.ptr<!s8i>, !s8i loc(#loc31)
    %20 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
    %21 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc33)
    %22 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %21 : !u64i), !cir.ptr<!s8i> loc(#loc34)
    cir.store %19, %22 : !s8i, !cir.ptr<!s8i> loc(#loc157)
    cir.br ^bb6 loc(#loc22)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc22)
  ^bb7:  // pred: ^bb6
    %23 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc36)
    %24 = cir.unary(inc, %23) : !u64i, !u64i loc(#loc37)
    cir.store %24, %1 : !u64i, !cir.ptr<!u64i> loc(#loc158)
    cir.br ^bb3 loc(#loc152)
  ^bb8:  // pred: ^bb3
    cir.br ^bb9 loc(#loc22)
  ^bb9:  // pred: ^bb8
    %25 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc39)
    cir.br ^bb10 loc(#loc16)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc8)
  } loc(#loc146)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc160)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc161)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc162)
    %3 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc45)
    cir.store %3, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc161)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc47)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc47)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc47)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc47)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc47)
    %9 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc163)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc47)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc47)
    cir.store %11, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc162)
    %12 = cir.const #cir.int<10> : !s32i loc(#loc49)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %14 = cir.binop(add, %12, %13) nsw : !s32i loc(#loc49)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc49)
    %16 = cir.const #cir.int<1> : !u64i loc(#loc49)
    %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc49)
    %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc49)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc49)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc49)
    cir.store %20, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc163)
    %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
    cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc164)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc52)
    %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc52)
    %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc54)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc55)
    cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc165)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc56)
    %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
    cir.call %27(%28) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc56)
    cir.return loc(#loc41)
  } loc(#loc159)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc167)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    cir.return loc(#loc59)
  } loc(#loc166)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc168)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc169)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc71)
  cir.func @main(%arg0: !s32i loc(fused[#loc74, #loc75]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc76, #loc77])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc172)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc173)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc73)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc78)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc78)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc79)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc80)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc80)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc81)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc68)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44_good() : () -> () loc(#loc83)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc69)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc70)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44_bad() : () -> () loc(#loc87)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc71)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc90)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc176)
    cir.return %17 : !s32i loc(#loc176)
  } loc(#loc171)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc94, #loc95])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc143)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc179)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc180)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc178)
    cir.store %arg0, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc99)
    cir.br ^bb1 loc(#loc181)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @__const.goodG2BSink.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc143)
    cir.copy %4 to %0 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc143)
    %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc102)
    %6 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc103)
    %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc102)
    cir.store %7, %2 : !u64i, !cir.ptr<!u64i> loc(#loc182)
    cir.br ^bb2 loc(#loc183)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<0> : !s32i loc(#loc108)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc108)
    cir.store %9, %1 : !u64i, !cir.ptr<!u64i> loc(#loc184)
    cir.br ^bb3 loc(#loc183)
  ^bb3:  // 2 preds: ^bb2, ^bb7
    %10 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc110)
    %11 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc111)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc112)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc112)
    %14 = cir.binop(add, %11, %13) : !u64i loc(#loc185)
    %15 = cir.cmp(lt, %10, %14) : !u64i, !cir.bool loc(#loc186)
    cir.brcond %15 ^bb4, ^bb8 loc(#loc113)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc187)
  ^bb5:  // pred: ^bb4
    %16 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc115)
    %17 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc116)
    %18 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %16 : !u64i), !cir.ptr<!s8i> loc(#loc116)
    %19 = cir.load %18 : !cir.ptr<!s8i>, !s8i loc(#loc116)
    %20 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
    %21 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc118)
    %22 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %21 : !u64i), !cir.ptr<!s8i> loc(#loc119)
    cir.store %19, %22 : !s8i, !cir.ptr<!s8i> loc(#loc188)
    cir.br ^bb6 loc(#loc107)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc107)
  ^bb7:  // pred: ^bb6
    %23 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc121)
    %24 = cir.unary(inc, %23) : !u64i, !u64i loc(#loc122)
    cir.store %24, %1 : !u64i, !cir.ptr<!u64i> loc(#loc189)
    cir.br ^bb3 loc(#loc183)
  ^bb8:  // pred: ^bb3
    cir.br ^bb9 loc(#loc107)
  ^bb9:  // pred: ^bb8
    %25 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    cir.br ^bb10 loc(#loc101)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc93)
  } loc(#loc177)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc191)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc192)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc193)
    %3 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc130)
    cir.store %3, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc192)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc132)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc132)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc132)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc132)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc132)
    %9 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc194)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc132)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc132)
    cir.store %11, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc193)
    %12 = cir.const #cir.int<10> : !s32i loc(#loc134)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc134)
    %14 = cir.binop(add, %12, %13) nsw : !s32i loc(#loc134)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc134)
    %16 = cir.const #cir.int<1> : !u64i loc(#loc134)
    %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc134)
    %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc134)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc134)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc134)
    cir.store %20, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc194)
    %21 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
    cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc195)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc137)
    %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc137)
    %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc138)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc139)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc140)
    cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc196)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc141)
    %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
    cir.call %27(%28) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc141)
    cir.return loc(#loc126)
  } loc(#loc190)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":67:9)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":67:29)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":31:9)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":31:29)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":28:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":42:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":32:9)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":32:16)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":32:19)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":29:1)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":30:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":41:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":33:21)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":33:28)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":33:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":33:34)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":36:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":39:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":36:18)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":36:14)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":36:21)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":36:25)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":36:37)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":36:23)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":37:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":38:30)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":38:23)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":38:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":38:18)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":38:19)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":38:31)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":36:41)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":36:40)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":40:19)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":40:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":44:1)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":57:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":46:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":46:12)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":48:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":48:32)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":49:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":49:36)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":50:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":50:37)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":53:12)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":53:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":54:15)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":54:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":54:10)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":54:11)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":56:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":56:13)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":93:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":96:1)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":95:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":95:13)
#loc62 = loc("/usr/include/stdlib.h":575:1)
#loc63 = loc("/usr/include/stdlib.h":575:41)
#loc64 = loc("/usr/include/time.h":76:1)
#loc65 = loc("/usr/include/time.h":76:38)
#loc66 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc67 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":112:15)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":114:15)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":117:15)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":119:15)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":107:1)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":122:1)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":108:1)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":110:27)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":110:22)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":110:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":112:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":113:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":113:73)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":114:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":117:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":118:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":118:72)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":119:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":121:12)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":121:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":64:1)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":78:1)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":68:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":68:16)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":68:19)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":65:1)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":66:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":77:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":69:21)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":69:28)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":69:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":69:34)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":72:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":75:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":72:18)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":72:14)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":72:21)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":72:25)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":72:37)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":72:23)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":73:9)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":74:30)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":74:23)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":74:13)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":74:18)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":74:19)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":74:31)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":72:41)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":72:40)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":76:19)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":76:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":80:1)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":91:1)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":82:5)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":82:12)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":83:5)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":83:32)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":84:5)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":84:36)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":85:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":85:37)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":88:12)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":88:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":89:15)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":89:5)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":89:10)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":89:11)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":90:5)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c":90:13)
#loc143 = loc(fused[#loc1, #loc2])
#loc144 = loc(fused[#loc3, #loc4])
#loc145 = loc(fused[#loc5, #loc6])
#loc146 = loc(fused[#loc7, #loc8])
#loc148 = loc(fused[#loc11, #loc12])
#loc149 = loc(fused[#loc11, #loc13])
#loc150 = loc(fused[#loc15, #loc16])
#loc151 = loc(fused[#loc19, #loc20])
#loc152 = loc(fused[#loc21, #loc22])
#loc153 = loc(fused[#loc24, #loc23])
#loc154 = loc(fused[#loc26, #loc27])
#loc155 = loc(fused[#loc25, #loc27])
#loc156 = loc(fused[#loc29, #loc22])
#loc157 = loc(fused[#loc32, #loc35])
#loc158 = loc(fused[#loc37, #loc36])
#loc159 = loc(fused[#loc40, #loc41])
#loc160 = loc(fused[#loc42, #loc43])
#loc161 = loc(fused[#loc44, #loc45])
#loc162 = loc(fused[#loc46, #loc47])
#loc163 = loc(fused[#loc48, #loc49])
#loc164 = loc(fused[#loc51, #loc50])
#loc165 = loc(fused[#loc53, #loc52])
#loc166 = loc(fused[#loc58, #loc59])
#loc167 = loc(fused[#loc60, #loc61])
#loc168 = loc(fused[#loc62, #loc63])
#loc169 = loc(fused[#loc64, #loc65])
#loc170 = loc(fused[#loc66, #loc67])
#loc171 = loc(fused[#loc72, #loc73])
#loc174 = loc(fused[#loc83, #loc84])
#loc175 = loc(fused[#loc87, #loc88])
#loc176 = loc(fused[#loc91, #loc90])
#loc177 = loc(fused[#loc92, #loc93])
#loc179 = loc(fused[#loc96, #loc97])
#loc180 = loc(fused[#loc96, #loc98])
#loc181 = loc(fused[#loc100, #loc101])
#loc182 = loc(fused[#loc104, #loc105])
#loc183 = loc(fused[#loc106, #loc107])
#loc184 = loc(fused[#loc109, #loc108])
#loc185 = loc(fused[#loc111, #loc112])
#loc186 = loc(fused[#loc110, #loc112])
#loc187 = loc(fused[#loc114, #loc107])
#loc188 = loc(fused[#loc117, #loc120])
#loc189 = loc(fused[#loc122, #loc121])
#loc190 = loc(fused[#loc125, #loc126])
#loc191 = loc(fused[#loc127, #loc128])
#loc192 = loc(fused[#loc129, #loc130])
#loc193 = loc(fused[#loc131, #loc132])
#loc194 = loc(fused[#loc133, #loc134])
#loc195 = loc(fused[#loc136, #loc135])
#loc196 = loc(fused[#loc138, #loc137])
