!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":101:10)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":101:14)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":101:20)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":101:32)
#loc125 = loc(fused[#loc40, #loc41])
#loc126 = loc(fused[#loc42, #loc43])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printUnsignedLine(!u32i) loc(#loc109)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_square_18_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc111)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc112)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc9)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc9)
    cir.store %3, %0 : !u32i, !cir.ptr<!u32i> loc(#loc113)
    cir.goto "source" loc(#loc114)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc13)
    %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc14)
    %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc14)
    %6 = cir.const #cir.int<2> : !u32i loc(#loc14)
    %7 = cir.binop(mul, %5, %6) : !u32i loc(#loc14)
    %8 = cir.const #cir.int<1> : !u32i loc(#loc14)
    %9 = cir.binop(add, %7, %8) : !u32i loc(#loc14)
    cir.store %9, %0 : !u32i, !cir.ptr<!u32i> loc(#loc115)
    cir.goto "sink" loc(#loc116)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc18)
    %10 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc19)
    %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc8)
    %12 = cir.binop(mul, %10, %11) : !u32i loc(#loc117)
    cir.store %12, %1 : !u32i, !cir.ptr<!u32i> loc(#loc112)
    %13 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc20)
    cir.call @printUnsignedLine(%13) : (!u32i) -> () loc(#loc21)
    cir.return loc(#loc4)
  } loc(#loc110)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_square_18_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc119)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc120)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    cir.return loc(#loc23)
  } loc(#loc118)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc121)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc122)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc123)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc34)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc35)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc37)
  cir.func @main(%arg0: !s32i loc(fused[#loc40, #loc41]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc42, #loc43])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc125)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc126)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc39)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc44)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc44)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc45)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc46)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc46)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc47)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc34)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    %8 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_max_square_18_good : !cir.ptr<!cir.func<!void ()>> loc(#loc127)
    cir.call @CWE190_Integer_Overflow__unsigned_int_max_square_18_good() : () -> () loc(#loc49)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc35)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc36)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %13 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_max_square_18_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call @CWE190_Integer_Overflow__unsigned_int_max_square_18_bad() : () -> () loc(#loc53)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc37)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc56)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    cir.return %17 : !s32i loc(#loc129)
  } loc(#loc124)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc59)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc131)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc64)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc64)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc132)
    cir.goto "source" loc(#loc133)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc68)
    %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc69)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc69)
    %5 = cir.const #cir.int<2> : !u32i loc(#loc69)
    %6 = cir.binop(mul, %4, %5) : !u32i loc(#loc69)
    %7 = cir.const #cir.int<1> : !u32i loc(#loc69)
    %8 = cir.binop(add, %6, %7) : !u32i loc(#loc69)
    cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc134)
    cir.goto "sink" loc(#loc135)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc73)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc76)
      %10 = cir.cast(integral, %9 : !u32i), !s64i loc(#loc76)
      %11 = cir.cast(integral, %10 : !s64i), !s32i loc(#loc76)
      %12 = cir.abs %11 poison : !s32i loc(#loc77)
      %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc77)
      %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc78)
      %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc79)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc79)
      %17 = cir.const #cir.int<2> : !u32i loc(#loc79)
      %18 = cir.binop(mul, %16, %17) : !u32i loc(#loc79)
      %19 = cir.const #cir.int<1> : !u32i loc(#loc79)
      %20 = cir.binop(add, %18, %19) : !u32i loc(#loc79)
      %21 = cir.cast(int_to_float, %20 : !u32i), !cir.double loc(#loc79)
      %22 = cir.call @sqrt(%21) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc78)
      %23 = cir.cast(float_to_int, %22 : !cir.double), !s64i loc(#loc78)
      %24 = cir.cmp(lt, %13, %23) : !s64i, !cir.bool loc(#loc137)
      cir.if %24 {
        %25 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc139)
        %26 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc86)
        %27 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc85)
        %28 = cir.binop(mul, %26, %27) : !u32i loc(#loc140)
        cir.store %28, %25 : !u32i, !cir.ptr<!u32i> loc(#loc139)
        %29 = cir.load %25 : !cir.ptr<!u32i>, !u32i loc(#loc87)
        cir.call @printUnsignedLine(%29) : (!u32i) -> () loc(#loc88)
      } else {
        %25 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc59)
        %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc59)
        cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc89)
      } loc(#loc138)
    } loc(#loc136)
    cir.return loc(#loc61)
  } loc(#loc130)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc142)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc143)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc96)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc96)
    cir.store %3, %0 : !u32i, !cir.ptr<!u32i> loc(#loc144)
    cir.goto "source" loc(#loc145)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc100)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc101)
    %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc101)
    cir.store %5, %0 : !u32i, !cir.ptr<!u32i> loc(#loc146)
    cir.goto "sink" loc(#loc147)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc105)
    %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc106)
    %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc95)
    %8 = cir.binop(mul, %6, %7) : !u32i loc(#loc148)
    cir.store %8, %1 : !u32i, !cir.ptr<!u32i> loc(#loc143)
    %9 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc107)
    cir.call @printUnsignedLine(%9) : (!u32i) -> () loc(#loc108)
    cir.return loc(#loc91)
  } loc(#loc141)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_18.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc3 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":39:1)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":26:5)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":26:18)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":36:9)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":36:38)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":27:12)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":27:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":28:5)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":28:10)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":29:1)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":31:12)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":31:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":32:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":32:10)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":33:1)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":36:31)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":37:27)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":37:9)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":86:1)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":90:1)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":88:5)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":88:13)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":89:5)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":89:13)
#loc28 = loc("/usr/include/stdlib.h":575:1)
#loc29 = loc("/usr/include/stdlib.h":575:41)
#loc30 = loc("/usr/include/time.h":76:1)
#loc31 = loc("/usr/include/time.h":76:38)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":106:15)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":108:15)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":111:15)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":113:15)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":101:1)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":116:1)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":102:1)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":104:27)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":104:22)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":104:5)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":106:5)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":107:5)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":107:62)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":108:5)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":111:5)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":112:5)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":112:61)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":113:5)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":115:12)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":115:5)
#loc58 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":64:19)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":46:1)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":66:1)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":48:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":48:18)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":49:12)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":49:5)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":50:5)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":50:10)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":51:1)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":53:12)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":53:5)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":54:5)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":54:10)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":55:1)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":57:5)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":65:5)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":57:19)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":57:9)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":57:33)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":57:46)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":57:54)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":58:5)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":61:5)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":63:5)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":59:9)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":59:38)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":59:31)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":60:27)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":60:9)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":64:9)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":69:1)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":84:1)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":71:5)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":71:18)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":81:9)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":81:38)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":72:12)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":72:5)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":73:5)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":73:10)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":74:1)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":76:12)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":76:5)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":77:5)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":77:10)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":78:1)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":81:31)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":82:27)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_18.c":82:9)
#loc109 = loc(fused[#loc1, #loc2])
#loc110 = loc(fused[#loc3, #loc4])
#loc111 = loc(fused[#loc5, #loc6])
#loc112 = loc(fused[#loc7, #loc8])
#loc113 = loc(fused[#loc10, #loc9])
#loc114 = loc(fused[#loc11, #loc12])
#loc115 = loc(fused[#loc15, #loc14])
#loc116 = loc(fused[#loc16, #loc17])
#loc117 = loc(fused[#loc19, #loc8])
#loc118 = loc(fused[#loc22, #loc23])
#loc119 = loc(fused[#loc24, #loc25])
#loc120 = loc(fused[#loc26, #loc27])
#loc121 = loc(fused[#loc28, #loc29])
#loc122 = loc(fused[#loc30, #loc31])
#loc123 = loc(fused[#loc32, #loc33])
#loc124 = loc(fused[#loc38, #loc39])
#loc127 = loc(fused[#loc49, #loc50])
#loc128 = loc(fused[#loc53, #loc54])
#loc129 = loc(fused[#loc57, #loc56])
#loc130 = loc(fused[#loc60, #loc61])
#loc131 = loc(fused[#loc62, #loc63])
#loc132 = loc(fused[#loc65, #loc64])
#loc133 = loc(fused[#loc66, #loc67])
#loc134 = loc(fused[#loc70, #loc69])
#loc135 = loc(fused[#loc71, #loc72])
#loc136 = loc(fused[#loc74, #loc75])
#loc137 = loc(fused[#loc77, #loc80])
#loc138 = loc(fused[#loc81, #loc82, #loc83, #loc75])
#loc139 = loc(fused[#loc84, #loc85])
#loc140 = loc(fused[#loc86, #loc85])
#loc141 = loc(fused[#loc90, #loc91])
#loc142 = loc(fused[#loc92, #loc93])
#loc143 = loc(fused[#loc94, #loc95])
#loc144 = loc(fused[#loc97, #loc96])
#loc145 = loc(fused[#loc98, #loc99])
#loc146 = loc(fused[#loc102, #loc101])
#loc147 = loc(fused[#loc103, #loc104])
#loc148 = loc(fused[#loc106, #loc95])
