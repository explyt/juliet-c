!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":26:21)
#loc6 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":26:27)
#loc63 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":64:25)
#loc64 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":64:31)
#loc89 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":85:25)
#loc90 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":85:31)
#loc141 = loc(fused[#loc5, #loc6])
#loc163 = loc(fused[#loc63, #loc64])
#loc173 = loc(fused[#loc89, #loc90])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fgets_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc139)
  cir.func internal private  @badSink(%arg0: !cir.float loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc141)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc143)
      %2 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc12)
      %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc13)
      %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc13)
      %5 = cir.binop(div, %2, %4) : !cir.double loc(#loc144)
      %6 = cir.cast(float_to_int, %5 : !cir.double), !s32i loc(#loc144)
      cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc143)
      %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc15)
    } loc(#loc142)
    cir.return loc(#loc4)
  } loc(#loc140)
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc145)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc146)
  cir.func private  @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr1) loc(#loc147)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc148)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc24)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_fgets_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc150)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc151)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!cir.float)>> loc(#loc30)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.float)>>> loc(#loc151)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc31)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc152)
    cir.scope {
      %6 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc154)
      cir.scope {
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc39)
        %8 = cir.const #cir.int<20> : !s32i loc(#loc40)
        %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc146)
        %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc41)
        %11 = cir.call @fgets(%7, %8, %10) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc42)
        %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc43)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc43)
        %14 = cir.cmp(ne, %11, %13) : !cir.ptr<!s8i>, !s32i loc(#loc156)
        %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc44)
        cir.if %15 {
          %16 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc48)
          %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr1) loc(#loc49)
          %18 = cir.cast(floating, %17 : !cir.double), !cir.float loc(#loc49)
          cir.store %18, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc158)
        } else {
          %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc24)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc24)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc52)
        } loc(#loc157)
      } loc(#loc155)
    } loc(#loc153)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.float)>>>, !cir.ptr<!cir.func<!void (!cir.float)>> loc(#loc53)
    %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc54)
    cir.call %4(%5) : (!cir.ptr<!cir.func<!void (!cir.float)>>, !cir.float) -> () loc(#loc53)
    cir.return loc(#loc26)
  } loc(#loc149)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_fgets_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc160)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc161)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    cir.return loc(#loc56)
  } loc(#loc159)
  cir.func internal private  @goodG2BSink(%arg0: !cir.float loc(fused[#loc63, #loc64])) extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc163)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc65)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc165)
      %2 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc70)
      %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc71)
      %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc71)
      %5 = cir.binop(div, %2, %4) : !cir.double loc(#loc166)
      %6 = cir.cast(float_to_int, %5 : !cir.double), !s32i loc(#loc166)
      cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc165)
      %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc72)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc73)
    } loc(#loc164)
    cir.return loc(#loc62)
  } loc(#loc162)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc168)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc169)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!cir.float)>> loc(#loc79)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.float)>>> loc(#loc169)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc80)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc170)
    %4 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc82)
    cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc171)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.float)>>>, !cir.ptr<!cir.func<!void (!cir.float)>> loc(#loc84)
    %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc85)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!cir.float)>>, !cir.float) -> () loc(#loc84)
    cir.return loc(#loc75)
  } loc(#loc167)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc86)
  cir.func internal private  @goodB2GSink(%arg0: !cir.float loc(fused[#loc89, #loc90])) extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc173)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc91)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc94)
      %2 = cir.cast(floating, %1 : !cir.float), !cir.double loc(#loc94)
      %3 = cir.fabs %2 : !cir.double loc(#loc94)
      %4 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc95)
      %5 = cir.cmp(gt, %3, %4) : !cir.double, !s32i loc(#loc175)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc97)
      cir.if %6 {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc177)
        %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc103)
        %9 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc104)
        %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc104)
        %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc178)
        %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc178)
        cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc177)
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc105)
        cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc106)
      } else {
        %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc86)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc86)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc107)
      } loc(#loc176)
    } loc(#loc174)
    cir.return loc(#loc88)
  } loc(#loc172)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc180)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc181)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!cir.float)>> loc(#loc113)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.float)>>> loc(#loc181)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc114)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc182)
    cir.scope {
      %6 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc184)
      cir.scope {
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc122)
        %8 = cir.const #cir.int<20> : !s32i loc(#loc123)
        %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc146)
        %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc124)
        %11 = cir.call @fgets(%7, %8, %10) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc125)
        %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc126)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc126)
        %14 = cir.cmp(ne, %11, %13) : !cir.ptr<!s8i>, !s32i loc(#loc186)
        %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc127)
        cir.if %15 {
          %16 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc131)
          %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr1) loc(#loc132)
          %18 = cir.cast(floating, %17 : !cir.double), !cir.float loc(#loc132)
          cir.store %18, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc188)
        } else {
          %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc135)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc135)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc136)
        } loc(#loc187)
      } loc(#loc185)
    } loc(#loc183)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.float)>>>, !cir.ptr<!cir.func<!void (!cir.float)>> loc(#loc137)
    %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc138)
    cir.call %4(%5) : (!cir.ptr<!cir.func<!void (!cir.float)>>, !cir.float) -> () loc(#loc137)
    cir.return loc(#loc109)
  } loc(#loc179)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fgets_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":26:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":33:1)
#loc7 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":27:1)
#loc8 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":28:5)
#loc9 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":32:5)
#loc10 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":30:9)
#loc11 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":30:40)
#loc12 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":30:28)
#loc13 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":30:36)
#loc14 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":31:22)
#loc15 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":31:9)
#loc16 = loc("/usr/include/stdio.h":654:1)
#loc17 = loc("/usr/include/stdio.h":655:59)
#loc18 = loc("/usr/include/stdio.h":149:1)
#loc19 = loc("/usr/include/stdio.h":149:14)
#loc20 = loc("/usr/include/stdlib.h":102:1)
#loc21 = loc("/usr/include/stdlib.h":103:33)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":52:23)
#loc25 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":35:1)
#loc26 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":57:1)
#loc27 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":37:5)
#loc28 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":37:11)
#loc29 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":39:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":39:31)
#loc31 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":41:12)
#loc32 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":41:5)
#loc33 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":42:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":54:5)
#loc35 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":43:9)
#loc36 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":43:41)
#loc37 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":45:9)
#loc38 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":53:9)
#loc39 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":45:19)
#loc40 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":45:32)
#loc41 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":45:49)
#loc42 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":45:13)
#loc43 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":45:59)
#loc44 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":45:56)
#loc45 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":46:9)
#loc46 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":49:9)
#loc47 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":51:9)
#loc48 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":48:32)
#loc49 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":48:27)
#loc50 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":48:13)
#loc51 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":48:43)
#loc52 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":52:13)
#loc53 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":56:5)
#loc54 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":56:13)
#loc55 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":121:1)
#loc56 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":125:1)
#loc57 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":123:5)
#loc58 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":123:13)
#loc59 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":124:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":124:13)
#loc61 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":64:1)
#loc62 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":71:1)
#loc65 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":65:1)
#loc66 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":66:5)
#loc67 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":70:5)
#loc68 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":68:9)
#loc69 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":68:40)
#loc70 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":68:28)
#loc71 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":68:36)
#loc72 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":69:22)
#loc73 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":69:9)
#loc74 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":73:1)
#loc75 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":82:1)
#loc76 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":75:5)
#loc77 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":75:11)
#loc78 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":76:5)
#loc79 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":76:31)
#loc80 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":78:12)
#loc81 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":78:5)
#loc82 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":80:12)
#loc83 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":80:5)
#loc84 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":81:5)
#loc85 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":81:13)
#loc86 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":95:19)
#loc87 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":85:1)
#loc88 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":97:1)
#loc91 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":86:1)
#loc92 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":88:5)
#loc93 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":96:5)
#loc94 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":88:13)
#loc95 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":88:21)
#loc96 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":88:8)
#loc97 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":88:19)
#loc98 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":89:5)
#loc99 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":92:5)
#loc100 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":94:5)
#loc101 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":90:9)
#loc102 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":90:40)
#loc103 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":90:28)
#loc104 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":90:36)
#loc105 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":91:22)
#loc106 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":91:9)
#loc107 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":95:9)
#loc108 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":99:1)
#loc109 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":119:1)
#loc110 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":101:5)
#loc111 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":101:11)
#loc112 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":102:5)
#loc113 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":102:31)
#loc114 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":104:12)
#loc115 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":104:5)
#loc116 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":105:5)
#loc117 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":117:5)
#loc118 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":106:9)
#loc119 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":106:41)
#loc120 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":108:9)
#loc121 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":116:9)
#loc122 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":108:19)
#loc123 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":108:32)
#loc124 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":108:49)
#loc125 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":108:13)
#loc126 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":108:59)
#loc127 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":108:56)
#loc128 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":109:9)
#loc129 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":112:9)
#loc130 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":114:9)
#loc131 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":111:32)
#loc132 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":111:27)
#loc133 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":111:13)
#loc134 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":111:43)
#loc135 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":115:23)
#loc136 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":115:13)
#loc137 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":118:5)
#loc138 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":118:13)
#loc139 = loc(fused[#loc1, #loc2])
#loc140 = loc(fused[#loc3, #loc4])
#loc142 = loc(fused[#loc8, #loc9])
#loc143 = loc(fused[#loc10, #loc11])
#loc144 = loc(fused[#loc12, #loc13])
#loc145 = loc(fused[#loc16, #loc17])
#loc146 = loc(fused[#loc18, #loc19])
#loc147 = loc(fused[#loc20, #loc21])
#loc148 = loc(fused[#loc22, #loc23])
#loc149 = loc(fused[#loc25, #loc26])
#loc150 = loc(fused[#loc27, #loc28])
#loc151 = loc(fused[#loc29, #loc30])
#loc152 = loc(fused[#loc32, #loc31])
#loc153 = loc(fused[#loc33, #loc34])
#loc154 = loc(fused[#loc35, #loc36])
#loc155 = loc(fused[#loc37, #loc38])
#loc156 = loc(fused[#loc42, #loc43])
#loc157 = loc(fused[#loc45, #loc46, #loc47, #loc38])
#loc158 = loc(fused[#loc50, #loc51])
#loc159 = loc(fused[#loc55, #loc56])
#loc160 = loc(fused[#loc57, #loc58])
#loc161 = loc(fused[#loc59, #loc60])
#loc162 = loc(fused[#loc61, #loc62])
#loc164 = loc(fused[#loc66, #loc67])
#loc165 = loc(fused[#loc68, #loc69])
#loc166 = loc(fused[#loc70, #loc71])
#loc167 = loc(fused[#loc74, #loc75])
#loc168 = loc(fused[#loc76, #loc77])
#loc169 = loc(fused[#loc78, #loc79])
#loc170 = loc(fused[#loc81, #loc80])
#loc171 = loc(fused[#loc83, #loc82])
#loc172 = loc(fused[#loc87, #loc88])
#loc174 = loc(fused[#loc92, #loc93])
#loc175 = loc(fused[#loc96, #loc95])
#loc176 = loc(fused[#loc98, #loc99, #loc100, #loc93])
#loc177 = loc(fused[#loc101, #loc102])
#loc178 = loc(fused[#loc103, #loc104])
#loc179 = loc(fused[#loc108, #loc109])
#loc180 = loc(fused[#loc110, #loc111])
#loc181 = loc(fused[#loc112, #loc113])
#loc182 = loc(fused[#loc115, #loc114])
#loc183 = loc(fused[#loc116, #loc117])
#loc184 = loc(fused[#loc118, #loc119])
#loc185 = loc(fused[#loc120, #loc121])
#loc186 = loc(fused[#loc125, #loc126])
#loc187 = loc(fused[#loc128, #loc129, #loc130, #loc121])
#loc188 = loc(fused[#loc133, #loc134])
