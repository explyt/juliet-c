!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":113:10)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":113:14)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":113:20)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":113:32)
#loc172 = loc(fused[#loc62, #loc63])
#loc173 = loc(fused[#loc64, #loc65])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc150)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc151)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc152)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printLongLongLine(!s64i) loc(#loc153)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc154)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc156)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc16)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc157)
    cir.br ^bb1 loc(#loc158)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<6> : !s32i loc(#loc20)
    cir.br ^bb2 loc(#loc18)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc18)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc21)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc22)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc159)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc160)
    cir.store %6, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc161)
    cir.br ^bb5 loc(#loc162)
  ^bb5:  // pred: ^bb4
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc29)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc30)
    %10 = cir.cmp(eq, %7, %9) : !cir.ptr<!s64i>, !cir.bool loc(#loc163)
    cir.brcond %10 ^bb6, ^bb7 loc(#loc164)
  ^bb6:  // pred: ^bb5
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc34)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
    cir.br ^bb7 loc(#loc28)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc28)
  ^bb8:  // pred: ^bb7
    %14 = cir.const #cir.int<2147483643> : !s64i loc(#loc35)
    %15 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc36)
    cir.store %14, %15 : !s64i, !cir.ptr<!s64i> loc(#loc165)
    cir.br ^bb10 loc(#loc38)
  ^bb9:  // pred: ^bb2
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc39)
    cir.br ^bb10 loc(#loc40)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc19)
  ^bb11:  // pred: ^bb10
    %18 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc41)
    %19 = cir.load %18 : !cir.ptr<!s64i>, !s64i loc(#loc42)
    cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc43)
    %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc44)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc44)
    cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc45)
    cir.return loc(#loc13)
  } loc(#loc155)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc167)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc168)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc47)
  } loc(#loc166)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc169)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc59)
  cir.func @main(%arg0: !s32i loc(fused[#loc62, #loc63]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc64, #loc65])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc172)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc173)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc61)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc66)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc66)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc67)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc68)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc68)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc69)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc56)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15_good() : () -> () loc(#loc71)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc57)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc58)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15_bad() : () -> () loc(#loc75)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc59)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc176)
    cir.return %17 : !s32i loc(#loc176)
  } loc(#loc171)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc178)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc84)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc179)
    cir.br ^bb1 loc(#loc180)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<5> : !s32i loc(#loc88)
    cir.br ^bb2 loc(#loc86)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc86)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc89)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc90)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc90)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    cir.br ^bb10 loc(#loc92)
  ^bb5:  // pred: ^bb2
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc93)
    %6 = cir.const #cir.int<8> : !u64i loc(#loc181)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc93)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc182)
    cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc183)
    cir.br ^bb6 loc(#loc184)
  ^bb6:  // pred: ^bb5
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc100)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc101)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc101)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s64i>, !cir.bool loc(#loc185)
    cir.brcond %12 ^bb7, ^bb8 loc(#loc186)
  ^bb7:  // pred: ^bb6
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc103)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc104)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc105)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc103)
    cir.br ^bb8 loc(#loc99)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc99)
  ^bb9:  // pred: ^bb8
    %16 = cir.const #cir.int<2147483643> : !s64i loc(#loc106)
    %17 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc107)
    cir.store %16, %17 : !s64i, !cir.ptr<!s64i> loc(#loc187)
    cir.br ^bb10 loc(#loc109)
  ^bb10:  // 2 preds: ^bb4, ^bb9
    cir.br ^bb11 loc(#loc87)
  ^bb11:  // pred: ^bb10
    %18 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc110)
    %19 = cir.load %18 : !cir.ptr<!s64i>, !s64i loc(#loc111)
    cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc112)
    %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc113)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc113)
    cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc114)
    cir.return loc(#loc81)
  } loc(#loc177)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc189)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc119)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc190)
    cir.br ^bb1 loc(#loc191)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<6> : !s32i loc(#loc123)
    cir.br ^bb2 loc(#loc121)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc121)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc124)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc125)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc192)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc125)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc193)
    cir.store %6, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc194)
    cir.br ^bb5 loc(#loc195)
  ^bb5:  // pred: ^bb4
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc132)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc133)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc133)
    %10 = cir.cmp(eq, %7, %9) : !cir.ptr<!s64i>, !cir.bool loc(#loc196)
    cir.brcond %10 ^bb6, ^bb7 loc(#loc197)
  ^bb6:  // pred: ^bb5
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc135)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc136)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc137)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc135)
    cir.br ^bb7 loc(#loc131)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc131)
  ^bb8:  // pred: ^bb7
    %14 = cir.const #cir.int<2147483643> : !s64i loc(#loc138)
    %15 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc139)
    cir.store %14, %15 : !s64i, !cir.ptr<!s64i> loc(#loc198)
    cir.br ^bb10 loc(#loc141)
  ^bb9:  // pred: ^bb2
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc142)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc142)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc143)
    cir.br ^bb10 loc(#loc144)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc122)
  ^bb11:  // pred: ^bb10
    %18 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc145)
    %19 = cir.load %18 : !cir.ptr<!s64i>, !s64i loc(#loc146)
    cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc147)
    %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc148)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc148)
    cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc149)
    cir.return loc(#loc116)
  } loc(#loc188)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":37:19)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":21:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":43:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":23:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":23:15)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":25:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":25:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":26:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":39:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":26:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":28:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":31:27)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":31:34)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":31:45)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":31:46)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":31:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":32:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":32:37)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":32:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":32:21)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":32:27)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":32:28)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":32:34)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":32:33)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":33:17)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":33:10)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":33:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":34:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":37:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":38:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":41:24)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":41:23)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":41:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":42:10)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":42:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":97:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":101:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":99:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":99:14)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":100:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":100:14)
#loc52 = loc("/usr/include/stdlib.h":575:1)
#loc53 = loc("/usr/include/stdlib.h":575:41)
#loc54 = loc("/usr/include/time.h":76:1)
#loc55 = loc("/usr/include/time.h":76:38)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":118:15)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":120:15)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":123:15)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":125:15)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":113:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":128:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":114:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":116:27)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":116:22)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":116:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":118:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":119:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":119:63)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":120:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":123:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":124:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":124:62)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":125:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":127:12)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":127:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":50:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":71:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":52:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":52:15)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":54:12)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":54:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":55:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":67:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":55:12)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":57:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":59:19)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":59:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":60:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":63:27)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":63:34)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":63:46)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":63:47)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":63:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":64:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":64:37)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":64:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":64:21)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":64:27)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":64:28)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":64:34)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":64:33)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":65:17)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":65:10)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":65:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":66:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":69:24)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":69:23)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":69:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":70:10)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":70:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":74:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":95:1)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":76:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":76:15)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":78:12)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":78:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":79:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":91:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":79:12)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":81:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":83:27)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":83:34)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":83:46)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":83:47)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":83:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":84:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":84:37)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":84:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":84:21)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":84:27)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":84:28)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":84:34)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":84:33)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":85:17)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":85:10)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":85:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":86:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":89:19)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":89:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":90:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":93:24)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":93:23)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":93:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":94:10)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":94:5)
#loc150 = loc(fused[#loc1, #loc2])
#loc151 = loc(fused[#loc3, #loc4])
#loc152 = loc(fused[#loc5, #loc6])
#loc153 = loc(fused[#loc8, #loc9])
#loc154 = loc(fused[#loc10, #loc11])
#loc155 = loc(fused[#loc12, #loc13])
#loc156 = loc(fused[#loc14, #loc15])
#loc157 = loc(fused[#loc17, #loc16])
#loc158 = loc(fused[#loc18, #loc19])
#loc159 = loc(fused[#loc23, #loc24])
#loc160 = loc(fused[#loc22, #loc25])
#loc161 = loc(fused[#loc26, #loc25])
#loc162 = loc(fused[#loc27, #loc28])
#loc163 = loc(fused[#loc29, #loc30])
#loc164 = loc(fused[#loc31, #loc28])
#loc165 = loc(fused[#loc37, #loc35])
#loc166 = loc(fused[#loc46, #loc47])
#loc167 = loc(fused[#loc48, #loc49])
#loc168 = loc(fused[#loc50, #loc51])
#loc169 = loc(fused[#loc52, #loc53])
#loc170 = loc(fused[#loc54, #loc55])
#loc171 = loc(fused[#loc60, #loc61])
#loc174 = loc(fused[#loc71, #loc72])
#loc175 = loc(fused[#loc75, #loc76])
#loc176 = loc(fused[#loc79, #loc78])
#loc177 = loc(fused[#loc80, #loc81])
#loc178 = loc(fused[#loc82, #loc83])
#loc179 = loc(fused[#loc85, #loc84])
#loc180 = loc(fused[#loc86, #loc87])
#loc181 = loc(fused[#loc94, #loc95])
#loc182 = loc(fused[#loc93, #loc96])
#loc183 = loc(fused[#loc97, #loc96])
#loc184 = loc(fused[#loc98, #loc99])
#loc185 = loc(fused[#loc100, #loc101])
#loc186 = loc(fused[#loc102, #loc99])
#loc187 = loc(fused[#loc108, #loc106])
#loc188 = loc(fused[#loc115, #loc116])
#loc189 = loc(fused[#loc117, #loc118])
#loc190 = loc(fused[#loc120, #loc119])
#loc191 = loc(fused[#loc121, #loc122])
#loc192 = loc(fused[#loc126, #loc127])
#loc193 = loc(fused[#loc125, #loc128])
#loc194 = loc(fused[#loc129, #loc128])
#loc195 = loc(fused[#loc130, #loc131])
#loc196 = loc(fused[#loc132, #loc133])
#loc197 = loc(fused[#loc134, #loc131])
#loc198 = loc(fused[#loc140, #loc138])
