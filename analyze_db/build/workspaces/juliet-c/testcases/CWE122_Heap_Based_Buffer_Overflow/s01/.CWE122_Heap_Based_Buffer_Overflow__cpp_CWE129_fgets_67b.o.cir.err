clang: warning: argument unused during compilation: '-c' [-Wunused-command-line-argument]
warning: unknown warning option '-Wno-terminate' [-Wunknown-warning-option]
clang: /workspaces/clangir/clang/lib/CIR/CodeGen/CIRGenExprCXX.cpp:635: mlir::Value emitCXXNewAllocSize(CIRGenFunction &, const CXXNewExpr *, unsigned int, mlir::Value &, mlir::Value &): Assertion `numElementsWidth == sizeWidth && "Expected a size_t array size constant"' failed.
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /workspaces/clangir/install/bin/clang -S -Xclang -emit-cir-flat -std=c++11 -Wno-terminate -std=c++11 -I ../../../testcasesupport -c CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fgets_67b.cpp -o /workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/.CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fgets_67b.o.cir
1.	<eof> parser at end of file
2.	CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fgets_67b.cpp:22:11: LLVM IR generation of declaration 'CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fgets_67'
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang     0x0000557784a1ab68 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
1  clang     0x0000557784a1873e llvm::sys::RunSignalHandlers() + 238
2  clang     0x0000557784989946
3  libc.so.6 0x00007fdc8e845330
4  libc.so.6 0x00007fdc8e89eb2c pthread_kill + 284
5  libc.so.6 0x00007fdc8e84527e gsignal + 30
6  libc.so.6 0x00007fdc8e8288ff abort + 223
7  libc.so.6 0x00007fdc8e82881b
8  libc.so.6 0x00007fdc8e83b517
9  clang     0x0000557785e634fc clang::CIRGen::CIRGenFunction::emitCXXNewExpr(clang::CXXNewExpr const*) + 12028
10 clang     0x0000557785e66d1f clang::CIRGen::CIRGenFunction::emitScalarExpr(clang::Expr const*) + 63
11 clang     0x0000557785e15844 clang::CIRGen::CIRGenFunction::emitExprAsInit(clang::Expr const*, clang::ValueDecl const*, clang::CIRGen::LValue, bool) + 516
12 clang     0x0000557785e14e4e clang::CIRGen::CIRGenFunction::emitAutoVarInit(clang::CIRGen::CIRGenFunction::AutoVarEmission const&) + 990
13 clang     0x0000557785e161a8 clang::CIRGen::CIRGenFunction::emitVarDecl(clang::VarDecl const&) + 328
14 clang     0x0000557785e17d97 clang::CIRGen::CIRGenFunction::emitDecl(clang::Decl const&) + 119
15 clang     0x0000557785e99dcb clang::CIRGen::CIRGenFunction::emitSimpleStmt(clang::Stmt const*, bool) + 859
16 clang     0x0000557785e994b0 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 16
17 clang     0x0000557785e99284 clang::CIRGen::CIRGenFunction::emitCompoundStmtWithoutScope(clang::CompoundStmt const&, bool, clang::CIRGen::AggValueSlot) + 260
18 clang     0x0000557785e99955 clang::CIRGen::CIRGenFunction::emitCompoundStmt(clang::CompoundStmt const&, bool, clang::CIRGen::AggValueSlot) + 453
19 clang     0x0000557785e99d65 clang::CIRGen::CIRGenFunction::emitSimpleStmt(clang::Stmt const*, bool) + 757
20 clang     0x0000557785e994b0 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 16
21 clang     0x0000557785e99284 clang::CIRGen::CIRGenFunction::emitCompoundStmtWithoutScope(clang::CompoundStmt const&, bool, clang::CIRGen::AggValueSlot) + 260
22 clang     0x0000557785e8381a clang::CIRGen::CIRGenFunction::generateCode(clang::GlobalDecl, cir::FuncOp, clang::CIRGen::CIRGenFunctionInfo const&) + 1514
23 clang     0x0000557785dd6839 clang::CIRGen::CIRGenModule::emitGlobalFunctionDefinition(clang::GlobalDecl, mlir::Operation*) + 393
24 clang     0x0000557785dd4968 clang::CIRGen::CIRGenModule::emitGlobal(clang::GlobalDecl) + 1656
25 clang     0x0000557785ddf28c clang::CIRGen::CIRGenModule::emitTopLevelDecl(clang::Decl*) + 236
26 clang     0x0000557785ddf16a clang::CIRGen::CIRGenModule::emitDeclContext(clang::DeclContext const*) + 58
27 clang     0x0000557785dd14af cir::CIRGenerator::HandleTopLevelDecl(clang::DeclGroupRef) + 159
28 clang     0x0000557785cc39e1
29 clang     0x0000557787dc5ada clang::ParseAST(clang::Sema&, bool, bool) + 826
30 clang     0x00005577854e0d36 clang::FrontendAction::Execute() + 38
31 clang     0x000055778544c3ad clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1149
32 clang     0x00005577855c9edf clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 815
33 clang     0x00005577837eca7a cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 6074
34 clang     0x00005577837e906d
35 clang     0x0000557785293339
36 clang     0x0000557784989686 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 150
37 clang     0x0000557785292892 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const + 242
38 clang     0x000055778524ec27 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 455
39 clang     0x000055778524ef17 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const + 135
40 clang     0x000055778526e928 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 904
41 clang     0x00005577837e86ba clang_main(int, char**, llvm::ToolContext const&) + 6090
42 clang     0x00005577837f8147 main + 87
43 libc.so.6 0x00007fdc8e82a1ca
44 libc.so.6 0x00007fdc8e82a28b __libc_start_main + 139
45 clang     0x00005577837e6aa5 _start + 37
clang: error: clang frontend command failed with exit code 134 (use -v to see invocation)
clang version 21.0.0git (git@github.com:llvm/clangir.git 4e7a2236d38507e994cbe5b79c888cf86427e7db)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /workspaces/clangir/install/bin
Build config: +assertions
clang: error: unable to execute command: Aborted (core dumped)
clang: note: diagnostic msg: Error generating preprocessed source(s).
