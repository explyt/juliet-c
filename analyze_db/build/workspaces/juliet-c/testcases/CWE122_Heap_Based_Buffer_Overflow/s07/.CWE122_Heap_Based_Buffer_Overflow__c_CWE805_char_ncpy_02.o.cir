!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc189)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc190)
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc191)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc192)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc193)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc195)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc196)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc19)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc19)
      cir.if %3 {
        %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc21)
        %5 = cir.const #cir.int<50> : !s32i loc(#loc22)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc22)
        %7 = cir.const #cir.int<1> : !u64i loc(#loc199)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc200)
        %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc201)
        cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc202)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc30)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc204)
          cir.if %19 {
            %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc32)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc33)
            %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc34)
            cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
          } loc(#loc205)
        } loc(#loc203)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc35)
        %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc35)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc37)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc38)
        cir.store %12, %15 : !s8i, !cir.ptr<!s8i> loc(#loc206)
      } loc(#loc198)
    } loc(#loc197)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc208)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc43)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc43)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc44)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc45)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc46)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc45)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc45)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc209)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc49)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc49)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc50)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc51)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc50)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc52)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc52)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc210)
      %17 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc53)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc55)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc56)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc57)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc56)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc56)
      %24 = cir.call @strncpy(%18, %19, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc53)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc58)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc58)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc60)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc61)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc60)
      %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc62)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc211)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc64)
      %33 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc65)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc66)
      cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc65)
    } loc(#loc207)
    cir.return loc(#loc12)
  } loc(#loc194)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc213)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc69)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc214)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc71)
    cir.return loc(#loc68)
  } loc(#loc212)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc73)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc216)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc78)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc217)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc82)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc82)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc86)
      } else {
        %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc87)
        %5 = cir.const #cir.int<100> : !s32i loc(#loc88)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc88)
        %7 = cir.const #cir.int<1> : !u64i loc(#loc220)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc221)
        %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc87)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc222)
        cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc223)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc95)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc96)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc96)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc225)
          cir.if %19 {
            %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc98)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc99)
            %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc100)
            cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc98)
          } loc(#loc226)
        } loc(#loc224)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc101)
        %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc101)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc102)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc103)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc104)
        cir.store %12, %15 : !s8i, !cir.ptr<!s8i> loc(#loc227)
      } loc(#loc219)
    } loc(#loc218)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc229)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc109)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc109)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc110)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc111)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc112)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc111)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc111)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc230)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc115)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc115)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc116)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc117)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc116)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc118)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc118)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc231)
      %17 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc119)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc121)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc122)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc123)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc122)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc122)
      %24 = cir.call @strncpy(%18, %19, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc119)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc124)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc124)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc126)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc127)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc126)
      %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc128)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc232)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc130)
      %33 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc131)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc132)
      cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc131)
    } loc(#loc228)
    cir.return loc(#loc75)
  } loc(#loc215)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc234)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc137)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc235)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc141)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc141)
      cir.if %3 {
        %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc143)
        %5 = cir.const #cir.int<100> : !s32i loc(#loc144)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc144)
        %7 = cir.const #cir.int<1> : !u64i loc(#loc238)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc239)
        %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc143)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc240)
        cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc241)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc152)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc152)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc243)
          cir.if %19 {
            %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc154)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc155)
            %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc156)
            cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc154)
          } loc(#loc244)
        } loc(#loc242)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc157)
        %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc157)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc158)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc159)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc160)
        cir.store %12, %15 : !s8i, !cir.ptr<!s8i> loc(#loc245)
      } loc(#loc237)
    } loc(#loc236)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc247)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc165)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc165)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc166)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc167)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc168)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc167)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc167)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc248)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc171)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc171)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc172)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc173)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc172)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc174)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc174)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc249)
      %17 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc175)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc176)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc177)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc178)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc179)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc178)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc178)
      %24 = cir.call @strncpy(%18, %19, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc175)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc180)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc180)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc181)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc182)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc183)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc182)
      %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc184)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc250)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc185)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc186)
      %33 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc187)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc188)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc188)
      cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc187)
    } loc(#loc246)
    cir.return loc(#loc134)
  } loc(#loc233)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":144:1)
#loc6 = loc("/usr/include/string.h":146:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":23:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":44:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":25:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":25:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":26:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":26:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":27:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":33:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":27:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":28:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":30:24)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":30:31)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":30:34)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":30:45)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":30:46)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":30:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":31:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":31:37)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":31:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":31:21)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":31:27)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":31:28)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":31:34)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":31:33)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":32:19)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":32:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":32:14)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":32:15)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":34:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":43:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":35:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":35:24)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":36:16)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":36:24)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":36:29)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":36:33)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":36:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":36:34)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":37:25)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":37:16)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":37:20)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":37:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":39:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":39:17)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":39:23)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":39:31)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":39:35)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":40:23)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":40:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":40:14)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":40:18)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":40:19)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":41:19)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":41:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":42:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":42:14)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":103:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":107:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":105:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":105:14)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":106:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":106:14)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":58:19)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":51:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":77:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":53:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":53:12)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":54:12)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":54:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":55:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":66:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":55:8)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":56:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":59:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":61:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":58:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":63:24)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":63:31)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":63:35)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":63:46)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":63:47)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":63:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":64:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":64:37)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":64:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":64:21)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":64:27)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":64:28)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":64:34)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":64:33)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":65:19)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":65:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":65:14)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":65:15)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":67:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":76:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":68:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":68:24)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":69:16)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":69:24)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":69:29)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":69:33)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":69:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":69:34)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":70:25)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":70:16)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":70:20)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":70:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":72:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":72:17)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":72:23)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":72:31)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":72:35)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":73:23)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":73:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":73:14)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":73:18)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":73:19)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":74:19)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":74:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":75:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":75:14)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":80:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":101:1)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":82:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":82:12)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":83:12)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":83:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":84:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":90:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":84:8)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":85:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":87:24)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":87:31)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":87:35)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":87:46)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":87:47)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":87:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":88:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":88:37)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":88:13)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":88:21)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":88:27)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":88:28)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":88:34)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":88:33)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":89:19)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":89:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":89:14)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":89:15)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":91:5)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":100:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":92:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":92:24)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":93:16)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":93:24)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":93:29)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":93:33)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":93:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":93:34)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":94:25)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":94:16)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":94:20)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":94:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":96:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":96:17)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":96:23)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":96:31)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":96:35)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":97:23)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":97:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":97:14)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":97:18)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":97:19)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":98:19)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":98:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":99:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c":99:14)
#loc189 = loc(fused[#loc1, #loc2])
#loc190 = loc(fused[#loc3, #loc4])
#loc191 = loc(fused[#loc5, #loc6])
#loc192 = loc(fused[#loc7, #loc8])
#loc193 = loc(fused[#loc9, #loc10])
#loc194 = loc(fused[#loc11, #loc12])
#loc195 = loc(fused[#loc13, #loc14])
#loc196 = loc(fused[#loc16, #loc15])
#loc197 = loc(fused[#loc17, #loc18])
#loc198 = loc(fused[#loc20, #loc18])
#loc199 = loc(fused[#loc23, #loc24])
#loc200 = loc(fused[#loc22, #loc24])
#loc201 = loc(fused[#loc21, #loc25])
#loc202 = loc(fused[#loc26, #loc25])
#loc203 = loc(fused[#loc27, #loc28])
#loc204 = loc(fused[#loc29, #loc30])
#loc205 = loc(fused[#loc31, #loc28])
#loc206 = loc(fused[#loc36, #loc35])
#loc207 = loc(fused[#loc39, #loc40])
#loc208 = loc(fused[#loc41, #loc42])
#loc209 = loc(fused[#loc47, #loc48])
#loc210 = loc(fused[#loc52, #loc49])
#loc211 = loc(fused[#loc59, #loc58])
#loc212 = loc(fused[#loc67, #loc68])
#loc213 = loc(fused[#loc69, #loc70])
#loc214 = loc(fused[#loc71, #loc72])
#loc215 = loc(fused[#loc74, #loc75])
#loc216 = loc(fused[#loc76, #loc77])
#loc217 = loc(fused[#loc79, #loc78])
#loc218 = loc(fused[#loc80, #loc81])
#loc219 = loc(fused[#loc83, #loc84, #loc85, #loc81])
#loc220 = loc(fused[#loc89, #loc90])
#loc221 = loc(fused[#loc88, #loc90])
#loc222 = loc(fused[#loc87, #loc91])
#loc223 = loc(fused[#loc92, #loc91])
#loc224 = loc(fused[#loc93, #loc94])
#loc225 = loc(fused[#loc95, #loc96])
#loc226 = loc(fused[#loc97, #loc94])
#loc227 = loc(fused[#loc102, #loc101])
#loc228 = loc(fused[#loc105, #loc106])
#loc229 = loc(fused[#loc107, #loc108])
#loc230 = loc(fused[#loc113, #loc114])
#loc231 = loc(fused[#loc118, #loc115])
#loc232 = loc(fused[#loc125, #loc124])
#loc233 = loc(fused[#loc133, #loc134])
#loc234 = loc(fused[#loc135, #loc136])
#loc235 = loc(fused[#loc138, #loc137])
#loc236 = loc(fused[#loc139, #loc140])
#loc237 = loc(fused[#loc142, #loc140])
#loc238 = loc(fused[#loc145, #loc146])
#loc239 = loc(fused[#loc144, #loc146])
#loc240 = loc(fused[#loc143, #loc147])
#loc241 = loc(fused[#loc148, #loc147])
#loc242 = loc(fused[#loc149, #loc150])
#loc243 = loc(fused[#loc151, #loc152])
#loc244 = loc(fused[#loc153, #loc150])
#loc245 = loc(fused[#loc158, #loc157])
#loc246 = loc(fused[#loc161, #loc162])
#loc247 = loc(fused[#loc163, #loc164])
#loc248 = loc(fused[#loc169, #loc170])
#loc249 = loc(fused[#loc174, #loc171])
#loc250 = loc(fused[#loc181, #loc180])
