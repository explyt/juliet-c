!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_unionType = !cir.struct<union "CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_unionType" {!s32i, !s32i}>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc308)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc309)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc310)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc311)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc312)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc313)
  cir.func private  @printIntLine(!s32i) loc(#loc314)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc16)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc315)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc317)
    %1 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc318)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc26)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc319)
    cir.scope {
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc321)
      %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc321)
      cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc321)
      cir.scope {
        %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc34)
        %9 = cir.const #cir.int<3> : !s32i loc(#loc35)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc35)
        %11 = cir.const #cir.int<4> : !u64i loc(#loc35)
        %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc35)
        %13 = cir.const #cir.int<2> : !s32i loc(#loc35)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc35)
        %15 = cir.binop(add, %12, %14) : !u64i loc(#loc35)
        %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc35)
        %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc309)
        %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc36)
        %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc37)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc38)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc38)
        %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc323)
        %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc39)
        cir.if %23 {
          %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc43)
          %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc44)
          cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc325)
        } else {
          %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
          %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc47)
        } loc(#loc324)
      } loc(#loc322)
    } loc(#loc320)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    %5 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_unionType> -> !cir.ptr<!s32i> loc(#loc49)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc326)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc328)
      %7 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_unionType> -> !cir.ptr<!s32i> loc(#loc55)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc54)
      cir.store %8, %6 : !s32i, !cir.ptr<!s32i> loc(#loc328)
      cir.scope {
        %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc330)
        %10 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc331)
        %11 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc62)
        %12 = cir.const #cir.int<10> : !s32i loc(#loc63)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc63)
        %14 = cir.const #cir.int<4> : !u64i loc(#loc332)
        %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc333)
        %16 = cir.call @malloc(%15) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc62)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc334)
        cir.store %17, %10 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc331)
        cir.scope {
          %21 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc68)
          %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc69)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc69)
          %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s32i>, !s32i loc(#loc336)
          %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc70)
          cir.if %25 {
            %26 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc72)
            %27 = cir.const #cir.int<1> : !s32i loc(#loc73)
            %28 = cir.unary(minus, %27) : !s32i, !s32i loc(#loc74)
            cir.call @exit(%28) : (!s32i) -> () extra(#fn_attr) loc(#loc72)
          } loc(#loc337)
        } loc(#loc335)
        cir.scope {
          %21 = cir.const #cir.int<0> : !s32i loc(#loc77)
          cir.store %21, %9 : !s32i, !cir.ptr<!s32i> loc(#loc339)
          cir.for : cond {
            %22 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc79)
            %23 = cir.const #cir.int<10> : !s32i loc(#loc80)
            %24 = cir.cmp(lt, %22, %23) : !s32i, !s32i loc(#loc340)
            %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc81)
            cir.condition(%25) loc(#loc81)
          } body {
            cir.scope {
              %22 = cir.const #cir.int<0> : !s32i loc(#loc83)
              %23 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
              %24 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc85)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc86)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc342)
            } loc(#loc341)
            cir.yield loc(#loc76)
          } step {
            %22 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc87)
            %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc88)
            cir.store %23, %9 : !s32i, !cir.ptr<!s32i> loc(#loc343)
            cir.yield loc(#loc338)
          } loc(#loc338)
        } loc(#loc338)
        cir.scope {
          %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc91)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc92)
          %23 = cir.cmp(ge, %21, %22) : !s32i, !s32i loc(#loc345)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc93)
          cir.if %24 {
            %25 = cir.const #cir.int<1> : !s32i loc(#loc97)
            %26 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc98)
            %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc99)
            %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc100)
            cir.store %25, %28 : !s32i, !cir.ptr<!s32i> loc(#loc347)
            cir.scope {
              %29 = cir.const #cir.int<0> : !s32i loc(#loc103)
              cir.store %29, %9 : !s32i, !cir.ptr<!s32i> loc(#loc349)
              cir.for : cond {
                %30 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                %31 = cir.const #cir.int<10> : !s32i loc(#loc106)
                %32 = cir.cmp(lt, %30, %31) : !s32i, !s32i loc(#loc350)
                %33 = cir.cast(int_to_bool, %32 : !s32i), !cir.bool loc(#loc107)
                cir.condition(%33) loc(#loc107)
              } body {
                cir.scope {
                  %30 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc109)
                  %31 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                  %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !s32i), !cir.ptr<!s32i> loc(#loc111)
                  %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                  cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc112)
                } loc(#loc351)
                cir.yield loc(#loc102)
              } step {
                %30 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                %31 = cir.unary(inc, %30) : !s32i, !s32i loc(#loc114)
                cir.store %31, %9 : !s32i, !cir.ptr<!s32i> loc(#loc352)
                cir.yield loc(#loc348)
              } loc(#loc348)
            } loc(#loc348)
          } else {
            %25 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc16)
            %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc16)
            cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc115)
          } loc(#loc346)
        } loc(#loc344)
        %18 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc116)
        %19 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc117)
        cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc116)
      } loc(#loc329)
    } loc(#loc327)
    cir.return loc(#loc20)
  } loc(#loc316)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc354)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc120)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc355)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc122)
    cir.return loc(#loc119)
  } loc(#loc353)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc357)
    %1 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc358)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc130)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc131)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc359)
    %4 = cir.const #cir.int<7> : !s32i loc(#loc133)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc360)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc135)
    %6 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_unionType> -> !cir.ptr<!s32i> loc(#loc49)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc361)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc363)
      %8 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_unionType> -> !cir.ptr<!s32i> loc(#loc55)
      %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc140)
      cir.store %9, %7 : !s32i, !cir.ptr<!s32i> loc(#loc363)
      cir.scope {
        %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc365)
        %11 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc366)
        %12 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc147)
        %13 = cir.const #cir.int<10> : !s32i loc(#loc148)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc148)
        %15 = cir.const #cir.int<4> : !u64i loc(#loc367)
        %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc368)
        %17 = cir.call @malloc(%16) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc147)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc369)
        cir.store %18, %11 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc366)
        cir.scope {
          %22 = cir.load %11 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc153)
          %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc154)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc154)
          %25 = cir.cmp(eq, %22, %24) : !cir.ptr<!s32i>, !s32i loc(#loc371)
          %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc155)
          cir.if %26 {
            %27 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc157)
            %28 = cir.const #cir.int<1> : !s32i loc(#loc158)
            %29 = cir.unary(minus, %28) : !s32i, !s32i loc(#loc159)
            cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr) loc(#loc157)
          } loc(#loc372)
        } loc(#loc370)
        cir.scope {
          %22 = cir.const #cir.int<0> : !s32i loc(#loc162)
          cir.store %22, %10 : !s32i, !cir.ptr<!s32i> loc(#loc374)
          cir.for : cond {
            %23 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc164)
            %24 = cir.const #cir.int<10> : !s32i loc(#loc165)
            %25 = cir.cmp(lt, %23, %24) : !s32i, !s32i loc(#loc375)
            %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc166)
            cir.condition(%26) loc(#loc166)
          } body {
            cir.scope {
              %23 = cir.const #cir.int<0> : !s32i loc(#loc168)
              %24 = cir.load %11 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc169)
              %25 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc170)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc171)
              cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc377)
            } loc(#loc376)
            cir.yield loc(#loc161)
          } step {
            %23 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc172)
            %24 = cir.unary(inc, %23) : !s32i, !s32i loc(#loc173)
            cir.store %24, %10 : !s32i, !cir.ptr<!s32i> loc(#loc378)
            cir.yield loc(#loc373)
          } loc(#loc373)
        } loc(#loc373)
        cir.scope {
          %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc176)
          %23 = cir.const #cir.int<0> : !s32i loc(#loc177)
          %24 = cir.cmp(ge, %22, %23) : !s32i, !s32i loc(#loc380)
          %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc178)
          cir.if %25 {
            %26 = cir.const #cir.int<1> : !s32i loc(#loc182)
            %27 = cir.load %11 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc183)
            %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc184)
            %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc185)
            cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc382)
            cir.scope {
              %30 = cir.const #cir.int<0> : !s32i loc(#loc188)
              cir.store %30, %10 : !s32i, !cir.ptr<!s32i> loc(#loc384)
              cir.for : cond {
                %31 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc190)
                %32 = cir.const #cir.int<10> : !s32i loc(#loc191)
                %33 = cir.cmp(lt, %31, %32) : !s32i, !s32i loc(#loc385)
                %34 = cir.cast(int_to_bool, %33 : !s32i), !cir.bool loc(#loc192)
                cir.condition(%34) loc(#loc192)
              } body {
                cir.scope {
                  %31 = cir.load %11 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc194)
                  %32 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc195)
                  %33 = cir.ptr_stride(%31 : !cir.ptr<!s32i>, %32 : !s32i), !cir.ptr<!s32i> loc(#loc196)
                  %34 = cir.load %33 : !cir.ptr<!s32i>, !s32i loc(#loc194)
                  cir.call @printIntLine(%34) : (!s32i) -> () loc(#loc197)
                } loc(#loc386)
                cir.yield loc(#loc187)
              } step {
                %31 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc198)
                %32 = cir.unary(inc, %31) : !s32i, !s32i loc(#loc199)
                cir.store %32, %10 : !s32i, !cir.ptr<!s32i> loc(#loc387)
                cir.yield loc(#loc383)
              } loc(#loc383)
            } loc(#loc383)
          } else {
            %26 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc200)
            %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc200)
            cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc201)
          } loc(#loc381)
        } loc(#loc379)
        %19 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc202)
        %20 = cir.load %11 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc203)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc203)
        cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc202)
      } loc(#loc364)
    } loc(#loc362)
    cir.return loc(#loc125)
  } loc(#loc356)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc204)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc389)
    %1 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc390)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc211)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc212)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc391)
    cir.scope {
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc393)
      %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc393)
      cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc393)
      cir.scope {
        %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc220)
        %9 = cir.const #cir.int<3> : !s32i loc(#loc221)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc221)
        %11 = cir.const #cir.int<4> : !u64i loc(#loc221)
        %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc221)
        %13 = cir.const #cir.int<2> : !s32i loc(#loc221)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc221)
        %15 = cir.binop(add, %12, %14) : !u64i loc(#loc221)
        %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc221)
        %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc309)
        %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc222)
        %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc223)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc224)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc224)
        %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc395)
        %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc225)
        cir.if %23 {
          %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc229)
          %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc230)
          cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc397)
        } else {
          %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc233)
          %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc233)
          cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc234)
        } loc(#loc396)
      } loc(#loc394)
    } loc(#loc392)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc235)
    %5 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_unionType> -> !cir.ptr<!s32i> loc(#loc49)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc398)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc400)
      %7 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_unionType> -> !cir.ptr<!s32i> loc(#loc55)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc240)
      cir.store %8, %6 : !s32i, !cir.ptr<!s32i> loc(#loc400)
      cir.scope {
        %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc402)
        %10 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc403)
        %11 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc247)
        %12 = cir.const #cir.int<10> : !s32i loc(#loc248)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc248)
        %14 = cir.const #cir.int<4> : !u64i loc(#loc404)
        %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc405)
        %16 = cir.call @malloc(%15) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc247)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc406)
        cir.store %17, %10 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc403)
        cir.scope {
          %21 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc253)
          %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc254)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc254)
          %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s32i>, !s32i loc(#loc408)
          %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc255)
          cir.if %25 {
            %26 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc257)
            %27 = cir.const #cir.int<1> : !s32i loc(#loc258)
            %28 = cir.unary(minus, %27) : !s32i, !s32i loc(#loc259)
            cir.call @exit(%28) : (!s32i) -> () extra(#fn_attr) loc(#loc257)
          } loc(#loc409)
        } loc(#loc407)
        cir.scope {
          %21 = cir.const #cir.int<0> : !s32i loc(#loc262)
          cir.store %21, %9 : !s32i, !cir.ptr<!s32i> loc(#loc411)
          cir.for : cond {
            %22 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc264)
            %23 = cir.const #cir.int<10> : !s32i loc(#loc265)
            %24 = cir.cmp(lt, %22, %23) : !s32i, !s32i loc(#loc412)
            %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc266)
            cir.condition(%25) loc(#loc266)
          } body {
            cir.scope {
              %22 = cir.const #cir.int<0> : !s32i loc(#loc268)
              %23 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc269)
              %24 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc270)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc271)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc414)
            } loc(#loc413)
            cir.yield loc(#loc261)
          } step {
            %22 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc272)
            %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc273)
            cir.store %23, %9 : !s32i, !cir.ptr<!s32i> loc(#loc415)
            cir.yield loc(#loc410)
          } loc(#loc410)
        } loc(#loc410)
        cir.scope {
          %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc276)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc277)
          %23 = cir.cmp(ge, %21, %22) : !s32i, !s32i loc(#loc417)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc278)
          %25 = cir.ternary(%24, true {
            %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc280)
            %27 = cir.const #cir.int<10> : !s32i loc(#loc281)
            %28 = cir.cmp(lt, %26, %27) : !s32i, !s32i loc(#loc418)
            %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc283)
            %30 = cir.ternary(%29, true {
              %31 = cir.const #true loc(#loc279)
              cir.yield %31 : !cir.bool loc(#loc279)
            }, false {
              %31 = cir.const #false loc(#loc279)
              cir.yield %31 : !cir.bool loc(#loc279)
            }) : (!cir.bool) -> !cir.bool loc(#loc279)
            cir.yield %30 : !cir.bool loc(#loc279)
          }, false {
            %26 = cir.const #false loc(#loc279)
            cir.yield %26 : !cir.bool loc(#loc279)
          }) : (!cir.bool) -> !cir.bool loc(#loc279)
          cir.if %25 {
            %26 = cir.const #cir.int<1> : !s32i loc(#loc287)
            %27 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc288)
            %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc289)
            %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc290)
            cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc420)
            cir.scope {
              %30 = cir.const #cir.int<0> : !s32i loc(#loc293)
              cir.store %30, %9 : !s32i, !cir.ptr<!s32i> loc(#loc422)
              cir.for : cond {
                %31 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc295)
                %32 = cir.const #cir.int<10> : !s32i loc(#loc296)
                %33 = cir.cmp(lt, %31, %32) : !s32i, !s32i loc(#loc423)
                %34 = cir.cast(int_to_bool, %33 : !s32i), !cir.bool loc(#loc297)
                cir.condition(%34) loc(#loc297)
              } body {
                cir.scope {
                  %31 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc299)
                  %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc300)
                  %33 = cir.ptr_stride(%31 : !cir.ptr<!s32i>, %32 : !s32i), !cir.ptr<!s32i> loc(#loc301)
                  %34 = cir.load %33 : !cir.ptr<!s32i>, !s32i loc(#loc299)
                  cir.call @printIntLine(%34) : (!s32i) -> () loc(#loc302)
                } loc(#loc424)
                cir.yield loc(#loc292)
              } step {
                %31 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc303)
                %32 = cir.unary(inc, %31) : !s32i, !s32i loc(#loc304)
                cir.store %32, %9 : !s32i, !cir.ptr<!s32i> loc(#loc425)
                cir.yield loc(#loc421)
              } loc(#loc421)
            } loc(#loc421)
          } else {
            %26 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc204)
            %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc204)
            cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc305)
          } loc(#loc419)
        } loc(#loc416)
        %18 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc306)
        %19 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc307)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc307)
        cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc306)
      } loc(#loc401)
    } loc(#loc399)
    cir.return loc(#loc206)
  } loc(#loc388)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":46:23)
#loc10 = loc("/usr/include/stdlib.h":672:1)
#loc11 = loc("/usr/include/stdlib.h":672:45)
#loc12 = loc("/usr/include/stdlib.h":756:1)
#loc13 = loc("/usr/include/stdlib.h":756:70)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":74:27)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":30:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":79:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":32:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":32:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":33:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":33:68)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":35:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":35:12)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":35:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":36:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":48:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":37:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":37:45)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":39:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":47:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":39:19)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":39:32)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":39:49)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":39:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":39:59)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":39:56)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":40:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":43:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":45:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":42:25)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":42:20)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":42:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":42:36)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":46:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":49:26)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":24:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":49:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":50:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":78:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":51:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":51:28)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":25:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":52:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":77:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":53:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":53:17)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":54:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":54:58)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":54:35)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":54:42)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":54:47)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":54:57)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":55:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":55:43)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":55:17)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":55:27)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":55:24)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":55:33)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":55:34)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":55:40)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":55:39)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":57:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":60:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":57:22)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":57:18)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":57:25)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":57:29)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":57:27)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":58:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":59:29)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":59:17)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":59:24)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":59:25)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":57:34)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":57:33)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":63:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":75:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":63:17)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":63:25)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":63:22)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":64:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":71:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":73:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":65:32)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":65:17)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":65:24)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":65:28)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":67:17)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":70:17)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":67:25)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":67:21)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":67:28)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":67:32)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":67:30)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":68:17)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":69:34)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":69:41)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":69:42)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":69:21)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":67:37)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":67:36)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":74:17)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":76:13)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":76:18)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":178:1)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":182:1)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":180:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":180:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":181:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":181:13)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":86:1)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":125:1)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":88:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":88:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":89:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":89:68)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":91:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":91:12)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":91:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":94:12)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":94:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":95:26)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":95:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":96:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":124:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":97:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":97:28)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":98:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":123:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":99:13)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":99:17)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":100:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":100:58)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":100:35)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":100:42)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":100:47)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":100:57)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":101:13)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":101:43)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":101:17)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":101:27)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":101:24)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":101:33)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":101:34)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":101:40)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":101:39)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":103:13)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":106:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":103:22)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":103:18)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":103:25)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":103:29)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":103:27)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":104:13)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":105:29)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":105:17)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":105:24)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":105:25)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":103:34)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":103:33)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":109:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":121:13)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":109:17)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":109:25)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":109:22)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":110:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":117:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":119:13)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":111:32)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":111:17)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":111:24)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":111:28)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":113:17)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":116:17)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":113:25)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":113:21)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":113:28)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":113:32)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":113:30)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":114:17)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":115:34)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":115:41)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":115:42)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":115:21)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":113:37)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":113:36)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":120:27)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":120:17)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":122:13)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":122:18)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":171:27)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":128:1)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":176:1)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":130:5)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":130:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":131:5)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":131:68)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":133:13)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":133:12)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":133:5)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":134:5)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":146:5)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":135:9)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":135:45)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":137:9)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":145:9)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":137:19)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":137:32)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":137:49)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":137:13)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":137:59)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":137:56)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":138:9)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":141:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":143:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":140:25)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":140:20)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":140:13)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":140:36)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":144:23)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":144:13)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":147:26)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":147:5)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":148:5)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":175:5)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":149:9)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":149:28)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":150:9)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":174:9)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":151:13)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":151:17)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":152:13)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":152:58)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":152:35)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":152:42)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":152:47)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":152:57)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":153:13)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":153:43)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":153:17)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":153:27)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":153:24)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":153:33)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":153:34)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":153:40)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":153:39)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":155:13)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":158:13)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":155:22)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":155:18)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":155:25)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":155:29)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":155:27)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":156:13)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":157:29)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":157:17)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":157:24)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":157:25)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":155:34)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":155:33)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":160:13)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":172:13)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":160:17)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":160:25)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":160:22)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":160:27)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":160:30)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":160:38)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":160:40)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":160:35)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":161:13)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":168:13)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":170:13)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":162:32)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":162:17)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":162:24)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":162:28)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":164:17)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":167:17)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":164:25)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":164:21)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":164:28)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":164:32)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":164:30)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":165:17)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":166:34)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":166:41)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":166:42)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":166:21)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":164:37)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":164:36)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":171:17)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":173:13)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c":173:18)
#loc308 = loc(fused[#loc1, #loc2])
#loc309 = loc(fused[#loc3, #loc4])
#loc310 = loc(fused[#loc5, #loc6])
#loc311 = loc(fused[#loc7, #loc8])
#loc312 = loc(fused[#loc10, #loc11])
#loc313 = loc(fused[#loc12, #loc13])
#loc314 = loc(fused[#loc14, #loc15])
#loc315 = loc(fused[#loc17, #loc18])
#loc316 = loc(fused[#loc19, #loc20])
#loc317 = loc(fused[#loc21, #loc22])
#loc318 = loc(fused[#loc23, #loc24])
#loc319 = loc(fused[#loc27, #loc25])
#loc320 = loc(fused[#loc28, #loc29])
#loc321 = loc(fused[#loc30, #loc31])
#loc322 = loc(fused[#loc32, #loc33])
#loc323 = loc(fused[#loc37, #loc38])
#loc324 = loc(fused[#loc40, #loc41, #loc42, #loc33])
#loc325 = loc(fused[#loc45, #loc46])
#loc326 = loc(fused[#loc50, #loc48])
#loc327 = loc(fused[#loc51, #loc52])
#loc328 = loc(fused[#loc53, #loc54])
#loc329 = loc(fused[#loc56, #loc57])
#loc330 = loc(fused[#loc58, #loc59])
#loc331 = loc(fused[#loc60, #loc61])
#loc332 = loc(fused[#loc64, #loc65])
#loc333 = loc(fused[#loc63, #loc65])
#loc334 = loc(fused[#loc62, #loc61])
#loc335 = loc(fused[#loc66, #loc67])
#loc336 = loc(fused[#loc68, #loc69])
#loc337 = loc(fused[#loc71, #loc67])
#loc338 = loc(fused[#loc75, #loc76])
#loc339 = loc(fused[#loc78, #loc77])
#loc340 = loc(fused[#loc79, #loc80])
#loc341 = loc(fused[#loc82, #loc76])
#loc342 = loc(fused[#loc84, #loc83])
#loc343 = loc(fused[#loc88, #loc87])
#loc344 = loc(fused[#loc89, #loc90])
#loc345 = loc(fused[#loc91, #loc92])
#loc346 = loc(fused[#loc94, #loc95, #loc96, #loc90])
#loc347 = loc(fused[#loc98, #loc97])
#loc348 = loc(fused[#loc101, #loc102])
#loc349 = loc(fused[#loc104, #loc103])
#loc350 = loc(fused[#loc105, #loc106])
#loc351 = loc(fused[#loc108, #loc102])
#loc352 = loc(fused[#loc114, #loc113])
#loc353 = loc(fused[#loc118, #loc119])
#loc354 = loc(fused[#loc120, #loc121])
#loc355 = loc(fused[#loc122, #loc123])
#loc356 = loc(fused[#loc124, #loc125])
#loc357 = loc(fused[#loc126, #loc127])
#loc358 = loc(fused[#loc128, #loc129])
#loc359 = loc(fused[#loc132, #loc130])
#loc360 = loc(fused[#loc134, #loc133])
#loc361 = loc(fused[#loc136, #loc135])
#loc362 = loc(fused[#loc137, #loc138])
#loc363 = loc(fused[#loc139, #loc140])
#loc364 = loc(fused[#loc141, #loc142])
#loc365 = loc(fused[#loc143, #loc144])
#loc366 = loc(fused[#loc145, #loc146])
#loc367 = loc(fused[#loc149, #loc150])
#loc368 = loc(fused[#loc148, #loc150])
#loc369 = loc(fused[#loc147, #loc146])
#loc370 = loc(fused[#loc151, #loc152])
#loc371 = loc(fused[#loc153, #loc154])
#loc372 = loc(fused[#loc156, #loc152])
#loc373 = loc(fused[#loc160, #loc161])
#loc374 = loc(fused[#loc163, #loc162])
#loc375 = loc(fused[#loc164, #loc165])
#loc376 = loc(fused[#loc167, #loc161])
#loc377 = loc(fused[#loc169, #loc168])
#loc378 = loc(fused[#loc173, #loc172])
#loc379 = loc(fused[#loc174, #loc175])
#loc380 = loc(fused[#loc176, #loc177])
#loc381 = loc(fused[#loc179, #loc180, #loc181, #loc175])
#loc382 = loc(fused[#loc183, #loc182])
#loc383 = loc(fused[#loc186, #loc187])
#loc384 = loc(fused[#loc189, #loc188])
#loc385 = loc(fused[#loc190, #loc191])
#loc386 = loc(fused[#loc193, #loc187])
#loc387 = loc(fused[#loc199, #loc198])
#loc388 = loc(fused[#loc205, #loc206])
#loc389 = loc(fused[#loc207, #loc208])
#loc390 = loc(fused[#loc209, #loc210])
#loc391 = loc(fused[#loc213, #loc211])
#loc392 = loc(fused[#loc214, #loc215])
#loc393 = loc(fused[#loc216, #loc217])
#loc394 = loc(fused[#loc218, #loc219])
#loc395 = loc(fused[#loc223, #loc224])
#loc396 = loc(fused[#loc226, #loc227, #loc228, #loc219])
#loc397 = loc(fused[#loc231, #loc232])
#loc398 = loc(fused[#loc236, #loc235])
#loc399 = loc(fused[#loc237, #loc238])
#loc400 = loc(fused[#loc239, #loc240])
#loc401 = loc(fused[#loc241, #loc242])
#loc402 = loc(fused[#loc243, #loc244])
#loc403 = loc(fused[#loc245, #loc246])
#loc404 = loc(fused[#loc249, #loc250])
#loc405 = loc(fused[#loc248, #loc250])
#loc406 = loc(fused[#loc247, #loc246])
#loc407 = loc(fused[#loc251, #loc252])
#loc408 = loc(fused[#loc253, #loc254])
#loc409 = loc(fused[#loc256, #loc252])
#loc410 = loc(fused[#loc260, #loc261])
#loc411 = loc(fused[#loc263, #loc262])
#loc412 = loc(fused[#loc264, #loc265])
#loc413 = loc(fused[#loc267, #loc261])
#loc414 = loc(fused[#loc269, #loc268])
#loc415 = loc(fused[#loc273, #loc272])
#loc416 = loc(fused[#loc274, #loc275])
#loc417 = loc(fused[#loc276, #loc277])
#loc418 = loc(fused[#loc280, #loc282])
#loc419 = loc(fused[#loc284, #loc285, #loc286, #loc275])
#loc420 = loc(fused[#loc288, #loc287])
#loc421 = loc(fused[#loc291, #loc292])
#loc422 = loc(fused[#loc294, #loc293])
#loc423 = loc(fused[#loc295, #loc296])
#loc424 = loc(fused[#loc298, #loc292])
#loc425 = loc(fused[#loc304, #loc303])
