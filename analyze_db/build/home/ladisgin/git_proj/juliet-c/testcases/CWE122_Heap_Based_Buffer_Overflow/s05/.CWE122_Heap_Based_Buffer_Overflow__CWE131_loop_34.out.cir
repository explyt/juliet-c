!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":96:10)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":96:14)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":96:20)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":96:32)
#loc186 = loc(fused[#loc81, #loc82])
#loc187 = loc(fused[#loc83, #loc84])
!ty_CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34_unionType = !cir.struct<union "CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34_unionType" {!cir.ptr<!s32i>, !cir.ptr<!s32i>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc155)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc156)
  cir.func private @printIntLine(!s32i) loc(#loc157)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc158)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc160)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc161)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc162)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc163)
    %4 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc164)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc21)
    cir.store %5, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc165)
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc23)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc24)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc24)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc23)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc166)
    cir.store %10, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc167)
    cir.br ^bb1 loc(#loc168)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc30)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc169)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc170)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc34)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
    cir.br ^bb3 loc(#loc28)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc28)
  ^bb4:  // pred: ^bb3
    %18 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
    %19 = cir.get_member %4[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34_unionType> -> !cir.ptr<!cir.ptr<!s32i>> loc(#loc36)
    cir.store %18, %19 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc171)
    cir.br ^bb5 loc(#loc172)
  ^bb5:  // pred: ^bb4
    %20 = cir.get_member %4[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34_unionType> -> !cir.ptr<!cir.ptr<!s32i>> loc(#loc40)
    %21 = cir.load %20 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc12)
    cir.store %21, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc160)
    cir.br ^bb6 loc(#loc173)
  ^bb6:  // pred: ^bb5
    %22 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc161)
    cir.store %22, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc161)
    cir.br ^bb7 loc(#loc174)
  ^bb7:  // pred: ^bb6
    %23 = cir.const #cir.int<0> : !s32i loc(#loc45)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc45)
    cir.store %24, %2 : !u64i, !cir.ptr<!u64i> loc(#loc175)
    cir.br ^bb8 loc(#loc174)
  ^bb8:  // 2 preds: ^bb7, ^bb12
    %25 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc47)
    %26 = cir.const #cir.int<10> : !s32i loc(#loc48)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc48)
    %28 = cir.cmp(lt, %25, %27) : !u64i, !cir.bool loc(#loc176)
    cir.brcond %28 ^bb9, ^bb13 loc(#loc49)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc177)
  ^bb10:  // pred: ^bb9
    %29 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc51)
    %30 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc52)
    %31 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %29 : !u64i), !cir.ptr<!s32i> loc(#loc52)
    %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
    %34 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc54)
    %35 = cir.ptr_stride(%33 : !cir.ptr<!s32i>, %34 : !u64i), !cir.ptr<!s32i> loc(#loc55)
    cir.store %32, %35 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    cir.br ^bb11 loc(#loc44)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc44)
  ^bb12:  // pred: ^bb11
    %36 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc57)
    %37 = cir.unary(inc, %36) : !u64i, !u64i loc(#loc58)
    cir.store %37, %2 : !u64i, !cir.ptr<!u64i> loc(#loc179)
    cir.br ^bb8 loc(#loc174)
  ^bb13:  // pred: ^bb8
    cir.br ^bb14 loc(#loc44)
  ^bb14:  // pred: ^bb13
    %38 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
    %39 = cir.const #cir.int<0> : !s32i loc(#loc60)
    %40 = cir.ptr_stride(%38 : !cir.ptr<!s32i>, %39 : !s32i), !cir.ptr<!s32i> loc(#loc61)
    %41 = cir.load %40 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    cir.call @printIntLine(%41) : (!s32i) -> () loc(#loc62)
    %42 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
    %43 = cir.cast(bitcast, %42 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc63)
    cir.call @free(%43) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc64)
    cir.br ^bb15 loc(#loc42)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc39)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc10)
  } loc(#loc159)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    cir.return loc(#loc66)
  } loc(#loc180)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc182)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc183)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc184)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc78)
  cir.func @main(%arg0: !s32i loc(fused[#loc81, #loc82]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc83, #loc84])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc186)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc187)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc80)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc85)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc86)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc87)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc87)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc88)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc75)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34_good : !cir.ptr<!cir.func<!void ()>> loc(#loc188)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34_good() : () -> () loc(#loc90)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc76)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc77)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc189)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34_bad() : () -> () loc(#loc94)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc78)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc97)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc190)
    cir.return %17 : !s32i loc(#loc190)
  } loc(#loc185)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc192)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc193)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc194)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc195)
    %4 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc196)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc111)
    cir.store %5, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc197)
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc113)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc114)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc114)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc198)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc199)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc113)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc200)
    cir.store %12, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc201)
    cir.br ^bb1 loc(#loc202)
  ^bb1:  // pred: ^bb0
    %13 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc121)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc122)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc122)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc203)
    cir.brcond %16 ^bb2, ^bb3 loc(#loc204)
  ^bb2:  // pred: ^bb1
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc124)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc125)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc126)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc124)
    cir.br ^bb3 loc(#loc120)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc120)
  ^bb4:  // pred: ^bb3
    %20 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc127)
    %21 = cir.get_member %4[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34_unionType> -> !cir.ptr<!cir.ptr<!s32i>> loc(#loc36)
    cir.store %20, %21 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc205)
    cir.br ^bb5 loc(#loc206)
  ^bb5:  // pred: ^bb4
    %22 = cir.get_member %4[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34_unionType> -> !cir.ptr<!cir.ptr<!s32i>> loc(#loc40)
    %23 = cir.load %22 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc102)
    cir.store %23, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc192)
    cir.br ^bb6 loc(#loc207)
  ^bb6:  // pred: ^bb5
    %24 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc193)
    cir.store %24, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc193)
    cir.br ^bb7 loc(#loc208)
  ^bb7:  // pred: ^bb6
    %25 = cir.const #cir.int<0> : !s32i loc(#loc135)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc135)
    cir.store %26, %2 : !u64i, !cir.ptr<!u64i> loc(#loc209)
    cir.br ^bb8 loc(#loc208)
  ^bb8:  // 2 preds: ^bb7, ^bb12
    %27 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc137)
    %28 = cir.const #cir.int<10> : !s32i loc(#loc138)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc138)
    %30 = cir.cmp(lt, %27, %29) : !u64i, !cir.bool loc(#loc210)
    cir.brcond %30 ^bb9, ^bb13 loc(#loc139)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc211)
  ^bb10:  // pred: ^bb9
    %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc141)
    %32 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc142)
    %33 = cir.ptr_stride(%32 : !cir.ptr<!s32i>, %31 : !u64i), !cir.ptr<!s32i> loc(#loc142)
    %34 = cir.load %33 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc143)
    %36 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc144)
    %37 = cir.ptr_stride(%35 : !cir.ptr<!s32i>, %36 : !u64i), !cir.ptr<!s32i> loc(#loc145)
    cir.store %34, %37 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    cir.br ^bb11 loc(#loc134)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc134)
  ^bb12:  // pred: ^bb11
    %38 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc147)
    %39 = cir.unary(inc, %38) : !u64i, !u64i loc(#loc148)
    cir.store %39, %2 : !u64i, !cir.ptr<!u64i> loc(#loc213)
    cir.br ^bb8 loc(#loc208)
  ^bb13:  // pred: ^bb8
    cir.br ^bb14 loc(#loc134)
  ^bb14:  // pred: ^bb13
    %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc149)
    %41 = cir.const #cir.int<0> : !s32i loc(#loc150)
    %42 = cir.ptr_stride(%40 : !cir.ptr<!s32i>, %41 : !s32i), !cir.ptr<!s32i> loc(#loc151)
    %43 = cir.load %42 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    cir.call @printIntLine(%43) : (!s32i) -> () loc(#loc152)
    %44 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc153)
    %45 = cir.cast(bitcast, %44 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc153)
    cir.call @free(%45) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc154)
    cir.br ^bb15 loc(#loc132)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc130)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc100)
  } loc(#loc191)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":27:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":50:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":37:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":37:30)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":39:13)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":39:32)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":40:13)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":40:20)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":29:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":29:11)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":30:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":30:65)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":31:12)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":31:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":33:19)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":33:26)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":33:28)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":33:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":34:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":34:33)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":34:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":34:17)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":34:23)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":34:24)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":34:30)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":34:29)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":35:26)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":21:11)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":35:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":36:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":49:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":22:11)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":38:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":48:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":42:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":45:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":42:22)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":42:18)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":42:25)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":42:29)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":42:27)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":43:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":44:34)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":44:27)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":44:17)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":44:22)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":44:23)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":44:35)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":42:34)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":42:33)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":46:26)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":46:31)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":46:32)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":46:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":47:18)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":47:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":82:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":85:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":84:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":84:13)
#loc69 = loc("/usr/include/stdlib.h":575:1)
#loc70 = loc("/usr/include/stdlib.h":575:41)
#loc71 = loc("/usr/include/time.h":76:1)
#loc72 = loc("/usr/include/time.h":76:38)
#loc73 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc74 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":101:15)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":103:15)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":106:15)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":108:15)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":96:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":111:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":97:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":99:27)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":99:22)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":99:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":101:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":102:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":102:60)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":103:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":106:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":107:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":107:59)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":108:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":110:12)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":110:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":57:1)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":80:1)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":67:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":67:30)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":69:13)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":69:32)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":70:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":70:20)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":59:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":59:11)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":60:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":60:65)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":61:12)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":61:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":63:19)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":63:26)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":63:29)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":63:39)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":63:40)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":63:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":64:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":64:33)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":64:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":64:17)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":64:23)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":64:24)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":64:30)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":64:29)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":65:26)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":65:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":66:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":79:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":68:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":78:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":72:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":75:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":72:22)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":72:18)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":72:25)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":72:29)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":72:27)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":73:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":74:34)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":74:27)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":74:17)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":74:22)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":74:23)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":74:35)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":72:34)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":72:33)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":76:26)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":76:31)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":76:32)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":76:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":77:18)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c":77:13)
#loc155 = loc(fused[#loc1, #loc2])
#loc156 = loc(fused[#loc3, #loc4])
#loc157 = loc(fused[#loc5, #loc6])
#loc158 = loc(fused[#loc7, #loc8])
#loc159 = loc(fused[#loc9, #loc10])
#loc160 = loc(fused[#loc11, #loc12])
#loc161 = loc(fused[#loc13, #loc14])
#loc162 = loc(fused[#loc15, #loc16])
#loc163 = loc(fused[#loc17, #loc18])
#loc164 = loc(fused[#loc19, #loc20])
#loc165 = loc(fused[#loc22, #loc21])
#loc166 = loc(fused[#loc23, #loc25])
#loc167 = loc(fused[#loc26, #loc25])
#loc168 = loc(fused[#loc27, #loc28])
#loc169 = loc(fused[#loc29, #loc30])
#loc170 = loc(fused[#loc31, #loc28])
#loc171 = loc(fused[#loc37, #loc35])
#loc172 = loc(fused[#loc38, #loc39])
#loc173 = loc(fused[#loc41, #loc42])
#loc174 = loc(fused[#loc43, #loc44])
#loc175 = loc(fused[#loc46, #loc45])
#loc176 = loc(fused[#loc47, #loc48])
#loc177 = loc(fused[#loc50, #loc44])
#loc178 = loc(fused[#loc53, #loc56])
#loc179 = loc(fused[#loc58, #loc57])
#loc180 = loc(fused[#loc65, #loc66])
#loc181 = loc(fused[#loc67, #loc68])
#loc182 = loc(fused[#loc69, #loc70])
#loc183 = loc(fused[#loc71, #loc72])
#loc184 = loc(fused[#loc73, #loc74])
#loc185 = loc(fused[#loc79, #loc80])
#loc188 = loc(fused[#loc90, #loc91])
#loc189 = loc(fused[#loc94, #loc95])
#loc190 = loc(fused[#loc98, #loc97])
#loc191 = loc(fused[#loc99, #loc100])
#loc192 = loc(fused[#loc101, #loc102])
#loc193 = loc(fused[#loc103, #loc104])
#loc194 = loc(fused[#loc105, #loc106])
#loc195 = loc(fused[#loc107, #loc108])
#loc196 = loc(fused[#loc109, #loc110])
#loc197 = loc(fused[#loc112, #loc111])
#loc198 = loc(fused[#loc115, #loc116])
#loc199 = loc(fused[#loc114, #loc116])
#loc200 = loc(fused[#loc113, #loc117])
#loc201 = loc(fused[#loc118, #loc117])
#loc202 = loc(fused[#loc119, #loc120])
#loc203 = loc(fused[#loc121, #loc122])
#loc204 = loc(fused[#loc123, #loc120])
#loc205 = loc(fused[#loc128, #loc127])
#loc206 = loc(fused[#loc129, #loc130])
#loc207 = loc(fused[#loc131, #loc132])
#loc208 = loc(fused[#loc133, #loc134])
#loc209 = loc(fused[#loc136, #loc135])
#loc210 = loc(fused[#loc137, #loc138])
#loc211 = loc(fused[#loc140, #loc134])
#loc212 = loc(fused[#loc143, #loc146])
#loc213 = loc(fused[#loc148, #loc147])
