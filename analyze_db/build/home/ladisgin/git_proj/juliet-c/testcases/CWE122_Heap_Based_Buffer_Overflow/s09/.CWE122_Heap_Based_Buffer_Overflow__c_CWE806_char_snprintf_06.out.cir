!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":120:10)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":120:14)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":120:20)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":120:32)
#loc223 = loc(fused[#loc77, #loc78])
#loc224 = loc(fused[#loc79, #loc80])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc195)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc196)
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc197)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc198)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc199)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc200)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc202)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc18)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc19)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc19)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc203)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc204)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc18)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc205)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc206)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc27)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc208)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc29)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc30)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc31)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc29)
      } loc(#loc209)
    } loc(#loc207)
    cir.scope {
      %8 = cir.const #cir.int<5> : !s32i loc(#loc34)
      %9 = cir.const #cir.int<5> : !s32i loc(#loc35)
      %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc211)
      cir.if %10 {
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc37)
        %13 = cir.const #cir.int<65> : !s32i loc(#loc38)
        %14 = cir.const #cir.int<100> : !s32i loc(#loc39)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc40)
        %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc39)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc39)
        cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc213)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc43)
        %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc43)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc44)
        %21 = cir.const #cir.int<100> : !s32i loc(#loc45)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc46)
        %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc45)
        %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc47)
        cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc214)
      } loc(#loc212)
    } loc(#loc210)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc216)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc216)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc216)
      %10 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc52)
      %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc53)
      %12 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc54)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
      %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc54)
      %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc9)
      %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc9)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
      %18 = cir.call @snprintf(%11, %14, %16, %17) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc52)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
      cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc58)
      %20 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc59)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc60)
      cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc59)
    } loc(#loc215)
    cir.return loc(#loc15)
  } loc(#loc201)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    cir.return loc(#loc62)
  } loc(#loc217)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc220)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc221)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc74)
  cir.func @main(%arg0: !s32i loc(fused[#loc77, #loc78]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc79, #loc80])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc223)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc224)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc76)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc81)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc82)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc83)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc83)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc84)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc71)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc225)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06_good() : () -> () loc(#loc86)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc72)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc73)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc226)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06_bad() : () -> () loc(#loc90)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc74)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc93)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc227)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc227)
    cir.return %17 : !s32i loc(#loc227)
  } loc(#loc222)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc95)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc229)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc100)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc101)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc101)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc230)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc231)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc100)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc232)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc233)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc109)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc109)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc235)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc111)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc112)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc113)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc111)
      } loc(#loc236)
    } loc(#loc234)
    cir.scope {
      %8 = cir.const #cir.int<5> : !s32i loc(#loc116)
      %9 = cir.const #cir.int<5> : !s32i loc(#loc117)
      %10 = cir.cmp(ne, %8, %9) : !s32i, !cir.bool loc(#loc238)
      cir.if %10 {
        %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc95)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc95)
        cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc121)
      } else {
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc122)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc122)
        %13 = cir.const #cir.int<65> : !s32i loc(#loc123)
        %14 = cir.const #cir.int<50> : !s32i loc(#loc124)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc125)
        %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc124)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc124)
        cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc240)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc128)
        %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc128)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
        %21 = cir.const #cir.int<50> : !s32i loc(#loc130)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc131)
        %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc130)
        %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc132)
        cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc241)
      } loc(#loc239)
    } loc(#loc237)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc243)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc243)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc243)
      %10 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc137)
      %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc138)
      %12 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc139)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc140)
      %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc139)
      %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc141)
      %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc141)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
      %18 = cir.call @snprintf(%11, %14, %16, %17) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc137)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
      cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc144)
      %20 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc145)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc146)
      cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc145)
    } loc(#loc242)
    cir.return loc(#loc97)
  } loc(#loc228)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc245)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc151)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc152)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc152)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc246)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc247)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc151)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc248)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc249)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc160)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc160)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc251)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc162)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc163)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc164)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc162)
      } loc(#loc252)
    } loc(#loc250)
    cir.scope {
      %8 = cir.const #cir.int<5> : !s32i loc(#loc167)
      %9 = cir.const #cir.int<5> : !s32i loc(#loc168)
      %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc254)
      cir.if %10 {
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc170)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc170)
        %13 = cir.const #cir.int<65> : !s32i loc(#loc171)
        %14 = cir.const #cir.int<50> : !s32i loc(#loc172)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc173)
        %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc172)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc172)
        cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc256)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc176)
        %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc176)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc177)
        %21 = cir.const #cir.int<50> : !s32i loc(#loc178)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc179)
        %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc178)
        %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc180)
        cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc257)
      } loc(#loc255)
    } loc(#loc253)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc259)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc259)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc259)
      %10 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc185)
      %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc186)
      %12 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc187)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc188)
      %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc187)
      %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc189)
      %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc189)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc190)
      %18 = cir.call @snprintf(%11, %14, %16, %17) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc185)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc191)
      cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc192)
      %20 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc193)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc194)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc194)
      cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc193)
    } loc(#loc258)
    cir.return loc(#loc148)
  } loc(#loc244)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/stdio.h":385:1)
#loc6 = loc("/usr/include/stdio.h":387:62)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":47:38)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":33:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":51:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":35:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":35:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":36:20)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":36:27)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":36:31)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":36:42)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":36:43)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":36:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":37:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":37:33)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":37:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":37:17)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":37:23)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":37:24)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":37:30)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":37:29)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":38:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":43:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":38:8)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":38:27)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":39:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":41:16)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":41:22)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":41:27)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":41:31)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":41:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":41:32)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":42:23)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":42:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":42:14)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":42:18)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":42:19)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":44:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":50:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":45:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":45:25)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":47:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":47:18)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":47:24)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":47:31)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":47:44)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":48:19)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":48:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":49:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":49:14)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":104:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":108:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":106:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":106:14)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":107:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":107:14)
#loc67 = loc("/usr/include/stdlib.h":575:1)
#loc68 = loc("/usr/include/stdlib.h":575:41)
#loc69 = loc("/usr/include/time.h":76:1)
#loc70 = loc("/usr/include/time.h":76:38)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":125:15)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":127:15)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":130:15)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":132:15)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":120:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":135:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":121:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":123:27)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":123:22)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":123:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":125:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":126:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":126:71)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":127:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":130:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":131:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":131:70)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":132:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":134:12)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":134:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":66:19)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":58:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":81:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":60:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":60:12)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":61:20)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":61:27)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":61:31)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":61:42)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":61:43)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":61:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":62:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":62:33)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":62:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":62:17)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":62:23)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":62:24)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":62:30)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":62:29)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":63:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":73:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":63:8)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":63:27)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":64:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":67:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":69:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":66:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":71:16)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":71:22)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":71:27)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":71:30)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":71:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":71:31)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":72:22)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":72:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":72:14)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":72:17)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":72:18)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":74:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":80:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":75:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":75:25)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":77:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":77:18)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":77:24)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":77:31)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":77:38)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":77:44)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":78:19)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":78:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":79:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":79:14)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":84:1)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":102:1)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":86:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":86:12)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":87:20)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":87:27)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":87:31)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":87:42)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":87:43)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":87:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":88:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":88:33)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":88:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":88:17)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":88:23)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":88:24)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":88:30)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":88:29)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":89:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":94:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":89:8)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":89:27)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":90:5)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":92:16)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":92:22)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":92:27)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":92:30)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":92:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":92:31)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":93:22)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":93:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":93:14)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":93:17)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":93:18)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":95:5)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":101:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":96:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":96:25)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":98:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":98:18)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":98:24)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":98:31)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":98:38)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":98:44)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":99:19)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":99:9)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":100:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c":100:14)
#loc195 = loc(fused[#loc1, #loc2])
#loc196 = loc(fused[#loc3, #loc4])
#loc197 = loc(fused[#loc5, #loc6])
#loc198 = loc(fused[#loc7, #loc8])
#loc199 = loc(fused[#loc10, #loc11])
#loc200 = loc(fused[#loc12, #loc13])
#loc201 = loc(fused[#loc14, #loc15])
#loc202 = loc(fused[#loc16, #loc17])
#loc203 = loc(fused[#loc20, #loc21])
#loc204 = loc(fused[#loc19, #loc21])
#loc205 = loc(fused[#loc18, #loc22])
#loc206 = loc(fused[#loc23, #loc22])
#loc207 = loc(fused[#loc24, #loc25])
#loc208 = loc(fused[#loc26, #loc27])
#loc209 = loc(fused[#loc28, #loc25])
#loc210 = loc(fused[#loc32, #loc33])
#loc211 = loc(fused[#loc34, #loc35])
#loc212 = loc(fused[#loc36, #loc33])
#loc213 = loc(fused[#loc41, #loc42])
#loc214 = loc(fused[#loc44, #loc43])
#loc215 = loc(fused[#loc48, #loc49])
#loc216 = loc(fused[#loc50, #loc51])
#loc217 = loc(fused[#loc61, #loc62])
#loc218 = loc(fused[#loc63, #loc64])
#loc219 = loc(fused[#loc65, #loc66])
#loc220 = loc(fused[#loc67, #loc68])
#loc221 = loc(fused[#loc69, #loc70])
#loc222 = loc(fused[#loc75, #loc76])
#loc225 = loc(fused[#loc86, #loc87])
#loc226 = loc(fused[#loc90, #loc91])
#loc227 = loc(fused[#loc94, #loc93])
#loc228 = loc(fused[#loc96, #loc97])
#loc229 = loc(fused[#loc98, #loc99])
#loc230 = loc(fused[#loc102, #loc103])
#loc231 = loc(fused[#loc101, #loc103])
#loc232 = loc(fused[#loc100, #loc104])
#loc233 = loc(fused[#loc105, #loc104])
#loc234 = loc(fused[#loc106, #loc107])
#loc235 = loc(fused[#loc108, #loc109])
#loc236 = loc(fused[#loc110, #loc107])
#loc237 = loc(fused[#loc114, #loc115])
#loc238 = loc(fused[#loc116, #loc117])
#loc239 = loc(fused[#loc118, #loc119, #loc120, #loc115])
#loc240 = loc(fused[#loc126, #loc127])
#loc241 = loc(fused[#loc129, #loc128])
#loc242 = loc(fused[#loc133, #loc134])
#loc243 = loc(fused[#loc135, #loc136])
#loc244 = loc(fused[#loc147, #loc148])
#loc245 = loc(fused[#loc149, #loc150])
#loc246 = loc(fused[#loc153, #loc154])
#loc247 = loc(fused[#loc152, #loc154])
#loc248 = loc(fused[#loc151, #loc155])
#loc249 = loc(fused[#loc156, #loc155])
#loc250 = loc(fused[#loc157, #loc158])
#loc251 = loc(fused[#loc159, #loc160])
#loc252 = loc(fused[#loc161, #loc158])
#loc253 = loc(fused[#loc165, #loc166])
#loc254 = loc(fused[#loc167, #loc168])
#loc255 = loc(fused[#loc169, #loc166])
#loc256 = loc(fused[#loc174, #loc175])
#loc257 = loc(fused[#loc177, #loc176])
#loc258 = loc(fused[#loc181, #loc182])
#loc259 = loc(fused[#loc183, #loc184])
