!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc49 = loc("CWE511_Logic_Time_Bomb__counter_15.c":128:10)
#loc50 = loc("CWE511_Logic_Time_Bomb__counter_15.c":128:14)
#loc51 = loc("CWE511_Logic_Time_Bomb__counter_15.c":128:20)
#loc52 = loc("CWE511_Logic_Time_Bomb__counter_15.c":128:32)
#loc141 = loc(fused[#loc49, #loc50])
#loc142 = loc(fused[#loc51, #loc52])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc123)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc3)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc126)
    cir.br ^bb1 loc(#loc127)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<6> : !s32i loc(#loc13)
    cir.br ^bb2 loc(#loc11)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %1 : !s32i, ^bb16 [
      6: ^bb4
    ] loc(#loc11)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc128)
  ^bb5:  // pred: ^bb4
    %2 = cir.const #cir.int<0> : !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    cir.br ^bb6 loc(#loc129)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8 loc(#loc129)
  ^bb7:  // pred: ^bb12
    %3 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc130)
    cir.brcond %5 ^bb8, ^bb13 loc(#loc21)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc131)
  ^bb9:  // pred: ^bb8
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %7 = cir.const #cir.int<20000> : !s32i loc(#loc25)
    %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc132)
    cir.brcond %8 ^bb10, ^bb11 loc(#loc133)
  ^bb10:  // pred: ^bb9
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc3)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc3)
    %11 = cir.call @unlink(%10) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc27)
    cir.br ^bb11 loc(#loc23)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc23)
  ^bb12:  // pred: ^bb11
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    %13 = cir.unary(inc, %12) : !s32i, !s32i loc(#loc29)
    cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    cir.br ^bb7 loc(#loc18)
  ^bb13:  // pred: ^bb7
    cir.br ^bb14 loc(#loc18)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc16)
  ^bb15:  // pred: ^bb14
    cir.br ^bb17 loc(#loc30)
  ^bb16:  // pred: ^bb2
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc6)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc6)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc31)
    cir.br ^bb17 loc(#loc32)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc12)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc8)
  } loc(#loc125)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc136)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc135)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc138)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc139)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc46)
  cir.func @main(%arg0: !s32i loc(fused[#loc49, #loc50]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc51, #loc52])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc141)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc142)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc48)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc53)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc53)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc54)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc55)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc55)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc56)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc43)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %8 = cir.get_global @CWE511_Logic_Time_Bomb__counter_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc143)
    cir.call @CWE511_Logic_Time_Bomb__counter_15_good() : () -> () loc(#loc58)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc44)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc45)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %13 = cir.get_global @CWE511_Logic_Time_Bomb__counter_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc144)
    cir.call @CWE511_Logic_Time_Bomb__counter_15_bad() : () -> () loc(#loc62)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc46)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc65)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc145)
    cir.return %17 : !s32i loc(#loc145)
  } loc(#loc140)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc67)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc147)
    cir.br ^bb1 loc(#loc148)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<5> : !s32i loc(#loc74)
    cir.br ^bb2 loc(#loc72)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %1 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc72)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc75)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %2 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc76)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    cir.br ^bb17 loc(#loc78)
  ^bb5:  // pred: ^bb2
    cir.br ^bb6 loc(#loc149)
  ^bb6:  // pred: ^bb5
    %4 = cir.const #cir.int<0> : !s32i loc(#loc71)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    cir.br ^bb7 loc(#loc150)
  ^bb7:  // pred: ^bb6
    cir.br ^bb9 loc(#loc150)
  ^bb8:  // pred: ^bb13
    %5 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc151)
    cir.brcond %7 ^bb9, ^bb14 loc(#loc85)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc152)
  ^bb10:  // pred: ^bb9
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    %9 = cir.const #cir.int<20000> : !s32i loc(#loc89)
    %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc153)
    cir.brcond %10 ^bb11, ^bb12 loc(#loc154)
  ^bb11:  // pred: ^bb10
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc67)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    cir.br ^bb12 loc(#loc87)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc87)
  ^bb13:  // pred: ^bb12
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    %14 = cir.unary(inc, %13) : !s32i, !s32i loc(#loc93)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc155)
    cir.br ^bb8 loc(#loc82)
  ^bb14:  // pred: ^bb8
    cir.br ^bb15 loc(#loc82)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc80)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc94)
  ^bb17:  // 2 preds: ^bb4, ^bb16
    cir.br ^bb18 loc(#loc73)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc69)
  } loc(#loc146)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc157)
    cir.br ^bb1 loc(#loc158)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<6> : !s32i loc(#loc101)
    cir.br ^bb2 loc(#loc99)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %1 : !s32i, ^bb16 [
      6: ^bb4
    ] loc(#loc99)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc102)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc159)
  ^bb5:  // pred: ^bb4
    %2 = cir.const #cir.int<0> : !s32i loc(#loc98)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    cir.br ^bb6 loc(#loc160)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8 loc(#loc160)
  ^bb7:  // pred: ^bb12
    %3 = cir.const #cir.int<1> : !s32i loc(#loc107)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc161)
    cir.brcond %5 ^bb8, ^bb13 loc(#loc109)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc162)
  ^bb9:  // pred: ^bb8
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    %7 = cir.const #cir.int<20000> : !s32i loc(#loc113)
    %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc163)
    cir.brcond %8 ^bb10, ^bb11 loc(#loc164)
  ^bb10:  // pred: ^bb9
    %9 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc115)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc115)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    cir.br ^bb11 loc(#loc111)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc111)
  ^bb12:  // pred: ^bb11
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    %12 = cir.unary(inc, %11) : !s32i, !s32i loc(#loc118)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    cir.br ^bb7 loc(#loc106)
  ^bb13:  // pred: ^bb7
    cir.br ^bb14 loc(#loc106)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc104)
  ^bb15:  // pred: ^bb14
    cir.br ^bb17 loc(#loc119)
  ^bb16:  // pred: ^bb2
    %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc120)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc120)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    cir.br ^bb17 loc(#loc122)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc100)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc96)
  } loc(#loc156)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_15.c":0:0)
#loc1 = loc("/usr/include/unistd.h":858:1)
#loc2 = loc("/usr/include/unistd.h":858:48)
#loc3 = loc("CWE511_Logic_Time_Bomb__counter_15.c":41:24)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE511_Logic_Time_Bomb__counter_15.c":50:19)
#loc7 = loc("CWE511_Logic_Time_Bomb__counter_15.c":29:1)
#loc8 = loc("CWE511_Logic_Time_Bomb__counter_15.c":53:1)
#loc9 = loc("CWE511_Logic_Time_Bomb__counter_15.c":35:9)
#loc10 = loc("CWE511_Logic_Time_Bomb__counter_15.c":35:21)
#loc11 = loc("CWE511_Logic_Time_Bomb__counter_15.c":31:5)
#loc12 = loc("CWE511_Logic_Time_Bomb__counter_15.c":52:5)
#loc13 = loc("CWE511_Logic_Time_Bomb__counter_15.c":31:12)
#loc14 = loc("CWE511_Logic_Time_Bomb__counter_15.c":33:5)
#loc15 = loc("CWE511_Logic_Time_Bomb__counter_15.c":34:5)
#loc16 = loc("CWE511_Logic_Time_Bomb__counter_15.c":46:5)
#loc17 = loc("CWE511_Logic_Time_Bomb__counter_15.c":36:9)
#loc18 = loc("CWE511_Logic_Time_Bomb__counter_15.c":45:21)
#loc19 = loc("CWE511_Logic_Time_Bomb__counter_15.c":45:15)
#loc20 = loc("CWE511_Logic_Time_Bomb__counter_15.c":45:20)
#loc21 = loc("CWE511_Logic_Time_Bomb__counter_15.c":45:17)
#loc22 = loc("CWE511_Logic_Time_Bomb__counter_15.c":39:13)
#loc23 = loc("CWE511_Logic_Time_Bomb__counter_15.c":42:13)
#loc24 = loc("CWE511_Logic_Time_Bomb__counter_15.c":39:17)
#loc25 = loc("CWE511_Logic_Time_Bomb__counter_15.c":39:26)
#loc26 = loc("CWE511_Logic_Time_Bomb__counter_15.c":40:13)
#loc27 = loc("CWE511_Logic_Time_Bomb__counter_15.c":41:17)
#loc28 = loc("CWE511_Logic_Time_Bomb__counter_15.c":43:18)
#loc29 = loc("CWE511_Logic_Time_Bomb__counter_15.c":43:13)
#loc30 = loc("CWE511_Logic_Time_Bomb__counter_15.c":47:5)
#loc31 = loc("CWE511_Logic_Time_Bomb__counter_15.c":50:9)
#loc32 = loc("CWE511_Logic_Time_Bomb__counter_15.c":51:9)
#loc33 = loc("CWE511_Logic_Time_Bomb__counter_15.c":113:1)
#loc34 = loc("CWE511_Logic_Time_Bomb__counter_15.c":117:1)
#loc35 = loc("CWE511_Logic_Time_Bomb__counter_15.c":115:5)
#loc36 = loc("CWE511_Logic_Time_Bomb__counter_15.c":115:11)
#loc37 = loc("CWE511_Logic_Time_Bomb__counter_15.c":116:5)
#loc38 = loc("CWE511_Logic_Time_Bomb__counter_15.c":116:11)
#loc39 = loc("/usr/include/stdlib.h":575:1)
#loc40 = loc("/usr/include/stdlib.h":575:41)
#loc41 = loc("/usr/include/time.h":76:1)
#loc42 = loc("/usr/include/time.h":76:38)
#loc43 = loc("CWE511_Logic_Time_Bomb__counter_15.c":133:15)
#loc44 = loc("CWE511_Logic_Time_Bomb__counter_15.c":135:15)
#loc45 = loc("CWE511_Logic_Time_Bomb__counter_15.c":138:15)
#loc46 = loc("CWE511_Logic_Time_Bomb__counter_15.c":140:15)
#loc47 = loc("CWE511_Logic_Time_Bomb__counter_15.c":128:1)
#loc48 = loc("CWE511_Logic_Time_Bomb__counter_15.c":143:1)
#loc53 = loc("CWE511_Logic_Time_Bomb__counter_15.c":129:1)
#loc54 = loc("CWE511_Logic_Time_Bomb__counter_15.c":131:27)
#loc55 = loc("CWE511_Logic_Time_Bomb__counter_15.c":131:22)
#loc56 = loc("CWE511_Logic_Time_Bomb__counter_15.c":131:5)
#loc57 = loc("CWE511_Logic_Time_Bomb__counter_15.c":133:5)
#loc58 = loc("CWE511_Logic_Time_Bomb__counter_15.c":134:5)
#loc59 = loc("CWE511_Logic_Time_Bomb__counter_15.c":134:45)
#loc60 = loc("CWE511_Logic_Time_Bomb__counter_15.c":135:5)
#loc61 = loc("CWE511_Logic_Time_Bomb__counter_15.c":138:5)
#loc62 = loc("CWE511_Logic_Time_Bomb__counter_15.c":139:5)
#loc63 = loc("CWE511_Logic_Time_Bomb__counter_15.c":139:44)
#loc64 = loc("CWE511_Logic_Time_Bomb__counter_15.c":140:5)
#loc65 = loc("CWE511_Logic_Time_Bomb__counter_15.c":142:12)
#loc66 = loc("CWE511_Logic_Time_Bomb__counter_15.c":142:5)
#loc67 = loc("CWE511_Logic_Time_Bomb__counter_15.c":76:27)
#loc68 = loc("CWE511_Logic_Time_Bomb__counter_15.c":60:1)
#loc69 = loc("CWE511_Logic_Time_Bomb__counter_15.c":84:1)
#loc70 = loc("CWE511_Logic_Time_Bomb__counter_15.c":70:9)
#loc71 = loc("CWE511_Logic_Time_Bomb__counter_15.c":70:21)
#loc72 = loc("CWE511_Logic_Time_Bomb__counter_15.c":62:5)
#loc73 = loc("CWE511_Logic_Time_Bomb__counter_15.c":83:5)
#loc74 = loc("CWE511_Logic_Time_Bomb__counter_15.c":62:12)
#loc75 = loc("CWE511_Logic_Time_Bomb__counter_15.c":64:5)
#loc76 = loc("CWE511_Logic_Time_Bomb__counter_15.c":66:19)
#loc77 = loc("CWE511_Logic_Time_Bomb__counter_15.c":66:9)
#loc78 = loc("CWE511_Logic_Time_Bomb__counter_15.c":67:9)
#loc79 = loc("CWE511_Logic_Time_Bomb__counter_15.c":69:5)
#loc80 = loc("CWE511_Logic_Time_Bomb__counter_15.c":81:5)
#loc81 = loc("CWE511_Logic_Time_Bomb__counter_15.c":71:9)
#loc82 = loc("CWE511_Logic_Time_Bomb__counter_15.c":80:21)
#loc83 = loc("CWE511_Logic_Time_Bomb__counter_15.c":80:15)
#loc84 = loc("CWE511_Logic_Time_Bomb__counter_15.c":80:20)
#loc85 = loc("CWE511_Logic_Time_Bomb__counter_15.c":80:17)
#loc86 = loc("CWE511_Logic_Time_Bomb__counter_15.c":74:13)
#loc87 = loc("CWE511_Logic_Time_Bomb__counter_15.c":77:13)
#loc88 = loc("CWE511_Logic_Time_Bomb__counter_15.c":74:17)
#loc89 = loc("CWE511_Logic_Time_Bomb__counter_15.c":74:26)
#loc90 = loc("CWE511_Logic_Time_Bomb__counter_15.c":75:13)
#loc91 = loc("CWE511_Logic_Time_Bomb__counter_15.c":76:17)
#loc92 = loc("CWE511_Logic_Time_Bomb__counter_15.c":78:18)
#loc93 = loc("CWE511_Logic_Time_Bomb__counter_15.c":78:13)
#loc94 = loc("CWE511_Logic_Time_Bomb__counter_15.c":82:5)
#loc95 = loc("CWE511_Logic_Time_Bomb__counter_15.c":87:1)
#loc96 = loc("CWE511_Logic_Time_Bomb__counter_15.c":111:1)
#loc97 = loc("CWE511_Logic_Time_Bomb__counter_15.c":93:9)
#loc98 = loc("CWE511_Logic_Time_Bomb__counter_15.c":93:21)
#loc99 = loc("CWE511_Logic_Time_Bomb__counter_15.c":89:5)
#loc100 = loc("CWE511_Logic_Time_Bomb__counter_15.c":110:5)
#loc101 = loc("CWE511_Logic_Time_Bomb__counter_15.c":89:12)
#loc102 = loc("CWE511_Logic_Time_Bomb__counter_15.c":91:5)
#loc103 = loc("CWE511_Logic_Time_Bomb__counter_15.c":92:5)
#loc104 = loc("CWE511_Logic_Time_Bomb__counter_15.c":104:5)
#loc105 = loc("CWE511_Logic_Time_Bomb__counter_15.c":94:9)
#loc106 = loc("CWE511_Logic_Time_Bomb__counter_15.c":103:21)
#loc107 = loc("CWE511_Logic_Time_Bomb__counter_15.c":103:15)
#loc108 = loc("CWE511_Logic_Time_Bomb__counter_15.c":103:20)
#loc109 = loc("CWE511_Logic_Time_Bomb__counter_15.c":103:17)
#loc110 = loc("CWE511_Logic_Time_Bomb__counter_15.c":97:13)
#loc111 = loc("CWE511_Logic_Time_Bomb__counter_15.c":100:13)
#loc112 = loc("CWE511_Logic_Time_Bomb__counter_15.c":97:17)
#loc113 = loc("CWE511_Logic_Time_Bomb__counter_15.c":97:26)
#loc114 = loc("CWE511_Logic_Time_Bomb__counter_15.c":98:13)
#loc115 = loc("CWE511_Logic_Time_Bomb__counter_15.c":99:27)
#loc116 = loc("CWE511_Logic_Time_Bomb__counter_15.c":99:17)
#loc117 = loc("CWE511_Logic_Time_Bomb__counter_15.c":101:18)
#loc118 = loc("CWE511_Logic_Time_Bomb__counter_15.c":101:13)
#loc119 = loc("CWE511_Logic_Time_Bomb__counter_15.c":105:5)
#loc120 = loc("CWE511_Logic_Time_Bomb__counter_15.c":108:19)
#loc121 = loc("CWE511_Logic_Time_Bomb__counter_15.c":108:9)
#loc122 = loc("CWE511_Logic_Time_Bomb__counter_15.c":109:9)
#loc123 = loc(fused[#loc1, #loc2])
#loc124 = loc(fused[#loc4, #loc5])
#loc125 = loc(fused[#loc7, #loc8])
#loc126 = loc(fused[#loc9, #loc10])
#loc127 = loc(fused[#loc11, #loc12])
#loc128 = loc(fused[#loc15, #loc16])
#loc129 = loc(fused[#loc17, #loc18])
#loc130 = loc(fused[#loc19, #loc20])
#loc131 = loc(fused[#loc22, #loc23])
#loc132 = loc(fused[#loc24, #loc25])
#loc133 = loc(fused[#loc26, #loc23])
#loc134 = loc(fused[#loc29, #loc28])
#loc135 = loc(fused[#loc33, #loc34])
#loc136 = loc(fused[#loc35, #loc36])
#loc137 = loc(fused[#loc37, #loc38])
#loc138 = loc(fused[#loc39, #loc40])
#loc139 = loc(fused[#loc41, #loc42])
#loc140 = loc(fused[#loc47, #loc48])
#loc143 = loc(fused[#loc58, #loc59])
#loc144 = loc(fused[#loc62, #loc63])
#loc145 = loc(fused[#loc66, #loc65])
#loc146 = loc(fused[#loc68, #loc69])
#loc147 = loc(fused[#loc70, #loc71])
#loc148 = loc(fused[#loc72, #loc73])
#loc149 = loc(fused[#loc79, #loc80])
#loc150 = loc(fused[#loc81, #loc82])
#loc151 = loc(fused[#loc83, #loc84])
#loc152 = loc(fused[#loc86, #loc87])
#loc153 = loc(fused[#loc88, #loc89])
#loc154 = loc(fused[#loc90, #loc87])
#loc155 = loc(fused[#loc93, #loc92])
#loc156 = loc(fused[#loc95, #loc96])
#loc157 = loc(fused[#loc97, #loc98])
#loc158 = loc(fused[#loc99, #loc100])
#loc159 = loc(fused[#loc103, #loc104])
#loc160 = loc(fused[#loc105, #loc106])
#loc161 = loc(fused[#loc107, #loc108])
#loc162 = loc(fused[#loc110, #loc111])
#loc163 = loc(fused[#loc112, #loc113])
#loc164 = loc(fused[#loc114, #loc111])
#loc165 = loc(fused[#loc118, #loc117])
