!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc48 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":104:10)
#loc49 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":104:14)
#loc50 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":104:20)
#loc51 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":104:32)
#loc141 = loc(fused[#loc48, #loc49])
#loc142 = loc(fused[#loc50, #loc51])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_multiply_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc122)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc123)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printHexCharLine(!s8i) loc(#loc124)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_multiply_18_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc126)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc127)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc14)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc14)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc128)
    cir.br ^bb1 loc(#loc129)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc18)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc123)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc19)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %9 = cir.call @__isoc99_fscanf(%6, %8, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc18)
    cir.br ^bb2 loc(#loc130)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc131)
  ^bb3:  // pred: ^bb2
    %10 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc24)
    %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc24)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc25)
    %13 = cir.cmp(gt, %11, %12) : !s32i, !cir.bool loc(#loc132)
    cir.brcond %13 ^bb4, ^bb5 loc(#loc133)
  ^bb4:  // pred: ^bb3
    %14 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc27)
    %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc27)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc11)
    %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc27)
    %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc27)
    cir.store %18, %0 : !s8i, !cir.ptr<!s8i> loc(#loc126)
    %19 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc28)
    cir.call @printHexCharLine(%19) : (!s8i) -> () loc(#loc29)
    cir.br ^bb5 loc(#loc23)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc23)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc9)
  } loc(#loc125)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_multiply_18_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc135)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc136)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc134)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc137)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc138)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc139)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc45)
  cir.func @main(%arg0: !s32i loc(fused[#loc48, #loc49]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc50, #loc51])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc141)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc142)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc47)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc52)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc52)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc53)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc54)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc54)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc55)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc42)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %8 = cir.get_global @CWE190_Integer_Overflow__char_fscanf_multiply_18_good : !cir.ptr<!cir.func<!void ()>> loc(#loc143)
    cir.call @CWE190_Integer_Overflow__char_fscanf_multiply_18_good() : () -> () loc(#loc57)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc44)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %13 = cir.get_global @CWE190_Integer_Overflow__char_fscanf_multiply_18_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc144)
    cir.call @CWE190_Integer_Overflow__char_fscanf_multiply_18_bad() : () -> () loc(#loc61)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc45)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc64)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc145)
    cir.return %17 : !s32i loc(#loc145)
  } loc(#loc140)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc66)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc147)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc148)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc73)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc73)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc149)
    cir.br ^bb1 loc(#loc150)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc77)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc123)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc78)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc79)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc79)
    %9 = cir.call @__isoc99_fscanf(%6, %8, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc77)
    cir.br ^bb2 loc(#loc151)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc152)
  ^bb3:  // pred: ^bb2
    %10 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc84)
    %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc84)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc85)
    %13 = cir.cmp(gt, %11, %12) : !s32i, !cir.bool loc(#loc153)
    cir.brcond %13 ^bb4, ^bb10 loc(#loc154)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc155)
  ^bb5:  // pred: ^bb4
    %14 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc89)
    %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc89)
    %16 = cir.const #cir.int<127> : !s32i loc(#loc90)
    %17 = cir.const #cir.int<2> : !s32i loc(#loc91)
    %18 = cir.binop(div, %16, %17) : !s32i loc(#loc156)
    %19 = cir.cmp(lt, %15, %18) : !s32i, !cir.bool loc(#loc157)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc158)
  ^bb6:  // pred: ^bb5
    %20 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc96)
    %21 = cir.cast(integral, %20 : !s8i), !s32i loc(#loc96)
    %22 = cir.const #cir.int<2> : !s32i loc(#loc70)
    %23 = cir.binop(mul, %21, %22) nsw : !s32i loc(#loc96)
    %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc96)
    cir.store %24, %0 : !s8i, !cir.ptr<!s8i> loc(#loc147)
    %25 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc97)
    cir.call @printHexCharLine(%25) : (!s8i) -> () loc(#loc98)
    cir.br ^bb8 loc(#loc94)
  ^bb7:  // pred: ^bb5
    %26 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc66)
    %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    cir.br ^bb8 loc(#loc88)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc88)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc83)
  ^bb10:  // 2 preds: ^bb3, ^bb9
    cir.br ^bb11 loc(#loc83)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc68)
  } loc(#loc146)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc160)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc161)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc106)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc106)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc162)
    cir.br ^bb1 loc(#loc163)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<2> : !s32i loc(#loc110)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc110)
    cir.store %5, %1 : !s8i, !cir.ptr<!s8i> loc(#loc164)
    cir.br ^bb2 loc(#loc165)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc166)
  ^bb3:  // pred: ^bb2
    %6 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc116)
    %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc116)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc117)
    %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc167)
    cir.brcond %9 ^bb4, ^bb5 loc(#loc168)
  ^bb4:  // pred: ^bb3
    %10 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc119)
    %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc119)
    %12 = cir.const #cir.int<2> : !s32i loc(#loc103)
    %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc119)
    %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc119)
    cir.store %14, %0 : !s8i, !cir.ptr<!s8i> loc(#loc160)
    %15 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc120)
    cir.call @printHexCharLine(%15) : (!s8i) -> () loc(#loc121)
    cir.br ^bb5 loc(#loc115)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc115)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc101)
  } loc(#loc159)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_multiply_18.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":29:20)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc8 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":38:1)
#loc10 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":35:9)
#loc11 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":35:30)
#loc12 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":24:5)
#loc13 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":24:10)
#loc14 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":25:12)
#loc15 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":25:5)
#loc16 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":26:5)
#loc17 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":26:10)
#loc18 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":29:5)
#loc19 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":29:13)
#loc20 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":30:5)
#loc21 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":30:10)
#loc22 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":32:5)
#loc23 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":37:5)
#loc24 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":32:8)
#loc25 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":32:15)
#loc26 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":33:5)
#loc27 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":35:23)
#loc28 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":36:26)
#loc29 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":36:9)
#loc30 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":89:1)
#loc31 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":93:1)
#loc32 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":91:5)
#loc33 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":91:13)
#loc34 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":92:5)
#loc35 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":92:13)
#loc36 = loc("/usr/include/stdlib.h":575:1)
#loc37 = loc("/usr/include/stdlib.h":575:41)
#loc38 = loc("/usr/include/time.h":76:1)
#loc39 = loc("/usr/include/time.h":76:38)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":109:15)
#loc43 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":111:15)
#loc44 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":114:15)
#loc45 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":116:15)
#loc46 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":104:1)
#loc47 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":119:1)
#loc52 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":105:1)
#loc53 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":107:27)
#loc54 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":107:22)
#loc55 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":107:5)
#loc56 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":109:5)
#loc57 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":110:5)
#loc58 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":110:59)
#loc59 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":111:5)
#loc60 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":114:5)
#loc61 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":115:5)
#loc62 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":115:58)
#loc63 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":116:5)
#loc64 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":118:12)
#loc65 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":118:5)
#loc66 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":65:23)
#loc67 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":45:1)
#loc68 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":68:1)
#loc69 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":60:13)
#loc70 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":60:34)
#loc71 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":47:5)
#loc72 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":47:10)
#loc73 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":48:12)
#loc74 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":48:5)
#loc75 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":49:5)
#loc76 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":49:10)
#loc77 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":52:5)
#loc78 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":52:13)
#loc79 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":52:20)
#loc80 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":53:5)
#loc81 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":53:10)
#loc82 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":55:5)
#loc83 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":67:5)
#loc84 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":55:8)
#loc85 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":55:15)
#loc86 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":56:5)
#loc87 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":58:9)
#loc88 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":66:9)
#loc89 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":58:13)
#loc90 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":58:21)
#loc91 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":58:30)
#loc92 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":58:31)
#loc93 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":59:9)
#loc94 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":62:9)
#loc95 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":64:9)
#loc96 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":60:27)
#loc97 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":61:30)
#loc98 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":61:13)
#loc99 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":65:13)
#loc100 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":71:1)
#loc101 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":87:1)
#loc102 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":84:9)
#loc103 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":84:30)
#loc104 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":73:5)
#loc105 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":73:10)
#loc106 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":74:12)
#loc107 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":74:5)
#loc108 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":75:5)
#loc109 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":75:10)
#loc110 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":78:12)
#loc111 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":78:5)
#loc112 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":79:5)
#loc113 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":79:10)
#loc114 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":81:5)
#loc115 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":86:5)
#loc116 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":81:8)
#loc117 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":81:15)
#loc118 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":82:5)
#loc119 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":84:23)
#loc120 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":85:26)
#loc121 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_18.c":85:9)
#loc122 = loc(fused[#loc1, #loc2])
#loc123 = loc(fused[#loc3, #loc4])
#loc124 = loc(fused[#loc6, #loc7])
#loc125 = loc(fused[#loc8, #loc9])
#loc126 = loc(fused[#loc10, #loc11])
#loc127 = loc(fused[#loc12, #loc13])
#loc128 = loc(fused[#loc15, #loc14])
#loc129 = loc(fused[#loc16, #loc17])
#loc130 = loc(fused[#loc20, #loc21])
#loc131 = loc(fused[#loc22, #loc23])
#loc132 = loc(fused[#loc24, #loc25])
#loc133 = loc(fused[#loc26, #loc23])
#loc134 = loc(fused[#loc30, #loc31])
#loc135 = loc(fused[#loc32, #loc33])
#loc136 = loc(fused[#loc34, #loc35])
#loc137 = loc(fused[#loc36, #loc37])
#loc138 = loc(fused[#loc38, #loc39])
#loc139 = loc(fused[#loc40, #loc41])
#loc140 = loc(fused[#loc46, #loc47])
#loc143 = loc(fused[#loc57, #loc58])
#loc144 = loc(fused[#loc61, #loc62])
#loc145 = loc(fused[#loc65, #loc64])
#loc146 = loc(fused[#loc67, #loc68])
#loc147 = loc(fused[#loc69, #loc70])
#loc148 = loc(fused[#loc71, #loc72])
#loc149 = loc(fused[#loc74, #loc73])
#loc150 = loc(fused[#loc75, #loc76])
#loc151 = loc(fused[#loc80, #loc81])
#loc152 = loc(fused[#loc82, #loc83])
#loc153 = loc(fused[#loc84, #loc85])
#loc154 = loc(fused[#loc86, #loc83])
#loc155 = loc(fused[#loc87, #loc88])
#loc156 = loc(fused[#loc90, #loc91])
#loc157 = loc(fused[#loc89, #loc92])
#loc158 = loc(fused[#loc93, #loc94, #loc95, #loc88])
#loc159 = loc(fused[#loc100, #loc101])
#loc160 = loc(fused[#loc102, #loc103])
#loc161 = loc(fused[#loc104, #loc105])
#loc162 = loc(fused[#loc107, #loc106])
#loc163 = loc(fused[#loc108, #loc109])
#loc164 = loc(fused[#loc111, #loc110])
#loc165 = loc(fused[#loc112, #loc113])
#loc166 = loc(fused[#loc114, #loc115])
#loc167 = loc(fused[#loc116, #loc117])
#loc168 = loc(fused[#loc118, #loc115])
