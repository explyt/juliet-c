!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc204 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":315:10)
#loc205 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":315:14)
#loc206 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":315:20)
#loc207 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":315:32)
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc512 = loc(fused[#loc204, #loc205])
#loc513 = loc(fused[#loc206, #loc207])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__hostname_based_logic_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc434)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc435)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc436)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc437)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc438)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc439)
  cir.func private @getnameinfo(!cir.ptr<!ty_sockaddr>, !u32i, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>, !u32i, !s32i) -> !s32i loc(#loc440)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc441)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"admin.google.com\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc17)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc442)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc21)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc443)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc24)
  cir.func private @close(!s32i) -> !s32i loc(#loc444)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc27)
  cir.func no_proto @CWE510_Trapdoor__hostname_based_logic_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc32)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc448)
            %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc449)
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc450)
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc451)
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc452)
            %6 = cir.alloca !cir.array<!s8i x 1025>, !cir.ptr<!cir.array<!s8i x 1025>>, ["hostname"] {alignment = 16 : i64} loc(#loc453)
            %7 = cir.alloca !cir.array<!s8i x 32>, !cir.ptr<!cir.array<!s8i x 32>>, ["servInfo"] {alignment = 16 : i64} loc(#loc454)
            %8 = cir.const #cir.int<16> : !u64i loc(#loc455)
            %9 = cir.cast(integral, %8 : !u64i), !s32i loc(#loc455)
            cir.store %9, %3 : !s32i, !cir.ptr<!s32i> loc(#loc450)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc42)
            %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc42)
            cir.store %11, %4 : !s32i, !cir.ptr<!s32i> loc(#loc451)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc44)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc44)
            cir.store %13, %5 : !s32i, !cir.ptr<!s32i> loc(#loc452)
            cir.scope {
              cir.do {
                %14 = cir.const #cir.int<2> : !s32i loc(#loc52)
                %15 = cir.const #cir.int<1> : !s32i loc(#loc53)
                %16 = cir.const #cir.int<6> : !s32i loc(#loc54)
                %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc55)
                cir.store %17, %4 : !s32i, !cir.ptr<!s32i> loc(#loc457)
                cir.scope {
                  %36 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc60)
                  %37 = cir.const #cir.int<1> : !s32i loc(#loc61)
                  %38 = cir.unary(minus, %37) : !s32i, !s32i loc(#loc61)
                  %39 = cir.cmp(eq, %36, %38) : !s32i, !cir.bool loc(#loc459)
                  cir.if %39 {
                    cir.break loc(#loc63)
                  } loc(#loc460)
                } loc(#loc458)
                %18 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc461)
                %19 = cir.const #cir.int<0> : !s32i loc(#loc66)
                %20 = cir.const #cir.int<16> : !u64i loc(#loc462)
                cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc463)
                %21 = cir.const #cir.int<2> : !s32i loc(#loc71)
                %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc71)
                %23 = cir.get_member %1[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
                cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc464)
                %24 = cir.const #cir.int<0> : !s32i loc(#loc74)
                %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc74)
                %26 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
                %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
                cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc465)
                %28 = cir.const #cir.int<20000> : !s32i loc(#loc78)
                %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc78)
                %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc79)
                %31 = cir.get_member %1[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
                cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc466)
                cir.scope {
                  %36 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                  %37 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc468)
                  %38 = cir.const #cir.int<16> : !u64i loc(#loc469)
                  %39 = cir.cast(integral, %38 : !u64i), !u32i loc(#loc469)
                  %40 = cir.call @bind(%36, %37, %39) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc90)
                  %41 = cir.const #cir.int<1> : !s32i loc(#loc91)
                  %42 = cir.unary(minus, %41) : !s32i, !s32i loc(#loc91)
                  %43 = cir.cmp(eq, %40, %42) : !s32i, !cir.bool loc(#loc470)
                  cir.if %43 {
                    cir.break loc(#loc93)
                  } loc(#loc471)
                } loc(#loc467)
                cir.scope {
                  %36 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                  %37 = cir.const #cir.int<5> : !s32i loc(#loc97)
                  %38 = cir.call @listen(%36, %37) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc98)
                  %39 = cir.const #cir.int<1> : !s32i loc(#loc99)
                  %40 = cir.unary(minus, %39) : !s32i, !s32i loc(#loc99)
                  %41 = cir.cmp(eq, %38, %40) : !s32i, !cir.bool loc(#loc473)
                  cir.if %41 {
                    cir.break loc(#loc101)
                  } loc(#loc474)
                } loc(#loc472)
                %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                %33 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc103)
                %34 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc104)
                %35 = cir.call @accept(%32, %33, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc105)
                cir.store %35, %5 : !s32i, !cir.ptr<!s32i> loc(#loc475)
                cir.scope {
                  %36 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                  %37 = cir.const #cir.int<1> : !s32i loc(#loc111)
                  %38 = cir.unary(minus, %37) : !s32i, !s32i loc(#loc111)
                  %39 = cir.cmp(eq, %36, %38) : !s32i, !cir.bool loc(#loc477)
                  cir.if %39 {
                    cir.break loc(#loc113)
                  } loc(#loc478)
                } loc(#loc476)
                cir.scope {
                  %36 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                  %37 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc480)
                  %38 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc481)
                  %39 = cir.call @getsockname(%36, %37, %38) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc121)
                  %40 = cir.const #cir.int<1> : !s32i loc(#loc122)
                  %41 = cir.unary(minus, %40) : !s32i, !s32i loc(#loc123)
                  %42 = cir.cmp(eq, %39, %41) : !s32i, !cir.bool loc(#loc482)
                  cir.if %42 {
                    cir.break loc(#loc125)
                  } loc(#loc483)
                } loc(#loc479)
                cir.scope {
                  %36 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc485)
                  %37 = cir.const #cir.int<16> : !u64i loc(#loc486)
                  %38 = cir.cast(integral, %37 : !u64i), !u32i loc(#loc486)
                  %39 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 1025>>), !cir.ptr<!s8i> loc(#loc132)
                  %40 = cir.const #cir.int<1025> : !s32i loc(#loc133)
                  %41 = cir.cast(integral, %40 : !s32i), !u32i loc(#loc133)
                  %42 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc134)
                  %43 = cir.const #cir.int<32> : !s32i loc(#loc135)
                  %44 = cir.cast(integral, %43 : !s32i), !u32i loc(#loc135)
                  %45 = cir.const #cir.int<2> : !s32i loc(#loc136)
                  %46 = cir.call @getnameinfo(%36, %38, %39, %41, %42, %44, %45) : (!cir.ptr<!ty_sockaddr>, !u32i, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>, !u32i, !s32i) -> !s32i loc(#loc137)
                  %47 = cir.const #cir.int<0> : !s32i loc(#loc138)
                  %48 = cir.cmp(ne, %46, %47) : !s32i, !cir.bool loc(#loc487)
                  cir.if %48 {
                    cir.break loc(#loc140)
                  } loc(#loc488)
                } loc(#loc484)
                cir.scope {
                  %36 = cir.get_global @strcmp : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc143)
                  %37 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc17)
                  %38 = cir.cast(array_to_ptrdecay, %37 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc17)
                  %39 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 1025>>), !cir.ptr<!s8i> loc(#loc144)
                  %40 = cir.call @strcmp(%38, %39) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc143)
                  %41 = cir.const #cir.int<0> : !s32i loc(#loc145)
                  %42 = cir.cmp(eq, %40, %41) : !s32i, !cir.bool loc(#loc490)
                  cir.if %42 {
                    cir.scope {
                      %43 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc151)
                      %44 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc20)
                      %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc20)
                      %46 = cir.cast(bitcast, %45 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
                      %47 = cir.const #cir.int<15> : !u64i loc(#loc493)
                      %48 = cir.const #cir.int<0> : !s32i loc(#loc154)
                      %49 = cir.call @send(%43, %46, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc155)
                      %50 = cir.const #cir.int<1> : !s32i loc(#loc156)
                      %51 = cir.unary(minus, %50) : !s32i, !s32i loc(#loc156)
                      %52 = cir.cast(integral, %51 : !s32i), !s64i loc(#loc156)
                      %53 = cir.cmp(eq, %49, %52) : !s64i, !cir.bool loc(#loc494)
                      cir.if %53 {
                        cir.break loc(#loc158)
                      } loc(#loc495)
                    } loc(#loc492)
                  } else {
                    cir.scope {
                      %43 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc161)
                      %44 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc21)
                      %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc21)
                      %46 = cir.cast(bitcast, %45 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc21)
                      %47 = cir.const #cir.int<8> : !u64i loc(#loc497)
                      %48 = cir.const #cir.int<0> : !s32i loc(#loc164)
                      %49 = cir.call @send(%43, %46, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc165)
                      %50 = cir.const #cir.int<1> : !s32i loc(#loc166)
                      %51 = cir.unary(minus, %50) : !s32i, !s32i loc(#loc166)
                      %52 = cir.cast(integral, %51 : !s32i), !s64i loc(#loc166)
                      %53 = cir.cmp(eq, %49, %52) : !s64i, !cir.bool loc(#loc498)
                      cir.if %53 {
                        %54 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc24)
                        %55 = cir.cast(array_to_ptrdecay, %54 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc24)
                        cir.call @printLine(%55) : (!cir.ptr<!s8i>) -> () loc(#loc168)
                      } loc(#loc499)
                    } loc(#loc496)
                  } loc(#loc491)
                } loc(#loc489)
                cir.yield loc(#loc51)
              } while {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc169)
                %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc169)
                cir.condition(%15) loc(#loc169)
              } loc(#loc456)
            } loc(#loc456)
            cir.scope {
              %14 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc172)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc173)
              %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc173)
              %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc501)
              cir.if %17 {
                %18 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc175)
                %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc176)
              } loc(#loc502)
            } loc(#loc500)
            cir.scope {
              %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc179)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc180)
              %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc180)
              %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc504)
              cir.if %17 {
                %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc182)
                %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc183)
              } loc(#loc505)
            } loc(#loc503)
          } loc(#loc447)
          cir.break loc(#loc184)
        } loc(#loc33)
        cir.case(default, []) {
          %1 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc27)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc27)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc186)
          cir.break loc(#loc187)
        } loc(#loc185)
        cir.yield loc(#loc30)
      } loc(#loc30)
    } loc(#loc446)
    cir.return loc(#loc29)
  } loc(#loc445)
  cir.func no_proto @CWE510_Trapdoor__hostname_based_logic_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc507)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc190)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc508)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc192)
    cir.return loc(#loc189)
  } loc(#loc506)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc509)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc510)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc198)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc200)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc201)
  cir.func @main(%arg0: !s32i loc(fused[#loc204, #loc205]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc206, #loc207])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc512)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc513)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc203)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc208)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc208)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc209)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc210)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc210)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc211)
    %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc198)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc198)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc212)
    %8 = cir.get_global @CWE510_Trapdoor__hostname_based_logic_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc514)
    cir.call @CWE510_Trapdoor__hostname_based_logic_15_good() : () -> () loc(#loc213)
    %9 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc199)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc199)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc215)
    %11 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc200)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc200)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc216)
    %13 = cir.get_global @CWE510_Trapdoor__hostname_based_logic_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc515)
    cir.call @CWE510_Trapdoor__hostname_based_logic_15_bad() : () -> () loc(#loc217)
    %14 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc201)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc201)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc219)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc220)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc516)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc516)
    cir.return %17 : !s32i loc(#loc516)
  } loc(#loc511)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc226)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc228)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc228)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc229)
          cir.break loc(#loc230)
        } loc(#loc227)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc520)
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc521)
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc522)
            %4 = cir.const #cir.int<1> : !s32i loc(#loc237)
            %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc237)
            cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc521)
            %6 = cir.const #cir.int<1> : !s32i loc(#loc239)
            %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc239)
            cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc522)
            cir.scope {
              cir.do {
                %8 = cir.const #cir.int<2> : !s32i loc(#loc242)
                %9 = cir.const #cir.int<1> : !s32i loc(#loc243)
                %10 = cir.const #cir.int<6> : !s32i loc(#loc244)
                %11 = cir.call @socket(%8, %9, %10) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc245)
                cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc524)
                cir.scope {
                  %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc250)
                  %31 = cir.const #cir.int<1> : !s32i loc(#loc251)
                  %32 = cir.unary(minus, %31) : !s32i, !s32i loc(#loc251)
                  %33 = cir.cmp(eq, %30, %32) : !s32i, !cir.bool loc(#loc526)
                  cir.if %33 {
                    cir.break loc(#loc253)
                  } loc(#loc527)
                } loc(#loc525)
                %12 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc528)
                %13 = cir.const #cir.int<0> : !s32i loc(#loc256)
                %14 = cir.const #cir.int<16> : !u64i loc(#loc529)
                cir.libc.memset %14 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc530)
                %15 = cir.const #cir.int<2> : !s32i loc(#loc261)
                %16 = cir.cast(integral, %15 : !s32i), !u16i loc(#loc261)
                %17 = cir.get_member %1[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
                cir.store %16, %17 : !u16i, !cir.ptr<!u16i> loc(#loc531)
                %18 = cir.const #cir.int<0> : !s32i loc(#loc263)
                %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc263)
                %20 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
                %21 = cir.get_member %20[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
                cir.store %19, %21 : !u32i, !cir.ptr<!u32i> loc(#loc532)
                %22 = cir.const #cir.int<20000> : !s32i loc(#loc265)
                %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc265)
                %24 = cir.call @htons(%23) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc266)
                %25 = cir.get_member %1[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
                cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc533)
                cir.scope {
                  %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc271)
                  %31 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc535)
                  %32 = cir.const #cir.int<16> : !u64i loc(#loc536)
                  %33 = cir.cast(integral, %32 : !u64i), !u32i loc(#loc536)
                  %34 = cir.call @bind(%30, %31, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc276)
                  %35 = cir.const #cir.int<1> : !s32i loc(#loc277)
                  %36 = cir.unary(minus, %35) : !s32i, !s32i loc(#loc277)
                  %37 = cir.cmp(eq, %34, %36) : !s32i, !cir.bool loc(#loc537)
                  cir.if %37 {
                    cir.break loc(#loc279)
                  } loc(#loc538)
                } loc(#loc534)
                cir.scope {
                  %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc282)
                  %31 = cir.const #cir.int<5> : !s32i loc(#loc283)
                  %32 = cir.call @listen(%30, %31) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc284)
                  %33 = cir.const #cir.int<1> : !s32i loc(#loc285)
                  %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc285)
                  %35 = cir.cmp(eq, %32, %34) : !s32i, !cir.bool loc(#loc540)
                  cir.if %35 {
                    cir.break loc(#loc287)
                  } loc(#loc541)
                } loc(#loc539)
                %26 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc288)
                %27 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc289)
                %28 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc290)
                %29 = cir.call @accept(%26, %27, %28) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc291)
                cir.store %29, %3 : !s32i, !cir.ptr<!s32i> loc(#loc542)
                cir.scope {
                  %30 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc296)
                  %31 = cir.const #cir.int<1> : !s32i loc(#loc297)
                  %32 = cir.unary(minus, %31) : !s32i, !s32i loc(#loc297)
                  %33 = cir.cmp(eq, %30, %32) : !s32i, !cir.bool loc(#loc544)
                  cir.if %33 {
                    cir.break loc(#loc299)
                  } loc(#loc545)
                } loc(#loc543)
                cir.scope {
                  %30 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc302)
                  %31 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc303)
                  %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc303)
                  %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc303)
                  %34 = cir.const #cir.int<8> : !u64i loc(#loc547)
                  %35 = cir.const #cir.int<0> : !s32i loc(#loc306)
                  %36 = cir.call @send(%30, %33, %34, %35) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc307)
                  %37 = cir.const #cir.int<1> : !s32i loc(#loc308)
                  %38 = cir.unary(minus, %37) : !s32i, !s32i loc(#loc308)
                  %39 = cir.cast(integral, %38 : !s32i), !s64i loc(#loc308)
                  %40 = cir.cmp(eq, %36, %39) : !s64i, !cir.bool loc(#loc548)
                  cir.if %40 {
                    %41 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc310)
                    %42 = cir.cast(array_to_ptrdecay, %41 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc310)
                    cir.call @printLine(%42) : (!cir.ptr<!s8i>) -> () loc(#loc311)
                  } loc(#loc549)
                } loc(#loc546)
                cir.yield loc(#loc241)
              } while {
                %8 = cir.const #cir.int<0> : !s32i loc(#loc312)
                %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc312)
                cir.condition(%9) loc(#loc312)
              } loc(#loc523)
            } loc(#loc523)
            cir.scope {
              %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc315)
              %9 = cir.const #cir.int<1> : !s32i loc(#loc316)
              %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc316)
              %11 = cir.cmp(ne, %8, %10) : !s32i, !cir.bool loc(#loc551)
              cir.if %11 {
                %12 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc318)
                %13 = cir.call @close(%12) : (!s32i) -> !s32i loc(#loc319)
              } loc(#loc552)
            } loc(#loc550)
            cir.scope {
              %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc322)
              %9 = cir.const #cir.int<1> : !s32i loc(#loc323)
              %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc323)
              %11 = cir.cmp(ne, %8, %10) : !s32i, !cir.bool loc(#loc554)
              cir.if %11 {
                %12 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc325)
                %13 = cir.call @close(%12) : (!s32i) -> !s32i loc(#loc326)
              } loc(#loc555)
            } loc(#loc553)
          } loc(#loc519)
          cir.break loc(#loc327)
        } loc(#loc231)
        cir.yield loc(#loc224)
      } loc(#loc224)
    } loc(#loc518)
    cir.return loc(#loc223)
  } loc(#loc517)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc332)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc559)
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc560)
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc561)
            %4 = cir.const #cir.int<1> : !s32i loc(#loc339)
            %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc339)
            cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc560)
            %6 = cir.const #cir.int<1> : !s32i loc(#loc341)
            %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc341)
            cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc561)
            cir.scope {
              cir.do {
                %8 = cir.const #cir.int<2> : !s32i loc(#loc344)
                %9 = cir.const #cir.int<1> : !s32i loc(#loc345)
                %10 = cir.const #cir.int<6> : !s32i loc(#loc346)
                %11 = cir.call @socket(%8, %9, %10) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc347)
                cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc563)
                cir.scope {
                  %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc352)
                  %31 = cir.const #cir.int<1> : !s32i loc(#loc353)
                  %32 = cir.unary(minus, %31) : !s32i, !s32i loc(#loc353)
                  %33 = cir.cmp(eq, %30, %32) : !s32i, !cir.bool loc(#loc565)
                  cir.if %33 {
                    cir.break loc(#loc355)
                  } loc(#loc566)
                } loc(#loc564)
                %12 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc567)
                %13 = cir.const #cir.int<0> : !s32i loc(#loc358)
                %14 = cir.const #cir.int<16> : !u64i loc(#loc568)
                cir.libc.memset %14 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc569)
                %15 = cir.const #cir.int<2> : !s32i loc(#loc363)
                %16 = cir.cast(integral, %15 : !s32i), !u16i loc(#loc363)
                %17 = cir.get_member %1[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
                cir.store %16, %17 : !u16i, !cir.ptr<!u16i> loc(#loc570)
                %18 = cir.const #cir.int<0> : !s32i loc(#loc365)
                %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc365)
                %20 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
                %21 = cir.get_member %20[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
                cir.store %19, %21 : !u32i, !cir.ptr<!u32i> loc(#loc571)
                %22 = cir.const #cir.int<20000> : !s32i loc(#loc367)
                %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc367)
                %24 = cir.call @htons(%23) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc368)
                %25 = cir.get_member %1[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
                cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc572)
                cir.scope {
                  %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc373)
                  %31 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc574)
                  %32 = cir.const #cir.int<16> : !u64i loc(#loc575)
                  %33 = cir.cast(integral, %32 : !u64i), !u32i loc(#loc575)
                  %34 = cir.call @bind(%30, %31, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc378)
                  %35 = cir.const #cir.int<1> : !s32i loc(#loc379)
                  %36 = cir.unary(minus, %35) : !s32i, !s32i loc(#loc379)
                  %37 = cir.cmp(eq, %34, %36) : !s32i, !cir.bool loc(#loc576)
                  cir.if %37 {
                    cir.break loc(#loc381)
                  } loc(#loc577)
                } loc(#loc573)
                cir.scope {
                  %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc384)
                  %31 = cir.const #cir.int<5> : !s32i loc(#loc385)
                  %32 = cir.call @listen(%30, %31) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc386)
                  %33 = cir.const #cir.int<1> : !s32i loc(#loc387)
                  %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc387)
                  %35 = cir.cmp(eq, %32, %34) : !s32i, !cir.bool loc(#loc579)
                  cir.if %35 {
                    cir.break loc(#loc389)
                  } loc(#loc580)
                } loc(#loc578)
                %26 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc390)
                %27 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc391)
                %28 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc392)
                %29 = cir.call @accept(%26, %27, %28) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc393)
                cir.store %29, %3 : !s32i, !cir.ptr<!s32i> loc(#loc581)
                cir.scope {
                  %30 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc398)
                  %31 = cir.const #cir.int<1> : !s32i loc(#loc399)
                  %32 = cir.unary(minus, %31) : !s32i, !s32i loc(#loc399)
                  %33 = cir.cmp(eq, %30, %32) : !s32i, !cir.bool loc(#loc583)
                  cir.if %33 {
                    cir.break loc(#loc401)
                  } loc(#loc584)
                } loc(#loc582)
                cir.scope {
                  %30 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc404)
                  %31 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc405)
                  %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc405)
                  %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc405)
                  %34 = cir.const #cir.int<8> : !u64i loc(#loc586)
                  %35 = cir.const #cir.int<0> : !s32i loc(#loc408)
                  %36 = cir.call @send(%30, %33, %34, %35) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc409)
                  %37 = cir.const #cir.int<1> : !s32i loc(#loc410)
                  %38 = cir.unary(minus, %37) : !s32i, !s32i loc(#loc410)
                  %39 = cir.cast(integral, %38 : !s32i), !s64i loc(#loc410)
                  %40 = cir.cmp(eq, %36, %39) : !s64i, !cir.bool loc(#loc587)
                  cir.if %40 {
                    %41 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc412)
                    %42 = cir.cast(array_to_ptrdecay, %41 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc412)
                    cir.call @printLine(%42) : (!cir.ptr<!s8i>) -> () loc(#loc413)
                  } loc(#loc588)
                } loc(#loc585)
                cir.yield loc(#loc343)
              } while {
                %8 = cir.const #cir.int<0> : !s32i loc(#loc414)
                %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc414)
                cir.condition(%9) loc(#loc414)
              } loc(#loc562)
            } loc(#loc562)
            cir.scope {
              %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc417)
              %9 = cir.const #cir.int<1> : !s32i loc(#loc418)
              %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc418)
              %11 = cir.cmp(ne, %8, %10) : !s32i, !cir.bool loc(#loc590)
              cir.if %11 {
                %12 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc420)
                %13 = cir.call @close(%12) : (!s32i) -> !s32i loc(#loc421)
              } loc(#loc591)
            } loc(#loc589)
            cir.scope {
              %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc424)
              %9 = cir.const #cir.int<1> : !s32i loc(#loc425)
              %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc425)
              %11 = cir.cmp(ne, %8, %10) : !s32i, !cir.bool loc(#loc593)
              cir.if %11 {
                %12 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc427)
                %13 = cir.call @close(%12) : (!s32i) -> !s32i loc(#loc428)
              } loc(#loc594)
            } loc(#loc592)
          } loc(#loc558)
          cir.break loc(#loc429)
        } loc(#loc333)
        cir.case(default, []) {
          %1 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc431)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc431)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc432)
          cir.break loc(#loc433)
        } loc(#loc430)
        cir.yield loc(#loc330)
      } loc(#loc330)
    } loc(#loc557)
    cir.return loc(#loc329)
  } loc(#loc556)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__hostname_based_logic_15.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":116:1)
#loc12 = loc("/usr/include/sys/socket.h":117:33)
#loc13 = loc("/usr/include/netdb.h":675:1)
#loc14 = loc("/usr/include/netdb.h":678:36)
#loc15 = loc("/usr/include/string.h":156:1)
#loc16 = loc("/usr/include/string.h":157:33)
#loc17 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":106:24)
#loc18 = loc("/usr/include/sys/socket.h":138:1)
#loc19 = loc("/usr/include/sys/socket.h":138:74)
#loc20 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":108:40)
#loc21 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":116:40)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":118:31)
#loc25 = loc("/usr/include/unistd.h":358:1)
#loc26 = loc("/usr/include/unistd.h":358:27)
#loc27 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":141:19)
#loc28 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":47:1)
#loc29 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":144:1)
#loc30 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":49:5)
#loc31 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":143:5)
#loc32 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":49:12)
#loc33 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":51:5)
#loc34 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":52:5)
#loc35 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":137:5)
#loc36 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":57:9)
#loc37 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":57:28)
#loc38 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":57:37)
#loc39 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":58:9)
#loc40 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":58:52)
#loc41 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":59:9)
#loc42 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":59:31)
#loc43 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":60:9)
#loc44 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":60:31)
#loc45 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":61:9)
#loc46 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":61:33)
#loc47 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":62:9)
#loc48 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":62:33)
#loc49 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":58:32)
#loc50 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":63:9)
#loc51 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":122:17)
#loc52 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":72:35)
#loc53 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":72:44)
#loc54 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":72:57)
#loc55 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":72:28)
#loc56 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":72:13)
#loc57 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":72:68)
#loc58 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":73:13)
#loc59 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":76:13)
#loc60 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":73:17)
#loc61 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":73:33)
#loc62 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":74:13)
#loc63 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":75:17)
#loc64 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":77:20)
#loc65 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":77:21)
#loc66 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":77:30)
#loc67 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":77:33)
#loc68 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":77:47)
#loc69 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":77:13)
#loc70 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":77:48)
#loc71 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":78:34)
#loc72 = loc("/usr/include/netinet/in.h":249:5)
#loc73 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":78:13)
#loc74 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":79:39)
#loc75 = loc("/usr/include/netinet/in.h":251:20)
#loc76 = loc("/usr/include/netinet/in.h":33:15)
#loc77 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":79:13)
#loc78 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":80:38)
#loc79 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":80:32)
#loc80 = loc("/usr/include/netinet/in.h":250:15)
#loc81 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":80:13)
#loc82 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":80:43)
#loc83 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":81:13)
#loc84 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":84:13)
#loc85 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":81:22)
#loc86 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":81:54)
#loc87 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":81:55)
#loc88 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":81:64)
#loc89 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":81:78)
#loc90 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":81:17)
#loc91 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":81:84)
#loc92 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":82:13)
#loc93 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":83:17)
#loc94 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":85:13)
#loc95 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":88:13)
#loc96 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":85:24)
#loc97 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":85:38)
#loc98 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":85:17)
#loc99 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":85:44)
#loc100 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":86:13)
#loc101 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":87:17)
#loc102 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":89:35)
#loc103 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":89:49)
#loc104 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":89:55)
#loc105 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":89:28)
#loc106 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":89:13)
#loc107 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":89:59)
#loc108 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":90:13)
#loc109 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":93:13)
#loc110 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":90:17)
#loc111 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":90:33)
#loc112 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":91:13)
#loc113 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":92:17)
#loc114 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":94:13)
#loc115 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":97:13)
#loc116 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":94:29)
#loc117 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":94:62)
#loc118 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":94:63)
#loc119 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":94:78)
#loc120 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":94:79)
#loc121 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":94:17)
#loc122 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":94:101)
#loc123 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":94:100)
#loc124 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":95:13)
#loc125 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":96:17)
#loc126 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":98:13)
#loc127 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":104:13)
#loc128 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":98:48)
#loc129 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":98:49)
#loc130 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":99:29)
#loc131 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":99:51)
#loc132 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":100:29)
#loc133 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":101:29)
#loc134 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":101:41)
#loc135 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":101:51)
#loc136 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":101:63)
#loc137 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":98:17)
#loc138 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":101:82)
#loc139 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":102:13)
#loc140 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":103:17)
#loc141 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":106:13)
#loc142 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":120:13)
#loc143 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":106:17)
#loc144 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":106:44)
#loc145 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":106:57)
#loc146 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":107:13)
#loc147 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":113:13)
#loc148 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":115:13)
#loc149 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":108:17)
#loc150 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":112:17)
#loc151 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":108:26)
#loc152 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":108:55)
#loc153 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":108:75)
#loc154 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":108:78)
#loc155 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":108:21)
#loc156 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":108:85)
#loc157 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":109:17)
#loc158 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":111:21)
#loc159 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":116:17)
#loc160 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":119:17)
#loc161 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":116:26)
#loc162 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":116:57)
#loc163 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":116:79)
#loc164 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":116:82)
#loc165 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":116:21)
#loc166 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":116:88)
#loc167 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":117:17)
#loc168 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":118:21)
#loc169 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":122:16)
#loc170 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":123:9)
#loc171 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":126:9)
#loc172 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":123:13)
#loc173 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":123:29)
#loc174 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":124:9)
#loc175 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":125:26)
#loc176 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":125:13)
#loc177 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":127:9)
#loc178 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":130:9)
#loc179 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":127:13)
#loc180 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":127:29)
#loc181 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":128:9)
#loc182 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":129:26)
#loc183 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":129:13)
#loc184 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":138:5)
#loc185 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":139:5)
#loc186 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":141:9)
#loc187 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":142:9)
#loc188 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":300:1)
#loc189 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":304:1)
#loc190 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":302:5)
#loc191 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":302:11)
#loc192 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":303:5)
#loc193 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":303:11)
#loc194 = loc("/usr/include/stdlib.h":575:1)
#loc195 = loc("/usr/include/stdlib.h":575:41)
#loc196 = loc("/usr/include/time.h":76:1)
#loc197 = loc("/usr/include/time.h":76:38)
#loc198 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":320:15)
#loc199 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":322:15)
#loc200 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":325:15)
#loc201 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":327:15)
#loc202 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":315:1)
#loc203 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":330:1)
#loc208 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":316:1)
#loc209 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":318:27)
#loc210 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":318:22)
#loc211 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":318:5)
#loc212 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":320:5)
#loc213 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":321:5)
#loc214 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":321:51)
#loc215 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":322:5)
#loc216 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":325:5)
#loc217 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":326:5)
#loc218 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":326:50)
#loc219 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":327:5)
#loc220 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":329:12)
#loc221 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":329:5)
#loc222 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":151:1)
#loc223 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":223:1)
#loc224 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":153:5)
#loc225 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":222:5)
#loc226 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":153:12)
#loc227 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":155:5)
#loc228 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":157:19)
#loc229 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":157:9)
#loc230 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":158:9)
#loc231 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":159:5)
#loc232 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":160:5)
#loc233 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":220:5)
#loc234 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":165:9)
#loc235 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":165:28)
#loc236 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":166:9)
#loc237 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":166:31)
#loc238 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":167:9)
#loc239 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":167:31)
#loc240 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":168:9)
#loc241 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":205:17)
#loc242 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":177:35)
#loc243 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":177:44)
#loc244 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":177:57)
#loc245 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":177:28)
#loc246 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":177:13)
#loc247 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":177:68)
#loc248 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":178:13)
#loc249 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":181:13)
#loc250 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":178:17)
#loc251 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":178:33)
#loc252 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":179:13)
#loc253 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":180:17)
#loc254 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":182:20)
#loc255 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":182:21)
#loc256 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":182:30)
#loc257 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":182:33)
#loc258 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":182:47)
#loc259 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":182:13)
#loc260 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":182:48)
#loc261 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":183:34)
#loc262 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":183:13)
#loc263 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":184:39)
#loc264 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":184:13)
#loc265 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":185:38)
#loc266 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":185:32)
#loc267 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":185:13)
#loc268 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":185:43)
#loc269 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":186:13)
#loc270 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":189:13)
#loc271 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":186:22)
#loc272 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":186:54)
#loc273 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":186:55)
#loc274 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":186:64)
#loc275 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":186:78)
#loc276 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":186:17)
#loc277 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":186:84)
#loc278 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":187:13)
#loc279 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":188:17)
#loc280 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":190:13)
#loc281 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":193:13)
#loc282 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":190:24)
#loc283 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":190:38)
#loc284 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":190:17)
#loc285 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":190:44)
#loc286 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":191:13)
#loc287 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":192:17)
#loc288 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":194:35)
#loc289 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":194:49)
#loc290 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":194:55)
#loc291 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":194:28)
#loc292 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":194:13)
#loc293 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":194:59)
#loc294 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":195:13)
#loc295 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":198:13)
#loc296 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":195:17)
#loc297 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":195:33)
#loc298 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":196:13)
#loc299 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":197:17)
#loc300 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":200:13)
#loc301 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":203:13)
#loc302 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":200:22)
#loc303 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":200:36)
#loc304 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":200:53)
#loc305 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":200:75)
#loc306 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":200:78)
#loc307 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":200:17)
#loc308 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":200:84)
#loc309 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":201:13)
#loc310 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":202:27)
#loc311 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":202:17)
#loc312 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":205:16)
#loc313 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":206:9)
#loc314 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":209:9)
#loc315 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":206:13)
#loc316 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":206:29)
#loc317 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":207:9)
#loc318 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":208:26)
#loc319 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":208:13)
#loc320 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":210:9)
#loc321 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":213:9)
#loc322 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":210:13)
#loc323 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":210:29)
#loc324 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":211:9)
#loc325 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":212:26)
#loc326 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":212:13)
#loc327 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":221:5)
#loc328 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":226:1)
#loc329 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":298:1)
#loc330 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":228:5)
#loc331 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":297:5)
#loc332 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":228:12)
#loc333 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":230:5)
#loc334 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":231:5)
#loc335 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":291:5)
#loc336 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":236:9)
#loc337 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":236:28)
#loc338 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":237:9)
#loc339 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":237:31)
#loc340 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":238:9)
#loc341 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":238:31)
#loc342 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":239:9)
#loc343 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":276:17)
#loc344 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":248:35)
#loc345 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":248:44)
#loc346 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":248:57)
#loc347 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":248:28)
#loc348 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":248:13)
#loc349 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":248:68)
#loc350 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":249:13)
#loc351 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":252:13)
#loc352 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":249:17)
#loc353 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":249:33)
#loc354 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":250:13)
#loc355 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":251:17)
#loc356 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":253:20)
#loc357 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":253:21)
#loc358 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":253:30)
#loc359 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":253:33)
#loc360 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":253:47)
#loc361 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":253:13)
#loc362 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":253:48)
#loc363 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":254:34)
#loc364 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":254:13)
#loc365 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":255:39)
#loc366 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":255:13)
#loc367 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":256:38)
#loc368 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":256:32)
#loc369 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":256:13)
#loc370 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":256:43)
#loc371 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":257:13)
#loc372 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":260:13)
#loc373 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":257:22)
#loc374 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":257:54)
#loc375 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":257:55)
#loc376 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":257:64)
#loc377 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":257:78)
#loc378 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":257:17)
#loc379 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":257:84)
#loc380 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":258:13)
#loc381 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":259:17)
#loc382 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":261:13)
#loc383 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":264:13)
#loc384 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":261:24)
#loc385 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":261:38)
#loc386 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":261:17)
#loc387 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":261:44)
#loc388 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":262:13)
#loc389 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":263:17)
#loc390 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":265:35)
#loc391 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":265:49)
#loc392 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":265:55)
#loc393 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":265:28)
#loc394 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":265:13)
#loc395 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":265:59)
#loc396 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":266:13)
#loc397 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":269:13)
#loc398 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":266:17)
#loc399 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":266:33)
#loc400 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":267:13)
#loc401 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":268:17)
#loc402 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":271:13)
#loc403 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":274:13)
#loc404 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":271:22)
#loc405 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":271:36)
#loc406 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":271:53)
#loc407 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":271:75)
#loc408 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":271:78)
#loc409 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":271:17)
#loc410 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":271:84)
#loc411 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":272:13)
#loc412 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":273:27)
#loc413 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":273:17)
#loc414 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":276:16)
#loc415 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":277:9)
#loc416 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":280:9)
#loc417 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":277:13)
#loc418 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":277:29)
#loc419 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":278:9)
#loc420 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":279:26)
#loc421 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":279:13)
#loc422 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":281:9)
#loc423 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":284:9)
#loc424 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":281:13)
#loc425 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":281:29)
#loc426 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":282:9)
#loc427 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":283:26)
#loc428 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":283:13)
#loc429 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":292:5)
#loc430 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":293:5)
#loc431 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":295:19)
#loc432 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":295:9)
#loc433 = loc("CWE510_Trapdoor__hostname_based_logic_15.c":296:9)
#loc434 = loc(fused[#loc1, #loc2])
#loc435 = loc(fused[#loc3, #loc4])
#loc436 = loc(fused[#loc5, #loc6])
#loc437 = loc(fused[#loc7, #loc8])
#loc438 = loc(fused[#loc9, #loc10])
#loc439 = loc(fused[#loc11, #loc12])
#loc440 = loc(fused[#loc13, #loc14])
#loc441 = loc(fused[#loc15, #loc16])
#loc442 = loc(fused[#loc18, #loc19])
#loc443 = loc(fused[#loc22, #loc23])
#loc444 = loc(fused[#loc25, #loc26])
#loc445 = loc(fused[#loc28, #loc29])
#loc446 = loc(fused[#loc30, #loc31])
#loc447 = loc(fused[#loc34, #loc35])
#loc448 = loc(fused[#loc36, #loc37])
#loc449 = loc(fused[#loc36, #loc38])
#loc450 = loc(fused[#loc39, #loc40])
#loc451 = loc(fused[#loc41, #loc42])
#loc452 = loc(fused[#loc43, #loc44])
#loc453 = loc(fused[#loc45, #loc46])
#loc454 = loc(fused[#loc47, #loc48])
#loc455 = loc(fused[#loc49, #loc40])
#loc456 = loc(fused[#loc50, #loc51])
#loc457 = loc(fused[#loc56, #loc57])
#loc458 = loc(fused[#loc58, #loc59])
#loc459 = loc(fused[#loc60, #loc61])
#loc460 = loc(fused[#loc62, #loc59])
#loc461 = loc(fused[#loc64, #loc65])
#loc462 = loc(fused[#loc67, #loc68])
#loc463 = loc(fused[#loc69, #loc70])
#loc464 = loc(fused[#loc73, #loc71])
#loc465 = loc(fused[#loc77, #loc74])
#loc466 = loc(fused[#loc81, #loc82])
#loc467 = loc(fused[#loc83, #loc84])
#loc468 = loc(fused[#loc86, #loc87])
#loc469 = loc(fused[#loc88, #loc89])
#loc470 = loc(fused[#loc90, #loc91])
#loc471 = loc(fused[#loc92, #loc84])
#loc472 = loc(fused[#loc94, #loc95])
#loc473 = loc(fused[#loc98, #loc99])
#loc474 = loc(fused[#loc100, #loc95])
#loc475 = loc(fused[#loc106, #loc107])
#loc476 = loc(fused[#loc108, #loc109])
#loc477 = loc(fused[#loc110, #loc111])
#loc478 = loc(fused[#loc112, #loc109])
#loc479 = loc(fused[#loc114, #loc115])
#loc480 = loc(fused[#loc117, #loc118])
#loc481 = loc(fused[#loc119, #loc120])
#loc482 = loc(fused[#loc121, #loc122])
#loc483 = loc(fused[#loc124, #loc115])
#loc484 = loc(fused[#loc126, #loc127])
#loc485 = loc(fused[#loc128, #loc129])
#loc486 = loc(fused[#loc130, #loc131])
#loc487 = loc(fused[#loc137, #loc138])
#loc488 = loc(fused[#loc139, #loc127])
#loc489 = loc(fused[#loc141, #loc142])
#loc490 = loc(fused[#loc143, #loc145])
#loc491 = loc(fused[#loc146, #loc147, #loc148, #loc142])
#loc492 = loc(fused[#loc149, #loc150])
#loc493 = loc(fused[#loc152, #loc153])
#loc494 = loc(fused[#loc155, #loc156])
#loc495 = loc(fused[#loc157, #loc150])
#loc496 = loc(fused[#loc159, #loc160])
#loc497 = loc(fused[#loc162, #loc163])
#loc498 = loc(fused[#loc165, #loc166])
#loc499 = loc(fused[#loc167, #loc160])
#loc500 = loc(fused[#loc170, #loc171])
#loc501 = loc(fused[#loc172, #loc173])
#loc502 = loc(fused[#loc174, #loc171])
#loc503 = loc(fused[#loc177, #loc178])
#loc504 = loc(fused[#loc179, #loc180])
#loc505 = loc(fused[#loc181, #loc178])
#loc506 = loc(fused[#loc188, #loc189])
#loc507 = loc(fused[#loc190, #loc191])
#loc508 = loc(fused[#loc192, #loc193])
#loc509 = loc(fused[#loc194, #loc195])
#loc510 = loc(fused[#loc196, #loc197])
#loc511 = loc(fused[#loc202, #loc203])
#loc514 = loc(fused[#loc213, #loc214])
#loc515 = loc(fused[#loc217, #loc218])
#loc516 = loc(fused[#loc221, #loc220])
#loc517 = loc(fused[#loc222, #loc223])
#loc518 = loc(fused[#loc224, #loc225])
#loc519 = loc(fused[#loc232, #loc233])
#loc520 = loc(fused[#loc234, #loc235])
#loc521 = loc(fused[#loc236, #loc237])
#loc522 = loc(fused[#loc238, #loc239])
#loc523 = loc(fused[#loc240, #loc241])
#loc524 = loc(fused[#loc246, #loc247])
#loc525 = loc(fused[#loc248, #loc249])
#loc526 = loc(fused[#loc250, #loc251])
#loc527 = loc(fused[#loc252, #loc249])
#loc528 = loc(fused[#loc254, #loc255])
#loc529 = loc(fused[#loc257, #loc258])
#loc530 = loc(fused[#loc259, #loc260])
#loc531 = loc(fused[#loc262, #loc261])
#loc532 = loc(fused[#loc264, #loc263])
#loc533 = loc(fused[#loc267, #loc268])
#loc534 = loc(fused[#loc269, #loc270])
#loc535 = loc(fused[#loc272, #loc273])
#loc536 = loc(fused[#loc274, #loc275])
#loc537 = loc(fused[#loc276, #loc277])
#loc538 = loc(fused[#loc278, #loc270])
#loc539 = loc(fused[#loc280, #loc281])
#loc540 = loc(fused[#loc284, #loc285])
#loc541 = loc(fused[#loc286, #loc281])
#loc542 = loc(fused[#loc292, #loc293])
#loc543 = loc(fused[#loc294, #loc295])
#loc544 = loc(fused[#loc296, #loc297])
#loc545 = loc(fused[#loc298, #loc295])
#loc546 = loc(fused[#loc300, #loc301])
#loc547 = loc(fused[#loc304, #loc305])
#loc548 = loc(fused[#loc307, #loc308])
#loc549 = loc(fused[#loc309, #loc301])
#loc550 = loc(fused[#loc313, #loc314])
#loc551 = loc(fused[#loc315, #loc316])
#loc552 = loc(fused[#loc317, #loc314])
#loc553 = loc(fused[#loc320, #loc321])
#loc554 = loc(fused[#loc322, #loc323])
#loc555 = loc(fused[#loc324, #loc321])
#loc556 = loc(fused[#loc328, #loc329])
#loc557 = loc(fused[#loc330, #loc331])
#loc558 = loc(fused[#loc334, #loc335])
#loc559 = loc(fused[#loc336, #loc337])
#loc560 = loc(fused[#loc338, #loc339])
#loc561 = loc(fused[#loc340, #loc341])
#loc562 = loc(fused[#loc342, #loc343])
#loc563 = loc(fused[#loc348, #loc349])
#loc564 = loc(fused[#loc350, #loc351])
#loc565 = loc(fused[#loc352, #loc353])
#loc566 = loc(fused[#loc354, #loc351])
#loc567 = loc(fused[#loc356, #loc357])
#loc568 = loc(fused[#loc359, #loc360])
#loc569 = loc(fused[#loc361, #loc362])
#loc570 = loc(fused[#loc364, #loc363])
#loc571 = loc(fused[#loc366, #loc365])
#loc572 = loc(fused[#loc369, #loc370])
#loc573 = loc(fused[#loc371, #loc372])
#loc574 = loc(fused[#loc374, #loc375])
#loc575 = loc(fused[#loc376, #loc377])
#loc576 = loc(fused[#loc378, #loc379])
#loc577 = loc(fused[#loc380, #loc372])
#loc578 = loc(fused[#loc382, #loc383])
#loc579 = loc(fused[#loc386, #loc387])
#loc580 = loc(fused[#loc388, #loc383])
#loc581 = loc(fused[#loc394, #loc395])
#loc582 = loc(fused[#loc396, #loc397])
#loc583 = loc(fused[#loc398, #loc399])
#loc584 = loc(fused[#loc400, #loc397])
#loc585 = loc(fused[#loc402, #loc403])
#loc586 = loc(fused[#loc406, #loc407])
#loc587 = loc(fused[#loc409, #loc410])
#loc588 = loc(fused[#loc411, #loc403])
#loc589 = loc(fused[#loc415, #loc416])
#loc590 = loc(fused[#loc417, #loc418])
#loc591 = loc(fused[#loc419, #loc416])
#loc592 = loc(fused[#loc422, #loc423])
#loc593 = loc(fused[#loc424, #loc425])
#loc594 = loc(fused[#loc426, #loc423])
