!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc239)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc240)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc241)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc242)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc243)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printIntLine(!s32i) loc(#loc244)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_multiply_09_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc246)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc247)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc248)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc22)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc249)
    cir.br ^bb1 loc(#loc250)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc239)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc26)
    cir.brcond %6 ^bb2, ^bb10 loc(#loc251)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc252)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc246)
    cir.store %7, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc246)
    cir.br ^bb4 loc(#loc253)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc32)
    %9 = cir.const #cir.int<3> : !s32i loc(#loc33)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc33)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc33)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc33)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc33)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc33)
    %15 = cir.binop(add, %12, %14) : !u64i loc(#loc33)
    %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc33)
    %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc241)
    %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc34)
    %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc35)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
    %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc254)
    cir.brcond %22 ^bb5, ^bb6 loc(#loc255)
  ^bb5:  // pred: ^bb4
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc40)
    %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc41)
    cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc256)
    cir.br ^bb7 loc(#loc38)
  ^bb6:  // pred: ^bb4
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc44)
    cir.br ^bb7 loc(#loc31)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc31)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc29)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc25)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc25)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc257)
  ^bb12:  // pred: ^bb11
    %27 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc239)
    %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc47)
    cir.brcond %29 ^bb13, ^bb18 loc(#loc258)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc259)
  ^bb14:  // pred: ^bb13
    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc52)
    %32 = cir.cmp(gt, %30, %31) : !s32i, !cir.bool loc(#loc260)
    cir.brcond %32 ^bb15, ^bb16 loc(#loc261)
  ^bb15:  // pred: ^bb14
    %33 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    %34 = cir.const #cir.int<2> : !s32i loc(#loc19)
    %35 = cir.binop(mul, %33, %34) nsw : !s32i loc(#loc54)
    cir.store %35, %1 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    %36 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    cir.call @printIntLine(%36) : (!s32i) -> () loc(#loc56)
    cir.br ^bb16 loc(#loc50)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc50)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc46)
  ^bb18:  // 2 preds: ^bb12, ^bb17
    cir.br ^bb19 loc(#loc46)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc15)
  } loc(#loc245)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_multiply_09_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc263)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc264)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc265)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc266)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    cir.return loc(#loc58)
  } loc(#loc262)
  cir.global "private" constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc267)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc70)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc269)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc270)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc271)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc79)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc272)
    cir.br ^bb1 loc(#loc273)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc239)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc83)
    cir.brcond %6 ^bb2, ^bb10 loc(#loc274)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc275)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc269)
    cir.store %7, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc269)
    cir.br ^bb4 loc(#loc276)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc89)
    %9 = cir.const #cir.int<3> : !s32i loc(#loc90)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc90)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc90)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc90)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc90)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc90)
    %15 = cir.binop(add, %12, %14) : !u64i loc(#loc90)
    %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc90)
    %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc241)
    %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc91)
    %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc92)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc93)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc93)
    %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc277)
    cir.brcond %22 ^bb5, ^bb6 loc(#loc278)
  ^bb5:  // pred: ^bb4
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc97)
    %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc98)
    cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc279)
    cir.br ^bb7 loc(#loc95)
  ^bb6:  // pred: ^bb4
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc101)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    cir.br ^bb7 loc(#loc88)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc88)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc86)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc82)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc82)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc280)
  ^bb12:  // pred: ^bb11
    %27 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc267)
    %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc105)
    cir.brcond %29 ^bb13, ^bb14 loc(#loc281)
  ^bb13:  // pred: ^bb12
    %30 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc69)
    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc109)
    cir.br ^bb24 loc(#loc107)
  ^bb14:  // pred: ^bb12
    cir.br ^bb15 loc(#loc282)
  ^bb15:  // pred: ^bb14
    %32 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    %33 = cir.const #cir.int<0> : !s32i loc(#loc113)
    %34 = cir.cmp(gt, %32, %33) : !s32i, !cir.bool loc(#loc283)
    cir.brcond %34 ^bb16, ^bb22 loc(#loc284)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc285)
  ^bb17:  // pred: ^bb16
    %35 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    %36 = cir.const #cir.int<2147483647> : !s32i loc(#loc118)
    %37 = cir.const #cir.int<2> : !s32i loc(#loc119)
    %38 = cir.binop(div, %36, %37) : !s32i loc(#loc286)
    %39 = cir.cmp(lt, %35, %38) : !s32i, !cir.bool loc(#loc287)
    cir.brcond %39 ^bb18, ^bb19 loc(#loc288)
  ^bb18:  // pred: ^bb17
    %40 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc124)
    %41 = cir.const #cir.int<2> : !s32i loc(#loc76)
    %42 = cir.binop(mul, %40, %41) nsw : !s32i loc(#loc124)
    cir.store %42, %1 : !s32i, !cir.ptr<!s32i> loc(#loc270)
    %43 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    cir.call @printIntLine(%43) : (!s32i) -> () loc(#loc126)
    cir.br ^bb20 loc(#loc122)
  ^bb19:  // pred: ^bb17
    %44 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc70)
    %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc127)
    cir.br ^bb20 loc(#loc116)
  ^bb20:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc116)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc111)
  ^bb22:  // 2 preds: ^bb15, ^bb21
    cir.br ^bb23 loc(#loc111)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc104)
  ^bb24:  // 2 preds: ^bb13, ^bb23
    cir.br ^bb25 loc(#loc104)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc72)
  } loc(#loc268)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc290)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc291)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc292)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc136)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc293)
    cir.br ^bb1 loc(#loc294)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc239)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc140)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc140)
    cir.brcond %6 ^bb2, ^bb10 loc(#loc295)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc296)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc290)
    cir.store %7, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc290)
    cir.br ^bb4 loc(#loc297)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc146)
    %9 = cir.const #cir.int<3> : !s32i loc(#loc147)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc147)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc147)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc147)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc147)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc147)
    %15 = cir.binop(add, %12, %14) : !u64i loc(#loc147)
    %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc147)
    %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc241)
    %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc148)
    %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc149)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc150)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc150)
    %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc298)
    cir.brcond %22 ^bb5, ^bb6 loc(#loc299)
  ^bb5:  // pred: ^bb4
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc154)
    %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc155)
    cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc300)
    cir.br ^bb7 loc(#loc152)
  ^bb6:  // pred: ^bb4
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc158)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc158)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc159)
    cir.br ^bb7 loc(#loc145)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc145)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc143)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc139)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc139)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc301)
  ^bb12:  // pred: ^bb11
    %27 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc239)
    %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc162)
    %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc162)
    cir.brcond %29 ^bb13, ^bb23 loc(#loc302)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc303)
  ^bb14:  // pred: ^bb13
    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc167)
    %32 = cir.cmp(gt, %30, %31) : !s32i, !cir.bool loc(#loc304)
    cir.brcond %32 ^bb15, ^bb21 loc(#loc305)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc306)
  ^bb16:  // pred: ^bb15
    %33 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc171)
    %34 = cir.const #cir.int<2147483647> : !s32i loc(#loc172)
    %35 = cir.const #cir.int<2> : !s32i loc(#loc173)
    %36 = cir.binop(div, %34, %35) : !s32i loc(#loc307)
    %37 = cir.cmp(lt, %33, %36) : !s32i, !cir.bool loc(#loc308)
    cir.brcond %37 ^bb17, ^bb18 loc(#loc309)
  ^bb17:  // pred: ^bb16
    %38 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc178)
    %39 = cir.const #cir.int<2> : !s32i loc(#loc133)
    %40 = cir.binop(mul, %38, %39) nsw : !s32i loc(#loc178)
    cir.store %40, %1 : !s32i, !cir.ptr<!s32i> loc(#loc291)
    %41 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc179)
    cir.call @printIntLine(%41) : (!s32i) -> () loc(#loc180)
    cir.br ^bb19 loc(#loc176)
  ^bb18:  // pred: ^bb16
    %42 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc181)
    %43 = cir.cast(array_to_ptrdecay, %42 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc181)
    cir.call @printLine(%43) : (!cir.ptr<!s8i>) -> () loc(#loc182)
    cir.br ^bb19 loc(#loc170)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc170)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc165)
  ^bb21:  // 2 preds: ^bb14, ^bb20
    cir.br ^bb22 loc(#loc165)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc161)
  ^bb23:  // 2 preds: ^bb12, ^bb22
    cir.br ^bb24 loc(#loc161)
  ^bb24:  // pred: ^bb23
    cir.return loc(#loc129)
  } loc(#loc289)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc311)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc312)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc189)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc313)
    cir.br ^bb1 loc(#loc314)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc267)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc193)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc193)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc315)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc197)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc197)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc198)
    cir.br ^bb4 loc(#loc195)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc199)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc316)
    cir.br ^bb4 loc(#loc192)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc192)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc317)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc239)
    %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc203)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc203)
    cir.brcond %11 ^bb7, ^bb12 loc(#loc318)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc319)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc207)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc208)
    %14 = cir.cmp(gt, %12, %13) : !s32i, !cir.bool loc(#loc320)
    cir.brcond %14 ^bb9, ^bb10 loc(#loc321)
  ^bb9:  // pred: ^bb8
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc210)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc186)
    %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc210)
    cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc311)
    %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc211)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc212)
    cir.br ^bb10 loc(#loc206)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc206)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc202)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc202)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc184)
  } loc(#loc310)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc323)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc324)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc219)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc325)
    cir.br ^bb1 loc(#loc326)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc239)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc223)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc223)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc327)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2> : !s32i loc(#loc225)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc328)
    cir.br ^bb3 loc(#loc222)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc222)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc329)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc239)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc229)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc229)
    cir.brcond %9 ^bb6, ^bb11 loc(#loc330)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc331)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc233)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc234)
    %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc332)
    cir.brcond %12 ^bb8, ^bb9 loc(#loc333)
  ^bb8:  // pred: ^bb7
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc236)
    %14 = cir.const #cir.int<2> : !s32i loc(#loc216)
    %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc236)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc323)
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc237)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc238)
    cir.br ^bb9 loc(#loc232)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc232)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc228)
  ^bb11:  // 2 preds: ^bb5, ^bb10
    cir.br ^bb12 loc(#loc228)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc214)
  } loc(#loc322)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_09.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":41:27)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":24:1)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":54:1)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":32:13)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":32:49)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":50:13)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":50:33)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":26:5)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":26:9)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":28:12)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":28:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":29:5)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":44:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":29:8)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":30:5)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":31:9)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":43:9)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":34:13)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":42:13)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":34:23)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":34:36)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":34:53)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":34:17)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":34:63)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":35:13)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":38:13)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":40:13)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":37:29)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":37:24)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":37:17)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":37:40)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":41:17)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":45:5)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":53:5)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":45:8)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":46:5)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":47:9)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":52:9)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":47:12)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":47:19)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":48:9)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":50:26)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":51:26)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":51:13)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":194:1)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":200:1)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":196:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":196:14)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":197:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":197:14)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":198:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":198:14)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":199:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":199:14)
#loc67 = loc("../../../testcasesupport/std_testcase.h":110:1)
#loc68 = loc("../../../testcasesupport/std_testcase.h":110:18)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":85:19)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":99:27)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":61:1)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":103:1)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":69:13)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":69:49)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":94:17)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":94:37)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":63:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":63:9)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":65:12)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":65:5)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":66:5)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":81:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":66:8)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":67:5)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":68:9)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":80:9)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":71:13)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":79:13)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":71:23)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":71:36)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":71:53)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":71:17)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":71:63)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":72:13)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":75:13)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":77:13)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":74:29)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":74:24)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":74:17)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":74:40)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":78:27)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":78:17)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":82:5)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":102:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":82:8)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":83:5)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":86:5)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":88:5)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":85:9)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":89:9)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":101:9)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":89:12)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":89:19)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":90:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":92:13)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":100:13)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":92:17)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":92:25)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":92:33)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":92:34)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":93:13)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":96:13)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":98:13)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":94:30)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":95:30)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":95:17)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":99:17)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":106:1)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":143:1)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":114:13)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":114:49)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":134:17)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":134:37)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":108:5)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":108:9)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":110:12)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":110:5)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":111:5)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":126:5)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":111:8)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":112:5)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":113:9)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":125:9)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":116:13)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":124:13)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":116:23)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":116:36)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":116:53)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":116:17)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":116:63)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":117:13)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":120:13)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":122:13)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":119:29)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":119:24)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":119:17)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":119:40)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":123:27)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":123:17)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":127:5)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":142:5)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":127:8)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":128:5)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":129:9)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":141:9)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":129:12)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":129:19)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":130:9)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":132:13)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":140:13)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":132:17)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":132:25)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":132:33)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":132:34)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":133:13)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":136:13)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":138:13)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":134:30)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":135:30)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":135:17)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":139:27)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":139:17)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":146:1)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":170:1)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":166:13)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":166:33)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":148:5)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":148:9)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":150:12)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":150:5)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":151:5)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":160:5)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":151:8)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":152:5)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":155:5)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":157:5)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":154:19)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":154:9)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":159:16)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":159:9)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":161:5)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":169:5)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":161:8)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":162:5)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":163:9)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":168:9)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":163:12)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":163:19)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":164:9)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":166:26)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":167:26)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":167:13)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":173:1)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":192:1)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":188:13)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":188:33)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":175:5)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":175:9)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":177:12)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":177:5)
#loc221 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":178:5)
#loc222 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":182:5)
#loc223 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":178:8)
#loc224 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":179:5)
#loc225 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":181:16)
#loc226 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":181:9)
#loc227 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":183:5)
#loc228 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":191:5)
#loc229 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":183:8)
#loc230 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":184:5)
#loc231 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":185:9)
#loc232 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":190:9)
#loc233 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":185:12)
#loc234 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":185:19)
#loc235 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":186:9)
#loc236 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":188:26)
#loc237 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":189:26)
#loc238 = loc("CWE190_Integer_Overflow__int_fgets_multiply_09.c":189:13)
#loc239 = loc(fused[#loc1, #loc2])
#loc240 = loc(fused[#loc3, #loc4])
#loc241 = loc(fused[#loc5, #loc6])
#loc242 = loc(fused[#loc7, #loc8])
#loc243 = loc(fused[#loc9, #loc10])
#loc244 = loc(fused[#loc12, #loc13])
#loc245 = loc(fused[#loc14, #loc15])
#loc246 = loc(fused[#loc16, #loc17])
#loc247 = loc(fused[#loc18, #loc19])
#loc248 = loc(fused[#loc20, #loc21])
#loc249 = loc(fused[#loc23, #loc22])
#loc250 = loc(fused[#loc24, #loc25])
#loc251 = loc(fused[#loc27, #loc25])
#loc252 = loc(fused[#loc28, #loc29])
#loc253 = loc(fused[#loc30, #loc31])
#loc254 = loc(fused[#loc35, #loc36])
#loc255 = loc(fused[#loc37, #loc38, #loc39, #loc31])
#loc256 = loc(fused[#loc42, #loc43])
#loc257 = loc(fused[#loc45, #loc46])
#loc258 = loc(fused[#loc48, #loc46])
#loc259 = loc(fused[#loc49, #loc50])
#loc260 = loc(fused[#loc51, #loc52])
#loc261 = loc(fused[#loc53, #loc50])
#loc262 = loc(fused[#loc57, #loc58])
#loc263 = loc(fused[#loc59, #loc60])
#loc264 = loc(fused[#loc61, #loc62])
#loc265 = loc(fused[#loc63, #loc64])
#loc266 = loc(fused[#loc65, #loc66])
#loc267 = loc(fused[#loc67, #loc68])
#loc268 = loc(fused[#loc71, #loc72])
#loc269 = loc(fused[#loc73, #loc74])
#loc270 = loc(fused[#loc75, #loc76])
#loc271 = loc(fused[#loc77, #loc78])
#loc272 = loc(fused[#loc80, #loc79])
#loc273 = loc(fused[#loc81, #loc82])
#loc274 = loc(fused[#loc84, #loc82])
#loc275 = loc(fused[#loc85, #loc86])
#loc276 = loc(fused[#loc87, #loc88])
#loc277 = loc(fused[#loc92, #loc93])
#loc278 = loc(fused[#loc94, #loc95, #loc96, #loc88])
#loc279 = loc(fused[#loc99, #loc100])
#loc280 = loc(fused[#loc103, #loc104])
#loc281 = loc(fused[#loc106, #loc107, #loc108, #loc104])
#loc282 = loc(fused[#loc110, #loc111])
#loc283 = loc(fused[#loc112, #loc113])
#loc284 = loc(fused[#loc114, #loc111])
#loc285 = loc(fused[#loc115, #loc116])
#loc286 = loc(fused[#loc118, #loc119])
#loc287 = loc(fused[#loc117, #loc120])
#loc288 = loc(fused[#loc121, #loc122, #loc123, #loc116])
#loc289 = loc(fused[#loc128, #loc129])
#loc290 = loc(fused[#loc130, #loc131])
#loc291 = loc(fused[#loc132, #loc133])
#loc292 = loc(fused[#loc134, #loc135])
#loc293 = loc(fused[#loc137, #loc136])
#loc294 = loc(fused[#loc138, #loc139])
#loc295 = loc(fused[#loc141, #loc139])
#loc296 = loc(fused[#loc142, #loc143])
#loc297 = loc(fused[#loc144, #loc145])
#loc298 = loc(fused[#loc149, #loc150])
#loc299 = loc(fused[#loc151, #loc152, #loc153, #loc145])
#loc300 = loc(fused[#loc156, #loc157])
#loc301 = loc(fused[#loc160, #loc161])
#loc302 = loc(fused[#loc163, #loc161])
#loc303 = loc(fused[#loc164, #loc165])
#loc304 = loc(fused[#loc166, #loc167])
#loc305 = loc(fused[#loc168, #loc165])
#loc306 = loc(fused[#loc169, #loc170])
#loc307 = loc(fused[#loc172, #loc173])
#loc308 = loc(fused[#loc171, #loc174])
#loc309 = loc(fused[#loc175, #loc176, #loc177, #loc170])
#loc310 = loc(fused[#loc183, #loc184])
#loc311 = loc(fused[#loc185, #loc186])
#loc312 = loc(fused[#loc187, #loc188])
#loc313 = loc(fused[#loc190, #loc189])
#loc314 = loc(fused[#loc191, #loc192])
#loc315 = loc(fused[#loc194, #loc195, #loc196, #loc192])
#loc316 = loc(fused[#loc200, #loc199])
#loc317 = loc(fused[#loc201, #loc202])
#loc318 = loc(fused[#loc204, #loc202])
#loc319 = loc(fused[#loc205, #loc206])
#loc320 = loc(fused[#loc207, #loc208])
#loc321 = loc(fused[#loc209, #loc206])
#loc322 = loc(fused[#loc213, #loc214])
#loc323 = loc(fused[#loc215, #loc216])
#loc324 = loc(fused[#loc217, #loc218])
#loc325 = loc(fused[#loc220, #loc219])
#loc326 = loc(fused[#loc221, #loc222])
#loc327 = loc(fused[#loc224, #loc222])
#loc328 = loc(fused[#loc226, #loc225])
#loc329 = loc(fused[#loc227, #loc228])
#loc330 = loc(fused[#loc230, #loc228])
#loc331 = loc(fused[#loc231, #loc232])
#loc332 = loc(fused[#loc233, #loc234])
#loc333 = loc(fused[#loc235, #loc232])
