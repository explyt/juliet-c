!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":93:10)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":93:14)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":93:20)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":93:32)
#loc138 = loc(fused[#loc31, #loc32])
#loc139 = loc(fused[#loc33, #loc34])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_badData = #cir.ptr<null> : !cir.ptr<!s32i> {alignment = 8 : i64} loc(#loc125)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc127)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc7)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc128)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc9)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc9)
    %4 = cir.alloca !u8i, !cir.ptr<!u8i>, %3 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc9)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc9)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc9)
    cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc129)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc11)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_badData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc125)
    cir.store %7, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc130)
    %9 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc131)
    cir.call %9() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc13)
    cir.return loc(#loc4)
  } loc(#loc126)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc133)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc17)
    cir.return loc(#loc16)
  } loc(#loc132)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc134)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc135)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc136)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc25)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc26)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc27)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc28)
  cir.func @main(%arg0: !s32i loc(fused[#loc31, #loc32]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc33, #loc34])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc138)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc139)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc30)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc35)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc35)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc36)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc37)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc37)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc38)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc25)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc25)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc39)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_good : !cir.ptr<!cir.func<!void ()>> loc(#loc140)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_good() : () -> () loc(#loc40)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc26)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc26)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc42)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc27)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc27)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc141)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_bad() : () -> () loc(#loc44)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc28)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc28)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc47)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    cir.return %17 : !s32i loc(#loc142)
  } loc(#loc137)
  cir.func private @printIntLine(!s32i) loc(#loc143)
  cir.func no_proto internal private @badSink() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc145)
    %1 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_badData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc125)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
    cir.store %2, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc145)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc147)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc148)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc147)
      cir.store %5, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc147)
      cir.scope {
        %10 = cir.const #cir.int<0> : !s32i loc(#loc63)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc63)
        cir.store %11, %4 : !u64i, !cir.ptr<!u64i> loc(#loc150)
        cir.for : cond {
          %12 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc65)
          %13 = cir.const #cir.int<10> : !s32i loc(#loc66)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc66)
          %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc151)
          cir.condition(%15) loc(#loc67)
        } body {
          cir.scope {
            %12 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc69)
            %13 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc70)
            %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !u64i), !cir.ptr<!s32i> loc(#loc70)
            %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc70)
            %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
            %17 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc72)
            %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !u64i), !cir.ptr<!s32i> loc(#loc73)
            cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc153)
          } loc(#loc152)
          cir.yield loc(#loc62)
        } step {
          %12 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc75)
          %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc76)
          cir.store %13, %4 : !u64i, !cir.ptr<!u64i> loc(#loc154)
          cir.yield loc(#loc149)
        } loc(#loc149)
      } loc(#loc149)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc77)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc78)
      %8 = cir.ptr_stride(%6 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc79)
      %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc77)
      cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc80)
    } loc(#loc146)
    cir.return loc(#loc52)
  } loc(#loc144)
  cir.global "private" internal dsolocal @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_goodG2BData = #cir.ptr<null> : !cir.ptr<!s32i> {alignment = 8 : i64} loc(#loc155)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc157)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc87)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc158)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc89)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc89)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc89)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc89)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc89)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc89)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc89)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc159)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
    %10 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_goodG2BData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc155)
    cir.store %9, %10 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc160)
    %11 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc161)
    cir.call %11() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc93)
    cir.return loc(#loc84)
  } loc(#loc156)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc163)
    %1 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_goodG2BData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc155)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc98)
    cir.store %2, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc163)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc165)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc166)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc165)
      cir.store %5, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc165)
      cir.scope {
        %10 = cir.const #cir.int<0> : !s32i loc(#loc107)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc107)
        cir.store %11, %4 : !u64i, !cir.ptr<!u64i> loc(#loc168)
        cir.for : cond {
          %12 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc109)
          %13 = cir.const #cir.int<10> : !s32i loc(#loc110)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc110)
          %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc169)
          cir.condition(%15) loc(#loc111)
        } body {
          cir.scope {
            %12 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc113)
            %13 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc114)
            %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !u64i), !cir.ptr<!s32i> loc(#loc114)
            %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc114)
            %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc115)
            %17 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc116)
            %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !u64i), !cir.ptr<!s32i> loc(#loc117)
            cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc171)
          } loc(#loc170)
          cir.yield loc(#loc106)
        } step {
          %12 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc119)
          %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc120)
          cir.store %13, %4 : !u64i, !cir.ptr<!u64i> loc(#loc172)
          cir.yield loc(#loc167)
        } loc(#loc167)
      } loc(#loc167)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc121)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc122)
      %8 = cir.ptr_stride(%6 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc123)
      %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc121)
      cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc124)
    } loc(#loc164)
    cir.return loc(#loc96)
  } loc(#loc162)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":19:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":19:14)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":39:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":47:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":41:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":41:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":42:12)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":42:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":44:19)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":44:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":45:66)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":45:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":46:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":46:13)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":79:1)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":82:1)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":81:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":81:13)
#loc19 = loc("/usr/include/stdlib.h":575:1)
#loc20 = loc("/usr/include/stdlib.h":575:41)
#loc21 = loc("/usr/include/time.h":76:1)
#loc22 = loc("/usr/include/time.h":76:38)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":98:15)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":100:15)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":103:15)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":105:15)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":93:1)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":108:1)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":94:1)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":96:27)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":96:22)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":96:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":98:5)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":99:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":99:61)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":100:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":103:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":104:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":104:60)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":105:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":107:12)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":107:5)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":24:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":37:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":26:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":26:18)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":27:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":36:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":28:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":28:28)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":29:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":29:16)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":31:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":34:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":31:18)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":31:14)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":31:21)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":31:25)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":31:23)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":32:9)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":33:30)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":33:23)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":33:13)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":33:18)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":33:19)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":33:31)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":31:30)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":31:29)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":35:22)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":35:27)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":35:28)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":35:9)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":20:1)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":20:14)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":69:1)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":77:1)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":71:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":71:11)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":72:12)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":72:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":74:19)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":74:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":75:70)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":75:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":76:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":76:17)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":54:1)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":67:1)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":56:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":56:18)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":57:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":66:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":58:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":58:28)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":59:9)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":59:16)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":61:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":64:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":61:18)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":61:14)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":61:21)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":61:25)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":61:23)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":62:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":63:30)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":63:23)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":63:13)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":63:18)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":63:19)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":63:31)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":61:30)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":61:29)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":65:22)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":65:27)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":65:28)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c":65:9)
#loc125 = loc(fused[#loc1, #loc2])
#loc126 = loc(fused[#loc3, #loc4])
#loc127 = loc(fused[#loc5, #loc6])
#loc128 = loc(fused[#loc8, #loc7])
#loc129 = loc(fused[#loc10, #loc9])
#loc130 = loc(fused[#loc12, #loc11])
#loc131 = loc(fused[#loc13, #loc14])
#loc132 = loc(fused[#loc15, #loc16])
#loc133 = loc(fused[#loc17, #loc18])
#loc134 = loc(fused[#loc19, #loc20])
#loc135 = loc(fused[#loc21, #loc22])
#loc136 = loc(fused[#loc23, #loc24])
#loc137 = loc(fused[#loc29, #loc30])
#loc140 = loc(fused[#loc40, #loc41])
#loc141 = loc(fused[#loc44, #loc45])
#loc142 = loc(fused[#loc48, #loc47])
#loc143 = loc(fused[#loc49, #loc50])
#loc144 = loc(fused[#loc51, #loc52])
#loc145 = loc(fused[#loc53, #loc54])
#loc146 = loc(fused[#loc55, #loc56])
#loc147 = loc(fused[#loc57, #loc58])
#loc148 = loc(fused[#loc59, #loc60])
#loc149 = loc(fused[#loc61, #loc62])
#loc150 = loc(fused[#loc64, #loc63])
#loc151 = loc(fused[#loc65, #loc66])
#loc152 = loc(fused[#loc68, #loc62])
#loc153 = loc(fused[#loc71, #loc74])
#loc154 = loc(fused[#loc76, #loc75])
#loc155 = loc(fused[#loc81, #loc82])
#loc156 = loc(fused[#loc83, #loc84])
#loc157 = loc(fused[#loc85, #loc86])
#loc158 = loc(fused[#loc88, #loc87])
#loc159 = loc(fused[#loc90, #loc89])
#loc160 = loc(fused[#loc92, #loc91])
#loc161 = loc(fused[#loc93, #loc94])
#loc162 = loc(fused[#loc95, #loc96])
#loc163 = loc(fused[#loc97, #loc98])
#loc164 = loc(fused[#loc99, #loc100])
#loc165 = loc(fused[#loc101, #loc102])
#loc166 = loc(fused[#loc103, #loc104])
#loc167 = loc(fused[#loc105, #loc106])
#loc168 = loc(fused[#loc108, #loc107])
#loc169 = loc(fused[#loc109, #loc110])
#loc170 = loc(fused[#loc112, #loc106])
#loc171 = loc(fused[#loc115, #loc118])
#loc172 = loc(fused[#loc120, #loc119])
