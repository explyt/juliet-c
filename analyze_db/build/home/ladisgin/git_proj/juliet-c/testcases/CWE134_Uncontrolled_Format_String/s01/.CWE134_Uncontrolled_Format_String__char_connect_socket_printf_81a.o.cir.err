clang: warning: argument unused during compilation: '-c' [-Wunused-command-line-argument]
warning: unknown warning option '-Wno-terminate' [-Wunknown-warning-option]
loc(fused["CWE134_Uncontrolled_Format_String__char_connect_socket_printf_81a.cpp":119:95, "CWE134_Uncontrolled_Format_String__char_connect_socket_printf_81a.cpp":119:164]): error: operand #0 does not dominate this use
loc(fused["CWE134_Uncontrolled_Format_String__char_connect_socket_printf_81a.cpp":135:95, "CWE134_Uncontrolled_Format_String__char_connect_socket_printf_81a.cpp":135:168]): error: operand #0 does not dominate this use
fatal error: error in backend: CIR codegen: module verification error before running CIR passes
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /home/ladisgin/git_proj/clangir/build/bin/clang -S -Xclang -emit-cir-flat -std=c++11 -Wno-terminate -std=c++11 -I ../../../testcasesupport -c CWE134_Uncontrolled_Format_String__char_connect_socket_printf_81a.cpp -o /home/ladisgin/git_proj/juliet-c/testcases/CWE134_Uncontrolled_Format_String/s01/.CWE134_Uncontrolled_Format_String__char_connect_socket_printf_81a.o.cir
1.	<eof> parser at end of file
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang     0x0000000001aad6ab llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 43
1  clang     0x0000000001aaabe4 llvm::sys::CleanupOnSignal(unsigned long) + 132
2  clang     0x00000000019f4a76 llvm::CrashRecoveryContext::HandleExit(int) + 118
3  clang     0x0000000001aa3c6e llvm::sys::Process::Exit(int, bool) + 30
4  clang     0x0000000000520023
5  clang     0x00000000019ffa79 llvm::report_fatal_error(llvm::Twine const&, bool) + 89
6  clang     0x00000000019ffbef
7  clang     0x000000000309a945
8  clang     0x00000000053c2d8c clang::ParseAST(clang::Sema&, bool, bool) + 1212
9  clang     0x000000000273e7b9 clang::FrontendAction::Execute() + 169
10 clang     0x00000000026ba99e clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1886
11 clang     0x00000000028247ee clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 1742
12 clang     0x000000000052312b cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 6299
13 clang     0x000000000051a0c0
14 clang     0x000000000247dfa9
15 clang     0x00000000019f49b2 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 146
16 clang     0x000000000248036e
17 clang     0x000000000243df5b clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 155
18 clang     0x000000000243f01e clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const + 222
19 clang     0x000000000244b114 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 356
20 clang     0x000000000051f2d1 clang_main(int, char**, llvm::ToolContext const&) + 9169
21 clang     0x000000000042abd3 main + 83
22 libc.so.6 0x00007f0f3d1e1248
23 libc.so.6 0x00007f0f3d1e130b __libc_start_main + 139
24 clang     0x00000000005196f5 _start + 37
clang: error: clang frontend command failed with exit code 70 (use -v to see invocation)
clang version 20.0.0git (git@github.com:llvm/clangir.git 888f00c5bd78e8355c9f7288c1a3237884a04dbc)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /home/ladisgin/git_proj/clangir/build/bin
Build config: +assertions
clang: note: diagnostic msg: Error generating preprocessed source(s).
