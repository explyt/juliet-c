!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_connect_socket_multiply_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc332)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc333)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc334)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc335)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc336)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc337)
  cir.func private @close(!s32i) -> !s32i loc(#loc338)
  cir.func private @printIntLine(!s32i) loc(#loc339)
  cir.func no_proto @CWE191_Integer_Underflow__int_connect_socket_multiply_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc341)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc342)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc343)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc25)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc344)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc29)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc346)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc32)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc347)
        cir.condition(%7) loc(#loc33)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc350)
            %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc351)
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc352)
            %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc353)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc42)
            %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc42)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc352)
            cir.scope {
              cir.do {
                cir.scope {
                  %11 = cir.const #cir.int<2> : !s32i loc(#loc49)
                  %12 = cir.const #cir.int<1> : !s32i loc(#loc50)
                  %13 = cir.const #cir.int<6> : !s32i loc(#loc51)
                  %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc52)
                  cir.store %14, %7 : !s32i, !cir.ptr<!s32i> loc(#loc356)
                  cir.scope {
                    %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc57)
                    %54 = cir.const #cir.int<1> : !s32i loc(#loc58)
                    %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc58)
                    %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc358)
                    cir.if %56 {
                      cir.break loc(#loc60)
                    } loc(#loc359)
                  } loc(#loc357)
                  %15 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc360)
                  %16 = cir.const #cir.int<0> : !s32i loc(#loc63)
                  %17 = cir.const #cir.int<16> : !u64i loc(#loc361)
                  cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc362)
                  %18 = cir.const #cir.int<2> : !s32i loc(#loc68)
                  %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc68)
                  %20 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
                  cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc363)
                  %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
                  %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
                  %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc71)
                  %24 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
                  %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
                  cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc364)
                  %26 = cir.const #cir.int<27015> : !s32i loc(#loc76)
                  %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc76)
                  %28 = cir.call @htons(%27) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc77)
                  %29 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
                  cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc365)
                  cir.scope {
                    %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc83)
                    %54 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc367)
                    %55 = cir.const #cir.int<16> : !u64i loc(#loc368)
                    %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc368)
                    %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc88)
                    %58 = cir.const #cir.int<1> : !s32i loc(#loc89)
                    %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc89)
                    %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc369)
                    cir.if %60 {
                      cir.break loc(#loc91)
                    } loc(#loc370)
                  } loc(#loc366)
                  %30 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc92)
                  %31 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc93)
                  %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc93)
                  %33 = cir.const #cir.int<3> : !s32i loc(#loc94)
                  %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc94)
                  %35 = cir.const #cir.int<4> : !u64i loc(#loc94)
                  %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc94)
                  %37 = cir.const #cir.int<2> : !s32i loc(#loc94)
                  %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc94)
                  %39 = cir.binop(add, %36, %38) : !u64i loc(#loc94)
                  %40 = cir.const #cir.int<1> : !s32i loc(#loc95)
                  %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc95)
                  %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc371)
                  %43 = cir.const #cir.int<0> : !s32i loc(#loc96)
                  %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc97)
                  %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc97)
                  cir.store %45, %5 : !s32i, !cir.ptr<!s32i> loc(#loc372)
                  cir.scope {
                    %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                    %54 = cir.const #cir.int<1> : !s32i loc(#loc103)
                    %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc103)
                    %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc374)
                    %57 = cir.ternary(%56, true {
                      %58 = cir.const #true loc(#loc104)
                      cir.yield %58 : !cir.bool loc(#loc104)
                    }, false {
                      %58 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                      %59 = cir.const #cir.int<0> : !s32i loc(#loc106)
                      %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc375)
                      %61 = cir.ternary(%60, true {
                        %62 = cir.const #true loc(#loc104)
                        cir.yield %62 : !cir.bool loc(#loc104)
                      }, false {
                        %62 = cir.const #false loc(#loc104)
                        cir.yield %62 : !cir.bool loc(#loc104)
                      }) : (!cir.bool) -> !cir.bool loc(#loc104)
                      cir.yield %61 : !cir.bool loc(#loc104)
                    }) : (!cir.bool) -> !cir.bool loc(#loc104)
                    cir.if %57 {
                      cir.break loc(#loc108)
                    } loc(#loc376)
                  } loc(#loc373)
                  %46 = cir.const #cir.int<0> : !s32i loc(#loc109)
                  %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc109)
                  %48 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                  %49 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc111)
                  %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc111)
                  cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc377)
                  %51 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc112)
                  %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc113)
                  cir.store %52, %2 : !s32i, !cir.ptr<!s32i> loc(#loc378)
                } loc(#loc355)
                cir.yield loc(#loc46)
              } while {
                %11 = cir.const #cir.int<0> : !s32i loc(#loc116)
                %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc116)
                cir.condition(%12) loc(#loc116)
              } loc(#loc354)
            } loc(#loc354)
            cir.scope {
              %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc119)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc120)
              %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc120)
              %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc380)
              cir.if %14 {
                %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc122)
                %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc123)
              } loc(#loc381)
            } loc(#loc379)
          } loc(#loc349)
        } loc(#loc348)
        cir.yield loc(#loc28)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc124)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc125)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc382)
        cir.yield loc(#loc345)
      } loc(#loc345)
    } loc(#loc345)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc128)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc384)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc130)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc131)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc385)
        cir.condition(%7) loc(#loc132)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc136)
            %6 = cir.const #cir.int<0> : !s32i loc(#loc137)
            %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc388)
            cir.if %7 {
              %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc390)
              %9 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc141)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc140)
              %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc141)
              cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc390)
              %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc142)
              cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc143)
            } loc(#loc389)
          } loc(#loc387)
        } loc(#loc386)
        cir.yield loc(#loc127)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc144)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc145)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc391)
        cir.yield loc(#loc383)
      } loc(#loc383)
    } loc(#loc383)
    cir.return loc(#loc19)
  } loc(#loc340)
  cir.func no_proto @CWE191_Integer_Underflow__int_connect_socket_multiply_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc393)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc148)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc394)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc150)
    cir.return loc(#loc147)
  } loc(#loc392)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc395)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc154)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc397)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc398)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc399)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc162)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc400)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc166)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc402)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc168)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc169)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc403)
        cir.condition(%7) loc(#loc170)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc406)
            %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc407)
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc408)
            %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc409)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc179)
            %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc179)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc408)
            cir.scope {
              cir.do {
                cir.scope {
                  %11 = cir.const #cir.int<2> : !s32i loc(#loc186)
                  %12 = cir.const #cir.int<1> : !s32i loc(#loc187)
                  %13 = cir.const #cir.int<6> : !s32i loc(#loc188)
                  %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc189)
                  cir.store %14, %7 : !s32i, !cir.ptr<!s32i> loc(#loc412)
                  cir.scope {
                    %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc194)
                    %54 = cir.const #cir.int<1> : !s32i loc(#loc195)
                    %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc195)
                    %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc414)
                    cir.if %56 {
                      cir.break loc(#loc197)
                    } loc(#loc415)
                  } loc(#loc413)
                  %15 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc416)
                  %16 = cir.const #cir.int<0> : !s32i loc(#loc200)
                  %17 = cir.const #cir.int<16> : !u64i loc(#loc417)
                  cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc418)
                  %18 = cir.const #cir.int<2> : !s32i loc(#loc205)
                  %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc205)
                  %20 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
                  cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc419)
                  %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc207)
                  %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc207)
                  %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc208)
                  %24 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
                  %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
                  cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc420)
                  %26 = cir.const #cir.int<27015> : !s32i loc(#loc211)
                  %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc211)
                  %28 = cir.call @htons(%27) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc212)
                  %29 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
                  cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc421)
                  cir.scope {
                    %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc217)
                    %54 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc423)
                    %55 = cir.const #cir.int<16> : !u64i loc(#loc424)
                    %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc424)
                    %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc222)
                    %58 = cir.const #cir.int<1> : !s32i loc(#loc223)
                    %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc223)
                    %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc425)
                    cir.if %60 {
                      cir.break loc(#loc225)
                    } loc(#loc426)
                  } loc(#loc422)
                  %30 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc226)
                  %31 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc227)
                  %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc227)
                  %33 = cir.const #cir.int<3> : !s32i loc(#loc228)
                  %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc228)
                  %35 = cir.const #cir.int<4> : !u64i loc(#loc228)
                  %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc228)
                  %37 = cir.const #cir.int<2> : !s32i loc(#loc228)
                  %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc228)
                  %39 = cir.binop(add, %36, %38) : !u64i loc(#loc228)
                  %40 = cir.const #cir.int<1> : !s32i loc(#loc229)
                  %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc229)
                  %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc427)
                  %43 = cir.const #cir.int<0> : !s32i loc(#loc230)
                  %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc231)
                  %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc231)
                  cir.store %45, %5 : !s32i, !cir.ptr<!s32i> loc(#loc428)
                  cir.scope {
                    %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc236)
                    %54 = cir.const #cir.int<1> : !s32i loc(#loc237)
                    %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc237)
                    %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc430)
                    %57 = cir.ternary(%56, true {
                      %58 = cir.const #true loc(#loc238)
                      cir.yield %58 : !cir.bool loc(#loc238)
                    }, false {
                      %58 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc239)
                      %59 = cir.const #cir.int<0> : !s32i loc(#loc240)
                      %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc431)
                      %61 = cir.ternary(%60, true {
                        %62 = cir.const #true loc(#loc238)
                        cir.yield %62 : !cir.bool loc(#loc238)
                      }, false {
                        %62 = cir.const #false loc(#loc238)
                        cir.yield %62 : !cir.bool loc(#loc238)
                      }) : (!cir.bool) -> !cir.bool loc(#loc238)
                      cir.yield %61 : !cir.bool loc(#loc238)
                    }) : (!cir.bool) -> !cir.bool loc(#loc238)
                    cir.if %57 {
                      cir.break loc(#loc242)
                    } loc(#loc432)
                  } loc(#loc429)
                  %46 = cir.const #cir.int<0> : !s32i loc(#loc243)
                  %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc243)
                  %48 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc244)
                  %49 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc245)
                  %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc245)
                  cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc433)
                  %51 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc246)
                  %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc247)
                  cir.store %52, %2 : !s32i, !cir.ptr<!s32i> loc(#loc434)
                } loc(#loc411)
                cir.yield loc(#loc183)
              } while {
                %11 = cir.const #cir.int<0> : !s32i loc(#loc250)
                %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc250)
                cir.condition(%12) loc(#loc250)
              } loc(#loc410)
            } loc(#loc410)
            cir.scope {
              %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc253)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc254)
              %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc254)
              %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc436)
              cir.if %14 {
                %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc256)
                %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc257)
              } loc(#loc437)
            } loc(#loc435)
          } loc(#loc405)
        } loc(#loc404)
        cir.yield loc(#loc165)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc258)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc259)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc438)
        cir.yield loc(#loc401)
      } loc(#loc401)
    } loc(#loc401)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc262)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc440)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc264)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc265)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc441)
        cir.condition(%7) loc(#loc266)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc270)
            %6 = cir.const #cir.int<0> : !s32i loc(#loc271)
            %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc444)
            cir.if %7 {
              cir.scope {
                %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc275)
                %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc276)
                %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc276)
                %11 = cir.const #cir.int<1> : !s32i loc(#loc276)
                %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc276)
                %13 = cir.const #cir.int<2> : !s32i loc(#loc277)
                %14 = cir.binop(div, %12, %13) : !s32i loc(#loc447)
                %15 = cir.cmp(gt, %8, %14) : !s32i, !cir.bool loc(#loc448)
                cir.if %15 {
                  %16 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc450)
                  %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc284)
                  %18 = cir.const #cir.int<2> : !s32i loc(#loc283)
                  %19 = cir.binop(mul, %17, %18) nsw : !s32i loc(#loc284)
                  cir.store %19, %16 : !s32i, !cir.ptr<!s32i> loc(#loc450)
                  %20 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc285)
                  cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc286)
                } else {
                  %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc154)
                  %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc154)
                  cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc287)
                } loc(#loc449)
              } loc(#loc446)
            } loc(#loc445)
          } loc(#loc443)
        } loc(#loc442)
        cir.yield loc(#loc261)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc288)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc289)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc451)
        cir.yield loc(#loc439)
      } loc(#loc439)
    } loc(#loc439)
    cir.return loc(#loc156)
  } loc(#loc396)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc453)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc454)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc455)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc297)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc456)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc301)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc458)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc303)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc304)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc459)
        cir.condition(%7) loc(#loc305)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2> : !s32i loc(#loc307)
          %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc308)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc461)
        } loc(#loc460)
        cir.yield loc(#loc300)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc310)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc311)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc462)
        cir.yield loc(#loc457)
      } loc(#loc457)
    } loc(#loc457)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc314)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc464)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc316)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc317)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc465)
        cir.condition(%7) loc(#loc318)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc322)
            %6 = cir.const #cir.int<0> : !s32i loc(#loc323)
            %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc468)
            cir.if %7 {
              %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc470)
              %9 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc327)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc326)
              %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc327)
              cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc470)
              %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc328)
              cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc329)
            } loc(#loc469)
          } loc(#loc467)
        } loc(#loc466)
        cir.yield loc(#loc313)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc330)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc331)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc471)
        cir.yield loc(#loc463)
      } loc(#loc463)
    } loc(#loc463)
    cir.return loc(#loc291)
  } loc(#loc452)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":78:53)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":44:1)
#loc19 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":118:1)
#loc20 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":46:5)
#loc21 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":46:9)
#loc22 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":46:11)
#loc23 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":47:5)
#loc24 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":47:9)
#loc25 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":49:12)
#loc26 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":49:5)
#loc27 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":50:5)
#loc28 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":108:5)
#loc29 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":50:13)
#loc30 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":50:9)
#loc31 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":50:16)
#loc32 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":50:20)
#loc33 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":50:18)
#loc34 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":51:5)
#loc35 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":52:9)
#loc36 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":107:9)
#loc37 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":57:13)
#loc38 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":57:17)
#loc39 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":58:13)
#loc40 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":58:32)
#loc41 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":59:13)
#loc42 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":59:36)
#loc43 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":60:13)
#loc44 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":60:45)
#loc45 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":61:13)
#loc46 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":96:21)
#loc47 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":62:13)
#loc48 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":95:13)
#loc49 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":71:40)
#loc50 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":71:49)
#loc51 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":71:62)
#loc52 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":71:33)
#loc53 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":71:17)
#loc54 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":71:73)
#loc55 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":72:17)
#loc56 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":75:17)
#loc57 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":72:21)
#loc58 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":72:38)
#loc59 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":73:17)
#loc60 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":74:21)
#loc61 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":76:24)
#loc62 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":76:25)
#loc63 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":76:34)
#loc64 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":76:37)
#loc65 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":76:51)
#loc66 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":76:17)
#loc67 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":76:52)
#loc68 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":77:38)
#loc69 = loc("/usr/include/netinet/in.h":249:5)
#loc70 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":77:17)
#loc71 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":78:43)
#loc72 = loc("/usr/include/netinet/in.h":251:20)
#loc73 = loc("/usr/include/netinet/in.h":33:15)
#loc74 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":78:17)
#loc75 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":78:63)
#loc76 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":79:42)
#loc77 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":79:36)
#loc78 = loc("/usr/include/netinet/in.h":250:15)
#loc79 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":79:17)
#loc80 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":79:50)
#loc81 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":80:17)
#loc82 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":83:17)
#loc83 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":80:29)
#loc84 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":80:62)
#loc85 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":80:63)
#loc86 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":80:72)
#loc87 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":80:86)
#loc88 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":80:21)
#loc89 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":80:92)
#loc90 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":81:17)
#loc91 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":82:21)
#loc92 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":86:35)
#loc93 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":86:50)
#loc94 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":86:63)
#loc95 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":86:81)
#loc96 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":86:84)
#loc97 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":86:30)
#loc98 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":86:17)
#loc99 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":86:85)
#loc100 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":87:17)
#loc101 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":90:17)
#loc102 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":87:21)
#loc103 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":87:35)
#loc104 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":87:48)
#loc105 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":87:51)
#loc106 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":87:65)
#loc107 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":88:17)
#loc108 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":89:21)
#loc109 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":92:43)
#loc110 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":92:29)
#loc111 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":92:17)
#loc112 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":94:29)
#loc113 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":94:24)
#loc114 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":94:17)
#loc115 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":94:40)
#loc116 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":96:20)
#loc117 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":97:13)
#loc118 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":100:13)
#loc119 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":97:17)
#loc120 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":97:34)
#loc121 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":98:13)
#loc122 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":99:30)
#loc123 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":99:17)
#loc124 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":50:24)
#loc125 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":50:23)
#loc126 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":109:5)
#loc127 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":117:5)
#loc128 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":109:13)
#loc129 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":109:9)
#loc130 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":109:16)
#loc131 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":109:20)
#loc132 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":109:18)
#loc133 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":110:5)
#loc134 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":111:9)
#loc135 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":116:9)
#loc136 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":111:12)
#loc137 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":111:19)
#loc138 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":112:9)
#loc139 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":114:13)
#loc140 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":114:33)
#loc141 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":114:26)
#loc142 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":115:26)
#loc143 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":115:13)
#loc144 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":109:24)
#loc145 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":109:23)
#loc146 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":231:1)
#loc147 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":235:1)
#loc148 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":233:5)
#loc149 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":233:13)
#loc150 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":234:5)
#loc151 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":234:13)
#loc152 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc153 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc154 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":202:27)
#loc155 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":125:1)
#loc156 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":206:1)
#loc157 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":127:5)
#loc158 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":127:9)
#loc159 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":127:11)
#loc160 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":128:5)
#loc161 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":128:9)
#loc162 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":130:12)
#loc163 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":130:5)
#loc164 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":131:5)
#loc165 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":189:5)
#loc166 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":131:13)
#loc167 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":131:9)
#loc168 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":131:16)
#loc169 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":131:20)
#loc170 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":131:18)
#loc171 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":132:5)
#loc172 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":133:9)
#loc173 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":188:9)
#loc174 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":138:13)
#loc175 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":138:17)
#loc176 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":139:13)
#loc177 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":139:32)
#loc178 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":140:13)
#loc179 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":140:36)
#loc180 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":141:13)
#loc181 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":141:45)
#loc182 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":142:13)
#loc183 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":177:21)
#loc184 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":143:13)
#loc185 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":176:13)
#loc186 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":152:40)
#loc187 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":152:49)
#loc188 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":152:62)
#loc189 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":152:33)
#loc190 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":152:17)
#loc191 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":152:73)
#loc192 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":153:17)
#loc193 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":156:17)
#loc194 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":153:21)
#loc195 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":153:38)
#loc196 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":154:17)
#loc197 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":155:21)
#loc198 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":157:24)
#loc199 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":157:25)
#loc200 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":157:34)
#loc201 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":157:37)
#loc202 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":157:51)
#loc203 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":157:17)
#loc204 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":157:52)
#loc205 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":158:38)
#loc206 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":158:17)
#loc207 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":159:53)
#loc208 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":159:43)
#loc209 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":159:17)
#loc210 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":159:63)
#loc211 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":160:42)
#loc212 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":160:36)
#loc213 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":160:17)
#loc214 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":160:50)
#loc215 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":161:17)
#loc216 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":164:17)
#loc217 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":161:29)
#loc218 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":161:62)
#loc219 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":161:63)
#loc220 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":161:72)
#loc221 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":161:86)
#loc222 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":161:21)
#loc223 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":161:92)
#loc224 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":162:17)
#loc225 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":163:21)
#loc226 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":167:35)
#loc227 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":167:50)
#loc228 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":167:63)
#loc229 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":167:81)
#loc230 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":167:84)
#loc231 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":167:30)
#loc232 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":167:17)
#loc233 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":167:85)
#loc234 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":168:17)
#loc235 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":171:17)
#loc236 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":168:21)
#loc237 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":168:35)
#loc238 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":168:48)
#loc239 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":168:51)
#loc240 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":168:65)
#loc241 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":169:17)
#loc242 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":170:21)
#loc243 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":173:43)
#loc244 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":173:29)
#loc245 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":173:17)
#loc246 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":175:29)
#loc247 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":175:24)
#loc248 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":175:17)
#loc249 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":175:40)
#loc250 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":177:20)
#loc251 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":178:13)
#loc252 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":181:13)
#loc253 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":178:17)
#loc254 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":178:34)
#loc255 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":179:13)
#loc256 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":180:30)
#loc257 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":180:17)
#loc258 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":131:24)
#loc259 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":131:23)
#loc260 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":190:5)
#loc261 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":205:5)
#loc262 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":190:13)
#loc263 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":190:9)
#loc264 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":190:16)
#loc265 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":190:20)
#loc266 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":190:18)
#loc267 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":191:5)
#loc268 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":192:9)
#loc269 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":204:9)
#loc270 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":192:12)
#loc271 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":192:19)
#loc272 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":193:9)
#loc273 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":195:13)
#loc274 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":203:13)
#loc275 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":195:17)
#loc276 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":195:25)
#loc277 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":195:33)
#loc278 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":195:34)
#loc279 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":196:13)
#loc280 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":199:13)
#loc281 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":201:13)
#loc282 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":197:17)
#loc283 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":197:37)
#loc284 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":197:30)
#loc285 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":198:30)
#loc286 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":198:17)
#loc287 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":202:17)
#loc288 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":190:24)
#loc289 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":190:23)
#loc290 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":209:1)
#loc291 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":229:1)
#loc292 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":211:5)
#loc293 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":211:9)
#loc294 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":211:11)
#loc295 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":212:5)
#loc296 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":212:9)
#loc297 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":214:12)
#loc298 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":214:5)
#loc299 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":215:5)
#loc300 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":219:5)
#loc301 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":215:13)
#loc302 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":215:9)
#loc303 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":215:16)
#loc304 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":215:20)
#loc305 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":215:18)
#loc306 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":216:5)
#loc307 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":218:17)
#loc308 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":218:16)
#loc309 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":218:9)
#loc310 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":215:24)
#loc311 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":215:23)
#loc312 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":220:5)
#loc313 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":228:5)
#loc314 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":220:13)
#loc315 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":220:9)
#loc316 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":220:16)
#loc317 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":220:20)
#loc318 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":220:18)
#loc319 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":221:5)
#loc320 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":222:9)
#loc321 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":227:9)
#loc322 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":222:12)
#loc323 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":222:19)
#loc324 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":223:9)
#loc325 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":225:13)
#loc326 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":225:33)
#loc327 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":225:26)
#loc328 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":226:26)
#loc329 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":226:13)
#loc330 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":220:24)
#loc331 = loc("CWE191_Integer_Underflow__int_connect_socket_multiply_17.c":220:23)
#loc332 = loc(fused[#loc1, #loc2])
#loc333 = loc(fused[#loc3, #loc4])
#loc334 = loc(fused[#loc6, #loc7])
#loc335 = loc(fused[#loc8, #loc9])
#loc336 = loc(fused[#loc10, #loc11])
#loc337 = loc(fused[#loc12, #loc13])
#loc338 = loc(fused[#loc14, #loc15])
#loc339 = loc(fused[#loc16, #loc17])
#loc340 = loc(fused[#loc18, #loc19])
#loc341 = loc(fused[#loc20, #loc21])
#loc342 = loc(fused[#loc20, #loc22])
#loc343 = loc(fused[#loc23, #loc24])
#loc344 = loc(fused[#loc26, #loc25])
#loc345 = loc(fused[#loc27, #loc28])
#loc346 = loc(fused[#loc30, #loc29])
#loc347 = loc(fused[#loc31, #loc32])
#loc348 = loc(fused[#loc34, #loc28])
#loc349 = loc(fused[#loc35, #loc36])
#loc350 = loc(fused[#loc37, #loc38])
#loc351 = loc(fused[#loc39, #loc40])
#loc352 = loc(fused[#loc41, #loc42])
#loc353 = loc(fused[#loc43, #loc44])
#loc354 = loc(fused[#loc45, #loc46])
#loc355 = loc(fused[#loc47, #loc48])
#loc356 = loc(fused[#loc53, #loc54])
#loc357 = loc(fused[#loc55, #loc56])
#loc358 = loc(fused[#loc57, #loc58])
#loc359 = loc(fused[#loc59, #loc56])
#loc360 = loc(fused[#loc61, #loc62])
#loc361 = loc(fused[#loc64, #loc65])
#loc362 = loc(fused[#loc66, #loc67])
#loc363 = loc(fused[#loc70, #loc68])
#loc364 = loc(fused[#loc74, #loc75])
#loc365 = loc(fused[#loc79, #loc80])
#loc366 = loc(fused[#loc81, #loc82])
#loc367 = loc(fused[#loc84, #loc85])
#loc368 = loc(fused[#loc86, #loc87])
#loc369 = loc(fused[#loc88, #loc89])
#loc370 = loc(fused[#loc90, #loc82])
#loc371 = loc(fused[#loc94, #loc95])
#loc372 = loc(fused[#loc98, #loc99])
#loc373 = loc(fused[#loc100, #loc101])
#loc374 = loc(fused[#loc102, #loc103])
#loc375 = loc(fused[#loc105, #loc106])
#loc376 = loc(fused[#loc107, #loc101])
#loc377 = loc(fused[#loc111, #loc109])
#loc378 = loc(fused[#loc114, #loc115])
#loc379 = loc(fused[#loc117, #loc118])
#loc380 = loc(fused[#loc119, #loc120])
#loc381 = loc(fused[#loc121, #loc118])
#loc382 = loc(fused[#loc125, #loc124])
#loc383 = loc(fused[#loc126, #loc127])
#loc384 = loc(fused[#loc129, #loc128])
#loc385 = loc(fused[#loc130, #loc131])
#loc386 = loc(fused[#loc133, #loc127])
#loc387 = loc(fused[#loc134, #loc135])
#loc388 = loc(fused[#loc136, #loc137])
#loc389 = loc(fused[#loc138, #loc135])
#loc390 = loc(fused[#loc139, #loc140])
#loc391 = loc(fused[#loc145, #loc144])
#loc392 = loc(fused[#loc146, #loc147])
#loc393 = loc(fused[#loc148, #loc149])
#loc394 = loc(fused[#loc150, #loc151])
#loc395 = loc(fused[#loc152, #loc153])
#loc396 = loc(fused[#loc155, #loc156])
#loc397 = loc(fused[#loc157, #loc158])
#loc398 = loc(fused[#loc157, #loc159])
#loc399 = loc(fused[#loc160, #loc161])
#loc400 = loc(fused[#loc163, #loc162])
#loc401 = loc(fused[#loc164, #loc165])
#loc402 = loc(fused[#loc167, #loc166])
#loc403 = loc(fused[#loc168, #loc169])
#loc404 = loc(fused[#loc171, #loc165])
#loc405 = loc(fused[#loc172, #loc173])
#loc406 = loc(fused[#loc174, #loc175])
#loc407 = loc(fused[#loc176, #loc177])
#loc408 = loc(fused[#loc178, #loc179])
#loc409 = loc(fused[#loc180, #loc181])
#loc410 = loc(fused[#loc182, #loc183])
#loc411 = loc(fused[#loc184, #loc185])
#loc412 = loc(fused[#loc190, #loc191])
#loc413 = loc(fused[#loc192, #loc193])
#loc414 = loc(fused[#loc194, #loc195])
#loc415 = loc(fused[#loc196, #loc193])
#loc416 = loc(fused[#loc198, #loc199])
#loc417 = loc(fused[#loc201, #loc202])
#loc418 = loc(fused[#loc203, #loc204])
#loc419 = loc(fused[#loc206, #loc205])
#loc420 = loc(fused[#loc209, #loc210])
#loc421 = loc(fused[#loc213, #loc214])
#loc422 = loc(fused[#loc215, #loc216])
#loc423 = loc(fused[#loc218, #loc219])
#loc424 = loc(fused[#loc220, #loc221])
#loc425 = loc(fused[#loc222, #loc223])
#loc426 = loc(fused[#loc224, #loc216])
#loc427 = loc(fused[#loc228, #loc229])
#loc428 = loc(fused[#loc232, #loc233])
#loc429 = loc(fused[#loc234, #loc235])
#loc430 = loc(fused[#loc236, #loc237])
#loc431 = loc(fused[#loc239, #loc240])
#loc432 = loc(fused[#loc241, #loc235])
#loc433 = loc(fused[#loc245, #loc243])
#loc434 = loc(fused[#loc248, #loc249])
#loc435 = loc(fused[#loc251, #loc252])
#loc436 = loc(fused[#loc253, #loc254])
#loc437 = loc(fused[#loc255, #loc252])
#loc438 = loc(fused[#loc259, #loc258])
#loc439 = loc(fused[#loc260, #loc261])
#loc440 = loc(fused[#loc263, #loc262])
#loc441 = loc(fused[#loc264, #loc265])
#loc442 = loc(fused[#loc267, #loc261])
#loc443 = loc(fused[#loc268, #loc269])
#loc444 = loc(fused[#loc270, #loc271])
#loc445 = loc(fused[#loc272, #loc269])
#loc446 = loc(fused[#loc273, #loc274])
#loc447 = loc(fused[#loc276, #loc277])
#loc448 = loc(fused[#loc275, #loc278])
#loc449 = loc(fused[#loc279, #loc280, #loc281, #loc274])
#loc450 = loc(fused[#loc282, #loc283])
#loc451 = loc(fused[#loc289, #loc288])
#loc452 = loc(fused[#loc290, #loc291])
#loc453 = loc(fused[#loc292, #loc293])
#loc454 = loc(fused[#loc292, #loc294])
#loc455 = loc(fused[#loc295, #loc296])
#loc456 = loc(fused[#loc298, #loc297])
#loc457 = loc(fused[#loc299, #loc300])
#loc458 = loc(fused[#loc302, #loc301])
#loc459 = loc(fused[#loc303, #loc304])
#loc460 = loc(fused[#loc306, #loc300])
#loc461 = loc(fused[#loc309, #loc307])
#loc462 = loc(fused[#loc311, #loc310])
#loc463 = loc(fused[#loc312, #loc313])
#loc464 = loc(fused[#loc315, #loc314])
#loc465 = loc(fused[#loc316, #loc317])
#loc466 = loc(fused[#loc319, #loc313])
#loc467 = loc(fused[#loc320, #loc321])
#loc468 = loc(fused[#loc322, #loc323])
#loc469 = loc(fused[#loc324, #loc321])
#loc470 = loc(fused[#loc325, #loc326])
#loc471 = loc(fused[#loc331, #loc330])
