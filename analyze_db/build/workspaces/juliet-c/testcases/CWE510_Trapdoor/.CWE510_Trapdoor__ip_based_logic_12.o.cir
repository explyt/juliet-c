!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc475)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc476)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc477)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc478)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc479)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc480)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc481)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc482)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"192.168.30.123\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc17)
  cir.func private @inet_ntoa(!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc483)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc484)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc22)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc23)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc485)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc26)
  cir.func private @close(!s32i) -> !s32i loc(#loc486)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_12_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc489)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc489)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc33)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc33)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc492)
          %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc493)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc494)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc495)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc496)
          %9 = cir.const #cir.int<16> : !u64i loc(#loc497)
          %10 = cir.cast(integral, %9 : !u64i), !s32i loc(#loc497)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc494)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc46)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc46)
          cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc495)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc48)
          %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc48)
          cir.store %14, %8 : !s32i, !cir.ptr<!s32i> loc(#loc496)
          cir.scope {
            cir.do {
              cir.scope {
                %15 = cir.const #cir.int<2> : !s32i loc(#loc54)
                %16 = cir.const #cir.int<1> : !s32i loc(#loc55)
                %17 = cir.const #cir.int<6> : !s32i loc(#loc56)
                %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc57)
                cir.store %18, %7 : !s32i, !cir.ptr<!s32i> loc(#loc500)
                cir.scope {
                  %37 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc62)
                  %38 = cir.const #cir.int<1> : !s32i loc(#loc63)
                  %39 = cir.unary(minus, %38) nsw : !s32i, !s32i loc(#loc63)
                  %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc502)
                  cir.if %40 {
                    cir.break loc(#loc65)
                  } loc(#loc503)
                } loc(#loc501)
                %19 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc504)
                %20 = cir.const #cir.int<0> : !s32i loc(#loc68)
                %21 = cir.const #cir.int<16> : !u64i loc(#loc505)
                cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc506)
                %22 = cir.const #cir.int<2> : !s32i loc(#loc73)
                %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc73)
                %24 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
                cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc507)
                %25 = cir.const #cir.int<0> : !s32i loc(#loc76)
                %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc76)
                %27 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
                %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
                cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc508)
                %29 = cir.const #cir.int<20000> : !s32i loc(#loc80)
                %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc80)
                %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc81)
                %32 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
                cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc509)
                cir.scope {
                  %37 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc87)
                  %38 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc511)
                  %39 = cir.const #cir.int<16> : !u64i loc(#loc512)
                  %40 = cir.cast(integral, %39 : !u64i), !u32i loc(#loc512)
                  %41 = cir.call @bind(%37, %38, %40) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc92)
                  %42 = cir.const #cir.int<1> : !s32i loc(#loc93)
                  %43 = cir.unary(minus, %42) nsw : !s32i, !s32i loc(#loc93)
                  %44 = cir.cmp(eq, %41, %43) : !s32i, !cir.bool loc(#loc513)
                  cir.if %44 {
                    cir.break loc(#loc95)
                  } loc(#loc514)
                } loc(#loc510)
                cir.scope {
                  %37 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc98)
                  %38 = cir.const #cir.int<5> : !s32i loc(#loc99)
                  %39 = cir.call @listen(%37, %38) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc100)
                  %40 = cir.const #cir.int<1> : !s32i loc(#loc101)
                  %41 = cir.unary(minus, %40) nsw : !s32i, !s32i loc(#loc101)
                  %42 = cir.cmp(eq, %39, %41) : !s32i, !cir.bool loc(#loc516)
                  cir.if %42 {
                    cir.break loc(#loc103)
                  } loc(#loc517)
                } loc(#loc515)
                %33 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc104)
                %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc105)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc106)
                %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc107)
                cir.store %36, %8 : !s32i, !cir.ptr<!s32i> loc(#loc518)
                cir.scope {
                  %37 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc112)
                  %38 = cir.const #cir.int<1> : !s32i loc(#loc113)
                  %39 = cir.unary(minus, %38) nsw : !s32i, !s32i loc(#loc113)
                  %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc520)
                  cir.if %40 {
                    cir.break loc(#loc115)
                  } loc(#loc521)
                } loc(#loc519)
                cir.scope {
                  %37 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc118)
                  %38 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc523)
                  %39 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc524)
                  %40 = cir.call @getsockname(%37, %38, %39) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc123)
                  %41 = cir.const #cir.int<1> : !s32i loc(#loc124)
                  %42 = cir.unary(minus, %41) nsw : !s32i, !s32i loc(#loc125)
                  %43 = cir.cmp(eq, %40, %42) : !s32i, !cir.bool loc(#loc525)
                  cir.if %43 {
                    cir.break loc(#loc127)
                  } loc(#loc526)
                } loc(#loc522)
                cir.scope {
                  %37 = cir.get_global @strcmp : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i>> loc(#loc130)
                  %38 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc17)
                  %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc17)
                  %40 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
                  %41 = cir.load %40 : !cir.ptr<!ty_in_addr>, !ty_in_addr loc(#loc131)
                  %42 = cir.call @inet_ntoa(%41) : (!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc131)
                  %43 = cir.call @strcmp(%39, %42) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc130)
                  %44 = cir.const #cir.int<0> : !s32i loc(#loc132)
                  %45 = cir.cmp(eq, %43, %44) : !s32i, !cir.bool loc(#loc528)
                  cir.if %45 {
                    cir.scope {
                      %46 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc138)
                      %47 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc22)
                      %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc22)
                      %49 = cir.cast(bitcast, %48 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc22)
                      %50 = cir.const #cir.int<15> : !u64i loc(#loc531)
                      %51 = cir.const #cir.int<0> : !s32i loc(#loc141)
                      %52 = cir.call @send(%46, %49, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc142)
                      %53 = cir.const #cir.int<1> : !s32i loc(#loc143)
                      %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc143)
                      %55 = cir.cast(integral, %54 : !s32i), !s64i loc(#loc143)
                      %56 = cir.cmp(eq, %52, %55) : !s64i, !cir.bool loc(#loc532)
                      cir.if %56 {
                        cir.break loc(#loc145)
                      } loc(#loc533)
                    } loc(#loc530)
                  } else {
                    cir.scope {
                      %46 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc148)
                      %47 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc23)
                      %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc23)
                      %49 = cir.cast(bitcast, %48 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc23)
                      %50 = cir.const #cir.int<8> : !u64i loc(#loc535)
                      %51 = cir.const #cir.int<0> : !s32i loc(#loc151)
                      %52 = cir.call @send(%46, %49, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc152)
                      %53 = cir.const #cir.int<1> : !s32i loc(#loc153)
                      %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc153)
                      %55 = cir.cast(integral, %54 : !s32i), !s64i loc(#loc153)
                      %56 = cir.cmp(eq, %52, %55) : !s64i, !cir.bool loc(#loc536)
                      cir.if %56 {
                        %57 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc26)
                        %58 = cir.cast(array_to_ptrdecay, %57 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc26)
                        cir.call @printLine(%58) : (!cir.ptr<!s8i>) -> () loc(#loc155)
                      } loc(#loc537)
                    } loc(#loc534)
                  } loc(#loc529)
                } loc(#loc527)
              } loc(#loc499)
              cir.yield loc(#loc51)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc156)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc156)
              cir.condition(%16) loc(#loc156)
            } loc(#loc498)
          } loc(#loc498)
          cir.scope {
            %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc159)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc160)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc160)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc539)
            cir.if %18 {
              %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc162)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc163)
            } loc(#loc540)
          } loc(#loc538)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc166)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc167)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc167)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc542)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc169)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc170)
            } loc(#loc543)
          } loc(#loc541)
        } loc(#loc491)
      } else {
        cir.scope {
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc545)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc546)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc547)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc176)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc176)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc546)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc178)
          %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc178)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc547)
          cir.scope {
            cir.do {
              cir.scope {
                %11 = cir.const #cir.int<2> : !s32i loc(#loc183)
                %12 = cir.const #cir.int<1> : !s32i loc(#loc184)
                %13 = cir.const #cir.int<6> : !s32i loc(#loc185)
                %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc186)
                cir.store %14, %5 : !s32i, !cir.ptr<!s32i> loc(#loc550)
                cir.scope {
                  %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc191)
                  %34 = cir.const #cir.int<1> : !s32i loc(#loc192)
                  %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc192)
                  %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc552)
                  cir.if %36 {
                    cir.break loc(#loc194)
                  } loc(#loc553)
                } loc(#loc551)
                %15 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc554)
                %16 = cir.const #cir.int<0> : !s32i loc(#loc197)
                %17 = cir.const #cir.int<16> : !u64i loc(#loc555)
                cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc556)
                %18 = cir.const #cir.int<2> : !s32i loc(#loc202)
                %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc202)
                %20 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
                cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc557)
                %21 = cir.const #cir.int<0> : !s32i loc(#loc204)
                %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc204)
                %23 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
                %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
                cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc558)
                %25 = cir.const #cir.int<20000> : !s32i loc(#loc206)
                %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc206)
                %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc207)
                %28 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
                cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc559)
                cir.scope {
                  %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc212)
                  %34 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc561)
                  %35 = cir.const #cir.int<16> : !u64i loc(#loc562)
                  %36 = cir.cast(integral, %35 : !u64i), !u32i loc(#loc562)
                  %37 = cir.call @bind(%33, %34, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc217)
                  %38 = cir.const #cir.int<1> : !s32i loc(#loc218)
                  %39 = cir.unary(minus, %38) nsw : !s32i, !s32i loc(#loc218)
                  %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc563)
                  cir.if %40 {
                    cir.break loc(#loc220)
                  } loc(#loc564)
                } loc(#loc560)
                cir.scope {
                  %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc223)
                  %34 = cir.const #cir.int<5> : !s32i loc(#loc224)
                  %35 = cir.call @listen(%33, %34) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc225)
                  %36 = cir.const #cir.int<1> : !s32i loc(#loc226)
                  %37 = cir.unary(minus, %36) nsw : !s32i, !s32i loc(#loc226)
                  %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc566)
                  cir.if %38 {
                    cir.break loc(#loc228)
                  } loc(#loc567)
                } loc(#loc565)
                %29 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc229)
                %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc230)
                %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc231)
                %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc232)
                cir.store %32, %6 : !s32i, !cir.ptr<!s32i> loc(#loc568)
                cir.scope {
                  %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc237)
                  %34 = cir.const #cir.int<1> : !s32i loc(#loc238)
                  %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc238)
                  %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc570)
                  cir.if %36 {
                    cir.break loc(#loc240)
                  } loc(#loc571)
                } loc(#loc569)
                cir.scope {
                  %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc243)
                  %34 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc244)
                  %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc244)
                  %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc244)
                  %37 = cir.const #cir.int<8> : !u64i loc(#loc573)
                  %38 = cir.const #cir.int<0> : !s32i loc(#loc247)
                  %39 = cir.call @send(%33, %36, %37, %38) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc248)
                  %40 = cir.const #cir.int<1> : !s32i loc(#loc249)
                  %41 = cir.unary(minus, %40) nsw : !s32i, !s32i loc(#loc249)
                  %42 = cir.cast(integral, %41 : !s32i), !s64i loc(#loc249)
                  %43 = cir.cmp(eq, %39, %42) : !s64i, !cir.bool loc(#loc574)
                  cir.if %43 {
                    %44 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc251)
                    %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc251)
                    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc252)
                  } loc(#loc575)
                } loc(#loc572)
              } loc(#loc549)
              cir.yield loc(#loc180)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc253)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc253)
              cir.condition(%12) loc(#loc253)
            } loc(#loc548)
          } loc(#loc548)
          cir.scope {
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc256)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc257)
            %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc257)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc577)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc259)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc260)
            } loc(#loc578)
          } loc(#loc576)
          cir.scope {
            %11 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc263)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc264)
            %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc264)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc580)
            cir.if %14 {
              %15 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc266)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc267)
            } loc(#loc581)
          } loc(#loc579)
        } loc(#loc544)
      } loc(#loc490)
    } loc(#loc488)
    cir.return loc(#loc30)
  } loc(#loc487)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc583)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc270)
    cir.return loc(#loc269)
  } loc(#loc582)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc586)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc586)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc276)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc276)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc589)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc590)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc591)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc286)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc286)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc590)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc288)
          %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc288)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc591)
          cir.scope {
            cir.do {
              cir.scope {
                %11 = cir.const #cir.int<2> : !s32i loc(#loc293)
                %12 = cir.const #cir.int<1> : !s32i loc(#loc294)
                %13 = cir.const #cir.int<6> : !s32i loc(#loc295)
                %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc296)
                cir.store %14, %5 : !s32i, !cir.ptr<!s32i> loc(#loc594)
                cir.scope {
                  %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc301)
                  %34 = cir.const #cir.int<1> : !s32i loc(#loc302)
                  %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc302)
                  %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc596)
                  cir.if %36 {
                    cir.break loc(#loc304)
                  } loc(#loc597)
                } loc(#loc595)
                %15 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc598)
                %16 = cir.const #cir.int<0> : !s32i loc(#loc307)
                %17 = cir.const #cir.int<16> : !u64i loc(#loc599)
                cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc600)
                %18 = cir.const #cir.int<2> : !s32i loc(#loc312)
                %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc312)
                %20 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
                cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc601)
                %21 = cir.const #cir.int<0> : !s32i loc(#loc314)
                %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc314)
                %23 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
                %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
                cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc602)
                %25 = cir.const #cir.int<20000> : !s32i loc(#loc316)
                %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc316)
                %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc317)
                %28 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
                cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc603)
                cir.scope {
                  %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc322)
                  %34 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc605)
                  %35 = cir.const #cir.int<16> : !u64i loc(#loc606)
                  %36 = cir.cast(integral, %35 : !u64i), !u32i loc(#loc606)
                  %37 = cir.call @bind(%33, %34, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc327)
                  %38 = cir.const #cir.int<1> : !s32i loc(#loc328)
                  %39 = cir.unary(minus, %38) nsw : !s32i, !s32i loc(#loc328)
                  %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc607)
                  cir.if %40 {
                    cir.break loc(#loc330)
                  } loc(#loc608)
                } loc(#loc604)
                cir.scope {
                  %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc333)
                  %34 = cir.const #cir.int<5> : !s32i loc(#loc334)
                  %35 = cir.call @listen(%33, %34) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc335)
                  %36 = cir.const #cir.int<1> : !s32i loc(#loc336)
                  %37 = cir.unary(minus, %36) nsw : !s32i, !s32i loc(#loc336)
                  %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc610)
                  cir.if %38 {
                    cir.break loc(#loc338)
                  } loc(#loc611)
                } loc(#loc609)
                %29 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc339)
                %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc340)
                %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc341)
                %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc342)
                cir.store %32, %6 : !s32i, !cir.ptr<!s32i> loc(#loc612)
                cir.scope {
                  %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc347)
                  %34 = cir.const #cir.int<1> : !s32i loc(#loc348)
                  %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc348)
                  %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc614)
                  cir.if %36 {
                    cir.break loc(#loc350)
                  } loc(#loc615)
                } loc(#loc613)
                cir.scope {
                  %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc353)
                  %34 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc354)
                  %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc354)
                  %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc354)
                  %37 = cir.const #cir.int<8> : !u64i loc(#loc617)
                  %38 = cir.const #cir.int<0> : !s32i loc(#loc357)
                  %39 = cir.call @send(%33, %36, %37, %38) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc358)
                  %40 = cir.const #cir.int<1> : !s32i loc(#loc359)
                  %41 = cir.unary(minus, %40) nsw : !s32i, !s32i loc(#loc359)
                  %42 = cir.cast(integral, %41 : !s32i), !s64i loc(#loc359)
                  %43 = cir.cmp(eq, %39, %42) : !s64i, !cir.bool loc(#loc618)
                  cir.if %43 {
                    %44 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc361)
                    %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc361)
                    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc362)
                  } loc(#loc619)
                } loc(#loc616)
              } loc(#loc593)
              cir.yield loc(#loc290)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc363)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc363)
              cir.condition(%12) loc(#loc363)
            } loc(#loc592)
          } loc(#loc592)
          cir.scope {
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc366)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc367)
            %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc367)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc621)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc369)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc370)
            } loc(#loc622)
          } loc(#loc620)
          cir.scope {
            %11 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc373)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc374)
            %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc374)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc624)
            cir.if %14 {
              %15 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc376)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc377)
            } loc(#loc625)
          } loc(#loc623)
        } loc(#loc588)
      } else {
        cir.scope {
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc627)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc628)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc629)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc383)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc383)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc628)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc385)
          %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc385)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc629)
          cir.scope {
            cir.do {
              cir.scope {
                %11 = cir.const #cir.int<2> : !s32i loc(#loc390)
                %12 = cir.const #cir.int<1> : !s32i loc(#loc391)
                %13 = cir.const #cir.int<6> : !s32i loc(#loc392)
                %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc393)
                cir.store %14, %5 : !s32i, !cir.ptr<!s32i> loc(#loc632)
                cir.scope {
                  %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc398)
                  %34 = cir.const #cir.int<1> : !s32i loc(#loc399)
                  %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc399)
                  %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc634)
                  cir.if %36 {
                    cir.break loc(#loc401)
                  } loc(#loc635)
                } loc(#loc633)
                %15 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc636)
                %16 = cir.const #cir.int<0> : !s32i loc(#loc404)
                %17 = cir.const #cir.int<16> : !u64i loc(#loc637)
                cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc638)
                %18 = cir.const #cir.int<2> : !s32i loc(#loc409)
                %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc409)
                %20 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
                cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc639)
                %21 = cir.const #cir.int<0> : !s32i loc(#loc411)
                %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc411)
                %23 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
                %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
                cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc640)
                %25 = cir.const #cir.int<20000> : !s32i loc(#loc413)
                %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc413)
                %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc414)
                %28 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
                cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc641)
                cir.scope {
                  %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc419)
                  %34 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc643)
                  %35 = cir.const #cir.int<16> : !u64i loc(#loc644)
                  %36 = cir.cast(integral, %35 : !u64i), !u32i loc(#loc644)
                  %37 = cir.call @bind(%33, %34, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc424)
                  %38 = cir.const #cir.int<1> : !s32i loc(#loc425)
                  %39 = cir.unary(minus, %38) nsw : !s32i, !s32i loc(#loc425)
                  %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc645)
                  cir.if %40 {
                    cir.break loc(#loc427)
                  } loc(#loc646)
                } loc(#loc642)
                cir.scope {
                  %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc430)
                  %34 = cir.const #cir.int<5> : !s32i loc(#loc431)
                  %35 = cir.call @listen(%33, %34) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc432)
                  %36 = cir.const #cir.int<1> : !s32i loc(#loc433)
                  %37 = cir.unary(minus, %36) nsw : !s32i, !s32i loc(#loc433)
                  %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc648)
                  cir.if %38 {
                    cir.break loc(#loc435)
                  } loc(#loc649)
                } loc(#loc647)
                %29 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc436)
                %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc437)
                %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc438)
                %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc439)
                cir.store %32, %6 : !s32i, !cir.ptr<!s32i> loc(#loc650)
                cir.scope {
                  %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc444)
                  %34 = cir.const #cir.int<1> : !s32i loc(#loc445)
                  %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc445)
                  %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc652)
                  cir.if %36 {
                    cir.break loc(#loc447)
                  } loc(#loc653)
                } loc(#loc651)
                cir.scope {
                  %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc450)
                  %34 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc451)
                  %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc451)
                  %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc451)
                  %37 = cir.const #cir.int<8> : !u64i loc(#loc655)
                  %38 = cir.const #cir.int<0> : !s32i loc(#loc454)
                  %39 = cir.call @send(%33, %36, %37, %38) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc455)
                  %40 = cir.const #cir.int<1> : !s32i loc(#loc456)
                  %41 = cir.unary(minus, %40) nsw : !s32i, !s32i loc(#loc456)
                  %42 = cir.cast(integral, %41 : !s32i), !s64i loc(#loc456)
                  %43 = cir.cmp(eq, %39, %42) : !s64i, !cir.bool loc(#loc656)
                  cir.if %43 {
                    %44 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc458)
                    %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc458)
                    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc459)
                  } loc(#loc657)
                } loc(#loc654)
              } loc(#loc631)
              cir.yield loc(#loc387)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc460)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc460)
              cir.condition(%12) loc(#loc460)
            } loc(#loc630)
          } loc(#loc630)
          cir.scope {
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc463)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc464)
            %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc464)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc659)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc466)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc467)
            } loc(#loc660)
          } loc(#loc658)
          cir.scope {
            %11 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc470)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc471)
            %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc471)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc662)
            cir.if %14 {
              %15 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc473)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc474)
            } loc(#loc663)
          } loc(#loc661)
        } loc(#loc626)
      } loc(#loc587)
    } loc(#loc585)
    cir.return loc(#loc273)
  } loc(#loc584)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc4 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":402:1)
#loc6 = loc("/usr/include/netinet/in.h":403:40)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":116:1)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":117:33)
#loc15 = loc("/usr/include/string.h":156:1)
#loc16 = loc("/usr/include/string.h":157:33)
#loc17 = loc("CWE510_Trapdoor__ip_based_logic_12.c":90:28)
#loc18 = loc("/usr/include/arpa/inet.h":53:1)
#loc19 = loc("/usr/include/arpa/inet.h":53:46)
#loc20 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":138:1)
#loc21 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":138:74)
#loc22 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:44)
#loc23 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:44)
#loc24 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc25 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc26 = loc("CWE510_Trapdoor__ip_based_logic_12.c":102:35)
#loc27 = loc("/usr/include/unistd.h":358:1)
#loc28 = loc("/usr/include/unistd.h":358:27)
#loc29 = loc("CWE510_Trapdoor__ip_based_logic_12.c":41:1)
#loc30 = loc("CWE510_Trapdoor__ip_based_logic_12.c":187:1)
#loc31 = loc("CWE510_Trapdoor__ip_based_logic_12.c":43:5)
#loc32 = loc("CWE510_Trapdoor__ip_based_logic_12.c":186:5)
#loc33 = loc("CWE510_Trapdoor__ip_based_logic_12.c":43:8)
#loc34 = loc("CWE510_Trapdoor__ip_based_logic_12.c":43:33)
#loc35 = loc("CWE510_Trapdoor__ip_based_logic_12.c":44:5)
#loc36 = loc("CWE510_Trapdoor__ip_based_logic_12.c":122:5)
#loc37 = loc("CWE510_Trapdoor__ip_based_logic_12.c":124:5)
#loc38 = loc("CWE510_Trapdoor__ip_based_logic_12.c":45:9)
#loc39 = loc("CWE510_Trapdoor__ip_based_logic_12.c":121:9)
#loc40 = loc("CWE510_Trapdoor__ip_based_logic_12.c":50:13)
#loc41 = loc("CWE510_Trapdoor__ip_based_logic_12.c":50:32)
#loc42 = loc("CWE510_Trapdoor__ip_based_logic_12.c":50:41)
#loc43 = loc("CWE510_Trapdoor__ip_based_logic_12.c":51:13)
#loc44 = loc("CWE510_Trapdoor__ip_based_logic_12.c":51:56)
#loc45 = loc("CWE510_Trapdoor__ip_based_logic_12.c":52:13)
#loc46 = loc("CWE510_Trapdoor__ip_based_logic_12.c":52:35)
#loc47 = loc("CWE510_Trapdoor__ip_based_logic_12.c":53:13)
#loc48 = loc("CWE510_Trapdoor__ip_based_logic_12.c":53:35)
#loc49 = loc("CWE510_Trapdoor__ip_based_logic_12.c":51:36)
#loc50 = loc("CWE510_Trapdoor__ip_based_logic_12.c":54:13)
#loc51 = loc("CWE510_Trapdoor__ip_based_logic_12.c":106:21)
#loc52 = loc("CWE510_Trapdoor__ip_based_logic_12.c":55:13)
#loc53 = loc("CWE510_Trapdoor__ip_based_logic_12.c":105:13)
#loc54 = loc("CWE510_Trapdoor__ip_based_logic_12.c":63:39)
#loc55 = loc("CWE510_Trapdoor__ip_based_logic_12.c":63:48)
#loc56 = loc("CWE510_Trapdoor__ip_based_logic_12.c":63:61)
#loc57 = loc("CWE510_Trapdoor__ip_based_logic_12.c":63:32)
#loc58 = loc("CWE510_Trapdoor__ip_based_logic_12.c":63:17)
#loc59 = loc("CWE510_Trapdoor__ip_based_logic_12.c":63:72)
#loc60 = loc("CWE510_Trapdoor__ip_based_logic_12.c":64:17)
#loc61 = loc("CWE510_Trapdoor__ip_based_logic_12.c":67:17)
#loc62 = loc("CWE510_Trapdoor__ip_based_logic_12.c":64:21)
#loc63 = loc("CWE510_Trapdoor__ip_based_logic_12.c":64:37)
#loc64 = loc("CWE510_Trapdoor__ip_based_logic_12.c":65:17)
#loc65 = loc("CWE510_Trapdoor__ip_based_logic_12.c":66:21)
#loc66 = loc("CWE510_Trapdoor__ip_based_logic_12.c":68:24)
#loc67 = loc("CWE510_Trapdoor__ip_based_logic_12.c":68:25)
#loc68 = loc("CWE510_Trapdoor__ip_based_logic_12.c":68:34)
#loc69 = loc("CWE510_Trapdoor__ip_based_logic_12.c":68:37)
#loc70 = loc("CWE510_Trapdoor__ip_based_logic_12.c":68:51)
#loc71 = loc("CWE510_Trapdoor__ip_based_logic_12.c":68:17)
#loc72 = loc("CWE510_Trapdoor__ip_based_logic_12.c":68:52)
#loc73 = loc("CWE510_Trapdoor__ip_based_logic_12.c":69:38)
#loc74 = loc("/usr/include/netinet/in.h":249:5)
#loc75 = loc("CWE510_Trapdoor__ip_based_logic_12.c":69:17)
#loc76 = loc("CWE510_Trapdoor__ip_based_logic_12.c":70:43)
#loc77 = loc("/usr/include/netinet/in.h":251:20)
#loc78 = loc("/usr/include/netinet/in.h":33:15)
#loc79 = loc("CWE510_Trapdoor__ip_based_logic_12.c":70:17)
#loc80 = loc("CWE510_Trapdoor__ip_based_logic_12.c":71:42)
#loc81 = loc("CWE510_Trapdoor__ip_based_logic_12.c":71:36)
#loc82 = loc("/usr/include/netinet/in.h":250:15)
#loc83 = loc("CWE510_Trapdoor__ip_based_logic_12.c":71:17)
#loc84 = loc("CWE510_Trapdoor__ip_based_logic_12.c":71:47)
#loc85 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:17)
#loc86 = loc("CWE510_Trapdoor__ip_based_logic_12.c":75:17)
#loc87 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:26)
#loc88 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:58)
#loc89 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:59)
#loc90 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:68)
#loc91 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:82)
#loc92 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:21)
#loc93 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:88)
#loc94 = loc("CWE510_Trapdoor__ip_based_logic_12.c":73:17)
#loc95 = loc("CWE510_Trapdoor__ip_based_logic_12.c":74:21)
#loc96 = loc("CWE510_Trapdoor__ip_based_logic_12.c":76:17)
#loc97 = loc("CWE510_Trapdoor__ip_based_logic_12.c":79:17)
#loc98 = loc("CWE510_Trapdoor__ip_based_logic_12.c":76:28)
#loc99 = loc("CWE510_Trapdoor__ip_based_logic_12.c":76:42)
#loc100 = loc("CWE510_Trapdoor__ip_based_logic_12.c":76:21)
#loc101 = loc("CWE510_Trapdoor__ip_based_logic_12.c":76:48)
#loc102 = loc("CWE510_Trapdoor__ip_based_logic_12.c":77:17)
#loc103 = loc("CWE510_Trapdoor__ip_based_logic_12.c":78:21)
#loc104 = loc("CWE510_Trapdoor__ip_based_logic_12.c":80:39)
#loc105 = loc("CWE510_Trapdoor__ip_based_logic_12.c":80:53)
#loc106 = loc("CWE510_Trapdoor__ip_based_logic_12.c":80:59)
#loc107 = loc("CWE510_Trapdoor__ip_based_logic_12.c":80:32)
#loc108 = loc("CWE510_Trapdoor__ip_based_logic_12.c":80:17)
#loc109 = loc("CWE510_Trapdoor__ip_based_logic_12.c":80:63)
#loc110 = loc("CWE510_Trapdoor__ip_based_logic_12.c":81:17)
#loc111 = loc("CWE510_Trapdoor__ip_based_logic_12.c":84:17)
#loc112 = loc("CWE510_Trapdoor__ip_based_logic_12.c":81:21)
#loc113 = loc("CWE510_Trapdoor__ip_based_logic_12.c":81:37)
#loc114 = loc("CWE510_Trapdoor__ip_based_logic_12.c":82:17)
#loc115 = loc("CWE510_Trapdoor__ip_based_logic_12.c":83:21)
#loc116 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:17)
#loc117 = loc("CWE510_Trapdoor__ip_based_logic_12.c":88:17)
#loc118 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:33)
#loc119 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:66)
#loc120 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:67)
#loc121 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:82)
#loc122 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:83)
#loc123 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:21)
#loc124 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:105)
#loc125 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:104)
#loc126 = loc("CWE510_Trapdoor__ip_based_logic_12.c":86:17)
#loc127 = loc("CWE510_Trapdoor__ip_based_logic_12.c":87:21)
#loc128 = loc("CWE510_Trapdoor__ip_based_logic_12.c":90:17)
#loc129 = loc("CWE510_Trapdoor__ip_based_logic_12.c":104:17)
#loc130 = loc("CWE510_Trapdoor__ip_based_logic_12.c":90:21)
#loc131 = loc("CWE510_Trapdoor__ip_based_logic_12.c":90:46)
#loc132 = loc("CWE510_Trapdoor__ip_based_logic_12.c":90:84)
#loc133 = loc("CWE510_Trapdoor__ip_based_logic_12.c":91:17)
#loc134 = loc("CWE510_Trapdoor__ip_based_logic_12.c":97:17)
#loc135 = loc("CWE510_Trapdoor__ip_based_logic_12.c":99:17)
#loc136 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:21)
#loc137 = loc("CWE510_Trapdoor__ip_based_logic_12.c":96:21)
#loc138 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:30)
#loc139 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:59)
#loc140 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:79)
#loc141 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:82)
#loc142 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:25)
#loc143 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:89)
#loc144 = loc("CWE510_Trapdoor__ip_based_logic_12.c":93:21)
#loc145 = loc("CWE510_Trapdoor__ip_based_logic_12.c":95:25)
#loc146 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:21)
#loc147 = loc("CWE510_Trapdoor__ip_based_logic_12.c":103:21)
#loc148 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:30)
#loc149 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:61)
#loc150 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:83)
#loc151 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:86)
#loc152 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:25)
#loc153 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:92)
#loc154 = loc("CWE510_Trapdoor__ip_based_logic_12.c":101:21)
#loc155 = loc("CWE510_Trapdoor__ip_based_logic_12.c":102:25)
#loc156 = loc("CWE510_Trapdoor__ip_based_logic_12.c":106:20)
#loc157 = loc("CWE510_Trapdoor__ip_based_logic_12.c":107:13)
#loc158 = loc("CWE510_Trapdoor__ip_based_logic_12.c":110:13)
#loc159 = loc("CWE510_Trapdoor__ip_based_logic_12.c":107:17)
#loc160 = loc("CWE510_Trapdoor__ip_based_logic_12.c":107:33)
#loc161 = loc("CWE510_Trapdoor__ip_based_logic_12.c":108:13)
#loc162 = loc("CWE510_Trapdoor__ip_based_logic_12.c":109:30)
#loc163 = loc("CWE510_Trapdoor__ip_based_logic_12.c":109:17)
#loc164 = loc("CWE510_Trapdoor__ip_based_logic_12.c":111:13)
#loc165 = loc("CWE510_Trapdoor__ip_based_logic_12.c":114:13)
#loc166 = loc("CWE510_Trapdoor__ip_based_logic_12.c":111:17)
#loc167 = loc("CWE510_Trapdoor__ip_based_logic_12.c":111:33)
#loc168 = loc("CWE510_Trapdoor__ip_based_logic_12.c":112:13)
#loc169 = loc("CWE510_Trapdoor__ip_based_logic_12.c":113:30)
#loc170 = loc("CWE510_Trapdoor__ip_based_logic_12.c":113:17)
#loc171 = loc("CWE510_Trapdoor__ip_based_logic_12.c":125:9)
#loc172 = loc("CWE510_Trapdoor__ip_based_logic_12.c":185:9)
#loc173 = loc("CWE510_Trapdoor__ip_based_logic_12.c":130:13)
#loc174 = loc("CWE510_Trapdoor__ip_based_logic_12.c":130:32)
#loc175 = loc("CWE510_Trapdoor__ip_based_logic_12.c":131:13)
#loc176 = loc("CWE510_Trapdoor__ip_based_logic_12.c":131:35)
#loc177 = loc("CWE510_Trapdoor__ip_based_logic_12.c":132:13)
#loc178 = loc("CWE510_Trapdoor__ip_based_logic_12.c":132:35)
#loc179 = loc("CWE510_Trapdoor__ip_based_logic_12.c":133:13)
#loc180 = loc("CWE510_Trapdoor__ip_based_logic_12.c":170:21)
#loc181 = loc("CWE510_Trapdoor__ip_based_logic_12.c":134:13)
#loc182 = loc("CWE510_Trapdoor__ip_based_logic_12.c":169:13)
#loc183 = loc("CWE510_Trapdoor__ip_based_logic_12.c":142:39)
#loc184 = loc("CWE510_Trapdoor__ip_based_logic_12.c":142:48)
#loc185 = loc("CWE510_Trapdoor__ip_based_logic_12.c":142:61)
#loc186 = loc("CWE510_Trapdoor__ip_based_logic_12.c":142:32)
#loc187 = loc("CWE510_Trapdoor__ip_based_logic_12.c":142:17)
#loc188 = loc("CWE510_Trapdoor__ip_based_logic_12.c":142:72)
#loc189 = loc("CWE510_Trapdoor__ip_based_logic_12.c":143:17)
#loc190 = loc("CWE510_Trapdoor__ip_based_logic_12.c":146:17)
#loc191 = loc("CWE510_Trapdoor__ip_based_logic_12.c":143:21)
#loc192 = loc("CWE510_Trapdoor__ip_based_logic_12.c":143:37)
#loc193 = loc("CWE510_Trapdoor__ip_based_logic_12.c":144:17)
#loc194 = loc("CWE510_Trapdoor__ip_based_logic_12.c":145:21)
#loc195 = loc("CWE510_Trapdoor__ip_based_logic_12.c":147:24)
#loc196 = loc("CWE510_Trapdoor__ip_based_logic_12.c":147:25)
#loc197 = loc("CWE510_Trapdoor__ip_based_logic_12.c":147:34)
#loc198 = loc("CWE510_Trapdoor__ip_based_logic_12.c":147:37)
#loc199 = loc("CWE510_Trapdoor__ip_based_logic_12.c":147:51)
#loc200 = loc("CWE510_Trapdoor__ip_based_logic_12.c":147:17)
#loc201 = loc("CWE510_Trapdoor__ip_based_logic_12.c":147:52)
#loc202 = loc("CWE510_Trapdoor__ip_based_logic_12.c":148:38)
#loc203 = loc("CWE510_Trapdoor__ip_based_logic_12.c":148:17)
#loc204 = loc("CWE510_Trapdoor__ip_based_logic_12.c":149:43)
#loc205 = loc("CWE510_Trapdoor__ip_based_logic_12.c":149:17)
#loc206 = loc("CWE510_Trapdoor__ip_based_logic_12.c":150:42)
#loc207 = loc("CWE510_Trapdoor__ip_based_logic_12.c":150:36)
#loc208 = loc("CWE510_Trapdoor__ip_based_logic_12.c":150:17)
#loc209 = loc("CWE510_Trapdoor__ip_based_logic_12.c":150:47)
#loc210 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:17)
#loc211 = loc("CWE510_Trapdoor__ip_based_logic_12.c":154:17)
#loc212 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:26)
#loc213 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:58)
#loc214 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:59)
#loc215 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:68)
#loc216 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:82)
#loc217 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:21)
#loc218 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:88)
#loc219 = loc("CWE510_Trapdoor__ip_based_logic_12.c":152:17)
#loc220 = loc("CWE510_Trapdoor__ip_based_logic_12.c":153:21)
#loc221 = loc("CWE510_Trapdoor__ip_based_logic_12.c":155:17)
#loc222 = loc("CWE510_Trapdoor__ip_based_logic_12.c":158:17)
#loc223 = loc("CWE510_Trapdoor__ip_based_logic_12.c":155:28)
#loc224 = loc("CWE510_Trapdoor__ip_based_logic_12.c":155:42)
#loc225 = loc("CWE510_Trapdoor__ip_based_logic_12.c":155:21)
#loc226 = loc("CWE510_Trapdoor__ip_based_logic_12.c":155:48)
#loc227 = loc("CWE510_Trapdoor__ip_based_logic_12.c":156:17)
#loc228 = loc("CWE510_Trapdoor__ip_based_logic_12.c":157:21)
#loc229 = loc("CWE510_Trapdoor__ip_based_logic_12.c":159:39)
#loc230 = loc("CWE510_Trapdoor__ip_based_logic_12.c":159:53)
#loc231 = loc("CWE510_Trapdoor__ip_based_logic_12.c":159:59)
#loc232 = loc("CWE510_Trapdoor__ip_based_logic_12.c":159:32)
#loc233 = loc("CWE510_Trapdoor__ip_based_logic_12.c":159:17)
#loc234 = loc("CWE510_Trapdoor__ip_based_logic_12.c":159:63)
#loc235 = loc("CWE510_Trapdoor__ip_based_logic_12.c":160:17)
#loc236 = loc("CWE510_Trapdoor__ip_based_logic_12.c":163:17)
#loc237 = loc("CWE510_Trapdoor__ip_based_logic_12.c":160:21)
#loc238 = loc("CWE510_Trapdoor__ip_based_logic_12.c":160:37)
#loc239 = loc("CWE510_Trapdoor__ip_based_logic_12.c":161:17)
#loc240 = loc("CWE510_Trapdoor__ip_based_logic_12.c":162:21)
#loc241 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:17)
#loc242 = loc("CWE510_Trapdoor__ip_based_logic_12.c":168:17)
#loc243 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:26)
#loc244 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:40)
#loc245 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:57)
#loc246 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:79)
#loc247 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:82)
#loc248 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:21)
#loc249 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:88)
#loc250 = loc("CWE510_Trapdoor__ip_based_logic_12.c":166:17)
#loc251 = loc("CWE510_Trapdoor__ip_based_logic_12.c":167:31)
#loc252 = loc("CWE510_Trapdoor__ip_based_logic_12.c":167:21)
#loc253 = loc("CWE510_Trapdoor__ip_based_logic_12.c":170:20)
#loc254 = loc("CWE510_Trapdoor__ip_based_logic_12.c":171:13)
#loc255 = loc("CWE510_Trapdoor__ip_based_logic_12.c":174:13)
#loc256 = loc("CWE510_Trapdoor__ip_based_logic_12.c":171:17)
#loc257 = loc("CWE510_Trapdoor__ip_based_logic_12.c":171:33)
#loc258 = loc("CWE510_Trapdoor__ip_based_logic_12.c":172:13)
#loc259 = loc("CWE510_Trapdoor__ip_based_logic_12.c":173:30)
#loc260 = loc("CWE510_Trapdoor__ip_based_logic_12.c":173:17)
#loc261 = loc("CWE510_Trapdoor__ip_based_logic_12.c":175:13)
#loc262 = loc("CWE510_Trapdoor__ip_based_logic_12.c":178:13)
#loc263 = loc("CWE510_Trapdoor__ip_based_logic_12.c":175:17)
#loc264 = loc("CWE510_Trapdoor__ip_based_logic_12.c":175:33)
#loc265 = loc("CWE510_Trapdoor__ip_based_logic_12.c":176:13)
#loc266 = loc("CWE510_Trapdoor__ip_based_logic_12.c":177:30)
#loc267 = loc("CWE510_Trapdoor__ip_based_logic_12.c":177:17)
#loc268 = loc("CWE510_Trapdoor__ip_based_logic_12.c":326:1)
#loc269 = loc("CWE510_Trapdoor__ip_based_logic_12.c":329:1)
#loc270 = loc("CWE510_Trapdoor__ip_based_logic_12.c":328:5)
#loc271 = loc("CWE510_Trapdoor__ip_based_logic_12.c":328:11)
#loc272 = loc("CWE510_Trapdoor__ip_based_logic_12.c":194:1)
#loc273 = loc("CWE510_Trapdoor__ip_based_logic_12.c":324:1)
#loc274 = loc("CWE510_Trapdoor__ip_based_logic_12.c":196:5)
#loc275 = loc("CWE510_Trapdoor__ip_based_logic_12.c":323:5)
#loc276 = loc("CWE510_Trapdoor__ip_based_logic_12.c":196:8)
#loc277 = loc("CWE510_Trapdoor__ip_based_logic_12.c":196:33)
#loc278 = loc("CWE510_Trapdoor__ip_based_logic_12.c":197:5)
#loc279 = loc("CWE510_Trapdoor__ip_based_logic_12.c":259:5)
#loc280 = loc("CWE510_Trapdoor__ip_based_logic_12.c":261:5)
#loc281 = loc("CWE510_Trapdoor__ip_based_logic_12.c":198:9)
#loc282 = loc("CWE510_Trapdoor__ip_based_logic_12.c":258:9)
#loc283 = loc("CWE510_Trapdoor__ip_based_logic_12.c":203:13)
#loc284 = loc("CWE510_Trapdoor__ip_based_logic_12.c":203:32)
#loc285 = loc("CWE510_Trapdoor__ip_based_logic_12.c":204:13)
#loc286 = loc("CWE510_Trapdoor__ip_based_logic_12.c":204:35)
#loc287 = loc("CWE510_Trapdoor__ip_based_logic_12.c":205:13)
#loc288 = loc("CWE510_Trapdoor__ip_based_logic_12.c":205:35)
#loc289 = loc("CWE510_Trapdoor__ip_based_logic_12.c":206:13)
#loc290 = loc("CWE510_Trapdoor__ip_based_logic_12.c":243:21)
#loc291 = loc("CWE510_Trapdoor__ip_based_logic_12.c":207:13)
#loc292 = loc("CWE510_Trapdoor__ip_based_logic_12.c":242:13)
#loc293 = loc("CWE510_Trapdoor__ip_based_logic_12.c":215:39)
#loc294 = loc("CWE510_Trapdoor__ip_based_logic_12.c":215:48)
#loc295 = loc("CWE510_Trapdoor__ip_based_logic_12.c":215:61)
#loc296 = loc("CWE510_Trapdoor__ip_based_logic_12.c":215:32)
#loc297 = loc("CWE510_Trapdoor__ip_based_logic_12.c":215:17)
#loc298 = loc("CWE510_Trapdoor__ip_based_logic_12.c":215:72)
#loc299 = loc("CWE510_Trapdoor__ip_based_logic_12.c":216:17)
#loc300 = loc("CWE510_Trapdoor__ip_based_logic_12.c":219:17)
#loc301 = loc("CWE510_Trapdoor__ip_based_logic_12.c":216:21)
#loc302 = loc("CWE510_Trapdoor__ip_based_logic_12.c":216:37)
#loc303 = loc("CWE510_Trapdoor__ip_based_logic_12.c":217:17)
#loc304 = loc("CWE510_Trapdoor__ip_based_logic_12.c":218:21)
#loc305 = loc("CWE510_Trapdoor__ip_based_logic_12.c":220:24)
#loc306 = loc("CWE510_Trapdoor__ip_based_logic_12.c":220:25)
#loc307 = loc("CWE510_Trapdoor__ip_based_logic_12.c":220:34)
#loc308 = loc("CWE510_Trapdoor__ip_based_logic_12.c":220:37)
#loc309 = loc("CWE510_Trapdoor__ip_based_logic_12.c":220:51)
#loc310 = loc("CWE510_Trapdoor__ip_based_logic_12.c":220:17)
#loc311 = loc("CWE510_Trapdoor__ip_based_logic_12.c":220:52)
#loc312 = loc("CWE510_Trapdoor__ip_based_logic_12.c":221:38)
#loc313 = loc("CWE510_Trapdoor__ip_based_logic_12.c":221:17)
#loc314 = loc("CWE510_Trapdoor__ip_based_logic_12.c":222:43)
#loc315 = loc("CWE510_Trapdoor__ip_based_logic_12.c":222:17)
#loc316 = loc("CWE510_Trapdoor__ip_based_logic_12.c":223:42)
#loc317 = loc("CWE510_Trapdoor__ip_based_logic_12.c":223:36)
#loc318 = loc("CWE510_Trapdoor__ip_based_logic_12.c":223:17)
#loc319 = loc("CWE510_Trapdoor__ip_based_logic_12.c":223:47)
#loc320 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:17)
#loc321 = loc("CWE510_Trapdoor__ip_based_logic_12.c":227:17)
#loc322 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:26)
#loc323 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:58)
#loc324 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:59)
#loc325 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:68)
#loc326 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:82)
#loc327 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:21)
#loc328 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:88)
#loc329 = loc("CWE510_Trapdoor__ip_based_logic_12.c":225:17)
#loc330 = loc("CWE510_Trapdoor__ip_based_logic_12.c":226:21)
#loc331 = loc("CWE510_Trapdoor__ip_based_logic_12.c":228:17)
#loc332 = loc("CWE510_Trapdoor__ip_based_logic_12.c":231:17)
#loc333 = loc("CWE510_Trapdoor__ip_based_logic_12.c":228:28)
#loc334 = loc("CWE510_Trapdoor__ip_based_logic_12.c":228:42)
#loc335 = loc("CWE510_Trapdoor__ip_based_logic_12.c":228:21)
#loc336 = loc("CWE510_Trapdoor__ip_based_logic_12.c":228:48)
#loc337 = loc("CWE510_Trapdoor__ip_based_logic_12.c":229:17)
#loc338 = loc("CWE510_Trapdoor__ip_based_logic_12.c":230:21)
#loc339 = loc("CWE510_Trapdoor__ip_based_logic_12.c":232:39)
#loc340 = loc("CWE510_Trapdoor__ip_based_logic_12.c":232:53)
#loc341 = loc("CWE510_Trapdoor__ip_based_logic_12.c":232:59)
#loc342 = loc("CWE510_Trapdoor__ip_based_logic_12.c":232:32)
#loc343 = loc("CWE510_Trapdoor__ip_based_logic_12.c":232:17)
#loc344 = loc("CWE510_Trapdoor__ip_based_logic_12.c":232:63)
#loc345 = loc("CWE510_Trapdoor__ip_based_logic_12.c":233:17)
#loc346 = loc("CWE510_Trapdoor__ip_based_logic_12.c":236:17)
#loc347 = loc("CWE510_Trapdoor__ip_based_logic_12.c":233:21)
#loc348 = loc("CWE510_Trapdoor__ip_based_logic_12.c":233:37)
#loc349 = loc("CWE510_Trapdoor__ip_based_logic_12.c":234:17)
#loc350 = loc("CWE510_Trapdoor__ip_based_logic_12.c":235:21)
#loc351 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:17)
#loc352 = loc("CWE510_Trapdoor__ip_based_logic_12.c":241:17)
#loc353 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:26)
#loc354 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:40)
#loc355 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:57)
#loc356 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:79)
#loc357 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:82)
#loc358 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:21)
#loc359 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:88)
#loc360 = loc("CWE510_Trapdoor__ip_based_logic_12.c":239:17)
#loc361 = loc("CWE510_Trapdoor__ip_based_logic_12.c":240:31)
#loc362 = loc("CWE510_Trapdoor__ip_based_logic_12.c":240:21)
#loc363 = loc("CWE510_Trapdoor__ip_based_logic_12.c":243:20)
#loc364 = loc("CWE510_Trapdoor__ip_based_logic_12.c":244:13)
#loc365 = loc("CWE510_Trapdoor__ip_based_logic_12.c":247:13)
#loc366 = loc("CWE510_Trapdoor__ip_based_logic_12.c":244:17)
#loc367 = loc("CWE510_Trapdoor__ip_based_logic_12.c":244:33)
#loc368 = loc("CWE510_Trapdoor__ip_based_logic_12.c":245:13)
#loc369 = loc("CWE510_Trapdoor__ip_based_logic_12.c":246:30)
#loc370 = loc("CWE510_Trapdoor__ip_based_logic_12.c":246:17)
#loc371 = loc("CWE510_Trapdoor__ip_based_logic_12.c":248:13)
#loc372 = loc("CWE510_Trapdoor__ip_based_logic_12.c":251:13)
#loc373 = loc("CWE510_Trapdoor__ip_based_logic_12.c":248:17)
#loc374 = loc("CWE510_Trapdoor__ip_based_logic_12.c":248:33)
#loc375 = loc("CWE510_Trapdoor__ip_based_logic_12.c":249:13)
#loc376 = loc("CWE510_Trapdoor__ip_based_logic_12.c":250:30)
#loc377 = loc("CWE510_Trapdoor__ip_based_logic_12.c":250:17)
#loc378 = loc("CWE510_Trapdoor__ip_based_logic_12.c":262:9)
#loc379 = loc("CWE510_Trapdoor__ip_based_logic_12.c":322:9)
#loc380 = loc("CWE510_Trapdoor__ip_based_logic_12.c":267:13)
#loc381 = loc("CWE510_Trapdoor__ip_based_logic_12.c":267:32)
#loc382 = loc("CWE510_Trapdoor__ip_based_logic_12.c":268:13)
#loc383 = loc("CWE510_Trapdoor__ip_based_logic_12.c":268:35)
#loc384 = loc("CWE510_Trapdoor__ip_based_logic_12.c":269:13)
#loc385 = loc("CWE510_Trapdoor__ip_based_logic_12.c":269:35)
#loc386 = loc("CWE510_Trapdoor__ip_based_logic_12.c":270:13)
#loc387 = loc("CWE510_Trapdoor__ip_based_logic_12.c":307:21)
#loc388 = loc("CWE510_Trapdoor__ip_based_logic_12.c":271:13)
#loc389 = loc("CWE510_Trapdoor__ip_based_logic_12.c":306:13)
#loc390 = loc("CWE510_Trapdoor__ip_based_logic_12.c":279:39)
#loc391 = loc("CWE510_Trapdoor__ip_based_logic_12.c":279:48)
#loc392 = loc("CWE510_Trapdoor__ip_based_logic_12.c":279:61)
#loc393 = loc("CWE510_Trapdoor__ip_based_logic_12.c":279:32)
#loc394 = loc("CWE510_Trapdoor__ip_based_logic_12.c":279:17)
#loc395 = loc("CWE510_Trapdoor__ip_based_logic_12.c":279:72)
#loc396 = loc("CWE510_Trapdoor__ip_based_logic_12.c":280:17)
#loc397 = loc("CWE510_Trapdoor__ip_based_logic_12.c":283:17)
#loc398 = loc("CWE510_Trapdoor__ip_based_logic_12.c":280:21)
#loc399 = loc("CWE510_Trapdoor__ip_based_logic_12.c":280:37)
#loc400 = loc("CWE510_Trapdoor__ip_based_logic_12.c":281:17)
#loc401 = loc("CWE510_Trapdoor__ip_based_logic_12.c":282:21)
#loc402 = loc("CWE510_Trapdoor__ip_based_logic_12.c":284:24)
#loc403 = loc("CWE510_Trapdoor__ip_based_logic_12.c":284:25)
#loc404 = loc("CWE510_Trapdoor__ip_based_logic_12.c":284:34)
#loc405 = loc("CWE510_Trapdoor__ip_based_logic_12.c":284:37)
#loc406 = loc("CWE510_Trapdoor__ip_based_logic_12.c":284:51)
#loc407 = loc("CWE510_Trapdoor__ip_based_logic_12.c":284:17)
#loc408 = loc("CWE510_Trapdoor__ip_based_logic_12.c":284:52)
#loc409 = loc("CWE510_Trapdoor__ip_based_logic_12.c":285:38)
#loc410 = loc("CWE510_Trapdoor__ip_based_logic_12.c":285:17)
#loc411 = loc("CWE510_Trapdoor__ip_based_logic_12.c":286:43)
#loc412 = loc("CWE510_Trapdoor__ip_based_logic_12.c":286:17)
#loc413 = loc("CWE510_Trapdoor__ip_based_logic_12.c":287:42)
#loc414 = loc("CWE510_Trapdoor__ip_based_logic_12.c":287:36)
#loc415 = loc("CWE510_Trapdoor__ip_based_logic_12.c":287:17)
#loc416 = loc("CWE510_Trapdoor__ip_based_logic_12.c":287:47)
#loc417 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:17)
#loc418 = loc("CWE510_Trapdoor__ip_based_logic_12.c":291:17)
#loc419 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:26)
#loc420 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:58)
#loc421 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:59)
#loc422 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:68)
#loc423 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:82)
#loc424 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:21)
#loc425 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:88)
#loc426 = loc("CWE510_Trapdoor__ip_based_logic_12.c":289:17)
#loc427 = loc("CWE510_Trapdoor__ip_based_logic_12.c":290:21)
#loc428 = loc("CWE510_Trapdoor__ip_based_logic_12.c":292:17)
#loc429 = loc("CWE510_Trapdoor__ip_based_logic_12.c":295:17)
#loc430 = loc("CWE510_Trapdoor__ip_based_logic_12.c":292:28)
#loc431 = loc("CWE510_Trapdoor__ip_based_logic_12.c":292:42)
#loc432 = loc("CWE510_Trapdoor__ip_based_logic_12.c":292:21)
#loc433 = loc("CWE510_Trapdoor__ip_based_logic_12.c":292:48)
#loc434 = loc("CWE510_Trapdoor__ip_based_logic_12.c":293:17)
#loc435 = loc("CWE510_Trapdoor__ip_based_logic_12.c":294:21)
#loc436 = loc("CWE510_Trapdoor__ip_based_logic_12.c":296:39)
#loc437 = loc("CWE510_Trapdoor__ip_based_logic_12.c":296:53)
#loc438 = loc("CWE510_Trapdoor__ip_based_logic_12.c":296:59)
#loc439 = loc("CWE510_Trapdoor__ip_based_logic_12.c":296:32)
#loc440 = loc("CWE510_Trapdoor__ip_based_logic_12.c":296:17)
#loc441 = loc("CWE510_Trapdoor__ip_based_logic_12.c":296:63)
#loc442 = loc("CWE510_Trapdoor__ip_based_logic_12.c":297:17)
#loc443 = loc("CWE510_Trapdoor__ip_based_logic_12.c":300:17)
#loc444 = loc("CWE510_Trapdoor__ip_based_logic_12.c":297:21)
#loc445 = loc("CWE510_Trapdoor__ip_based_logic_12.c":297:37)
#loc446 = loc("CWE510_Trapdoor__ip_based_logic_12.c":298:17)
#loc447 = loc("CWE510_Trapdoor__ip_based_logic_12.c":299:21)
#loc448 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:17)
#loc449 = loc("CWE510_Trapdoor__ip_based_logic_12.c":305:17)
#loc450 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:26)
#loc451 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:40)
#loc452 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:57)
#loc453 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:79)
#loc454 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:82)
#loc455 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:21)
#loc456 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:88)
#loc457 = loc("CWE510_Trapdoor__ip_based_logic_12.c":303:17)
#loc458 = loc("CWE510_Trapdoor__ip_based_logic_12.c":304:31)
#loc459 = loc("CWE510_Trapdoor__ip_based_logic_12.c":304:21)
#loc460 = loc("CWE510_Trapdoor__ip_based_logic_12.c":307:20)
#loc461 = loc("CWE510_Trapdoor__ip_based_logic_12.c":308:13)
#loc462 = loc("CWE510_Trapdoor__ip_based_logic_12.c":311:13)
#loc463 = loc("CWE510_Trapdoor__ip_based_logic_12.c":308:17)
#loc464 = loc("CWE510_Trapdoor__ip_based_logic_12.c":308:33)
#loc465 = loc("CWE510_Trapdoor__ip_based_logic_12.c":309:13)
#loc466 = loc("CWE510_Trapdoor__ip_based_logic_12.c":310:30)
#loc467 = loc("CWE510_Trapdoor__ip_based_logic_12.c":310:17)
#loc468 = loc("CWE510_Trapdoor__ip_based_logic_12.c":312:13)
#loc469 = loc("CWE510_Trapdoor__ip_based_logic_12.c":315:13)
#loc470 = loc("CWE510_Trapdoor__ip_based_logic_12.c":312:17)
#loc471 = loc("CWE510_Trapdoor__ip_based_logic_12.c":312:33)
#loc472 = loc("CWE510_Trapdoor__ip_based_logic_12.c":313:13)
#loc473 = loc("CWE510_Trapdoor__ip_based_logic_12.c":314:30)
#loc474 = loc("CWE510_Trapdoor__ip_based_logic_12.c":314:17)
#loc475 = loc(fused[#loc1, #loc2])
#loc476 = loc(fused[#loc3, #loc4])
#loc477 = loc(fused[#loc5, #loc6])
#loc478 = loc(fused[#loc7, #loc8])
#loc479 = loc(fused[#loc9, #loc10])
#loc480 = loc(fused[#loc11, #loc12])
#loc481 = loc(fused[#loc13, #loc14])
#loc482 = loc(fused[#loc15, #loc16])
#loc483 = loc(fused[#loc18, #loc19])
#loc484 = loc(fused[#loc20, #loc21])
#loc485 = loc(fused[#loc24, #loc25])
#loc486 = loc(fused[#loc27, #loc28])
#loc487 = loc(fused[#loc29, #loc30])
#loc488 = loc(fused[#loc31, #loc32])
#loc489 = loc(fused[#loc33, #loc34])
#loc490 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc491 = loc(fused[#loc38, #loc39])
#loc492 = loc(fused[#loc40, #loc41])
#loc493 = loc(fused[#loc40, #loc42])
#loc494 = loc(fused[#loc43, #loc44])
#loc495 = loc(fused[#loc45, #loc46])
#loc496 = loc(fused[#loc47, #loc48])
#loc497 = loc(fused[#loc49, #loc44])
#loc498 = loc(fused[#loc50, #loc51])
#loc499 = loc(fused[#loc52, #loc53])
#loc500 = loc(fused[#loc58, #loc59])
#loc501 = loc(fused[#loc60, #loc61])
#loc502 = loc(fused[#loc62, #loc63])
#loc503 = loc(fused[#loc64, #loc61])
#loc504 = loc(fused[#loc66, #loc67])
#loc505 = loc(fused[#loc69, #loc70])
#loc506 = loc(fused[#loc71, #loc72])
#loc507 = loc(fused[#loc75, #loc73])
#loc508 = loc(fused[#loc79, #loc76])
#loc509 = loc(fused[#loc83, #loc84])
#loc510 = loc(fused[#loc85, #loc86])
#loc511 = loc(fused[#loc88, #loc89])
#loc512 = loc(fused[#loc90, #loc91])
#loc513 = loc(fused[#loc92, #loc93])
#loc514 = loc(fused[#loc94, #loc86])
#loc515 = loc(fused[#loc96, #loc97])
#loc516 = loc(fused[#loc100, #loc101])
#loc517 = loc(fused[#loc102, #loc97])
#loc518 = loc(fused[#loc108, #loc109])
#loc519 = loc(fused[#loc110, #loc111])
#loc520 = loc(fused[#loc112, #loc113])
#loc521 = loc(fused[#loc114, #loc111])
#loc522 = loc(fused[#loc116, #loc117])
#loc523 = loc(fused[#loc119, #loc120])
#loc524 = loc(fused[#loc121, #loc122])
#loc525 = loc(fused[#loc123, #loc124])
#loc526 = loc(fused[#loc126, #loc117])
#loc527 = loc(fused[#loc128, #loc129])
#loc528 = loc(fused[#loc130, #loc132])
#loc529 = loc(fused[#loc133, #loc134, #loc135, #loc129])
#loc530 = loc(fused[#loc136, #loc137])
#loc531 = loc(fused[#loc139, #loc140])
#loc532 = loc(fused[#loc142, #loc143])
#loc533 = loc(fused[#loc144, #loc137])
#loc534 = loc(fused[#loc146, #loc147])
#loc535 = loc(fused[#loc149, #loc150])
#loc536 = loc(fused[#loc152, #loc153])
#loc537 = loc(fused[#loc154, #loc147])
#loc538 = loc(fused[#loc157, #loc158])
#loc539 = loc(fused[#loc159, #loc160])
#loc540 = loc(fused[#loc161, #loc158])
#loc541 = loc(fused[#loc164, #loc165])
#loc542 = loc(fused[#loc166, #loc167])
#loc543 = loc(fused[#loc168, #loc165])
#loc544 = loc(fused[#loc171, #loc172])
#loc545 = loc(fused[#loc173, #loc174])
#loc546 = loc(fused[#loc175, #loc176])
#loc547 = loc(fused[#loc177, #loc178])
#loc548 = loc(fused[#loc179, #loc180])
#loc549 = loc(fused[#loc181, #loc182])
#loc550 = loc(fused[#loc187, #loc188])
#loc551 = loc(fused[#loc189, #loc190])
#loc552 = loc(fused[#loc191, #loc192])
#loc553 = loc(fused[#loc193, #loc190])
#loc554 = loc(fused[#loc195, #loc196])
#loc555 = loc(fused[#loc198, #loc199])
#loc556 = loc(fused[#loc200, #loc201])
#loc557 = loc(fused[#loc203, #loc202])
#loc558 = loc(fused[#loc205, #loc204])
#loc559 = loc(fused[#loc208, #loc209])
#loc560 = loc(fused[#loc210, #loc211])
#loc561 = loc(fused[#loc213, #loc214])
#loc562 = loc(fused[#loc215, #loc216])
#loc563 = loc(fused[#loc217, #loc218])
#loc564 = loc(fused[#loc219, #loc211])
#loc565 = loc(fused[#loc221, #loc222])
#loc566 = loc(fused[#loc225, #loc226])
#loc567 = loc(fused[#loc227, #loc222])
#loc568 = loc(fused[#loc233, #loc234])
#loc569 = loc(fused[#loc235, #loc236])
#loc570 = loc(fused[#loc237, #loc238])
#loc571 = loc(fused[#loc239, #loc236])
#loc572 = loc(fused[#loc241, #loc242])
#loc573 = loc(fused[#loc245, #loc246])
#loc574 = loc(fused[#loc248, #loc249])
#loc575 = loc(fused[#loc250, #loc242])
#loc576 = loc(fused[#loc254, #loc255])
#loc577 = loc(fused[#loc256, #loc257])
#loc578 = loc(fused[#loc258, #loc255])
#loc579 = loc(fused[#loc261, #loc262])
#loc580 = loc(fused[#loc263, #loc264])
#loc581 = loc(fused[#loc265, #loc262])
#loc582 = loc(fused[#loc268, #loc269])
#loc583 = loc(fused[#loc270, #loc271])
#loc584 = loc(fused[#loc272, #loc273])
#loc585 = loc(fused[#loc274, #loc275])
#loc586 = loc(fused[#loc276, #loc277])
#loc587 = loc(fused[#loc278, #loc279, #loc280, #loc275])
#loc588 = loc(fused[#loc281, #loc282])
#loc589 = loc(fused[#loc283, #loc284])
#loc590 = loc(fused[#loc285, #loc286])
#loc591 = loc(fused[#loc287, #loc288])
#loc592 = loc(fused[#loc289, #loc290])
#loc593 = loc(fused[#loc291, #loc292])
#loc594 = loc(fused[#loc297, #loc298])
#loc595 = loc(fused[#loc299, #loc300])
#loc596 = loc(fused[#loc301, #loc302])
#loc597 = loc(fused[#loc303, #loc300])
#loc598 = loc(fused[#loc305, #loc306])
#loc599 = loc(fused[#loc308, #loc309])
#loc600 = loc(fused[#loc310, #loc311])
#loc601 = loc(fused[#loc313, #loc312])
#loc602 = loc(fused[#loc315, #loc314])
#loc603 = loc(fused[#loc318, #loc319])
#loc604 = loc(fused[#loc320, #loc321])
#loc605 = loc(fused[#loc323, #loc324])
#loc606 = loc(fused[#loc325, #loc326])
#loc607 = loc(fused[#loc327, #loc328])
#loc608 = loc(fused[#loc329, #loc321])
#loc609 = loc(fused[#loc331, #loc332])
#loc610 = loc(fused[#loc335, #loc336])
#loc611 = loc(fused[#loc337, #loc332])
#loc612 = loc(fused[#loc343, #loc344])
#loc613 = loc(fused[#loc345, #loc346])
#loc614 = loc(fused[#loc347, #loc348])
#loc615 = loc(fused[#loc349, #loc346])
#loc616 = loc(fused[#loc351, #loc352])
#loc617 = loc(fused[#loc355, #loc356])
#loc618 = loc(fused[#loc358, #loc359])
#loc619 = loc(fused[#loc360, #loc352])
#loc620 = loc(fused[#loc364, #loc365])
#loc621 = loc(fused[#loc366, #loc367])
#loc622 = loc(fused[#loc368, #loc365])
#loc623 = loc(fused[#loc371, #loc372])
#loc624 = loc(fused[#loc373, #loc374])
#loc625 = loc(fused[#loc375, #loc372])
#loc626 = loc(fused[#loc378, #loc379])
#loc627 = loc(fused[#loc380, #loc381])
#loc628 = loc(fused[#loc382, #loc383])
#loc629 = loc(fused[#loc384, #loc385])
#loc630 = loc(fused[#loc386, #loc387])
#loc631 = loc(fused[#loc388, #loc389])
#loc632 = loc(fused[#loc394, #loc395])
#loc633 = loc(fused[#loc396, #loc397])
#loc634 = loc(fused[#loc398, #loc399])
#loc635 = loc(fused[#loc400, #loc397])
#loc636 = loc(fused[#loc402, #loc403])
#loc637 = loc(fused[#loc405, #loc406])
#loc638 = loc(fused[#loc407, #loc408])
#loc639 = loc(fused[#loc410, #loc409])
#loc640 = loc(fused[#loc412, #loc411])
#loc641 = loc(fused[#loc415, #loc416])
#loc642 = loc(fused[#loc417, #loc418])
#loc643 = loc(fused[#loc420, #loc421])
#loc644 = loc(fused[#loc422, #loc423])
#loc645 = loc(fused[#loc424, #loc425])
#loc646 = loc(fused[#loc426, #loc418])
#loc647 = loc(fused[#loc428, #loc429])
#loc648 = loc(fused[#loc432, #loc433])
#loc649 = loc(fused[#loc434, #loc429])
#loc650 = loc(fused[#loc440, #loc441])
#loc651 = loc(fused[#loc442, #loc443])
#loc652 = loc(fused[#loc444, #loc445])
#loc653 = loc(fused[#loc446, #loc443])
#loc654 = loc(fused[#loc448, #loc449])
#loc655 = loc(fused[#loc452, #loc453])
#loc656 = loc(fused[#loc455, #loc456])
#loc657 = loc(fused[#loc457, #loc449])
#loc658 = loc(fused[#loc461, #loc462])
#loc659 = loc(fused[#loc463, #loc464])
#loc660 = loc(fused[#loc465, #loc462])
#loc661 = loc(fused[#loc468, #loc469])
#loc662 = loc(fused[#loc470, #loc471])
#loc663 = loc(fused[#loc472, #loc469])
