!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc5 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc140 = loc("../../../testcasesupport/std_testcase.h":68:7)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":149:10)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":149:14)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":149:20)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":149:32)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc325 = loc(fused[#loc220, #loc221])
#loc326 = loc(fused[#loc222, #loc223])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc236)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc237)
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc5)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc5)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc5)
    cir.return loc(#loc5)
  } loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc238)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc239)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_323badEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc241)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc242)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc243)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc244)
    %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc245)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc242)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc243)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc22)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc246)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc247)
    cir.store %8, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc244)
    cir.scope {
      %13 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc28)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc249)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc32)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
      } loc(#loc250)
    } loc(#loc248)
    %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc33)
    %10 = cir.const #cir.int<8> : !u64i loc(#loc251)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc33)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc252)
    cir.store %12, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc245)
    cir.scope {
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc39)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc254)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc41)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc42)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc43)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc41)
      } loc(#loc255)
    } loc(#loc253)
    cir.scope {
      %13 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc257)
      %14 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc47)
      %15 = cir.load %14 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
      cir.store %15, %13 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc257)
      %16 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
      cir.store %16, %13 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc258)
      %17 = cir.load %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
      %18 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc52)
      cir.store %17, %18 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc259)
    } loc(#loc256)
    cir.scope {
      %13 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc261)
      %14 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc57)
      %15 = cir.load %14 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
      cir.store %15, %13 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc261)
      cir.scope {
        %16 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc263)
        %17 = cir.const #cir.int<8> : !u64i loc(#loc264)
        %18 = cir.load %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc64)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc264)
        cir.call @_ZN12TwoIntsClassC2Ev(%20) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc62)
        cir.store %20, %16 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc263)
        %21 = cir.const #cir.int<5> : !s32i loc(#loc65)
        %22 = cir.load %16 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc66)
        %23 = cir.get_member %22[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc67)
        cir.store %21, %23 : !s32i, !cir.ptr<!s32i> loc(#loc265)
        %24 = cir.const #cir.int<10> : !s32i loc(#loc68)
        %25 = cir.load %16 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc69)
        %26 = cir.get_member %25[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc70)
        cir.store %24, %26 : !s32i, !cir.ptr<!s32i> loc(#loc266)
        %27 = cir.load %16 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc71)
        %28 = cir.get_member %27[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc67)
        %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc72)
        cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc73)
        %30 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc74)
        %31 = cir.load %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
        %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc75)
        cir.call @free(%32) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc74)
      } loc(#loc262)
    } loc(#loc260)
    cir.return loc(#loc11)
  } loc(#loc240)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_32L7goodG2BEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc268)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc269)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc270)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc271)
    %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc272)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc269)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc270)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc88)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc273)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc88)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc274)
    cir.store %8, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc271)
    cir.scope {
      %13 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc94)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc276)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc96)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc97)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc98)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc96)
      } loc(#loc277)
    } loc(#loc275)
    %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc99)
    %10 = cir.const #cir.int<8> : !u64i loc(#loc278)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc99)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc279)
    cir.store %12, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc272)
    cir.scope {
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc104)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc105)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc281)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc107)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc108)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc109)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc107)
      } loc(#loc282)
    } loc(#loc280)
    cir.scope {
      %13 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc284)
      %14 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc113)
      %15 = cir.load %14 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
      cir.store %15, %13 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc284)
      %16 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
      cir.store %16, %13 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc285)
      %17 = cir.load %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
      %18 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc118)
      cir.store %17, %18 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc286)
    } loc(#loc283)
    cir.scope {
      %13 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc288)
      %14 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc123)
      %15 = cir.load %14 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
      cir.store %15, %13 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc288)
      cir.scope {
        %16 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc290)
        %17 = cir.const #cir.int<8> : !u64i loc(#loc291)
        %18 = cir.load %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc130)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc291)
        cir.call @_ZN12TwoIntsClassC2Ev(%20) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc128)
        cir.store %20, %16 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc290)
        %21 = cir.const #cir.int<5> : !s32i loc(#loc131)
        %22 = cir.load %16 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc132)
        %23 = cir.get_member %22[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc67)
        cir.store %21, %23 : !s32i, !cir.ptr<!s32i> loc(#loc292)
        %24 = cir.const #cir.int<10> : !s32i loc(#loc133)
        %25 = cir.load %16 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc134)
        %26 = cir.get_member %25[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc70)
        cir.store %24, %26 : !s32i, !cir.ptr<!s32i> loc(#loc293)
        %27 = cir.load %16 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc135)
        %28 = cir.get_member %27[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc67)
        %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc136)
        cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc137)
        %30 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc138)
        %31 = cir.load %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
        %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc139)
        cir.call @free(%32) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc138)
      } loc(#loc289)
    } loc(#loc287)
    cir.return loc(#loc77)
  } loc(#loc267)
  cir.func linkonce_odr @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc140)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc140)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc140)
    cir.return loc(#loc140)
  } loc(#loc140)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_32L7goodB2GEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc295)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc296)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc297)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc298)
    %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc299)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc296)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc297)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc153)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc300)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc153)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc301)
    cir.store %8, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc298)
    cir.scope {
      %13 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc158)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc159)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc303)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc161)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc162)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc163)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc161)
      } loc(#loc304)
    } loc(#loc302)
    %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc164)
    %10 = cir.const #cir.int<8> : !u64i loc(#loc305)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc164)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc306)
    cir.store %12, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc299)
    cir.scope {
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc169)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc170)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc308)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc172)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc173)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc174)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc172)
      } loc(#loc309)
    } loc(#loc307)
    cir.scope {
      %13 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc311)
      %14 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc178)
      %15 = cir.load %14 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc179)
      cir.store %15, %13 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc311)
      %16 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc180)
      cir.store %16, %13 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc312)
      %17 = cir.load %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc182)
      %18 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc183)
      cir.store %17, %18 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc313)
    } loc(#loc310)
    cir.scope {
      %13 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc315)
      %14 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc188)
      %15 = cir.load %14 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc189)
      cir.store %15, %13 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc315)
      cir.scope {
        %16 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc317)
        %17 = cir.const #cir.int<4> : !u64i loc(#loc318)
        %18 = cir.load %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc195)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc195)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc318)
        cir.call @_ZN11OneIntClassC2Ev(%20) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc193)
        cir.store %20, %16 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc317)
        %21 = cir.const #cir.int<5> : !s32i loc(#loc196)
        %22 = cir.load %16 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc197)
        %23 = cir.get_member %22[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc198)
        cir.store %21, %23 : !s32i, !cir.ptr<!s32i> loc(#loc319)
        %24 = cir.load %16 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc199)
        %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc198)
        %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc200)
        cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc201)
        %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc202)
        %28 = cir.load %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc203)
        %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc203)
        cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc202)
      } loc(#loc316)
    } loc(#loc314)
    cir.return loc(#loc142)
  } loc(#loc294)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_324goodEv() extra(#fn_attr2) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_32L7goodG2BEv() : () -> () loc(#loc206)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_32L7goodB2GEv() : () -> () loc(#loc207)
    cir.return loc(#loc205)
  } loc(#loc320)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc321)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc322)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc323)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc214)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc215)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc216)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc217)
  cir.func @main(%arg0: !s32i loc(fused[#loc220, #loc221]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc222, #loc223])) -> !s32i extra(#fn_attr2) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc325)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc326)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc219)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc224)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc225)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc226)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc226)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc227)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc214)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc214)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc228)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_324goodEv() : () -> () loc(#loc229)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc215)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc215)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc230)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc216)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc216)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc231)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_323badEv() : () -> () loc(#loc232)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc217)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc217)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc233)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc234)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc327)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc327)
    cir.return %15 : !s32i loc(#loc327)
  } loc(#loc324)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("/usr/include/stdlib.h":687:1)
#loc9 = loc("/usr/include/stdlib.h":687:32)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":25:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":57:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":27:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":27:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":28:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":28:25)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":29:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":29:25)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":30:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":30:62)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":32:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":32:64)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":30:36)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":30:43)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":30:61)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":31:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":31:42)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":31:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":31:26)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":31:32)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":31:33)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":31:39)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":31:38)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":32:37)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":32:44)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":32:63)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":33:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":33:43)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":33:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":33:27)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":33:33)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":33:34)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":33:40)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":33:39)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":34:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":39:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":35:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":35:24)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":35:23)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":37:16)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":37:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":38:21)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":38:10)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":38:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":40:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":56:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":41:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":41:24)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":41:23)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":42:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":55:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":48:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":48:49)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":48:39)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":48:43)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":50:32)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":50:13)
#loc67 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":51:32)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":51:13)
#loc70 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":52:26)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":52:36)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":52:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":54:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":54:18)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":64:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":96:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":66:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":66:12)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":67:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":67:25)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":68:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":68:25)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":69:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":69:62)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":71:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":71:64)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":69:36)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":69:43)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":69:61)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":70:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":70:42)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":70:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":70:26)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":70:32)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":70:33)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":70:39)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":70:38)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":71:37)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":71:44)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":71:63)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":72:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":72:43)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":72:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":72:27)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":72:33)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":72:34)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":72:40)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":72:39)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":73:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":78:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":74:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":74:24)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":74:23)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":76:16)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":76:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":77:21)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":77:10)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":77:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":79:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":95:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":80:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":80:24)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":80:23)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":81:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":94:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":87:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":87:49)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":87:39)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":87:43)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":89:32)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":89:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":90:32)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":90:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":91:26)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":91:36)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":91:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":93:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":93:18)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":99:1)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":129:1)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":101:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":101:12)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":102:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":102:25)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":103:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":103:25)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":104:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":104:62)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":106:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":106:64)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":104:36)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":104:43)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":104:61)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":105:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":105:42)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":105:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":105:26)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":105:32)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":105:33)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":105:39)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":105:38)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":106:37)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":106:44)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":106:63)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":107:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":107:43)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":107:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":107:27)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":107:33)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":107:34)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":107:40)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":107:39)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":108:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":113:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":109:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":109:24)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":109:23)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":111:16)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":111:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":112:21)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":112:10)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":112:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":114:5)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":128:5)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":115:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":115:24)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":115:23)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":116:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":127:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":122:13)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":122:48)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":122:38)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":122:42)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":124:32)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":124:13)
#loc198 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":125:26)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":125:36)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":125:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":126:13)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":126:18)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":131:1)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":135:1)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":133:5)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":134:5)
#loc208 = loc("/usr/include/stdlib.h":575:1)
#loc209 = loc("/usr/include/stdlib.h":575:41)
#loc210 = loc("/usr/include/time.h":76:1)
#loc211 = loc("/usr/include/time.h":76:38)
#loc212 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc213 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":154:15)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":156:15)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":159:15)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":161:15)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":149:1)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":164:1)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":150:1)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":152:27)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":152:22)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":152:5)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":154:5)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":155:5)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":156:5)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":159:5)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":160:5)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":161:5)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":163:12)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_32.cpp":163:5)
#loc236 = loc(fused[#loc1, #loc2])
#loc237 = loc(fused[#loc3, #loc4])
#loc238 = loc(fused[#loc6, #loc7])
#loc239 = loc(fused[#loc8, #loc9])
#loc240 = loc(fused[#loc10, #loc11])
#loc241 = loc(fused[#loc12, #loc13])
#loc242 = loc(fused[#loc14, #loc15])
#loc243 = loc(fused[#loc16, #loc17])
#loc244 = loc(fused[#loc18, #loc19])
#loc245 = loc(fused[#loc20, #loc21])
#loc246 = loc(fused[#loc23, #loc24])
#loc247 = loc(fused[#loc22, #loc19])
#loc248 = loc(fused[#loc25, #loc26])
#loc249 = loc(fused[#loc27, #loc28])
#loc250 = loc(fused[#loc29, #loc26])
#loc251 = loc(fused[#loc34, #loc35])
#loc252 = loc(fused[#loc33, #loc21])
#loc253 = loc(fused[#loc36, #loc37])
#loc254 = loc(fused[#loc38, #loc39])
#loc255 = loc(fused[#loc40, #loc37])
#loc256 = loc(fused[#loc44, #loc45])
#loc257 = loc(fused[#loc46, #loc47])
#loc258 = loc(fused[#loc50, #loc49])
#loc259 = loc(fused[#loc53, #loc51])
#loc260 = loc(fused[#loc54, #loc55])
#loc261 = loc(fused[#loc56, #loc57])
#loc262 = loc(fused[#loc59, #loc60])
#loc263 = loc(fused[#loc61, #loc62])
#loc264 = loc(fused[#loc63, #loc62])
#loc265 = loc(fused[#loc66, #loc65])
#loc266 = loc(fused[#loc69, #loc68])
#loc267 = loc(fused[#loc76, #loc77])
#loc268 = loc(fused[#loc78, #loc79])
#loc269 = loc(fused[#loc80, #loc81])
#loc270 = loc(fused[#loc82, #loc83])
#loc271 = loc(fused[#loc84, #loc85])
#loc272 = loc(fused[#loc86, #loc87])
#loc273 = loc(fused[#loc89, #loc90])
#loc274 = loc(fused[#loc88, #loc85])
#loc275 = loc(fused[#loc91, #loc92])
#loc276 = loc(fused[#loc93, #loc94])
#loc277 = loc(fused[#loc95, #loc92])
#loc278 = loc(fused[#loc100, #loc101])
#loc279 = loc(fused[#loc99, #loc87])
#loc280 = loc(fused[#loc102, #loc103])
#loc281 = loc(fused[#loc104, #loc105])
#loc282 = loc(fused[#loc106, #loc103])
#loc283 = loc(fused[#loc110, #loc111])
#loc284 = loc(fused[#loc112, #loc113])
#loc285 = loc(fused[#loc116, #loc115])
#loc286 = loc(fused[#loc119, #loc117])
#loc287 = loc(fused[#loc120, #loc121])
#loc288 = loc(fused[#loc122, #loc123])
#loc289 = loc(fused[#loc125, #loc126])
#loc290 = loc(fused[#loc127, #loc128])
#loc291 = loc(fused[#loc129, #loc128])
#loc292 = loc(fused[#loc132, #loc131])
#loc293 = loc(fused[#loc134, #loc133])
#loc294 = loc(fused[#loc141, #loc142])
#loc295 = loc(fused[#loc143, #loc144])
#loc296 = loc(fused[#loc145, #loc146])
#loc297 = loc(fused[#loc147, #loc148])
#loc298 = loc(fused[#loc149, #loc150])
#loc299 = loc(fused[#loc151, #loc152])
#loc300 = loc(fused[#loc154, #loc155])
#loc301 = loc(fused[#loc153, #loc150])
#loc302 = loc(fused[#loc156, #loc157])
#loc303 = loc(fused[#loc158, #loc159])
#loc304 = loc(fused[#loc160, #loc157])
#loc305 = loc(fused[#loc165, #loc166])
#loc306 = loc(fused[#loc164, #loc152])
#loc307 = loc(fused[#loc167, #loc168])
#loc308 = loc(fused[#loc169, #loc170])
#loc309 = loc(fused[#loc171, #loc168])
#loc310 = loc(fused[#loc175, #loc176])
#loc311 = loc(fused[#loc177, #loc178])
#loc312 = loc(fused[#loc181, #loc180])
#loc313 = loc(fused[#loc184, #loc182])
#loc314 = loc(fused[#loc185, #loc186])
#loc315 = loc(fused[#loc187, #loc188])
#loc316 = loc(fused[#loc190, #loc191])
#loc317 = loc(fused[#loc192, #loc193])
#loc318 = loc(fused[#loc194, #loc193])
#loc319 = loc(fused[#loc197, #loc196])
#loc320 = loc(fused[#loc204, #loc205])
#loc321 = loc(fused[#loc208, #loc209])
#loc322 = loc(fused[#loc210, #loc211])
#loc323 = loc(fused[#loc212, #loc213])
#loc324 = loc(fused[#loc218, #loc219])
#loc327 = loc(fused[#loc235, #loc234])
