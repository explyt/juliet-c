!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int_min_predec_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc161)
  cir.func no_proto  @CWE191_Integer_Underflow__int_min_predec_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc163)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc11)
      cir.if %3 {
        %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc13)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc13)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc13)
        %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc13)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc167)
      } loc(#loc166)
    } loc(#loc165)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc171)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
          %6 = cir.unary(dec, %5) : !s32i, !s32i loc(#loc23)
          cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc172)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc171)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc25)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc26)
        } loc(#loc170)
      } loc(#loc169)
    } loc(#loc168)
    cir.return loc(#loc4)
  } loc(#loc162)
  cir.func no_proto  @CWE191_Integer_Underflow__int_min_predec_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc177)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc28)
  } loc(#loc173)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc178)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc39)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc40)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc180)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc45)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc49)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc49)
      cir.if %3 {
        %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc51)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc51)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc51)
        %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc51)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc184)
      } loc(#loc183)
    } loc(#loc182)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc55)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc55)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc39)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc39)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc59)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc63)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc63)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc63)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc63)
          %9 = cir.cmp(gt, %4, %8) : !s32i, !s32i loc(#loc188)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc64)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc190)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
            %13 = cir.unary(dec, %12) : !s32i, !s32i loc(#loc70)
            cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc191)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc190)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc72)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc73)
          } else {
            %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc40)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc40)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc74)
          } loc(#loc189)
        } loc(#loc187)
      } loc(#loc186)
    } loc(#loc185)
    cir.return loc(#loc42)
  } loc(#loc179)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc193)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc79)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc83)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc83)
      cir.if %3 {
        %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc85)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc85)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc85)
        %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc85)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
      } loc(#loc196)
    } loc(#loc195)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc89)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc89)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc94)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc94)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc94)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc94)
          %9 = cir.cmp(gt, %4, %8) : !s32i, !s32i loc(#loc201)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc95)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc203)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
            %13 = cir.unary(dec, %12) : !s32i, !s32i loc(#loc101)
            cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc203)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc103)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc104)
          } else {
            %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc105)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc105)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc106)
          } loc(#loc202)
        } loc(#loc200)
      } loc(#loc199)
    } loc(#loc198)
    cir.return loc(#loc76)
  } loc(#loc192)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc206)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc111)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc115)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc115)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc119)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc119)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc120)
      } else {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc121)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc122)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc210)
      } loc(#loc209)
    } loc(#loc208)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc126)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc126)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc214)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
          %6 = cir.unary(dec, %5) : !s32i, !s32i loc(#loc132)
          cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc215)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc131)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc214)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc134)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc135)
        } loc(#loc213)
      } loc(#loc212)
    } loc(#loc211)
    cir.return loc(#loc108)
  } loc(#loc205)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc217)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc140)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc144)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc144)
      cir.if %3 {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc146)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc147)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
      } loc(#loc220)
    } loc(#loc219)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc151)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc151)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc225)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
          %6 = cir.unary(dec, %5) : !s32i, !s32i loc(#loc157)
          cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc226)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc156)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc225)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc159)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc160)
        } loc(#loc224)
      } loc(#loc223)
    } loc(#loc222)
    cir.return loc(#loc137)
  } loc(#loc216)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int_min_predec_04.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":28:1)
#loc4 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":47:1)
#loc5 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":30:5)
#loc6 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":30:9)
#loc7 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":32:12)
#loc8 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":32:5)
#loc9 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":33:5)
#loc10 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":37:5)
#loc11 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":33:8)
#loc12 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":34:5)
#loc13 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":36:16)
#loc14 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":36:9)
#loc15 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":38:5)
#loc16 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":46:5)
#loc17 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":38:8)
#loc18 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":39:5)
#loc19 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":40:9)
#loc20 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":45:9)
#loc21 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":43:13)
#loc22 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":43:26)
#loc23 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":42:13)
#loc24 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":42:15)
#loc25 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":44:26)
#loc26 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":44:13)
#loc27 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":161:1)
#loc28 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":167:1)
#loc29 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":163:5)
#loc30 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":163:14)
#loc31 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":164:5)
#loc32 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":164:14)
#loc33 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":165:5)
#loc34 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":165:14)
#loc35 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":166:5)
#loc36 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":166:14)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":67:19)
#loc40 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":80:23)
#loc41 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":54:1)
#loc42 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":83:1)
#loc43 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":56:5)
#loc44 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":56:9)
#loc45 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":58:12)
#loc46 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":58:5)
#loc47 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":59:5)
#loc48 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":63:5)
#loc49 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":59:8)
#loc50 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":60:5)
#loc51 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":62:16)
#loc52 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":62:9)
#loc53 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":64:5)
#loc54 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":82:5)
#loc55 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":64:8)
#loc56 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":65:5)
#loc57 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":68:5)
#loc58 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":70:5)
#loc59 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":67:9)
#loc60 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":72:9)
#loc61 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":81:9)
#loc62 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":72:13)
#loc63 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":72:20)
#loc64 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":72:18)
#loc65 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":73:9)
#loc66 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":77:9)
#loc67 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":79:9)
#loc68 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":75:13)
#loc69 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":75:26)
#loc70 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":74:13)
#loc71 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":74:15)
#loc72 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":76:26)
#loc73 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":76:13)
#loc74 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":80:13)
#loc75 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":86:1)
#loc76 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":110:1)
#loc77 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":88:5)
#loc78 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":88:9)
#loc79 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":90:12)
#loc80 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":90:5)
#loc81 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":91:5)
#loc82 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":95:5)
#loc83 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":91:8)
#loc84 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":92:5)
#loc85 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":94:16)
#loc86 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":94:9)
#loc87 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":96:5)
#loc88 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":109:5)
#loc89 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":96:8)
#loc90 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":97:5)
#loc91 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":99:9)
#loc92 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":108:9)
#loc93 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":99:13)
#loc94 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":99:20)
#loc95 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":99:18)
#loc96 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":100:9)
#loc97 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":104:9)
#loc98 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":106:9)
#loc99 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":102:13)
#loc100 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":102:26)
#loc101 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":101:13)
#loc102 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":101:15)
#loc103 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":103:26)
#loc104 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":103:13)
#loc105 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":107:23)
#loc106 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":107:13)
#loc107 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":113:1)
#loc108 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":137:1)
#loc109 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":115:5)
#loc110 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":115:9)
#loc111 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":117:12)
#loc112 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":117:5)
#loc113 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":118:5)
#loc114 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":127:5)
#loc115 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":118:8)
#loc116 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":119:5)
#loc117 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":122:5)
#loc118 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":124:5)
#loc119 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":121:19)
#loc120 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":121:9)
#loc121 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":126:17)
#loc122 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":126:16)
#loc123 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":126:9)
#loc124 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":128:5)
#loc125 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":136:5)
#loc126 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":128:8)
#loc127 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":129:5)
#loc128 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":130:9)
#loc129 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":135:9)
#loc130 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":133:13)
#loc131 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":133:26)
#loc132 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":132:13)
#loc133 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":132:15)
#loc134 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":134:26)
#loc135 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":134:13)
#loc136 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":140:1)
#loc137 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":159:1)
#loc138 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":142:5)
#loc139 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":142:9)
#loc140 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":144:12)
#loc141 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":144:5)
#loc142 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":145:5)
#loc143 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":149:5)
#loc144 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":145:8)
#loc145 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":146:5)
#loc146 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":148:17)
#loc147 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":148:16)
#loc148 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":148:9)
#loc149 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":150:5)
#loc150 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":158:5)
#loc151 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":150:8)
#loc152 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":151:5)
#loc153 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":152:9)
#loc154 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":157:9)
#loc155 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":155:13)
#loc156 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":155:26)
#loc157 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":154:13)
#loc158 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":154:15)
#loc159 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":156:26)
#loc160 = loc("CWE191_Integer_Underflow__int_min_predec_04.c":156:13)
#loc161 = loc(fused[#loc1, #loc2])
#loc162 = loc(fused[#loc3, #loc4])
#loc163 = loc(fused[#loc5, #loc6])
#loc164 = loc(fused[#loc8, #loc7])
#loc165 = loc(fused[#loc9, #loc10])
#loc166 = loc(fused[#loc12, #loc10])
#loc167 = loc(fused[#loc14, #loc13])
#loc168 = loc(fused[#loc15, #loc16])
#loc169 = loc(fused[#loc18, #loc16])
#loc170 = loc(fused[#loc19, #loc20])
#loc171 = loc(fused[#loc21, #loc22])
#loc172 = loc(fused[#loc23, #loc24])
#loc173 = loc(fused[#loc27, #loc28])
#loc174 = loc(fused[#loc29, #loc30])
#loc175 = loc(fused[#loc31, #loc32])
#loc176 = loc(fused[#loc33, #loc34])
#loc177 = loc(fused[#loc35, #loc36])
#loc178 = loc(fused[#loc37, #loc38])
#loc179 = loc(fused[#loc41, #loc42])
#loc180 = loc(fused[#loc43, #loc44])
#loc181 = loc(fused[#loc46, #loc45])
#loc182 = loc(fused[#loc47, #loc48])
#loc183 = loc(fused[#loc50, #loc48])
#loc184 = loc(fused[#loc52, #loc51])
#loc185 = loc(fused[#loc53, #loc54])
#loc186 = loc(fused[#loc56, #loc57, #loc58, #loc54])
#loc187 = loc(fused[#loc60, #loc61])
#loc188 = loc(fused[#loc62, #loc63])
#loc189 = loc(fused[#loc65, #loc66, #loc67, #loc61])
#loc190 = loc(fused[#loc68, #loc69])
#loc191 = loc(fused[#loc70, #loc71])
#loc192 = loc(fused[#loc75, #loc76])
#loc193 = loc(fused[#loc77, #loc78])
#loc194 = loc(fused[#loc80, #loc79])
#loc195 = loc(fused[#loc81, #loc82])
#loc196 = loc(fused[#loc84, #loc82])
#loc197 = loc(fused[#loc86, #loc85])
#loc198 = loc(fused[#loc87, #loc88])
#loc199 = loc(fused[#loc90, #loc88])
#loc200 = loc(fused[#loc91, #loc92])
#loc201 = loc(fused[#loc93, #loc94])
#loc202 = loc(fused[#loc96, #loc97, #loc98, #loc92])
#loc203 = loc(fused[#loc99, #loc100])
#loc204 = loc(fused[#loc101, #loc102])
#loc205 = loc(fused[#loc107, #loc108])
#loc206 = loc(fused[#loc109, #loc110])
#loc207 = loc(fused[#loc112, #loc111])
#loc208 = loc(fused[#loc113, #loc114])
#loc209 = loc(fused[#loc116, #loc117, #loc118, #loc114])
#loc210 = loc(fused[#loc123, #loc121])
#loc211 = loc(fused[#loc124, #loc125])
#loc212 = loc(fused[#loc127, #loc125])
#loc213 = loc(fused[#loc128, #loc129])
#loc214 = loc(fused[#loc130, #loc131])
#loc215 = loc(fused[#loc132, #loc133])
#loc216 = loc(fused[#loc136, #loc137])
#loc217 = loc(fused[#loc138, #loc139])
#loc218 = loc(fused[#loc141, #loc140])
#loc219 = loc(fused[#loc142, #loc143])
#loc220 = loc(fused[#loc145, #loc143])
#loc221 = loc(fused[#loc148, #loc146])
#loc222 = loc(fused[#loc149, #loc150])
#loc223 = loc(fused[#loc152, #loc150])
#loc224 = loc(fused[#loc153, #loc154])
#loc225 = loc(fused[#loc155, #loc156])
#loc226 = loc(fused[#loc157, #loc158])
