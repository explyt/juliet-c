!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":66:24)
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc76)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc78)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc80)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc81)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc14)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc16)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc77)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc17)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc16)
    cir.br ^bb1 loc(#loc83)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc11)
    %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc20)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc22)
    cir.br ^bb2 loc(#loc19)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc9)
  } loc(#loc79)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_01_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc85)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc25)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc86)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    cir.return loc(#loc24)
  } loc(#loc84)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc88)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc89)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc35)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc37)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    cir.br ^bb1 loc(#loc92)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    %6 = cir.binop(mul, %4, %5) nsw : !s32i loc(#loc41)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc43)
    cir.br ^bb2 loc(#loc40)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc30)
  } loc(#loc87)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc44)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc93)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc47)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc95)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc96)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc54)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc56)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc77)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc57)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc58)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc58)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc56)
    cir.br ^bb1 loc(#loc98)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc62)
    %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc62)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc62)
    %14 = cir.cmp(gt, %9, %13) : !s32i, !cir.bool loc(#loc99)
    cir.brcond %14 ^bb2, ^bb7 loc(#loc63)
  ^bb2:  // pred: ^bb1
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    %16 = cir.abs %15 poison : !s32i loc(#loc65)
    %17 = cir.cast(integral, %16 : !s32i), !s64i loc(#loc65)
    %18 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc66)
    %19 = cir.const #cir.int<2147483647> : !s32i loc(#loc67)
    %20 = cir.cast(int_to_float, %19 : !s32i), !cir.double loc(#loc67)
    %21 = cir.call @sqrt(%20) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc66)
    %22 = cir.cast(float_to_int, %21 : !cir.double), !s64i loc(#loc66)
    %23 = cir.cmp(lt, %17, %22) : !s64i, !cir.bool loc(#loc100)
    cir.brcond %23 ^bb3, ^bb4 loc(#loc63)
  ^bb3:  // pred: ^bb2
    %24 = cir.const #true loc(#loc63)
    cir.br ^bb5(%24 : !cir.bool) loc(#loc63)
  ^bb4:  // pred: ^bb2
    %25 = cir.const #false loc(#loc63)
    cir.br ^bb5(%25 : !cir.bool) loc(#loc63)
  ^bb5(%26: !cir.bool loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":66:24)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc63)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8(%26 : !cir.bool) loc(#loc63)
  ^bb7:  // pred: ^bb1
    %27 = cir.const #false loc(#loc63)
    cir.br ^bb8(%27 : !cir.bool) loc(#loc63)
  ^bb8(%28: !cir.bool loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":66:24)):  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc63)
  ^bb9:  // pred: ^bb8
    cir.brcond %28 ^bb10, ^bb11 loc(#loc101)
  ^bb10:  // pred: ^bb9
    %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc72)
    %30 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    %31 = cir.binop(mul, %29, %30) nsw : !s32i loc(#loc72)
    cir.store %31, %0 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    %32 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc74)
    cir.br ^bb12 loc(#loc70)
  ^bb11:  // pred: ^bb9
    %33 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc47)
    %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%34) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    cir.br ^bb12 loc(#loc60)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc60)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc49)
  } loc(#loc94)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_01.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":30:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":24:1)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":36:1)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":33:9)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":33:29)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":26:5)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":26:9)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":28:12)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":28:5)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":30:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":30:12)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":31:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":35:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":33:22)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":34:22)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":34:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":77:1)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":81:1)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":79:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":79:13)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":80:5)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":80:13)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":43:1)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":55:1)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":52:9)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":52:29)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":45:5)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":45:9)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":47:12)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":47:5)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":49:12)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":49:5)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":50:5)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":54:5)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":52:22)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":53:22)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":53:9)
#loc44 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":73:19)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":58:1)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":75:1)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":68:9)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":68:29)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":60:5)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":60:9)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":62:12)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":62:5)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":64:5)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":64:12)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":64:19)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":66:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":74:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":66:9)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":66:16)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":66:31)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":66:27)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":66:45)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":66:58)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":66:65)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":67:5)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":70:5)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":72:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":68:22)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":69:22)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":69:9)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_square_01.c":73:9)
#loc76 = loc(fused[#loc1, #loc2])
#loc77 = loc(fused[#loc3, #loc4])
#loc78 = loc(fused[#loc6, #loc7])
#loc79 = loc(fused[#loc8, #loc9])
#loc80 = loc(fused[#loc10, #loc11])
#loc81 = loc(fused[#loc12, #loc13])
#loc82 = loc(fused[#loc15, #loc14])
#loc83 = loc(fused[#loc18, #loc19])
#loc84 = loc(fused[#loc23, #loc24])
#loc85 = loc(fused[#loc25, #loc26])
#loc86 = loc(fused[#loc27, #loc28])
#loc87 = loc(fused[#loc29, #loc30])
#loc88 = loc(fused[#loc31, #loc32])
#loc89 = loc(fused[#loc33, #loc34])
#loc90 = loc(fused[#loc36, #loc35])
#loc91 = loc(fused[#loc38, #loc37])
#loc92 = loc(fused[#loc39, #loc40])
#loc93 = loc(fused[#loc45, #loc46])
#loc94 = loc(fused[#loc48, #loc49])
#loc95 = loc(fused[#loc50, #loc51])
#loc96 = loc(fused[#loc52, #loc53])
#loc97 = loc(fused[#loc55, #loc54])
#loc98 = loc(fused[#loc59, #loc60])
#loc99 = loc(fused[#loc61, #loc62])
#loc100 = loc(fused[#loc65, #loc68])
#loc101 = loc(fused[#loc69, #loc70, #loc71, #loc60])
