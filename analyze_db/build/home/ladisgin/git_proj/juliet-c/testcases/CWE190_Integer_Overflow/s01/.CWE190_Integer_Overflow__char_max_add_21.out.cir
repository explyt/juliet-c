!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc7 = loc("CWE190_Integer_Overflow__char_max_add_21.c":25:21)
#loc8 = loc("CWE190_Integer_Overflow__char_max_add_21.c":25:26)
#loc53 = loc("CWE190_Integer_Overflow__char_max_add_21.c":156:10)
#loc54 = loc("CWE190_Integer_Overflow__char_max_add_21.c":156:14)
#loc55 = loc("CWE190_Integer_Overflow__char_max_add_21.c":156:20)
#loc56 = loc("CWE190_Integer_Overflow__char_max_add_21.c":156:32)
#loc77 = loc("CWE190_Integer_Overflow__char_max_add_21.c":57:26)
#loc78 = loc("CWE190_Integer_Overflow__char_max_add_21.c":57:31)
#loc116 = loc("CWE190_Integer_Overflow__char_max_add_21.c":90:26)
#loc117 = loc("CWE190_Integer_Overflow__char_max_add_21.c":90:31)
#loc153 = loc("CWE190_Integer_Overflow__char_max_add_21.c":118:25)
#loc154 = loc("CWE190_Integer_Overflow__char_max_add_21.c":118:30)
#loc182 = loc(fused[#loc7, #loc8])
#loc200 = loc(fused[#loc53, #loc54])
#loc201 = loc(fused[#loc55, #loc56])
#loc207 = loc(fused[#loc77, #loc78])
#loc221 = loc(fused[#loc116, #loc117])
#loc235 = loc(fused[#loc153, #loc154])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_add_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc179)
  cir.func private @printHexCharLine(!s8i) loc(#loc180)
  cir.func internal private @badSink(%arg0: !s8i loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc183)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc182)
    cir.store %arg0, %1 : !s8i, !cir.ptr<!s8i> loc(#loc11)
    cir.br ^bb1 loc(#loc184)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc179)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %4 ^bb2, ^bb5 loc(#loc185)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc186)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc18)
    %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc18)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc18)
    %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc18)
    cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc183)
    %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc19)
    cir.call @printHexCharLine(%10) : (!s8i) -> () loc(#loc20)
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc13)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc13)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc6)
  } loc(#loc181)
  cir.func no_proto @CWE190_Integer_Overflow__char_max_add_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc188)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc25)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc25)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc189)
    %3 = cir.const #cir.int<127> : !s32i loc(#loc27)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc27)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc190)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %6 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc179)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc31)
    cir.call @badSink(%7) : (!s8i) -> () loc(#loc32)
    cir.return loc(#loc22)
  } loc(#loc187)
  cir.func no_proto @CWE190_Integer_Overflow__char_max_add_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc195)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc34)
  } loc(#loc192)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc196)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc197)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc198)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc50)
  cir.func @main(%arg0: !s32i loc(fused[#loc53, #loc54]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc55, #loc56])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc200)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc201)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc52)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc57)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc58)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc59)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc59)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc60)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc47)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %8 = cir.get_global @CWE190_Integer_Overflow__char_max_add_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call @CWE190_Integer_Overflow__char_max_add_21_good() : () -> () loc(#loc62)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc48)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc49)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %13 = cir.get_global @CWE190_Integer_Overflow__char_max_add_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call @CWE190_Integer_Overflow__char_max_add_21_bad() : () -> () loc(#loc66)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc50)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc204)
    cir.return %17 : !s32i loc(#loc204)
  } loc(#loc199)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc205)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc74)
  cir.func internal private @goodB2G1Sink(%arg0: !s8i loc(fused[#loc77, #loc78])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc208)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc207)
    cir.store %arg0, %1 : !s8i, !cir.ptr<!s8i> loc(#loc81)
    cir.br ^bb1 loc(#loc209)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc205)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc84)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc210)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    cir.br ^bb9 loc(#loc86)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc211)
  ^bb4:  // pred: ^bb3
    %7 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc91)
    %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc91)
    %9 = cir.const #cir.int<127> : !s32i loc(#loc92)
    %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc212)
    cir.brcond %10 ^bb5, ^bb6 loc(#loc213)
  ^bb5:  // pred: ^bb4
    %11 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc96)
    %12 = cir.cast(integral, %11 : !s8i), !s32i loc(#loc96)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %14 = cir.binop(add, %12, %13) nsw : !s32i loc(#loc96)
    %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc96)
    cir.store %15, %0 : !s8i, !cir.ptr<!s8i> loc(#loc208)
    %16 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc97)
    cir.call @printHexCharLine(%16) : (!s8i) -> () loc(#loc98)
    cir.br ^bb7 loc(#loc94)
  ^bb6:  // pred: ^bb4
    %17 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc74)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    cir.br ^bb7 loc(#loc90)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc90)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc83)
  ^bb9:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb10 loc(#loc83)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc76)
  } loc(#loc206)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc215)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc104)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc104)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc216)
    %3 = cir.const #cir.int<127> : !s32i loc(#loc106)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc106)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc217)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc108)
    %6 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc205)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc218)
    %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc110)
    cir.call @goodB2G1Sink(%7) : (!s8i) -> () loc(#loc111)
    cir.return loc(#loc101)
  } loc(#loc214)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc219)
  cir.func internal private @goodB2G2Sink(%arg0: !s8i loc(fused[#loc116, #loc117])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc222)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc221)
    cir.store %arg0, %1 : !s8i, !cir.ptr<!s8i> loc(#loc120)
    cir.br ^bb1 loc(#loc223)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc219)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc123)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc123)
    cir.brcond %4 ^bb2, ^bb8 loc(#loc224)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc225)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc127)
    %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc127)
    %7 = cir.const #cir.int<127> : !s32i loc(#loc128)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc226)
    cir.brcond %8 ^bb4, ^bb5 loc(#loc227)
  ^bb4:  // pred: ^bb3
    %9 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc132)
    %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc132)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc119)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc132)
    %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc132)
    cir.store %13, %0 : !s8i, !cir.ptr<!s8i> loc(#loc222)
    %14 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc133)
    cir.call @printHexCharLine(%14) : (!s8i) -> () loc(#loc134)
    cir.br ^bb6 loc(#loc130)
  ^bb5:  // pred: ^bb3
    %15 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc135)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc135)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc136)
    cir.br ^bb6 loc(#loc126)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc126)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc122)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc122)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc115)
  } loc(#loc220)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc229)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc141)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc141)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc230)
    %3 = cir.const #cir.int<127> : !s32i loc(#loc143)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc143)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc231)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc145)
    %6 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc219)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc147)
    cir.call @goodB2G2Sink(%7) : (!s8i) -> () loc(#loc148)
    cir.return loc(#loc138)
  } loc(#loc228)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc233)
  cir.func internal private @goodG2BSink(%arg0: !s8i loc(fused[#loc153, #loc154])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc236)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc235)
    cir.store %arg0, %1 : !s8i, !cir.ptr<!s8i> loc(#loc157)
    cir.br ^bb1 loc(#loc237)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc233)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc160)
    cir.brcond %4 ^bb2, ^bb5 loc(#loc238)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc239)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc164)
    %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc164)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc156)
    %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc164)
    %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc164)
    cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc236)
    %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc165)
    cir.call @printHexCharLine(%10) : (!s8i) -> () loc(#loc166)
    cir.br ^bb4 loc(#loc163)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc159)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc159)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc152)
  } loc(#loc234)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc241)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc171)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc171)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc242)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc173)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc173)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc243)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc175)
    %6 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc233)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc244)
    %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc177)
    cir.call @goodG2BSink(%7) : (!s8i) -> () loc(#loc178)
    cir.return loc(#loc168)
  } loc(#loc240)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_add_21.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__char_max_add_21.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__char_max_add_21.c":23:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE190_Integer_Overflow__char_max_add_21.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__char_max_add_21.c":35:1)
#loc9 = loc("CWE190_Integer_Overflow__char_max_add_21.c":31:13)
#loc10 = loc("CWE190_Integer_Overflow__char_max_add_21.c":31:34)
#loc11 = loc("CWE190_Integer_Overflow__char_max_add_21.c":26:1)
#loc12 = loc("CWE190_Integer_Overflow__char_max_add_21.c":27:5)
#loc13 = loc("CWE190_Integer_Overflow__char_max_add_21.c":34:5)
#loc14 = loc("CWE190_Integer_Overflow__char_max_add_21.c":27:8)
#loc15 = loc("CWE190_Integer_Overflow__char_max_add_21.c":28:5)
#loc16 = loc("CWE190_Integer_Overflow__char_max_add_21.c":29:9)
#loc17 = loc("CWE190_Integer_Overflow__char_max_add_21.c":33:9)
#loc18 = loc("CWE190_Integer_Overflow__char_max_add_21.c":31:27)
#loc19 = loc("CWE190_Integer_Overflow__char_max_add_21.c":32:30)
#loc20 = loc("CWE190_Integer_Overflow__char_max_add_21.c":32:13)
#loc21 = loc("CWE190_Integer_Overflow__char_max_add_21.c":37:1)
#loc22 = loc("CWE190_Integer_Overflow__char_max_add_21.c":45:1)
#loc23 = loc("CWE190_Integer_Overflow__char_max_add_21.c":39:5)
#loc24 = loc("CWE190_Integer_Overflow__char_max_add_21.c":39:10)
#loc25 = loc("CWE190_Integer_Overflow__char_max_add_21.c":40:12)
#loc26 = loc("CWE190_Integer_Overflow__char_max_add_21.c":40:5)
#loc27 = loc("CWE190_Integer_Overflow__char_max_add_21.c":42:12)
#loc28 = loc("CWE190_Integer_Overflow__char_max_add_21.c":42:5)
#loc29 = loc("CWE190_Integer_Overflow__char_max_add_21.c":43:17)
#loc30 = loc("CWE190_Integer_Overflow__char_max_add_21.c":43:5)
#loc31 = loc("CWE190_Integer_Overflow__char_max_add_21.c":44:13)
#loc32 = loc("CWE190_Integer_Overflow__char_max_add_21.c":44:5)
#loc33 = loc("CWE190_Integer_Overflow__char_max_add_21.c":140:1)
#loc34 = loc("CWE190_Integer_Overflow__char_max_add_21.c":145:1)
#loc35 = loc("CWE190_Integer_Overflow__char_max_add_21.c":142:5)
#loc36 = loc("CWE190_Integer_Overflow__char_max_add_21.c":142:14)
#loc37 = loc("CWE190_Integer_Overflow__char_max_add_21.c":143:5)
#loc38 = loc("CWE190_Integer_Overflow__char_max_add_21.c":143:14)
#loc39 = loc("CWE190_Integer_Overflow__char_max_add_21.c":144:5)
#loc40 = loc("CWE190_Integer_Overflow__char_max_add_21.c":144:13)
#loc41 = loc("/usr/include/stdlib.h":575:1)
#loc42 = loc("/usr/include/stdlib.h":575:41)
#loc43 = loc("/usr/include/time.h":76:1)
#loc44 = loc("/usr/include/time.h":76:38)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE190_Integer_Overflow__char_max_add_21.c":161:15)
#loc48 = loc("CWE190_Integer_Overflow__char_max_add_21.c":163:15)
#loc49 = loc("CWE190_Integer_Overflow__char_max_add_21.c":166:15)
#loc50 = loc("CWE190_Integer_Overflow__char_max_add_21.c":168:15)
#loc51 = loc("CWE190_Integer_Overflow__char_max_add_21.c":156:1)
#loc52 = loc("CWE190_Integer_Overflow__char_max_add_21.c":171:1)
#loc57 = loc("CWE190_Integer_Overflow__char_max_add_21.c":157:1)
#loc58 = loc("CWE190_Integer_Overflow__char_max_add_21.c":159:27)
#loc59 = loc("CWE190_Integer_Overflow__char_max_add_21.c":159:22)
#loc60 = loc("CWE190_Integer_Overflow__char_max_add_21.c":159:5)
#loc61 = loc("CWE190_Integer_Overflow__char_max_add_21.c":161:5)
#loc62 = loc("CWE190_Integer_Overflow__char_max_add_21.c":162:5)
#loc63 = loc("CWE190_Integer_Overflow__char_max_add_21.c":162:51)
#loc64 = loc("CWE190_Integer_Overflow__char_max_add_21.c":163:5)
#loc65 = loc("CWE190_Integer_Overflow__char_max_add_21.c":166:5)
#loc66 = loc("CWE190_Integer_Overflow__char_max_add_21.c":167:5)
#loc67 = loc("CWE190_Integer_Overflow__char_max_add_21.c":167:50)
#loc68 = loc("CWE190_Integer_Overflow__char_max_add_21.c":168:5)
#loc69 = loc("CWE190_Integer_Overflow__char_max_add_21.c":170:12)
#loc70 = loc("CWE190_Integer_Overflow__char_max_add_21.c":170:5)
#loc71 = loc("CWE190_Integer_Overflow__char_max_add_21.c":52:1)
#loc72 = loc("CWE190_Integer_Overflow__char_max_add_21.c":52:29)
#loc73 = loc("CWE190_Integer_Overflow__char_max_add_21.c":62:19)
#loc74 = loc("CWE190_Integer_Overflow__char_max_add_21.c":74:23)
#loc75 = loc("CWE190_Integer_Overflow__char_max_add_21.c":57:1)
#loc76 = loc("CWE190_Integer_Overflow__char_max_add_21.c":77:1)
#loc79 = loc("CWE190_Integer_Overflow__char_max_add_21.c":69:13)
#loc80 = loc("CWE190_Integer_Overflow__char_max_add_21.c":69:34)
#loc81 = loc("CWE190_Integer_Overflow__char_max_add_21.c":58:1)
#loc82 = loc("CWE190_Integer_Overflow__char_max_add_21.c":59:5)
#loc83 = loc("CWE190_Integer_Overflow__char_max_add_21.c":76:5)
#loc84 = loc("CWE190_Integer_Overflow__char_max_add_21.c":59:8)
#loc85 = loc("CWE190_Integer_Overflow__char_max_add_21.c":60:5)
#loc86 = loc("CWE190_Integer_Overflow__char_max_add_21.c":63:5)
#loc87 = loc("CWE190_Integer_Overflow__char_max_add_21.c":65:5)
#loc88 = loc("CWE190_Integer_Overflow__char_max_add_21.c":62:9)
#loc89 = loc("CWE190_Integer_Overflow__char_max_add_21.c":67:9)
#loc90 = loc("CWE190_Integer_Overflow__char_max_add_21.c":75:9)
#loc91 = loc("CWE190_Integer_Overflow__char_max_add_21.c":67:13)
#loc92 = loc("CWE190_Integer_Overflow__char_max_add_21.c":67:20)
#loc93 = loc("CWE190_Integer_Overflow__char_max_add_21.c":68:9)
#loc94 = loc("CWE190_Integer_Overflow__char_max_add_21.c":71:9)
#loc95 = loc("CWE190_Integer_Overflow__char_max_add_21.c":73:9)
#loc96 = loc("CWE190_Integer_Overflow__char_max_add_21.c":69:27)
#loc97 = loc("CWE190_Integer_Overflow__char_max_add_21.c":70:30)
#loc98 = loc("CWE190_Integer_Overflow__char_max_add_21.c":70:13)
#loc99 = loc("CWE190_Integer_Overflow__char_max_add_21.c":74:13)
#loc100 = loc("CWE190_Integer_Overflow__char_max_add_21.c":79:1)
#loc101 = loc("CWE190_Integer_Overflow__char_max_add_21.c":87:1)
#loc102 = loc("CWE190_Integer_Overflow__char_max_add_21.c":81:5)
#loc103 = loc("CWE190_Integer_Overflow__char_max_add_21.c":81:10)
#loc104 = loc("CWE190_Integer_Overflow__char_max_add_21.c":82:12)
#loc105 = loc("CWE190_Integer_Overflow__char_max_add_21.c":82:5)
#loc106 = loc("CWE190_Integer_Overflow__char_max_add_21.c":84:12)
#loc107 = loc("CWE190_Integer_Overflow__char_max_add_21.c":84:5)
#loc108 = loc("CWE190_Integer_Overflow__char_max_add_21.c":85:22)
#loc109 = loc("CWE190_Integer_Overflow__char_max_add_21.c":85:5)
#loc110 = loc("CWE190_Integer_Overflow__char_max_add_21.c":86:18)
#loc111 = loc("CWE190_Integer_Overflow__char_max_add_21.c":86:5)
#loc112 = loc("CWE190_Integer_Overflow__char_max_add_21.c":53:1)
#loc113 = loc("CWE190_Integer_Overflow__char_max_add_21.c":53:29)
#loc114 = loc("CWE190_Integer_Overflow__char_max_add_21.c":90:1)
#loc115 = loc("CWE190_Integer_Overflow__char_max_add_21.c":105:1)
#loc118 = loc("CWE190_Integer_Overflow__char_max_add_21.c":97:13)
#loc119 = loc("CWE190_Integer_Overflow__char_max_add_21.c":97:34)
#loc120 = loc("CWE190_Integer_Overflow__char_max_add_21.c":91:1)
#loc121 = loc("CWE190_Integer_Overflow__char_max_add_21.c":92:5)
#loc122 = loc("CWE190_Integer_Overflow__char_max_add_21.c":104:5)
#loc123 = loc("CWE190_Integer_Overflow__char_max_add_21.c":92:8)
#loc124 = loc("CWE190_Integer_Overflow__char_max_add_21.c":93:5)
#loc125 = loc("CWE190_Integer_Overflow__char_max_add_21.c":95:9)
#loc126 = loc("CWE190_Integer_Overflow__char_max_add_21.c":103:9)
#loc127 = loc("CWE190_Integer_Overflow__char_max_add_21.c":95:13)
#loc128 = loc("CWE190_Integer_Overflow__char_max_add_21.c":95:20)
#loc129 = loc("CWE190_Integer_Overflow__char_max_add_21.c":96:9)
#loc130 = loc("CWE190_Integer_Overflow__char_max_add_21.c":99:9)
#loc131 = loc("CWE190_Integer_Overflow__char_max_add_21.c":101:9)
#loc132 = loc("CWE190_Integer_Overflow__char_max_add_21.c":97:27)
#loc133 = loc("CWE190_Integer_Overflow__char_max_add_21.c":98:30)
#loc134 = loc("CWE190_Integer_Overflow__char_max_add_21.c":98:13)
#loc135 = loc("CWE190_Integer_Overflow__char_max_add_21.c":102:23)
#loc136 = loc("CWE190_Integer_Overflow__char_max_add_21.c":102:13)
#loc137 = loc("CWE190_Integer_Overflow__char_max_add_21.c":107:1)
#loc138 = loc("CWE190_Integer_Overflow__char_max_add_21.c":115:1)
#loc139 = loc("CWE190_Integer_Overflow__char_max_add_21.c":109:5)
#loc140 = loc("CWE190_Integer_Overflow__char_max_add_21.c":109:10)
#loc141 = loc("CWE190_Integer_Overflow__char_max_add_21.c":110:12)
#loc142 = loc("CWE190_Integer_Overflow__char_max_add_21.c":110:5)
#loc143 = loc("CWE190_Integer_Overflow__char_max_add_21.c":112:12)
#loc144 = loc("CWE190_Integer_Overflow__char_max_add_21.c":112:5)
#loc145 = loc("CWE190_Integer_Overflow__char_max_add_21.c":113:22)
#loc146 = loc("CWE190_Integer_Overflow__char_max_add_21.c":113:5)
#loc147 = loc("CWE190_Integer_Overflow__char_max_add_21.c":114:18)
#loc148 = loc("CWE190_Integer_Overflow__char_max_add_21.c":114:5)
#loc149 = loc("CWE190_Integer_Overflow__char_max_add_21.c":54:1)
#loc150 = loc("CWE190_Integer_Overflow__char_max_add_21.c":54:28)
#loc151 = loc("CWE190_Integer_Overflow__char_max_add_21.c":118:1)
#loc152 = loc("CWE190_Integer_Overflow__char_max_add_21.c":128:1)
#loc155 = loc("CWE190_Integer_Overflow__char_max_add_21.c":124:13)
#loc156 = loc("CWE190_Integer_Overflow__char_max_add_21.c":124:34)
#loc157 = loc("CWE190_Integer_Overflow__char_max_add_21.c":119:1)
#loc158 = loc("CWE190_Integer_Overflow__char_max_add_21.c":120:5)
#loc159 = loc("CWE190_Integer_Overflow__char_max_add_21.c":127:5)
#loc160 = loc("CWE190_Integer_Overflow__char_max_add_21.c":120:8)
#loc161 = loc("CWE190_Integer_Overflow__char_max_add_21.c":121:5)
#loc162 = loc("CWE190_Integer_Overflow__char_max_add_21.c":122:9)
#loc163 = loc("CWE190_Integer_Overflow__char_max_add_21.c":126:9)
#loc164 = loc("CWE190_Integer_Overflow__char_max_add_21.c":124:27)
#loc165 = loc("CWE190_Integer_Overflow__char_max_add_21.c":125:30)
#loc166 = loc("CWE190_Integer_Overflow__char_max_add_21.c":125:13)
#loc167 = loc("CWE190_Integer_Overflow__char_max_add_21.c":130:1)
#loc168 = loc("CWE190_Integer_Overflow__char_max_add_21.c":138:1)
#loc169 = loc("CWE190_Integer_Overflow__char_max_add_21.c":132:5)
#loc170 = loc("CWE190_Integer_Overflow__char_max_add_21.c":132:10)
#loc171 = loc("CWE190_Integer_Overflow__char_max_add_21.c":133:12)
#loc172 = loc("CWE190_Integer_Overflow__char_max_add_21.c":133:5)
#loc173 = loc("CWE190_Integer_Overflow__char_max_add_21.c":135:12)
#loc174 = loc("CWE190_Integer_Overflow__char_max_add_21.c":135:5)
#loc175 = loc("CWE190_Integer_Overflow__char_max_add_21.c":136:21)
#loc176 = loc("CWE190_Integer_Overflow__char_max_add_21.c":136:5)
#loc177 = loc("CWE190_Integer_Overflow__char_max_add_21.c":137:17)
#loc178 = loc("CWE190_Integer_Overflow__char_max_add_21.c":137:5)
#loc179 = loc(fused[#loc1, #loc2])
#loc180 = loc(fused[#loc3, #loc4])
#loc181 = loc(fused[#loc5, #loc6])
#loc183 = loc(fused[#loc9, #loc10])
#loc184 = loc(fused[#loc12, #loc13])
#loc185 = loc(fused[#loc15, #loc13])
#loc186 = loc(fused[#loc16, #loc17])
#loc187 = loc(fused[#loc21, #loc22])
#loc188 = loc(fused[#loc23, #loc24])
#loc189 = loc(fused[#loc26, #loc25])
#loc190 = loc(fused[#loc28, #loc27])
#loc191 = loc(fused[#loc30, #loc29])
#loc192 = loc(fused[#loc33, #loc34])
#loc193 = loc(fused[#loc35, #loc36])
#loc194 = loc(fused[#loc37, #loc38])
#loc195 = loc(fused[#loc39, #loc40])
#loc196 = loc(fused[#loc41, #loc42])
#loc197 = loc(fused[#loc43, #loc44])
#loc198 = loc(fused[#loc45, #loc46])
#loc199 = loc(fused[#loc51, #loc52])
#loc202 = loc(fused[#loc62, #loc63])
#loc203 = loc(fused[#loc66, #loc67])
#loc204 = loc(fused[#loc70, #loc69])
#loc205 = loc(fused[#loc71, #loc72])
#loc206 = loc(fused[#loc75, #loc76])
#loc208 = loc(fused[#loc79, #loc80])
#loc209 = loc(fused[#loc82, #loc83])
#loc210 = loc(fused[#loc85, #loc86, #loc87, #loc83])
#loc211 = loc(fused[#loc89, #loc90])
#loc212 = loc(fused[#loc91, #loc92])
#loc213 = loc(fused[#loc93, #loc94, #loc95, #loc90])
#loc214 = loc(fused[#loc100, #loc101])
#loc215 = loc(fused[#loc102, #loc103])
#loc216 = loc(fused[#loc105, #loc104])
#loc217 = loc(fused[#loc107, #loc106])
#loc218 = loc(fused[#loc109, #loc108])
#loc219 = loc(fused[#loc112, #loc113])
#loc220 = loc(fused[#loc114, #loc115])
#loc222 = loc(fused[#loc118, #loc119])
#loc223 = loc(fused[#loc121, #loc122])
#loc224 = loc(fused[#loc124, #loc122])
#loc225 = loc(fused[#loc125, #loc126])
#loc226 = loc(fused[#loc127, #loc128])
#loc227 = loc(fused[#loc129, #loc130, #loc131, #loc126])
#loc228 = loc(fused[#loc137, #loc138])
#loc229 = loc(fused[#loc139, #loc140])
#loc230 = loc(fused[#loc142, #loc141])
#loc231 = loc(fused[#loc144, #loc143])
#loc232 = loc(fused[#loc146, #loc145])
#loc233 = loc(fused[#loc149, #loc150])
#loc234 = loc(fused[#loc151, #loc152])
#loc236 = loc(fused[#loc155, #loc156])
#loc237 = loc(fused[#loc158, #loc159])
#loc238 = loc(fused[#loc161, #loc159])
#loc239 = loc(fused[#loc162, #loc163])
#loc240 = loc(fused[#loc167, #loc168])
#loc241 = loc(fused[#loc169, #loc170])
#loc242 = loc(fused[#loc172, #loc171])
#loc243 = loc(fused[#loc174, #loc173])
#loc244 = loc(fused[#loc176, #loc175])
