!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__stdThreadLock = !cir.struct<struct "_stdThreadLock" incomplete>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc44 = loc("CWE667_Improper_Locking__basic_18.c":81:10)
#loc45 = loc("CWE667_Improper_Locking__basic_18.c":81:14)
#loc46 = loc("CWE667_Improper_Locking__basic_18.c":81:20)
#loc47 = loc("CWE667_Improper_Locking__basic_18.c":81:32)
#loc106 = loc(fused[#loc44, #loc45])
#loc107 = loc(fused[#loc46, #loc47])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE667_Improper_Locking/CWE667_Improper_Locking__basic_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @good1.goodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc1)
  cir.global "private" internal dsolocal @CWE667_Improper_Locking__basic_18_bad.badLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc2)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc93)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Creating lock...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc5)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc94)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Could not create lock\00" : !cir.array<!s8i x 22>> : !cir.array<!s8i x 22> {alignment = 1 : i64} loc(#loc8)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc95)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Acquiring lock...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc11)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc96)
  cir.func no_proto @CWE667_Improper_Locking__basic_18_bad() extra(#fn_attr1) {
    cir.goto "sink" loc(#loc98)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc18)
    %0 = cir.get_global @CWE667_Improper_Locking__basic_18_bad.badLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc2)
    %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc5)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc19)
    cir.scope {
      %6 = cir.call @stdThreadLockCreate(%0) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc22)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc22)
      %8 = cir.unary(not, %7) : !cir.bool, !cir.bool loc(#loc22)
      cir.if %8 {
        %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc8)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc8)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc24)
        %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc25)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc26)
        cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc25)
      } loc(#loc100)
    } loc(#loc99)
    %3 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc11)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc11)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc27)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc28)
    cir.call @stdThreadLockAcquire(%5) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc29)
    cir.return loc(#loc15)
  } loc(#loc97)
  cir.func no_proto @CWE667_Improper_Locking__basic_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc102)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc31)
  } loc(#loc101)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc103)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc41)
  cir.func @main(%arg0: !s32i loc(fused[#loc44, #loc45]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc46, #loc47])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc106)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc107)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc43)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc48)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc48)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc49)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc50)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc50)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc51)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc38)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %8 = cir.get_global @CWE667_Improper_Locking__basic_18_good : !cir.ptr<!cir.func<!void ()>> loc(#loc108)
    cir.call @CWE667_Improper_Locking__basic_18_good() : () -> () loc(#loc53)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc39)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc40)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %13 = cir.get_global @CWE667_Improper_Locking__basic_18_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc109)
    cir.call @CWE667_Improper_Locking__basic_18_bad() : () -> () loc(#loc57)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc41)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc60)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    cir.return %17 : !s32i loc(#loc110)
  } loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Releasing lock...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc62)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc111)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"Destroying lock...\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc65)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc112)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.goto "sink" loc(#loc114)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc72)
    %0 = cir.get_global @good1.goodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc1)
    %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc73)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    cir.scope {
      %12 = cir.call @stdThreadLockCreate(%0) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc77)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc77)
      %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc77)
      cir.if %14 {
        %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc79)
        %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc79)
        cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc80)
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc81)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc82)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc81)
      } loc(#loc116)
    } loc(#loc115)
    %3 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc83)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc83)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc85)
    cir.call @stdThreadLockAcquire(%5) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc86)
    %6 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc62)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc88)
    cir.call @stdThreadLockRelease(%8) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc89)
    %9 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc65)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc91)
    cir.call @stdThreadLockDestroy(%11) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc92)
    cir.return loc(#loc69)
  } loc(#loc113)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE667_Improper_Locking/CWE667_Improper_Locking__basic_18.c":0:0)
#loc1 = loc("CWE667_Improper_Locking__basic_18.c":50:30)
#loc2 = loc("CWE667_Improper_Locking__basic_18.c":27:30)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE667_Improper_Locking__basic_18.c":28:19)
#loc6 = loc("../../testcasesupport/std_thread.h":18:1)
#loc7 = loc("../../testcasesupport/std_thread.h":18:44)
#loc8 = loc("CWE667_Improper_Locking__basic_18.c":31:23)
#loc9 = loc("/usr/include/stdlib.h":756:1)
#loc10 = loc("/usr/include/stdlib.h":756:70)
#loc11 = loc("CWE667_Improper_Locking__basic_18.c":34:19)
#loc12 = loc("../../testcasesupport/std_thread.h":19:1)
#loc13 = loc("../../testcasesupport/std_thread.h":19:45)
#loc14 = loc("CWE667_Improper_Locking__basic_18.c":22:1)
#loc15 = loc("CWE667_Improper_Locking__basic_18.c":38:1)
#loc16 = loc("CWE667_Improper_Locking__basic_18.c":24:5)
#loc17 = loc("CWE667_Improper_Locking__basic_18.c":24:10)
#loc18 = loc("CWE667_Improper_Locking__basic_18.c":25:1)
#loc19 = loc("CWE667_Improper_Locking__basic_18.c":28:9)
#loc20 = loc("CWE667_Improper_Locking__basic_18.c":29:9)
#loc21 = loc("CWE667_Improper_Locking__basic_18.c":33:9)
#loc22 = loc("CWE667_Improper_Locking__basic_18.c":29:14)
#loc23 = loc("CWE667_Improper_Locking__basic_18.c":30:9)
#loc24 = loc("CWE667_Improper_Locking__basic_18.c":31:13)
#loc25 = loc("CWE667_Improper_Locking__basic_18.c":32:13)
#loc26 = loc("CWE667_Improper_Locking__basic_18.c":32:18)
#loc27 = loc("CWE667_Improper_Locking__basic_18.c":34:9)
#loc28 = loc("CWE667_Improper_Locking__basic_18.c":35:30)
#loc29 = loc("CWE667_Improper_Locking__basic_18.c":35:9)
#loc30 = loc("CWE667_Improper_Locking__basic_18.c":67:1)
#loc31 = loc("CWE667_Improper_Locking__basic_18.c":70:1)
#loc32 = loc("CWE667_Improper_Locking__basic_18.c":69:5)
#loc33 = loc("CWE667_Improper_Locking__basic_18.c":69:11)
#loc34 = loc("/usr/include/stdlib.h":575:1)
#loc35 = loc("/usr/include/stdlib.h":575:41)
#loc36 = loc("/usr/include/time.h":76:1)
#loc37 = loc("/usr/include/time.h":76:38)
#loc38 = loc("CWE667_Improper_Locking__basic_18.c":86:15)
#loc39 = loc("CWE667_Improper_Locking__basic_18.c":88:15)
#loc40 = loc("CWE667_Improper_Locking__basic_18.c":91:15)
#loc41 = loc("CWE667_Improper_Locking__basic_18.c":93:15)
#loc42 = loc("CWE667_Improper_Locking__basic_18.c":81:1)
#loc43 = loc("CWE667_Improper_Locking__basic_18.c":96:1)
#loc48 = loc("CWE667_Improper_Locking__basic_18.c":82:1)
#loc49 = loc("CWE667_Improper_Locking__basic_18.c":84:27)
#loc50 = loc("CWE667_Improper_Locking__basic_18.c":84:22)
#loc51 = loc("CWE667_Improper_Locking__basic_18.c":84:5)
#loc52 = loc("CWE667_Improper_Locking__basic_18.c":86:5)
#loc53 = loc("CWE667_Improper_Locking__basic_18.c":87:5)
#loc54 = loc("CWE667_Improper_Locking__basic_18.c":87:44)
#loc55 = loc("CWE667_Improper_Locking__basic_18.c":88:5)
#loc56 = loc("CWE667_Improper_Locking__basic_18.c":91:5)
#loc57 = loc("CWE667_Improper_Locking__basic_18.c":92:5)
#loc58 = loc("CWE667_Improper_Locking__basic_18.c":92:43)
#loc59 = loc("CWE667_Improper_Locking__basic_18.c":93:5)
#loc60 = loc("CWE667_Improper_Locking__basic_18.c":95:12)
#loc61 = loc("CWE667_Improper_Locking__basic_18.c":95:5)
#loc62 = loc("CWE667_Improper_Locking__basic_18.c":60:19)
#loc63 = loc("../../testcasesupport/std_thread.h":20:1)
#loc64 = loc("../../testcasesupport/std_thread.h":20:45)
#loc65 = loc("CWE667_Improper_Locking__basic_18.c":62:19)
#loc66 = loc("../../testcasesupport/std_thread.h":21:1)
#loc67 = loc("../../testcasesupport/std_thread.h":21:45)
#loc68 = loc("CWE667_Improper_Locking__basic_18.c":45:1)
#loc69 = loc("CWE667_Improper_Locking__basic_18.c":65:1)
#loc70 = loc("CWE667_Improper_Locking__basic_18.c":47:5)
#loc71 = loc("CWE667_Improper_Locking__basic_18.c":47:10)
#loc72 = loc("CWE667_Improper_Locking__basic_18.c":48:1)
#loc73 = loc("CWE667_Improper_Locking__basic_18.c":51:19)
#loc74 = loc("CWE667_Improper_Locking__basic_18.c":51:9)
#loc75 = loc("CWE667_Improper_Locking__basic_18.c":52:9)
#loc76 = loc("CWE667_Improper_Locking__basic_18.c":56:9)
#loc77 = loc("CWE667_Improper_Locking__basic_18.c":52:14)
#loc78 = loc("CWE667_Improper_Locking__basic_18.c":53:9)
#loc79 = loc("CWE667_Improper_Locking__basic_18.c":54:23)
#loc80 = loc("CWE667_Improper_Locking__basic_18.c":54:13)
#loc81 = loc("CWE667_Improper_Locking__basic_18.c":55:13)
#loc82 = loc("CWE667_Improper_Locking__basic_18.c":55:18)
#loc83 = loc("CWE667_Improper_Locking__basic_18.c":57:19)
#loc84 = loc("CWE667_Improper_Locking__basic_18.c":57:9)
#loc85 = loc("CWE667_Improper_Locking__basic_18.c":58:30)
#loc86 = loc("CWE667_Improper_Locking__basic_18.c":58:9)
#loc87 = loc("CWE667_Improper_Locking__basic_18.c":60:9)
#loc88 = loc("CWE667_Improper_Locking__basic_18.c":61:30)
#loc89 = loc("CWE667_Improper_Locking__basic_18.c":61:9)
#loc90 = loc("CWE667_Improper_Locking__basic_18.c":62:9)
#loc91 = loc("CWE667_Improper_Locking__basic_18.c":63:30)
#loc92 = loc("CWE667_Improper_Locking__basic_18.c":63:9)
#loc93 = loc(fused[#loc3, #loc4])
#loc94 = loc(fused[#loc6, #loc7])
#loc95 = loc(fused[#loc9, #loc10])
#loc96 = loc(fused[#loc12, #loc13])
#loc97 = loc(fused[#loc14, #loc15])
#loc98 = loc(fused[#loc16, #loc17])
#loc99 = loc(fused[#loc20, #loc21])
#loc100 = loc(fused[#loc23, #loc21])
#loc101 = loc(fused[#loc30, #loc31])
#loc102 = loc(fused[#loc32, #loc33])
#loc103 = loc(fused[#loc34, #loc35])
#loc104 = loc(fused[#loc36, #loc37])
#loc105 = loc(fused[#loc42, #loc43])
#loc108 = loc(fused[#loc53, #loc54])
#loc109 = loc(fused[#loc57, #loc58])
#loc110 = loc(fused[#loc61, #loc60])
#loc111 = loc(fused[#loc63, #loc64])
#loc112 = loc(fused[#loc66, #loc67])
#loc113 = loc(fused[#loc68, #loc69])
#loc114 = loc(fused[#loc70, #loc71])
#loc115 = loc(fused[#loc75, #loc76])
#loc116 = loc(fused[#loc78, #loc76])
