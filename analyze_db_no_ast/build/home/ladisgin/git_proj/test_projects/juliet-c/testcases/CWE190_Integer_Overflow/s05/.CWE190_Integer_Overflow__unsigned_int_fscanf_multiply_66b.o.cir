!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":22:72)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":22:95)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":39:76)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":39:99)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":51:76)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":51:99)
#loc79 = loc(fused[#loc5, #loc6])
#loc87 = loc(fused[#loc25, #loc26])
#loc96 = loc(fused[#loc48, #loc49])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printUnsignedLine(!u32i) loc(#loc77)
  cir.func  @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b_badSink(%arg0: !cir.ptr<!u32i> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc79)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc80)
    cir.store %arg0, %0 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc9)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc10)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc11)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!u32i>, %3 : !s32i), !cir.ptr<!u32i> loc(#loc8)
    %5 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc10)
    cir.store %5, %1 : !u32i, !cir.ptr<!u32i> loc(#loc80)
    cir.scope {
      %6 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc14)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc15)
      %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc15)
      %9 = cir.cmp(gt, %6, %8) : !u32i, !s32i loc(#loc82)
      %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc16)
      cir.if %10 {
        %11 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc84)
        %12 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc20)
        %13 = cir.const #cir.int<2> : !s32i loc(#loc19)
        %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc19)
        %15 = cir.binop(mul, %12, %14) : !u32i loc(#loc85)
        cir.store %15, %11 : !u32i, !cir.ptr<!u32i> loc(#loc84)
        %16 = cir.load %11 : !cir.ptr<!u32i>, !u32i loc(#loc21)
        cir.call @printUnsignedLine(%16) : (!u32i) -> () loc(#loc22)
      } loc(#loc83)
    } loc(#loc81)
    cir.return loc(#loc4)
  } loc(#loc78)
  cir.func  @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b_goodG2BSink(%arg0: !cir.ptr<!u32i> loc(fused[#loc25, #loc26])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc87)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc88)
    cir.store %arg0, %0 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc29)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc30)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc31)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!u32i>, %3 : !s32i), !cir.ptr<!u32i> loc(#loc28)
    %5 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc30)
    cir.store %5, %1 : !u32i, !cir.ptr<!u32i> loc(#loc88)
    cir.scope {
      %6 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc34)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc35)
      %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc35)
      %9 = cir.cmp(gt, %6, %8) : !u32i, !s32i loc(#loc90)
      %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc36)
      cir.if %10 {
        %11 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc92)
        %12 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc40)
        %13 = cir.const #cir.int<2> : !s32i loc(#loc39)
        %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc39)
        %15 = cir.binop(mul, %12, %14) : !u32i loc(#loc93)
        cir.store %15, %11 : !u32i, !cir.ptr<!u32i> loc(#loc92)
        %16 = cir.load %11 : !cir.ptr<!u32i>, !u32i loc(#loc41)
        cir.call @printUnsignedLine(%16) : (!u32i) -> () loc(#loc42)
      } loc(#loc91)
    } loc(#loc89)
    cir.return loc(#loc24)
  } loc(#loc86)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc94)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc45)
  cir.func  @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b_goodB2GSink(%arg0: !cir.ptr<!u32i> loc(fused[#loc48, #loc49])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc96)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc97)
    cir.store %arg0, %0 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc52)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc53)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc54)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!u32i>, %3 : !s32i), !cir.ptr<!u32i> loc(#loc51)
    %5 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc53)
    cir.store %5, %1 : !u32i, !cir.ptr<!u32i> loc(#loc97)
    cir.scope {
      %6 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc57)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc58)
      %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc58)
      %9 = cir.cmp(gt, %6, %8) : !u32i, !s32i loc(#loc99)
      %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc59)
      cir.if %10 {
        cir.scope {
          %11 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc63)
          %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc64)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc64)
          %14 = cir.const #cir.int<2> : !u32i loc(#loc64)
          %15 = cir.binop(mul, %13, %14) : !u32i loc(#loc64)
          %16 = cir.const #cir.int<1> : !u32i loc(#loc64)
          %17 = cir.binop(add, %15, %16) : !u32i loc(#loc64)
          %18 = cir.const #cir.int<2> : !s32i loc(#loc65)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc65)
          %20 = cir.binop(div, %17, %19) : !u32i loc(#loc102)
          %21 = cir.cmp(lt, %11, %20) : !u32i, !s32i loc(#loc103)
          %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc67)
          cir.if %22 {
            %23 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc105)
            %24 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc73)
            %25 = cir.const #cir.int<2> : !s32i loc(#loc72)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc72)
            %27 = cir.binop(mul, %24, %26) : !u32i loc(#loc106)
            cir.store %27, %23 : !u32i, !cir.ptr<!u32i> loc(#loc105)
            %28 = cir.load %23 : !cir.ptr<!u32i>, !u32i loc(#loc74)
            cir.call @printUnsignedLine(%28) : (!u32i) -> () loc(#loc75)
          } else {
            %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc45)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc45)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc76)
          } loc(#loc104)
        } loc(#loc101)
      } loc(#loc100)
    } loc(#loc98)
    cir.return loc(#loc47)
  } loc(#loc95)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc3 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":32:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":25:5)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":25:36)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":23:1)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":25:25)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":25:35)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":26:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":31:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":26:8)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":26:15)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":26:13)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":27:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":29:9)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":29:38)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":29:31)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":30:27)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":30:9)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":39:1)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":48:1)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":41:5)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":41:36)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":40:1)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":41:25)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":41:35)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":42:5)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":47:5)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":42:8)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":42:15)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":42:13)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":43:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":45:9)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":45:38)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":45:31)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":46:27)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":46:9)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":64:23)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":51:1)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":67:1)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":53:5)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":53:36)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":52:1)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":53:25)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":53:35)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":54:5)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":66:5)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":54:8)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":54:15)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":54:13)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":55:5)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":57:9)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":65:9)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":57:13)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":57:21)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":57:30)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":57:31)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":57:18)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":58:9)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":61:9)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":63:9)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":59:13)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":59:42)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":59:35)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":60:31)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":60:13)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_66b.c":64:13)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc3, #loc4])
#loc80 = loc(fused[#loc7, #loc8])
#loc81 = loc(fused[#loc12, #loc13])
#loc82 = loc(fused[#loc14, #loc15])
#loc83 = loc(fused[#loc17, #loc13])
#loc84 = loc(fused[#loc18, #loc19])
#loc85 = loc(fused[#loc20, #loc19])
#loc86 = loc(fused[#loc23, #loc24])
#loc88 = loc(fused[#loc27, #loc28])
#loc89 = loc(fused[#loc32, #loc33])
#loc90 = loc(fused[#loc34, #loc35])
#loc91 = loc(fused[#loc37, #loc33])
#loc92 = loc(fused[#loc38, #loc39])
#loc93 = loc(fused[#loc40, #loc39])
#loc94 = loc(fused[#loc43, #loc44])
#loc95 = loc(fused[#loc46, #loc47])
#loc97 = loc(fused[#loc50, #loc51])
#loc98 = loc(fused[#loc55, #loc56])
#loc99 = loc(fused[#loc57, #loc58])
#loc100 = loc(fused[#loc60, #loc56])
#loc101 = loc(fused[#loc61, #loc62])
#loc102 = loc(fused[#loc64, #loc65])
#loc103 = loc(fused[#loc63, #loc66])
#loc104 = loc(fused[#loc68, #loc69, #loc70, #loc62])
#loc105 = loc(fused[#loc71, #loc72])
#loc106 = loc(fused[#loc73, #loc72])
