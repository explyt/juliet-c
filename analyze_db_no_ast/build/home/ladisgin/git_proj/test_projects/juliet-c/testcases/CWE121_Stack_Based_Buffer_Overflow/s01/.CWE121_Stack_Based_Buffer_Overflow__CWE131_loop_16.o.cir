!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc83)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc85)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc7)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc86)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc11)
        cir.condition(%3) loc(#loc11)
      } do {
        %2 = cir.const #cir.int<10> : !s32i loc(#loc12)
        %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc12)
        %4 = cir.alloca !u8i, !cir.ptr<!u8i>, %3 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
        %5 = cir.cast(bitcast, %4 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
        %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc12)
        cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc88)
        cir.break loc(#loc14)
      } loc(#loc87)
    } loc(#loc87)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc90)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc91)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc90)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc90)
      cir.scope {
        %9 = cir.const #cir.int<0> : !s32i loc(#loc23)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc23)
        cir.store %10, %3 : !u64i, !cir.ptr<!u64i> loc(#loc93)
        cir.for : cond {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc25)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc26)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc26)
          %14 = cir.cmp(lt, %11, %13) : !u64i, !s32i loc(#loc94)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc27)
          cir.condition(%15) loc(#loc27)
        } body {
          cir.scope {
            %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc29)
            %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc30)
            %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !u64i), !cir.ptr<!s32i> loc(#loc30)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc30)
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
            %16 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc32)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc33)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc96)
          } loc(#loc95)
          cir.yield loc(#loc22)
        } step {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc35)
          %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc36)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc97)
          cir.yield loc(#loc92)
        } loc(#loc92)
      } loc(#loc92)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc38)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc39)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc37)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc40)
    } loc(#loc89)
    cir.return loc(#loc4)
  } loc(#loc84)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc99)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    cir.return loc(#loc42)
  } loc(#loc98)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc101)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc49)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc102)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc53)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc53)
        cir.condition(%3) loc(#loc53)
      } do {
        %2 = cir.const #cir.int<10> : !s32i loc(#loc54)
        %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc54)
        %4 = cir.const #cir.int<4> : !u64i loc(#loc54)
        %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc54)
        %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc54)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc54)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc54)
        cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc104)
        cir.break loc(#loc56)
      } loc(#loc103)
    } loc(#loc103)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc106)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc107)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc106)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc106)
      cir.scope {
        %9 = cir.const #cir.int<0> : !s32i loc(#loc65)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc65)
        cir.store %10, %3 : !u64i, !cir.ptr<!u64i> loc(#loc109)
        cir.for : cond {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc67)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc68)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc68)
          %14 = cir.cmp(lt, %11, %13) : !u64i, !s32i loc(#loc110)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc69)
          cir.condition(%15) loc(#loc69)
        } body {
          cir.scope {
            %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc71)
            %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc72)
            %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !u64i), !cir.ptr<!s32i> loc(#loc72)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc72)
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc73)
            %16 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc74)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc75)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc112)
          } loc(#loc111)
          cir.yield loc(#loc64)
        } step {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc77)
          %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc78)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc113)
          cir.yield loc(#loc108)
        } loc(#loc108)
      } loc(#loc108)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc79)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc80)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc81)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc79)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc82)
    } loc(#loc105)
    cir.return loc(#loc46)
  } loc(#loc100)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":41:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":23:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":23:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":24:12)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":24:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":30:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":25:11)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":28:23)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":28:9)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":29:9)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":31:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":40:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":32:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":32:28)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":33:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":33:16)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":35:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":38:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":35:18)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":35:14)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":35:21)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":35:25)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":35:23)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":36:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":37:30)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":37:23)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":37:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":37:18)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":37:19)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":37:31)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":35:30)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":35:29)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":39:22)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":39:27)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":39:28)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":39:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":70:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":73:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":72:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":72:13)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":48:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":68:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":50:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":50:11)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":51:12)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":51:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":52:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":57:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":52:11)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":55:23)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":55:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":56:9)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":58:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":67:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":59:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":59:28)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":60:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":60:16)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":62:9)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":65:9)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":62:18)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":62:14)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":62:21)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":62:25)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":62:23)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":63:9)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":64:30)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":64:23)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":64:13)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":64:18)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":64:19)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":64:31)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":62:30)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":62:29)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":66:22)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":66:27)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":66:28)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":66:9)
#loc83 = loc(fused[#loc1, #loc2])
#loc84 = loc(fused[#loc3, #loc4])
#loc85 = loc(fused[#loc5, #loc6])
#loc86 = loc(fused[#loc8, #loc7])
#loc87 = loc(fused[#loc9, #loc10])
#loc88 = loc(fused[#loc13, #loc12])
#loc89 = loc(fused[#loc15, #loc16])
#loc90 = loc(fused[#loc17, #loc18])
#loc91 = loc(fused[#loc19, #loc20])
#loc92 = loc(fused[#loc21, #loc22])
#loc93 = loc(fused[#loc24, #loc23])
#loc94 = loc(fused[#loc25, #loc26])
#loc95 = loc(fused[#loc28, #loc22])
#loc96 = loc(fused[#loc31, #loc34])
#loc97 = loc(fused[#loc36, #loc35])
#loc98 = loc(fused[#loc41, #loc42])
#loc99 = loc(fused[#loc43, #loc44])
#loc100 = loc(fused[#loc45, #loc46])
#loc101 = loc(fused[#loc47, #loc48])
#loc102 = loc(fused[#loc50, #loc49])
#loc103 = loc(fused[#loc51, #loc52])
#loc104 = loc(fused[#loc55, #loc54])
#loc105 = loc(fused[#loc57, #loc58])
#loc106 = loc(fused[#loc59, #loc60])
#loc107 = loc(fused[#loc61, #loc62])
#loc108 = loc(fused[#loc63, #loc64])
#loc109 = loc(fused[#loc66, #loc65])
#loc110 = loc(fused[#loc67, #loc68])
#loc111 = loc(fused[#loc70, #loc64])
#loc112 = loc(fused[#loc73, #loc76])
#loc113 = loc(fused[#loc78, #loc77])
