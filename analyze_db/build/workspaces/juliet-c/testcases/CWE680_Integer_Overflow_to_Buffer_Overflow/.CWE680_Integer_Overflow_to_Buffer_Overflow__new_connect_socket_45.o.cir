!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc214)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc215)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc216)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc217)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc218)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc219)
  cir.func private @close(!s32i) -> !s32i loc(#loc220)
  cir.global "private" internal dsolocal @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45L7badDataE = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc221)
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc222)
  cir.func private @printIntLine(!s32i) loc(#loc223)
  cir.func internal private @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45L7badSinkEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc225)
    %1 = cir.get_global @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45L7badDataE : !cir.ptr<!s32i> loc(#loc221)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc227)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc228)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc229)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc33)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc230)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc231)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc232)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc37)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc38)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc233)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc233)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc234)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc44)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc44)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc236)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc46)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc47)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc237)
          cir.condition(%24) loc(#loc237)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc49)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc51)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc52)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc239)
          } loc(#loc238)
          cir.yield loc(#loc43)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc53)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc54)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc240)
          cir.yield loc(#loc235)
        } loc(#loc235)
      } loc(#loc235)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc56)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc57)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc55)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc58)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
      cir.delete.array %18 : <!s32i> loc(#loc59)
    } loc(#loc226)
    cir.return loc(#loc23)
  } loc(#loc224)
  cir.func @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_453badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc242)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc65)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc243)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc245)
      %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc246)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc247)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc248)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc74)
      %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc74)
      cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc247)
      cir.scope {
        cir.do {
          cir.scope {
            %11 = cir.const #cir.int<2> : !s32i loc(#loc81)
            %12 = cir.const #cir.int<1> : !u32i loc(#loc82)
            %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc82)
            %14 = cir.const #cir.int<6> : !u32i loc(#loc83)
            %15 = cir.cast(integral, %14 : !u32i), !s32i loc(#loc83)
            %16 = cir.call @socket(%11, %13, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc84)
            cir.store %16, %7 : !s32i, !cir.ptr<!s32i> loc(#loc251)
            cir.scope {
              %54 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc89)
              %55 = cir.const #cir.int<1> : !s32i loc(#loc90)
              %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc90)
              %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc253)
              cir.if %57 {
                cir.break loc(#loc92)
              } loc(#loc254)
            } loc(#loc252)
            %17 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc255)
            %18 = cir.const #cir.int<0> : !s32i loc(#loc95)
            %19 = cir.const #cir.int<16> : !u64i loc(#loc256)
            cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc257)
            %20 = cir.const #cir.int<2> : !s32i loc(#loc100)
            %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc100)
            %22 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc101)
            cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc258)
            %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
            %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc103)
            %26 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc104)
            %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc105)
            cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc259)
            %28 = cir.const #cir.int<27015> : !s32i loc(#loc108)
            %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc108)
            %30 = cir.call @htons(%29) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc109)
            %31 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc110)
            cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc260)
            cir.scope {
              %54 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc115)
              %55 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc262)
              %56 = cir.const #cir.int<16> : !u64i loc(#loc263)
              %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc263)
              %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc120)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc121)
              %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc121)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc264)
              cir.if %61 {
                cir.break loc(#loc123)
              } loc(#loc265)
            } loc(#loc261)
            %32 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc124)
            %33 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc125)
            %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc125)
            %35 = cir.const #cir.int<3> : !s32i loc(#loc126)
            %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc126)
            %37 = cir.const #cir.int<4> : !u64i loc(#loc126)
            %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc126)
            %39 = cir.const #cir.int<2> : !s32i loc(#loc126)
            %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc126)
            %41 = cir.binop(add, %38, %40) : !u64i loc(#loc126)
            %42 = cir.const #cir.int<1> : !s32i loc(#loc127)
            %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc127)
            %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc266)
            %45 = cir.const #cir.int<0> : !s32i loc(#loc128)
            %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc129)
            %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc129)
            cir.store %47, %5 : !s32i, !cir.ptr<!s32i> loc(#loc267)
            cir.scope {
              %54 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc134)
              %55 = cir.const #cir.int<1> : !s32i loc(#loc135)
              %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc135)
              %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc269)
              %58 = cir.ternary(%57, true {
                %59 = cir.const #true loc(#loc136)
                cir.yield %59 : !cir.bool loc(#loc136)
              }, false {
                %59 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc137)
                %60 = cir.const #cir.int<0> : !s32i loc(#loc138)
                %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc270)
                %62 = cir.ternary(%61, true {
                  %63 = cir.const #true loc(#loc136)
                  cir.yield %63 : !cir.bool loc(#loc136)
                }, false {
                  %63 = cir.const #false loc(#loc136)
                  cir.yield %63 : !cir.bool loc(#loc136)
                }) : (!cir.bool) -> !cir.bool loc(#loc136)
                cir.yield %62 : !cir.bool loc(#loc136)
              }) : (!cir.bool) -> !cir.bool loc(#loc136)
              cir.if %58 {
                cir.break loc(#loc140)
              } loc(#loc271)
            } loc(#loc268)
            %48 = cir.const #cir.int<0> : !s8i loc(#loc141)
            %49 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc142)
            %50 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc143)
            %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc143)
            cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc272)
            %52 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc144)
            %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc145)
            cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc273)
          } loc(#loc250)
          cir.yield loc(#loc78)
        } while {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc148)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc148)
          cir.condition(%12) loc(#loc148)
        } loc(#loc249)
      } loc(#loc249)
      cir.scope {
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc151)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc152)
        %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc152)
        %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc275)
        cir.if %14 {
          %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc154)
          %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc155)
        } loc(#loc276)
      } loc(#loc274)
    } loc(#loc244)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc156)
    %4 = cir.get_global @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45L7badDataE : !cir.ptr<!s32i> loc(#loc221)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc277)
    cir.call @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45L7badSinkEv() : () -> () loc(#loc158)
    cir.return loc(#loc61)
  } loc(#loc241)
  cir.global "private" internal dsolocal @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45L11goodG2BDataE = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc278)
  cir.func internal private @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45L11goodG2BSinkEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc280)
    %1 = cir.get_global @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45L11goodG2BDataE : !cir.ptr<!s32i> loc(#loc278)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc164)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc280)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc282)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc283)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc284)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc172)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc172)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc285)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc286)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc287)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc176)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc177)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc288)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc288)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc289)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc183)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc183)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc291)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc185)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc186)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc186)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc292)
          cir.condition(%24) loc(#loc292)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc188)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc189)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc190)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc191)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc294)
          } loc(#loc293)
          cir.yield loc(#loc182)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc192)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc193)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc295)
          cir.yield loc(#loc290)
        } loc(#loc290)
      } loc(#loc290)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc194)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc195)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc196)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc194)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc197)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc198)
      cir.delete.array %18 : <!s32i> loc(#loc198)
    } loc(#loc281)
    cir.return loc(#loc162)
  } loc(#loc279)
  cir.func internal private @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc297)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc203)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc204)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc298)
    %3 = cir.const #cir.int<20> : !s32i loc(#loc206)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc299)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc208)
    %5 = cir.get_global @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45L11goodG2BDataE : !cir.ptr<!s32i> loc(#loc278)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc300)
    cir.call @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45L11goodG2BSinkEv() : () -> () loc(#loc210)
    cir.return loc(#loc200)
  } loc(#loc296)
  cir.func @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_454goodEv() extra(#fn_attr1) {
    cir.call @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45L7goodG2BEv() : () -> () loc(#loc213)
    cir.return loc(#loc212)
  } loc(#loc301)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":98:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":44:1)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":44:12)
#loc18 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc19 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc20 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc21 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":49:1)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":65:1)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":51:5)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":51:16)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":52:5)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":64:5)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":53:9)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":53:16)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":53:26)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":54:9)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":54:14)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":56:21)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":56:28)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":56:38)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":56:9)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":57:37)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":49:13)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":57:28)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":57:46)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":57:9)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":58:9)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":61:9)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":58:18)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":58:14)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":58:21)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":58:33)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":59:9)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":60:29)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":60:13)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":60:24)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":60:25)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":58:40)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":58:39)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":62:22)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":62:33)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":62:34)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":62:9)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":63:19)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":67:1)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":130:1)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":69:5)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":69:9)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":71:13)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":71:12)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":71:5)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":72:5)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":127:5)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":77:9)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":77:13)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":78:9)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":78:28)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":79:9)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":79:32)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":80:9)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":80:41)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":81:9)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":116:17)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":82:9)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":115:9)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":91:36)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":91:45)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":91:58)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":91:29)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":91:13)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":91:69)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":92:13)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":95:13)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":92:17)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":92:34)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":93:13)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":94:17)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":96:20)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":96:21)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":96:30)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":96:33)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":96:47)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":96:13)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":96:48)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":97:34)
#loc101 = loc("/usr/include/netinet/in.h":249:5)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":97:13)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":98:39)
#loc104 = loc("/usr/include/netinet/in.h":251:20)
#loc105 = loc("/usr/include/netinet/in.h":33:15)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":98:13)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":98:59)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":99:38)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":99:32)
#loc110 = loc("/usr/include/netinet/in.h":250:15)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":99:13)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":99:46)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":100:13)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":103:13)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":100:25)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":100:58)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":100:59)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":100:68)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":100:82)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":100:17)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":100:88)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":101:13)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":102:17)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":106:31)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":106:46)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":106:59)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":106:77)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":106:80)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":106:26)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":106:13)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":106:81)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":107:13)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":110:13)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":107:17)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":107:31)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":107:44)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":107:47)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":107:61)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":108:13)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":109:17)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":112:39)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":112:25)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":112:13)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":114:25)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":114:20)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":114:13)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":114:36)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":116:16)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":117:9)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":120:9)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":117:13)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":117:30)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":118:9)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":119:26)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":119:13)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":128:15)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":128:5)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":129:5)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":45:1)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":45:12)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":137:1)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":153:1)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":139:5)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":139:16)
#loc165 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":140:5)
#loc166 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":152:5)
#loc167 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":141:9)
#loc168 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":141:16)
#loc169 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":141:26)
#loc170 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":142:9)
#loc171 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":142:14)
#loc172 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":144:21)
#loc173 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":144:28)
#loc174 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":144:38)
#loc175 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":144:9)
#loc176 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":145:37)
#loc177 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":137:13)
#loc178 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":145:28)
#loc179 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":145:46)
#loc180 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":145:9)
#loc181 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":146:9)
#loc182 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":149:9)
#loc183 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":146:18)
#loc184 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":146:14)
#loc185 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":146:21)
#loc186 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":146:33)
#loc187 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":147:9)
#loc188 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":148:29)
#loc189 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":148:13)
#loc190 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":148:24)
#loc191 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":148:25)
#loc192 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":146:40)
#loc193 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":146:39)
#loc194 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":150:22)
#loc195 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":150:33)
#loc196 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":150:34)
#loc197 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":150:9)
#loc198 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":151:19)
#loc199 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":155:1)
#loc200 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":164:1)
#loc201 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":157:5)
#loc202 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":157:9)
#loc203 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":159:13)
#loc204 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":159:12)
#loc205 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":159:5)
#loc206 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":161:12)
#loc207 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":161:5)
#loc208 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":162:19)
#loc209 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":162:5)
#loc210 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":163:5)
#loc211 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":166:1)
#loc212 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":169:1)
#loc213 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_45.cpp":168:5)
#loc214 = loc(fused[#loc1, #loc2])
#loc215 = loc(fused[#loc3, #loc4])
#loc216 = loc(fused[#loc6, #loc7])
#loc217 = loc(fused[#loc8, #loc9])
#loc218 = loc(fused[#loc10, #loc11])
#loc219 = loc(fused[#loc12, #loc13])
#loc220 = loc(fused[#loc14, #loc15])
#loc221 = loc(fused[#loc16, #loc17])
#loc222 = loc(fused[#loc18, #loc19])
#loc223 = loc(fused[#loc20, #loc21])
#loc224 = loc(fused[#loc22, #loc23])
#loc225 = loc(fused[#loc24, #loc25])
#loc226 = loc(fused[#loc26, #loc27])
#loc227 = loc(fused[#loc28, #loc29])
#loc228 = loc(fused[#loc28, #loc30])
#loc229 = loc(fused[#loc31, #loc32])
#loc230 = loc(fused[#loc34, #loc35])
#loc231 = loc(fused[#loc33, #loc35])
#loc232 = loc(fused[#loc36, #loc35])
#loc233 = loc(fused[#loc39, #loc40])
#loc234 = loc(fused[#loc41, #loc40])
#loc235 = loc(fused[#loc42, #loc43])
#loc236 = loc(fused[#loc45, #loc44])
#loc237 = loc(fused[#loc46, #loc47])
#loc238 = loc(fused[#loc48, #loc43])
#loc239 = loc(fused[#loc50, #loc49])
#loc240 = loc(fused[#loc54, #loc53])
#loc241 = loc(fused[#loc60, #loc61])
#loc242 = loc(fused[#loc62, #loc63])
#loc243 = loc(fused[#loc66, #loc64])
#loc244 = loc(fused[#loc67, #loc68])
#loc245 = loc(fused[#loc69, #loc70])
#loc246 = loc(fused[#loc71, #loc72])
#loc247 = loc(fused[#loc73, #loc74])
#loc248 = loc(fused[#loc75, #loc76])
#loc249 = loc(fused[#loc77, #loc78])
#loc250 = loc(fused[#loc79, #loc80])
#loc251 = loc(fused[#loc85, #loc86])
#loc252 = loc(fused[#loc87, #loc88])
#loc253 = loc(fused[#loc89, #loc90])
#loc254 = loc(fused[#loc91, #loc88])
#loc255 = loc(fused[#loc93, #loc94])
#loc256 = loc(fused[#loc96, #loc97])
#loc257 = loc(fused[#loc98, #loc99])
#loc258 = loc(fused[#loc102, #loc100])
#loc259 = loc(fused[#loc106, #loc107])
#loc260 = loc(fused[#loc111, #loc112])
#loc261 = loc(fused[#loc113, #loc114])
#loc262 = loc(fused[#loc116, #loc117])
#loc263 = loc(fused[#loc118, #loc119])
#loc264 = loc(fused[#loc120, #loc121])
#loc265 = loc(fused[#loc122, #loc114])
#loc266 = loc(fused[#loc126, #loc127])
#loc267 = loc(fused[#loc130, #loc131])
#loc268 = loc(fused[#loc132, #loc133])
#loc269 = loc(fused[#loc134, #loc135])
#loc270 = loc(fused[#loc137, #loc138])
#loc271 = loc(fused[#loc139, #loc133])
#loc272 = loc(fused[#loc143, #loc141])
#loc273 = loc(fused[#loc146, #loc147])
#loc274 = loc(fused[#loc149, #loc150])
#loc275 = loc(fused[#loc151, #loc152])
#loc276 = loc(fused[#loc153, #loc150])
#loc277 = loc(fused[#loc157, #loc156])
#loc278 = loc(fused[#loc159, #loc160])
#loc279 = loc(fused[#loc161, #loc162])
#loc280 = loc(fused[#loc163, #loc164])
#loc281 = loc(fused[#loc165, #loc166])
#loc282 = loc(fused[#loc167, #loc168])
#loc283 = loc(fused[#loc167, #loc169])
#loc284 = loc(fused[#loc170, #loc171])
#loc285 = loc(fused[#loc173, #loc174])
#loc286 = loc(fused[#loc172, #loc174])
#loc287 = loc(fused[#loc175, #loc174])
#loc288 = loc(fused[#loc178, #loc179])
#loc289 = loc(fused[#loc180, #loc179])
#loc290 = loc(fused[#loc181, #loc182])
#loc291 = loc(fused[#loc184, #loc183])
#loc292 = loc(fused[#loc185, #loc186])
#loc293 = loc(fused[#loc187, #loc182])
#loc294 = loc(fused[#loc189, #loc188])
#loc295 = loc(fused[#loc193, #loc192])
#loc296 = loc(fused[#loc199, #loc200])
#loc297 = loc(fused[#loc201, #loc202])
#loc298 = loc(fused[#loc205, #loc203])
#loc299 = loc(fused[#loc207, #loc206])
#loc300 = loc(fused[#loc209, #loc208])
#loc301 = loc(fused[#loc211, #loc212])
