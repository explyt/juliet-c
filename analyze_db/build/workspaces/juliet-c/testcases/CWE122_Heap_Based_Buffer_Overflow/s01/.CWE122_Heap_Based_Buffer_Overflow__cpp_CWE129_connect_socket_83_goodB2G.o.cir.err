clang: warning: argument unused during compilation: '-c' [-Wunused-command-line-argument]
warning: unknown warning option '-Wno-terminate' [-Wunknown-warning-option]
clang: /workspaces/clangir/clang/lib/CIR/CodeGen/CIRGenExprCXX.cpp:635: mlir::Value emitCXXNewAllocSize(CIRGenFunction &, const CXXNewExpr *, unsigned int, mlir::Value &, mlir::Value &): Assertion `numElementsWidth == sizeWidth && "Expected a size_t array size constant"' failed.
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /workspaces/clangir/install/bin/clang -S -Xclang -emit-cir-flat -std=c++11 -Wno-terminate -std=c++11 -I ../../../testcasesupport -c CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_83_goodB2G.cpp -o /workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/.CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_83_goodB2G.o.cir
1.	<eof> parser at end of file
2.	CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_83_goodB2G.cpp:44:11: LLVM IR generation of declaration 'CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_83'
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang     0x0000563cbb512b68 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
1  clang     0x0000563cbb51073e llvm::sys::RunSignalHandlers() + 238
2  clang     0x0000563cbb481946
3  libc.so.6 0x00007f4990045330
4  libc.so.6 0x00007f499009eb2c pthread_kill + 284
5  libc.so.6 0x00007f499004527e gsignal + 30
6  libc.so.6 0x00007f49900288ff abort + 223
7  libc.so.6 0x00007f499002881b
8  libc.so.6 0x00007f499003b517
9  clang     0x0000563cbc95b4fc clang::CIRGen::CIRGenFunction::emitCXXNewExpr(clang::CXXNewExpr const*) + 12028
10 clang     0x0000563cbc95ed1f clang::CIRGen::CIRGenFunction::emitScalarExpr(clang::Expr const*) + 63
11 clang     0x0000563cbc90d844 clang::CIRGen::CIRGenFunction::emitExprAsInit(clang::Expr const*, clang::ValueDecl const*, clang::CIRGen::LValue, bool) + 516
12 clang     0x0000563cbc90ce4e clang::CIRGen::CIRGenFunction::emitAutoVarInit(clang::CIRGen::CIRGenFunction::AutoVarEmission const&) + 990
13 clang     0x0000563cbc90e1a8 clang::CIRGen::CIRGenFunction::emitVarDecl(clang::VarDecl const&) + 328
14 clang     0x0000563cbc90fd97 clang::CIRGen::CIRGenFunction::emitDecl(clang::Decl const&) + 119
15 clang     0x0000563cbc991dcb clang::CIRGen::CIRGenFunction::emitSimpleStmt(clang::Stmt const*, bool) + 859
16 clang     0x0000563cbc9914b0 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 16
17 clang     0x0000563cbc991284 clang::CIRGen::CIRGenFunction::emitCompoundStmtWithoutScope(clang::CompoundStmt const&, bool, clang::CIRGen::AggValueSlot) + 260
18 clang     0x0000563cbc991955 clang::CIRGen::CIRGenFunction::emitCompoundStmt(clang::CompoundStmt const&, bool, clang::CIRGen::AggValueSlot) + 453
19 clang     0x0000563cbc991d65 clang::CIRGen::CIRGenFunction::emitSimpleStmt(clang::Stmt const*, bool) + 757
20 clang     0x0000563cbc9914b0 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 16
21 clang     0x0000563cbc991bd4 clang::CIRGen::CIRGenFunction::emitSimpleStmt(clang::Stmt const*, bool) + 356
22 clang     0x0000563cbc9914b0 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 16
23 clang     0x0000563cbc9d4833 clang::CIRGen::CIRGenFunction::emitDestructorBody(clang::CIRGen::FunctionArgList&) + 1347
24 clang     0x0000563cbc97b68d clang::CIRGen::CIRGenFunction::generateCode(clang::GlobalDecl, cir::FuncOp, clang::CIRGen::CIRGenFunctionInfo const&) + 1117
25 clang     0x0000563cbc9ce67a clang::CIRGen::CIRGenModule::codegenCXXStructor(clang::GlobalDecl) + 218
26 clang     0x0000563cbc98902f
27 clang     0x0000563cbc8ce484 clang::CIRGen::CIRGenModule::emitGlobalDefinition(clang::GlobalDecl, mlir::Operation*) + 244
28 clang     0x0000563cbc8cc968 clang::CIRGen::CIRGenModule::emitGlobal(clang::GlobalDecl) + 1656
29 clang     0x0000563cbc986911
30 clang     0x0000563cbc8d716a clang::CIRGen::CIRGenModule::emitDeclContext(clang::DeclContext const*) + 58
31 clang     0x0000563cbc8c94af cir::CIRGenerator::HandleTopLevelDecl(clang::DeclGroupRef) + 159
32 clang     0x0000563cbc7bb9e1
33 clang     0x0000563cbe8bdada clang::ParseAST(clang::Sema&, bool, bool) + 826
34 clang     0x0000563cbbfd8d36 clang::FrontendAction::Execute() + 38
35 clang     0x0000563cbbf443ad clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1149
36 clang     0x0000563cbc0c1edf clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 815
37 clang     0x0000563cba2e4a7a cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 6074
38 clang     0x0000563cba2e106d
39 clang     0x0000563cbbd8b339
40 clang     0x0000563cbb481686 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 150
41 clang     0x0000563cbbd8a892 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const + 242
42 clang     0x0000563cbbd46c27 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 455
43 clang     0x0000563cbbd46f17 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const + 135
44 clang     0x0000563cbbd66928 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 904
45 clang     0x0000563cba2e06ba clang_main(int, char**, llvm::ToolContext const&) + 6090
46 clang     0x0000563cba2f0147 main + 87
47 libc.so.6 0x00007f499002a1ca
48 libc.so.6 0x00007f499002a28b __libc_start_main + 139
49 clang     0x0000563cba2deaa5 _start + 37
clang: error: clang frontend command failed with exit code 134 (use -v to see invocation)
clang version 21.0.0git (git@github.com:llvm/clangir.git 4e7a2236d38507e994cbe5b79c888cf86427e7db)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /workspaces/clangir/install/bin
Build config: +assertions
clang: error: unable to execute command: Aborted (core dumped)
clang: note: diagnostic msg: Error generating preprocessed source(s).
