!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":28:23)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":28:32)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":51:27)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":51:36)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":70:27)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":70:36)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":112:10)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":112:14)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":112:20)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":112:32)
#loc115 = loc(fused[#loc5, #loc6])
#loc124 = loc(fused[#loc28, #loc29])
#loc132 = loc(fused[#loc49, #loc50])
#loc147 = loc(fused[#loc97, #loc98])
#loc148 = loc(fused[#loc99, #loc100])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc113)
  cir.func internal private @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_43L9badSourceERl(%arg0: !cir.ptr<!s64i> loc(fused[#loc5, #loc6])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc115)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc7)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc8)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc8)
    %5 = cir.ternary(%4, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc8)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc8)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc8)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc8)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc8)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc8)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc8)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc8)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc8)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc8)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc8)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc8)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc8)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc8)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc8)
      cir.yield %29 : !u64i loc(#loc8)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc8)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc8)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc8)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc8)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc8)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc8)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc8)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc8)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc8)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc8)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc8)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc8)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc8)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc8)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc8)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc8)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc8)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc8)
      cir.yield %33 : !u64i loc(#loc8)
    }) : (!cir.bool) -> !u64i loc(#loc8)
    %6 = cir.cast(integral, %5 : !u64i), !s64i loc(#loc8)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc9)
    cir.store %6, %7 : !s64i, !cir.ptr<!s64i> loc(#loc116)
    cir.return loc(#loc4)
  } loc(#loc114)
  cir.func private @printLongLongLine(!s64i) loc(#loc117)
  cir.func @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_433badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc119)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc16)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc120)
    cir.call @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_43L9badSourceERl(%0) : (!cir.ptr<!s64i>) -> () loc(#loc18)
    cir.scope {
      %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc122)
      %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc23)
      %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc22)
      %5 = cir.binop(mul, %3, %4) nsw : !s64i loc(#loc23)
      cir.store %5, %2 : !s64i, !cir.ptr<!s64i> loc(#loc122)
      %6 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc24)
      cir.call @printLongLongLine(%6) : (!s64i) -> () loc(#loc25)
    } loc(#loc121)
    cir.return loc(#loc13)
  } loc(#loc118)
  cir.func internal private @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_43L13goodG2BSourceERl(%arg0: !cir.ptr<!s64i> loc(fused[#loc28, #loc29])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc124)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc30)
    %1 = cir.const #cir.int<2> : !s32i loc(#loc31)
    %2 = cir.cast(integral, %1 : !s32i), !s64i loc(#loc31)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc32)
    cir.store %2, %3 : !s64i, !cir.ptr<!s64i> loc(#loc125)
    cir.return loc(#loc27)
  } loc(#loc123)
  cir.func internal private @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_43L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc127)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc37)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc128)
    cir.call @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_43L13goodG2BSourceERl(%0) : (!cir.ptr<!s64i>) -> () loc(#loc39)
    cir.scope {
      %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc130)
      %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc44)
      %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc43)
      %5 = cir.binop(mul, %3, %4) nsw : !s64i loc(#loc44)
      cir.store %5, %2 : !s64i, !cir.ptr<!s64i> loc(#loc130)
      %6 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc45)
      cir.call @printLongLongLine(%6) : (!s64i) -> () loc(#loc46)
    } loc(#loc129)
    cir.return loc(#loc34)
  } loc(#loc126)
  cir.func internal private @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_43L13goodB2GSourceERl(%arg0: !cir.ptr<!s64i> loc(fused[#loc49, #loc50])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc132)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc51)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc52)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc52)
    %5 = cir.ternary(%4, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc52)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc52)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc52)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc52)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc52)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc52)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc52)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc52)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc52)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc52)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc52)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc52)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc52)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc52)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc52)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc52)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc52)
      cir.yield %29 : !u64i loc(#loc52)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc52)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc52)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc52)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc52)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc52)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc52)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc52)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc52)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc52)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc52)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc52)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc52)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc52)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc52)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc52)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc52)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc52)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc52)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc52)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc52)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc52)
      cir.yield %33 : !u64i loc(#loc52)
    }) : (!cir.bool) -> !u64i loc(#loc52)
    %6 = cir.cast(integral, %5 : !u64i), !s64i loc(#loc52)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc53)
    cir.store %6, %7 : !s64i, !cir.ptr<!s64i> loc(#loc133)
    cir.return loc(#loc48)
  } loc(#loc131)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr) loc(#loc134)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc57)
  cir.func internal private @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_43L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc136)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc62)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc137)
    cir.call @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_43L13goodB2GSourceERl(%0) : (!cir.ptr<!s64i>) -> () loc(#loc64)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc67)
      %3 = cir.call @imaxabs(%2) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc68)
      %4 = cir.cast(int_to_float, %3 : !s64i), !cir.long_double<!cir.f80> loc(#loc68)
      %5 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc69)
      %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc70)
      %7 = cir.cast(int_to_float, %6 : !s64i), !cir.long_double<!cir.f80> loc(#loc70)
      %8 = cir.call @sqrtl(%7) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc69)
      %9 = cir.cmp(le, %4, %8) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc139)
      cir.if %9 {
        %10 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc141)
        %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc77)
        %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc76)
        %13 = cir.binop(mul, %11, %12) nsw : !s64i loc(#loc77)
        cir.store %13, %10 : !s64i, !cir.ptr<!s64i> loc(#loc141)
        %14 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc78)
        cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc79)
      } else {
        %10 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc57)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc57)
        cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc80)
      } loc(#loc140)
    } loc(#loc138)
    cir.return loc(#loc59)
  } loc(#loc135)
  cir.func @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_434goodEv() extra(#fn_attr1) {
    cir.call @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_43L7goodG2BEv() : () -> () loc(#loc83)
    cir.call @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_43L7goodB2GEv() : () -> () loc(#loc84)
    cir.return loc(#loc82)
  } loc(#loc142)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc143)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc144)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc145)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc93)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc94)
  cir.func @main(%arg0: !s32i loc(fused[#loc97, #loc98]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc99, #loc100])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc147)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc148)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc96)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc101)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc102)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc103)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc103)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc104)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc91)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    cir.call @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_434goodEv() : () -> () loc(#loc106)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc92)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc93)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc93)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc108)
    cir.call @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_433badEv() : () -> () loc(#loc109)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc94)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc94)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc111)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    cir.return %15 : !s32i loc(#loc149)
  } loc(#loc146)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":28:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":32:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":29:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":31:21)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":31:5)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":34:1)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":44:1)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":36:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":36:13)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":37:12)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":37:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":38:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":39:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":43:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":41:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":41:33)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":41:26)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":42:27)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":42:9)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":51:1)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":55:1)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":52:1)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":54:12)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":54:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":57:1)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":67:1)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":59:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":59:13)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":60:12)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":60:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":61:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":62:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":66:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":64:9)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":64:33)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":64:26)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":65:27)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":65:9)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":70:1)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":74:1)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":71:1)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":73:21)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":73:5)
#loc54 = loc("/usr/include/inttypes.h":351:1)
#loc55 = loc("/usr/include/inttypes.h":351:74)
#loc56 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":89:19)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":76:1)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":91:1)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":78:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":78:13)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":79:12)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":79:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":80:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":82:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":90:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":82:27)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":82:9)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":82:36)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":82:42)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":82:51)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":83:5)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":86:5)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":88:5)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":84:9)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":84:33)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":84:26)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":85:27)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":85:9)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":89:9)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":93:1)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":97:1)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":95:5)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":96:5)
#loc85 = loc("/usr/include/stdlib.h":575:1)
#loc86 = loc("/usr/include/stdlib.h":575:41)
#loc87 = loc("/usr/include/time.h":76:1)
#loc88 = loc("/usr/include/time.h":76:38)
#loc89 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc90 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":117:15)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":119:15)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":122:15)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":124:15)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":112:1)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":127:1)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":113:1)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":115:27)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":115:22)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":115:5)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":117:5)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":118:5)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":119:5)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":122:5)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":123:5)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":124:5)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":126:12)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_square_43.cpp":126:5)
#loc113 = loc(fused[#loc1, #loc2])
#loc114 = loc(fused[#loc3, #loc4])
#loc116 = loc(fused[#loc9, #loc8])
#loc117 = loc(fused[#loc10, #loc11])
#loc118 = loc(fused[#loc12, #loc13])
#loc119 = loc(fused[#loc14, #loc15])
#loc120 = loc(fused[#loc17, #loc16])
#loc121 = loc(fused[#loc19, #loc20])
#loc122 = loc(fused[#loc21, #loc22])
#loc123 = loc(fused[#loc26, #loc27])
#loc125 = loc(fused[#loc32, #loc31])
#loc126 = loc(fused[#loc33, #loc34])
#loc127 = loc(fused[#loc35, #loc36])
#loc128 = loc(fused[#loc38, #loc37])
#loc129 = loc(fused[#loc40, #loc41])
#loc130 = loc(fused[#loc42, #loc43])
#loc131 = loc(fused[#loc47, #loc48])
#loc133 = loc(fused[#loc53, #loc52])
#loc134 = loc(fused[#loc54, #loc55])
#loc135 = loc(fused[#loc58, #loc59])
#loc136 = loc(fused[#loc60, #loc61])
#loc137 = loc(fused[#loc63, #loc62])
#loc138 = loc(fused[#loc65, #loc66])
#loc139 = loc(fused[#loc68, #loc71])
#loc140 = loc(fused[#loc72, #loc73, #loc74, #loc66])
#loc141 = loc(fused[#loc75, #loc76])
#loc142 = loc(fused[#loc81, #loc82])
#loc143 = loc(fused[#loc85, #loc86])
#loc144 = loc(fused[#loc87, #loc88])
#loc145 = loc(fused[#loc89, #loc90])
#loc146 = loc(fused[#loc95, #loc96])
#loc149 = loc(fused[#loc112, #loc111])
