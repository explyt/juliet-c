!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int_calloc_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc212)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc213)
  cir.func private  @printIntLine(!s32i) loc(#loc214)
  cir.func no_proto  @CWE401_Memory_Leak__int_calloc_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc216)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc217)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc15)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc16)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc219)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc17)
      cir.if %5 {
        %6 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc19)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc20)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc20)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc221)
        %10 = cir.call @calloc(%8, %9) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc19)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc222)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc223)
        cir.scope {
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc28)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !s32i loc(#loc225)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc29)
          cir.if %24 {
            %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc31)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc32)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc33)
            cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
          } loc(#loc226)
        } loc(#loc224)
        %12 = cir.const #cir.int<5> : !s32i loc(#loc34)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc36)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc37)
        cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc227)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc39)
        %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc40)
        %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc38)
        cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc41)
      } loc(#loc220)
    } loc(#loc218)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc44)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc45)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc229)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc46)
      cir.if %5 {
      } loc(#loc230)
    } loc(#loc228)
    cir.return loc(#loc8)
  } loc(#loc215)
  cir.func no_proto  @CWE401_Memory_Leak__int_calloc_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc232)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc233)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc234)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc235)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    cir.return loc(#loc49)
  } loc(#loc231)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc236)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc60)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc237)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc239)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc67)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc240)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc71)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc72)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc242)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc73)
      cir.if %5 {
        %6 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc75)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc76)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc76)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc244)
        %10 = cir.call @calloc(%8, %9) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc75)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc245)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc246)
        cir.scope {
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc83)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc84)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc84)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !s32i loc(#loc248)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc85)
          cir.if %24 {
            %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc87)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc88)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc89)
            cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc87)
          } loc(#loc249)
        } loc(#loc247)
        %12 = cir.const #cir.int<5> : !s32i loc(#loc90)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc92)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc93)
        cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc250)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc94)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc95)
        %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc96)
        %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc94)
        cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc97)
      } loc(#loc243)
    } loc(#loc241)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc100)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc101)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !s32i loc(#loc252)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc102)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc60)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc60)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc106)
      } else {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc107)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc108)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc108)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc107)
      } loc(#loc253)
    } loc(#loc251)
    cir.return loc(#loc64)
  } loc(#loc238)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc255)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc113)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc256)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc117)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc118)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc258)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc119)
      cir.if %5 {
        %6 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc121)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc122)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc122)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc260)
        %10 = cir.call @calloc(%8, %9) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc121)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc261)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc262)
        cir.scope {
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc129)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc130)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc130)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !s32i loc(#loc264)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc131)
          cir.if %24 {
            %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc133)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc134)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc135)
            cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc133)
          } loc(#loc265)
        } loc(#loc263)
        %12 = cir.const #cir.int<5> : !s32i loc(#loc136)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc137)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc138)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc139)
        cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc266)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc140)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc141)
        %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc142)
        %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc140)
        cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc143)
      } loc(#loc259)
    } loc(#loc257)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc146)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc147)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc268)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc148)
      cir.if %5 {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc150)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc151)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc151)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc150)
      } loc(#loc269)
    } loc(#loc267)
    cir.return loc(#loc110)
  } loc(#loc254)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc271)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc156)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc272)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc160)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc161)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !s32i loc(#loc274)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc162)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc166)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc166)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc167)
      } else {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc168)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc168)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc168)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc168)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc168)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc168)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc168)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc276)
        %13 = cir.const #cir.int<5> : !s32i loc(#loc170)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc171)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc172)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc173)
        cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc277)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc174)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc175)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc176)
        %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc174)
        cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc177)
      } loc(#loc275)
    } loc(#loc273)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc180)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc181)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc279)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc182)
      cir.if %5 {
      } loc(#loc280)
    } loc(#loc278)
    cir.return loc(#loc153)
  } loc(#loc270)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc282)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc188)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc283)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc192)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc193)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc285)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc194)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc196)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc196)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc196)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc196)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc196)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc196)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc196)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc287)
        %13 = cir.const #cir.int<5> : !s32i loc(#loc198)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc199)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc200)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc201)
        cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc288)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc202)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc203)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc204)
        %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc202)
        cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc205)
      } loc(#loc286)
    } loc(#loc284)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc208)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc209)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc290)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc210)
      cir.if %5 {
      } loc(#loc291)
    } loc(#loc289)
    cir.return loc(#loc185)
  } loc(#loc281)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int_calloc_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":675:1)
#loc2 = loc("/usr/include/stdlib.h":676:14)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE401_Memory_Leak__int_calloc_06.c":29:1)
#loc8 = loc("CWE401_Memory_Leak__int_calloc_06.c":47:1)
#loc9 = loc("CWE401_Memory_Leak__int_calloc_06.c":31:5)
#loc10 = loc("CWE401_Memory_Leak__int_calloc_06.c":31:11)
#loc11 = loc("CWE401_Memory_Leak__int_calloc_06.c":32:12)
#loc12 = loc("CWE401_Memory_Leak__int_calloc_06.c":32:5)
#loc13 = loc("CWE401_Memory_Leak__int_calloc_06.c":33:5)
#loc14 = loc("CWE401_Memory_Leak__int_calloc_06.c":41:5)
#loc15 = loc("CWE401_Memory_Leak__int_calloc_06.c":33:8)
#loc16 = loc("CWE401_Memory_Leak__int_calloc_06.c":33:27)
#loc17 = loc("CWE401_Memory_Leak__int_calloc_06.c":33:25)
#loc18 = loc("CWE401_Memory_Leak__int_calloc_06.c":34:5)
#loc19 = loc("CWE401_Memory_Leak__int_calloc_06.c":36:23)
#loc20 = loc("CWE401_Memory_Leak__int_calloc_06.c":36:30)
#loc21 = loc("CWE401_Memory_Leak__int_calloc_06.c":36:35)
#loc22 = loc("CWE401_Memory_Leak__int_calloc_06.c":36:45)
#loc23 = loc("CWE401_Memory_Leak__int_calloc_06.c":36:46)
#loc24 = loc("CWE401_Memory_Leak__int_calloc_06.c":36:9)
#loc25 = loc("CWE401_Memory_Leak__int_calloc_06.c":37:9)
#loc26 = loc("CWE401_Memory_Leak__int_calloc_06.c":37:37)
#loc27 = loc("CWE401_Memory_Leak__int_calloc_06.c":37:13)
#loc28 = loc("CWE401_Memory_Leak__int_calloc_06.c":37:21)
#loc29 = loc("CWE401_Memory_Leak__int_calloc_06.c":37:18)
#loc30 = loc("CWE401_Memory_Leak__int_calloc_06.c":37:27)
#loc31 = loc("CWE401_Memory_Leak__int_calloc_06.c":37:28)
#loc32 = loc("CWE401_Memory_Leak__int_calloc_06.c":37:34)
#loc33 = loc("CWE401_Memory_Leak__int_calloc_06.c":37:33)
#loc34 = loc("CWE401_Memory_Leak__int_calloc_06.c":39:19)
#loc35 = loc("CWE401_Memory_Leak__int_calloc_06.c":39:9)
#loc36 = loc("CWE401_Memory_Leak__int_calloc_06.c":39:14)
#loc37 = loc("CWE401_Memory_Leak__int_calloc_06.c":39:15)
#loc38 = loc("CWE401_Memory_Leak__int_calloc_06.c":40:22)
#loc39 = loc("CWE401_Memory_Leak__int_calloc_06.c":40:27)
#loc40 = loc("CWE401_Memory_Leak__int_calloc_06.c":40:28)
#loc41 = loc("CWE401_Memory_Leak__int_calloc_06.c":40:9)
#loc42 = loc("CWE401_Memory_Leak__int_calloc_06.c":42:5)
#loc43 = loc("CWE401_Memory_Leak__int_calloc_06.c":46:5)
#loc44 = loc("CWE401_Memory_Leak__int_calloc_06.c":42:8)
#loc45 = loc("CWE401_Memory_Leak__int_calloc_06.c":42:27)
#loc46 = loc("CWE401_Memory_Leak__int_calloc_06.c":42:25)
#loc47 = loc("CWE401_Memory_Leak__int_calloc_06.c":43:5)
#loc48 = loc("CWE401_Memory_Leak__int_calloc_06.c":145:1)
#loc49 = loc("CWE401_Memory_Leak__int_calloc_06.c":151:1)
#loc50 = loc("CWE401_Memory_Leak__int_calloc_06.c":147:5)
#loc51 = loc("CWE401_Memory_Leak__int_calloc_06.c":147:14)
#loc52 = loc("CWE401_Memory_Leak__int_calloc_06.c":148:5)
#loc53 = loc("CWE401_Memory_Leak__int_calloc_06.c":148:14)
#loc54 = loc("CWE401_Memory_Leak__int_calloc_06.c":149:5)
#loc55 = loc("CWE401_Memory_Leak__int_calloc_06.c":149:14)
#loc56 = loc("CWE401_Memory_Leak__int_calloc_06.c":150:5)
#loc57 = loc("CWE401_Memory_Leak__int_calloc_06.c":150:14)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc60 = loc("CWE401_Memory_Leak__int_calloc_06.c":70:19)
#loc61 = loc("/usr/include/stdlib.h":687:1)
#loc62 = loc("/usr/include/stdlib.h":687:32)
#loc63 = loc("CWE401_Memory_Leak__int_calloc_06.c":54:1)
#loc64 = loc("CWE401_Memory_Leak__int_calloc_06.c":77:1)
#loc65 = loc("CWE401_Memory_Leak__int_calloc_06.c":56:5)
#loc66 = loc("CWE401_Memory_Leak__int_calloc_06.c":56:11)
#loc67 = loc("CWE401_Memory_Leak__int_calloc_06.c":57:12)
#loc68 = loc("CWE401_Memory_Leak__int_calloc_06.c":57:5)
#loc69 = loc("CWE401_Memory_Leak__int_calloc_06.c":58:5)
#loc70 = loc("CWE401_Memory_Leak__int_calloc_06.c":66:5)
#loc71 = loc("CWE401_Memory_Leak__int_calloc_06.c":58:8)
#loc72 = loc("CWE401_Memory_Leak__int_calloc_06.c":58:27)
#loc73 = loc("CWE401_Memory_Leak__int_calloc_06.c":58:25)
#loc74 = loc("CWE401_Memory_Leak__int_calloc_06.c":59:5)
#loc75 = loc("CWE401_Memory_Leak__int_calloc_06.c":61:23)
#loc76 = loc("CWE401_Memory_Leak__int_calloc_06.c":61:30)
#loc77 = loc("CWE401_Memory_Leak__int_calloc_06.c":61:35)
#loc78 = loc("CWE401_Memory_Leak__int_calloc_06.c":61:45)
#loc79 = loc("CWE401_Memory_Leak__int_calloc_06.c":61:46)
#loc80 = loc("CWE401_Memory_Leak__int_calloc_06.c":61:9)
#loc81 = loc("CWE401_Memory_Leak__int_calloc_06.c":62:9)
#loc82 = loc("CWE401_Memory_Leak__int_calloc_06.c":62:37)
#loc83 = loc("CWE401_Memory_Leak__int_calloc_06.c":62:13)
#loc84 = loc("CWE401_Memory_Leak__int_calloc_06.c":62:21)
#loc85 = loc("CWE401_Memory_Leak__int_calloc_06.c":62:18)
#loc86 = loc("CWE401_Memory_Leak__int_calloc_06.c":62:27)
#loc87 = loc("CWE401_Memory_Leak__int_calloc_06.c":62:28)
#loc88 = loc("CWE401_Memory_Leak__int_calloc_06.c":62:34)
#loc89 = loc("CWE401_Memory_Leak__int_calloc_06.c":62:33)
#loc90 = loc("CWE401_Memory_Leak__int_calloc_06.c":64:19)
#loc91 = loc("CWE401_Memory_Leak__int_calloc_06.c":64:9)
#loc92 = loc("CWE401_Memory_Leak__int_calloc_06.c":64:14)
#loc93 = loc("CWE401_Memory_Leak__int_calloc_06.c":64:15)
#loc94 = loc("CWE401_Memory_Leak__int_calloc_06.c":65:22)
#loc95 = loc("CWE401_Memory_Leak__int_calloc_06.c":65:27)
#loc96 = loc("CWE401_Memory_Leak__int_calloc_06.c":65:28)
#loc97 = loc("CWE401_Memory_Leak__int_calloc_06.c":65:9)
#loc98 = loc("CWE401_Memory_Leak__int_calloc_06.c":67:5)
#loc99 = loc("CWE401_Memory_Leak__int_calloc_06.c":76:5)
#loc100 = loc("CWE401_Memory_Leak__int_calloc_06.c":67:8)
#loc101 = loc("CWE401_Memory_Leak__int_calloc_06.c":67:27)
#loc102 = loc("CWE401_Memory_Leak__int_calloc_06.c":67:25)
#loc103 = loc("CWE401_Memory_Leak__int_calloc_06.c":68:5)
#loc104 = loc("CWE401_Memory_Leak__int_calloc_06.c":71:5)
#loc105 = loc("CWE401_Memory_Leak__int_calloc_06.c":73:5)
#loc106 = loc("CWE401_Memory_Leak__int_calloc_06.c":70:9)
#loc107 = loc("CWE401_Memory_Leak__int_calloc_06.c":75:9)
#loc108 = loc("CWE401_Memory_Leak__int_calloc_06.c":75:14)
#loc109 = loc("CWE401_Memory_Leak__int_calloc_06.c":80:1)
#loc110 = loc("CWE401_Memory_Leak__int_calloc_06.c":98:1)
#loc111 = loc("CWE401_Memory_Leak__int_calloc_06.c":82:5)
#loc112 = loc("CWE401_Memory_Leak__int_calloc_06.c":82:11)
#loc113 = loc("CWE401_Memory_Leak__int_calloc_06.c":83:12)
#loc114 = loc("CWE401_Memory_Leak__int_calloc_06.c":83:5)
#loc115 = loc("CWE401_Memory_Leak__int_calloc_06.c":84:5)
#loc116 = loc("CWE401_Memory_Leak__int_calloc_06.c":92:5)
#loc117 = loc("CWE401_Memory_Leak__int_calloc_06.c":84:8)
#loc118 = loc("CWE401_Memory_Leak__int_calloc_06.c":84:27)
#loc119 = loc("CWE401_Memory_Leak__int_calloc_06.c":84:25)
#loc120 = loc("CWE401_Memory_Leak__int_calloc_06.c":85:5)
#loc121 = loc("CWE401_Memory_Leak__int_calloc_06.c":87:23)
#loc122 = loc("CWE401_Memory_Leak__int_calloc_06.c":87:30)
#loc123 = loc("CWE401_Memory_Leak__int_calloc_06.c":87:35)
#loc124 = loc("CWE401_Memory_Leak__int_calloc_06.c":87:45)
#loc125 = loc("CWE401_Memory_Leak__int_calloc_06.c":87:46)
#loc126 = loc("CWE401_Memory_Leak__int_calloc_06.c":87:9)
#loc127 = loc("CWE401_Memory_Leak__int_calloc_06.c":88:9)
#loc128 = loc("CWE401_Memory_Leak__int_calloc_06.c":88:37)
#loc129 = loc("CWE401_Memory_Leak__int_calloc_06.c":88:13)
#loc130 = loc("CWE401_Memory_Leak__int_calloc_06.c":88:21)
#loc131 = loc("CWE401_Memory_Leak__int_calloc_06.c":88:18)
#loc132 = loc("CWE401_Memory_Leak__int_calloc_06.c":88:27)
#loc133 = loc("CWE401_Memory_Leak__int_calloc_06.c":88:28)
#loc134 = loc("CWE401_Memory_Leak__int_calloc_06.c":88:34)
#loc135 = loc("CWE401_Memory_Leak__int_calloc_06.c":88:33)
#loc136 = loc("CWE401_Memory_Leak__int_calloc_06.c":90:19)
#loc137 = loc("CWE401_Memory_Leak__int_calloc_06.c":90:9)
#loc138 = loc("CWE401_Memory_Leak__int_calloc_06.c":90:14)
#loc139 = loc("CWE401_Memory_Leak__int_calloc_06.c":90:15)
#loc140 = loc("CWE401_Memory_Leak__int_calloc_06.c":91:22)
#loc141 = loc("CWE401_Memory_Leak__int_calloc_06.c":91:27)
#loc142 = loc("CWE401_Memory_Leak__int_calloc_06.c":91:28)
#loc143 = loc("CWE401_Memory_Leak__int_calloc_06.c":91:9)
#loc144 = loc("CWE401_Memory_Leak__int_calloc_06.c":93:5)
#loc145 = loc("CWE401_Memory_Leak__int_calloc_06.c":97:5)
#loc146 = loc("CWE401_Memory_Leak__int_calloc_06.c":93:8)
#loc147 = loc("CWE401_Memory_Leak__int_calloc_06.c":93:27)
#loc148 = loc("CWE401_Memory_Leak__int_calloc_06.c":93:25)
#loc149 = loc("CWE401_Memory_Leak__int_calloc_06.c":94:5)
#loc150 = loc("CWE401_Memory_Leak__int_calloc_06.c":96:9)
#loc151 = loc("CWE401_Memory_Leak__int_calloc_06.c":96:14)
#loc152 = loc("CWE401_Memory_Leak__int_calloc_06.c":101:1)
#loc153 = loc("CWE401_Memory_Leak__int_calloc_06.c":123:1)
#loc154 = loc("CWE401_Memory_Leak__int_calloc_06.c":103:5)
#loc155 = loc("CWE401_Memory_Leak__int_calloc_06.c":103:11)
#loc156 = loc("CWE401_Memory_Leak__int_calloc_06.c":104:12)
#loc157 = loc("CWE401_Memory_Leak__int_calloc_06.c":104:5)
#loc158 = loc("CWE401_Memory_Leak__int_calloc_06.c":105:5)
#loc159 = loc("CWE401_Memory_Leak__int_calloc_06.c":117:5)
#loc160 = loc("CWE401_Memory_Leak__int_calloc_06.c":105:8)
#loc161 = loc("CWE401_Memory_Leak__int_calloc_06.c":105:27)
#loc162 = loc("CWE401_Memory_Leak__int_calloc_06.c":105:25)
#loc163 = loc("CWE401_Memory_Leak__int_calloc_06.c":106:5)
#loc164 = loc("CWE401_Memory_Leak__int_calloc_06.c":109:5)
#loc165 = loc("CWE401_Memory_Leak__int_calloc_06.c":111:5)
#loc166 = loc("CWE401_Memory_Leak__int_calloc_06.c":108:19)
#loc167 = loc("CWE401_Memory_Leak__int_calloc_06.c":108:9)
#loc168 = loc("CWE401_Memory_Leak__int_calloc_06.c":113:23)
#loc169 = loc("CWE401_Memory_Leak__int_calloc_06.c":113:9)
#loc170 = loc("CWE401_Memory_Leak__int_calloc_06.c":115:19)
#loc171 = loc("CWE401_Memory_Leak__int_calloc_06.c":115:9)
#loc172 = loc("CWE401_Memory_Leak__int_calloc_06.c":115:14)
#loc173 = loc("CWE401_Memory_Leak__int_calloc_06.c":115:15)
#loc174 = loc("CWE401_Memory_Leak__int_calloc_06.c":116:22)
#loc175 = loc("CWE401_Memory_Leak__int_calloc_06.c":116:27)
#loc176 = loc("CWE401_Memory_Leak__int_calloc_06.c":116:28)
#loc177 = loc("CWE401_Memory_Leak__int_calloc_06.c":116:9)
#loc178 = loc("CWE401_Memory_Leak__int_calloc_06.c":118:5)
#loc179 = loc("CWE401_Memory_Leak__int_calloc_06.c":122:5)
#loc180 = loc("CWE401_Memory_Leak__int_calloc_06.c":118:8)
#loc181 = loc("CWE401_Memory_Leak__int_calloc_06.c":118:27)
#loc182 = loc("CWE401_Memory_Leak__int_calloc_06.c":118:25)
#loc183 = loc("CWE401_Memory_Leak__int_calloc_06.c":119:5)
#loc184 = loc("CWE401_Memory_Leak__int_calloc_06.c":126:1)
#loc185 = loc("CWE401_Memory_Leak__int_calloc_06.c":143:1)
#loc186 = loc("CWE401_Memory_Leak__int_calloc_06.c":128:5)
#loc187 = loc("CWE401_Memory_Leak__int_calloc_06.c":128:11)
#loc188 = loc("CWE401_Memory_Leak__int_calloc_06.c":129:12)
#loc189 = loc("CWE401_Memory_Leak__int_calloc_06.c":129:5)
#loc190 = loc("CWE401_Memory_Leak__int_calloc_06.c":130:5)
#loc191 = loc("CWE401_Memory_Leak__int_calloc_06.c":137:5)
#loc192 = loc("CWE401_Memory_Leak__int_calloc_06.c":130:8)
#loc193 = loc("CWE401_Memory_Leak__int_calloc_06.c":130:27)
#loc194 = loc("CWE401_Memory_Leak__int_calloc_06.c":130:25)
#loc195 = loc("CWE401_Memory_Leak__int_calloc_06.c":131:5)
#loc196 = loc("CWE401_Memory_Leak__int_calloc_06.c":133:23)
#loc197 = loc("CWE401_Memory_Leak__int_calloc_06.c":133:9)
#loc198 = loc("CWE401_Memory_Leak__int_calloc_06.c":135:19)
#loc199 = loc("CWE401_Memory_Leak__int_calloc_06.c":135:9)
#loc200 = loc("CWE401_Memory_Leak__int_calloc_06.c":135:14)
#loc201 = loc("CWE401_Memory_Leak__int_calloc_06.c":135:15)
#loc202 = loc("CWE401_Memory_Leak__int_calloc_06.c":136:22)
#loc203 = loc("CWE401_Memory_Leak__int_calloc_06.c":136:27)
#loc204 = loc("CWE401_Memory_Leak__int_calloc_06.c":136:28)
#loc205 = loc("CWE401_Memory_Leak__int_calloc_06.c":136:9)
#loc206 = loc("CWE401_Memory_Leak__int_calloc_06.c":138:5)
#loc207 = loc("CWE401_Memory_Leak__int_calloc_06.c":142:5)
#loc208 = loc("CWE401_Memory_Leak__int_calloc_06.c":138:8)
#loc209 = loc("CWE401_Memory_Leak__int_calloc_06.c":138:27)
#loc210 = loc("CWE401_Memory_Leak__int_calloc_06.c":138:25)
#loc211 = loc("CWE401_Memory_Leak__int_calloc_06.c":139:5)
#loc212 = loc(fused[#loc1, #loc2])
#loc213 = loc(fused[#loc3, #loc4])
#loc214 = loc(fused[#loc5, #loc6])
#loc215 = loc(fused[#loc7, #loc8])
#loc216 = loc(fused[#loc9, #loc10])
#loc217 = loc(fused[#loc12, #loc11])
#loc218 = loc(fused[#loc13, #loc14])
#loc219 = loc(fused[#loc15, #loc16])
#loc220 = loc(fused[#loc18, #loc14])
#loc221 = loc(fused[#loc21, #loc22])
#loc222 = loc(fused[#loc19, #loc23])
#loc223 = loc(fused[#loc24, #loc23])
#loc224 = loc(fused[#loc25, #loc26])
#loc225 = loc(fused[#loc27, #loc28])
#loc226 = loc(fused[#loc30, #loc26])
#loc227 = loc(fused[#loc35, #loc34])
#loc228 = loc(fused[#loc42, #loc43])
#loc229 = loc(fused[#loc44, #loc45])
#loc230 = loc(fused[#loc47, #loc43])
#loc231 = loc(fused[#loc48, #loc49])
#loc232 = loc(fused[#loc50, #loc51])
#loc233 = loc(fused[#loc52, #loc53])
#loc234 = loc(fused[#loc54, #loc55])
#loc235 = loc(fused[#loc56, #loc57])
#loc236 = loc(fused[#loc58, #loc59])
#loc237 = loc(fused[#loc61, #loc62])
#loc238 = loc(fused[#loc63, #loc64])
#loc239 = loc(fused[#loc65, #loc66])
#loc240 = loc(fused[#loc68, #loc67])
#loc241 = loc(fused[#loc69, #loc70])
#loc242 = loc(fused[#loc71, #loc72])
#loc243 = loc(fused[#loc74, #loc70])
#loc244 = loc(fused[#loc77, #loc78])
#loc245 = loc(fused[#loc75, #loc79])
#loc246 = loc(fused[#loc80, #loc79])
#loc247 = loc(fused[#loc81, #loc82])
#loc248 = loc(fused[#loc83, #loc84])
#loc249 = loc(fused[#loc86, #loc82])
#loc250 = loc(fused[#loc91, #loc90])
#loc251 = loc(fused[#loc98, #loc99])
#loc252 = loc(fused[#loc100, #loc101])
#loc253 = loc(fused[#loc103, #loc104, #loc105, #loc99])
#loc254 = loc(fused[#loc109, #loc110])
#loc255 = loc(fused[#loc111, #loc112])
#loc256 = loc(fused[#loc114, #loc113])
#loc257 = loc(fused[#loc115, #loc116])
#loc258 = loc(fused[#loc117, #loc118])
#loc259 = loc(fused[#loc120, #loc116])
#loc260 = loc(fused[#loc123, #loc124])
#loc261 = loc(fused[#loc121, #loc125])
#loc262 = loc(fused[#loc126, #loc125])
#loc263 = loc(fused[#loc127, #loc128])
#loc264 = loc(fused[#loc129, #loc130])
#loc265 = loc(fused[#loc132, #loc128])
#loc266 = loc(fused[#loc137, #loc136])
#loc267 = loc(fused[#loc144, #loc145])
#loc268 = loc(fused[#loc146, #loc147])
#loc269 = loc(fused[#loc149, #loc145])
#loc270 = loc(fused[#loc152, #loc153])
#loc271 = loc(fused[#loc154, #loc155])
#loc272 = loc(fused[#loc157, #loc156])
#loc273 = loc(fused[#loc158, #loc159])
#loc274 = loc(fused[#loc160, #loc161])
#loc275 = loc(fused[#loc163, #loc164, #loc165, #loc159])
#loc276 = loc(fused[#loc169, #loc168])
#loc277 = loc(fused[#loc171, #loc170])
#loc278 = loc(fused[#loc178, #loc179])
#loc279 = loc(fused[#loc180, #loc181])
#loc280 = loc(fused[#loc183, #loc179])
#loc281 = loc(fused[#loc184, #loc185])
#loc282 = loc(fused[#loc186, #loc187])
#loc283 = loc(fused[#loc189, #loc188])
#loc284 = loc(fused[#loc190, #loc191])
#loc285 = loc(fused[#loc192, #loc193])
#loc286 = loc(fused[#loc195, #loc191])
#loc287 = loc(fused[#loc197, #loc196])
#loc288 = loc(fused[#loc199, #loc198])
#loc289 = loc(fused[#loc206, #loc207])
#loc290 = loc(fused[#loc208, #loc209])
#loc291 = loc(fused[#loc211, #loc207])
