!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int64_t_rand_preinc_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc165)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc166)
  cir.func private  @printLongLongLine(!s64i) loc(#loc167)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_preinc_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc169)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc170)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc17)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc17)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc17)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc17)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc17)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc17)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc17)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc17)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc17)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc17)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc17)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc17)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc17)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc17)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc17)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc17)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc17)
          cir.yield %32 : !u64i loc(#loc17)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc17)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc17)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc17)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc17)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc17)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc17)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc17)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc17)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc17)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc17)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc17)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc17)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc17)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc17)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc17)
          %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc17)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc17)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc17)
          %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc17)
          cir.yield %36 : !u64i loc(#loc17)
        }) : (!cir.bool) -> !u64i loc(#loc17)
        %10 = cir.cast(integral, %9 : !u64i), !s64i loc(#loc17)
        cir.store %10, %0 : !s64i, !cir.ptr<!s64i> loc(#loc173)
      } loc(#loc172)
    } loc(#loc171)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc21)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc177)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc27)
          %7 = cir.unary(inc, %6) : !s64i, !s64i loc(#loc27)
          cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc178)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc26)
          cir.store %8, %5 : !s64i, !cir.ptr<!s64i> loc(#loc177)
          %9 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc29)
          cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc30)
        } loc(#loc176)
      } loc(#loc175)
    } loc(#loc174)
    cir.return loc(#loc8)
  } loc(#loc168)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_preinc_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc182)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc32)
  } loc(#loc179)
  cir.global "private"  internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc184)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc185)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc45)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc46)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc187)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc51)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc188)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc55)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc55)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc57)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc57)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc57)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc57)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc57)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc57)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc57)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc57)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc57)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc57)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc57)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc57)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc57)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc57)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc57)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc57)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc57)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc57)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc57)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc57)
          cir.yield %32 : !u64i loc(#loc57)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc57)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc57)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc57)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc57)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc57)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc57)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc57)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc57)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc57)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc57)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc57)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc57)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc57)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc57)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc57)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc57)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc57)
          %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc57)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc57)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc57)
          %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc57)
          cir.yield %36 : !u64i loc(#loc57)
        }) : (!cir.bool) -> !u64i loc(#loc57)
        %10 = cir.cast(integral, %9 : !u64i), !s64i loc(#loc57)
        cir.store %10, %0 : !s64i, !cir.ptr<!s64i> loc(#loc191)
      } loc(#loc190)
    } loc(#loc189)
    cir.scope {
      %2 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc184)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc61)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc61)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc45)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc45)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc65)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc68)
          %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc69)
          %7 = cir.cmp(lt, %5, %6) : !s64i, !s32i loc(#loc195)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc70)
          cir.if %8 {
            %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc197)
            %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc76)
            %11 = cir.unary(inc, %10) : !s64i, !s64i loc(#loc76)
            cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc198)
            %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc75)
            cir.store %12, %9 : !s64i, !cir.ptr<!s64i> loc(#loc197)
            %13 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc78)
            cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc79)
          } else {
            %9 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc46)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc46)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc80)
          } loc(#loc196)
        } loc(#loc194)
      } loc(#loc193)
    } loc(#loc192)
    cir.return loc(#loc48)
  } loc(#loc186)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc200)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc85)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc201)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc89)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc89)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc91)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc91)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc91)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc91)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc91)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc91)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc91)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc91)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc91)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc91)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc91)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc91)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc91)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc91)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc91)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc91)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc91)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc91)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc91)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc91)
          cir.yield %32 : !u64i loc(#loc91)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc91)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc91)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc91)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc91)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc91)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc91)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc91)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc91)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc91)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc91)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc91)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc91)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc91)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc91)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc91)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc91)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc91)
          %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc91)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc91)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc91)
          %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc91)
          cir.yield %36 : !u64i loc(#loc91)
        }) : (!cir.bool) -> !u64i loc(#loc91)
        %10 = cir.cast(integral, %9 : !u64i), !s64i loc(#loc91)
        cir.store %10, %0 : !s64i, !cir.ptr<!s64i> loc(#loc204)
      } loc(#loc203)
    } loc(#loc202)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc95)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc95)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc99)
          %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc100)
          %7 = cir.cmp(lt, %5, %6) : !s64i, !s32i loc(#loc208)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc101)
          cir.if %8 {
            %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc210)
            %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc107)
            %11 = cir.unary(inc, %10) : !s64i, !s64i loc(#loc107)
            cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc211)
            %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc106)
            cir.store %12, %9 : !s64i, !cir.ptr<!s64i> loc(#loc210)
            %13 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc109)
            cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc110)
          } else {
            %9 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc111)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc111)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc112)
          } loc(#loc209)
        } loc(#loc207)
      } loc(#loc206)
    } loc(#loc205)
    cir.return loc(#loc82)
  } loc(#loc199)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc213)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc117)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc214)
    cir.scope {
      %2 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc184)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc121)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc121)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc125)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc125)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc126)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc127)
        %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc127)
        cir.store %6, %0 : !s64i, !cir.ptr<!s64i> loc(#loc217)
      } loc(#loc216)
    } loc(#loc215)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc131)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc131)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc221)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc137)
          %7 = cir.unary(inc, %6) : !s64i, !s64i loc(#loc137)
          cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc222)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc136)
          cir.store %8, %5 : !s64i, !cir.ptr<!s64i> loc(#loc221)
          %9 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc139)
          cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc140)
        } loc(#loc220)
      } loc(#loc219)
    } loc(#loc218)
    cir.return loc(#loc114)
  } loc(#loc212)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc224)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc145)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc225)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc149)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc149)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc151)
        %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc151)
        cir.store %6, %0 : !s64i, !cir.ptr<!s64i> loc(#loc228)
      } loc(#loc227)
    } loc(#loc226)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc155)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc155)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc232)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc161)
          %7 = cir.unary(inc, %6) : !s64i, !s64i loc(#loc161)
          cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc233)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc160)
          cir.store %8, %5 : !s64i, !cir.ptr<!s64i> loc(#loc232)
          %9 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc163)
          cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc164)
        } loc(#loc231)
      } loc(#loc230)
    } loc(#loc229)
    cir.return loc(#loc142)
  } loc(#loc223)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":23:25)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":28:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":46:1)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":30:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":30:13)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":31:12)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":31:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":32:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":36:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":32:8)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":33:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":35:25)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":35:9)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":37:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":45:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":37:8)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":38:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":39:9)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":44:9)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":42:13)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":42:30)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":41:13)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":41:15)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":43:31)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":43:13)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":156:1)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":162:1)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":158:5)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":158:14)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":159:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":159:14)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":160:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":160:14)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":161:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":161:14)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":24:1)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":24:26)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":65:19)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":78:23)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":53:1)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":81:1)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":55:5)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":55:13)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":56:12)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":56:5)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":57:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":61:5)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":57:8)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":58:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":60:25)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":60:9)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":62:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":80:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":62:8)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":63:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":66:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":68:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":65:9)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":70:9)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":79:9)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":70:13)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":70:20)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":70:18)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":71:9)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":75:9)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":77:9)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":73:13)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":73:30)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":72:13)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":72:15)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":74:31)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":74:13)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":78:13)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":84:1)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":107:1)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":86:5)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":86:13)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":87:12)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":87:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":88:5)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":92:5)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":88:8)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":89:5)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":91:25)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":91:9)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":93:5)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":106:5)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":93:8)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":94:5)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":96:9)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":105:9)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":96:13)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":96:20)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":96:18)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":97:9)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":101:9)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":103:9)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":99:13)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":99:30)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":98:13)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":98:15)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":100:31)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":100:13)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":104:23)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":104:13)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":110:1)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":133:1)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":112:5)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":112:13)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":113:12)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":113:5)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":114:5)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":123:5)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":114:8)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":115:5)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":118:5)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":120:5)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":117:19)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":117:9)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":122:16)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":122:9)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":124:5)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":132:5)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":124:8)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":125:5)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":126:9)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":131:9)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":129:13)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":129:30)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":128:13)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":128:15)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":130:31)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":130:13)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":136:1)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":154:1)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":138:5)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":138:13)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":139:12)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":139:5)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":140:5)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":144:5)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":140:8)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":141:5)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":143:16)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":143:9)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":145:5)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":153:5)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":145:8)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":146:5)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":147:9)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":152:9)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":150:13)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":150:30)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":149:13)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":149:15)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":151:31)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_05.c":151:13)
#loc165 = loc(fused[#loc1, #loc2])
#loc166 = loc(fused[#loc3, #loc4])
#loc167 = loc(fused[#loc5, #loc6])
#loc168 = loc(fused[#loc7, #loc8])
#loc169 = loc(fused[#loc9, #loc10])
#loc170 = loc(fused[#loc12, #loc11])
#loc171 = loc(fused[#loc13, #loc14])
#loc172 = loc(fused[#loc16, #loc14])
#loc173 = loc(fused[#loc18, #loc17])
#loc174 = loc(fused[#loc19, #loc20])
#loc175 = loc(fused[#loc22, #loc20])
#loc176 = loc(fused[#loc23, #loc24])
#loc177 = loc(fused[#loc25, #loc26])
#loc178 = loc(fused[#loc27, #loc28])
#loc179 = loc(fused[#loc31, #loc32])
#loc180 = loc(fused[#loc33, #loc34])
#loc181 = loc(fused[#loc35, #loc36])
#loc182 = loc(fused[#loc37, #loc38])
#loc183 = loc(fused[#loc39, #loc40])
#loc184 = loc(fused[#loc41, #loc42])
#loc185 = loc(fused[#loc43, #loc44])
#loc186 = loc(fused[#loc47, #loc48])
#loc187 = loc(fused[#loc49, #loc50])
#loc188 = loc(fused[#loc52, #loc51])
#loc189 = loc(fused[#loc53, #loc54])
#loc190 = loc(fused[#loc56, #loc54])
#loc191 = loc(fused[#loc58, #loc57])
#loc192 = loc(fused[#loc59, #loc60])
#loc193 = loc(fused[#loc62, #loc63, #loc64, #loc60])
#loc194 = loc(fused[#loc66, #loc67])
#loc195 = loc(fused[#loc68, #loc69])
#loc196 = loc(fused[#loc71, #loc72, #loc73, #loc67])
#loc197 = loc(fused[#loc74, #loc75])
#loc198 = loc(fused[#loc76, #loc77])
#loc199 = loc(fused[#loc81, #loc82])
#loc200 = loc(fused[#loc83, #loc84])
#loc201 = loc(fused[#loc86, #loc85])
#loc202 = loc(fused[#loc87, #loc88])
#loc203 = loc(fused[#loc90, #loc88])
#loc204 = loc(fused[#loc92, #loc91])
#loc205 = loc(fused[#loc93, #loc94])
#loc206 = loc(fused[#loc96, #loc94])
#loc207 = loc(fused[#loc97, #loc98])
#loc208 = loc(fused[#loc99, #loc100])
#loc209 = loc(fused[#loc102, #loc103, #loc104, #loc98])
#loc210 = loc(fused[#loc105, #loc106])
#loc211 = loc(fused[#loc107, #loc108])
#loc212 = loc(fused[#loc113, #loc114])
#loc213 = loc(fused[#loc115, #loc116])
#loc214 = loc(fused[#loc118, #loc117])
#loc215 = loc(fused[#loc119, #loc120])
#loc216 = loc(fused[#loc122, #loc123, #loc124, #loc120])
#loc217 = loc(fused[#loc128, #loc127])
#loc218 = loc(fused[#loc129, #loc130])
#loc219 = loc(fused[#loc132, #loc130])
#loc220 = loc(fused[#loc133, #loc134])
#loc221 = loc(fused[#loc135, #loc136])
#loc222 = loc(fused[#loc137, #loc138])
#loc223 = loc(fused[#loc141, #loc142])
#loc224 = loc(fused[#loc143, #loc144])
#loc225 = loc(fused[#loc146, #loc145])
#loc226 = loc(fused[#loc147, #loc148])
#loc227 = loc(fused[#loc150, #loc148])
#loc228 = loc(fused[#loc152, #loc151])
#loc229 = loc(fused[#loc153, #loc154])
#loc230 = loc(fused[#loc156, #loc154])
#loc231 = loc(fused[#loc157, #loc158])
#loc232 = loc(fused[#loc159, #loc160])
#loc233 = loc(fused[#loc161, #loc162])
