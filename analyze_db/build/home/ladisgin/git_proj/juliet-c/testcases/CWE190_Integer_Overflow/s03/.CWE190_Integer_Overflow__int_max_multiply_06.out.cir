!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc53 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":181:10)
#loc54 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":181:14)
#loc55 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":181:20)
#loc56 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":181:32)
#loc237 = loc(fused[#loc53, #loc54])
#loc238 = loc(fused[#loc55, #loc56])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc213)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_multiply_06_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc215)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc11)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc12)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc218)
      cir.if %4 {
        %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc14)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc220)
      } loc(#loc219)
    } loc(#loc217)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc18)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc19)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc222)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc24)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc225)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc227)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc27)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc28)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc227)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc29)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc30)
          } loc(#loc226)
        } loc(#loc224)
      } loc(#loc223)
    } loc(#loc221)
    cir.return loc(#loc4)
  } loc(#loc214)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_multiply_06_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc229)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc230)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc231)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc232)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc32)
  } loc(#loc228)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc233)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc234)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc235)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc50)
  cir.func @main(%arg0: !s32i loc(fused[#loc53, #loc54]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc55, #loc56])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc237)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc238)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc52)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc57)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc58)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc59)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc59)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc60)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc47)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_max_multiply_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc239)
    cir.call @CWE190_Integer_Overflow__int_max_multiply_06_good() : () -> () loc(#loc62)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc48)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc49)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_max_multiply_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc240)
    cir.call @CWE190_Integer_Overflow__int_max_multiply_06_bad() : () -> () loc(#loc66)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc50)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc241)
    cir.return %17 : !s32i loc(#loc241)
  } loc(#loc236)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc72)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc243)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc77)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc244)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc81)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc82)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc246)
      cir.if %4 {
        %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc84)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc248)
      } loc(#loc247)
    } loc(#loc245)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc88)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc89)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !cir.bool loc(#loc250)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc71)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc71)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc93)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc96)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc97)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc253)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
              %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc102)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc103)
              %11 = cir.binop(div, %9, %10) : !s32i loc(#loc256)
              %12 = cir.cmp(lt, %8, %11) : !s32i, !cir.bool loc(#loc257)
              cir.if %12 {
                %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc259)
                %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                %15 = cir.const #cir.int<2> : !s32i loc(#loc109)
                %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc110)
                cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc259)
                %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc111)
                cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc112)
              } else {
                %13 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc72)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc72)
                cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc113)
              } loc(#loc258)
            } loc(#loc255)
          } loc(#loc254)
        } loc(#loc252)
      } loc(#loc251)
    } loc(#loc249)
    cir.return loc(#loc74)
  } loc(#loc242)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc261)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc118)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc262)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc122)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc123)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc264)
      cir.if %4 {
        %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc125)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc266)
      } loc(#loc265)
    } loc(#loc263)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc129)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc130)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc268)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc134)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc135)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc271)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc139)
              %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc140)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc141)
              %11 = cir.binop(div, %9, %10) : !s32i loc(#loc274)
              %12 = cir.cmp(lt, %8, %11) : !s32i, !cir.bool loc(#loc275)
              cir.if %12 {
                %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc277)
                %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc148)
                %15 = cir.const #cir.int<2> : !s32i loc(#loc147)
                %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc148)
                cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc277)
                %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc149)
                cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc150)
              } else {
                %13 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc151)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc151)
                cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc152)
              } loc(#loc276)
            } loc(#loc273)
          } loc(#loc272)
        } loc(#loc270)
      } loc(#loc269)
    } loc(#loc267)
    cir.return loc(#loc115)
  } loc(#loc260)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc279)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc157)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc280)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc161)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc162)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !cir.bool loc(#loc282)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc166)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc166)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc167)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc168)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc284)
      } loc(#loc283)
    } loc(#loc281)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc172)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc173)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc286)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc177)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc178)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc289)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc291)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc182)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc181)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc182)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc291)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc183)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc184)
          } loc(#loc290)
        } loc(#loc288)
      } loc(#loc287)
    } loc(#loc285)
    cir.return loc(#loc154)
  } loc(#loc278)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc293)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc189)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc294)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc193)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc194)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc296)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc196)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc298)
      } loc(#loc297)
    } loc(#loc295)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc200)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc201)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc300)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc205)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc206)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc303)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc305)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc210)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc209)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc210)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc305)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc211)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc212)
          } loc(#loc304)
        } loc(#loc302)
      } loc(#loc301)
    } loc(#loc299)
    cir.return loc(#loc186)
  } loc(#loc292)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_06.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":27:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":46:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":29:5)
#loc6 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":29:9)
#loc7 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":31:12)
#loc8 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":31:5)
#loc9 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":32:5)
#loc10 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":36:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":32:8)
#loc12 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":32:27)
#loc13 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":33:5)
#loc14 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":35:16)
#loc15 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":35:9)
#loc16 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":37:5)
#loc17 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":45:5)
#loc18 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":37:8)
#loc19 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":37:27)
#loc20 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":38:5)
#loc21 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":39:9)
#loc22 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":44:9)
#loc23 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":39:12)
#loc24 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":39:19)
#loc25 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":40:9)
#loc26 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":42:13)
#loc27 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":42:33)
#loc28 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":42:26)
#loc29 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":43:26)
#loc30 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":43:13)
#loc31 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":164:1)
#loc32 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":170:1)
#loc33 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":166:5)
#loc34 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":166:14)
#loc35 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":167:5)
#loc36 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":167:14)
#loc37 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":168:5)
#loc38 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":168:14)
#loc39 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":169:5)
#loc40 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":169:14)
#loc41 = loc("/usr/include/stdlib.h":575:1)
#loc42 = loc("/usr/include/stdlib.h":575:41)
#loc43 = loc("/usr/include/time.h":76:1)
#loc44 = loc("/usr/include/time.h":76:38)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":186:15)
#loc48 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":188:15)
#loc49 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":191:15)
#loc50 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":193:15)
#loc51 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":181:1)
#loc52 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":196:1)
#loc57 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":182:1)
#loc58 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":184:27)
#loc59 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":184:22)
#loc60 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":184:5)
#loc61 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":186:5)
#loc62 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":187:5)
#loc63 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":187:55)
#loc64 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":188:5)
#loc65 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":191:5)
#loc66 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":192:5)
#loc67 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":192:54)
#loc68 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":193:5)
#loc69 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":195:12)
#loc70 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":195:5)
#loc71 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":66:19)
#loc72 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":80:27)
#loc73 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":53:1)
#loc74 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":84:1)
#loc75 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":55:5)
#loc76 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":55:9)
#loc77 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":57:12)
#loc78 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":57:5)
#loc79 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":58:5)
#loc80 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":62:5)
#loc81 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":58:8)
#loc82 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":58:27)
#loc83 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":59:5)
#loc84 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":61:16)
#loc85 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":61:9)
#loc86 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":63:5)
#loc87 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":83:5)
#loc88 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":63:8)
#loc89 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":63:27)
#loc90 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":64:5)
#loc91 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":67:5)
#loc92 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":69:5)
#loc93 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":66:9)
#loc94 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":70:9)
#loc95 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":82:9)
#loc96 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":70:12)
#loc97 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":70:19)
#loc98 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":71:9)
#loc99 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":73:13)
#loc100 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":81:13)
#loc101 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":73:17)
#loc102 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":73:25)
#loc103 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":73:33)
#loc104 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":73:34)
#loc105 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":74:13)
#loc106 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":77:13)
#loc107 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":79:13)
#loc108 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":75:17)
#loc109 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":75:37)
#loc110 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":75:30)
#loc111 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":76:30)
#loc112 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":76:17)
#loc113 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":80:17)
#loc114 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":87:1)
#loc115 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":113:1)
#loc116 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":89:5)
#loc117 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":89:9)
#loc118 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":91:12)
#loc119 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":91:5)
#loc120 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":92:5)
#loc121 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":96:5)
#loc122 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":92:8)
#loc123 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":92:27)
#loc124 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":93:5)
#loc125 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":95:16)
#loc126 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":95:9)
#loc127 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":97:5)
#loc128 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":112:5)
#loc129 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":97:8)
#loc130 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":97:27)
#loc131 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":98:5)
#loc132 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":99:9)
#loc133 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":111:9)
#loc134 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":99:12)
#loc135 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":99:19)
#loc136 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":100:9)
#loc137 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":102:13)
#loc138 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":110:13)
#loc139 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":102:17)
#loc140 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":102:25)
#loc141 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":102:33)
#loc142 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":102:34)
#loc143 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":103:13)
#loc144 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":106:13)
#loc145 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":108:13)
#loc146 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":104:17)
#loc147 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":104:37)
#loc148 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":104:30)
#loc149 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":105:30)
#loc150 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":105:17)
#loc151 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":109:27)
#loc152 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":109:17)
#loc153 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":116:1)
#loc154 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":140:1)
#loc155 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":118:5)
#loc156 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":118:9)
#loc157 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":120:12)
#loc158 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":120:5)
#loc159 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":121:5)
#loc160 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":130:5)
#loc161 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":121:8)
#loc162 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":121:27)
#loc163 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":122:5)
#loc164 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":125:5)
#loc165 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":127:5)
#loc166 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":124:19)
#loc167 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":124:9)
#loc168 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":129:16)
#loc169 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":129:9)
#loc170 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":131:5)
#loc171 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":139:5)
#loc172 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":131:8)
#loc173 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":131:27)
#loc174 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":132:5)
#loc175 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":133:9)
#loc176 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":138:9)
#loc177 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":133:12)
#loc178 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":133:19)
#loc179 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":134:9)
#loc180 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":136:13)
#loc181 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":136:33)
#loc182 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":136:26)
#loc183 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":137:26)
#loc184 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":137:13)
#loc185 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":143:1)
#loc186 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":162:1)
#loc187 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":145:5)
#loc188 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":145:9)
#loc189 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":147:12)
#loc190 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":147:5)
#loc191 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":148:5)
#loc192 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":152:5)
#loc193 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":148:8)
#loc194 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":148:27)
#loc195 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":149:5)
#loc196 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":151:16)
#loc197 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":151:9)
#loc198 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":153:5)
#loc199 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":161:5)
#loc200 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":153:8)
#loc201 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":153:27)
#loc202 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":154:5)
#loc203 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":155:9)
#loc204 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":160:9)
#loc205 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":155:12)
#loc206 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":155:19)
#loc207 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":156:9)
#loc208 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":158:13)
#loc209 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":158:33)
#loc210 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":158:26)
#loc211 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":159:26)
#loc212 = loc("CWE190_Integer_Overflow__int_max_multiply_06.c":159:13)
#loc213 = loc(fused[#loc1, #loc2])
#loc214 = loc(fused[#loc3, #loc4])
#loc215 = loc(fused[#loc5, #loc6])
#loc216 = loc(fused[#loc8, #loc7])
#loc217 = loc(fused[#loc9, #loc10])
#loc218 = loc(fused[#loc11, #loc12])
#loc219 = loc(fused[#loc13, #loc10])
#loc220 = loc(fused[#loc15, #loc14])
#loc221 = loc(fused[#loc16, #loc17])
#loc222 = loc(fused[#loc18, #loc19])
#loc223 = loc(fused[#loc20, #loc17])
#loc224 = loc(fused[#loc21, #loc22])
#loc225 = loc(fused[#loc23, #loc24])
#loc226 = loc(fused[#loc25, #loc22])
#loc227 = loc(fused[#loc26, #loc27])
#loc228 = loc(fused[#loc31, #loc32])
#loc229 = loc(fused[#loc33, #loc34])
#loc230 = loc(fused[#loc35, #loc36])
#loc231 = loc(fused[#loc37, #loc38])
#loc232 = loc(fused[#loc39, #loc40])
#loc233 = loc(fused[#loc41, #loc42])
#loc234 = loc(fused[#loc43, #loc44])
#loc235 = loc(fused[#loc45, #loc46])
#loc236 = loc(fused[#loc51, #loc52])
#loc239 = loc(fused[#loc62, #loc63])
#loc240 = loc(fused[#loc66, #loc67])
#loc241 = loc(fused[#loc70, #loc69])
#loc242 = loc(fused[#loc73, #loc74])
#loc243 = loc(fused[#loc75, #loc76])
#loc244 = loc(fused[#loc78, #loc77])
#loc245 = loc(fused[#loc79, #loc80])
#loc246 = loc(fused[#loc81, #loc82])
#loc247 = loc(fused[#loc83, #loc80])
#loc248 = loc(fused[#loc85, #loc84])
#loc249 = loc(fused[#loc86, #loc87])
#loc250 = loc(fused[#loc88, #loc89])
#loc251 = loc(fused[#loc90, #loc91, #loc92, #loc87])
#loc252 = loc(fused[#loc94, #loc95])
#loc253 = loc(fused[#loc96, #loc97])
#loc254 = loc(fused[#loc98, #loc95])
#loc255 = loc(fused[#loc99, #loc100])
#loc256 = loc(fused[#loc102, #loc103])
#loc257 = loc(fused[#loc101, #loc104])
#loc258 = loc(fused[#loc105, #loc106, #loc107, #loc100])
#loc259 = loc(fused[#loc108, #loc109])
#loc260 = loc(fused[#loc114, #loc115])
#loc261 = loc(fused[#loc116, #loc117])
#loc262 = loc(fused[#loc119, #loc118])
#loc263 = loc(fused[#loc120, #loc121])
#loc264 = loc(fused[#loc122, #loc123])
#loc265 = loc(fused[#loc124, #loc121])
#loc266 = loc(fused[#loc126, #loc125])
#loc267 = loc(fused[#loc127, #loc128])
#loc268 = loc(fused[#loc129, #loc130])
#loc269 = loc(fused[#loc131, #loc128])
#loc270 = loc(fused[#loc132, #loc133])
#loc271 = loc(fused[#loc134, #loc135])
#loc272 = loc(fused[#loc136, #loc133])
#loc273 = loc(fused[#loc137, #loc138])
#loc274 = loc(fused[#loc140, #loc141])
#loc275 = loc(fused[#loc139, #loc142])
#loc276 = loc(fused[#loc143, #loc144, #loc145, #loc138])
#loc277 = loc(fused[#loc146, #loc147])
#loc278 = loc(fused[#loc153, #loc154])
#loc279 = loc(fused[#loc155, #loc156])
#loc280 = loc(fused[#loc158, #loc157])
#loc281 = loc(fused[#loc159, #loc160])
#loc282 = loc(fused[#loc161, #loc162])
#loc283 = loc(fused[#loc163, #loc164, #loc165, #loc160])
#loc284 = loc(fused[#loc169, #loc168])
#loc285 = loc(fused[#loc170, #loc171])
#loc286 = loc(fused[#loc172, #loc173])
#loc287 = loc(fused[#loc174, #loc171])
#loc288 = loc(fused[#loc175, #loc176])
#loc289 = loc(fused[#loc177, #loc178])
#loc290 = loc(fused[#loc179, #loc176])
#loc291 = loc(fused[#loc180, #loc181])
#loc292 = loc(fused[#loc185, #loc186])
#loc293 = loc(fused[#loc187, #loc188])
#loc294 = loc(fused[#loc190, #loc189])
#loc295 = loc(fused[#loc191, #loc192])
#loc296 = loc(fused[#loc193, #loc194])
#loc297 = loc(fused[#loc195, #loc192])
#loc298 = loc(fused[#loc197, #loc196])
#loc299 = loc(fused[#loc198, #loc199])
#loc300 = loc(fused[#loc200, #loc201])
#loc301 = loc(fused[#loc202, #loc199])
#loc302 = loc(fused[#loc203, #loc204])
#loc303 = loc(fused[#loc205, #loc206])
#loc304 = loc(fused[#loc207, #loc204])
#loc305 = loc(fused[#loc208, #loc209])
