!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_add_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc160)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc161)
  cir.func private  @printUnsignedLine(!u32i) loc(#loc162)
  cir.func no_proto  @CWE190_Integer_Overflow__unsigned_int_rand_add_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc11)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc165)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc160)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc17)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc17)
        %10 = cir.ternary(%9, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc17)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc17)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc17)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc17)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc17)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc17)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc17)
          cir.yield %24 : !u32i loc(#loc17)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc17)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc17)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc17)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc17)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc17)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc17)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc17)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc17)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc17)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc17)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc17)
          cir.yield %28 : !u32i loc(#loc17)
        }) : (!cir.bool) -> !u32i loc(#loc17)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc17)
        %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc17)
        cir.store %12, %0 : !u32i, !cir.ptr<!u32i> loc(#loc168)
      } loc(#loc167)
    } loc(#loc166)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc160)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc21)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc172)
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc27)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc26)
          %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc26)
          %10 = cir.binop(add, %7, %9) : !u32i loc(#loc173)
          cir.store %10, %6 : !u32i, !cir.ptr<!u32i> loc(#loc172)
          %11 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc28)
          cir.call @printUnsignedLine(%11) : (!u32i) -> () loc(#loc29)
        } loc(#loc171)
      } loc(#loc170)
    } loc(#loc169)
    cir.return loc(#loc8)
  } loc(#loc163)
  cir.func no_proto  @CWE190_Integer_Overflow__unsigned_int_rand_add_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc177)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc174)
  cir.global "private"  internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc179)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc180)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc44)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc45)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc50)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc50)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc183)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc160)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc54)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc54)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc56)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc56)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc56)
        %10 = cir.ternary(%9, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc56)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc56)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc56)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc56)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc56)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc56)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc56)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc56)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc56)
          cir.yield %24 : !u32i loc(#loc56)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc56)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc56)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc56)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc56)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc56)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc56)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc56)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc56)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc56)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc56)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc56)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc56)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc56)
          cir.yield %28 : !u32i loc(#loc56)
        }) : (!cir.bool) -> !u32i loc(#loc56)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc56)
        %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc56)
        cir.store %12, %0 : !u32i, !cir.ptr<!u32i> loc(#loc186)
      } loc(#loc185)
    } loc(#loc184)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc179)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc60)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc60)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc64)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc67)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc68)
          %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc68)
          %9 = cir.const #cir.int<2> : !u32i loc(#loc68)
          %10 = cir.binop(mul, %8, %9) : !u32i loc(#loc68)
          %11 = cir.const #cir.int<1> : !u32i loc(#loc68)
          %12 = cir.binop(add, %10, %11) : !u32i loc(#loc68)
          %13 = cir.cmp(lt, %6, %12) : !u32i, !s32i loc(#loc190)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc69)
          cir.if %14 {
            %15 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc192)
            %16 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc75)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc74)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc74)
            %19 = cir.binop(add, %16, %18) : !u32i loc(#loc193)
            cir.store %19, %15 : !u32i, !cir.ptr<!u32i> loc(#loc192)
            %20 = cir.load %15 : !cir.ptr<!u32i>, !u32i loc(#loc76)
            cir.call @printUnsignedLine(%20) : (!u32i) -> () loc(#loc77)
          } else {
            %15 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc45)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc45)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc78)
          } loc(#loc191)
        } loc(#loc189)
      } loc(#loc188)
    } loc(#loc187)
    cir.return loc(#loc47)
  } loc(#loc181)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc83)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc83)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc196)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc160)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc87)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc87)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc89)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc89)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc89)
        %10 = cir.ternary(%9, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc89)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc89)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc89)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc89)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc89)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc89)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc89)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc89)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc89)
          cir.yield %24 : !u32i loc(#loc89)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc89)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc89)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc89)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc89)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc89)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc89)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc89)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc89)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc89)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc89)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc89)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc89)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc89)
          cir.yield %28 : !u32i loc(#loc89)
        }) : (!cir.bool) -> !u32i loc(#loc89)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc89)
        %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc89)
        cir.store %12, %0 : !u32i, !cir.ptr<!u32i> loc(#loc199)
      } loc(#loc198)
    } loc(#loc197)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc160)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc93)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc93)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc97)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc98)
          %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc98)
          %9 = cir.const #cir.int<2> : !u32i loc(#loc98)
          %10 = cir.binop(mul, %8, %9) : !u32i loc(#loc98)
          %11 = cir.const #cir.int<1> : !u32i loc(#loc98)
          %12 = cir.binop(add, %10, %11) : !u32i loc(#loc98)
          %13 = cir.cmp(lt, %6, %12) : !u32i, !s32i loc(#loc203)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc99)
          cir.if %14 {
            %15 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc205)
            %16 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc105)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc104)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc104)
            %19 = cir.binop(add, %16, %18) : !u32i loc(#loc206)
            cir.store %19, %15 : !u32i, !cir.ptr<!u32i> loc(#loc205)
            %20 = cir.load %15 : !cir.ptr<!u32i>, !u32i loc(#loc106)
            cir.call @printUnsignedLine(%20) : (!u32i) -> () loc(#loc107)
          } else {
            %15 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc108)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc108)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc109)
          } loc(#loc204)
        } loc(#loc202)
      } loc(#loc201)
    } loc(#loc200)
    cir.return loc(#loc80)
  } loc(#loc194)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc114)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc114)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc209)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc179)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc118)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc118)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc122)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc122)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc123)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc124)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc124)
        cir.store %7, %0 : !u32i, !cir.ptr<!u32i> loc(#loc212)
      } loc(#loc211)
    } loc(#loc210)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc160)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc128)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc128)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc216)
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc134)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc133)
          %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc133)
          %10 = cir.binop(add, %7, %9) : !u32i loc(#loc217)
          cir.store %10, %6 : !u32i, !cir.ptr<!u32i> loc(#loc216)
          %11 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc135)
          cir.call @printUnsignedLine(%11) : (!u32i) -> () loc(#loc136)
        } loc(#loc215)
      } loc(#loc214)
    } loc(#loc213)
    cir.return loc(#loc111)
  } loc(#loc207)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc219)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc141)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc141)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc220)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc160)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc145)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc145)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc147)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc147)
        cir.store %7, %0 : !u32i, !cir.ptr<!u32i> loc(#loc223)
      } loc(#loc222)
    } loc(#loc221)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc160)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc151)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc151)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc227)
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc157)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc156)
          %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc156)
          %10 = cir.binop(add, %7, %9) : !u32i loc(#loc228)
          cir.store %10, %6 : !u32i, !cir.ptr<!u32i> loc(#loc227)
          %11 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc158)
          cir.call @printUnsignedLine(%11) : (!u32i) -> () loc(#loc159)
        } loc(#loc226)
      } loc(#loc225)
    } loc(#loc224)
    cir.return loc(#loc138)
  } loc(#loc218)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":23:25)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":28:1)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":45:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":30:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":30:18)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":31:12)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":31:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":32:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":36:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":32:8)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":33:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":35:30)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":35:9)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":37:5)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":44:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":37:8)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":38:5)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":39:9)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":43:9)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":41:13)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":41:42)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":41:35)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":42:31)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":42:13)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":151:1)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":157:1)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":153:5)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":153:14)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":154:5)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":154:14)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":155:5)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":155:14)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":156:5)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":156:14)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":24:1)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":24:26)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":64:19)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":76:23)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":52:1)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":79:1)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":54:5)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":54:18)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":55:12)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":55:5)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":56:5)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":60:5)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":56:8)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":57:5)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":59:30)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":59:9)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":61:5)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":78:5)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":61:8)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":62:5)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":65:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":67:5)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":64:9)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":69:9)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":77:9)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":69:13)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":69:20)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":69:18)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":70:9)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":73:9)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":75:9)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":71:13)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":71:42)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":71:35)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":72:31)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":72:13)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":76:13)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":82:1)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":104:1)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":84:5)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":84:18)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":85:12)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":85:5)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":86:5)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":90:5)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":86:8)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":87:5)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":89:30)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":89:9)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":91:5)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":103:5)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":91:8)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":92:5)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":94:9)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":102:9)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":94:13)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":94:20)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":94:18)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":95:9)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":98:9)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":100:9)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":96:13)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":96:42)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":96:35)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":97:31)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":97:13)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":101:23)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":101:13)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":107:1)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":129:1)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":109:5)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":109:18)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":110:12)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":110:5)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":111:5)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":120:5)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":111:8)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":112:5)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":115:5)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":117:5)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":114:19)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":114:9)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":119:16)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":119:9)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":121:5)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":128:5)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":121:8)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":122:5)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":123:9)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":127:9)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":125:13)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":125:42)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":125:35)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":126:31)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":126:13)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":132:1)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":149:1)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":134:5)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":134:18)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":135:12)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":135:5)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":136:5)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":140:5)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":136:8)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":137:5)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":139:16)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":139:9)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":141:5)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":148:5)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":141:8)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":142:5)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":143:9)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":147:9)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":145:13)
#loc156 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":145:42)
#loc157 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":145:35)
#loc158 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":146:31)
#loc159 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_05.c":146:13)
#loc160 = loc(fused[#loc1, #loc2])
#loc161 = loc(fused[#loc3, #loc4])
#loc162 = loc(fused[#loc5, #loc6])
#loc163 = loc(fused[#loc7, #loc8])
#loc164 = loc(fused[#loc9, #loc10])
#loc165 = loc(fused[#loc12, #loc11])
#loc166 = loc(fused[#loc13, #loc14])
#loc167 = loc(fused[#loc16, #loc14])
#loc168 = loc(fused[#loc18, #loc17])
#loc169 = loc(fused[#loc19, #loc20])
#loc170 = loc(fused[#loc22, #loc20])
#loc171 = loc(fused[#loc23, #loc24])
#loc172 = loc(fused[#loc25, #loc26])
#loc173 = loc(fused[#loc27, #loc26])
#loc174 = loc(fused[#loc30, #loc31])
#loc175 = loc(fused[#loc32, #loc33])
#loc176 = loc(fused[#loc34, #loc35])
#loc177 = loc(fused[#loc36, #loc37])
#loc178 = loc(fused[#loc38, #loc39])
#loc179 = loc(fused[#loc40, #loc41])
#loc180 = loc(fused[#loc42, #loc43])
#loc181 = loc(fused[#loc46, #loc47])
#loc182 = loc(fused[#loc48, #loc49])
#loc183 = loc(fused[#loc51, #loc50])
#loc184 = loc(fused[#loc52, #loc53])
#loc185 = loc(fused[#loc55, #loc53])
#loc186 = loc(fused[#loc57, #loc56])
#loc187 = loc(fused[#loc58, #loc59])
#loc188 = loc(fused[#loc61, #loc62, #loc63, #loc59])
#loc189 = loc(fused[#loc65, #loc66])
#loc190 = loc(fused[#loc67, #loc68])
#loc191 = loc(fused[#loc70, #loc71, #loc72, #loc66])
#loc192 = loc(fused[#loc73, #loc74])
#loc193 = loc(fused[#loc75, #loc74])
#loc194 = loc(fused[#loc79, #loc80])
#loc195 = loc(fused[#loc81, #loc82])
#loc196 = loc(fused[#loc84, #loc83])
#loc197 = loc(fused[#loc85, #loc86])
#loc198 = loc(fused[#loc88, #loc86])
#loc199 = loc(fused[#loc90, #loc89])
#loc200 = loc(fused[#loc91, #loc92])
#loc201 = loc(fused[#loc94, #loc92])
#loc202 = loc(fused[#loc95, #loc96])
#loc203 = loc(fused[#loc97, #loc98])
#loc204 = loc(fused[#loc100, #loc101, #loc102, #loc96])
#loc205 = loc(fused[#loc103, #loc104])
#loc206 = loc(fused[#loc105, #loc104])
#loc207 = loc(fused[#loc110, #loc111])
#loc208 = loc(fused[#loc112, #loc113])
#loc209 = loc(fused[#loc115, #loc114])
#loc210 = loc(fused[#loc116, #loc117])
#loc211 = loc(fused[#loc119, #loc120, #loc121, #loc117])
#loc212 = loc(fused[#loc125, #loc124])
#loc213 = loc(fused[#loc126, #loc127])
#loc214 = loc(fused[#loc129, #loc127])
#loc215 = loc(fused[#loc130, #loc131])
#loc216 = loc(fused[#loc132, #loc133])
#loc217 = loc(fused[#loc134, #loc133])
#loc218 = loc(fused[#loc137, #loc138])
#loc219 = loc(fused[#loc139, #loc140])
#loc220 = loc(fused[#loc142, #loc141])
#loc221 = loc(fused[#loc143, #loc144])
#loc222 = loc(fused[#loc146, #loc144])
#loc223 = loc(fused[#loc148, #loc147])
#loc224 = loc(fused[#loc149, #loc150])
#loc225 = loc(fused[#loc152, #loc150])
#loc226 = loc(fused[#loc153, #loc154])
#loc227 = loc(fused[#loc155, #loc156])
#loc228 = loc(fused[#loc157, #loc156])
