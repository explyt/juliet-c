!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc65 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":135:10)
#loc66 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":135:14)
#loc67 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":135:20)
#loc68 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":135:32)
#true = #cir.bool<true> : !cir.bool
#loc196 = loc(fused[#loc65, #loc66])
#loc197 = loc(fused[#loc67, #loc68])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc171)
  cir.func private @printIntLine(!s32i) loc(#loc172)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc173)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_rand_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc175)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc176)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc177)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc176)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc177)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc17)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc180)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc23)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc180)
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc24)
      %10 = cir.binop(and, %8, %9) : !s32i loc(#loc24)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc24)
      %12 = cir.ternary(%11, true {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc24)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc24)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc24)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc24)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc24)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc24)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc24)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc24)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc24)
        cir.yield %27 : !u32i loc(#loc24)
      }, false {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc24)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc24)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc24)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc24)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc24)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc24)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc24)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc24)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc24)
        %28 = cir.unary(minus, %27) : !u32i, !u32i loc(#loc24)
        %29 = cir.const #cir.int<1> : !s32i loc(#loc24)
        %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc24)
        %31 = cir.binop(sub, %28, %30) : !u32i loc(#loc24)
        cir.yield %31 : !u32i loc(#loc24)
      }) : (!cir.bool) -> !u32i loc(#loc24)
      %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc24)
      cir.store %13, %5 : !s32i, !cir.ptr<!s32i> loc(#loc181)
      %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
      cir.store %14, %15 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    } loc(#loc179)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc184)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc33)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc184)
      cir.scope {
        %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc186)
        %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc186)
        cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc186)
        cir.scope {
          %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc40)
          %11 = cir.const #cir.int<0> : !s32i loc(#loc41)
          %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc188)
          cir.if %12 {
            %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc45)
            %14 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc46)
            %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc46)
            %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc46)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc47)
          } else {
            %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc7)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc7)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc48)
          } loc(#loc189)
        } loc(#loc187)
      } loc(#loc185)
    } loc(#loc183)
    cir.return loc(#loc9)
  } loc(#loc174)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_rand_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc191)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc53)
    cir.return loc(#loc50)
  } loc(#loc190)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc193)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc194)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc62)
  cir.func @main(%arg0: !s32i loc(fused[#loc65, #loc66]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc67, #loc68])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc196)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc197)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc64)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc69)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc70)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc71)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc71)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc72)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc59)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %8 = cir.get_global @CWE126_Buffer_Overread__CWE129_rand_32_good : !cir.ptr<!cir.func<!void ()>> loc(#loc198)
    cir.call @CWE126_Buffer_Overread__CWE129_rand_32_good() : () -> () loc(#loc74)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc60)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc61)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %13 = cir.get_global @CWE126_Buffer_Overread__CWE129_rand_32_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc199)
    cir.call @CWE126_Buffer_Overread__CWE129_rand_32_bad() : () -> () loc(#loc78)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc62)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc81)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc200)
    cir.return %17 : !s32i loc(#loc200)
  } loc(#loc195)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc202)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc203)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc204)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc203)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc204)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc92)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc207)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc97)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc98)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc207)
      %8 = cir.const #cir.int<7> : !s32i loc(#loc99)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc208)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc101)
      %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc102)
      cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    } loc(#loc206)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc211)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc107)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc108)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc211)
      cir.scope {
        %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc213)
        %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc213)
        cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc213)
        cir.scope {
          %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc115)
          %11 = cir.const #cir.int<0> : !s32i loc(#loc116)
          %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc215)
          cir.if %12 {
            %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc120)
            %14 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc121)
            %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc121)
            %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc121)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc122)
          } else {
            %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc123)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc123)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc124)
          } loc(#loc216)
        } loc(#loc214)
      } loc(#loc212)
    } loc(#loc210)
    cir.return loc(#loc84)
  } loc(#loc201)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc125)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc218)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc219)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc220)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc219)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc220)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc134)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc135)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc223)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc140)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc141)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc223)
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc142)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc142)
      %10 = cir.binop(and, %8, %9) : !s32i loc(#loc142)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc142)
      %12 = cir.ternary(%11, true {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc142)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc142)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc142)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc142)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc142)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc142)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc142)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc142)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc142)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc142)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc142)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc142)
        cir.yield %27 : !u32i loc(#loc142)
      }, false {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc142)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc142)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc142)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc142)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc142)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc142)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc142)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc142)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc142)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc142)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc142)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc142)
        %28 = cir.unary(minus, %27) : !u32i, !u32i loc(#loc142)
        %29 = cir.const #cir.int<1> : !s32i loc(#loc142)
        %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc142)
        %31 = cir.binop(sub, %28, %30) : !u32i loc(#loc142)
        cir.yield %31 : !u32i loc(#loc142)
      }) : (!cir.bool) -> !u32i loc(#loc142)
      %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc142)
      cir.store %13, %5 : !s32i, !cir.ptr<!s32i> loc(#loc224)
      %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc144)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc145)
      cir.store %14, %15 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    } loc(#loc222)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc227)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc150)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc151)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc227)
      cir.scope {
        %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc229)
        %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc229)
        cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc229)
        cir.scope {
          %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc158)
          %11 = cir.const #cir.int<0> : !s32i loc(#loc159)
          %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc231)
          %13 = cir.ternary(%12, true {
            %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc161)
            %15 = cir.const #cir.int<10> : !s32i loc(#loc162)
            %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc232)
            %17 = cir.ternary(%16, true {
              %18 = cir.const #true loc(#loc160)
              cir.yield %18 : !cir.bool loc(#loc160)
            }, false {
              %18 = cir.const #false loc(#loc160)
              cir.yield %18 : !cir.bool loc(#loc160)
            }) : (!cir.bool) -> !cir.bool loc(#loc160)
            cir.yield %17 : !cir.bool loc(#loc160)
          }, false {
            %14 = cir.const #false loc(#loc160)
            cir.yield %14 : !cir.bool loc(#loc160)
          }) : (!cir.bool) -> !cir.bool loc(#loc160)
          cir.if %13 {
            %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc167)
            %15 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc168)
            %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc168)
            %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc168)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc169)
          } else {
            %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc125)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc125)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc170)
          } loc(#loc233)
        } loc(#loc230)
      } loc(#loc228)
    } loc(#loc226)
    cir.return loc(#loc127)
  } loc(#loc217)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":47:27)
#loc8 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":22:1)
#loc9 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":51:1)
#loc10 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":24:5)
#loc11 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":24:9)
#loc12 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":25:5)
#loc13 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":25:22)
#loc14 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":26:5)
#loc15 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":26:22)
#loc16 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":28:13)
#loc17 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":28:12)
#loc18 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":28:5)
#loc19 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":29:5)
#loc20 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":34:5)
#loc21 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":30:9)
#loc22 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":30:21)
#loc23 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":30:20)
#loc24 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":32:16)
#loc25 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":32:9)
#loc26 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":33:21)
#loc27 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":33:10)
#loc28 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":33:9)
#loc29 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":35:5)
#loc30 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":50:5)
#loc31 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":36:9)
#loc32 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":36:21)
#loc33 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":36:20)
#loc34 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":37:9)
#loc35 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":49:9)
#loc36 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":38:13)
#loc37 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":38:34)
#loc38 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":41:13)
#loc39 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":48:13)
#loc40 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":41:17)
#loc41 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":41:25)
#loc42 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":42:13)
#loc43 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":44:13)
#loc44 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":46:13)
#loc45 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":43:37)
#loc46 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":43:30)
#loc47 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":43:17)
#loc48 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":47:17)
#loc49 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":121:1)
#loc50 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":125:1)
#loc51 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":123:5)
#loc52 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":123:13)
#loc53 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":124:5)
#loc54 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":124:13)
#loc55 = loc("/usr/include/stdlib.h":575:1)
#loc56 = loc("/usr/include/stdlib.h":575:41)
#loc57 = loc("/usr/include/time.h":76:1)
#loc58 = loc("/usr/include/time.h":76:38)
#loc59 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":140:15)
#loc60 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":142:15)
#loc61 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":145:15)
#loc62 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":147:15)
#loc63 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":135:1)
#loc64 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":150:1)
#loc69 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":136:1)
#loc70 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":138:27)
#loc71 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":138:22)
#loc72 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":138:5)
#loc73 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":140:5)
#loc74 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":141:5)
#loc75 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":141:49)
#loc76 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":142:5)
#loc77 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":145:5)
#loc78 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":146:5)
#loc79 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":146:48)
#loc80 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":147:5)
#loc81 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":149:12)
#loc82 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":149:5)
#loc83 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":58:1)
#loc84 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":88:1)
#loc85 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":60:5)
#loc86 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":60:9)
#loc87 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":61:5)
#loc88 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":61:22)
#loc89 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":62:5)
#loc90 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":62:22)
#loc91 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":64:13)
#loc92 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":64:12)
#loc93 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":64:5)
#loc94 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":65:5)
#loc95 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":71:5)
#loc96 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":66:9)
#loc97 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":66:21)
#loc98 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":66:20)
#loc99 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":69:16)
#loc100 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":69:9)
#loc101 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":70:21)
#loc102 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":70:10)
#loc103 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":70:9)
#loc104 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":72:5)
#loc105 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":87:5)
#loc106 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":73:9)
#loc107 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":73:21)
#loc108 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":73:20)
#loc109 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":74:9)
#loc110 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":86:9)
#loc111 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":75:13)
#loc112 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":75:34)
#loc113 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":78:13)
#loc114 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":85:13)
#loc115 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":78:17)
#loc116 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":78:25)
#loc117 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":79:13)
#loc118 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":81:13)
#loc119 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":83:13)
#loc120 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":80:37)
#loc121 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":80:30)
#loc122 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":80:17)
#loc123 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":84:27)
#loc124 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":84:17)
#loc125 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":115:27)
#loc126 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":91:1)
#loc127 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":119:1)
#loc128 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":93:5)
#loc129 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":93:9)
#loc130 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":94:5)
#loc131 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":94:22)
#loc132 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":95:5)
#loc133 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":95:22)
#loc134 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":97:13)
#loc135 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":97:12)
#loc136 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":97:5)
#loc137 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":98:5)
#loc138 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":103:5)
#loc139 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":99:9)
#loc140 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":99:21)
#loc141 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":99:20)
#loc142 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":101:16)
#loc143 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":101:9)
#loc144 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":102:21)
#loc145 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":102:10)
#loc146 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":102:9)
#loc147 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":104:5)
#loc148 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":118:5)
#loc149 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":105:9)
#loc150 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":105:21)
#loc151 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":105:20)
#loc152 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":106:9)
#loc153 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":117:9)
#loc154 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":107:13)
#loc155 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":107:34)
#loc156 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":109:13)
#loc157 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":116:13)
#loc158 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":109:17)
#loc159 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":109:25)
#loc160 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":109:27)
#loc161 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":109:30)
#loc162 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":109:38)
#loc163 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":109:40)
#loc164 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":110:13)
#loc165 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":112:13)
#loc166 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":114:13)
#loc167 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":111:37)
#loc168 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":111:30)
#loc169 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":111:17)
#loc170 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":115:17)
#loc171 = loc(fused[#loc1, #loc2])
#loc172 = loc(fused[#loc3, #loc4])
#loc173 = loc(fused[#loc5, #loc6])
#loc174 = loc(fused[#loc8, #loc9])
#loc175 = loc(fused[#loc10, #loc11])
#loc176 = loc(fused[#loc12, #loc13])
#loc177 = loc(fused[#loc14, #loc15])
#loc178 = loc(fused[#loc18, #loc16])
#loc179 = loc(fused[#loc19, #loc20])
#loc180 = loc(fused[#loc21, #loc22])
#loc181 = loc(fused[#loc25, #loc24])
#loc182 = loc(fused[#loc28, #loc26])
#loc183 = loc(fused[#loc29, #loc30])
#loc184 = loc(fused[#loc31, #loc32])
#loc185 = loc(fused[#loc34, #loc35])
#loc186 = loc(fused[#loc36, #loc37])
#loc187 = loc(fused[#loc38, #loc39])
#loc188 = loc(fused[#loc40, #loc41])
#loc189 = loc(fused[#loc42, #loc43, #loc44, #loc39])
#loc190 = loc(fused[#loc49, #loc50])
#loc191 = loc(fused[#loc51, #loc52])
#loc192 = loc(fused[#loc53, #loc54])
#loc193 = loc(fused[#loc55, #loc56])
#loc194 = loc(fused[#loc57, #loc58])
#loc195 = loc(fused[#loc63, #loc64])
#loc198 = loc(fused[#loc74, #loc75])
#loc199 = loc(fused[#loc78, #loc79])
#loc200 = loc(fused[#loc82, #loc81])
#loc201 = loc(fused[#loc83, #loc84])
#loc202 = loc(fused[#loc85, #loc86])
#loc203 = loc(fused[#loc87, #loc88])
#loc204 = loc(fused[#loc89, #loc90])
#loc205 = loc(fused[#loc93, #loc91])
#loc206 = loc(fused[#loc94, #loc95])
#loc207 = loc(fused[#loc96, #loc97])
#loc208 = loc(fused[#loc100, #loc99])
#loc209 = loc(fused[#loc103, #loc101])
#loc210 = loc(fused[#loc104, #loc105])
#loc211 = loc(fused[#loc106, #loc107])
#loc212 = loc(fused[#loc109, #loc110])
#loc213 = loc(fused[#loc111, #loc112])
#loc214 = loc(fused[#loc113, #loc114])
#loc215 = loc(fused[#loc115, #loc116])
#loc216 = loc(fused[#loc117, #loc118, #loc119, #loc114])
#loc217 = loc(fused[#loc126, #loc127])
#loc218 = loc(fused[#loc128, #loc129])
#loc219 = loc(fused[#loc130, #loc131])
#loc220 = loc(fused[#loc132, #loc133])
#loc221 = loc(fused[#loc136, #loc134])
#loc222 = loc(fused[#loc137, #loc138])
#loc223 = loc(fused[#loc139, #loc140])
#loc224 = loc(fused[#loc143, #loc142])
#loc225 = loc(fused[#loc146, #loc144])
#loc226 = loc(fused[#loc147, #loc148])
#loc227 = loc(fused[#loc149, #loc150])
#loc228 = loc(fused[#loc152, #loc153])
#loc229 = loc(fused[#loc154, #loc155])
#loc230 = loc(fused[#loc156, #loc157])
#loc231 = loc(fused[#loc158, #loc159])
#loc232 = loc(fused[#loc161, #loc163])
#loc233 = loc(fused[#loc164, #loc165, #loc166, #loc157])
