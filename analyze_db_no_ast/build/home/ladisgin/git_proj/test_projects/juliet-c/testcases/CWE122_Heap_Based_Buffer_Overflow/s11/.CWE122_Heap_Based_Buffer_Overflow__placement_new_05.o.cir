!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc7 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc74 = loc("../../../testcasesupport/std_testcase.h":68:7)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc305)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc306)
  cir.global "private"  internal dsolocal @_ZL10staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc307)
  cir.func linkonce_odr  @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc7)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc7)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc7)
    cir.return loc(#loc7)
  } loc(#loc7)
  cir.func private  @printIntLine(!s32i) loc(#loc308)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc309)
  cir.func  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_053badEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc311)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc312)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc313)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc20)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc314)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc315)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc312)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc26)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc317)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc28)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc30)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
      } loc(#loc318)
    } loc(#loc316)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc31)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc319)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc31)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc320)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc313)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc37)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc322)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc39)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc40)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc41)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc39)
      } loc(#loc323)
    } loc(#loc321)
    cir.scope {
      %11 = cir.get_global @_ZL10staticTrue : !cir.ptr<!s32i> loc(#loc307)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc44)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc44)
      cir.if %13 {
        %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
        cir.store %14, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc326)
      } loc(#loc325)
    } loc(#loc324)
    cir.scope {
      %11 = cir.get_global @_ZL10staticTrue : !cir.ptr<!s32i> loc(#loc307)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc50)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc50)
      cir.if %13 {
        cir.scope {
          %14 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc330)
          %15 = cir.const #cir.int<8> : !u64i loc(#loc331)
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc57)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc331)
          cir.call @_ZN12TwoIntsClassC2Ev(%18) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc55)
          cir.store %18, %14 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc330)
          %19 = cir.const #cir.int<5> : !s32i loc(#loc58)
          %20 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc59)
          %21 = cir.get_member %20[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc60)
          cir.store %19, %21 : !s32i, !cir.ptr<!s32i> loc(#loc332)
          %22 = cir.const #cir.int<10> : !s32i loc(#loc61)
          %23 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc62)
          %24 = cir.get_member %23[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc63)
          cir.store %22, %24 : !s32i, !cir.ptr<!s32i> loc(#loc333)
          %25 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc64)
          %26 = cir.get_member %25[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc60)
          %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc65)
          cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc66)
          %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc67)
          %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
          %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc68)
          cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc67)
        } loc(#loc329)
      } loc(#loc328)
    } loc(#loc327)
    cir.return loc(#loc13)
  } loc(#loc310)
  cir.global "private"  internal dsolocal @_ZL11staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc334)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc335)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc73)
  cir.func linkonce_odr  @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc74)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc74)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc74)
    cir.return loc(#loc74)
  } loc(#loc74)
  cir.func internal private  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_05L8goodB2G1Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc337)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc338)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc339)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc83)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc340)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc83)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc341)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc338)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc88)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc89)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc343)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc91)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc92)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc93)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc91)
      } loc(#loc344)
    } loc(#loc342)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc94)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc345)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc94)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc346)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc339)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc100)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc348)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc102)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc103)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc104)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc102)
      } loc(#loc349)
    } loc(#loc347)
    cir.scope {
      %11 = cir.get_global @_ZL10staticTrue : !cir.ptr<!s32i> loc(#loc307)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc107)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc107)
      cir.if %13 {
        %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc109)
        cir.store %14, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc352)
      } loc(#loc351)
    } loc(#loc350)
    cir.scope {
      %11 = cir.get_global @_ZL11staticFalse : !cir.ptr<!s32i> loc(#loc334)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc113)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc113)
      cir.if %13 {
        %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
        %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
        cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc117)
      } else {
        cir.scope {
          %14 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc356)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc357)
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc123)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc357)
          cir.call @_ZN11OneIntClassC2Ev(%18) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc121)
          cir.store %18, %14 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc356)
          %19 = cir.const #cir.int<5> : !s32i loc(#loc124)
          %20 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc125)
          %21 = cir.get_member %20[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc126)
          cir.store %19, %21 : !s32i, !cir.ptr<!s32i> loc(#loc358)
          %22 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc127)
          %23 = cir.get_member %22[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc126)
          %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc128)
          cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc129)
          %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc130)
          %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc131)
          cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc130)
        } loc(#loc355)
      } loc(#loc354)
    } loc(#loc353)
    cir.return loc(#loc76)
  } loc(#loc336)
  cir.func internal private  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_05L8goodB2G2Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc360)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc361)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc362)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc140)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc363)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc140)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc364)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc361)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc146)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc366)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc148)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc149)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc150)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc148)
      } loc(#loc367)
    } loc(#loc365)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc151)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc368)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc151)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc369)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc362)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc157)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc371)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc159)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc160)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc161)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc159)
      } loc(#loc372)
    } loc(#loc370)
    cir.scope {
      %11 = cir.get_global @_ZL10staticTrue : !cir.ptr<!s32i> loc(#loc307)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc164)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc164)
      cir.if %13 {
        %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc166)
        cir.store %14, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc375)
      } loc(#loc374)
    } loc(#loc373)
    cir.scope {
      %11 = cir.get_global @_ZL10staticTrue : !cir.ptr<!s32i> loc(#loc307)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc170)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc170)
      cir.if %13 {
        cir.scope {
          %14 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc379)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc380)
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc177)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc177)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc380)
          cir.call @_ZN11OneIntClassC2Ev(%18) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc175)
          cir.store %18, %14 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc379)
          %19 = cir.const #cir.int<5> : !s32i loc(#loc178)
          %20 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc179)
          %21 = cir.get_member %20[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc126)
          cir.store %19, %21 : !s32i, !cir.ptr<!s32i> loc(#loc381)
          %22 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc180)
          %23 = cir.get_member %22[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc126)
          %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc181)
          cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc182)
          %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc183)
          %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc184)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc184)
          cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc183)
        } loc(#loc378)
      } loc(#loc377)
    } loc(#loc376)
    cir.return loc(#loc133)
  } loc(#loc359)
  cir.func internal private  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_05L8goodG2B1Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc383)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc384)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc385)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc193)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc386)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc193)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc387)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc384)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc198)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc199)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc389)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc201)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc202)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc203)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc201)
      } loc(#loc390)
    } loc(#loc388)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc204)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc391)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc204)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc392)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc385)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc209)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc210)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc394)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc212)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc213)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc214)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc212)
      } loc(#loc395)
    } loc(#loc393)
    cir.scope {
      %11 = cir.get_global @_ZL11staticFalse : !cir.ptr<!s32i> loc(#loc334)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc217)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc217)
      cir.if %13 {
        %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc221)
        %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc221)
        cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc222)
      } else {
        %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc223)
        cir.store %14, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc398)
      } loc(#loc397)
    } loc(#loc396)
    cir.scope {
      %11 = cir.get_global @_ZL10staticTrue : !cir.ptr<!s32i> loc(#loc307)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc227)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc227)
      cir.if %13 {
        cir.scope {
          %14 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc402)
          %15 = cir.const #cir.int<8> : !u64i loc(#loc403)
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc234)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc234)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc403)
          cir.call @_ZN12TwoIntsClassC2Ev(%18) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc232)
          cir.store %18, %14 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc402)
          %19 = cir.const #cir.int<5> : !s32i loc(#loc235)
          %20 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc236)
          %21 = cir.get_member %20[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc60)
          cir.store %19, %21 : !s32i, !cir.ptr<!s32i> loc(#loc404)
          %22 = cir.const #cir.int<10> : !s32i loc(#loc237)
          %23 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc238)
          %24 = cir.get_member %23[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc63)
          cir.store %22, %24 : !s32i, !cir.ptr<!s32i> loc(#loc405)
          %25 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc239)
          %26 = cir.get_member %25[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc60)
          %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc240)
          cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc241)
          %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc242)
          %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc243)
          %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc243)
          cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc242)
        } loc(#loc401)
      } loc(#loc400)
    } loc(#loc399)
    cir.return loc(#loc186)
  } loc(#loc382)
  cir.func internal private  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_05L8goodG2B2Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc407)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc408)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc409)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc252)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc410)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc252)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc411)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc408)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc257)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc258)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc413)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc260)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc261)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc262)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc260)
      } loc(#loc414)
    } loc(#loc412)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc263)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc415)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc263)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc416)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc409)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc268)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc269)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc418)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc271)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc272)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc273)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc271)
      } loc(#loc419)
    } loc(#loc417)
    cir.scope {
      %11 = cir.get_global @_ZL10staticTrue : !cir.ptr<!s32i> loc(#loc307)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc276)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc276)
      cir.if %13 {
        %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc278)
        cir.store %14, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc422)
      } loc(#loc421)
    } loc(#loc420)
    cir.scope {
      %11 = cir.get_global @_ZL10staticTrue : !cir.ptr<!s32i> loc(#loc307)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc282)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc282)
      cir.if %13 {
        cir.scope {
          %14 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc426)
          %15 = cir.const #cir.int<8> : !u64i loc(#loc427)
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc289)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc289)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc427)
          cir.call @_ZN12TwoIntsClassC2Ev(%18) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc287)
          cir.store %18, %14 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc426)
          %19 = cir.const #cir.int<5> : !s32i loc(#loc290)
          %20 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc291)
          %21 = cir.get_member %20[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc60)
          cir.store %19, %21 : !s32i, !cir.ptr<!s32i> loc(#loc428)
          %22 = cir.const #cir.int<10> : !s32i loc(#loc292)
          %23 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc293)
          %24 = cir.get_member %23[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc63)
          cir.store %22, %24 : !s32i, !cir.ptr<!s32i> loc(#loc429)
          %25 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc294)
          %26 = cir.get_member %25[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc60)
          %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc295)
          cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc296)
          %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc297)
          %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc298)
          %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc298)
          cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc297)
        } loc(#loc425)
      } loc(#loc424)
    } loc(#loc423)
    cir.return loc(#loc245)
  } loc(#loc406)
  cir.func  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_054goodEv() extra(#fn_attr2) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_05L8goodB2G1Ev() : () -> () loc(#loc301)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_05L8goodB2G2Ev() : () -> () loc(#loc302)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_05L8goodG2B1Ev() : () -> () loc(#loc303)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_05L8goodG2B2Ev() : () -> () loc(#loc304)
    cir.return loc(#loc300)
  } loc(#loc430)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":23:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":23:25)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":31:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":60:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":33:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":33:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":34:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":34:62)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":36:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":36:64)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":34:36)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":34:43)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":34:61)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":35:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":35:42)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":35:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":35:26)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":35:32)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":35:33)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":35:39)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":35:38)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":36:37)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":36:44)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":36:63)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":37:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":37:43)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":37:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":37:27)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":37:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":37:34)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":37:40)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":37:39)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":38:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":42:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":38:8)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":39:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":41:16)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":41:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":43:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":59:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":43:8)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":44:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":45:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":58:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":51:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":51:49)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":51:39)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":51:43)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":53:32)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":53:13)
#loc60 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":54:32)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":54:13)
#loc63 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":55:26)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":55:36)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":55:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":57:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":57:18)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":24:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":24:26)
#loc71 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc72 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":82:19)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":67:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":99:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":69:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":69:12)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":70:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":70:62)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":72:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":72:64)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":70:36)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":70:43)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":70:61)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":71:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":71:42)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":71:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":71:26)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":71:32)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":71:33)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":71:39)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":71:38)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":72:37)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":72:44)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":72:63)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":73:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":73:43)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":73:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":73:27)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":73:33)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":73:34)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":73:40)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":73:39)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":74:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":78:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":74:8)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":75:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":77:16)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":77:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":79:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":98:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":79:8)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":80:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":83:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":85:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":82:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":86:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":97:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":92:13)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":92:48)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":92:38)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":92:42)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":94:32)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":94:13)
#loc126 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":95:26)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":95:36)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":95:13)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":96:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":96:18)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":102:1)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":129:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":104:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":104:12)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":105:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":105:62)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":107:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":107:64)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":105:36)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":105:43)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":105:61)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":106:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":106:42)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":106:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":106:26)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":106:32)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":106:33)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":106:39)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":106:38)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":107:37)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":107:44)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":107:63)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":108:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":108:43)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":108:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":108:27)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":108:33)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":108:34)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":108:40)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":108:39)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":109:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":113:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":109:8)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":110:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":112:16)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":112:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":114:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":128:5)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":114:8)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":115:5)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":116:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":127:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":122:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":122:48)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":122:38)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":122:42)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":124:32)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":124:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":125:26)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":125:36)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":125:13)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":126:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":126:18)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":132:1)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":166:1)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":134:5)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":134:12)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":135:5)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":135:62)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":137:5)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":137:64)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":135:36)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":135:43)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":135:61)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":136:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":136:42)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":136:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":136:26)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":136:32)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":136:33)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":136:39)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":136:38)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":137:37)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":137:44)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":137:63)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":138:5)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":138:43)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":138:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":138:27)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":138:33)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":138:34)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":138:40)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":138:39)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":139:5)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":148:5)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":139:8)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":140:5)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":143:5)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":145:5)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":142:19)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":142:9)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":147:16)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":147:9)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":149:5)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":165:5)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":149:8)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":150:5)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":151:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":164:9)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":157:13)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":157:49)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":157:39)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":157:43)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":159:32)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":159:13)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":160:32)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":160:13)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":161:26)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":161:36)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":161:13)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":163:13)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":163:18)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":169:1)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":198:1)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":171:5)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":171:12)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":172:5)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":172:62)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":174:5)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":174:64)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":172:36)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":172:43)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":172:61)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":173:5)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":173:42)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":173:9)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":173:26)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":173:32)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":173:33)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":173:39)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":173:38)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":174:37)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":174:44)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":174:63)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":175:5)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":175:43)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":175:9)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":175:27)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":175:33)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":175:34)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":175:40)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":175:39)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":176:5)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":180:5)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":176:8)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":177:5)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":179:16)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":179:9)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":181:5)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":197:5)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":181:8)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":182:5)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":183:9)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":196:9)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":189:13)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":189:49)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":189:39)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":189:43)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":191:32)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":191:13)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":192:32)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":192:13)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":193:26)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":193:36)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":193:13)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":195:13)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":195:18)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":200:1)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":206:1)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":202:5)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":203:5)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":204:5)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":205:5)
#loc305 = loc(fused[#loc1, #loc2])
#loc306 = loc(fused[#loc3, #loc4])
#loc307 = loc(fused[#loc5, #loc6])
#loc308 = loc(fused[#loc8, #loc9])
#loc309 = loc(fused[#loc10, #loc11])
#loc310 = loc(fused[#loc12, #loc13])
#loc311 = loc(fused[#loc14, #loc15])
#loc312 = loc(fused[#loc16, #loc17])
#loc313 = loc(fused[#loc18, #loc19])
#loc314 = loc(fused[#loc21, #loc22])
#loc315 = loc(fused[#loc20, #loc17])
#loc316 = loc(fused[#loc23, #loc24])
#loc317 = loc(fused[#loc25, #loc26])
#loc318 = loc(fused[#loc27, #loc24])
#loc319 = loc(fused[#loc32, #loc33])
#loc320 = loc(fused[#loc31, #loc19])
#loc321 = loc(fused[#loc34, #loc35])
#loc322 = loc(fused[#loc36, #loc37])
#loc323 = loc(fused[#loc38, #loc35])
#loc324 = loc(fused[#loc42, #loc43])
#loc325 = loc(fused[#loc45, #loc43])
#loc326 = loc(fused[#loc47, #loc46])
#loc327 = loc(fused[#loc48, #loc49])
#loc328 = loc(fused[#loc51, #loc49])
#loc329 = loc(fused[#loc52, #loc53])
#loc330 = loc(fused[#loc54, #loc55])
#loc331 = loc(fused[#loc56, #loc55])
#loc332 = loc(fused[#loc59, #loc58])
#loc333 = loc(fused[#loc62, #loc61])
#loc334 = loc(fused[#loc69, #loc70])
#loc335 = loc(fused[#loc71, #loc72])
#loc336 = loc(fused[#loc75, #loc76])
#loc337 = loc(fused[#loc77, #loc78])
#loc338 = loc(fused[#loc79, #loc80])
#loc339 = loc(fused[#loc81, #loc82])
#loc340 = loc(fused[#loc84, #loc85])
#loc341 = loc(fused[#loc83, #loc80])
#loc342 = loc(fused[#loc86, #loc87])
#loc343 = loc(fused[#loc88, #loc89])
#loc344 = loc(fused[#loc90, #loc87])
#loc345 = loc(fused[#loc95, #loc96])
#loc346 = loc(fused[#loc94, #loc82])
#loc347 = loc(fused[#loc97, #loc98])
#loc348 = loc(fused[#loc99, #loc100])
#loc349 = loc(fused[#loc101, #loc98])
#loc350 = loc(fused[#loc105, #loc106])
#loc351 = loc(fused[#loc108, #loc106])
#loc352 = loc(fused[#loc110, #loc109])
#loc353 = loc(fused[#loc111, #loc112])
#loc354 = loc(fused[#loc114, #loc115, #loc116, #loc112])
#loc355 = loc(fused[#loc118, #loc119])
#loc356 = loc(fused[#loc120, #loc121])
#loc357 = loc(fused[#loc122, #loc121])
#loc358 = loc(fused[#loc125, #loc124])
#loc359 = loc(fused[#loc132, #loc133])
#loc360 = loc(fused[#loc134, #loc135])
#loc361 = loc(fused[#loc136, #loc137])
#loc362 = loc(fused[#loc138, #loc139])
#loc363 = loc(fused[#loc141, #loc142])
#loc364 = loc(fused[#loc140, #loc137])
#loc365 = loc(fused[#loc143, #loc144])
#loc366 = loc(fused[#loc145, #loc146])
#loc367 = loc(fused[#loc147, #loc144])
#loc368 = loc(fused[#loc152, #loc153])
#loc369 = loc(fused[#loc151, #loc139])
#loc370 = loc(fused[#loc154, #loc155])
#loc371 = loc(fused[#loc156, #loc157])
#loc372 = loc(fused[#loc158, #loc155])
#loc373 = loc(fused[#loc162, #loc163])
#loc374 = loc(fused[#loc165, #loc163])
#loc375 = loc(fused[#loc167, #loc166])
#loc376 = loc(fused[#loc168, #loc169])
#loc377 = loc(fused[#loc171, #loc169])
#loc378 = loc(fused[#loc172, #loc173])
#loc379 = loc(fused[#loc174, #loc175])
#loc380 = loc(fused[#loc176, #loc175])
#loc381 = loc(fused[#loc179, #loc178])
#loc382 = loc(fused[#loc185, #loc186])
#loc383 = loc(fused[#loc187, #loc188])
#loc384 = loc(fused[#loc189, #loc190])
#loc385 = loc(fused[#loc191, #loc192])
#loc386 = loc(fused[#loc194, #loc195])
#loc387 = loc(fused[#loc193, #loc190])
#loc388 = loc(fused[#loc196, #loc197])
#loc389 = loc(fused[#loc198, #loc199])
#loc390 = loc(fused[#loc200, #loc197])
#loc391 = loc(fused[#loc205, #loc206])
#loc392 = loc(fused[#loc204, #loc192])
#loc393 = loc(fused[#loc207, #loc208])
#loc394 = loc(fused[#loc209, #loc210])
#loc395 = loc(fused[#loc211, #loc208])
#loc396 = loc(fused[#loc215, #loc216])
#loc397 = loc(fused[#loc218, #loc219, #loc220, #loc216])
#loc398 = loc(fused[#loc224, #loc223])
#loc399 = loc(fused[#loc225, #loc226])
#loc400 = loc(fused[#loc228, #loc226])
#loc401 = loc(fused[#loc229, #loc230])
#loc402 = loc(fused[#loc231, #loc232])
#loc403 = loc(fused[#loc233, #loc232])
#loc404 = loc(fused[#loc236, #loc235])
#loc405 = loc(fused[#loc238, #loc237])
#loc406 = loc(fused[#loc244, #loc245])
#loc407 = loc(fused[#loc246, #loc247])
#loc408 = loc(fused[#loc248, #loc249])
#loc409 = loc(fused[#loc250, #loc251])
#loc410 = loc(fused[#loc253, #loc254])
#loc411 = loc(fused[#loc252, #loc249])
#loc412 = loc(fused[#loc255, #loc256])
#loc413 = loc(fused[#loc257, #loc258])
#loc414 = loc(fused[#loc259, #loc256])
#loc415 = loc(fused[#loc264, #loc265])
#loc416 = loc(fused[#loc263, #loc251])
#loc417 = loc(fused[#loc266, #loc267])
#loc418 = loc(fused[#loc268, #loc269])
#loc419 = loc(fused[#loc270, #loc267])
#loc420 = loc(fused[#loc274, #loc275])
#loc421 = loc(fused[#loc277, #loc275])
#loc422 = loc(fused[#loc279, #loc278])
#loc423 = loc(fused[#loc280, #loc281])
#loc424 = loc(fused[#loc283, #loc281])
#loc425 = loc(fused[#loc284, #loc285])
#loc426 = loc(fused[#loc286, #loc287])
#loc427 = loc(fused[#loc288, #loc287])
#loc428 = loc(fused[#loc291, #loc290])
#loc429 = loc(fused[#loc293, #loc292])
#loc430 = loc(fused[#loc299, #loc300])
