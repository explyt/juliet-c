!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":25:23)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":25:32)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":28:21)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":48:27)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":48:36)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":67:27)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":67:36)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":70:21)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":109:10)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":109:14)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":109:20)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":109:32)
#loc109 = loc(fused[#loc5, #loc6])
#loc118 = loc(fused[#loc28, #loc29])
#loc126 = loc(fused[#loc49, #loc50])
#loc140 = loc(fused[#loc91, #loc92])
#loc141 = loc(fused[#loc93, #loc94])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_add_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc107)
  cir.func internal private @_ZN44CWE190_Integer_Overflow__int64_t_rand_add_43L9badSourceERl(%arg0: !cir.ptr<!s64i> loc(fused[#loc5, #loc6])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc109)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc7)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc8)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc8)
    cir.brcond %4 ^bb1, ^bb2 loc(#loc8)
  ^bb1:  // pred: ^bb0
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc8)
    %7 = cir.const #cir.int<60> : !s32i loc(#loc8)
    %8 = cir.shift(left, %6 : !u64i, %7 : !s32i) -> !u64i loc(#loc8)
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc8)
    %11 = cir.const #cir.int<45> : !s32i loc(#loc8)
    %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc8)
    %13 = cir.binop(xor, %8, %12) : !u64i loc(#loc8)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc8)
    %16 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc8)
    %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc8)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc8)
    %21 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc8)
    %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc8)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc8)
    %26 = cir.binop(xor, %23, %25) : !u64i loc(#loc8)
    cir.br ^bb3(%26 : !u64i) loc(#loc8)
  ^bb2:  // pred: ^bb0
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc8)
    %29 = cir.const #cir.int<60> : !s32i loc(#loc8)
    %30 = cir.shift(left, %28 : !u64i, %29 : !s32i) -> !u64i loc(#loc8)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc8)
    %33 = cir.const #cir.int<45> : !s32i loc(#loc8)
    %34 = cir.shift(left, %32 : !u64i, %33 : !s32i) -> !u64i loc(#loc8)
    %35 = cir.binop(xor, %30, %34) : !u64i loc(#loc8)
    %36 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc8)
    %38 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %39 = cir.shift(left, %37 : !u64i, %38 : !s32i) -> !u64i loc(#loc8)
    %40 = cir.binop(xor, %35, %39) : !u64i loc(#loc8)
    %41 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc8)
    %43 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %44 = cir.shift(left, %42 : !u64i, %43 : !s32i) -> !u64i loc(#loc8)
    %45 = cir.binop(xor, %40, %44) : !u64i loc(#loc8)
    %46 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc8)
    %48 = cir.binop(xor, %45, %47) : !u64i loc(#loc8)
    %49 = cir.unary(minus, %48) : !u64i, !u64i loc(#loc8)
    %50 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc8)
    %52 = cir.binop(sub, %49, %51) : !u64i loc(#loc8)
    cir.br ^bb3(%52 : !u64i) loc(#loc8)
  ^bb3(%53: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":28:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc8)
  ^bb4:  // pred: ^bb3
    %54 = cir.cast(integral, %53 : !u64i), !s64i loc(#loc8)
    %55 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc9)
    cir.store %54, %55 : !s64i, !cir.ptr<!s64i> loc(#loc110)
    cir.return loc(#loc4)
  } loc(#loc108)
  cir.func private @printLongLongLine(!s64i) loc(#loc111)
  cir.func @_ZN44CWE190_Integer_Overflow__int64_t_rand_add_433badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc113)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc114)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc18)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc115)
    cir.call @_ZN44CWE190_Integer_Overflow__int64_t_rand_add_43L9badSourceERl(%1) : (!cir.ptr<!s64i>) -> () loc(#loc20)
    cir.br ^bb1 loc(#loc116)
  ^bb1:  // pred: ^bb0
    %3 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc23)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc15)
    %6 = cir.binop(add, %3, %5) nsw : !s64i loc(#loc23)
    cir.store %6, %0 : !s64i, !cir.ptr<!s64i> loc(#loc113)
    %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc24)
    cir.call @printLongLongLine(%7) : (!s64i) -> () loc(#loc25)
    cir.br ^bb2 loc(#loc22)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc13)
  } loc(#loc112)
  cir.func internal private @_ZN44CWE190_Integer_Overflow__int64_t_rand_add_43L13goodG2BSourceERl(%arg0: !cir.ptr<!s64i> loc(fused[#loc28, #loc29])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc118)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc30)
    %1 = cir.const #cir.int<2> : !s32i loc(#loc31)
    %2 = cir.cast(integral, %1 : !s32i), !s64i loc(#loc31)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc32)
    cir.store %2, %3 : !s64i, !cir.ptr<!s64i> loc(#loc119)
    cir.return loc(#loc27)
  } loc(#loc117)
  cir.func internal private @_ZN44CWE190_Integer_Overflow__int64_t_rand_add_43L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc121)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc122)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc39)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc123)
    cir.call @_ZN44CWE190_Integer_Overflow__int64_t_rand_add_43L13goodG2BSourceERl(%1) : (!cir.ptr<!s64i>) -> () loc(#loc41)
    cir.br ^bb1 loc(#loc124)
  ^bb1:  // pred: ^bb0
    %3 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc44)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc36)
    %6 = cir.binop(add, %3, %5) nsw : !s64i loc(#loc44)
    cir.store %6, %0 : !s64i, !cir.ptr<!s64i> loc(#loc121)
    %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc45)
    cir.call @printLongLongLine(%7) : (!s64i) -> () loc(#loc46)
    cir.br ^bb2 loc(#loc43)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc34)
  } loc(#loc120)
  cir.func internal private @_ZN44CWE190_Integer_Overflow__int64_t_rand_add_43L13goodB2GSourceERl(%arg0: !cir.ptr<!s64i> loc(fused[#loc49, #loc50])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc126)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc51)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc52)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc52)
    cir.brcond %4 ^bb1, ^bb2 loc(#loc52)
  ^bb1:  // pred: ^bb0
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc52)
    %7 = cir.const #cir.int<60> : !s32i loc(#loc52)
    %8 = cir.shift(left, %6 : !u64i, %7 : !s32i) -> !u64i loc(#loc52)
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc52)
    %11 = cir.const #cir.int<45> : !s32i loc(#loc52)
    %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc52)
    %13 = cir.binop(xor, %8, %12) : !u64i loc(#loc52)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc52)
    %16 = cir.const #cir.int<30> : !s32i loc(#loc52)
    %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc52)
    %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc52)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc52)
    %21 = cir.const #cir.int<15> : !s32i loc(#loc52)
    %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc52)
    %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc52)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc52)
    %26 = cir.binop(xor, %23, %25) : !u64i loc(#loc52)
    cir.br ^bb3(%26 : !u64i) loc(#loc52)
  ^bb2:  // pred: ^bb0
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc52)
    %29 = cir.const #cir.int<60> : !s32i loc(#loc52)
    %30 = cir.shift(left, %28 : !u64i, %29 : !s32i) -> !u64i loc(#loc52)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc52)
    %33 = cir.const #cir.int<45> : !s32i loc(#loc52)
    %34 = cir.shift(left, %32 : !u64i, %33 : !s32i) -> !u64i loc(#loc52)
    %35 = cir.binop(xor, %30, %34) : !u64i loc(#loc52)
    %36 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc52)
    %38 = cir.const #cir.int<30> : !s32i loc(#loc52)
    %39 = cir.shift(left, %37 : !u64i, %38 : !s32i) -> !u64i loc(#loc52)
    %40 = cir.binop(xor, %35, %39) : !u64i loc(#loc52)
    %41 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc52)
    %43 = cir.const #cir.int<15> : !s32i loc(#loc52)
    %44 = cir.shift(left, %42 : !u64i, %43 : !s32i) -> !u64i loc(#loc52)
    %45 = cir.binop(xor, %40, %44) : !u64i loc(#loc52)
    %46 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc52)
    %48 = cir.binop(xor, %45, %47) : !u64i loc(#loc52)
    %49 = cir.unary(minus, %48) : !u64i, !u64i loc(#loc52)
    %50 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc52)
    %52 = cir.binop(sub, %49, %51) : !u64i loc(#loc52)
    cir.br ^bb3(%52 : !u64i) loc(#loc52)
  ^bb3(%53: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":70:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc52)
  ^bb4:  // pred: ^bb3
    %54 = cir.cast(integral, %53 : !u64i), !s64i loc(#loc52)
    %55 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc53)
    cir.store %54, %55 : !s64i, !cir.ptr<!s64i> loc(#loc127)
    cir.return loc(#loc48)
  } loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc54)
  cir.func internal private @_ZN44CWE190_Integer_Overflow__int64_t_rand_add_43L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc129)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc130)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc61)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc131)
    cir.call @_ZN44CWE190_Integer_Overflow__int64_t_rand_add_43L13goodB2GSourceERl(%1) : (!cir.ptr<!s64i>) -> () loc(#loc63)
    cir.br ^bb1 loc(#loc132)
  ^bb1:  // pred: ^bb0
    %3 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc66)
    %4 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc67)
    %5 = cir.cmp(lt, %3, %4) : !s64i, !cir.bool loc(#loc133)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc134)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc71)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc58)
    %9 = cir.binop(add, %6, %8) nsw : !s64i loc(#loc71)
    cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc129)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc72)
    cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc73)
    cir.br ^bb4 loc(#loc69)
  ^bb3:  // pred: ^bb1
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc54)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    cir.br ^bb4 loc(#loc65)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc65)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc56)
  } loc(#loc128)
  cir.func @_ZN44CWE190_Integer_Overflow__int64_t_rand_add_434goodEv() extra(#fn_attr1) {
    cir.call @_ZN44CWE190_Integer_Overflow__int64_t_rand_add_43L7goodG2BEv() : () -> () loc(#loc77)
    cir.call @_ZN44CWE190_Integer_Overflow__int64_t_rand_add_43L7goodB2GEv() : () -> () loc(#loc78)
    cir.return loc(#loc76)
  } loc(#loc135)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc136)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc137)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc138)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc85)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc86)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc87)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc88)
  cir.func @main(%arg0: !s32i loc(fused[#loc91, #loc92]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc93, #loc94])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc140)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc141)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc90)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc95)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc96)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc97)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc97)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc98)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc85)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc85)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    cir.call @_ZN44CWE190_Integer_Overflow__int64_t_rand_add_434goodEv() : () -> () loc(#loc100)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc86)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc86)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc87)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc87)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    cir.call @_ZN44CWE190_Integer_Overflow__int64_t_rand_add_433badEv() : () -> () loc(#loc103)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc88)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc88)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc105)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    cir.return %15 : !s32i loc(#loc142)
  } loc(#loc139)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":25:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":29:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":26:1)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":28:5)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":31:1)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":41:1)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":38:9)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":38:33)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":33:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":33:13)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":34:12)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":34:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":35:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":36:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":40:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":38:26)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":39:27)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":39:9)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":48:1)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":52:1)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":49:1)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":51:12)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":51:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":54:1)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":64:1)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":61:9)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":61:33)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":56:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":56:13)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":57:12)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":57:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":58:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":59:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":63:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":61:26)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":62:27)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":62:9)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":67:1)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":71:1)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":68:1)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":70:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":86:19)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":73:1)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":88:1)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":81:9)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":81:33)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":75:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":75:13)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":76:12)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":76:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":77:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":79:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":87:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":79:9)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":79:16)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":80:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":83:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":85:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":81:26)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":82:27)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":82:9)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":86:9)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":90:1)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":94:1)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":92:5)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":93:5)
#loc79 = loc("/usr/include/stdlib.h":575:1)
#loc80 = loc("/usr/include/stdlib.h":575:41)
#loc81 = loc("/usr/include/time.h":76:1)
#loc82 = loc("/usr/include/time.h":76:38)
#loc83 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc84 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":114:15)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":116:15)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":119:15)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":121:15)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":109:1)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":124:1)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":110:1)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":112:27)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":112:22)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":112:5)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":114:5)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":115:5)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":116:5)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":119:5)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":120:5)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":121:5)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":123:12)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_add_43.cpp":123:5)
#loc107 = loc(fused[#loc1, #loc2])
#loc108 = loc(fused[#loc3, #loc4])
#loc110 = loc(fused[#loc9, #loc8])
#loc111 = loc(fused[#loc10, #loc11])
#loc112 = loc(fused[#loc12, #loc13])
#loc113 = loc(fused[#loc14, #loc15])
#loc114 = loc(fused[#loc16, #loc17])
#loc115 = loc(fused[#loc19, #loc18])
#loc116 = loc(fused[#loc21, #loc22])
#loc117 = loc(fused[#loc26, #loc27])
#loc119 = loc(fused[#loc32, #loc31])
#loc120 = loc(fused[#loc33, #loc34])
#loc121 = loc(fused[#loc35, #loc36])
#loc122 = loc(fused[#loc37, #loc38])
#loc123 = loc(fused[#loc40, #loc39])
#loc124 = loc(fused[#loc42, #loc43])
#loc125 = loc(fused[#loc47, #loc48])
#loc127 = loc(fused[#loc53, #loc52])
#loc128 = loc(fused[#loc55, #loc56])
#loc129 = loc(fused[#loc57, #loc58])
#loc130 = loc(fused[#loc59, #loc60])
#loc131 = loc(fused[#loc62, #loc61])
#loc132 = loc(fused[#loc64, #loc65])
#loc133 = loc(fused[#loc66, #loc67])
#loc134 = loc(fused[#loc68, #loc69, #loc70, #loc65])
#loc135 = loc(fused[#loc75, #loc76])
#loc136 = loc(fused[#loc79, #loc80])
#loc137 = loc(fused[#loc81, #loc82])
#loc138 = loc(fused[#loc83, #loc84])
#loc139 = loc(fused[#loc89, #loc90])
#loc142 = loc(fused[#loc106, #loc105])
