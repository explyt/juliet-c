!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_while_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc77)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_while_10_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc77)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc10)
      cir.if %2 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc83)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc15)
          cir.store %6, %5 : !s32i, !cir.ptr<!s32i> loc(#loc83)
          cir.scope {
            cir.while {
              %7 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc18)
              %8 = cir.unary(inc, %7) nsw : !s32i, !s32i loc(#loc19)
              cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc85)
              %9 = cir.const #cir.int<10> : !s32i loc(#loc20)
              %10 = cir.cmp(lt, %7, %9) : !s32i, !cir.bool loc(#loc86)
              cir.condition(%10) loc(#loc21)
            } do {
              cir.yield loc(#loc17)
            } loc(#loc84)
          } loc(#loc84)
        } loc(#loc82)
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc5)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc5)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc22)
      } loc(#loc81)
    } loc(#loc80)
    cir.return loc(#loc7)
  } loc(#loc79)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_while_10_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc88)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc25)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc89)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc27)
    cir.return loc(#loc24)
  } loc(#loc87)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc31)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Inside the while statement\00" : !cir.array<!s8i x 27>> : !cir.array<!s8i x 27> {alignment = 1 : i64} loc(#loc32)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc33)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc90)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc38)
      cir.if %2 {
        %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc31)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc31)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc42)
      } else {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc95)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc46)
          cir.store %6, %5 : !s32i, !cir.ptr<!s32i> loc(#loc95)
          cir.scope {
            cir.while {
              %7 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc49)
              %8 = cir.unary(inc, %7) nsw : !s32i, !s32i loc(#loc50)
              cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc97)
              %9 = cir.const #cir.int<10> : !s32i loc(#loc51)
              %10 = cir.cmp(lt, %7, %9) : !s32i, !cir.bool loc(#loc98)
              cir.condition(%10) loc(#loc52)
            } do {
              cir.scope {
                %7 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 27>> loc(#loc32)
                %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 27>>), !cir.ptr<!s8i> loc(#loc32)
                cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc54)
              } loc(#loc99)
              cir.yield loc(#loc48)
            } loc(#loc96)
          } loc(#loc96)
        } loc(#loc94)
        %3 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc33)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc33)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc55)
      } loc(#loc93)
    } loc(#loc92)
    cir.return loc(#loc35)
  } loc(#loc91)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc77)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc60)
      cir.if %2 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc104)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc65)
          cir.store %6, %5 : !s32i, !cir.ptr<!s32i> loc(#loc104)
          cir.scope {
            cir.while {
              %7 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc68)
              %8 = cir.unary(inc, %7) nsw : !s32i, !s32i loc(#loc69)
              cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc106)
              %9 = cir.const #cir.int<10> : !s32i loc(#loc70)
              %10 = cir.cmp(lt, %7, %9) : !s32i, !cir.bool loc(#loc107)
              cir.condition(%10) loc(#loc71)
            } do {
              cir.scope {
                %7 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 27>> loc(#loc73)
                %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 27>>), !cir.ptr<!s8i> loc(#loc73)
                cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc74)
              } loc(#loc108)
              cir.yield loc(#loc67)
            } loc(#loc105)
          } loc(#loc105)
        } loc(#loc103)
        %3 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc75)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc75)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc76)
      } loc(#loc102)
    } loc(#loc101)
    cir.return loc(#loc57)
  } loc(#loc100)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_while_10.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":31:19)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":20:1)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":33:1)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":22:5)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":32:5)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":22:8)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":23:5)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":25:9)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":30:9)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":26:13)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":26:21)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":27:13)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":29:13)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":27:20)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":27:19)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":27:25)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":27:23)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":31:9)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":78:1)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":82:1)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":80:5)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":80:11)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":81:5)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":81:11)
#loc29 = loc("../../testcasesupport/std_testcase.h":117:1)
#loc30 = loc("../../testcasesupport/std_testcase.h":117:12)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":45:19)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":54:27)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":57:19)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":40:1)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":59:1)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":42:5)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":58:5)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":42:8)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":43:5)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":46:5)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":48:5)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":45:9)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":50:9)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":56:9)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":51:13)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":51:21)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":52:13)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":55:13)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":52:20)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":52:19)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":52:25)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":52:23)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":53:13)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":54:17)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":57:9)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":62:1)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":76:1)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":64:5)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":75:5)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":64:8)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":65:5)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":67:9)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":73:9)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":68:13)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":68:21)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":69:13)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":72:13)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":69:20)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":69:19)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":69:25)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":69:23)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":70:13)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":71:27)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":71:17)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":74:19)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_while_10.c":74:9)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc3, #loc4])
#loc79 = loc(fused[#loc6, #loc7])
#loc80 = loc(fused[#loc8, #loc9])
#loc81 = loc(fused[#loc11, #loc9])
#loc82 = loc(fused[#loc12, #loc13])
#loc83 = loc(fused[#loc14, #loc15])
#loc84 = loc(fused[#loc16, #loc17])
#loc85 = loc(fused[#loc19, #loc18])
#loc86 = loc(fused[#loc19, #loc20])
#loc87 = loc(fused[#loc23, #loc24])
#loc88 = loc(fused[#loc25, #loc26])
#loc89 = loc(fused[#loc27, #loc28])
#loc90 = loc(fused[#loc29, #loc30])
#loc91 = loc(fused[#loc34, #loc35])
#loc92 = loc(fused[#loc36, #loc37])
#loc93 = loc(fused[#loc39, #loc40, #loc41, #loc37])
#loc94 = loc(fused[#loc43, #loc44])
#loc95 = loc(fused[#loc45, #loc46])
#loc96 = loc(fused[#loc47, #loc48])
#loc97 = loc(fused[#loc50, #loc49])
#loc98 = loc(fused[#loc50, #loc51])
#loc99 = loc(fused[#loc53, #loc48])
#loc100 = loc(fused[#loc56, #loc57])
#loc101 = loc(fused[#loc58, #loc59])
#loc102 = loc(fused[#loc61, #loc59])
#loc103 = loc(fused[#loc62, #loc63])
#loc104 = loc(fused[#loc64, #loc65])
#loc105 = loc(fused[#loc66, #loc67])
#loc106 = loc(fused[#loc69, #loc68])
#loc107 = loc(fused[#loc69, #loc70])
#loc108 = loc(fused[#loc72, #loc67])
