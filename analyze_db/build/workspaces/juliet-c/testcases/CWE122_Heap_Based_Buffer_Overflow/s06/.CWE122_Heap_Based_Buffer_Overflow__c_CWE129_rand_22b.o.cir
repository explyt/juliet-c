!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":25:66)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":25:70)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":68:71)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":68:75)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":87:27)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":106:71)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":106:75)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":120:27)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":139:70)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":139:74)
#true = #cir.bool<true> : !cir.bool
#loc318 = loc(fused[#loc16, #loc17])
#loc347 = loc(fused[#loc89, #loc90])
#loc377 = loc(fused[#loc167, #loc168])
#loc407 = loc(fused[#loc243, #loc244])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_badGlobal : !s32i {alignment = 4 : i64} loc(#loc311)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc312)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc313)
  cir.func private @printIntLine(!s32i) loc(#loc314)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc315)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc11)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc316)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_badSink(%arg0: !s32i loc(fused[#loc16, #loc17])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc319)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc320)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc318)
    cir.store %arg0, %2 : !s32i, !cir.ptr<!s32i> loc(#loc22)
    cir.br ^bb1 loc(#loc321)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_badGlobal : !cir.ptr<!s32i> loc(#loc311)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc25)
    cir.brcond %5 ^bb2, ^bb30 loc(#loc322)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc323)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc29)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc30)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc30)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc324)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc325)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc29)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc326)
    cir.store %12, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc320)
    cir.br ^bb4 loc(#loc327)
  ^bb4:  // pred: ^bb3
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc36)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc328)
    cir.brcond %16 ^bb5, ^bb6 loc(#loc329)
  ^bb5:  // pred: ^bb4
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc38)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc40)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc38)
    cir.br ^bb6 loc(#loc34)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc34)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc330)
  ^bb8:  // pred: ^bb7
    %20 = cir.const #cir.int<0> : !s32i loc(#loc43)
    cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc331)
    cir.br ^bb9 loc(#loc330)
  ^bb9:  // 2 preds: ^bb8, ^bb13
    %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
    %22 = cir.const #cir.int<10> : !s32i loc(#loc46)
    %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc332)
    cir.brcond %23 ^bb10, ^bb14 loc(#loc47)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc333)
  ^bb11:  // pred: ^bb10
    %24 = cir.const #cir.int<0> : !s32i loc(#loc49)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
    %26 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc52)
    cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc334)
    cir.br ^bb12 loc(#loc42)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc42)
  ^bb13:  // pred: ^bb12
    %28 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    %29 = cir.unary(inc, %28) nsw : !s32i, !s32i loc(#loc54)
    cir.store %29, %0 : !s32i, !cir.ptr<!s32i> loc(#loc335)
    cir.br ^bb9 loc(#loc330)
  ^bb14:  // pred: ^bb9
    cir.br ^bb15 loc(#loc42)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc336)
  ^bb16:  // pred: ^bb15
    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc58)
    %32 = cir.cmp(ge, %30, %31) : !s32i, !cir.bool loc(#loc337)
    cir.brcond %32 ^bb17, ^bb26 loc(#loc338)
  ^bb17:  // pred: ^bb16
    %33 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
    %35 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    %36 = cir.ptr_stride(%34 : !cir.ptr<!s32i>, %35 : !s32i), !cir.ptr<!s32i> loc(#loc65)
    cir.store %33, %36 : !s32i, !cir.ptr<!s32i> loc(#loc339)
    cir.br ^bb18 loc(#loc340)
  ^bb18:  // pred: ^bb17
    %37 = cir.const #cir.int<0> : !s32i loc(#loc68)
    cir.store %37, %0 : !s32i, !cir.ptr<!s32i> loc(#loc341)
    cir.br ^bb19 loc(#loc340)
  ^bb19:  // 2 preds: ^bb18, ^bb23
    %38 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    %39 = cir.const #cir.int<10> : !s32i loc(#loc71)
    %40 = cir.cmp(lt, %38, %39) : !s32i, !cir.bool loc(#loc342)
    cir.brcond %40 ^bb20, ^bb24 loc(#loc72)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc343)
  ^bb21:  // pred: ^bb20
    %41 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
    %42 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    %43 = cir.ptr_stride(%41 : !cir.ptr<!s32i>, %42 : !s32i), !cir.ptr<!s32i> loc(#loc76)
    %44 = cir.load %43 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    cir.call @printIntLine(%44) : (!s32i) -> () loc(#loc77)
    cir.br ^bb22 loc(#loc67)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc67)
  ^bb23:  // pred: ^bb22
    %45 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    %46 = cir.unary(inc, %45) nsw : !s32i, !s32i loc(#loc79)
    cir.store %46, %0 : !s32i, !cir.ptr<!s32i> loc(#loc344)
    cir.br ^bb19 loc(#loc340)
  ^bb24:  // pred: ^bb19
    cir.br ^bb25 loc(#loc67)
  ^bb25:  // pred: ^bb24
    cir.br ^bb27 loc(#loc60)
  ^bb26:  // pred: ^bb16
    %47 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc11)
    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc11)
    cir.call @printLine(%48) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    cir.br ^bb27 loc(#loc56)
  ^bb27:  // 2 preds: ^bb25, ^bb26
    cir.br ^bb28 loc(#loc56)
  ^bb28:  // pred: ^bb27
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc81)
    %50 = cir.cast(bitcast, %49 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc81)
    cir.call @free(%50) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc82)
    cir.br ^bb29 loc(#loc28)
  ^bb29:  // pred: ^bb28
    cir.br ^bb30 loc(#loc24)
  ^bb30:  // 2 preds: ^bb1, ^bb29
    cir.br ^bb31 loc(#loc24)
  ^bb31:  // pred: ^bb30
    cir.return loc(#loc15)
  } loc(#loc317)
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G1Global : !s32i {alignment = 4 : i64} loc(#loc345)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc85)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc86)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G1Sink(%arg0: !s32i loc(fused[#loc89, #loc90])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc348)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc349)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc347)
    cir.store %arg0, %2 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    cir.br ^bb1 loc(#loc350)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G1Global : !cir.ptr<!s32i> loc(#loc345)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc98)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc351)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc85)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc85)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    cir.br ^bb39 loc(#loc100)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc352)
  ^bb4:  // pred: ^bb3
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc105)
    %9 = cir.const #cir.int<10> : !s32i loc(#loc106)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc106)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc353)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc354)
    %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc105)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc355)
    cir.store %14, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc349)
    cir.br ^bb5 loc(#loc356)
  ^bb5:  // pred: ^bb4
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc111)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc112)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc112)
    %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc357)
    cir.brcond %18 ^bb6, ^bb7 loc(#loc358)
  ^bb6:  // pred: ^bb5
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc114)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc116)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc114)
    cir.br ^bb7 loc(#loc110)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc110)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc359)
  ^bb9:  // pred: ^bb8
    %22 = cir.const #cir.int<0> : !s32i loc(#loc119)
    cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc360)
    cir.br ^bb10 loc(#loc359)
  ^bb10:  // 2 preds: ^bb9, ^bb14
    %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    %24 = cir.const #cir.int<10> : !s32i loc(#loc122)
    %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc361)
    cir.brcond %25 ^bb11, ^bb15 loc(#loc123)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc362)
  ^bb12:  // pred: ^bb11
    %26 = cir.const #cir.int<0> : !s32i loc(#loc125)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc126)
    %28 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc128)
    cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc363)
    cir.br ^bb13 loc(#loc118)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc118)
  ^bb14:  // pred: ^bb13
    %30 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    %31 = cir.unary(inc, %30) nsw : !s32i, !s32i loc(#loc130)
    cir.store %31, %0 : !s32i, !cir.ptr<!s32i> loc(#loc364)
    cir.br ^bb10 loc(#loc359)
  ^bb15:  // pred: ^bb10
    cir.br ^bb16 loc(#loc118)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc365)
  ^bb17:  // pred: ^bb16
    %32 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    %33 = cir.const #cir.int<0> : !s32i loc(#loc134)
    %34 = cir.cmp(ge, %32, %33) : !s32i, !cir.bool loc(#loc366)
    cir.brcond %34 ^bb18, ^bb23 loc(#loc135)
  ^bb18:  // pred: ^bb17
    %35 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    %36 = cir.const #cir.int<10> : !s32i loc(#loc137)
    %37 = cir.cmp(lt, %35, %36) : !s32i, !cir.bool loc(#loc367)
    cir.brcond %37 ^bb19, ^bb20 loc(#loc135)
  ^bb19:  // pred: ^bb18
    %38 = cir.const #true loc(#loc135)
    cir.br ^bb21(%38 : !cir.bool) loc(#loc135)
  ^bb20:  // pred: ^bb18
    %39 = cir.const #false loc(#loc135)
    cir.br ^bb21(%39 : !cir.bool) loc(#loc135)
  ^bb21(%40: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":87:27)):  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc135)
  ^bb22:  // pred: ^bb21
    cir.br ^bb24(%40 : !cir.bool) loc(#loc135)
  ^bb23:  // pred: ^bb17
    %41 = cir.const #false loc(#loc135)
    cir.br ^bb24(%41 : !cir.bool) loc(#loc135)
  ^bb24(%42: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":87:27)):  // 2 preds: ^bb22, ^bb23
    cir.br ^bb25 loc(#loc135)
  ^bb25:  // pred: ^bb24
    cir.brcond %42 ^bb26, ^bb35 loc(#loc368)
  ^bb26:  // pred: ^bb25
    %43 = cir.const #cir.int<1> : !s32i loc(#loc142)
    %44 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc143)
    %45 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    %46 = cir.ptr_stride(%44 : !cir.ptr<!s32i>, %45 : !s32i), !cir.ptr<!s32i> loc(#loc145)
    cir.store %43, %46 : !s32i, !cir.ptr<!s32i> loc(#loc369)
    cir.br ^bb27 loc(#loc370)
  ^bb27:  // pred: ^bb26
    %47 = cir.const #cir.int<0> : !s32i loc(#loc148)
    cir.store %47, %0 : !s32i, !cir.ptr<!s32i> loc(#loc371)
    cir.br ^bb28 loc(#loc370)
  ^bb28:  // 2 preds: ^bb27, ^bb32
    %48 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc150)
    %49 = cir.const #cir.int<10> : !s32i loc(#loc151)
    %50 = cir.cmp(lt, %48, %49) : !s32i, !cir.bool loc(#loc372)
    cir.brcond %50 ^bb29, ^bb33 loc(#loc152)
  ^bb29:  // pred: ^bb28
    cir.br ^bb30 loc(#loc373)
  ^bb30:  // pred: ^bb29
    %51 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc154)
    %52 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc155)
    %53 = cir.ptr_stride(%51 : !cir.ptr<!s32i>, %52 : !s32i), !cir.ptr<!s32i> loc(#loc156)
    %54 = cir.load %53 : !cir.ptr<!s32i>, !s32i loc(#loc154)
    cir.call @printIntLine(%54) : (!s32i) -> () loc(#loc157)
    cir.br ^bb31 loc(#loc147)
  ^bb31:  // pred: ^bb30
    cir.br ^bb32 loc(#loc147)
  ^bb32:  // pred: ^bb31
    %55 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    %56 = cir.unary(inc, %55) nsw : !s32i, !s32i loc(#loc159)
    cir.store %56, %0 : !s32i, !cir.ptr<!s32i> loc(#loc374)
    cir.br ^bb28 loc(#loc370)
  ^bb33:  // pred: ^bb28
    cir.br ^bb34 loc(#loc147)
  ^bb34:  // pred: ^bb33
    cir.br ^bb36 loc(#loc140)
  ^bb35:  // pred: ^bb25
    %57 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc86)
    %58 = cir.cast(array_to_ptrdecay, %57 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc86)
    cir.call @printLine(%58) : (!cir.ptr<!s8i>) -> () loc(#loc160)
    cir.br ^bb36 loc(#loc132)
  ^bb36:  // 2 preds: ^bb34, ^bb35
    cir.br ^bb37 loc(#loc132)
  ^bb37:  // pred: ^bb36
    %59 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc161)
    %60 = cir.cast(bitcast, %59 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc161)
    cir.call @free(%60) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc162)
    cir.br ^bb38 loc(#loc104)
  ^bb38:  // pred: ^bb37
    cir.br ^bb39 loc(#loc97)
  ^bb39:  // 2 preds: ^bb2, ^bb38
    cir.br ^bb40 loc(#loc97)
  ^bb40:  // pred: ^bb39
    cir.return loc(#loc88)
  } loc(#loc346)
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G2Global : !s32i {alignment = 4 : i64} loc(#loc375)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G2Sink(%arg0: !s32i loc(fused[#loc167, #loc168])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc378)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc379)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc377)
    cir.store %arg0, %2 : !s32i, !cir.ptr<!s32i> loc(#loc173)
    cir.br ^bb1 loc(#loc380)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G2Global : !cir.ptr<!s32i> loc(#loc375)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc176)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc176)
    cir.brcond %5 ^bb2, ^bb38 loc(#loc381)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc382)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc180)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc181)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc181)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc383)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc384)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc180)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc385)
    cir.store %12, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc379)
    cir.br ^bb4 loc(#loc386)
  ^bb4:  // pred: ^bb3
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc186)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc187)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc187)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc387)
    cir.brcond %16 ^bb5, ^bb6 loc(#loc388)
  ^bb5:  // pred: ^bb4
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc189)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc190)
    %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc191)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc189)
    cir.br ^bb6 loc(#loc185)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc185)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc389)
  ^bb8:  // pred: ^bb7
    %20 = cir.const #cir.int<0> : !s32i loc(#loc194)
    cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc390)
    cir.br ^bb9 loc(#loc389)
  ^bb9:  // 2 preds: ^bb8, ^bb13
    %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc196)
    %22 = cir.const #cir.int<10> : !s32i loc(#loc197)
    %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc391)
    cir.brcond %23 ^bb10, ^bb14 loc(#loc198)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc392)
  ^bb11:  // pred: ^bb10
    %24 = cir.const #cir.int<0> : !s32i loc(#loc200)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc201)
    %26 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc202)
    %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc203)
    cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc393)
    cir.br ^bb12 loc(#loc193)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc193)
  ^bb13:  // pred: ^bb12
    %28 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc204)
    %29 = cir.unary(inc, %28) nsw : !s32i, !s32i loc(#loc205)
    cir.store %29, %0 : !s32i, !cir.ptr<!s32i> loc(#loc394)
    cir.br ^bb9 loc(#loc389)
  ^bb14:  // pred: ^bb9
    cir.br ^bb15 loc(#loc193)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc395)
  ^bb16:  // pred: ^bb15
    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc208)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc209)
    %32 = cir.cmp(ge, %30, %31) : !s32i, !cir.bool loc(#loc396)
    cir.brcond %32 ^bb17, ^bb22 loc(#loc210)
  ^bb17:  // pred: ^bb16
    %33 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc211)
    %34 = cir.const #cir.int<10> : !s32i loc(#loc212)
    %35 = cir.cmp(lt, %33, %34) : !s32i, !cir.bool loc(#loc397)
    cir.brcond %35 ^bb18, ^bb19 loc(#loc210)
  ^bb18:  // pred: ^bb17
    %36 = cir.const #true loc(#loc210)
    cir.br ^bb20(%36 : !cir.bool) loc(#loc210)
  ^bb19:  // pred: ^bb17
    %37 = cir.const #false loc(#loc210)
    cir.br ^bb20(%37 : !cir.bool) loc(#loc210)
  ^bb20(%38: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":120:27)):  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc210)
  ^bb21:  // pred: ^bb20
    cir.br ^bb23(%38 : !cir.bool) loc(#loc210)
  ^bb22:  // pred: ^bb16
    %39 = cir.const #false loc(#loc210)
    cir.br ^bb23(%39 : !cir.bool) loc(#loc210)
  ^bb23(%40: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":120:27)):  // 2 preds: ^bb21, ^bb22
    cir.br ^bb24 loc(#loc210)
  ^bb24:  // pred: ^bb23
    cir.brcond %40 ^bb25, ^bb34 loc(#loc398)
  ^bb25:  // pred: ^bb24
    %41 = cir.const #cir.int<1> : !s32i loc(#loc217)
    %42 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc218)
    %43 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc219)
    %44 = cir.ptr_stride(%42 : !cir.ptr<!s32i>, %43 : !s32i), !cir.ptr<!s32i> loc(#loc220)
    cir.store %41, %44 : !s32i, !cir.ptr<!s32i> loc(#loc399)
    cir.br ^bb26 loc(#loc400)
  ^bb26:  // pred: ^bb25
    %45 = cir.const #cir.int<0> : !s32i loc(#loc223)
    cir.store %45, %0 : !s32i, !cir.ptr<!s32i> loc(#loc401)
    cir.br ^bb27 loc(#loc400)
  ^bb27:  // 2 preds: ^bb26, ^bb31
    %46 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc225)
    %47 = cir.const #cir.int<10> : !s32i loc(#loc226)
    %48 = cir.cmp(lt, %46, %47) : !s32i, !cir.bool loc(#loc402)
    cir.brcond %48 ^bb28, ^bb32 loc(#loc227)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc403)
  ^bb29:  // pred: ^bb28
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc229)
    %50 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc230)
    %51 = cir.ptr_stride(%49 : !cir.ptr<!s32i>, %50 : !s32i), !cir.ptr<!s32i> loc(#loc231)
    %52 = cir.load %51 : !cir.ptr<!s32i>, !s32i loc(#loc229)
    cir.call @printIntLine(%52) : (!s32i) -> () loc(#loc232)
    cir.br ^bb30 loc(#loc222)
  ^bb30:  // pred: ^bb29
    cir.br ^bb31 loc(#loc222)
  ^bb31:  // pred: ^bb30
    %53 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc233)
    %54 = cir.unary(inc, %53) nsw : !s32i, !s32i loc(#loc234)
    cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc404)
    cir.br ^bb27 loc(#loc400)
  ^bb32:  // pred: ^bb27
    cir.br ^bb33 loc(#loc222)
  ^bb33:  // pred: ^bb32
    cir.br ^bb35 loc(#loc215)
  ^bb34:  // pred: ^bb24
    %55 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc235)
    %56 = cir.cast(array_to_ptrdecay, %55 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc235)
    cir.call @printLine(%56) : (!cir.ptr<!s8i>) -> () loc(#loc236)
    cir.br ^bb35 loc(#loc207)
  ^bb35:  // 2 preds: ^bb33, ^bb34
    cir.br ^bb36 loc(#loc207)
  ^bb36:  // pred: ^bb35
    %57 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc237)
    %58 = cir.cast(bitcast, %57 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc237)
    cir.call @free(%58) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc238)
    cir.br ^bb37 loc(#loc179)
  ^bb37:  // pred: ^bb36
    cir.br ^bb38 loc(#loc175)
  ^bb38:  // 2 preds: ^bb1, ^bb37
    cir.br ^bb39 loc(#loc175)
  ^bb39:  // pred: ^bb38
    cir.return loc(#loc166)
  } loc(#loc376)
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodG2BGlobal : !s32i {alignment = 4 : i64} loc(#loc405)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodG2BSink(%arg0: !s32i loc(fused[#loc243, #loc244])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc408)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc409)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc407)
    cir.store %arg0, %2 : !s32i, !cir.ptr<!s32i> loc(#loc249)
    cir.br ^bb1 loc(#loc410)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodG2BGlobal : !cir.ptr<!s32i> loc(#loc405)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc252)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc252)
    cir.brcond %5 ^bb2, ^bb30 loc(#loc411)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc412)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc256)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc257)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc257)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc413)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc414)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc256)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc415)
    cir.store %12, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc409)
    cir.br ^bb4 loc(#loc416)
  ^bb4:  // pred: ^bb3
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc262)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc263)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc263)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc417)
    cir.brcond %16 ^bb5, ^bb6 loc(#loc418)
  ^bb5:  // pred: ^bb4
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc265)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc266)
    %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc267)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc265)
    cir.br ^bb6 loc(#loc261)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc261)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc419)
  ^bb8:  // pred: ^bb7
    %20 = cir.const #cir.int<0> : !s32i loc(#loc270)
    cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc420)
    cir.br ^bb9 loc(#loc419)
  ^bb9:  // 2 preds: ^bb8, ^bb13
    %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc272)
    %22 = cir.const #cir.int<10> : !s32i loc(#loc273)
    %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc421)
    cir.brcond %23 ^bb10, ^bb14 loc(#loc274)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc422)
  ^bb11:  // pred: ^bb10
    %24 = cir.const #cir.int<0> : !s32i loc(#loc276)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc277)
    %26 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc278)
    %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc279)
    cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc423)
    cir.br ^bb12 loc(#loc269)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc269)
  ^bb13:  // pred: ^bb12
    %28 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc280)
    %29 = cir.unary(inc, %28) nsw : !s32i, !s32i loc(#loc281)
    cir.store %29, %0 : !s32i, !cir.ptr<!s32i> loc(#loc424)
    cir.br ^bb9 loc(#loc419)
  ^bb14:  // pred: ^bb9
    cir.br ^bb15 loc(#loc269)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc425)
  ^bb16:  // pred: ^bb15
    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc284)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc285)
    %32 = cir.cmp(ge, %30, %31) : !s32i, !cir.bool loc(#loc426)
    cir.brcond %32 ^bb17, ^bb26 loc(#loc427)
  ^bb17:  // pred: ^bb16
    %33 = cir.const #cir.int<1> : !s32i loc(#loc289)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc290)
    %35 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc291)
    %36 = cir.ptr_stride(%34 : !cir.ptr<!s32i>, %35 : !s32i), !cir.ptr<!s32i> loc(#loc292)
    cir.store %33, %36 : !s32i, !cir.ptr<!s32i> loc(#loc428)
    cir.br ^bb18 loc(#loc429)
  ^bb18:  // pred: ^bb17
    %37 = cir.const #cir.int<0> : !s32i loc(#loc295)
    cir.store %37, %0 : !s32i, !cir.ptr<!s32i> loc(#loc430)
    cir.br ^bb19 loc(#loc429)
  ^bb19:  // 2 preds: ^bb18, ^bb23
    %38 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc297)
    %39 = cir.const #cir.int<10> : !s32i loc(#loc298)
    %40 = cir.cmp(lt, %38, %39) : !s32i, !cir.bool loc(#loc431)
    cir.brcond %40 ^bb20, ^bb24 loc(#loc299)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc432)
  ^bb21:  // pred: ^bb20
    %41 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc301)
    %42 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc302)
    %43 = cir.ptr_stride(%41 : !cir.ptr<!s32i>, %42 : !s32i), !cir.ptr<!s32i> loc(#loc303)
    %44 = cir.load %43 : !cir.ptr<!s32i>, !s32i loc(#loc301)
    cir.call @printIntLine(%44) : (!s32i) -> () loc(#loc304)
    cir.br ^bb22 loc(#loc294)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc294)
  ^bb23:  // pred: ^bb22
    %45 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc305)
    %46 = cir.unary(inc, %45) nsw : !s32i, !s32i loc(#loc306)
    cir.store %46, %0 : !s32i, !cir.ptr<!s32i> loc(#loc433)
    cir.br ^bb19 loc(#loc429)
  ^bb24:  // pred: ^bb19
    cir.br ^bb25 loc(#loc294)
  ^bb25:  // pred: ^bb24
    cir.br ^bb27 loc(#loc287)
  ^bb26:  // pred: ^bb16
    %47 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc307)
    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc307)
    cir.call @printLine(%48) : (!cir.ptr<!s8i>) -> () loc(#loc308)
    cir.br ^bb27 loc(#loc283)
  ^bb27:  // 2 preds: ^bb25, ^bb26
    cir.br ^bb28 loc(#loc283)
  ^bb28:  // pred: ^bb27
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc309)
    %50 = cir.cast(bitcast, %49 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc309)
    cir.call @free(%50) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc310)
    cir.br ^bb29 loc(#loc255)
  ^bb29:  // pred: ^bb28
    cir.br ^bb30 loc(#loc251)
  ^bb30:  // 2 preds: ^bb1, ^bb29
    cir.br ^bb31 loc(#loc251)
  ^bb31:  // pred: ^bb30
    cir.return loc(#loc242)
  } loc(#loc406)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":23:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":23:12)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":51:27)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":25:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":56:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":30:13)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":30:17)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":31:13)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":31:58)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":26:1)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":27:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":55:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":27:8)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":28:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":29:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":54:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":31:35)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":31:42)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":31:47)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":31:57)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":32:13)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":32:43)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":32:17)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":32:27)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":32:33)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":32:34)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":32:40)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":32:39)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":34:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":37:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":34:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":34:18)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":34:25)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":34:29)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":34:27)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":35:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":36:29)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":36:17)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":36:24)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":36:25)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":34:34)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":34:33)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":40:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":52:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":40:17)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":40:25)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":41:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":48:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":50:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":42:32)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":42:17)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":42:24)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":42:28)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":44:17)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":47:17)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":44:25)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":44:21)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":44:28)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":44:32)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":44:30)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":45:17)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":46:34)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":46:41)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":46:42)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":46:21)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":44:37)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":44:36)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":51:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":53:18)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":53:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":63:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":63:12)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":73:19)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":98:27)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":68:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":103:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":78:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":78:17)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":79:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":79:58)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":69:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":70:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":102:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":70:8)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":71:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":74:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":76:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":73:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":77:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":101:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":79:35)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":79:42)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":79:47)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":79:57)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":80:13)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":80:43)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":80:17)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":80:27)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":80:33)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":80:34)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":80:40)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":80:39)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":82:13)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":85:13)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":82:22)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":82:18)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":82:25)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":82:29)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":82:27)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":83:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":84:29)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":84:17)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":84:24)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":84:25)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":82:34)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":82:33)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":87:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":99:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":87:17)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":87:25)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":87:30)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":87:38)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":87:40)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":88:13)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":95:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":97:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":89:32)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":89:17)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":89:24)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":89:28)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":91:17)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":94:17)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":91:25)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":91:21)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":91:28)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":91:32)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":91:30)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":92:17)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":93:34)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":93:41)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":93:42)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":93:21)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":91:37)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":91:36)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":98:17)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":100:18)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":100:13)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":64:1)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":64:12)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":106:1)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":136:1)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":111:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":111:17)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":112:13)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":112:58)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":107:1)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":108:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":135:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":108:8)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":109:5)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":110:9)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":134:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":112:35)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":112:42)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":112:47)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":112:57)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":113:13)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":113:43)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":113:17)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":113:27)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":113:33)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":113:34)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":113:40)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":113:39)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":115:13)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":118:13)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":115:22)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":115:18)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":115:25)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":115:29)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":115:27)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":116:13)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":117:29)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":117:17)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":117:24)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":117:25)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":115:34)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":115:33)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":120:13)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":132:13)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":120:17)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":120:25)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":120:30)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":120:38)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":120:40)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":121:13)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":128:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":130:13)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":122:32)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":122:17)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":122:24)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":122:28)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":124:17)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":127:17)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":124:25)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":124:21)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":124:28)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":124:32)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":124:30)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":125:17)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":126:34)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":126:41)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":126:42)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":126:21)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":124:37)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":124:36)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":131:27)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":131:17)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":133:18)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":133:13)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":65:1)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":65:12)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":139:1)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":170:1)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":144:13)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":144:17)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":145:13)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":145:58)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":140:1)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":141:5)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":169:5)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":141:8)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":142:5)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":143:9)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":168:9)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":145:35)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":145:42)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":145:47)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":145:57)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":146:13)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":146:43)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":146:17)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":146:27)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":146:33)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":146:34)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":146:40)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":146:39)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":148:13)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":151:13)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":148:22)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":148:18)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":148:25)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":148:29)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":148:27)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":149:13)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":150:29)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":150:17)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":150:24)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":150:25)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":148:34)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":148:33)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":154:13)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":166:13)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":154:17)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":154:25)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":155:13)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":162:13)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":164:13)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":156:32)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":156:17)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":156:24)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":156:28)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":158:17)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":161:17)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":158:25)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":158:21)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":158:28)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":158:32)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":158:30)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":159:17)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":160:34)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":160:41)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":160:42)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":160:21)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":158:37)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":158:36)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":165:27)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":165:17)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":167:18)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c":167:13)
#loc311 = loc(fused[#loc1, #loc2])
#loc312 = loc(fused[#loc3, #loc4])
#loc313 = loc(fused[#loc5, #loc6])
#loc314 = loc(fused[#loc7, #loc8])
#loc315 = loc(fused[#loc9, #loc10])
#loc316 = loc(fused[#loc12, #loc13])
#loc317 = loc(fused[#loc14, #loc15])
#loc319 = loc(fused[#loc18, #loc19])
#loc320 = loc(fused[#loc20, #loc21])
#loc321 = loc(fused[#loc23, #loc24])
#loc322 = loc(fused[#loc26, #loc24])
#loc323 = loc(fused[#loc27, #loc28])
#loc324 = loc(fused[#loc31, #loc32])
#loc325 = loc(fused[#loc30, #loc32])
#loc326 = loc(fused[#loc29, #loc21])
#loc327 = loc(fused[#loc33, #loc34])
#loc328 = loc(fused[#loc35, #loc36])
#loc329 = loc(fused[#loc37, #loc34])
#loc330 = loc(fused[#loc41, #loc42])
#loc331 = loc(fused[#loc44, #loc43])
#loc332 = loc(fused[#loc45, #loc46])
#loc333 = loc(fused[#loc48, #loc42])
#loc334 = loc(fused[#loc50, #loc49])
#loc335 = loc(fused[#loc54, #loc53])
#loc336 = loc(fused[#loc55, #loc56])
#loc337 = loc(fused[#loc57, #loc58])
#loc338 = loc(fused[#loc59, #loc60, #loc61, #loc56])
#loc339 = loc(fused[#loc63, #loc62])
#loc340 = loc(fused[#loc66, #loc67])
#loc341 = loc(fused[#loc69, #loc68])
#loc342 = loc(fused[#loc70, #loc71])
#loc343 = loc(fused[#loc73, #loc67])
#loc344 = loc(fused[#loc79, #loc78])
#loc345 = loc(fused[#loc83, #loc84])
#loc346 = loc(fused[#loc87, #loc88])
#loc348 = loc(fused[#loc91, #loc92])
#loc349 = loc(fused[#loc93, #loc94])
#loc350 = loc(fused[#loc96, #loc97])
#loc351 = loc(fused[#loc99, #loc100, #loc101, #loc97])
#loc352 = loc(fused[#loc103, #loc104])
#loc353 = loc(fused[#loc107, #loc108])
#loc354 = loc(fused[#loc106, #loc108])
#loc355 = loc(fused[#loc105, #loc94])
#loc356 = loc(fused[#loc109, #loc110])
#loc357 = loc(fused[#loc111, #loc112])
#loc358 = loc(fused[#loc113, #loc110])
#loc359 = loc(fused[#loc117, #loc118])
#loc360 = loc(fused[#loc120, #loc119])
#loc361 = loc(fused[#loc121, #loc122])
#loc362 = loc(fused[#loc124, #loc118])
#loc363 = loc(fused[#loc126, #loc125])
#loc364 = loc(fused[#loc130, #loc129])
#loc365 = loc(fused[#loc131, #loc132])
#loc366 = loc(fused[#loc133, #loc134])
#loc367 = loc(fused[#loc136, #loc138])
#loc368 = loc(fused[#loc139, #loc140, #loc141, #loc132])
#loc369 = loc(fused[#loc143, #loc142])
#loc370 = loc(fused[#loc146, #loc147])
#loc371 = loc(fused[#loc149, #loc148])
#loc372 = loc(fused[#loc150, #loc151])
#loc373 = loc(fused[#loc153, #loc147])
#loc374 = loc(fused[#loc159, #loc158])
#loc375 = loc(fused[#loc163, #loc164])
#loc376 = loc(fused[#loc165, #loc166])
#loc378 = loc(fused[#loc169, #loc170])
#loc379 = loc(fused[#loc171, #loc172])
#loc380 = loc(fused[#loc174, #loc175])
#loc381 = loc(fused[#loc177, #loc175])
#loc382 = loc(fused[#loc178, #loc179])
#loc383 = loc(fused[#loc182, #loc183])
#loc384 = loc(fused[#loc181, #loc183])
#loc385 = loc(fused[#loc180, #loc172])
#loc386 = loc(fused[#loc184, #loc185])
#loc387 = loc(fused[#loc186, #loc187])
#loc388 = loc(fused[#loc188, #loc185])
#loc389 = loc(fused[#loc192, #loc193])
#loc390 = loc(fused[#loc195, #loc194])
#loc391 = loc(fused[#loc196, #loc197])
#loc392 = loc(fused[#loc199, #loc193])
#loc393 = loc(fused[#loc201, #loc200])
#loc394 = loc(fused[#loc205, #loc204])
#loc395 = loc(fused[#loc206, #loc207])
#loc396 = loc(fused[#loc208, #loc209])
#loc397 = loc(fused[#loc211, #loc213])
#loc398 = loc(fused[#loc214, #loc215, #loc216, #loc207])
#loc399 = loc(fused[#loc218, #loc217])
#loc400 = loc(fused[#loc221, #loc222])
#loc401 = loc(fused[#loc224, #loc223])
#loc402 = loc(fused[#loc225, #loc226])
#loc403 = loc(fused[#loc228, #loc222])
#loc404 = loc(fused[#loc234, #loc233])
#loc405 = loc(fused[#loc239, #loc240])
#loc406 = loc(fused[#loc241, #loc242])
#loc408 = loc(fused[#loc245, #loc246])
#loc409 = loc(fused[#loc247, #loc248])
#loc410 = loc(fused[#loc250, #loc251])
#loc411 = loc(fused[#loc253, #loc251])
#loc412 = loc(fused[#loc254, #loc255])
#loc413 = loc(fused[#loc258, #loc259])
#loc414 = loc(fused[#loc257, #loc259])
#loc415 = loc(fused[#loc256, #loc248])
#loc416 = loc(fused[#loc260, #loc261])
#loc417 = loc(fused[#loc262, #loc263])
#loc418 = loc(fused[#loc264, #loc261])
#loc419 = loc(fused[#loc268, #loc269])
#loc420 = loc(fused[#loc271, #loc270])
#loc421 = loc(fused[#loc272, #loc273])
#loc422 = loc(fused[#loc275, #loc269])
#loc423 = loc(fused[#loc277, #loc276])
#loc424 = loc(fused[#loc281, #loc280])
#loc425 = loc(fused[#loc282, #loc283])
#loc426 = loc(fused[#loc284, #loc285])
#loc427 = loc(fused[#loc286, #loc287, #loc288, #loc283])
#loc428 = loc(fused[#loc290, #loc289])
#loc429 = loc(fused[#loc293, #loc294])
#loc430 = loc(fused[#loc296, #loc295])
#loc431 = loc(fused[#loc297, #loc298])
#loc432 = loc(fused[#loc300, #loc294])
#loc433 = loc(fused[#loc306, #loc305])
