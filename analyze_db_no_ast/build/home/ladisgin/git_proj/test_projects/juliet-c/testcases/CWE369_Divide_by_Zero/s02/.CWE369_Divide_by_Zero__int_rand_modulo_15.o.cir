!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc167)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc168)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func private  @printIntLine(!s32i) loc(#loc169)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_rand_modulo_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc171)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc17)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %6 = cir.binop(and, %4, %5) : !s32i loc(#loc18)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc18)
        %8 = cir.ternary(%7, true {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc18)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc18)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc18)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc18)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc18)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc18)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc18)
          cir.yield %21 : !u32i loc(#loc18)
        }, false {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc18)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc18)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc18)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc18)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc18)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc18)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc18)
          %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc18)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc18)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc18)
          %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc18)
          cir.yield %25 : !u32i loc(#loc18)
        }) : (!cir.bool) -> !u32i loc(#loc18)
        %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc18)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
        cir.break loc(#loc20)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc21)
        cir.break loc(#loc22)
      }
      ] loc(#loc15)
    } loc(#loc173)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc25)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc26)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc176)
        cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc28)
        cir.break loc(#loc29)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc30)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc30)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc31)
        cir.break loc(#loc32)
      }
      ] loc(#loc23)
    } loc(#loc175)
    cir.return loc(#loc9)
  } loc(#loc170)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_rand_modulo_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc34)
  } loc(#loc177)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc43)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc183)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc49)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc53)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc54)
        %6 = cir.binop(and, %4, %5) : !s32i loc(#loc54)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc54)
        %8 = cir.ternary(%7, true {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc54)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc54)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc54)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc54)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc54)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc54)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc54)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc54)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc54)
          cir.yield %21 : !u32i loc(#loc54)
        }, false {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc54)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc54)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc54)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc54)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc54)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc54)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc54)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc54)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc54)
          %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc54)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc54)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc54)
          %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc54)
          cir.yield %25 : !u32i loc(#loc54)
        }) : (!cir.bool) -> !u32i loc(#loc54)
        %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc54)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc186)
        cir.break loc(#loc56)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc57)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc57)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc58)
        cir.break loc(#loc59)
      }
      ] loc(#loc51)
    } loc(#loc185)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc62)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc63)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc63)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc64)
        cir.break loc(#loc65)
      },
      case (default) {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc68)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc69)
          %6 = cir.cmp(ne, %4, %5) : !s32i, !s32i loc(#loc189)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc70)
          cir.if %7 {
            %8 = cir.const #cir.int<100> : !s32i loc(#loc74)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
            %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc191)
            cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc76)
          } else {
            %8 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc43)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc43)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc77)
          } loc(#loc190)
        } loc(#loc188)
        cir.break loc(#loc78)
      }
      ] loc(#loc60)
    } loc(#loc187)
    cir.return loc(#loc45)
  } loc(#loc182)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc193)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc84)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc88)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc89)
        %6 = cir.binop(and, %4, %5) : !s32i loc(#loc89)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc89)
        %8 = cir.ternary(%7, true {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc89)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc89)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc89)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc89)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc89)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc89)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc89)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc89)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc89)
          cir.yield %21 : !u32i loc(#loc89)
        }, false {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc89)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc89)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc89)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc89)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc89)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc89)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc89)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc89)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc89)
          %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc89)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc89)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc89)
          %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc89)
          cir.yield %25 : !u32i loc(#loc89)
        }) : (!cir.bool) -> !u32i loc(#loc89)
        %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc89)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
        cir.break loc(#loc91)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc92)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc92)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc93)
        cir.break loc(#loc94)
      }
      ] loc(#loc86)
    } loc(#loc195)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc97)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc101)
          %6 = cir.cmp(ne, %4, %5) : !s32i, !s32i loc(#loc199)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc102)
          cir.if %7 {
            %8 = cir.const #cir.int<100> : !s32i loc(#loc106)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
            %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc201)
            cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc108)
          } else {
            %8 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc109)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc109)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc110)
          } loc(#loc200)
        } loc(#loc198)
        cir.break loc(#loc111)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc112)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc112)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc113)
        cir.break loc(#loc114)
      }
      ] loc(#loc95)
    } loc(#loc197)
    cir.return loc(#loc80)
  } loc(#loc192)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc203)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc119)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc120)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc124)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc125)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc125)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc126)
        cir.break loc(#loc127)
      },
      case (default) {
        %4 = cir.const #cir.int<7> : !s32i loc(#loc128)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
        cir.break loc(#loc130)
      }
      ] loc(#loc122)
    } loc(#loc205)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc133)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc134)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc135)
        %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc208)
        cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc136)
        cir.break loc(#loc137)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc138)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc138)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc139)
        cir.break loc(#loc140)
      }
      ] loc(#loc131)
    } loc(#loc207)
    cir.return loc(#loc116)
  } loc(#loc202)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc210)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc145)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc146)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc150)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.const #cir.int<7> : !s32i loc(#loc151)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
        cir.break loc(#loc153)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc154)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc154)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc155)
        cir.break loc(#loc156)
      }
      ] loc(#loc148)
    } loc(#loc212)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc159)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc160)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
        %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc215)
        cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc162)
        cir.break loc(#loc163)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc164)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc164)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc165)
        cir.break loc(#loc166)
      }
      ] loc(#loc157)
    } loc(#loc214)
    cir.return loc(#loc142)
  } loc(#loc209)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":35:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":22:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":49:1)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":24:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":24:9)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":26:13)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":26:12)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":26:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":27:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":37:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":27:12)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":31:16)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":31:9)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":32:9)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":35:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":36:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":38:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":48:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":38:12)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":42:22)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":42:28)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":42:9)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":43:9)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":46:19)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":46:9)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":47:9)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":189:1)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":195:1)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":191:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":191:14)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":192:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":192:14)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":193:5)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":193:14)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":194:5)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":194:14)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":86:23)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":56:1)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":90:1)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":58:5)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":58:9)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":60:13)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":60:12)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":60:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":61:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":71:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":61:12)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":65:16)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":65:9)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":66:9)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":69:19)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":69:9)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":70:9)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":72:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":89:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":72:12)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":76:19)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":76:9)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":77:9)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":80:9)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":87:9)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":80:13)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":80:21)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":80:18)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":81:9)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":83:9)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":85:9)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":82:26)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":82:32)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":82:13)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":86:13)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":88:9)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":93:1)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":127:1)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":95:5)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":95:9)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":97:13)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":97:12)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":97:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":98:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":108:5)
#loc88 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":98:12)
#loc89 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":102:16)
#loc90 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":102:9)
#loc91 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":103:9)
#loc92 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":106:19)
#loc93 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":106:9)
#loc94 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":107:9)
#loc95 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":109:5)
#loc96 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":126:5)
#loc97 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":109:12)
#loc98 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":113:9)
#loc99 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":120:9)
#loc100 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":113:13)
#loc101 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":113:21)
#loc102 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":113:18)
#loc103 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":114:9)
#loc104 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":116:9)
#loc105 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":118:9)
#loc106 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":115:26)
#loc107 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":115:32)
#loc108 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":115:13)
#loc109 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":119:23)
#loc110 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":119:13)
#loc111 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":121:9)
#loc112 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":124:19)
#loc113 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":124:9)
#loc114 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":125:9)
#loc115 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":130:1)
#loc116 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":157:1)
#loc117 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":132:5)
#loc118 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":132:9)
#loc119 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":134:13)
#loc120 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":134:12)
#loc121 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":134:5)
#loc122 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":135:5)
#loc123 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":145:5)
#loc124 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":135:12)
#loc125 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":139:19)
#loc126 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":139:9)
#loc127 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":140:9)
#loc128 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":143:16)
#loc129 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":143:9)
#loc130 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":144:9)
#loc131 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":146:5)
#loc132 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":156:5)
#loc133 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":146:12)
#loc134 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":150:22)
#loc135 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":150:28)
#loc136 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":150:9)
#loc137 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":151:9)
#loc138 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":154:19)
#loc139 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":154:9)
#loc140 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":155:9)
#loc141 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":160:1)
#loc142 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":187:1)
#loc143 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":162:5)
#loc144 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":162:9)
#loc145 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":164:13)
#loc146 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":164:12)
#loc147 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":164:5)
#loc148 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":165:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":175:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":165:12)
#loc151 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":169:16)
#loc152 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":169:9)
#loc153 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":170:9)
#loc154 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":173:19)
#loc155 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":173:9)
#loc156 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":174:9)
#loc157 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":176:5)
#loc158 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":186:5)
#loc159 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":176:12)
#loc160 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":180:22)
#loc161 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":180:28)
#loc162 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":180:9)
#loc163 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":181:9)
#loc164 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":184:19)
#loc165 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":184:9)
#loc166 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":185:9)
#loc167 = loc(fused[#loc1, #loc2])
#loc168 = loc(fused[#loc3, #loc4])
#loc169 = loc(fused[#loc6, #loc7])
#loc170 = loc(fused[#loc8, #loc9])
#loc171 = loc(fused[#loc10, #loc11])
#loc172 = loc(fused[#loc14, #loc12])
#loc173 = loc(fused[#loc15, #loc16])
#loc174 = loc(fused[#loc19, #loc18])
#loc175 = loc(fused[#loc23, #loc24])
#loc176 = loc(fused[#loc26, #loc27])
#loc177 = loc(fused[#loc33, #loc34])
#loc178 = loc(fused[#loc35, #loc36])
#loc179 = loc(fused[#loc37, #loc38])
#loc180 = loc(fused[#loc39, #loc40])
#loc181 = loc(fused[#loc41, #loc42])
#loc182 = loc(fused[#loc44, #loc45])
#loc183 = loc(fused[#loc46, #loc47])
#loc184 = loc(fused[#loc50, #loc48])
#loc185 = loc(fused[#loc51, #loc52])
#loc186 = loc(fused[#loc55, #loc54])
#loc187 = loc(fused[#loc60, #loc61])
#loc188 = loc(fused[#loc66, #loc67])
#loc189 = loc(fused[#loc68, #loc69])
#loc190 = loc(fused[#loc71, #loc72, #loc73, #loc67])
#loc191 = loc(fused[#loc74, #loc75])
#loc192 = loc(fused[#loc79, #loc80])
#loc193 = loc(fused[#loc81, #loc82])
#loc194 = loc(fused[#loc85, #loc83])
#loc195 = loc(fused[#loc86, #loc87])
#loc196 = loc(fused[#loc90, #loc89])
#loc197 = loc(fused[#loc95, #loc96])
#loc198 = loc(fused[#loc98, #loc99])
#loc199 = loc(fused[#loc100, #loc101])
#loc200 = loc(fused[#loc103, #loc104, #loc105, #loc99])
#loc201 = loc(fused[#loc106, #loc107])
#loc202 = loc(fused[#loc115, #loc116])
#loc203 = loc(fused[#loc117, #loc118])
#loc204 = loc(fused[#loc121, #loc119])
#loc205 = loc(fused[#loc122, #loc123])
#loc206 = loc(fused[#loc129, #loc128])
#loc207 = loc(fused[#loc131, #loc132])
#loc208 = loc(fused[#loc134, #loc135])
#loc209 = loc(fused[#loc141, #loc142])
#loc210 = loc(fused[#loc143, #loc144])
#loc211 = loc(fused[#loc147, #loc145])
#loc212 = loc(fused[#loc148, #loc149])
#loc213 = loc(fused[#loc152, #loc151])
#loc214 = loc(fused[#loc157, #loc158])
#loc215 = loc(fused[#loc160, #loc161])
