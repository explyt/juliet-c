!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc98)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc99)
  cir.func private  @printLongLongLine(!s64i) loc(#loc100)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc101)
  cir.func  @_ZN61CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc103)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc104)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc14)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc15)
    cir.store %2, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc105)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc17)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc18)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc18)
    %6 = cir.const #cir.int<8> : !u64i loc(#loc106)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc107)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc17)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc108)
    cir.store %9, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc109)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc25)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc26)
      %12 = cir.cmp(eq, %10, %11) : !cir.ptr<!s64i>, !cir.bool loc(#loc111)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc28)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc30)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
      } loc(#loc112)
    } loc(#loc110)
    cir.scope {
      %10 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc114)
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc34)
      %12 = cir.load %11 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc34)
      cir.store %12, %10 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc114)
      cir.scope {
        %13 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc116)
        %14 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc116)
        cir.store %14, %13 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc116)
        %15 = cir.load %10 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc39)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc39)
        %17 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc40)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc40)
        %19 = cir.const #cir.int<100> : !s32i loc(#loc41)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc41)
        %21 = cir.const #cir.int<8> : !u64i loc(#loc117)
        %22 = cir.binop(mul, %20, %21) : !u64i loc(#loc118)
        cir.libc.memcpy %22 bytes from %18 to %16 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc119)
        %23 = cir.load %10 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc46)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc47)
        %25 = cir.ptr_stride(%23 : !cir.ptr<!s64i>, %24 : !s32i), !cir.ptr<!s64i> loc(#loc48)
        %26 = cir.load %25 : !cir.ptr<!s64i>, !s64i loc(#loc46)
        cir.call @printLongLongLine(%26) : (!s64i) -> () loc(#loc49)
        %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc50)
        %28 = cir.load %10 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc51)
        %29 = cir.cast(bitcast, %28 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc51)
        cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc50)
      } loc(#loc115)
    } loc(#loc113)
    cir.return loc(#loc10)
  } loc(#loc102)
  cir.func internal private  @_ZN61CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc121)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc122)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc57)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc58)
    cir.store %2, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc123)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc60)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc61)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc61)
    %6 = cir.const #cir.int<8> : !u64i loc(#loc124)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc125)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc60)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc126)
    cir.store %9, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc127)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc68)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc69)
      %12 = cir.cmp(eq, %10, %11) : !cir.ptr<!s64i>, !cir.bool loc(#loc129)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc71)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc72)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc73)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc71)
      } loc(#loc130)
    } loc(#loc128)
    cir.scope {
      %10 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc132)
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc77)
      %12 = cir.load %11 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc77)
      cir.store %12, %10 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc132)
      cir.scope {
        %13 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc134)
        %14 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc134)
        cir.store %14, %13 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc134)
        %15 = cir.load %10 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc82)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc82)
        %17 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc83)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc83)
        %19 = cir.const #cir.int<100> : !s32i loc(#loc84)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc84)
        %21 = cir.const #cir.int<8> : !u64i loc(#loc135)
        %22 = cir.binop(mul, %20, %21) : !u64i loc(#loc136)
        cir.libc.memcpy %22 bytes from %18 to %16 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc137)
        %23 = cir.load %10 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc89)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc90)
        %25 = cir.ptr_stride(%23 : !cir.ptr<!s64i>, %24 : !s32i), !cir.ptr<!s64i> loc(#loc91)
        %26 = cir.load %25 : !cir.ptr<!s64i>, !s64i loc(#loc89)
        cir.call @printLongLongLine(%26) : (!s64i) -> () loc(#loc92)
        %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc93)
        %28 = cir.load %10 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc94)
        %29 = cir.cast(bitcast, %28 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc94)
        cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc93)
      } loc(#loc133)
    } loc(#loc131)
    cir.return loc(#loc53)
  } loc(#loc120)
  cir.func  @_ZN61CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN61CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33L7goodG2BEv() : () -> () loc(#loc97)
    cir.return loc(#loc96)
  } loc(#loc138)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":24:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":42:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":26:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":26:15)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":27:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":27:26)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":28:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":28:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":30:23)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":30:30)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":30:33)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":30:47)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":30:48)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":30:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":31:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":31:33)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":31:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":31:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":31:23)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":31:24)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":31:30)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":31:29)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":32:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":41:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":33:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":33:26)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":34:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":40:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":35:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":35:37)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":37:20)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":37:26)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":37:34)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":37:38)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":37:52)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":37:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":37:53)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":38:31)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":38:36)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":38:37)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":38:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":39:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":39:18)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":49:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":67:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":51:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":51:15)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":52:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":52:26)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":53:12)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":53:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":55:23)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":55:30)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":55:34)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":55:48)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":55:49)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":55:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":56:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":56:33)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":56:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":56:17)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":56:23)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":56:24)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":56:30)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":56:29)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":57:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":66:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":58:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":58:26)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":59:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":65:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":60:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":60:37)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":62:20)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":62:26)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":62:34)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":62:38)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":62:52)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":62:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":62:53)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":63:31)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":63:36)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":63:37)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":63:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":64:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":64:18)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":69:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":72:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_33.cpp":71:5)
#loc98 = loc(fused[#loc1, #loc2])
#loc99 = loc(fused[#loc3, #loc4])
#loc100 = loc(fused[#loc5, #loc6])
#loc101 = loc(fused[#loc7, #loc8])
#loc102 = loc(fused[#loc9, #loc10])
#loc103 = loc(fused[#loc11, #loc12])
#loc104 = loc(fused[#loc13, #loc14])
#loc105 = loc(fused[#loc16, #loc15])
#loc106 = loc(fused[#loc19, #loc20])
#loc107 = loc(fused[#loc18, #loc20])
#loc108 = loc(fused[#loc17, #loc21])
#loc109 = loc(fused[#loc22, #loc21])
#loc110 = loc(fused[#loc23, #loc24])
#loc111 = loc(fused[#loc25, #loc26])
#loc112 = loc(fused[#loc27, #loc24])
#loc113 = loc(fused[#loc31, #loc32])
#loc114 = loc(fused[#loc33, #loc34])
#loc115 = loc(fused[#loc35, #loc36])
#loc116 = loc(fused[#loc37, #loc38])
#loc117 = loc(fused[#loc42, #loc43])
#loc118 = loc(fused[#loc41, #loc43])
#loc119 = loc(fused[#loc44, #loc45])
#loc120 = loc(fused[#loc52, #loc53])
#loc121 = loc(fused[#loc54, #loc55])
#loc122 = loc(fused[#loc56, #loc57])
#loc123 = loc(fused[#loc59, #loc58])
#loc124 = loc(fused[#loc62, #loc63])
#loc125 = loc(fused[#loc61, #loc63])
#loc126 = loc(fused[#loc60, #loc64])
#loc127 = loc(fused[#loc65, #loc64])
#loc128 = loc(fused[#loc66, #loc67])
#loc129 = loc(fused[#loc68, #loc69])
#loc130 = loc(fused[#loc70, #loc67])
#loc131 = loc(fused[#loc74, #loc75])
#loc132 = loc(fused[#loc76, #loc77])
#loc133 = loc(fused[#loc78, #loc79])
#loc134 = loc(fused[#loc80, #loc81])
#loc135 = loc(fused[#loc85, #loc86])
#loc136 = loc(fused[#loc84, #loc86])
#loc137 = loc(fused[#loc87, #loc88])
#loc138 = loc(fused[#loc95, #loc96])
