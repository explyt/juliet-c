!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc131)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc132)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc133)
  cir.func private @printLongLongLine(!s64i) loc(#loc134)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc135)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc137)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc138)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc140)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc140)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc19)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc24)
        %7 = cir.const #cir.int<50> : !s32i loc(#loc25)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc25)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc142)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc143)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc144)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc145)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc32)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc33)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !cir.bool loc(#loc147)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc35)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc36)
            %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc37)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc35)
          } loc(#loc148)
        } loc(#loc146)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc38)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc39)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc39)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc149)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc150)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc38)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc151)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc152)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc46)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc47)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc47)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !cir.bool loc(#loc154)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc49)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc50)
            %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc51)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc49)
          } loc(#loc155)
        } loc(#loc153)
      } loc(#loc141)
    } loc(#loc139)
    cir.scope {
      %2 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc157)
      %3 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc157)
      cir.store %3, %2 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc157)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc56)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc56)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc57)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc57)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc58)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc58)
      %10 = cir.const #cir.int<8> : !u64i loc(#loc158)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc159)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc160)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc63)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc64)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s64i>, %13 : !s32i), !cir.ptr<!s64i> loc(#loc65)
      %15 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc63)
      cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc66)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc67)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc68)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc68)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc67)
    } loc(#loc156)
    cir.return loc(#loc12)
  } loc(#loc136)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc162)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc71)
    cir.return loc(#loc70)
  } loc(#loc161)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc164)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc77)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc165)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc167)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc167)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc81)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc81)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc86)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc87)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc87)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc169)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc170)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc86)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc171)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc172)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc94)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc95)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc95)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !cir.bool loc(#loc174)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc97)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc98)
            %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc99)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc97)
          } loc(#loc175)
        } loc(#loc173)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc100)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc101)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc101)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc176)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc177)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc100)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc178)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc179)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc108)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc109)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc109)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !cir.bool loc(#loc181)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc111)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc112)
            %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc113)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc111)
          } loc(#loc182)
        } loc(#loc180)
      } loc(#loc168)
    } loc(#loc166)
    cir.scope {
      %2 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc184)
      %3 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc184)
      cir.store %3, %2 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc184)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc118)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc118)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc119)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc119)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc120)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc120)
      %10 = cir.const #cir.int<8> : !u64i loc(#loc185)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc186)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc187)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc125)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc126)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s64i>, %13 : !s32i), !cir.ptr<!s64i> loc(#loc127)
      %15 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc125)
      cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc128)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc129)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc130)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc130)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc129)
    } loc(#loc183)
    cir.return loc(#loc74)
  } loc(#loc163)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":21:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":44:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":23:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":23:15)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":24:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":24:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":25:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":36:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":25:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":25:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":30:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":32:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":28:27)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":28:34)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":28:37)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":28:51)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":28:52)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":28:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":29:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":29:37)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":29:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":29:21)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":29:27)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":29:28)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":29:34)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":29:33)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":34:27)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":34:34)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":34:38)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":34:52)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":34:53)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":34:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":35:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":35:37)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":35:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":35:21)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":35:27)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":35:28)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":35:34)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":35:33)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":37:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":43:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":38:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":38:33)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":40:16)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":40:22)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":40:30)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":40:34)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":40:48)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":40:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":40:49)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":41:27)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":41:32)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":41:33)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":41:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":42:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":42:14)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":77:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":80:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":79:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":79:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":52:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":75:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":54:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":54:15)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":55:12)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":55:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":56:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":67:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":56:8)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":56:33)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":57:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":61:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":63:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":59:27)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":59:34)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":59:38)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":59:52)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":59:53)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":59:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":60:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":60:37)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":60:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":60:21)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":60:27)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":60:28)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":60:34)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":60:33)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":65:27)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":65:34)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":65:38)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":65:52)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":65:53)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":65:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":66:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":66:37)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":66:13)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":66:21)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":66:27)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":66:28)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":66:34)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":66:33)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":68:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":74:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":69:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":69:33)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":71:16)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":71:22)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":71:30)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":71:34)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":71:48)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":71:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":71:49)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":72:27)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":72:32)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":72:33)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":72:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":73:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c":73:14)
#loc131 = loc(fused[#loc1, #loc2])
#loc132 = loc(fused[#loc3, #loc4])
#loc133 = loc(fused[#loc5, #loc6])
#loc134 = loc(fused[#loc7, #loc8])
#loc135 = loc(fused[#loc9, #loc10])
#loc136 = loc(fused[#loc11, #loc12])
#loc137 = loc(fused[#loc13, #loc14])
#loc138 = loc(fused[#loc16, #loc15])
#loc139 = loc(fused[#loc17, #loc18])
#loc140 = loc(fused[#loc19, #loc20])
#loc141 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc142 = loc(fused[#loc26, #loc27])
#loc143 = loc(fused[#loc25, #loc27])
#loc144 = loc(fused[#loc24, #loc28])
#loc145 = loc(fused[#loc29, #loc28])
#loc146 = loc(fused[#loc30, #loc31])
#loc147 = loc(fused[#loc32, #loc33])
#loc148 = loc(fused[#loc34, #loc31])
#loc149 = loc(fused[#loc40, #loc41])
#loc150 = loc(fused[#loc39, #loc41])
#loc151 = loc(fused[#loc38, #loc42])
#loc152 = loc(fused[#loc43, #loc42])
#loc153 = loc(fused[#loc44, #loc45])
#loc154 = loc(fused[#loc46, #loc47])
#loc155 = loc(fused[#loc48, #loc45])
#loc156 = loc(fused[#loc52, #loc53])
#loc157 = loc(fused[#loc54, #loc55])
#loc158 = loc(fused[#loc59, #loc60])
#loc159 = loc(fused[#loc58, #loc60])
#loc160 = loc(fused[#loc61, #loc62])
#loc161 = loc(fused[#loc69, #loc70])
#loc162 = loc(fused[#loc71, #loc72])
#loc163 = loc(fused[#loc73, #loc74])
#loc164 = loc(fused[#loc75, #loc76])
#loc165 = loc(fused[#loc78, #loc77])
#loc166 = loc(fused[#loc79, #loc80])
#loc167 = loc(fused[#loc81, #loc82])
#loc168 = loc(fused[#loc83, #loc84, #loc85, #loc80])
#loc169 = loc(fused[#loc88, #loc89])
#loc170 = loc(fused[#loc87, #loc89])
#loc171 = loc(fused[#loc86, #loc90])
#loc172 = loc(fused[#loc91, #loc90])
#loc173 = loc(fused[#loc92, #loc93])
#loc174 = loc(fused[#loc94, #loc95])
#loc175 = loc(fused[#loc96, #loc93])
#loc176 = loc(fused[#loc102, #loc103])
#loc177 = loc(fused[#loc101, #loc103])
#loc178 = loc(fused[#loc100, #loc104])
#loc179 = loc(fused[#loc105, #loc104])
#loc180 = loc(fused[#loc106, #loc107])
#loc181 = loc(fused[#loc108, #loc109])
#loc182 = loc(fused[#loc110, #loc107])
#loc183 = loc(fused[#loc114, #loc115])
#loc184 = loc(fused[#loc116, #loc117])
#loc185 = loc(fused[#loc121, #loc122])
#loc186 = loc(fused[#loc120, #loc122])
#loc187 = loc(fused[#loc123, #loc124])
