!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc12 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":33:21)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":33:25)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":49:13)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":64:26)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":64:30)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":74:23)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":92:13)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":98:26)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":98:30)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":103:23)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":121:13)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":127:25)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":127:29)
#true = #cir.bool<true> : !cir.bool
#loc160 = loc(fused[#loc12, #loc13])
#loc174 = loc(fused[#loc50, #loc51])
#loc188 = loc(fused[#loc91, #loc92])
#loc202 = loc(fused[#loc131, #loc132])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc155)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc156)
  cir.func private @usleep(!u32i) -> !s32i loc(#loc157)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc158)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Sleep time possibly too long\00" : !cir.array<!s8i x 29>> : !cir.array<!s8i x 29> {alignment = 1 : i64} loc(#loc9)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc12, #loc13])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc160)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc14)
    cir.br ^bb1 loc(#loc161)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc156)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc162)
  ^bb2:  // pred: ^bb1
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc19)
    %6 = cir.call @usleep(%5) : (!u32i) -> !s32i loc(#loc20)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc9)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc21)
    cir.br ^bb3 loc(#loc16)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc16)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc11)
  } loc(#loc159)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc27)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc29)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc29)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc29)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc29)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc29)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc29)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc29)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc29)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc29)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc29)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc29)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc29)
    cir.br ^bb3(%18 : !u32i) loc(#loc29)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc29)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc29)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc29)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc29)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc29)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc29)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc29)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc29)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc29)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc29)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc29)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc29)
    cir.br ^bb3(%34 : !u32i) loc(#loc29)
  ^bb3(%35: !u32i loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":49:13)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc29)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc29)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %38 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc156)
    cir.store %37, %38 : !s32i, !cir.ptr<!s32i> loc(#loc167)
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    cir.call @badSink(%39) : (!s32i) -> () loc(#loc34)
    cir.return loc(#loc23)
  } loc(#loc163)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc170)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc171)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc36)
  } loc(#loc168)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Sleep time OK\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Sleep time too long\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc47)
  cir.func internal private @goodB2G1Sink(%arg0: !s32i loc(fused[#loc50, #loc51])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc174)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc52)
    cir.br ^bb1 loc(#loc175)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc172)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc55)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc176)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc45)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    cir.br ^bb17 loc(#loc57)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc177)
  ^bb4:  // pred: ^bb3
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    %7 = cir.const #cir.int<0> : !s32i loc(#loc63)
    %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc178)
    cir.brcond %8 ^bb5, ^bb10 loc(#loc64)
  ^bb5:  // pred: ^bb4
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    %10 = cir.const #cir.int<2000> : !s32i loc(#loc66)
    %11 = cir.cmp(le, %9, %10) : !s32i, !cir.bool loc(#loc179)
    cir.brcond %11 ^bb6, ^bb7 loc(#loc64)
  ^bb6:  // pred: ^bb5
    %12 = cir.const #true loc(#loc64)
    cir.br ^bb8(%12 : !cir.bool) loc(#loc64)
  ^bb7:  // pred: ^bb5
    %13 = cir.const #false loc(#loc64)
    cir.br ^bb8(%13 : !cir.bool) loc(#loc64)
  ^bb8(%14: !cir.bool loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":74:23)):  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc64)
  ^bb9:  // pred: ^bb8
    cir.br ^bb11(%14 : !cir.bool) loc(#loc64)
  ^bb10:  // pred: ^bb4
    %15 = cir.const #false loc(#loc64)
    cir.br ^bb11(%15 : !cir.bool) loc(#loc64)
  ^bb11(%16: !cir.bool loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":74:23)):  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc64)
  ^bb12:  // pred: ^bb11
    cir.brcond %16 ^bb13, ^bb14 loc(#loc180)
  ^bb13:  // pred: ^bb12
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc70)
    %19 = cir.call @usleep(%18) : (!u32i) -> !s32i loc(#loc71)
    %20 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc46)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    cir.br ^bb15 loc(#loc68)
  ^bb14:  // pred: ^bb12
    %22 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc47)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    cir.br ^bb15 loc(#loc61)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc61)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc54)
  ^bb17:  // 2 preds: ^bb2, ^bb16
    cir.br ^bb18 loc(#loc54)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc49)
  } loc(#loc173)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc79)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc81)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc81)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc81)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc81)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc81)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc81)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc81)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc81)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc81)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc81)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc81)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc81)
    cir.br ^bb3(%18 : !u32i) loc(#loc81)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc81)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc81)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc81)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc81)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc81)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc81)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc81)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc81)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc81)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc81)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc81)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc81)
    cir.br ^bb3(%34 : !u32i) loc(#loc81)
  ^bb3(%35: !u32i loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":92:13)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc81)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc81)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    %37 = cir.const #cir.int<0> : !s32i loc(#loc83)
    %38 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc172)
    cir.store %37, %38 : !s32i, !cir.ptr<!s32i> loc(#loc185)
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    cir.call @goodB2G1Sink(%39) : (!s32i) -> () loc(#loc86)
    cir.return loc(#loc75)
  } loc(#loc181)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc186)
  cir.func internal private @goodB2G2Sink(%arg0: !s32i loc(fused[#loc91, #loc92])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc188)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    cir.br ^bb1 loc(#loc189)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc186)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc96)
    cir.brcond %3 ^bb2, ^bb16 loc(#loc190)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc191)
  ^bb3:  // pred: ^bb2
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc101)
    %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc192)
    cir.brcond %6 ^bb4, ^bb9 loc(#loc102)
  ^bb4:  // pred: ^bb3
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    %8 = cir.const #cir.int<2000> : !s32i loc(#loc104)
    %9 = cir.cmp(le, %7, %8) : !s32i, !cir.bool loc(#loc193)
    cir.brcond %9 ^bb5, ^bb6 loc(#loc102)
  ^bb5:  // pred: ^bb4
    %10 = cir.const #true loc(#loc102)
    cir.br ^bb7(%10 : !cir.bool) loc(#loc102)
  ^bb6:  // pred: ^bb4
    %11 = cir.const #false loc(#loc102)
    cir.br ^bb7(%11 : !cir.bool) loc(#loc102)
  ^bb7(%12: !cir.bool loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":103:23)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc102)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10(%12 : !cir.bool) loc(#loc102)
  ^bb9:  // pred: ^bb3
    %13 = cir.const #false loc(#loc102)
    cir.br ^bb10(%13 : !cir.bool) loc(#loc102)
  ^bb10(%14: !cir.bool loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":103:23)):  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc102)
  ^bb11:  // pred: ^bb10
    cir.brcond %14 ^bb12, ^bb13 loc(#loc194)
  ^bb12:  // pred: ^bb11
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc108)
    %17 = cir.call @usleep(%16) : (!u32i) -> !s32i loc(#loc109)
    %18 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc110)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc110)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc111)
    cir.br ^bb14 loc(#loc106)
  ^bb13:  // pred: ^bb11
    %20 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc112)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc112)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc113)
    cir.br ^bb14 loc(#loc99)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc99)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc95)
  ^bb16:  // 2 preds: ^bb1, ^bb15
    cir.br ^bb17 loc(#loc95)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc90)
  } loc(#loc187)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc196)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc119)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc121)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc121)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc121)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc121)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc121)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc121)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc121)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc121)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc121)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc121)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc121)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc121)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc121)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc121)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc121)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc121)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc121)
    cir.br ^bb3(%18 : !u32i) loc(#loc121)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc121)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc121)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc121)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc121)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc121)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc121)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc121)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc121)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc121)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc121)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc121)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc121)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc121)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc121)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc121)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc121)
    cir.br ^bb3(%34 : !u32i) loc(#loc121)
  ^bb3(%35: !u32i loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":121:13)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc121)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc121)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc123)
    %38 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc186)
    cir.store %37, %38 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    cir.call @goodB2G2Sink(%39) : (!s32i) -> () loc(#loc126)
    cir.return loc(#loc115)
  } loc(#loc195)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc200)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc131, #loc132])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc202)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc133)
    cir.br ^bb1 loc(#loc203)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc200)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc136)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc204)
  ^bb2:  // pred: ^bb1
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc138)
    %6 = cir.call @usleep(%5) : (!u32i) -> !s32i loc(#loc139)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc140)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc140)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc141)
    cir.br ^bb3 loc(#loc135)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc135)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc130)
  } loc(#loc201)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc206)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc146)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc147)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    %3 = cir.const #cir.int<20> : !s32i loc(#loc149)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc208)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc151)
    %5 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc200)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc153)
    cir.call @goodG2BSink(%6) : (!s32i) -> () loc(#loc154)
    cir.return loc(#loc143)
  } loc(#loc205)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_21.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":31:1)
#loc4 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":31:24)
#loc5 = loc("/usr/include/unistd.h":480:1)
#loc6 = loc("/usr/include/unistd.h":480:43)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":39:19)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":33:1)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":41:1)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":34:1)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":35:5)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":40:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":35:8)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":36:5)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":38:15)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":38:9)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":39:9)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":43:1)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":52:1)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":45:5)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":45:9)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":47:14)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":47:13)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":47:5)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":49:5)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":50:17)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":50:5)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":51:13)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":51:5)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":148:1)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":153:1)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":150:5)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":150:14)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":151:5)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":151:14)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":152:5)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":152:13)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":59:1)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":59:29)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":69:19)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":77:23)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":81:23)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":64:1)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":84:1)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":65:1)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":66:5)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":83:5)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":66:8)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":67:5)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":70:5)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":72:5)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":69:9)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":74:9)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":82:9)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":74:13)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":74:21)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":74:26)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":74:35)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":75:9)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":78:9)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":80:9)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":76:19)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":76:13)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":77:13)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":81:13)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":86:1)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":95:1)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":88:5)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":88:9)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":90:14)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":90:13)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":90:5)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":92:5)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":93:22)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":93:5)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":94:18)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":94:5)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":60:1)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":60:29)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":98:1)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":113:1)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":99:1)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":100:5)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":112:5)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":100:8)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":101:5)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":103:9)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":111:9)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":103:13)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":103:21)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":103:26)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":103:35)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":104:9)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":107:9)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":109:9)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":105:19)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":105:13)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":106:23)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":106:13)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":110:23)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":110:13)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":115:1)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":124:1)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":117:5)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":117:9)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":119:14)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":119:13)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":119:5)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":121:5)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":122:22)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":122:5)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":123:18)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":123:5)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":61:1)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":61:28)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":127:1)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":135:1)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":128:1)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":129:5)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":134:5)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":129:8)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":130:5)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":132:15)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":132:9)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":133:19)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":133:9)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":137:1)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":146:1)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":139:5)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":139:9)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":141:14)
#loc147 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":141:13)
#loc148 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":141:5)
#loc149 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":143:13)
#loc150 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":143:5)
#loc151 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":144:21)
#loc152 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":144:5)
#loc153 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":145:17)
#loc154 = loc("CWE400_Resource_Exhaustion__rand_sleep_21.c":145:5)
#loc155 = loc(fused[#loc1, #loc2])
#loc156 = loc(fused[#loc3, #loc4])
#loc157 = loc(fused[#loc5, #loc6])
#loc158 = loc(fused[#loc7, #loc8])
#loc159 = loc(fused[#loc10, #loc11])
#loc161 = loc(fused[#loc15, #loc16])
#loc162 = loc(fused[#loc18, #loc16])
#loc163 = loc(fused[#loc22, #loc23])
#loc164 = loc(fused[#loc24, #loc25])
#loc165 = loc(fused[#loc28, #loc26])
#loc166 = loc(fused[#loc30, #loc29])
#loc167 = loc(fused[#loc32, #loc31])
#loc168 = loc(fused[#loc35, #loc36])
#loc169 = loc(fused[#loc37, #loc38])
#loc170 = loc(fused[#loc39, #loc40])
#loc171 = loc(fused[#loc41, #loc42])
#loc172 = loc(fused[#loc43, #loc44])
#loc173 = loc(fused[#loc48, #loc49])
#loc175 = loc(fused[#loc53, #loc54])
#loc176 = loc(fused[#loc56, #loc57, #loc58, #loc54])
#loc177 = loc(fused[#loc60, #loc61])
#loc178 = loc(fused[#loc62, #loc63])
#loc179 = loc(fused[#loc65, #loc66])
#loc180 = loc(fused[#loc67, #loc68, #loc69, #loc61])
#loc181 = loc(fused[#loc74, #loc75])
#loc182 = loc(fused[#loc76, #loc77])
#loc183 = loc(fused[#loc80, #loc78])
#loc184 = loc(fused[#loc82, #loc81])
#loc185 = loc(fused[#loc84, #loc83])
#loc186 = loc(fused[#loc87, #loc88])
#loc187 = loc(fused[#loc89, #loc90])
#loc189 = loc(fused[#loc94, #loc95])
#loc190 = loc(fused[#loc97, #loc95])
#loc191 = loc(fused[#loc98, #loc99])
#loc192 = loc(fused[#loc100, #loc101])
#loc193 = loc(fused[#loc103, #loc104])
#loc194 = loc(fused[#loc105, #loc106, #loc107, #loc99])
#loc195 = loc(fused[#loc114, #loc115])
#loc196 = loc(fused[#loc116, #loc117])
#loc197 = loc(fused[#loc120, #loc118])
#loc198 = loc(fused[#loc122, #loc121])
#loc199 = loc(fused[#loc124, #loc123])
#loc200 = loc(fused[#loc127, #loc128])
#loc201 = loc(fused[#loc129, #loc130])
#loc203 = loc(fused[#loc134, #loc135])
#loc204 = loc(fused[#loc137, #loc135])
#loc205 = loc(fused[#loc142, #loc143])
#loc206 = loc(fused[#loc144, #loc145])
#loc207 = loc(fused[#loc148, #loc146])
#loc208 = loc(fused[#loc150, #loc149])
#loc209 = loc(fused[#loc152, #loc151])
