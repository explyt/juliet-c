!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_scanf_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_scanf(!cir.ptr<!s8i>, ...) -> !s32i loc(#loc46)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%99s" : !cir.array<!s8i x 4>, trailing_zeros> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_scanf_16_bad() extra(#fn_attr) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc8)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc8)
        cir.condition(%1) loc(#loc8)
      } do {
        cir.scope {
          %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc50)
          %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc51)
          %2 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc50)
          cir.store %2, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc50)
          %3 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc14)
          cir.store %3, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc51)
          %4 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc15)
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc3)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc3)
          %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
          %8 = cir.call @__isoc99_scanf(%6, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc15)
        } loc(#loc49)
        cir.break loc(#loc17)
      } loc(#loc48)
    } loc(#loc48)
    cir.return loc(#loc5)
  } loc(#loc47)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_scanf_16_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc53)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc20)
    cir.return loc(#loc19)
  } loc(#loc52)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc54)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"scanf failed!\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc24)
  cir.func no_proto internal private  @good1() extra(#fn_attr) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc29)
        cir.condition(%1) loc(#loc29)
      } do {
        cir.scope {
          %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc58)
          %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc59)
          %2 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc58)
          cir.store %2, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc58)
          %3 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc35)
          cir.store %3, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc59)
          cir.scope {
            %4 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc38)
            %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc39)
            %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc39)
            %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
            %8 = cir.call @__isoc99_scanf(%6, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc38)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc41)
            %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc41)
            %11 = cir.cmp(eq, %8, %10) : !s32i, !s32i loc(#loc61)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc42)
            cir.if %12 {
              %13 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc24)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc24)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc44)
            } loc(#loc62)
          } loc(#loc60)
        } loc(#loc57)
        cir.break loc(#loc45)
      } loc(#loc56)
    } loc(#loc56)
    cir.return loc(#loc26)
  } loc(#loc55)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_scanf_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":466:1)
#loc2 = loc("/usr/include/stdio.h":466:12)
#loc3 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":34:19)
#loc4 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":24:1)
#loc5 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":38:1)
#loc6 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":26:5)
#loc7 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":37:5)
#loc8 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":26:11)
#loc9 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":28:9)
#loc10 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":35:9)
#loc11 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":31:13)
#loc12 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":31:36)
#loc13 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":32:13)
#loc14 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":32:27)
#loc15 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":34:13)
#loc16 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":34:29)
#loc17 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":36:9)
#loc18 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":64:1)
#loc19 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":67:1)
#loc20 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":66:5)
#loc21 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":66:11)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":57:27)
#loc25 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":45:1)
#loc26 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":62:1)
#loc27 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":47:5)
#loc28 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":61:5)
#loc29 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":47:11)
#loc30 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":49:9)
#loc31 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":59:9)
#loc32 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":52:13)
#loc33 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":52:36)
#loc34 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":53:13)
#loc35 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":53:27)
#loc36 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":55:13)
#loc37 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":58:13)
#loc38 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":55:17)
#loc39 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":55:23)
#loc40 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":55:33)
#loc41 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":55:42)
#loc42 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":55:39)
#loc43 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":56:13)
#loc44 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":57:17)
#loc45 = loc("CWE252_Unchecked_Return_Value__char_scanf_16.c":60:9)
#loc46 = loc(fused[#loc1, #loc2])
#loc47 = loc(fused[#loc4, #loc5])
#loc48 = loc(fused[#loc6, #loc7])
#loc49 = loc(fused[#loc9, #loc10])
#loc50 = loc(fused[#loc11, #loc12])
#loc51 = loc(fused[#loc13, #loc14])
#loc52 = loc(fused[#loc18, #loc19])
#loc53 = loc(fused[#loc20, #loc21])
#loc54 = loc(fused[#loc22, #loc23])
#loc55 = loc(fused[#loc25, #loc26])
#loc56 = loc(fused[#loc27, #loc28])
#loc57 = loc(fused[#loc30, #loc31])
#loc58 = loc(fused[#loc32, #loc33])
#loc59 = loc(fused[#loc34, #loc35])
#loc60 = loc(fused[#loc36, #loc37])
#loc61 = loc(fused[#loc38, #loc41])
#loc62 = loc(fused[#loc43, #loc37])
