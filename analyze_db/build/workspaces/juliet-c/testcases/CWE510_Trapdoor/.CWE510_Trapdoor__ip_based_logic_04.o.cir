!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc382)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc383)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc384)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc385)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc386)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc387)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc388)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"192.168.30.123\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc15)
  cir.func private @inet_ntoa(!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc389)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc390)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc21)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc391)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc24)
  cir.func private @close(!s32i) -> !s32i loc(#loc392)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_04_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc31)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc31)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc397)
          %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc398)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc399)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc400)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc401)
          %7 = cir.const #cir.int<16> : !u64i loc(#loc402)
          %8 = cir.cast(integral, %7 : !u64i), !s32i loc(#loc402)
          cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc399)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc41)
          %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc41)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc400)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc43)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc43)
          cir.store %12, %6 : !s32i, !cir.ptr<!s32i> loc(#loc401)
          cir.scope {
            cir.do {
              cir.scope {
                %13 = cir.const #cir.int<2> : !s32i loc(#loc49)
                %14 = cir.const #cir.int<1> : !s32i loc(#loc50)
                %15 = cir.const #cir.int<6> : !s32i loc(#loc51)
                %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc52)
                cir.store %16, %5 : !s32i, !cir.ptr<!s32i> loc(#loc405)
                cir.scope {
                  %35 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc57)
                  %36 = cir.const #cir.int<1> : !s32i loc(#loc58)
                  %37 = cir.unary(minus, %36) nsw : !s32i, !s32i loc(#loc58)
                  %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc407)
                  cir.if %38 {
                    cir.break loc(#loc60)
                  } loc(#loc408)
                } loc(#loc406)
                %17 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc409)
                %18 = cir.const #cir.int<0> : !s32i loc(#loc63)
                %19 = cir.const #cir.int<16> : !u64i loc(#loc410)
                cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc411)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc68)
                %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc68)
                %22 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
                cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc412)
                %23 = cir.const #cir.int<0> : !s32i loc(#loc71)
                %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc71)
                %25 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
                %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
                cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc413)
                %27 = cir.const #cir.int<20000> : !s32i loc(#loc75)
                %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc75)
                %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc76)
                %30 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
                cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc414)
                cir.scope {
                  %35 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc82)
                  %36 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc416)
                  %37 = cir.const #cir.int<16> : !u64i loc(#loc417)
                  %38 = cir.cast(integral, %37 : !u64i), !u32i loc(#loc417)
                  %39 = cir.call @bind(%35, %36, %38) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc87)
                  %40 = cir.const #cir.int<1> : !s32i loc(#loc88)
                  %41 = cir.unary(minus, %40) nsw : !s32i, !s32i loc(#loc88)
                  %42 = cir.cmp(eq, %39, %41) : !s32i, !cir.bool loc(#loc418)
                  cir.if %42 {
                    cir.break loc(#loc90)
                  } loc(#loc419)
                } loc(#loc415)
                cir.scope {
                  %35 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc93)
                  %36 = cir.const #cir.int<5> : !s32i loc(#loc94)
                  %37 = cir.call @listen(%35, %36) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc95)
                  %38 = cir.const #cir.int<1> : !s32i loc(#loc96)
                  %39 = cir.unary(minus, %38) nsw : !s32i, !s32i loc(#loc96)
                  %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc421)
                  cir.if %40 {
                    cir.break loc(#loc98)
                  } loc(#loc422)
                } loc(#loc420)
                %31 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc99)
                %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc100)
                %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc101)
                %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc102)
                cir.store %34, %6 : !s32i, !cir.ptr<!s32i> loc(#loc423)
                cir.scope {
                  %35 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                  %36 = cir.const #cir.int<1> : !s32i loc(#loc108)
                  %37 = cir.unary(minus, %36) nsw : !s32i, !s32i loc(#loc108)
                  %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc425)
                  cir.if %38 {
                    cir.break loc(#loc110)
                  } loc(#loc426)
                } loc(#loc424)
                cir.scope {
                  %35 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                  %36 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc428)
                  %37 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc429)
                  %38 = cir.call @getsockname(%35, %36, %37) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc118)
                  %39 = cir.const #cir.int<1> : !s32i loc(#loc119)
                  %40 = cir.unary(minus, %39) nsw : !s32i, !s32i loc(#loc120)
                  %41 = cir.cmp(eq, %38, %40) : !s32i, !cir.bool loc(#loc430)
                  cir.if %41 {
                    cir.break loc(#loc122)
                  } loc(#loc431)
                } loc(#loc427)
                cir.scope {
                  %35 = cir.get_global @strcmp : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i>> loc(#loc125)
                  %36 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc15)
                  %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc15)
                  %38 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
                  %39 = cir.load %38 : !cir.ptr<!ty_in_addr>, !ty_in_addr loc(#loc126)
                  %40 = cir.call @inet_ntoa(%39) : (!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc126)
                  %41 = cir.call @strcmp(%37, %40) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc125)
                  %42 = cir.const #cir.int<0> : !s32i loc(#loc127)
                  %43 = cir.cmp(eq, %41, %42) : !s32i, !cir.bool loc(#loc433)
                  cir.if %43 {
                    cir.scope {
                      %44 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc133)
                      %45 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc20)
                      %46 = cir.cast(array_to_ptrdecay, %45 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc20)
                      %47 = cir.cast(bitcast, %46 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
                      %48 = cir.const #cir.int<15> : !u64i loc(#loc436)
                      %49 = cir.const #cir.int<0> : !s32i loc(#loc136)
                      %50 = cir.call @send(%44, %47, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc137)
                      %51 = cir.const #cir.int<1> : !s32i loc(#loc138)
                      %52 = cir.unary(minus, %51) nsw : !s32i, !s32i loc(#loc138)
                      %53 = cir.cast(integral, %52 : !s32i), !s64i loc(#loc138)
                      %54 = cir.cmp(eq, %50, %53) : !s64i, !cir.bool loc(#loc437)
                      cir.if %54 {
                        cir.break loc(#loc140)
                      } loc(#loc438)
                    } loc(#loc435)
                  } else {
                    cir.scope {
                      %44 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc143)
                      %45 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc21)
                      %46 = cir.cast(array_to_ptrdecay, %45 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc21)
                      %47 = cir.cast(bitcast, %46 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc21)
                      %48 = cir.const #cir.int<8> : !u64i loc(#loc440)
                      %49 = cir.const #cir.int<0> : !s32i loc(#loc146)
                      %50 = cir.call @send(%44, %47, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc147)
                      %51 = cir.const #cir.int<1> : !s32i loc(#loc148)
                      %52 = cir.unary(minus, %51) nsw : !s32i, !s32i loc(#loc148)
                      %53 = cir.cast(integral, %52 : !s32i), !s64i loc(#loc148)
                      %54 = cir.cmp(eq, %50, %53) : !s64i, !cir.bool loc(#loc441)
                      cir.if %54 {
                        %55 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc24)
                        %56 = cir.cast(array_to_ptrdecay, %55 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc24)
                        cir.call @printLine(%56) : (!cir.ptr<!s8i>) -> () loc(#loc150)
                      } loc(#loc442)
                    } loc(#loc439)
                  } loc(#loc434)
                } loc(#loc432)
              } loc(#loc404)
              cir.yield loc(#loc46)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc151)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc151)
              cir.condition(%14) loc(#loc151)
            } loc(#loc403)
          } loc(#loc403)
          cir.scope {
            %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc154)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc155)
            %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc155)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc444)
            cir.if %16 {
              %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc157)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc158)
            } loc(#loc445)
          } loc(#loc443)
          cir.scope {
            %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc161)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc162)
            %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc162)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc447)
            cir.if %16 {
              %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc164)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc165)
            } loc(#loc448)
          } loc(#loc446)
        } loc(#loc396)
      } loc(#loc395)
    } loc(#loc394)
    cir.return loc(#loc28)
  } loc(#loc393)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc450)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc168)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc451)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc170)
    cir.return loc(#loc167)
  } loc(#loc449)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc172)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<0> : !s32i loc(#loc177)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc177)
      cir.if %1 {
        %2 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc172)
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc172)
        cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc181)
      } else {
        cir.scope {
          %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc456)
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc457)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc458)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc187)
          %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc187)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc457)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc189)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc189)
          cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc458)
          cir.scope {
            cir.do {
              cir.scope {
                %9 = cir.const #cir.int<2> : !s32i loc(#loc194)
                %10 = cir.const #cir.int<1> : !s32i loc(#loc195)
                %11 = cir.const #cir.int<6> : !s32i loc(#loc196)
                %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc197)
                cir.store %12, %3 : !s32i, !cir.ptr<!s32i> loc(#loc461)
                cir.scope {
                  %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc202)
                  %32 = cir.const #cir.int<1> : !s32i loc(#loc203)
                  %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc203)
                  %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc463)
                  cir.if %34 {
                    cir.break loc(#loc205)
                  } loc(#loc464)
                } loc(#loc462)
                %13 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc465)
                %14 = cir.const #cir.int<0> : !s32i loc(#loc208)
                %15 = cir.const #cir.int<16> : !u64i loc(#loc466)
                cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc467)
                %16 = cir.const #cir.int<2> : !s32i loc(#loc213)
                %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc213)
                %18 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
                cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc468)
                %19 = cir.const #cir.int<0> : !s32i loc(#loc215)
                %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc215)
                %21 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
                %22 = cir.get_member %21[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
                cir.store %20, %22 : !u32i, !cir.ptr<!u32i> loc(#loc469)
                %23 = cir.const #cir.int<20000> : !s32i loc(#loc217)
                %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc217)
                %25 = cir.call @htons(%24) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc218)
                %26 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
                cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc470)
                cir.scope {
                  %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc223)
                  %32 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc472)
                  %33 = cir.const #cir.int<16> : !u64i loc(#loc473)
                  %34 = cir.cast(integral, %33 : !u64i), !u32i loc(#loc473)
                  %35 = cir.call @bind(%31, %32, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc228)
                  %36 = cir.const #cir.int<1> : !s32i loc(#loc229)
                  %37 = cir.unary(minus, %36) nsw : !s32i, !s32i loc(#loc229)
                  %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc474)
                  cir.if %38 {
                    cir.break loc(#loc231)
                  } loc(#loc475)
                } loc(#loc471)
                cir.scope {
                  %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc234)
                  %32 = cir.const #cir.int<5> : !s32i loc(#loc235)
                  %33 = cir.call @listen(%31, %32) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc236)
                  %34 = cir.const #cir.int<1> : !s32i loc(#loc237)
                  %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc237)
                  %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc477)
                  cir.if %36 {
                    cir.break loc(#loc239)
                  } loc(#loc478)
                } loc(#loc476)
                %27 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc240)
                %28 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc241)
                %29 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc242)
                %30 = cir.call @accept(%27, %28, %29) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc243)
                cir.store %30, %4 : !s32i, !cir.ptr<!s32i> loc(#loc479)
                cir.scope {
                  %31 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc248)
                  %32 = cir.const #cir.int<1> : !s32i loc(#loc249)
                  %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc249)
                  %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc481)
                  cir.if %34 {
                    cir.break loc(#loc251)
                  } loc(#loc482)
                } loc(#loc480)
                cir.scope {
                  %31 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc254)
                  %32 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc255)
                  %33 = cir.cast(array_to_ptrdecay, %32 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc255)
                  %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc255)
                  %35 = cir.const #cir.int<8> : !u64i loc(#loc484)
                  %36 = cir.const #cir.int<0> : !s32i loc(#loc258)
                  %37 = cir.call @send(%31, %34, %35, %36) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc259)
                  %38 = cir.const #cir.int<1> : !s32i loc(#loc260)
                  %39 = cir.unary(minus, %38) nsw : !s32i, !s32i loc(#loc260)
                  %40 = cir.cast(integral, %39 : !s32i), !s64i loc(#loc260)
                  %41 = cir.cmp(eq, %37, %40) : !s64i, !cir.bool loc(#loc485)
                  cir.if %41 {
                    %42 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc262)
                    %43 = cir.cast(array_to_ptrdecay, %42 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc262)
                    cir.call @printLine(%43) : (!cir.ptr<!s8i>) -> () loc(#loc263)
                  } loc(#loc486)
                } loc(#loc483)
              } loc(#loc460)
              cir.yield loc(#loc191)
            } while {
              %9 = cir.const #cir.int<0> : !s32i loc(#loc264)
              %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc264)
              cir.condition(%10) loc(#loc264)
            } loc(#loc459)
          } loc(#loc459)
          cir.scope {
            %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc267)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc268)
            %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc268)
            %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc488)
            cir.if %12 {
              %13 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc270)
              %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc271)
            } loc(#loc489)
          } loc(#loc487)
          cir.scope {
            %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc274)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc275)
            %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc275)
            %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc491)
            cir.if %12 {
              %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc277)
              %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc278)
            } loc(#loc492)
          } loc(#loc490)
        } loc(#loc455)
      } loc(#loc454)
    } loc(#loc453)
    cir.return loc(#loc174)
  } loc(#loc452)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc283)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc283)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc497)
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc498)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc499)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc290)
          %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc290)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc498)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc292)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc292)
          cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc499)
          cir.scope {
            cir.do {
              cir.scope {
                %9 = cir.const #cir.int<2> : !s32i loc(#loc297)
                %10 = cir.const #cir.int<1> : !s32i loc(#loc298)
                %11 = cir.const #cir.int<6> : !s32i loc(#loc299)
                %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc300)
                cir.store %12, %3 : !s32i, !cir.ptr<!s32i> loc(#loc502)
                cir.scope {
                  %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc305)
                  %32 = cir.const #cir.int<1> : !s32i loc(#loc306)
                  %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc306)
                  %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc504)
                  cir.if %34 {
                    cir.break loc(#loc308)
                  } loc(#loc505)
                } loc(#loc503)
                %13 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc506)
                %14 = cir.const #cir.int<0> : !s32i loc(#loc311)
                %15 = cir.const #cir.int<16> : !u64i loc(#loc507)
                cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc508)
                %16 = cir.const #cir.int<2> : !s32i loc(#loc316)
                %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc316)
                %18 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
                cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc509)
                %19 = cir.const #cir.int<0> : !s32i loc(#loc318)
                %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc318)
                %21 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
                %22 = cir.get_member %21[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
                cir.store %20, %22 : !u32i, !cir.ptr<!u32i> loc(#loc510)
                %23 = cir.const #cir.int<20000> : !s32i loc(#loc320)
                %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc320)
                %25 = cir.call @htons(%24) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc321)
                %26 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
                cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc511)
                cir.scope {
                  %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc326)
                  %32 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc513)
                  %33 = cir.const #cir.int<16> : !u64i loc(#loc514)
                  %34 = cir.cast(integral, %33 : !u64i), !u32i loc(#loc514)
                  %35 = cir.call @bind(%31, %32, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc331)
                  %36 = cir.const #cir.int<1> : !s32i loc(#loc332)
                  %37 = cir.unary(minus, %36) nsw : !s32i, !s32i loc(#loc332)
                  %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc515)
                  cir.if %38 {
                    cir.break loc(#loc334)
                  } loc(#loc516)
                } loc(#loc512)
                cir.scope {
                  %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc337)
                  %32 = cir.const #cir.int<5> : !s32i loc(#loc338)
                  %33 = cir.call @listen(%31, %32) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc339)
                  %34 = cir.const #cir.int<1> : !s32i loc(#loc340)
                  %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc340)
                  %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc518)
                  cir.if %36 {
                    cir.break loc(#loc342)
                  } loc(#loc519)
                } loc(#loc517)
                %27 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc343)
                %28 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc344)
                %29 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc345)
                %30 = cir.call @accept(%27, %28, %29) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc346)
                cir.store %30, %4 : !s32i, !cir.ptr<!s32i> loc(#loc520)
                cir.scope {
                  %31 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc351)
                  %32 = cir.const #cir.int<1> : !s32i loc(#loc352)
                  %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc352)
                  %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc522)
                  cir.if %34 {
                    cir.break loc(#loc354)
                  } loc(#loc523)
                } loc(#loc521)
                cir.scope {
                  %31 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc357)
                  %32 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc358)
                  %33 = cir.cast(array_to_ptrdecay, %32 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc358)
                  %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc358)
                  %35 = cir.const #cir.int<8> : !u64i loc(#loc525)
                  %36 = cir.const #cir.int<0> : !s32i loc(#loc361)
                  %37 = cir.call @send(%31, %34, %35, %36) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc362)
                  %38 = cir.const #cir.int<1> : !s32i loc(#loc363)
                  %39 = cir.unary(minus, %38) nsw : !s32i, !s32i loc(#loc363)
                  %40 = cir.cast(integral, %39 : !s32i), !s64i loc(#loc363)
                  %41 = cir.cmp(eq, %37, %40) : !s64i, !cir.bool loc(#loc526)
                  cir.if %41 {
                    %42 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc365)
                    %43 = cir.cast(array_to_ptrdecay, %42 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc365)
                    cir.call @printLine(%43) : (!cir.ptr<!s8i>) -> () loc(#loc366)
                  } loc(#loc527)
                } loc(#loc524)
              } loc(#loc501)
              cir.yield loc(#loc294)
            } while {
              %9 = cir.const #cir.int<0> : !s32i loc(#loc367)
              %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc367)
              cir.condition(%10) loc(#loc367)
            } loc(#loc500)
          } loc(#loc500)
          cir.scope {
            %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc370)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc371)
            %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc371)
            %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc529)
            cir.if %12 {
              %13 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc373)
              %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc374)
            } loc(#loc530)
          } loc(#loc528)
          cir.scope {
            %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc377)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc378)
            %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc378)
            %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc532)
            cir.if %12 {
              %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc380)
              %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc381)
            } loc(#loc533)
          } loc(#loc531)
        } loc(#loc496)
      } loc(#loc495)
    } loc(#loc494)
    cir.return loc(#loc280)
  } loc(#loc493)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_04.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":116:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":117:33)
#loc13 = loc("/usr/include/string.h":156:1)
#loc14 = loc("/usr/include/string.h":157:33)
#loc15 = loc("CWE510_Trapdoor__ip_based_logic_04.c":96:28)
#loc16 = loc("/usr/include/arpa/inet.h":53:1)
#loc17 = loc("/usr/include/arpa/inet.h":53:46)
#loc18 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":138:1)
#loc19 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":138:74)
#loc20 = loc("CWE510_Trapdoor__ip_based_logic_04.c":98:44)
#loc21 = loc("CWE510_Trapdoor__ip_based_logic_04.c":106:44)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE510_Trapdoor__ip_based_logic_04.c":108:35)
#loc25 = loc("/usr/include/unistd.h":358:1)
#loc26 = loc("/usr/include/unistd.h":358:27)
#loc27 = loc("CWE510_Trapdoor__ip_based_logic_04.c":47:1)
#loc28 = loc("CWE510_Trapdoor__ip_based_logic_04.c":129:1)
#loc29 = loc("CWE510_Trapdoor__ip_based_logic_04.c":49:5)
#loc30 = loc("CWE510_Trapdoor__ip_based_logic_04.c":128:5)
#loc31 = loc("CWE510_Trapdoor__ip_based_logic_04.c":49:8)
#loc32 = loc("CWE510_Trapdoor__ip_based_logic_04.c":50:5)
#loc33 = loc("CWE510_Trapdoor__ip_based_logic_04.c":51:9)
#loc34 = loc("CWE510_Trapdoor__ip_based_logic_04.c":127:9)
#loc35 = loc("CWE510_Trapdoor__ip_based_logic_04.c":56:13)
#loc36 = loc("CWE510_Trapdoor__ip_based_logic_04.c":56:32)
#loc37 = loc("CWE510_Trapdoor__ip_based_logic_04.c":56:41)
#loc38 = loc("CWE510_Trapdoor__ip_based_logic_04.c":57:13)
#loc39 = loc("CWE510_Trapdoor__ip_based_logic_04.c":57:56)
#loc40 = loc("CWE510_Trapdoor__ip_based_logic_04.c":58:13)
#loc41 = loc("CWE510_Trapdoor__ip_based_logic_04.c":58:35)
#loc42 = loc("CWE510_Trapdoor__ip_based_logic_04.c":59:13)
#loc43 = loc("CWE510_Trapdoor__ip_based_logic_04.c":59:35)
#loc44 = loc("CWE510_Trapdoor__ip_based_logic_04.c":57:36)
#loc45 = loc("CWE510_Trapdoor__ip_based_logic_04.c":60:13)
#loc46 = loc("CWE510_Trapdoor__ip_based_logic_04.c":112:21)
#loc47 = loc("CWE510_Trapdoor__ip_based_logic_04.c":61:13)
#loc48 = loc("CWE510_Trapdoor__ip_based_logic_04.c":111:13)
#loc49 = loc("CWE510_Trapdoor__ip_based_logic_04.c":69:39)
#loc50 = loc("CWE510_Trapdoor__ip_based_logic_04.c":69:48)
#loc51 = loc("CWE510_Trapdoor__ip_based_logic_04.c":69:61)
#loc52 = loc("CWE510_Trapdoor__ip_based_logic_04.c":69:32)
#loc53 = loc("CWE510_Trapdoor__ip_based_logic_04.c":69:17)
#loc54 = loc("CWE510_Trapdoor__ip_based_logic_04.c":69:72)
#loc55 = loc("CWE510_Trapdoor__ip_based_logic_04.c":70:17)
#loc56 = loc("CWE510_Trapdoor__ip_based_logic_04.c":73:17)
#loc57 = loc("CWE510_Trapdoor__ip_based_logic_04.c":70:21)
#loc58 = loc("CWE510_Trapdoor__ip_based_logic_04.c":70:37)
#loc59 = loc("CWE510_Trapdoor__ip_based_logic_04.c":71:17)
#loc60 = loc("CWE510_Trapdoor__ip_based_logic_04.c":72:21)
#loc61 = loc("CWE510_Trapdoor__ip_based_logic_04.c":74:24)
#loc62 = loc("CWE510_Trapdoor__ip_based_logic_04.c":74:25)
#loc63 = loc("CWE510_Trapdoor__ip_based_logic_04.c":74:34)
#loc64 = loc("CWE510_Trapdoor__ip_based_logic_04.c":74:37)
#loc65 = loc("CWE510_Trapdoor__ip_based_logic_04.c":74:51)
#loc66 = loc("CWE510_Trapdoor__ip_based_logic_04.c":74:17)
#loc67 = loc("CWE510_Trapdoor__ip_based_logic_04.c":74:52)
#loc68 = loc("CWE510_Trapdoor__ip_based_logic_04.c":75:38)
#loc69 = loc("/usr/include/netinet/in.h":249:5)
#loc70 = loc("CWE510_Trapdoor__ip_based_logic_04.c":75:17)
#loc71 = loc("CWE510_Trapdoor__ip_based_logic_04.c":76:43)
#loc72 = loc("/usr/include/netinet/in.h":251:20)
#loc73 = loc("/usr/include/netinet/in.h":33:15)
#loc74 = loc("CWE510_Trapdoor__ip_based_logic_04.c":76:17)
#loc75 = loc("CWE510_Trapdoor__ip_based_logic_04.c":77:42)
#loc76 = loc("CWE510_Trapdoor__ip_based_logic_04.c":77:36)
#loc77 = loc("/usr/include/netinet/in.h":250:15)
#loc78 = loc("CWE510_Trapdoor__ip_based_logic_04.c":77:17)
#loc79 = loc("CWE510_Trapdoor__ip_based_logic_04.c":77:47)
#loc80 = loc("CWE510_Trapdoor__ip_based_logic_04.c":78:17)
#loc81 = loc("CWE510_Trapdoor__ip_based_logic_04.c":81:17)
#loc82 = loc("CWE510_Trapdoor__ip_based_logic_04.c":78:26)
#loc83 = loc("CWE510_Trapdoor__ip_based_logic_04.c":78:58)
#loc84 = loc("CWE510_Trapdoor__ip_based_logic_04.c":78:59)
#loc85 = loc("CWE510_Trapdoor__ip_based_logic_04.c":78:68)
#loc86 = loc("CWE510_Trapdoor__ip_based_logic_04.c":78:82)
#loc87 = loc("CWE510_Trapdoor__ip_based_logic_04.c":78:21)
#loc88 = loc("CWE510_Trapdoor__ip_based_logic_04.c":78:88)
#loc89 = loc("CWE510_Trapdoor__ip_based_logic_04.c":79:17)
#loc90 = loc("CWE510_Trapdoor__ip_based_logic_04.c":80:21)
#loc91 = loc("CWE510_Trapdoor__ip_based_logic_04.c":82:17)
#loc92 = loc("CWE510_Trapdoor__ip_based_logic_04.c":85:17)
#loc93 = loc("CWE510_Trapdoor__ip_based_logic_04.c":82:28)
#loc94 = loc("CWE510_Trapdoor__ip_based_logic_04.c":82:42)
#loc95 = loc("CWE510_Trapdoor__ip_based_logic_04.c":82:21)
#loc96 = loc("CWE510_Trapdoor__ip_based_logic_04.c":82:48)
#loc97 = loc("CWE510_Trapdoor__ip_based_logic_04.c":83:17)
#loc98 = loc("CWE510_Trapdoor__ip_based_logic_04.c":84:21)
#loc99 = loc("CWE510_Trapdoor__ip_based_logic_04.c":86:39)
#loc100 = loc("CWE510_Trapdoor__ip_based_logic_04.c":86:53)
#loc101 = loc("CWE510_Trapdoor__ip_based_logic_04.c":86:59)
#loc102 = loc("CWE510_Trapdoor__ip_based_logic_04.c":86:32)
#loc103 = loc("CWE510_Trapdoor__ip_based_logic_04.c":86:17)
#loc104 = loc("CWE510_Trapdoor__ip_based_logic_04.c":86:63)
#loc105 = loc("CWE510_Trapdoor__ip_based_logic_04.c":87:17)
#loc106 = loc("CWE510_Trapdoor__ip_based_logic_04.c":90:17)
#loc107 = loc("CWE510_Trapdoor__ip_based_logic_04.c":87:21)
#loc108 = loc("CWE510_Trapdoor__ip_based_logic_04.c":87:37)
#loc109 = loc("CWE510_Trapdoor__ip_based_logic_04.c":88:17)
#loc110 = loc("CWE510_Trapdoor__ip_based_logic_04.c":89:21)
#loc111 = loc("CWE510_Trapdoor__ip_based_logic_04.c":91:17)
#loc112 = loc("CWE510_Trapdoor__ip_based_logic_04.c":94:17)
#loc113 = loc("CWE510_Trapdoor__ip_based_logic_04.c":91:33)
#loc114 = loc("CWE510_Trapdoor__ip_based_logic_04.c":91:66)
#loc115 = loc("CWE510_Trapdoor__ip_based_logic_04.c":91:67)
#loc116 = loc("CWE510_Trapdoor__ip_based_logic_04.c":91:82)
#loc117 = loc("CWE510_Trapdoor__ip_based_logic_04.c":91:83)
#loc118 = loc("CWE510_Trapdoor__ip_based_logic_04.c":91:21)
#loc119 = loc("CWE510_Trapdoor__ip_based_logic_04.c":91:105)
#loc120 = loc("CWE510_Trapdoor__ip_based_logic_04.c":91:104)
#loc121 = loc("CWE510_Trapdoor__ip_based_logic_04.c":92:17)
#loc122 = loc("CWE510_Trapdoor__ip_based_logic_04.c":93:21)
#loc123 = loc("CWE510_Trapdoor__ip_based_logic_04.c":96:17)
#loc124 = loc("CWE510_Trapdoor__ip_based_logic_04.c":110:17)
#loc125 = loc("CWE510_Trapdoor__ip_based_logic_04.c":96:21)
#loc126 = loc("CWE510_Trapdoor__ip_based_logic_04.c":96:46)
#loc127 = loc("CWE510_Trapdoor__ip_based_logic_04.c":96:84)
#loc128 = loc("CWE510_Trapdoor__ip_based_logic_04.c":97:17)
#loc129 = loc("CWE510_Trapdoor__ip_based_logic_04.c":103:17)
#loc130 = loc("CWE510_Trapdoor__ip_based_logic_04.c":105:17)
#loc131 = loc("CWE510_Trapdoor__ip_based_logic_04.c":98:21)
#loc132 = loc("CWE510_Trapdoor__ip_based_logic_04.c":102:21)
#loc133 = loc("CWE510_Trapdoor__ip_based_logic_04.c":98:30)
#loc134 = loc("CWE510_Trapdoor__ip_based_logic_04.c":98:59)
#loc135 = loc("CWE510_Trapdoor__ip_based_logic_04.c":98:79)
#loc136 = loc("CWE510_Trapdoor__ip_based_logic_04.c":98:82)
#loc137 = loc("CWE510_Trapdoor__ip_based_logic_04.c":98:25)
#loc138 = loc("CWE510_Trapdoor__ip_based_logic_04.c":98:89)
#loc139 = loc("CWE510_Trapdoor__ip_based_logic_04.c":99:21)
#loc140 = loc("CWE510_Trapdoor__ip_based_logic_04.c":101:25)
#loc141 = loc("CWE510_Trapdoor__ip_based_logic_04.c":106:21)
#loc142 = loc("CWE510_Trapdoor__ip_based_logic_04.c":109:21)
#loc143 = loc("CWE510_Trapdoor__ip_based_logic_04.c":106:30)
#loc144 = loc("CWE510_Trapdoor__ip_based_logic_04.c":106:61)
#loc145 = loc("CWE510_Trapdoor__ip_based_logic_04.c":106:83)
#loc146 = loc("CWE510_Trapdoor__ip_based_logic_04.c":106:86)
#loc147 = loc("CWE510_Trapdoor__ip_based_logic_04.c":106:25)
#loc148 = loc("CWE510_Trapdoor__ip_based_logic_04.c":106:92)
#loc149 = loc("CWE510_Trapdoor__ip_based_logic_04.c":107:21)
#loc150 = loc("CWE510_Trapdoor__ip_based_logic_04.c":108:25)
#loc151 = loc("CWE510_Trapdoor__ip_based_logic_04.c":112:20)
#loc152 = loc("CWE510_Trapdoor__ip_based_logic_04.c":113:13)
#loc153 = loc("CWE510_Trapdoor__ip_based_logic_04.c":116:13)
#loc154 = loc("CWE510_Trapdoor__ip_based_logic_04.c":113:17)
#loc155 = loc("CWE510_Trapdoor__ip_based_logic_04.c":113:33)
#loc156 = loc("CWE510_Trapdoor__ip_based_logic_04.c":114:13)
#loc157 = loc("CWE510_Trapdoor__ip_based_logic_04.c":115:30)
#loc158 = loc("CWE510_Trapdoor__ip_based_logic_04.c":115:17)
#loc159 = loc("CWE510_Trapdoor__ip_based_logic_04.c":117:13)
#loc160 = loc("CWE510_Trapdoor__ip_based_logic_04.c":120:13)
#loc161 = loc("CWE510_Trapdoor__ip_based_logic_04.c":117:17)
#loc162 = loc("CWE510_Trapdoor__ip_based_logic_04.c":117:33)
#loc163 = loc("CWE510_Trapdoor__ip_based_logic_04.c":118:13)
#loc164 = loc("CWE510_Trapdoor__ip_based_logic_04.c":119:30)
#loc165 = loc("CWE510_Trapdoor__ip_based_logic_04.c":119:17)
#loc166 = loc("CWE510_Trapdoor__ip_based_logic_04.c":278:1)
#loc167 = loc("CWE510_Trapdoor__ip_based_logic_04.c":282:1)
#loc168 = loc("CWE510_Trapdoor__ip_based_logic_04.c":280:5)
#loc169 = loc("CWE510_Trapdoor__ip_based_logic_04.c":280:11)
#loc170 = loc("CWE510_Trapdoor__ip_based_logic_04.c":281:5)
#loc171 = loc("CWE510_Trapdoor__ip_based_logic_04.c":281:11)
#loc172 = loc("CWE510_Trapdoor__ip_based_logic_04.c":141:19)
#loc173 = loc("CWE510_Trapdoor__ip_based_logic_04.c":136:1)
#loc174 = loc("CWE510_Trapdoor__ip_based_logic_04.c":207:1)
#loc175 = loc("CWE510_Trapdoor__ip_based_logic_04.c":138:5)
#loc176 = loc("CWE510_Trapdoor__ip_based_logic_04.c":206:5)
#loc177 = loc("CWE510_Trapdoor__ip_based_logic_04.c":138:8)
#loc178 = loc("CWE510_Trapdoor__ip_based_logic_04.c":139:5)
#loc179 = loc("CWE510_Trapdoor__ip_based_logic_04.c":142:5)
#loc180 = loc("CWE510_Trapdoor__ip_based_logic_04.c":144:5)
#loc181 = loc("CWE510_Trapdoor__ip_based_logic_04.c":141:9)
#loc182 = loc("CWE510_Trapdoor__ip_based_logic_04.c":145:9)
#loc183 = loc("CWE510_Trapdoor__ip_based_logic_04.c":205:9)
#loc184 = loc("CWE510_Trapdoor__ip_based_logic_04.c":150:13)
#loc185 = loc("CWE510_Trapdoor__ip_based_logic_04.c":150:32)
#loc186 = loc("CWE510_Trapdoor__ip_based_logic_04.c":151:13)
#loc187 = loc("CWE510_Trapdoor__ip_based_logic_04.c":151:35)
#loc188 = loc("CWE510_Trapdoor__ip_based_logic_04.c":152:13)
#loc189 = loc("CWE510_Trapdoor__ip_based_logic_04.c":152:35)
#loc190 = loc("CWE510_Trapdoor__ip_based_logic_04.c":153:13)
#loc191 = loc("CWE510_Trapdoor__ip_based_logic_04.c":190:21)
#loc192 = loc("CWE510_Trapdoor__ip_based_logic_04.c":154:13)
#loc193 = loc("CWE510_Trapdoor__ip_based_logic_04.c":189:13)
#loc194 = loc("CWE510_Trapdoor__ip_based_logic_04.c":162:39)
#loc195 = loc("CWE510_Trapdoor__ip_based_logic_04.c":162:48)
#loc196 = loc("CWE510_Trapdoor__ip_based_logic_04.c":162:61)
#loc197 = loc("CWE510_Trapdoor__ip_based_logic_04.c":162:32)
#loc198 = loc("CWE510_Trapdoor__ip_based_logic_04.c":162:17)
#loc199 = loc("CWE510_Trapdoor__ip_based_logic_04.c":162:72)
#loc200 = loc("CWE510_Trapdoor__ip_based_logic_04.c":163:17)
#loc201 = loc("CWE510_Trapdoor__ip_based_logic_04.c":166:17)
#loc202 = loc("CWE510_Trapdoor__ip_based_logic_04.c":163:21)
#loc203 = loc("CWE510_Trapdoor__ip_based_logic_04.c":163:37)
#loc204 = loc("CWE510_Trapdoor__ip_based_logic_04.c":164:17)
#loc205 = loc("CWE510_Trapdoor__ip_based_logic_04.c":165:21)
#loc206 = loc("CWE510_Trapdoor__ip_based_logic_04.c":167:24)
#loc207 = loc("CWE510_Trapdoor__ip_based_logic_04.c":167:25)
#loc208 = loc("CWE510_Trapdoor__ip_based_logic_04.c":167:34)
#loc209 = loc("CWE510_Trapdoor__ip_based_logic_04.c":167:37)
#loc210 = loc("CWE510_Trapdoor__ip_based_logic_04.c":167:51)
#loc211 = loc("CWE510_Trapdoor__ip_based_logic_04.c":167:17)
#loc212 = loc("CWE510_Trapdoor__ip_based_logic_04.c":167:52)
#loc213 = loc("CWE510_Trapdoor__ip_based_logic_04.c":168:38)
#loc214 = loc("CWE510_Trapdoor__ip_based_logic_04.c":168:17)
#loc215 = loc("CWE510_Trapdoor__ip_based_logic_04.c":169:43)
#loc216 = loc("CWE510_Trapdoor__ip_based_logic_04.c":169:17)
#loc217 = loc("CWE510_Trapdoor__ip_based_logic_04.c":170:42)
#loc218 = loc("CWE510_Trapdoor__ip_based_logic_04.c":170:36)
#loc219 = loc("CWE510_Trapdoor__ip_based_logic_04.c":170:17)
#loc220 = loc("CWE510_Trapdoor__ip_based_logic_04.c":170:47)
#loc221 = loc("CWE510_Trapdoor__ip_based_logic_04.c":171:17)
#loc222 = loc("CWE510_Trapdoor__ip_based_logic_04.c":174:17)
#loc223 = loc("CWE510_Trapdoor__ip_based_logic_04.c":171:26)
#loc224 = loc("CWE510_Trapdoor__ip_based_logic_04.c":171:58)
#loc225 = loc("CWE510_Trapdoor__ip_based_logic_04.c":171:59)
#loc226 = loc("CWE510_Trapdoor__ip_based_logic_04.c":171:68)
#loc227 = loc("CWE510_Trapdoor__ip_based_logic_04.c":171:82)
#loc228 = loc("CWE510_Trapdoor__ip_based_logic_04.c":171:21)
#loc229 = loc("CWE510_Trapdoor__ip_based_logic_04.c":171:88)
#loc230 = loc("CWE510_Trapdoor__ip_based_logic_04.c":172:17)
#loc231 = loc("CWE510_Trapdoor__ip_based_logic_04.c":173:21)
#loc232 = loc("CWE510_Trapdoor__ip_based_logic_04.c":175:17)
#loc233 = loc("CWE510_Trapdoor__ip_based_logic_04.c":178:17)
#loc234 = loc("CWE510_Trapdoor__ip_based_logic_04.c":175:28)
#loc235 = loc("CWE510_Trapdoor__ip_based_logic_04.c":175:42)
#loc236 = loc("CWE510_Trapdoor__ip_based_logic_04.c":175:21)
#loc237 = loc("CWE510_Trapdoor__ip_based_logic_04.c":175:48)
#loc238 = loc("CWE510_Trapdoor__ip_based_logic_04.c":176:17)
#loc239 = loc("CWE510_Trapdoor__ip_based_logic_04.c":177:21)
#loc240 = loc("CWE510_Trapdoor__ip_based_logic_04.c":179:39)
#loc241 = loc("CWE510_Trapdoor__ip_based_logic_04.c":179:53)
#loc242 = loc("CWE510_Trapdoor__ip_based_logic_04.c":179:59)
#loc243 = loc("CWE510_Trapdoor__ip_based_logic_04.c":179:32)
#loc244 = loc("CWE510_Trapdoor__ip_based_logic_04.c":179:17)
#loc245 = loc("CWE510_Trapdoor__ip_based_logic_04.c":179:63)
#loc246 = loc("CWE510_Trapdoor__ip_based_logic_04.c":180:17)
#loc247 = loc("CWE510_Trapdoor__ip_based_logic_04.c":183:17)
#loc248 = loc("CWE510_Trapdoor__ip_based_logic_04.c":180:21)
#loc249 = loc("CWE510_Trapdoor__ip_based_logic_04.c":180:37)
#loc250 = loc("CWE510_Trapdoor__ip_based_logic_04.c":181:17)
#loc251 = loc("CWE510_Trapdoor__ip_based_logic_04.c":182:21)
#loc252 = loc("CWE510_Trapdoor__ip_based_logic_04.c":185:17)
#loc253 = loc("CWE510_Trapdoor__ip_based_logic_04.c":188:17)
#loc254 = loc("CWE510_Trapdoor__ip_based_logic_04.c":185:26)
#loc255 = loc("CWE510_Trapdoor__ip_based_logic_04.c":185:40)
#loc256 = loc("CWE510_Trapdoor__ip_based_logic_04.c":185:57)
#loc257 = loc("CWE510_Trapdoor__ip_based_logic_04.c":185:79)
#loc258 = loc("CWE510_Trapdoor__ip_based_logic_04.c":185:82)
#loc259 = loc("CWE510_Trapdoor__ip_based_logic_04.c":185:21)
#loc260 = loc("CWE510_Trapdoor__ip_based_logic_04.c":185:88)
#loc261 = loc("CWE510_Trapdoor__ip_based_logic_04.c":186:17)
#loc262 = loc("CWE510_Trapdoor__ip_based_logic_04.c":187:31)
#loc263 = loc("CWE510_Trapdoor__ip_based_logic_04.c":187:21)
#loc264 = loc("CWE510_Trapdoor__ip_based_logic_04.c":190:20)
#loc265 = loc("CWE510_Trapdoor__ip_based_logic_04.c":191:13)
#loc266 = loc("CWE510_Trapdoor__ip_based_logic_04.c":194:13)
#loc267 = loc("CWE510_Trapdoor__ip_based_logic_04.c":191:17)
#loc268 = loc("CWE510_Trapdoor__ip_based_logic_04.c":191:33)
#loc269 = loc("CWE510_Trapdoor__ip_based_logic_04.c":192:13)
#loc270 = loc("CWE510_Trapdoor__ip_based_logic_04.c":193:30)
#loc271 = loc("CWE510_Trapdoor__ip_based_logic_04.c":193:17)
#loc272 = loc("CWE510_Trapdoor__ip_based_logic_04.c":195:13)
#loc273 = loc("CWE510_Trapdoor__ip_based_logic_04.c":198:13)
#loc274 = loc("CWE510_Trapdoor__ip_based_logic_04.c":195:17)
#loc275 = loc("CWE510_Trapdoor__ip_based_logic_04.c":195:33)
#loc276 = loc("CWE510_Trapdoor__ip_based_logic_04.c":196:13)
#loc277 = loc("CWE510_Trapdoor__ip_based_logic_04.c":197:30)
#loc278 = loc("CWE510_Trapdoor__ip_based_logic_04.c":197:17)
#loc279 = loc("CWE510_Trapdoor__ip_based_logic_04.c":210:1)
#loc280 = loc("CWE510_Trapdoor__ip_based_logic_04.c":276:1)
#loc281 = loc("CWE510_Trapdoor__ip_based_logic_04.c":212:5)
#loc282 = loc("CWE510_Trapdoor__ip_based_logic_04.c":275:5)
#loc283 = loc("CWE510_Trapdoor__ip_based_logic_04.c":212:8)
#loc284 = loc("CWE510_Trapdoor__ip_based_logic_04.c":213:5)
#loc285 = loc("CWE510_Trapdoor__ip_based_logic_04.c":214:9)
#loc286 = loc("CWE510_Trapdoor__ip_based_logic_04.c":274:9)
#loc287 = loc("CWE510_Trapdoor__ip_based_logic_04.c":219:13)
#loc288 = loc("CWE510_Trapdoor__ip_based_logic_04.c":219:32)
#loc289 = loc("CWE510_Trapdoor__ip_based_logic_04.c":220:13)
#loc290 = loc("CWE510_Trapdoor__ip_based_logic_04.c":220:35)
#loc291 = loc("CWE510_Trapdoor__ip_based_logic_04.c":221:13)
#loc292 = loc("CWE510_Trapdoor__ip_based_logic_04.c":221:35)
#loc293 = loc("CWE510_Trapdoor__ip_based_logic_04.c":222:13)
#loc294 = loc("CWE510_Trapdoor__ip_based_logic_04.c":259:21)
#loc295 = loc("CWE510_Trapdoor__ip_based_logic_04.c":223:13)
#loc296 = loc("CWE510_Trapdoor__ip_based_logic_04.c":258:13)
#loc297 = loc("CWE510_Trapdoor__ip_based_logic_04.c":231:39)
#loc298 = loc("CWE510_Trapdoor__ip_based_logic_04.c":231:48)
#loc299 = loc("CWE510_Trapdoor__ip_based_logic_04.c":231:61)
#loc300 = loc("CWE510_Trapdoor__ip_based_logic_04.c":231:32)
#loc301 = loc("CWE510_Trapdoor__ip_based_logic_04.c":231:17)
#loc302 = loc("CWE510_Trapdoor__ip_based_logic_04.c":231:72)
#loc303 = loc("CWE510_Trapdoor__ip_based_logic_04.c":232:17)
#loc304 = loc("CWE510_Trapdoor__ip_based_logic_04.c":235:17)
#loc305 = loc("CWE510_Trapdoor__ip_based_logic_04.c":232:21)
#loc306 = loc("CWE510_Trapdoor__ip_based_logic_04.c":232:37)
#loc307 = loc("CWE510_Trapdoor__ip_based_logic_04.c":233:17)
#loc308 = loc("CWE510_Trapdoor__ip_based_logic_04.c":234:21)
#loc309 = loc("CWE510_Trapdoor__ip_based_logic_04.c":236:24)
#loc310 = loc("CWE510_Trapdoor__ip_based_logic_04.c":236:25)
#loc311 = loc("CWE510_Trapdoor__ip_based_logic_04.c":236:34)
#loc312 = loc("CWE510_Trapdoor__ip_based_logic_04.c":236:37)
#loc313 = loc("CWE510_Trapdoor__ip_based_logic_04.c":236:51)
#loc314 = loc("CWE510_Trapdoor__ip_based_logic_04.c":236:17)
#loc315 = loc("CWE510_Trapdoor__ip_based_logic_04.c":236:52)
#loc316 = loc("CWE510_Trapdoor__ip_based_logic_04.c":237:38)
#loc317 = loc("CWE510_Trapdoor__ip_based_logic_04.c":237:17)
#loc318 = loc("CWE510_Trapdoor__ip_based_logic_04.c":238:43)
#loc319 = loc("CWE510_Trapdoor__ip_based_logic_04.c":238:17)
#loc320 = loc("CWE510_Trapdoor__ip_based_logic_04.c":239:42)
#loc321 = loc("CWE510_Trapdoor__ip_based_logic_04.c":239:36)
#loc322 = loc("CWE510_Trapdoor__ip_based_logic_04.c":239:17)
#loc323 = loc("CWE510_Trapdoor__ip_based_logic_04.c":239:47)
#loc324 = loc("CWE510_Trapdoor__ip_based_logic_04.c":240:17)
#loc325 = loc("CWE510_Trapdoor__ip_based_logic_04.c":243:17)
#loc326 = loc("CWE510_Trapdoor__ip_based_logic_04.c":240:26)
#loc327 = loc("CWE510_Trapdoor__ip_based_logic_04.c":240:58)
#loc328 = loc("CWE510_Trapdoor__ip_based_logic_04.c":240:59)
#loc329 = loc("CWE510_Trapdoor__ip_based_logic_04.c":240:68)
#loc330 = loc("CWE510_Trapdoor__ip_based_logic_04.c":240:82)
#loc331 = loc("CWE510_Trapdoor__ip_based_logic_04.c":240:21)
#loc332 = loc("CWE510_Trapdoor__ip_based_logic_04.c":240:88)
#loc333 = loc("CWE510_Trapdoor__ip_based_logic_04.c":241:17)
#loc334 = loc("CWE510_Trapdoor__ip_based_logic_04.c":242:21)
#loc335 = loc("CWE510_Trapdoor__ip_based_logic_04.c":244:17)
#loc336 = loc("CWE510_Trapdoor__ip_based_logic_04.c":247:17)
#loc337 = loc("CWE510_Trapdoor__ip_based_logic_04.c":244:28)
#loc338 = loc("CWE510_Trapdoor__ip_based_logic_04.c":244:42)
#loc339 = loc("CWE510_Trapdoor__ip_based_logic_04.c":244:21)
#loc340 = loc("CWE510_Trapdoor__ip_based_logic_04.c":244:48)
#loc341 = loc("CWE510_Trapdoor__ip_based_logic_04.c":245:17)
#loc342 = loc("CWE510_Trapdoor__ip_based_logic_04.c":246:21)
#loc343 = loc("CWE510_Trapdoor__ip_based_logic_04.c":248:39)
#loc344 = loc("CWE510_Trapdoor__ip_based_logic_04.c":248:53)
#loc345 = loc("CWE510_Trapdoor__ip_based_logic_04.c":248:59)
#loc346 = loc("CWE510_Trapdoor__ip_based_logic_04.c":248:32)
#loc347 = loc("CWE510_Trapdoor__ip_based_logic_04.c":248:17)
#loc348 = loc("CWE510_Trapdoor__ip_based_logic_04.c":248:63)
#loc349 = loc("CWE510_Trapdoor__ip_based_logic_04.c":249:17)
#loc350 = loc("CWE510_Trapdoor__ip_based_logic_04.c":252:17)
#loc351 = loc("CWE510_Trapdoor__ip_based_logic_04.c":249:21)
#loc352 = loc("CWE510_Trapdoor__ip_based_logic_04.c":249:37)
#loc353 = loc("CWE510_Trapdoor__ip_based_logic_04.c":250:17)
#loc354 = loc("CWE510_Trapdoor__ip_based_logic_04.c":251:21)
#loc355 = loc("CWE510_Trapdoor__ip_based_logic_04.c":254:17)
#loc356 = loc("CWE510_Trapdoor__ip_based_logic_04.c":257:17)
#loc357 = loc("CWE510_Trapdoor__ip_based_logic_04.c":254:26)
#loc358 = loc("CWE510_Trapdoor__ip_based_logic_04.c":254:40)
#loc359 = loc("CWE510_Trapdoor__ip_based_logic_04.c":254:57)
#loc360 = loc("CWE510_Trapdoor__ip_based_logic_04.c":254:79)
#loc361 = loc("CWE510_Trapdoor__ip_based_logic_04.c":254:82)
#loc362 = loc("CWE510_Trapdoor__ip_based_logic_04.c":254:21)
#loc363 = loc("CWE510_Trapdoor__ip_based_logic_04.c":254:88)
#loc364 = loc("CWE510_Trapdoor__ip_based_logic_04.c":255:17)
#loc365 = loc("CWE510_Trapdoor__ip_based_logic_04.c":256:31)
#loc366 = loc("CWE510_Trapdoor__ip_based_logic_04.c":256:21)
#loc367 = loc("CWE510_Trapdoor__ip_based_logic_04.c":259:20)
#loc368 = loc("CWE510_Trapdoor__ip_based_logic_04.c":260:13)
#loc369 = loc("CWE510_Trapdoor__ip_based_logic_04.c":263:13)
#loc370 = loc("CWE510_Trapdoor__ip_based_logic_04.c":260:17)
#loc371 = loc("CWE510_Trapdoor__ip_based_logic_04.c":260:33)
#loc372 = loc("CWE510_Trapdoor__ip_based_logic_04.c":261:13)
#loc373 = loc("CWE510_Trapdoor__ip_based_logic_04.c":262:30)
#loc374 = loc("CWE510_Trapdoor__ip_based_logic_04.c":262:17)
#loc375 = loc("CWE510_Trapdoor__ip_based_logic_04.c":264:13)
#loc376 = loc("CWE510_Trapdoor__ip_based_logic_04.c":267:13)
#loc377 = loc("CWE510_Trapdoor__ip_based_logic_04.c":264:17)
#loc378 = loc("CWE510_Trapdoor__ip_based_logic_04.c":264:33)
#loc379 = loc("CWE510_Trapdoor__ip_based_logic_04.c":265:13)
#loc380 = loc("CWE510_Trapdoor__ip_based_logic_04.c":266:30)
#loc381 = loc("CWE510_Trapdoor__ip_based_logic_04.c":266:17)
#loc382 = loc(fused[#loc1, #loc2])
#loc383 = loc(fused[#loc3, #loc4])
#loc384 = loc(fused[#loc5, #loc6])
#loc385 = loc(fused[#loc7, #loc8])
#loc386 = loc(fused[#loc9, #loc10])
#loc387 = loc(fused[#loc11, #loc12])
#loc388 = loc(fused[#loc13, #loc14])
#loc389 = loc(fused[#loc16, #loc17])
#loc390 = loc(fused[#loc18, #loc19])
#loc391 = loc(fused[#loc22, #loc23])
#loc392 = loc(fused[#loc25, #loc26])
#loc393 = loc(fused[#loc27, #loc28])
#loc394 = loc(fused[#loc29, #loc30])
#loc395 = loc(fused[#loc32, #loc30])
#loc396 = loc(fused[#loc33, #loc34])
#loc397 = loc(fused[#loc35, #loc36])
#loc398 = loc(fused[#loc35, #loc37])
#loc399 = loc(fused[#loc38, #loc39])
#loc400 = loc(fused[#loc40, #loc41])
#loc401 = loc(fused[#loc42, #loc43])
#loc402 = loc(fused[#loc44, #loc39])
#loc403 = loc(fused[#loc45, #loc46])
#loc404 = loc(fused[#loc47, #loc48])
#loc405 = loc(fused[#loc53, #loc54])
#loc406 = loc(fused[#loc55, #loc56])
#loc407 = loc(fused[#loc57, #loc58])
#loc408 = loc(fused[#loc59, #loc56])
#loc409 = loc(fused[#loc61, #loc62])
#loc410 = loc(fused[#loc64, #loc65])
#loc411 = loc(fused[#loc66, #loc67])
#loc412 = loc(fused[#loc70, #loc68])
#loc413 = loc(fused[#loc74, #loc71])
#loc414 = loc(fused[#loc78, #loc79])
#loc415 = loc(fused[#loc80, #loc81])
#loc416 = loc(fused[#loc83, #loc84])
#loc417 = loc(fused[#loc85, #loc86])
#loc418 = loc(fused[#loc87, #loc88])
#loc419 = loc(fused[#loc89, #loc81])
#loc420 = loc(fused[#loc91, #loc92])
#loc421 = loc(fused[#loc95, #loc96])
#loc422 = loc(fused[#loc97, #loc92])
#loc423 = loc(fused[#loc103, #loc104])
#loc424 = loc(fused[#loc105, #loc106])
#loc425 = loc(fused[#loc107, #loc108])
#loc426 = loc(fused[#loc109, #loc106])
#loc427 = loc(fused[#loc111, #loc112])
#loc428 = loc(fused[#loc114, #loc115])
#loc429 = loc(fused[#loc116, #loc117])
#loc430 = loc(fused[#loc118, #loc119])
#loc431 = loc(fused[#loc121, #loc112])
#loc432 = loc(fused[#loc123, #loc124])
#loc433 = loc(fused[#loc125, #loc127])
#loc434 = loc(fused[#loc128, #loc129, #loc130, #loc124])
#loc435 = loc(fused[#loc131, #loc132])
#loc436 = loc(fused[#loc134, #loc135])
#loc437 = loc(fused[#loc137, #loc138])
#loc438 = loc(fused[#loc139, #loc132])
#loc439 = loc(fused[#loc141, #loc142])
#loc440 = loc(fused[#loc144, #loc145])
#loc441 = loc(fused[#loc147, #loc148])
#loc442 = loc(fused[#loc149, #loc142])
#loc443 = loc(fused[#loc152, #loc153])
#loc444 = loc(fused[#loc154, #loc155])
#loc445 = loc(fused[#loc156, #loc153])
#loc446 = loc(fused[#loc159, #loc160])
#loc447 = loc(fused[#loc161, #loc162])
#loc448 = loc(fused[#loc163, #loc160])
#loc449 = loc(fused[#loc166, #loc167])
#loc450 = loc(fused[#loc168, #loc169])
#loc451 = loc(fused[#loc170, #loc171])
#loc452 = loc(fused[#loc173, #loc174])
#loc453 = loc(fused[#loc175, #loc176])
#loc454 = loc(fused[#loc178, #loc179, #loc180, #loc176])
#loc455 = loc(fused[#loc182, #loc183])
#loc456 = loc(fused[#loc184, #loc185])
#loc457 = loc(fused[#loc186, #loc187])
#loc458 = loc(fused[#loc188, #loc189])
#loc459 = loc(fused[#loc190, #loc191])
#loc460 = loc(fused[#loc192, #loc193])
#loc461 = loc(fused[#loc198, #loc199])
#loc462 = loc(fused[#loc200, #loc201])
#loc463 = loc(fused[#loc202, #loc203])
#loc464 = loc(fused[#loc204, #loc201])
#loc465 = loc(fused[#loc206, #loc207])
#loc466 = loc(fused[#loc209, #loc210])
#loc467 = loc(fused[#loc211, #loc212])
#loc468 = loc(fused[#loc214, #loc213])
#loc469 = loc(fused[#loc216, #loc215])
#loc470 = loc(fused[#loc219, #loc220])
#loc471 = loc(fused[#loc221, #loc222])
#loc472 = loc(fused[#loc224, #loc225])
#loc473 = loc(fused[#loc226, #loc227])
#loc474 = loc(fused[#loc228, #loc229])
#loc475 = loc(fused[#loc230, #loc222])
#loc476 = loc(fused[#loc232, #loc233])
#loc477 = loc(fused[#loc236, #loc237])
#loc478 = loc(fused[#loc238, #loc233])
#loc479 = loc(fused[#loc244, #loc245])
#loc480 = loc(fused[#loc246, #loc247])
#loc481 = loc(fused[#loc248, #loc249])
#loc482 = loc(fused[#loc250, #loc247])
#loc483 = loc(fused[#loc252, #loc253])
#loc484 = loc(fused[#loc256, #loc257])
#loc485 = loc(fused[#loc259, #loc260])
#loc486 = loc(fused[#loc261, #loc253])
#loc487 = loc(fused[#loc265, #loc266])
#loc488 = loc(fused[#loc267, #loc268])
#loc489 = loc(fused[#loc269, #loc266])
#loc490 = loc(fused[#loc272, #loc273])
#loc491 = loc(fused[#loc274, #loc275])
#loc492 = loc(fused[#loc276, #loc273])
#loc493 = loc(fused[#loc279, #loc280])
#loc494 = loc(fused[#loc281, #loc282])
#loc495 = loc(fused[#loc284, #loc282])
#loc496 = loc(fused[#loc285, #loc286])
#loc497 = loc(fused[#loc287, #loc288])
#loc498 = loc(fused[#loc289, #loc290])
#loc499 = loc(fused[#loc291, #loc292])
#loc500 = loc(fused[#loc293, #loc294])
#loc501 = loc(fused[#loc295, #loc296])
#loc502 = loc(fused[#loc301, #loc302])
#loc503 = loc(fused[#loc303, #loc304])
#loc504 = loc(fused[#loc305, #loc306])
#loc505 = loc(fused[#loc307, #loc304])
#loc506 = loc(fused[#loc309, #loc310])
#loc507 = loc(fused[#loc312, #loc313])
#loc508 = loc(fused[#loc314, #loc315])
#loc509 = loc(fused[#loc317, #loc316])
#loc510 = loc(fused[#loc319, #loc318])
#loc511 = loc(fused[#loc322, #loc323])
#loc512 = loc(fused[#loc324, #loc325])
#loc513 = loc(fused[#loc327, #loc328])
#loc514 = loc(fused[#loc329, #loc330])
#loc515 = loc(fused[#loc331, #loc332])
#loc516 = loc(fused[#loc333, #loc325])
#loc517 = loc(fused[#loc335, #loc336])
#loc518 = loc(fused[#loc339, #loc340])
#loc519 = loc(fused[#loc341, #loc336])
#loc520 = loc(fused[#loc347, #loc348])
#loc521 = loc(fused[#loc349, #loc350])
#loc522 = loc(fused[#loc351, #loc352])
#loc523 = loc(fused[#loc353, #loc350])
#loc524 = loc(fused[#loc355, #loc356])
#loc525 = loc(fused[#loc359, #loc360])
#loc526 = loc(fused[#loc362, #loc363])
#loc527 = loc(fused[#loc364, #loc356])
#loc528 = loc(fused[#loc368, #loc369])
#loc529 = loc(fused[#loc370, #loc371])
#loc530 = loc(fused[#loc372, #loc369])
#loc531 = loc(fused[#loc375, #loc376])
#loc532 = loc(fused[#loc377, #loc378])
#loc533 = loc(fused[#loc379, #loc376])
