!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc147)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc148)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_for_loop_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc150)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["countPtr1", init] {alignment = 8 : i64} loc(#loc151)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["countPtr2", init] {alignment = 8 : i64} loc(#loc152)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc151)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc152)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc15)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc155)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc155)
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc22)
      %10 = cir.binop(and, %8, %9) : !s32i loc(#loc22)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc22)
      %12 = cir.ternary(%11, true {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc22)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc22)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc22)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc22)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc22)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc22)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc22)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc22)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc22)
        cir.yield %27 : !u32i loc(#loc22)
      }, false {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc22)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc22)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc22)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc22)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc22)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc22)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc22)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc22)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc22)
        %28 = cir.unary(minus, %27) : !u32i, !u32i loc(#loc22)
        %29 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc22)
        %31 = cir.binop(sub, %28, %30) : !u32i loc(#loc22)
        cir.yield %31 : !u32i loc(#loc22)
      }) : (!cir.bool) -> !u32i loc(#loc22)
      %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc22)
      cir.store %13, %5 : !s32i, !cir.ptr<!s32i> loc(#loc156)
      %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc24)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
      cir.store %14, %15 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    } loc(#loc154)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc159)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc30)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc31)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc159)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc161)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc35)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc35)
        cir.store %10, %8 : !u64i, !cir.ptr<!u64i> loc(#loc161)
        cir.scope {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc38)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc38)
          cir.store %12, %8 : !u64i, !cir.ptr<!u64i> loc(#loc163)
          cir.for : cond {
            %13 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc40)
            %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc41)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc41)
            %16 = cir.cmp(lt, %13, %15) : !u64i, !s32i loc(#loc164)
            %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc42)
            cir.condition(%17) loc(#loc42)
          } body {
            cir.scope {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc5)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc5)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc44)
            } loc(#loc165)
            cir.yield loc(#loc37)
          } step {
            %13 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc45)
            %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc46)
            cir.store %14, %8 : !u64i, !cir.ptr<!u64i> loc(#loc166)
            cir.yield loc(#loc162)
          } loc(#loc162)
        } loc(#loc162)
      } loc(#loc160)
    } loc(#loc158)
    cir.return loc(#loc7)
  } loc(#loc149)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_for_loop_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc168)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    cir.return loc(#loc48)
  } loc(#loc167)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc171)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["countPtr1", init] {alignment = 8 : i64} loc(#loc172)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["countPtr2", init] {alignment = 8 : i64} loc(#loc173)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc172)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc173)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc62)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc176)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc68)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc176)
      %8 = cir.const #cir.int<20> : !s32i loc(#loc69)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc177)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc71)
      %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc72)
      cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    } loc(#loc175)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc180)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc77)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc78)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc180)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc182)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc82)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc82)
        cir.store %10, %8 : !u64i, !cir.ptr<!u64i> loc(#loc182)
        cir.scope {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc85)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc85)
          cir.store %12, %8 : !u64i, !cir.ptr<!u64i> loc(#loc184)
          cir.for : cond {
            %13 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc87)
            %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc88)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc88)
            %16 = cir.cmp(lt, %13, %15) : !u64i, !s32i loc(#loc185)
            %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc89)
            cir.condition(%17) loc(#loc89)
          } body {
            cir.scope {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc91)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc91)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc92)
            } loc(#loc186)
            cir.yield loc(#loc84)
          } step {
            %13 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc93)
            %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc94)
            cir.store %14, %8 : !u64i, !cir.ptr<!u64i> loc(#loc187)
            cir.yield loc(#loc183)
          } loc(#loc183)
        } loc(#loc183)
      } loc(#loc181)
    } loc(#loc179)
    cir.return loc(#loc54)
  } loc(#loc170)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["countPtr1", init] {alignment = 8 : i64} loc(#loc190)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["countPtr2", init] {alignment = 8 : i64} loc(#loc191)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc190)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc191)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc103)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc104)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc194)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc109)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc110)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc194)
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc111)
      %10 = cir.binop(and, %8, %9) : !s32i loc(#loc111)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc111)
      %12 = cir.ternary(%11, true {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc111)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc111)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc111)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc111)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc111)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc111)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc111)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc111)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc111)
        cir.yield %27 : !u32i loc(#loc111)
      }, false {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc111)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc111)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc111)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc111)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc111)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc111)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc111)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc111)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc111)
        %28 = cir.unary(minus, %27) : !u32i, !u32i loc(#loc111)
        %29 = cir.const #cir.int<1> : !s32i loc(#loc111)
        %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc111)
        %31 = cir.binop(sub, %28, %30) : !u32i loc(#loc111)
        cir.yield %31 : !u32i loc(#loc111)
      }) : (!cir.bool) -> !u32i loc(#loc111)
      %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc111)
      cir.store %13, %5 : !s32i, !cir.ptr<!s32i> loc(#loc195)
      %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc113)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc114)
      cir.store %14, %15 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    } loc(#loc193)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc198)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc119)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc120)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc198)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc200)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc124)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc124)
        cir.store %10, %8 : !u64i, !cir.ptr<!u64i> loc(#loc200)
        cir.scope {
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc127)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc128)
          %13 = cir.cmp(gt, %11, %12) : !s32i, !s32i loc(#loc202)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc129)
          %15 = cir.ternary(%14, true {
            %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc131)
            %17 = cir.const #cir.int<20> : !s32i loc(#loc132)
            %18 = cir.cmp(le, %16, %17) : !s32i, !s32i loc(#loc203)
            %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc133)
            %20 = cir.ternary(%19, true {
              %21 = cir.const #true loc(#loc130)
              cir.yield %21 : !cir.bool loc(#loc130)
            }, false {
              %21 = cir.const #false loc(#loc130)
              cir.yield %21 : !cir.bool loc(#loc130)
            }) : (!cir.bool) -> !cir.bool loc(#loc130)
            cir.yield %20 : !cir.bool loc(#loc130)
          }, false {
            %16 = cir.const #false loc(#loc130)
            cir.yield %16 : !cir.bool loc(#loc130)
          }) : (!cir.bool) -> !cir.bool loc(#loc130)
          cir.if %15 {
            cir.scope {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc137)
              %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc137)
              cir.store %17, %8 : !u64i, !cir.ptr<!u64i> loc(#loc206)
              cir.for : cond {
                %18 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc139)
                %19 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc140)
                %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc140)
                %21 = cir.cmp(lt, %18, %20) : !u64i, !s32i loc(#loc207)
                %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc141)
                cir.condition(%22) loc(#loc141)
              } body {
                cir.scope {
                  %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc143)
                  %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc143)
                  cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc144)
                } loc(#loc208)
                cir.yield loc(#loc136)
              } step {
                %18 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc145)
                %19 = cir.unary(inc, %18) : !u64i, !u64i loc(#loc146)
                cir.store %19, %8 : !u64i, !cir.ptr<!u64i> loc(#loc209)
                cir.yield loc(#loc205)
              } loc(#loc205)
            } loc(#loc205)
          } loc(#loc204)
        } loc(#loc201)
      } loc(#loc199)
    } loc(#loc197)
    cir.return loc(#loc96)
  } loc(#loc188)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":42:27)
#loc6 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":22:1)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":46:1)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":24:5)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":24:9)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":25:5)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":25:23)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":26:5)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":26:23)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":28:14)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":28:13)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":28:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":29:5)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":34:5)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":30:9)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":30:22)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":30:21)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":32:17)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":32:9)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":33:22)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":33:10)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":33:9)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":35:5)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":45:5)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":36:9)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":36:22)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":36:21)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":37:9)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":44:9)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":38:13)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":38:24)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":40:13)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":43:13)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":40:22)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":40:18)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":40:25)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":40:37)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":40:27)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":41:13)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":42:17)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":40:45)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":40:44)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":109:1)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":113:1)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":111:5)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":111:13)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":112:5)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":112:13)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":53:1)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":77:1)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":55:5)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":55:9)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":56:5)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":56:23)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":57:5)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":57:23)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":59:14)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":59:13)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":59:5)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":60:5)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":65:5)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":61:9)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":61:22)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":61:21)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":63:17)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":63:9)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":64:22)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":64:10)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":64:9)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":66:5)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":76:5)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":67:9)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":67:22)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":67:21)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":68:9)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":75:9)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":69:13)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":69:24)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":71:13)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":74:13)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":71:22)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":71:18)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":71:25)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":71:37)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":71:27)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":72:13)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":73:27)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":73:17)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":71:45)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":71:44)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":80:1)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":107:1)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":82:5)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":82:9)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":83:5)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":83:23)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":84:5)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":84:23)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":86:14)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":86:13)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":86:5)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":87:5)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":92:5)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":88:9)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":88:22)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":88:21)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":90:17)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":90:9)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":91:22)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":91:10)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":91:9)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":93:5)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":106:5)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":94:9)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":94:22)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":94:21)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":95:9)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":105:9)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":96:13)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":96:24)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":98:13)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":104:13)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":98:17)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":98:25)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":98:23)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":98:27)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":98:30)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":98:39)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":98:36)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":99:13)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":100:17)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":103:17)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":100:26)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":100:22)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":100:29)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":100:41)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":100:31)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":101:17)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":102:31)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":102:21)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":100:49)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_for_loop_32.c":100:48)
#loc147 = loc(fused[#loc1, #loc2])
#loc148 = loc(fused[#loc3, #loc4])
#loc149 = loc(fused[#loc6, #loc7])
#loc150 = loc(fused[#loc8, #loc9])
#loc151 = loc(fused[#loc10, #loc11])
#loc152 = loc(fused[#loc12, #loc13])
#loc153 = loc(fused[#loc16, #loc14])
#loc154 = loc(fused[#loc17, #loc18])
#loc155 = loc(fused[#loc19, #loc20])
#loc156 = loc(fused[#loc23, #loc22])
#loc157 = loc(fused[#loc26, #loc24])
#loc158 = loc(fused[#loc27, #loc28])
#loc159 = loc(fused[#loc29, #loc30])
#loc160 = loc(fused[#loc32, #loc33])
#loc161 = loc(fused[#loc34, #loc35])
#loc162 = loc(fused[#loc36, #loc37])
#loc163 = loc(fused[#loc39, #loc38])
#loc164 = loc(fused[#loc40, #loc41])
#loc165 = loc(fused[#loc43, #loc37])
#loc166 = loc(fused[#loc46, #loc45])
#loc167 = loc(fused[#loc47, #loc48])
#loc168 = loc(fused[#loc49, #loc50])
#loc169 = loc(fused[#loc51, #loc52])
#loc170 = loc(fused[#loc53, #loc54])
#loc171 = loc(fused[#loc55, #loc56])
#loc172 = loc(fused[#loc57, #loc58])
#loc173 = loc(fused[#loc59, #loc60])
#loc174 = loc(fused[#loc63, #loc61])
#loc175 = loc(fused[#loc64, #loc65])
#loc176 = loc(fused[#loc66, #loc67])
#loc177 = loc(fused[#loc70, #loc69])
#loc178 = loc(fused[#loc73, #loc71])
#loc179 = loc(fused[#loc74, #loc75])
#loc180 = loc(fused[#loc76, #loc77])
#loc181 = loc(fused[#loc79, #loc80])
#loc182 = loc(fused[#loc81, #loc82])
#loc183 = loc(fused[#loc83, #loc84])
#loc184 = loc(fused[#loc86, #loc85])
#loc185 = loc(fused[#loc87, #loc88])
#loc186 = loc(fused[#loc90, #loc84])
#loc187 = loc(fused[#loc94, #loc93])
#loc188 = loc(fused[#loc95, #loc96])
#loc189 = loc(fused[#loc97, #loc98])
#loc190 = loc(fused[#loc99, #loc100])
#loc191 = loc(fused[#loc101, #loc102])
#loc192 = loc(fused[#loc105, #loc103])
#loc193 = loc(fused[#loc106, #loc107])
#loc194 = loc(fused[#loc108, #loc109])
#loc195 = loc(fused[#loc112, #loc111])
#loc196 = loc(fused[#loc115, #loc113])
#loc197 = loc(fused[#loc116, #loc117])
#loc198 = loc(fused[#loc118, #loc119])
#loc199 = loc(fused[#loc121, #loc122])
#loc200 = loc(fused[#loc123, #loc124])
#loc201 = loc(fused[#loc125, #loc126])
#loc202 = loc(fused[#loc127, #loc128])
#loc203 = loc(fused[#loc131, #loc132])
#loc204 = loc(fused[#loc134, #loc126])
#loc205 = loc(fused[#loc135, #loc136])
#loc206 = loc(fused[#loc138, #loc137])
#loc207 = loc(fused[#loc139, #loc140])
#loc208 = loc(fused[#loc142, #loc136])
#loc209 = loc(fused[#loc146, #loc145])
