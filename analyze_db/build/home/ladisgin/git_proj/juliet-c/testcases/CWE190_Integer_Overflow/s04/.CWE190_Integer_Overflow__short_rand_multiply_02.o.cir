!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc17 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":29:23)
#loc57 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":54:23)
#loc96 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":87:23)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_rand_multiply_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc177)
  cir.func private @printIntLine(!s32i) loc(#loc178)
  cir.func no_proto @CWE190_Integer_Overflow__short_rand_multiply_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc180)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc181)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc11)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc182)
    cir.br ^bb1 loc(#loc183)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc184)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc17)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc17)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc17)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc17)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc17)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc17)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc17)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc17)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc17)
    cir.br ^bb5(%21 : !u32i) loc(#loc17)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc17)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc17)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc17)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc17)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc17)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc17)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc17)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc17)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc17)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc17)
    cir.br ^bb5(%37 : !u32i) loc(#loc17)
  ^bb5(%38: !u32i loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":29:23)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc17)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc17)
    %40 = cir.cast(integral, %39 : !s32i), !s16i loc(#loc17)
    cir.store %40, %1 : !s16i, !cir.ptr<!s16i> loc(#loc185)
    cir.br ^bb7 loc(#loc14)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc14)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc186)
  ^bb9:  // pred: ^bb8
    %41 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %42 ^bb10, ^bb15 loc(#loc187)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc188)
  ^bb11:  // pred: ^bb10
    %43 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc25)
    %44 = cir.cast(integral, %43 : !s16i), !s32i loc(#loc25)
    %45 = cir.const #cir.int<0> : !s32i loc(#loc26)
    %46 = cir.cmp(gt, %44, %45) : !s32i, !cir.bool loc(#loc189)
    cir.brcond %46 ^bb12, ^bb13 loc(#loc190)
  ^bb12:  // pred: ^bb11
    %47 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc28)
    %48 = cir.cast(integral, %47 : !s16i), !s32i loc(#loc28)
    %49 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %50 = cir.binop(mul, %48, %49) nsw : !s32i loc(#loc28)
    %51 = cir.cast(integral, %50 : !s32i), !s16i loc(#loc28)
    cir.store %51, %0 : !s16i, !cir.ptr<!s16i> loc(#loc180)
    %52 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc29)
    %53 = cir.cast(integral, %52 : !s16i), !s32i loc(#loc29)
    cir.call @printIntLine(%53) : (!s32i) -> () loc(#loc30)
    cir.br ^bb13 loc(#loc24)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc24)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc20)
  ^bb15:  // 2 preds: ^bb9, ^bb14
    cir.br ^bb16 loc(#loc20)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc6)
  } loc(#loc179)
  cir.func no_proto @CWE190_Integer_Overflow__short_rand_multiply_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc195)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc32)
  } loc(#loc191)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc196)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc44)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc198)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc199)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc51)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc51)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc200)
    cir.br ^bb1 loc(#loc201)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc55)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc202)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc57)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc57)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc57)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc57)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc57)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc57)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc57)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc57)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc57)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc57)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc57)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc57)
    cir.br ^bb5(%21 : !u32i) loc(#loc57)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc57)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc57)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc57)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc57)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc57)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc57)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc57)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc57)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc57)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc57)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc57)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc57)
    cir.br ^bb5(%37 : !u32i) loc(#loc57)
  ^bb5(%38: !u32i loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":54:23)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc57)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc57)
    %40 = cir.cast(integral, %39 : !s32i), !s16i loc(#loc57)
    cir.store %40, %1 : !s16i, !cir.ptr<!s16i> loc(#loc203)
    cir.br ^bb7 loc(#loc54)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc54)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc204)
  ^bb9:  // pred: ^bb8
    %41 = cir.const #cir.int<0> : !s32i loc(#loc61)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc61)
    cir.brcond %42 ^bb10, ^bb11 loc(#loc205)
  ^bb10:  // pred: ^bb9
    %43 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    cir.br ^bb21 loc(#loc63)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc206)
  ^bb12:  // pred: ^bb11
    %45 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc68)
    %46 = cir.cast(integral, %45 : !s16i), !s32i loc(#loc68)
    %47 = cir.const #cir.int<0> : !s32i loc(#loc69)
    %48 = cir.cmp(gt, %46, %47) : !s32i, !cir.bool loc(#loc207)
    cir.brcond %48 ^bb13, ^bb19 loc(#loc208)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc209)
  ^bb14:  // pred: ^bb13
    %49 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc73)
    %50 = cir.cast(integral, %49 : !s16i), !s32i loc(#loc73)
    %51 = cir.const #cir.int<32767> : !s32i loc(#loc74)
    %52 = cir.const #cir.int<2> : !s32i loc(#loc75)
    %53 = cir.binop(div, %51, %52) : !s32i loc(#loc210)
    %54 = cir.cmp(lt, %50, %53) : !s32i, !cir.bool loc(#loc211)
    cir.brcond %54 ^bb15, ^bb16 loc(#loc212)
  ^bb15:  // pred: ^bb14
    %55 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc80)
    %56 = cir.cast(integral, %55 : !s16i), !s32i loc(#loc80)
    %57 = cir.const #cir.int<2> : !s32i loc(#loc48)
    %58 = cir.binop(mul, %56, %57) nsw : !s32i loc(#loc80)
    %59 = cir.cast(integral, %58 : !s32i), !s16i loc(#loc80)
    cir.store %59, %0 : !s16i, !cir.ptr<!s16i> loc(#loc198)
    %60 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc81)
    %61 = cir.cast(integral, %60 : !s16i), !s32i loc(#loc81)
    cir.call @printIntLine(%61) : (!s32i) -> () loc(#loc82)
    cir.br ^bb17 loc(#loc78)
  ^bb16:  // pred: ^bb14
    %62 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc44)
    %63 = cir.cast(array_to_ptrdecay, %62 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%63) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    cir.br ^bb17 loc(#loc72)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc72)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc67)
  ^bb19:  // 2 preds: ^bb12, ^bb18
    cir.br ^bb20 loc(#loc67)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc60)
  ^bb21:  // 2 preds: ^bb10, ^bb20
    cir.br ^bb22 loc(#loc60)
  ^bb22:  // pred: ^bb21
    cir.return loc(#loc46)
  } loc(#loc197)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc214)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc215)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc90)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc90)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc216)
    cir.br ^bb1 loc(#loc217)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc94)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc94)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc218)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc96)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc96)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc96)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc96)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc96)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc96)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc96)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc96)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc96)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc96)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc96)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc96)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc96)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc96)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc96)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc96)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc96)
    cir.br ^bb5(%21 : !u32i) loc(#loc96)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc96)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc96)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc96)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc96)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc96)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc96)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc96)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc96)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc96)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc96)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc96)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc96)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc96)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc96)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc96)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc96)
    cir.br ^bb5(%37 : !u32i) loc(#loc96)
  ^bb5(%38: !u32i loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":87:23)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc96)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc96)
    %40 = cir.cast(integral, %39 : !s32i), !s16i loc(#loc96)
    cir.store %40, %1 : !s16i, !cir.ptr<!s16i> loc(#loc219)
    cir.br ^bb7 loc(#loc93)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc93)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc220)
  ^bb9:  // pred: ^bb8
    %41 = cir.const #cir.int<1> : !s32i loc(#loc100)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc100)
    cir.brcond %42 ^bb10, ^bb20 loc(#loc221)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc222)
  ^bb11:  // pred: ^bb10
    %43 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc104)
    %44 = cir.cast(integral, %43 : !s16i), !s32i loc(#loc104)
    %45 = cir.const #cir.int<0> : !s32i loc(#loc105)
    %46 = cir.cmp(gt, %44, %45) : !s32i, !cir.bool loc(#loc223)
    cir.brcond %46 ^bb12, ^bb18 loc(#loc224)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc225)
  ^bb13:  // pred: ^bb12
    %47 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc109)
    %48 = cir.cast(integral, %47 : !s16i), !s32i loc(#loc109)
    %49 = cir.const #cir.int<32767> : !s32i loc(#loc110)
    %50 = cir.const #cir.int<2> : !s32i loc(#loc111)
    %51 = cir.binop(div, %49, %50) : !s32i loc(#loc226)
    %52 = cir.cmp(lt, %48, %51) : !s32i, !cir.bool loc(#loc227)
    cir.brcond %52 ^bb14, ^bb15 loc(#loc228)
  ^bb14:  // pred: ^bb13
    %53 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc116)
    %54 = cir.cast(integral, %53 : !s16i), !s32i loc(#loc116)
    %55 = cir.const #cir.int<2> : !s32i loc(#loc87)
    %56 = cir.binop(mul, %54, %55) nsw : !s32i loc(#loc116)
    %57 = cir.cast(integral, %56 : !s32i), !s16i loc(#loc116)
    cir.store %57, %0 : !s16i, !cir.ptr<!s16i> loc(#loc214)
    %58 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc117)
    %59 = cir.cast(integral, %58 : !s16i), !s32i loc(#loc117)
    cir.call @printIntLine(%59) : (!s32i) -> () loc(#loc118)
    cir.br ^bb16 loc(#loc114)
  ^bb15:  // pred: ^bb13
    %60 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc119)
    %61 = cir.cast(array_to_ptrdecay, %60 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc119)
    cir.call @printLine(%61) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    cir.br ^bb16 loc(#loc108)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc108)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc103)
  ^bb18:  // 2 preds: ^bb11, ^bb17
    cir.br ^bb19 loc(#loc103)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc99)
  ^bb20:  // 2 preds: ^bb9, ^bb19
    cir.br ^bb21 loc(#loc99)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc85)
  } loc(#loc213)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc230)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc231)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc127)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc127)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc232)
    cir.br ^bb1 loc(#loc233)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<0> : !s32i loc(#loc131)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc131)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc234)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc135)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc135)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc136)
    cir.br ^bb4 loc(#loc133)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc137)
    %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc137)
    cir.store %9, %1 : !s16i, !cir.ptr<!s16i> loc(#loc235)
    cir.br ^bb4 loc(#loc130)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc130)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc236)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.int<1> : !s32i loc(#loc141)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc141)
    cir.brcond %11 ^bb7, ^bb12 loc(#loc237)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc238)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc145)
    %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc145)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc146)
    %15 = cir.cmp(gt, %13, %14) : !s32i, !cir.bool loc(#loc239)
    cir.brcond %15 ^bb9, ^bb10 loc(#loc240)
  ^bb9:  // pred: ^bb8
    %16 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc148)
    %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc148)
    %18 = cir.const #cir.int<2> : !s32i loc(#loc124)
    %19 = cir.binop(mul, %17, %18) nsw : !s32i loc(#loc148)
    %20 = cir.cast(integral, %19 : !s32i), !s16i loc(#loc148)
    cir.store %20, %0 : !s16i, !cir.ptr<!s16i> loc(#loc230)
    %21 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc149)
    %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc149)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc150)
    cir.br ^bb10 loc(#loc144)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc144)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc140)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc140)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc122)
  } loc(#loc229)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc242)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc243)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc157)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc157)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc244)
    cir.br ^bb1 loc(#loc245)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc161)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc161)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc246)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2> : !s32i loc(#loc163)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc163)
    cir.store %7, %1 : !s16i, !cir.ptr<!s16i> loc(#loc247)
    cir.br ^bb3 loc(#loc160)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc160)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc248)
  ^bb5:  // pred: ^bb4
    %8 = cir.const #cir.int<1> : !s32i loc(#loc167)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc167)
    cir.brcond %9 ^bb6, ^bb11 loc(#loc249)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc250)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc171)
    %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc171)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc172)
    %13 = cir.cmp(gt, %11, %12) : !s32i, !cir.bool loc(#loc251)
    cir.brcond %13 ^bb8, ^bb9 loc(#loc252)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc174)
    %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc174)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc154)
    %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc174)
    %18 = cir.cast(integral, %17 : !s32i), !s16i loc(#loc174)
    cir.store %18, %0 : !s16i, !cir.ptr<!s16i> loc(#loc242)
    %19 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc175)
    %20 = cir.cast(integral, %19 : !s16i), !s32i loc(#loc175)
    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc176)
    cir.br ^bb9 loc(#loc170)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc170)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc166)
  ^bb11:  // 2 preds: ^bb5, ^bb10
    cir.br ^bb12 loc(#loc166)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc152)
  } loc(#loc241)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_rand_multiply_02.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":40:1)
#loc7 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":36:13)
#loc8 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":36:35)
#loc9 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":24:5)
#loc10 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":24:11)
#loc11 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":25:12)
#loc12 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":25:5)
#loc13 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":26:5)
#loc14 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":30:5)
#loc15 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":26:8)
#loc16 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":27:5)
#loc18 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":29:9)
#loc19 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":31:5)
#loc20 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":39:5)
#loc21 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":31:8)
#loc22 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":32:5)
#loc23 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":33:9)
#loc24 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":38:9)
#loc25 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":33:12)
#loc26 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":33:19)
#loc27 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":34:9)
#loc28 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":36:28)
#loc29 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":37:26)
#loc30 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":37:13)
#loc31 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":154:1)
#loc32 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":160:1)
#loc33 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":156:5)
#loc34 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":156:14)
#loc35 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":157:5)
#loc36 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":157:14)
#loc37 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":158:5)
#loc38 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":158:14)
#loc39 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":159:5)
#loc40 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":159:14)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":59:19)
#loc44 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":73:27)
#loc45 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":47:1)
#loc46 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":77:1)
#loc47 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":68:17)
#loc48 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":68:39)
#loc49 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":49:5)
#loc50 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":49:11)
#loc51 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":50:12)
#loc52 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":50:5)
#loc53 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":51:5)
#loc54 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":55:5)
#loc55 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":51:8)
#loc56 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":52:5)
#loc58 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":54:9)
#loc59 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":56:5)
#loc60 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":76:5)
#loc61 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":56:8)
#loc62 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":57:5)
#loc63 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":60:5)
#loc64 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":62:5)
#loc65 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":59:9)
#loc66 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":63:9)
#loc67 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":75:9)
#loc68 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":63:12)
#loc69 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":63:19)
#loc70 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":64:9)
#loc71 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":66:13)
#loc72 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":74:13)
#loc73 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":66:17)
#loc74 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":66:25)
#loc75 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":66:34)
#loc76 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":66:35)
#loc77 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":67:13)
#loc78 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":70:13)
#loc79 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":72:13)
#loc80 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":68:32)
#loc81 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":69:30)
#loc82 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":69:17)
#loc83 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":73:17)
#loc84 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":80:1)
#loc85 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":105:1)
#loc86 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":96:17)
#loc87 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":96:39)
#loc88 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":82:5)
#loc89 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":82:11)
#loc90 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":83:12)
#loc91 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":83:5)
#loc92 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":84:5)
#loc93 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":88:5)
#loc94 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":84:8)
#loc95 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":85:5)
#loc97 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":87:9)
#loc98 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":89:5)
#loc99 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":104:5)
#loc100 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":89:8)
#loc101 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":90:5)
#loc102 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":91:9)
#loc103 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":103:9)
#loc104 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":91:12)
#loc105 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":91:19)
#loc106 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":92:9)
#loc107 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":94:13)
#loc108 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":102:13)
#loc109 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":94:17)
#loc110 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":94:25)
#loc111 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":94:34)
#loc112 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":94:35)
#loc113 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":95:13)
#loc114 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":98:13)
#loc115 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":100:13)
#loc116 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":96:32)
#loc117 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":97:30)
#loc118 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":97:17)
#loc119 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":101:27)
#loc120 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":101:17)
#loc121 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":108:1)
#loc122 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":131:1)
#loc123 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":127:13)
#loc124 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":127:35)
#loc125 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":110:5)
#loc126 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":110:11)
#loc127 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":111:12)
#loc128 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":111:5)
#loc129 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":112:5)
#loc130 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":121:5)
#loc131 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":112:8)
#loc132 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":113:5)
#loc133 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":116:5)
#loc134 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":118:5)
#loc135 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":115:19)
#loc136 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":115:9)
#loc137 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":120:16)
#loc138 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":120:9)
#loc139 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":122:5)
#loc140 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":130:5)
#loc141 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":122:8)
#loc142 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":123:5)
#loc143 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":124:9)
#loc144 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":129:9)
#loc145 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":124:12)
#loc146 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":124:19)
#loc147 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":125:9)
#loc148 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":127:28)
#loc149 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":128:26)
#loc150 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":128:13)
#loc151 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":134:1)
#loc152 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":152:1)
#loc153 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":148:13)
#loc154 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":148:35)
#loc155 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":136:5)
#loc156 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":136:11)
#loc157 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":137:12)
#loc158 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":137:5)
#loc159 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":138:5)
#loc160 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":142:5)
#loc161 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":138:8)
#loc162 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":139:5)
#loc163 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":141:16)
#loc164 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":141:9)
#loc165 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":143:5)
#loc166 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":151:5)
#loc167 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":143:8)
#loc168 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":144:5)
#loc169 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":145:9)
#loc170 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":150:9)
#loc171 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":145:12)
#loc172 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":145:19)
#loc173 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":146:9)
#loc174 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":148:28)
#loc175 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":149:26)
#loc176 = loc("CWE190_Integer_Overflow__short_rand_multiply_02.c":149:13)
#loc177 = loc(fused[#loc1, #loc2])
#loc178 = loc(fused[#loc3, #loc4])
#loc179 = loc(fused[#loc5, #loc6])
#loc180 = loc(fused[#loc7, #loc8])
#loc181 = loc(fused[#loc9, #loc10])
#loc182 = loc(fused[#loc12, #loc11])
#loc183 = loc(fused[#loc13, #loc14])
#loc184 = loc(fused[#loc16, #loc14])
#loc185 = loc(fused[#loc18, #loc17])
#loc186 = loc(fused[#loc19, #loc20])
#loc187 = loc(fused[#loc22, #loc20])
#loc188 = loc(fused[#loc23, #loc24])
#loc189 = loc(fused[#loc25, #loc26])
#loc190 = loc(fused[#loc27, #loc24])
#loc191 = loc(fused[#loc31, #loc32])
#loc192 = loc(fused[#loc33, #loc34])
#loc193 = loc(fused[#loc35, #loc36])
#loc194 = loc(fused[#loc37, #loc38])
#loc195 = loc(fused[#loc39, #loc40])
#loc196 = loc(fused[#loc41, #loc42])
#loc197 = loc(fused[#loc45, #loc46])
#loc198 = loc(fused[#loc47, #loc48])
#loc199 = loc(fused[#loc49, #loc50])
#loc200 = loc(fused[#loc52, #loc51])
#loc201 = loc(fused[#loc53, #loc54])
#loc202 = loc(fused[#loc56, #loc54])
#loc203 = loc(fused[#loc58, #loc57])
#loc204 = loc(fused[#loc59, #loc60])
#loc205 = loc(fused[#loc62, #loc63, #loc64, #loc60])
#loc206 = loc(fused[#loc66, #loc67])
#loc207 = loc(fused[#loc68, #loc69])
#loc208 = loc(fused[#loc70, #loc67])
#loc209 = loc(fused[#loc71, #loc72])
#loc210 = loc(fused[#loc74, #loc75])
#loc211 = loc(fused[#loc73, #loc76])
#loc212 = loc(fused[#loc77, #loc78, #loc79, #loc72])
#loc213 = loc(fused[#loc84, #loc85])
#loc214 = loc(fused[#loc86, #loc87])
#loc215 = loc(fused[#loc88, #loc89])
#loc216 = loc(fused[#loc91, #loc90])
#loc217 = loc(fused[#loc92, #loc93])
#loc218 = loc(fused[#loc95, #loc93])
#loc219 = loc(fused[#loc97, #loc96])
#loc220 = loc(fused[#loc98, #loc99])
#loc221 = loc(fused[#loc101, #loc99])
#loc222 = loc(fused[#loc102, #loc103])
#loc223 = loc(fused[#loc104, #loc105])
#loc224 = loc(fused[#loc106, #loc103])
#loc225 = loc(fused[#loc107, #loc108])
#loc226 = loc(fused[#loc110, #loc111])
#loc227 = loc(fused[#loc109, #loc112])
#loc228 = loc(fused[#loc113, #loc114, #loc115, #loc108])
#loc229 = loc(fused[#loc121, #loc122])
#loc230 = loc(fused[#loc123, #loc124])
#loc231 = loc(fused[#loc125, #loc126])
#loc232 = loc(fused[#loc128, #loc127])
#loc233 = loc(fused[#loc129, #loc130])
#loc234 = loc(fused[#loc132, #loc133, #loc134, #loc130])
#loc235 = loc(fused[#loc138, #loc137])
#loc236 = loc(fused[#loc139, #loc140])
#loc237 = loc(fused[#loc142, #loc140])
#loc238 = loc(fused[#loc143, #loc144])
#loc239 = loc(fused[#loc145, #loc146])
#loc240 = loc(fused[#loc147, #loc144])
#loc241 = loc(fused[#loc151, #loc152])
#loc242 = loc(fused[#loc153, #loc154])
#loc243 = loc(fused[#loc155, #loc156])
#loc244 = loc(fused[#loc158, #loc157])
#loc245 = loc(fused[#loc159, #loc160])
#loc246 = loc(fused[#loc162, #loc160])
#loc247 = loc(fused[#loc164, #loc163])
#loc248 = loc(fused[#loc165, #loc166])
#loc249 = loc(fused[#loc168, #loc166])
#loc250 = loc(fused[#loc169, #loc170])
#loc251 = loc(fused[#loc171, #loc172])
#loc252 = loc(fused[#loc173, #loc170])
