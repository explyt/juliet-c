!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc85)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc87)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc7)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc88)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc11)
        cir.condition(%3) loc(#loc11)
      } do {
        cir.scope {
          %2 = cir.const #cir.int<10> : !s32i loc(#loc13)
          %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc13)
          %4 = cir.alloca !u8i, !cir.ptr<!u8i>, %3 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc13)
          %5 = cir.cast(bitcast, %4 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc13)
          %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc13)
          cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc91)
          cir.break loc(#loc15)
        } loc(#loc90)
        cir.yield loc(#loc10)
      } loc(#loc89)
    } loc(#loc89)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc93)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc94)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc93)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc93)
      cir.scope {
        %9 = cir.const #cir.int<0> : !s32i loc(#loc24)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc24)
        cir.store %10, %3 : !u64i, !cir.ptr<!u64i> loc(#loc96)
        cir.for : cond {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc26)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc27)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc27)
          %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc97)
          cir.condition(%14) loc(#loc28)
        } body {
          cir.scope {
            %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc30)
            %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc31)
            %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !u64i), !cir.ptr<!s32i> loc(#loc31)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc31)
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
            %16 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc33)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc34)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc99)
          } loc(#loc98)
          cir.yield loc(#loc23)
        } step {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc36)
          %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc37)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc100)
          cir.yield loc(#loc95)
        } loc(#loc95)
      } loc(#loc95)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc39)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc40)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc38)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc41)
    } loc(#loc92)
    cir.return loc(#loc4)
  } loc(#loc86)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc102)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    cir.return loc(#loc43)
  } loc(#loc101)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc104)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc50)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc105)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc54)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc54)
        cir.condition(%3) loc(#loc54)
      } do {
        cir.scope {
          %2 = cir.const #cir.int<10> : !s32i loc(#loc56)
          %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc56)
          %4 = cir.const #cir.int<4> : !u64i loc(#loc56)
          %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc56)
          %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc56)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc56)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc56)
          cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc108)
          cir.break loc(#loc58)
        } loc(#loc107)
        cir.yield loc(#loc53)
      } loc(#loc106)
    } loc(#loc106)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc110)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc111)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc110)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc110)
      cir.scope {
        %9 = cir.const #cir.int<0> : !s32i loc(#loc67)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc67)
        cir.store %10, %3 : !u64i, !cir.ptr<!u64i> loc(#loc113)
        cir.for : cond {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc69)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc70)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc70)
          %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc114)
          cir.condition(%14) loc(#loc71)
        } body {
          cir.scope {
            %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc73)
            %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc74)
            %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !u64i), !cir.ptr<!s32i> loc(#loc74)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc74)
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc75)
            %16 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc76)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc77)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc116)
          } loc(#loc115)
          cir.yield loc(#loc66)
        } step {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc79)
          %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc80)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc117)
          cir.yield loc(#loc112)
        } loc(#loc112)
      } loc(#loc112)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc81)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc82)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc83)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc81)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc84)
    } loc(#loc109)
    cir.return loc(#loc47)
  } loc(#loc103)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":41:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":23:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":23:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":24:12)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":24:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":30:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":25:11)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":26:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":28:23)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":28:9)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":29:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":31:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":40:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":32:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":32:28)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":33:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":33:16)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":35:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":38:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":35:18)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":35:14)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":35:21)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":35:25)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":35:23)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":36:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":37:30)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":37:23)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":37:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":37:18)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":37:19)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":37:31)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":35:30)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":35:29)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":39:22)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":39:27)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":39:28)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":39:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":70:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":73:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":72:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":72:13)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":48:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":68:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":50:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":50:11)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":51:12)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":51:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":52:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":57:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":52:11)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":53:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":55:23)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":55:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":56:9)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":58:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":67:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":59:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":59:28)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":60:9)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":60:16)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":62:9)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":65:9)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":62:18)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":62:14)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":62:21)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":62:25)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":62:23)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":63:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":64:30)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":64:23)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":64:13)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":64:18)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":64:19)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":64:31)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":62:30)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":62:29)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":66:22)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":66:27)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":66:28)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c":66:9)
#loc85 = loc(fused[#loc1, #loc2])
#loc86 = loc(fused[#loc3, #loc4])
#loc87 = loc(fused[#loc5, #loc6])
#loc88 = loc(fused[#loc8, #loc7])
#loc89 = loc(fused[#loc9, #loc10])
#loc90 = loc(fused[#loc12, #loc10])
#loc91 = loc(fused[#loc14, #loc13])
#loc92 = loc(fused[#loc16, #loc17])
#loc93 = loc(fused[#loc18, #loc19])
#loc94 = loc(fused[#loc20, #loc21])
#loc95 = loc(fused[#loc22, #loc23])
#loc96 = loc(fused[#loc25, #loc24])
#loc97 = loc(fused[#loc26, #loc27])
#loc98 = loc(fused[#loc29, #loc23])
#loc99 = loc(fused[#loc32, #loc35])
#loc100 = loc(fused[#loc37, #loc36])
#loc101 = loc(fused[#loc42, #loc43])
#loc102 = loc(fused[#loc44, #loc45])
#loc103 = loc(fused[#loc46, #loc47])
#loc104 = loc(fused[#loc48, #loc49])
#loc105 = loc(fused[#loc51, #loc50])
#loc106 = loc(fused[#loc52, #loc53])
#loc107 = loc(fused[#loc55, #loc53])
#loc108 = loc(fused[#loc57, #loc56])
#loc109 = loc(fused[#loc59, #loc60])
#loc110 = loc(fused[#loc61, #loc62])
#loc111 = loc(fused[#loc63, #loc64])
#loc112 = loc(fused[#loc65, #loc66])
#loc113 = loc(fused[#loc68, #loc67])
#loc114 = loc(fused[#loc69, #loc70])
#loc115 = loc(fused[#loc72, #loc66])
#loc116 = loc(fused[#loc75, #loc78])
#loc117 = loc(fused[#loc80, #loc79])
