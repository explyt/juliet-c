!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":114:10)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":114:14)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":114:20)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":114:32)
#loc278 = loc(fused[#loc95, #loc96])
#loc279 = loc(fused[#loc97, #loc98])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc243)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc244)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc245)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc246)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc247)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc248)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc249)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc250)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc252)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc253)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc254)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc255)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
    cir.store %4, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc256)
    cir.br ^bb1 loc(#loc257)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc31)
    %6 = cir.const #cir.int<50> : !s32i loc(#loc32)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc32)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc258)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc259)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc31)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc260)
    cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc252)
    cir.br ^bb2 loc(#loc261)
  ^bb2:  // pred: ^bb1
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc38)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc38)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc262)
    cir.brcond %15 ^bb3, ^bb4 loc(#loc263)
  ^bb3:  // pred: ^bb2
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc40)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc42)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc40)
    cir.br ^bb4 loc(#loc36)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc36)
  ^bb5:  // pred: ^bb4
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
    %20 = cir.const #cir.int<65> : !s32i loc(#loc44)
    %21 = cir.const #cir.int<50> : !s32i loc(#loc45)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc45)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc45)
    %25 = cir.call @wmemset(%19, %20, %24) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc47)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc48)
    %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
    %28 = cir.const #cir.int<50> : !s32i loc(#loc50)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc50)
    %31 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc52)
    cir.store %26, %31 : !s32i, !cir.ptr<!s32i> loc(#loc264)
    %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc53)
    cir.store %33, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc265)
    cir.br ^bb6 loc(#loc30)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc266)
  ^bb7:  // pred: ^bb6
    %34 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc57)
    %35 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc58)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc58)
    %37 = cir.call @strlen(%36) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc57)
    cir.store %37, %1 : !u64i, !cir.ptr<!u64i> loc(#loc253)
    %38 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc59)
    %39 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc60)
    %40 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc61)
    %42 = cir.binop(add, %39, %41) : !u64i loc(#loc267)
    %43 = cir.const #cir.int<4> : !u64i loc(#loc268)
    %44 = cir.call @calloc(%42, %43) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc59)
    cir.store %44, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc254)
    cir.br ^bb8 loc(#loc269)
  ^bb8:  // pred: ^bb7
    %45 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc66)
    %46 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc67)
    %47 = cir.cmp(eq, %45, %46) : !cir.ptr<!void>, !cir.bool loc(#loc270)
    cir.brcond %47 ^bb9, ^bb10 loc(#loc271)
  ^bb9:  // pred: ^bb8
    %48 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc69)
    %49 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %50 = cir.unary(minus, %49) : !s32i, !s32i loc(#loc71)
    cir.call @exit(%50) : (!s32i) -> () extra(#fn_attr) loc(#loc69)
    cir.br ^bb10 loc(#loc65)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc65)
  ^bb11:  // pred: ^bb10
    %51 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc72)
    %52 = cir.cast(bitcast, %51 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc72)
    %53 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc73)
    %54 = cir.cast(bitcast, %53 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc73)
    %55 = cir.call @wcscpy(%52, %54) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc74)
    %56 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc75)
    %57 = cir.cast(bitcast, %56 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%57) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %58 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc77)
    cir.call @free(%58) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc78)
    cir.br ^bb12 loc(#loc56)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc18)
  } loc(#loc251)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc273)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc81)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc274)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc83)
    cir.return loc(#loc80)
  } loc(#loc272)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc275)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc276)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc92)
  cir.func @main(%arg0: !s32i loc(fused[#loc95, #loc96]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc97, #loc98])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc278)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc279)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc94)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc99)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc100)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc101)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc101)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc102)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc89)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc103)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc280)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_01_good() : () -> () loc(#loc104)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc90)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc90)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc91)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc281)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_01_bad() : () -> () loc(#loc108)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc92)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc111)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc282)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc282)
    cir.return %17 : !s32i loc(#loc282)
  } loc(#loc277)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc283)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc285)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc286)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc287)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc288)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc125)
    cir.store %4, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc289)
    cir.br ^bb1 loc(#loc290)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc129)
    %6 = cir.const #cir.int<50> : !s32i loc(#loc130)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc130)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc291)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc292)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc129)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc293)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc285)
    cir.br ^bb2 loc(#loc294)
  ^bb2:  // pred: ^bb1
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc136)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc136)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc295)
    cir.brcond %15 ^bb3, ^bb4 loc(#loc296)
  ^bb3:  // pred: ^bb2
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc138)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc140)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc138)
    cir.br ^bb4 loc(#loc134)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc134)
  ^bb5:  // pred: ^bb4
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc141)
    %21 = cir.const #cir.int<65> : !s32i loc(#loc142)
    %22 = cir.const #cir.int<50> : !s32i loc(#loc143)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc144)
    %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc143)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc143)
    cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc297)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc147)
    %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc147)
    %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
    %29 = cir.const #cir.int<50> : !s32i loc(#loc149)
    %30 = cir.const #cir.int<1> : !s32i loc(#loc150)
    %31 = cir.binop(sub, %29, %30) nsw : !s32i loc(#loc149)
    %32 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %31 : !s32i), !cir.ptr<!s8i> loc(#loc151)
    cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc298)
    %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc152)
    %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc152)
    cir.store %34, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc299)
    cir.br ^bb6 loc(#loc128)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc300)
  ^bb7:  // pred: ^bb6
    %35 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc156)
    %36 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc157)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc157)
    %38 = cir.call @strlen(%37) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc156)
    cir.store %38, %1 : !u64i, !cir.ptr<!u64i> loc(#loc286)
    %39 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc158)
    %40 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc159)
    %41 = cir.const #cir.int<1> : !s32i loc(#loc160)
    %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc160)
    %43 = cir.binop(add, %40, %42) : !u64i loc(#loc301)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc161)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc161)
    %46 = cir.call @calloc(%43, %45) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc158)
    cir.store %46, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc287)
    cir.br ^bb8 loc(#loc302)
  ^bb8:  // pred: ^bb7
    %47 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc164)
    %48 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc165)
    %49 = cir.cmp(eq, %47, %48) : !cir.ptr<!void>, !cir.bool loc(#loc303)
    cir.brcond %49 ^bb9, ^bb10 loc(#loc304)
  ^bb9:  // pred: ^bb8
    %50 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc167)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc168)
    %52 = cir.unary(minus, %51) : !s32i, !s32i loc(#loc169)
    cir.call @exit(%52) : (!s32i) -> () extra(#fn_attr) loc(#loc167)
    cir.br ^bb10 loc(#loc163)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc163)
  ^bb11:  // pred: ^bb10
    %53 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc170)
    %54 = cir.cast(bitcast, %53 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc170)
    %55 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc171)
    %56 = cir.cast(bitcast, %55 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc171)
    %57 = cir.call @strcpy(%54, %56) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc172)
    %58 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc173)
    %59 = cir.cast(bitcast, %58 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc173)
    cir.call @printLine(%59) : (!cir.ptr<!s8i>) -> () loc(#loc174)
    %60 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc175)
    cir.call @free(%60) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc176)
    cir.br ^bb12 loc(#loc155)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc116)
  } loc(#loc284)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc305)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc306)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc308)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc309)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc310)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc311)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc191)
    cir.store %4, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc312)
    cir.br ^bb1 loc(#loc313)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc195)
    %6 = cir.const #cir.int<50> : !s32i loc(#loc196)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc196)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc314)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc315)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc195)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc316)
    cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc308)
    cir.br ^bb2 loc(#loc317)
  ^bb2:  // pred: ^bb1
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc201)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc202)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc202)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc318)
    cir.brcond %15 ^bb3, ^bb4 loc(#loc319)
  ^bb3:  // pred: ^bb2
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc204)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc205)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc206)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc204)
    cir.br ^bb4 loc(#loc200)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc200)
  ^bb5:  // pred: ^bb4
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc207)
    %20 = cir.const #cir.int<65> : !s32i loc(#loc208)
    %21 = cir.const #cir.int<50> : !s32i loc(#loc209)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc210)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc209)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc209)
    %25 = cir.call @wmemset(%19, %20, %24) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc211)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc212)
    %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc213)
    %28 = cir.const #cir.int<50> : !s32i loc(#loc214)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc215)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc214)
    %31 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc216)
    cir.store %26, %31 : !s32i, !cir.ptr<!s32i> loc(#loc320)
    %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc217)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc217)
    cir.store %33, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc321)
    cir.br ^bb6 loc(#loc194)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc322)
  ^bb7:  // pred: ^bb6
    %34 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc221)
    %35 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc222)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc222)
    %37 = cir.call @wcslen(%36) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc221)
    cir.store %37, %1 : !u64i, !cir.ptr<!u64i> loc(#loc309)
    %38 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc223)
    %39 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc224)
    %40 = cir.const #cir.int<1> : !s32i loc(#loc225)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc225)
    %42 = cir.binop(add, %39, %41) : !u64i loc(#loc323)
    %43 = cir.const #cir.int<4> : !u64i loc(#loc324)
    %44 = cir.call @calloc(%42, %43) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc223)
    cir.store %44, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc310)
    cir.br ^bb8 loc(#loc325)
  ^bb8:  // pred: ^bb7
    %45 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc230)
    %46 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc231)
    %47 = cir.cmp(eq, %45, %46) : !cir.ptr<!void>, !cir.bool loc(#loc326)
    cir.brcond %47 ^bb9, ^bb10 loc(#loc327)
  ^bb9:  // pred: ^bb8
    %48 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc233)
    %49 = cir.const #cir.int<1> : !s32i loc(#loc234)
    %50 = cir.unary(minus, %49) : !s32i, !s32i loc(#loc235)
    cir.call @exit(%50) : (!s32i) -> () extra(#fn_attr) loc(#loc233)
    cir.br ^bb10 loc(#loc229)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc229)
  ^bb11:  // pred: ^bb10
    %51 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc236)
    %52 = cir.cast(bitcast, %51 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc236)
    %53 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc237)
    %54 = cir.cast(bitcast, %53 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc237)
    %55 = cir.call @wcscpy(%52, %54) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc238)
    %56 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc239)
    %57 = cir.cast(bitcast, %56 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc239)
    cir.call @printWLine(%57) : (!cir.ptr<!s32i>) -> () loc(#loc240)
    %58 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc241)
    cir.call @free(%58) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc242)
    cir.br ^bb12 loc(#loc220)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc182)
  } loc(#loc307)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/stdlib.h":675:1)
#loc10 = loc("/usr/include/stdlib.h":676:14)
#loc11 = loc("/usr/include/wchar.h":98:1)
#loc12 = loc("/usr/include/wchar.h":100:14)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":24:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":45:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":29:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":29:71)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":38:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":38:45)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":39:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":39:64)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":26:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":26:12)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":27:12)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":27:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":28:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":35:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":29:46)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":29:53)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":29:56)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":29:70)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":30:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":30:46)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":30:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":30:30)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":30:36)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":30:37)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":30:43)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":30:42)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":31:17)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":31:32)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":31:38)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":31:41)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":31:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":32:31)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":32:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":32:23)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":32:26)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":32:27)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":34:24)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":34:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":36:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":44:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":38:26)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":38:41)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":39:31)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":39:38)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":39:46)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":39:49)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":39:63)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":40:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":40:37)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":40:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":40:21)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":40:27)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":40:28)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":40:34)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":40:33)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":41:22)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":41:28)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":41:15)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":42:27)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":42:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":43:14)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":43:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":99:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":103:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":101:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":101:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":102:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":102:13)
#loc85 = loc("/usr/include/stdlib.h":575:1)
#loc86 = loc("/usr/include/stdlib.h":575:41)
#loc87 = loc("/usr/include/time.h":76:1)
#loc88 = loc("/usr/include/time.h":76:38)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":119:15)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":121:15)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":124:15)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":126:15)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":114:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":129:1)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":115:1)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":117:27)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":117:22)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":117:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":119:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":120:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":120:55)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":121:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":124:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":125:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":125:54)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":126:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":128:12)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":128:5)
#loc113 = loc("/usr/include/string.h":141:1)
#loc114 = loc("/usr/include/string.h":142:14)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":52:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":73:1)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":57:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":57:63)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":66:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":66:45)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":67:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":67:50)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":54:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":54:12)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":55:12)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":55:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":56:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":63:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":57:41)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":57:48)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":57:51)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":57:62)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":58:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":58:47)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":58:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":58:31)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":58:37)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":58:38)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":58:44)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":58:43)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":59:16)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":59:32)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":59:37)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":59:40)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":59:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":59:41)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":60:32)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":60:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":60:24)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":60:27)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":60:28)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":62:24)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":62:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":64:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":72:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":66:26)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":66:41)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":67:31)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":67:38)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":67:46)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":67:49)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":68:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":68:37)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":68:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":68:21)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":68:27)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":68:28)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":68:34)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":68:33)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":69:22)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":69:28)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":69:15)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":70:27)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":70:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":71:14)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":71:9)
#loc177 = loc("/usr/include/wchar.h":247:1)
#loc178 = loc("/usr/include/wchar.h":247:51)
#loc179 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc180 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":76:1)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":97:1)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":81:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":81:71)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":90:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":90:48)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":91:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":91:64)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":78:5)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":78:12)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":79:12)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":79:5)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":80:5)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":87:5)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":81:46)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":81:53)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":81:56)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":81:70)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":82:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":82:46)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":82:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":82:30)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":82:36)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":82:37)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":82:43)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":82:42)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":83:17)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":83:32)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":83:38)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":83:41)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":83:9)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":84:31)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":84:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":84:23)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":84:26)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":84:27)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":86:24)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":86:9)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":88:5)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":96:5)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":90:26)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":90:44)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":91:31)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":91:38)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":91:46)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":91:49)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":91:63)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":92:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":92:37)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":92:13)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":92:21)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":92:27)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":92:28)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":92:34)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":92:33)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":93:22)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":93:28)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":93:15)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":94:31)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":94:9)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":95:14)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c":95:9)
#loc243 = loc(fused[#loc1, #loc2])
#loc244 = loc(fused[#loc3, #loc4])
#loc245 = loc(fused[#loc5, #loc6])
#loc246 = loc(fused[#loc7, #loc8])
#loc247 = loc(fused[#loc9, #loc10])
#loc248 = loc(fused[#loc11, #loc12])
#loc249 = loc(fused[#loc13, #loc14])
#loc250 = loc(fused[#loc15, #loc16])
#loc251 = loc(fused[#loc17, #loc18])
#loc252 = loc(fused[#loc19, #loc20])
#loc253 = loc(fused[#loc21, #loc22])
#loc254 = loc(fused[#loc23, #loc24])
#loc255 = loc(fused[#loc25, #loc26])
#loc256 = loc(fused[#loc28, #loc27])
#loc257 = loc(fused[#loc29, #loc30])
#loc258 = loc(fused[#loc33, #loc34])
#loc259 = loc(fused[#loc32, #loc34])
#loc260 = loc(fused[#loc31, #loc20])
#loc261 = loc(fused[#loc35, #loc36])
#loc262 = loc(fused[#loc37, #loc38])
#loc263 = loc(fused[#loc39, #loc36])
#loc264 = loc(fused[#loc49, #loc48])
#loc265 = loc(fused[#loc54, #loc53])
#loc266 = loc(fused[#loc55, #loc56])
#loc267 = loc(fused[#loc60, #loc61])
#loc268 = loc(fused[#loc62, #loc63])
#loc269 = loc(fused[#loc64, #loc65])
#loc270 = loc(fused[#loc66, #loc67])
#loc271 = loc(fused[#loc68, #loc65])
#loc272 = loc(fused[#loc79, #loc80])
#loc273 = loc(fused[#loc81, #loc82])
#loc274 = loc(fused[#loc83, #loc84])
#loc275 = loc(fused[#loc85, #loc86])
#loc276 = loc(fused[#loc87, #loc88])
#loc277 = loc(fused[#loc93, #loc94])
#loc280 = loc(fused[#loc104, #loc105])
#loc281 = loc(fused[#loc108, #loc109])
#loc282 = loc(fused[#loc112, #loc111])
#loc283 = loc(fused[#loc113, #loc114])
#loc284 = loc(fused[#loc115, #loc116])
#loc285 = loc(fused[#loc117, #loc118])
#loc286 = loc(fused[#loc119, #loc120])
#loc287 = loc(fused[#loc121, #loc122])
#loc288 = loc(fused[#loc123, #loc124])
#loc289 = loc(fused[#loc126, #loc125])
#loc290 = loc(fused[#loc127, #loc128])
#loc291 = loc(fused[#loc131, #loc132])
#loc292 = loc(fused[#loc130, #loc132])
#loc293 = loc(fused[#loc129, #loc118])
#loc294 = loc(fused[#loc133, #loc134])
#loc295 = loc(fused[#loc135, #loc136])
#loc296 = loc(fused[#loc137, #loc134])
#loc297 = loc(fused[#loc145, #loc146])
#loc298 = loc(fused[#loc148, #loc147])
#loc299 = loc(fused[#loc153, #loc152])
#loc300 = loc(fused[#loc154, #loc155])
#loc301 = loc(fused[#loc159, #loc160])
#loc302 = loc(fused[#loc162, #loc163])
#loc303 = loc(fused[#loc164, #loc165])
#loc304 = loc(fused[#loc166, #loc163])
#loc305 = loc(fused[#loc177, #loc178])
#loc306 = loc(fused[#loc179, #loc180])
#loc307 = loc(fused[#loc181, #loc182])
#loc308 = loc(fused[#loc183, #loc184])
#loc309 = loc(fused[#loc185, #loc186])
#loc310 = loc(fused[#loc187, #loc188])
#loc311 = loc(fused[#loc189, #loc190])
#loc312 = loc(fused[#loc192, #loc191])
#loc313 = loc(fused[#loc193, #loc194])
#loc314 = loc(fused[#loc197, #loc198])
#loc315 = loc(fused[#loc196, #loc198])
#loc316 = loc(fused[#loc195, #loc184])
#loc317 = loc(fused[#loc199, #loc200])
#loc318 = loc(fused[#loc201, #loc202])
#loc319 = loc(fused[#loc203, #loc200])
#loc320 = loc(fused[#loc213, #loc212])
#loc321 = loc(fused[#loc218, #loc217])
#loc322 = loc(fused[#loc219, #loc220])
#loc323 = loc(fused[#loc224, #loc225])
#loc324 = loc(fused[#loc226, #loc227])
#loc325 = loc(fused[#loc228, #loc229])
#loc326 = loc(fused[#loc230, #loc231])
#loc327 = loc(fused[#loc232, #loc229])
