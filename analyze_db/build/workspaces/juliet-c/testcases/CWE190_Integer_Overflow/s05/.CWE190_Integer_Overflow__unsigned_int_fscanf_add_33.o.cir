!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc23_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc85)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc86)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%u\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printUnsignedLine(!u32i) loc(#loc87)
  cir.func @_ZN51CWE190_Integer_Overflow__unsigned_int_fscanf_add_333badEv() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc89)
    %1 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc90)
    cir.store %0, %1 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc13)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc14)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc14)
    cir.store %3, %0 : !u32i, !cir.ptr<!u32i> loc(#loc91)
    %4 = cir.get_global @__isoc23_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc16)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc86)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc17)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %9 = cir.call @__isoc23_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc16)
    cir.scope {
      %10 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc93)
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc21)
      %12 = cir.load %11 : !cir.ptr<!u32i>, !u32i loc(#loc21)
      cir.store %12, %10 : !u32i, !cir.ptr<!u32i> loc(#loc93)
      cir.scope {
        %13 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc95)
        %14 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc26)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc25)
        %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc25)
        %17 = cir.binop(add, %14, %16) : !u32i loc(#loc96)
        cir.store %17, %13 : !u32i, !cir.ptr<!u32i> loc(#loc95)
        %18 = cir.load %13 : !cir.ptr<!u32i>, !u32i loc(#loc27)
        cir.call @printUnsignedLine(%18) : (!u32i) -> () loc(#loc28)
      } loc(#loc94)
    } loc(#loc92)
    cir.return loc(#loc9)
  } loc(#loc88)
  cir.func internal private @_ZN51CWE190_Integer_Overflow__unsigned_int_fscanf_add_33L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc98)
    %1 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc99)
    cir.store %0, %1 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc34)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc35)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc35)
    cir.store %3, %0 : !u32i, !cir.ptr<!u32i> loc(#loc100)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc37)
    %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc37)
    cir.store %5, %0 : !u32i, !cir.ptr<!u32i> loc(#loc101)
    cir.scope {
      %6 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc103)
      %7 = cir.load %1 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc42)
      %8 = cir.load %7 : !cir.ptr<!u32i>, !u32i loc(#loc42)
      cir.store %8, %6 : !u32i, !cir.ptr<!u32i> loc(#loc103)
      cir.scope {
        %9 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc105)
        %10 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc47)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc46)
        %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc46)
        %13 = cir.binop(add, %10, %12) : !u32i loc(#loc106)
        cir.store %13, %9 : !u32i, !cir.ptr<!u32i> loc(#loc105)
        %14 = cir.load %9 : !cir.ptr<!u32i>, !u32i loc(#loc48)
        cir.call @printUnsignedLine(%14) : (!u32i) -> () loc(#loc49)
      } loc(#loc104)
    } loc(#loc102)
    cir.return loc(#loc30)
  } loc(#loc97)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc52)
  cir.func internal private @_ZN51CWE190_Integer_Overflow__unsigned_int_fscanf_add_33L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc109)
    %1 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc110)
    cir.store %0, %1 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc58)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc59)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc59)
    cir.store %3, %0 : !u32i, !cir.ptr<!u32i> loc(#loc111)
    %4 = cir.get_global @__isoc23_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc61)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc86)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc62)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc63)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc63)
    %9 = cir.call @__isoc23_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc61)
    cir.scope {
      %10 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc113)
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc67)
      %12 = cir.load %11 : !cir.ptr<!u32i>, !u32i loc(#loc67)
      cir.store %12, %10 : !u32i, !cir.ptr<!u32i> loc(#loc113)
      cir.scope {
        %13 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc70)
        %14 = cir.const #cir.int<2147483647> : !s32i loc(#loc71)
        %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc71)
        %16 = cir.const #cir.int<2> : !u32i loc(#loc71)
        %17 = cir.binop(mul, %15, %16) : !u32i loc(#loc71)
        %18 = cir.const #cir.int<1> : !u32i loc(#loc71)
        %19 = cir.binop(add, %17, %18) : !u32i loc(#loc71)
        %20 = cir.cmp(lt, %13, %19) : !u32i, !cir.bool loc(#loc115)
        cir.if %20 {
          %21 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc117)
          %22 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc77)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc76)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc76)
          %25 = cir.binop(add, %22, %24) : !u32i loc(#loc118)
          cir.store %25, %21 : !u32i, !cir.ptr<!u32i> loc(#loc117)
          %26 = cir.load %21 : !cir.ptr<!u32i>, !u32i loc(#loc78)
          cir.call @printUnsignedLine(%26) : (!u32i) -> () loc(#loc79)
        } else {
          %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc52)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc52)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc80)
        } loc(#loc116)
      } loc(#loc114)
    } loc(#loc112)
    cir.return loc(#loc54)
  } loc(#loc108)
  cir.func @_ZN51CWE190_Integer_Overflow__unsigned_int_fscanf_add_334goodEv() extra(#fn_attr) {
    cir.call @_ZN51CWE190_Integer_Overflow__unsigned_int_fscanf_add_33L7goodG2BEv() : () -> () loc(#loc83)
    cir.call @_ZN51CWE190_Integer_Overflow__unsigned_int_fscanf_add_33L7goodB2GEv() : () -> () loc(#loc84)
    cir.return loc(#loc82)
  } loc(#loc119)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":0:0)
#loc1 = loc("/usr/include/stdio.h":442:1)
#loc2 = loc("/usr/include/stdio.h":444:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":31:20)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":25:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":40:1)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":27:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":27:18)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":28:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":28:29)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":29:12)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":29:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":31:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":31:13)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":32:5)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":39:5)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":33:9)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":33:29)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":34:9)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":38:9)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":36:13)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":36:42)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":36:35)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":37:31)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":37:13)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":47:1)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":62:1)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":49:5)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":49:18)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":50:5)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":50:29)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":51:12)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":51:5)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":53:12)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":53:5)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":54:5)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":61:5)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":55:9)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":55:29)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":56:9)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":60:9)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":58:13)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":58:42)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":58:35)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":59:31)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":59:13)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":82:23)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":65:1)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":85:1)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":67:5)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":67:18)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":68:5)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":68:29)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":69:12)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":69:5)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":71:5)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":71:13)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":71:20)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":72:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":84:5)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":73:9)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":73:29)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":75:9)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":83:9)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":75:13)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":75:20)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":76:9)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":79:9)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":81:9)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":77:13)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":77:42)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":77:35)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":78:31)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":78:13)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":82:13)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":87:1)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":91:1)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":89:5)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_33.cpp":90:5)
#loc85 = loc(fused[#loc1, #loc2])
#loc86 = loc(fused[#loc3, #loc4])
#loc87 = loc(fused[#loc6, #loc7])
#loc88 = loc(fused[#loc8, #loc9])
#loc89 = loc(fused[#loc10, #loc11])
#loc90 = loc(fused[#loc12, #loc13])
#loc91 = loc(fused[#loc15, #loc14])
#loc92 = loc(fused[#loc18, #loc19])
#loc93 = loc(fused[#loc20, #loc21])
#loc94 = loc(fused[#loc22, #loc23])
#loc95 = loc(fused[#loc24, #loc25])
#loc96 = loc(fused[#loc26, #loc25])
#loc97 = loc(fused[#loc29, #loc30])
#loc98 = loc(fused[#loc31, #loc32])
#loc99 = loc(fused[#loc33, #loc34])
#loc100 = loc(fused[#loc36, #loc35])
#loc101 = loc(fused[#loc38, #loc37])
#loc102 = loc(fused[#loc39, #loc40])
#loc103 = loc(fused[#loc41, #loc42])
#loc104 = loc(fused[#loc43, #loc44])
#loc105 = loc(fused[#loc45, #loc46])
#loc106 = loc(fused[#loc47, #loc46])
#loc107 = loc(fused[#loc50, #loc51])
#loc108 = loc(fused[#loc53, #loc54])
#loc109 = loc(fused[#loc55, #loc56])
#loc110 = loc(fused[#loc57, #loc58])
#loc111 = loc(fused[#loc60, #loc59])
#loc112 = loc(fused[#loc64, #loc65])
#loc113 = loc(fused[#loc66, #loc67])
#loc114 = loc(fused[#loc68, #loc69])
#loc115 = loc(fused[#loc70, #loc71])
#loc116 = loc(fused[#loc72, #loc73, #loc74, #loc69])
#loc117 = loc(fused[#loc75, #loc76])
#loc118 = loc(fused[#loc77, #loc76])
#loc119 = loc(fused[#loc81, #loc82])
