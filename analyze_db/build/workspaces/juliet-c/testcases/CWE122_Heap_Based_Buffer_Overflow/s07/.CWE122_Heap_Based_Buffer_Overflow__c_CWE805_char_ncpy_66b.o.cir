!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":23:72)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":23:89)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":44:76)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":44:93)
#loc85 = loc(fused[#loc9, #loc10])
#loc93 = loc(fused[#loc46, #loc47])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc81)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc82)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc83)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b_badSink(%arg0: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc9, #loc10])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc85)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc86)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc13)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc14)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc15)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!cir.ptr<!s8i>>, %3 : !s32i), !cir.ptr<!cir.ptr<!s8i>> loc(#loc12)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc14)
    cir.store %5, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc86)
    cir.scope {
      %6 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc88)
      %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc20)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
      %9 = cir.const #cir.int<67> : !s32i loc(#loc21)
      %10 = cir.const #cir.int<100> : !s32i loc(#loc22)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc23)
      %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc22)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc22)
      cir.libc.memset %13 bytes from %8 set to %9 : !cir.ptr<!void>, !s32i, !u64i loc(#loc89)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc26)
      %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc26)
      %16 = cir.const #cir.int<100> : !s32i loc(#loc27)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc28)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc27)
      %19 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc29)
      %20 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %18 : !s32i), !cir.ptr<!s8i> loc(#loc29)
      cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc90)
      %21 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc30)
      %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
      %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc32)
      %24 = cir.const #cir.int<100> : !s32i loc(#loc33)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc34)
      %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc33)
      %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc33)
      %28 = cir.call @strncpy(%22, %23, %27) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc30)
      %29 = cir.const #cir.int<0> : !s32i loc(#loc35)
      %30 = cir.cast(integral, %29 : !s32i), !s8i loc(#loc35)
      %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
      %32 = cir.const #cir.int<100> : !s32i loc(#loc37)
      %33 = cir.const #cir.int<1> : !s32i loc(#loc38)
      %34 = cir.binop(sub, %32, %33) nsw : !s32i loc(#loc37)
      %35 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %34 : !s32i), !cir.ptr<!s8i> loc(#loc39)
      cir.store %30, %35 : !s8i, !cir.ptr<!s8i> loc(#loc91)
      %36 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
      cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc41)
      %37 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc42)
      %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
      %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc43)
      cir.call @free(%39) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc42)
    } loc(#loc87)
    cir.return loc(#loc8)
  } loc(#loc84)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b_goodG2BSink(%arg0: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc46, #loc47])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc93)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc94)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc50)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc51)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc52)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!cir.ptr<!s8i>>, %3 : !s32i), !cir.ptr<!cir.ptr<!s8i>> loc(#loc49)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
    cir.store %5, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc94)
    cir.scope {
      %6 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc96)
      %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc57)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc57)
      %9 = cir.const #cir.int<67> : !s32i loc(#loc58)
      %10 = cir.const #cir.int<100> : !s32i loc(#loc59)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc60)
      %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc59)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc59)
      cir.libc.memset %13 bytes from %8 set to %9 : !cir.ptr<!void>, !s32i, !u64i loc(#loc97)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc63)
      %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc63)
      %16 = cir.const #cir.int<100> : !s32i loc(#loc64)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc65)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc64)
      %19 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc66)
      %20 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %18 : !s32i), !cir.ptr<!s8i> loc(#loc66)
      cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc98)
      %21 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc67)
      %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
      %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc69)
      %24 = cir.const #cir.int<100> : !s32i loc(#loc70)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc71)
      %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc70)
      %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc70)
      %28 = cir.call @strncpy(%22, %23, %27) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc67)
      %29 = cir.const #cir.int<0> : !s32i loc(#loc72)
      %30 = cir.cast(integral, %29 : !s32i), !s8i loc(#loc72)
      %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
      %32 = cir.const #cir.int<100> : !s32i loc(#loc74)
      %33 = cir.const #cir.int<1> : !s32i loc(#loc75)
      %34 = cir.binop(sub, %32, %33) nsw : !s32i loc(#loc74)
      %35 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %34 : !s32i), !cir.ptr<!s8i> loc(#loc76)
      cir.store %30, %35 : !s8i, !cir.ptr<!s8i> loc(#loc99)
      %36 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
      cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc78)
      %37 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc79)
      %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
      %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc80)
      cir.call @free(%39) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc79)
    } loc(#loc95)
    cir.return loc(#loc45)
  } loc(#loc92)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":0:0)
#loc1 = loc("/usr/include/string.h":144:1)
#loc2 = loc("/usr/include/string.h":146:14)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("/usr/include/stdlib.h":687:1)
#loc6 = loc("/usr/include/stdlib.h":687:32)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":23:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":37:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":26:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":26:30)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":24:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":26:19)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":26:29)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":27:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":36:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":28:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":28:24)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":29:16)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":29:24)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":29:29)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":29:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":29:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":29:34)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":30:25)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":30:16)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":30:20)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":30:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":32:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":32:17)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":32:23)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":32:31)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":32:35)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":33:23)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":33:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":33:14)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":33:18)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":33:19)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":34:19)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":34:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":35:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":35:14)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":44:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":57:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":46:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":46:30)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":45:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":46:19)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":46:29)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":47:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":56:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":48:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":48:24)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":49:16)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":49:24)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":49:29)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":49:33)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":49:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":49:34)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":50:25)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":50:16)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":50:20)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":50:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":52:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":52:17)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":52:23)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":52:31)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":52:35)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":53:23)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":53:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":53:14)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":53:18)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":53:19)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":54:19)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":54:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":55:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c":55:14)
#loc81 = loc(fused[#loc1, #loc2])
#loc82 = loc(fused[#loc3, #loc4])
#loc83 = loc(fused[#loc5, #loc6])
#loc84 = loc(fused[#loc7, #loc8])
#loc86 = loc(fused[#loc11, #loc12])
#loc87 = loc(fused[#loc16, #loc17])
#loc88 = loc(fused[#loc18, #loc19])
#loc89 = loc(fused[#loc24, #loc25])
#loc90 = loc(fused[#loc29, #loc26])
#loc91 = loc(fused[#loc36, #loc35])
#loc92 = loc(fused[#loc44, #loc45])
#loc94 = loc(fused[#loc48, #loc49])
#loc95 = loc(fused[#loc53, #loc54])
#loc96 = loc(fused[#loc55, #loc56])
#loc97 = loc(fused[#loc61, #loc62])
#loc98 = loc(fused[#loc66, #loc63])
#loc99 = loc(fused[#loc73, #loc72])
