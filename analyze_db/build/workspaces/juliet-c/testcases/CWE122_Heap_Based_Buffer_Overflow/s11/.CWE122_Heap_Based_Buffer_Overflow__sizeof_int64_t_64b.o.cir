!s64i = !cir.int<s, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":21:68)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":21:75)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":37:72)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":37:79)
#loc40 = loc(fused[#loc7, #loc8])
#loc44 = loc(fused[#loc23, #loc24])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @printLongLongLine(!s64i) loc(#loc37)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc38)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc40)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc41)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc42)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc13)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc10)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!s64i>> loc(#loc10)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc41)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc14)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc15)
    cir.store %6, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc42)
    %7 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc16)
    %8 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc17)
    cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc18)
    %9 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc19)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc20)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc20)
    cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc19)
    cir.return loc(#loc6)
  } loc(#loc39)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc23, #loc24])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc44)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc45)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc46)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc29)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc26)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!s64i>> loc(#loc26)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc45)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc30)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc31)
    cir.store %6, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc46)
    %7 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc32)
    %8 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc33)
    cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc34)
    %9 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc35)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc36)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc36)
    cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc35)
    cir.return loc(#loc22)
  } loc(#loc43)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":30:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":24:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":24:40)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":26:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":26:31)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":22:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":26:24)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":26:23)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":28:24)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":28:23)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":28:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":29:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":29:10)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":37:1)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":46:1)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":40:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":40:40)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":42:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":42:31)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":38:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":42:24)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":42:23)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":44:24)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":44:23)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":44:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":45:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c":45:10)
#loc37 = loc(fused[#loc1, #loc2])
#loc38 = loc(fused[#loc3, #loc4])
#loc39 = loc(fused[#loc5, #loc6])
#loc41 = loc(fused[#loc9, #loc10])
#loc42 = loc(fused[#loc11, #loc12])
#loc43 = loc(fused[#loc21, #loc22])
#loc45 = loc(fused[#loc25, #loc26])
#loc46 = loc(fused[#loc27, #loc28])
