!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":97:10)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":97:14)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":97:20)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":97:32)
#loc186 = loc(fused[#loc64, #loc65])
#loc187 = loc(fused[#loc66, #loc67])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc161)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc162)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc163)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_badSink(!cir.ptr<!void>) loc(#loc164)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_64_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc166)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc167)
    cir.scope {
      %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc169)
      %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc19)
      %5 = cir.const #cir.int<50> : !s32i loc(#loc20)
      %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc20)
      %7 = cir.const #cir.int<4> : !u64i loc(#loc170)
      %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc171)
      %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc19)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc172)
      cir.store %10, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc169)
      cir.scope {
        %26 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
        %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc26)
        %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc26)
        %29 = cir.cmp(eq, %26, %28) : !cir.ptr<!s32i>, !cir.bool loc(#loc174)
        cir.if %29 {
          %30 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc28)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc29)
          %32 = cir.unary(minus, %31) : !s32i, !s32i loc(#loc30)
          cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
        } loc(#loc175)
      } loc(#loc173)
      %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
      %12 = cir.const #cir.int<65> : !s32i loc(#loc32)
      %13 = cir.const #cir.int<50> : !s32i loc(#loc33)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc34)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc33)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc33)
      %17 = cir.call @wmemset(%11, %12, %16) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc35)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc36)
      %19 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
      %20 = cir.const #cir.int<50> : !s32i loc(#loc38)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc39)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc38)
      %23 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc40)
      cir.store %18, %23 : !s32i, !cir.ptr<!s32i> loc(#loc176)
      %24 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc41)
      cir.store %25, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc177)
    } loc(#loc168)
    %2 = cir.cast(bitcast, %0 : !cir.ptr<!cir.ptr<!void>>), !cir.ptr<!void> loc(#loc178)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_badSink(%2) : (!cir.ptr<!void>) -> () loc(#loc45)
    cir.return loc(#loc10)
  } loc(#loc165)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_64_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc47)
  } loc(#loc179)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc182)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc183)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc184)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc61)
  cir.func @main(%arg0: !s32i loc(fused[#loc64, #loc65]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc66, #loc67])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc186)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc187)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc63)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc68)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc69)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc70)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc70)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc71)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc58)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_64_good : !cir.ptr<!cir.func<!void ()>> loc(#loc188)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_64_good() : () -> () loc(#loc73)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc59)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc60)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_64_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc189)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_64_bad() : () -> () loc(#loc77)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc61)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc80)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc190)
    cir.return %17 : !s32i loc(#loc190)
  } loc(#loc185)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_goodG2BSink(!cir.ptr<!void>) loc(#loc191)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc193)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc88)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc194)
    cir.scope {
      %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc196)
      %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc94)
      %5 = cir.const #cir.int<50> : !s32i loc(#loc95)
      %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc95)
      %7 = cir.const #cir.int<1> : !u64i loc(#loc197)
      %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc198)
      %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc94)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc199)
      cir.store %10, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc196)
      cir.scope {
        %27 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
        %28 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc101)
        %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc101)
        %30 = cir.cmp(eq, %27, %29) : !cir.ptr<!s8i>, !cir.bool loc(#loc201)
        cir.if %30 {
          %31 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc103)
          %32 = cir.const #cir.int<1> : !s32i loc(#loc104)
          %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc105)
          cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc103)
        } loc(#loc202)
      } loc(#loc200)
      %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc106)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc106)
      %13 = cir.const #cir.int<65> : !s32i loc(#loc107)
      %14 = cir.const #cir.int<50> : !s32i loc(#loc108)
      %15 = cir.const #cir.int<1> : !s32i loc(#loc109)
      %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc108)
      %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc108)
      cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc203)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc112)
      %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc112)
      %20 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc113)
      %21 = cir.const #cir.int<50> : !s32i loc(#loc114)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc115)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc114)
      %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc116)
      cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc204)
      %25 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
      %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc117)
      cir.store %26, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc205)
    } loc(#loc195)
    %2 = cir.cast(bitcast, %0 : !cir.ptr<!cir.ptr<!void>>), !cir.ptr<!void> loc(#loc206)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_goodG2BSink(%2) : (!cir.ptr<!void>) -> () loc(#loc121)
    cir.return loc(#loc85)
  } loc(#loc192)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_goodB2GSink(!cir.ptr<!void>) loc(#loc207)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc209)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc128)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc210)
    cir.scope {
      %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc212)
      %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc134)
      %5 = cir.const #cir.int<50> : !s32i loc(#loc135)
      %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc135)
      %7 = cir.const #cir.int<4> : !u64i loc(#loc213)
      %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc214)
      %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc134)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc215)
      cir.store %10, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc212)
      cir.scope {
        %26 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc140)
        %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc141)
        %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc141)
        %29 = cir.cmp(eq, %26, %28) : !cir.ptr<!s32i>, !cir.bool loc(#loc217)
        cir.if %29 {
          %30 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc143)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc144)
          %32 = cir.unary(minus, %31) : !s32i, !s32i loc(#loc145)
          cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc143)
        } loc(#loc218)
      } loc(#loc216)
      %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc146)
      %12 = cir.const #cir.int<65> : !s32i loc(#loc147)
      %13 = cir.const #cir.int<50> : !s32i loc(#loc148)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc149)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc148)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc148)
      %17 = cir.call @wmemset(%11, %12, %16) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc150)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc151)
      %19 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc152)
      %20 = cir.const #cir.int<50> : !s32i loc(#loc153)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc154)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc153)
      %23 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc155)
      cir.store %18, %23 : !s32i, !cir.ptr<!s32i> loc(#loc219)
      %24 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc156)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc156)
      cir.store %25, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc220)
    } loc(#loc211)
    %2 = cir.cast(bitcast, %0 : !cir.ptr<!cir.ptr<!void>>), !cir.ptr<!void> loc(#loc221)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_goodB2GSink(%2) : (!cir.ptr<!void>) -> () loc(#loc160)
    cir.return loc(#loc125)
  } loc(#loc208)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":25:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":25:78)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":27:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":40:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":29:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":29:12)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":30:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":30:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":31:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":38:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":32:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":32:71)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":32:46)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":32:53)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":32:56)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":32:70)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":33:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":33:46)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":33:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":33:30)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":33:36)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":33:37)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":33:43)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":33:42)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":34:17)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":34:32)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":34:38)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":34:41)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":34:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":35:31)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":35:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":35:23)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":35:26)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":35:27)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":37:24)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":37:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":39:59)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":39:60)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":39:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":82:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":86:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":84:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":84:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":85:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":85:13)
#loc52 = loc("/usr/include/stdlib.h":575:1)
#loc53 = loc("/usr/include/stdlib.h":575:41)
#loc54 = loc("/usr/include/time.h":76:1)
#loc55 = loc("/usr/include/time.h":76:38)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":102:15)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":104:15)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":107:15)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":109:15)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":97:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":112:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":98:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":100:27)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":100:22)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":100:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":102:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":103:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":103:55)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":104:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":107:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":108:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":108:54)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":109:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":111:12)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":111:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":47:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":47:82)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":49:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":62:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":51:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":51:12)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":52:12)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":52:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":53:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":60:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":54:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":54:63)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":54:41)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":54:48)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":54:51)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":54:62)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":55:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":55:47)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":55:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":55:31)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":55:37)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":55:38)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":55:44)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":55:43)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":56:16)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":56:32)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":56:37)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":56:40)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":56:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":56:41)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":57:32)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":57:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":57:24)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":57:27)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":57:28)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":59:24)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":59:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":61:63)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":61:64)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":61:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":65:1)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":65:82)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":67:1)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":80:1)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":69:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":69:12)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":70:12)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":70:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":71:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":78:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":72:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":72:71)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":72:46)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":72:53)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":72:56)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":72:70)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":73:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":73:46)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":73:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":73:30)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":73:36)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":73:37)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":73:43)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":73:42)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":74:17)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":74:32)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":74:38)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":74:41)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":74:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":75:31)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":75:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":75:23)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":75:26)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":75:27)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":77:24)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":77:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":79:63)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":79:64)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c":79:5)
#loc161 = loc(fused[#loc1, #loc2])
#loc162 = loc(fused[#loc3, #loc4])
#loc163 = loc(fused[#loc5, #loc6])
#loc164 = loc(fused[#loc7, #loc8])
#loc165 = loc(fused[#loc9, #loc10])
#loc166 = loc(fused[#loc11, #loc12])
#loc167 = loc(fused[#loc14, #loc13])
#loc168 = loc(fused[#loc15, #loc16])
#loc169 = loc(fused[#loc17, #loc18])
#loc170 = loc(fused[#loc21, #loc22])
#loc171 = loc(fused[#loc20, #loc22])
#loc172 = loc(fused[#loc19, #loc18])
#loc173 = loc(fused[#loc23, #loc24])
#loc174 = loc(fused[#loc25, #loc26])
#loc175 = loc(fused[#loc27, #loc24])
#loc176 = loc(fused[#loc37, #loc36])
#loc177 = loc(fused[#loc42, #loc41])
#loc178 = loc(fused[#loc43, #loc44])
#loc179 = loc(fused[#loc46, #loc47])
#loc180 = loc(fused[#loc48, #loc49])
#loc181 = loc(fused[#loc50, #loc51])
#loc182 = loc(fused[#loc52, #loc53])
#loc183 = loc(fused[#loc54, #loc55])
#loc184 = loc(fused[#loc56, #loc57])
#loc185 = loc(fused[#loc62, #loc63])
#loc188 = loc(fused[#loc73, #loc74])
#loc189 = loc(fused[#loc77, #loc78])
#loc190 = loc(fused[#loc81, #loc80])
#loc191 = loc(fused[#loc82, #loc83])
#loc192 = loc(fused[#loc84, #loc85])
#loc193 = loc(fused[#loc86, #loc87])
#loc194 = loc(fused[#loc89, #loc88])
#loc195 = loc(fused[#loc90, #loc91])
#loc196 = loc(fused[#loc92, #loc93])
#loc197 = loc(fused[#loc96, #loc97])
#loc198 = loc(fused[#loc95, #loc97])
#loc199 = loc(fused[#loc94, #loc93])
#loc200 = loc(fused[#loc98, #loc99])
#loc201 = loc(fused[#loc100, #loc101])
#loc202 = loc(fused[#loc102, #loc99])
#loc203 = loc(fused[#loc110, #loc111])
#loc204 = loc(fused[#loc113, #loc112])
#loc205 = loc(fused[#loc118, #loc117])
#loc206 = loc(fused[#loc119, #loc120])
#loc207 = loc(fused[#loc122, #loc123])
#loc208 = loc(fused[#loc124, #loc125])
#loc209 = loc(fused[#loc126, #loc127])
#loc210 = loc(fused[#loc129, #loc128])
#loc211 = loc(fused[#loc130, #loc131])
#loc212 = loc(fused[#loc132, #loc133])
#loc213 = loc(fused[#loc136, #loc137])
#loc214 = loc(fused[#loc135, #loc137])
#loc215 = loc(fused[#loc134, #loc133])
#loc216 = loc(fused[#loc138, #loc139])
#loc217 = loc(fused[#loc140, #loc141])
#loc218 = loc(fused[#loc142, #loc139])
#loc219 = loc(fused[#loc152, #loc151])
#loc220 = loc(fused[#loc157, #loc156])
#loc221 = loc(fused[#loc158, #loc159])
