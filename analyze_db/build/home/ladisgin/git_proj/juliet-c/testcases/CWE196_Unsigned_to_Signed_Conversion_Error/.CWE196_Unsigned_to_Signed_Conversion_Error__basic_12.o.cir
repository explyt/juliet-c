!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc140)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc141)
  cir.func private @printIntLine(!s32i) loc(#loc142)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc143)
  cir.func no_proto @CWE196_Unsigned_to_Signed_Conversion_Error__basic_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc145)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc146)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc147)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc148)
    cir.br ^bb1 loc(#loc149)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc150)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc150)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc21)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %7 ^bb2, ^bb9 loc(#loc151)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc152)
  ^bb3:  // pred: ^bb2
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc28)
    cir.store %9, %0 : !u32i, !cir.ptr<!u32i> loc(#loc153)
    cir.br ^bb4 loc(#loc154)
  ^bb4:  // pred: ^bb3
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc34)
    %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc155)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc35)
    %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc156)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc157)
  ^bb5:  // pred: ^bb4
    %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc37)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc37)
    %17 = cir.const #cir.int<2> : !u32i loc(#loc37)
    %18 = cir.binop(mul, %16, %17) : !u32i loc(#loc37)
    %19 = cir.const #cir.int<1> : !u32i loc(#loc37)
    %20 = cir.binop(add, %18, %19) : !u32i loc(#loc37)
    %21 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc38)
    %22 = cir.binop(sub, %20, %21) : !u32i loc(#loc158)
    cir.store %22, %0 : !u32i, !cir.ptr<!u32i> loc(#loc159)
    cir.br ^bb6 loc(#loc32)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc32)
  ^bb7:  // pred: ^bb6
    %23 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc40)
    %24 = cir.cast(integral, %23 : !u32i), !s32i loc(#loc40)
    cir.store %24, %1 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc43)
    cir.br ^bb8 loc(#loc27)
  ^bb8:  // pred: ^bb7
    cir.br ^bb20 loc(#loc24)
  ^bb9:  // pred: ^bb1
    cir.br ^bb10 loc(#loc161)
  ^bb10:  // pred: ^bb9
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc46)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc46)
    cir.store %27, %2 : !u32i, !cir.ptr<!u32i> loc(#loc162)
    cir.br ^bb11 loc(#loc163)
  ^bb11:  // pred: ^bb10
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc51)
    %29 = cir.const #cir.int<2> : !s32i loc(#loc52)
    %30 = cir.binop(rem, %28, %29) : !s32i loc(#loc164)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc53)
    %32 = cir.cmp(eq, %30, %31) : !s32i, !cir.bool loc(#loc165)
    cir.brcond %32 ^bb12, ^bb13 loc(#loc166)
  ^bb12:  // pred: ^bb11
    %33 = cir.const #cir.int<2147483647> : !s32i loc(#loc55)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc55)
    %35 = cir.const #cir.int<2> : !u32i loc(#loc55)
    %36 = cir.binop(mul, %34, %35) : !u32i loc(#loc55)
    %37 = cir.const #cir.int<1> : !u32i loc(#loc55)
    %38 = cir.binop(add, %36, %37) : !u32i loc(#loc55)
    %39 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc56)
    %40 = cir.binop(sub, %38, %39) : !u32i loc(#loc167)
    cir.store %40, %2 : !u32i, !cir.ptr<!u32i> loc(#loc168)
    cir.br ^bb13 loc(#loc50)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc50)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc169)
  ^bb15:  // pred: ^bb14
    %41 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc60)
    %42 = cir.const #cir.int<2147483647> : !s32i loc(#loc61)
    %43 = cir.cast(integral, %42 : !s32i), !u32i loc(#loc61)
    %44 = cir.cmp(gt, %41, %43) : !u32i, !cir.bool loc(#loc170)
    cir.brcond %44 ^bb16, ^bb17 loc(#loc171)
  ^bb16:  // pred: ^bb15
    %45 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc63)
    %46 = cir.const #cir.int<1> : !s32i loc(#loc64)
    cir.call @exit(%46) : (!s32i) -> () extra(#fn_attr) loc(#loc63)
    cir.br ^bb17 loc(#loc59)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc59)
  ^bb18:  // pred: ^bb17
    %47 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc65)
    %48 = cir.cast(integral, %47 : !u32i), !s32i loc(#loc65)
    cir.store %48, %3 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    %49 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    cir.call @printIntLine(%49) : (!s32i) -> () loc(#loc68)
    cir.br ^bb19 loc(#loc45)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc20)
  ^bb20:  // 2 preds: ^bb8, ^bb19
    cir.br ^bb21 loc(#loc20)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc10)
  } loc(#loc144)
  cir.func no_proto @CWE196_Unsigned_to_Signed_Conversion_Error__basic_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc71)
    cir.return loc(#loc70)
  } loc(#loc173)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc176)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc177)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc178)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc179)
    cir.br ^bb1 loc(#loc180)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc181)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc181)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc85)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc85)
    cir.brcond %7 ^bb2, ^bb13 loc(#loc182)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc183)
  ^bb3:  // pred: ^bb2
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc92)
    cir.store %9, %0 : !u32i, !cir.ptr<!u32i> loc(#loc184)
    cir.br ^bb4 loc(#loc185)
  ^bb4:  // pred: ^bb3
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc98)
    %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc186)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc99)
    %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc187)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc188)
  ^bb5:  // pred: ^bb4
    %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc101)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc101)
    %17 = cir.const #cir.int<2> : !u32i loc(#loc101)
    %18 = cir.binop(mul, %16, %17) : !u32i loc(#loc101)
    %19 = cir.const #cir.int<1> : !u32i loc(#loc101)
    %20 = cir.binop(add, %18, %19) : !u32i loc(#loc101)
    %21 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc102)
    %22 = cir.binop(sub, %20, %21) : !u32i loc(#loc189)
    cir.store %22, %0 : !u32i, !cir.ptr<!u32i> loc(#loc190)
    cir.br ^bb6 loc(#loc96)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc96)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc191)
  ^bb8:  // pred: ^bb7
    %23 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc106)
    %24 = cir.const #cir.int<2147483647> : !s32i loc(#loc107)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc107)
    %26 = cir.cmp(gt, %23, %25) : !u32i, !cir.bool loc(#loc192)
    cir.brcond %26 ^bb9, ^bb10 loc(#loc193)
  ^bb9:  // pred: ^bb8
    %27 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc109)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc110)
    cir.call @exit(%28) : (!s32i) -> () extra(#fn_attr) loc(#loc109)
    cir.br ^bb10 loc(#loc105)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc105)
  ^bb11:  // pred: ^bb10
    %29 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc111)
    %30 = cir.cast(integral, %29 : !u32i), !s32i loc(#loc111)
    cir.store %30, %1 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    %31 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc114)
    cir.br ^bb12 loc(#loc91)
  ^bb12:  // pred: ^bb11
    cir.br ^bb24 loc(#loc88)
  ^bb13:  // pred: ^bb1
    cir.br ^bb14 loc(#loc195)
  ^bb14:  // pred: ^bb13
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc117)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc117)
    cir.store %33, %2 : !u32i, !cir.ptr<!u32i> loc(#loc196)
    cir.br ^bb15 loc(#loc197)
  ^bb15:  // pred: ^bb14
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
    %35 = cir.const #cir.int<2> : !s32i loc(#loc123)
    %36 = cir.binop(rem, %34, %35) : !s32i loc(#loc198)
    %37 = cir.const #cir.int<0> : !s32i loc(#loc124)
    %38 = cir.cmp(eq, %36, %37) : !s32i, !cir.bool loc(#loc199)
    cir.brcond %38 ^bb16, ^bb17 loc(#loc200)
  ^bb16:  // pred: ^bb15
    %39 = cir.const #cir.int<2147483647> : !s32i loc(#loc126)
    %40 = cir.cast(integral, %39 : !s32i), !u32i loc(#loc126)
    %41 = cir.const #cir.int<2> : !u32i loc(#loc126)
    %42 = cir.binop(mul, %40, %41) : !u32i loc(#loc126)
    %43 = cir.const #cir.int<1> : !u32i loc(#loc126)
    %44 = cir.binop(add, %42, %43) : !u32i loc(#loc126)
    %45 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc127)
    %46 = cir.binop(sub, %44, %45) : !u32i loc(#loc201)
    cir.store %46, %2 : !u32i, !cir.ptr<!u32i> loc(#loc202)
    cir.br ^bb17 loc(#loc121)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc121)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc203)
  ^bb19:  // pred: ^bb18
    %47 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc131)
    %48 = cir.const #cir.int<2147483647> : !s32i loc(#loc132)
    %49 = cir.cast(integral, %48 : !s32i), !u32i loc(#loc132)
    %50 = cir.cmp(gt, %47, %49) : !u32i, !cir.bool loc(#loc204)
    cir.brcond %50 ^bb20, ^bb21 loc(#loc205)
  ^bb20:  // pred: ^bb19
    %51 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc134)
    %52 = cir.const #cir.int<1> : !s32i loc(#loc135)
    cir.call @exit(%52) : (!s32i) -> () extra(#fn_attr) loc(#loc134)
    cir.br ^bb21 loc(#loc130)
  ^bb21:  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc130)
  ^bb22:  // pred: ^bb21
    %53 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc136)
    %54 = cir.cast(integral, %53 : !u32i), !s32i loc(#loc136)
    cir.store %54, %3 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    %55 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    cir.call @printIntLine(%55) : (!s32i) -> () loc(#loc139)
    cir.br ^bb23 loc(#loc116)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc84)
  ^bb24:  // 2 preds: ^bb12, ^bb23
    cir.br ^bb25 loc(#loc84)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc74)
  } loc(#loc175)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":756:1)
#loc8 = loc("/usr/include/stdlib.h":756:70)
#loc9 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":20:1)
#loc10 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":56:1)
#loc11 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":25:13)
#loc12 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":25:22)
#loc13 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":26:13)
#loc14 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":26:17)
#loc15 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":40:13)
#loc16 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":40:22)
#loc17 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":41:13)
#loc18 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":41:17)
#loc19 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":22:5)
#loc20 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":55:5)
#loc21 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":22:8)
#loc22 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":22:33)
#loc23 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":23:5)
#loc24 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":36:5)
#loc25 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":38:5)
#loc26 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":24:9)
#loc27 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":35:9)
#loc28 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":27:27)
#loc29 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":27:13)
#loc30 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":27:32)
#loc31 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":28:13)
#loc32 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":31:13)
#loc33 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":28:17)
#loc34 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":28:26)
#loc35 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":28:31)
#loc36 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":29:13)
#loc37 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":30:31)
#loc38 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":30:42)
#loc39 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":30:17)
#loc40 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":33:25)
#loc41 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":33:13)
#loc42 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":34:26)
#loc43 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":34:13)
#loc44 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":39:9)
#loc45 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":54:9)
#loc46 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":42:27)
#loc47 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":42:13)
#loc48 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":42:32)
#loc49 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":43:13)
#loc50 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":46:13)
#loc51 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":43:17)
#loc52 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":43:26)
#loc53 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":43:31)
#loc54 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":44:13)
#loc55 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":45:31)
#loc56 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":45:42)
#loc57 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":45:17)
#loc58 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":48:13)
#loc59 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":51:13)
#loc60 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":48:17)
#loc61 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":48:31)
#loc62 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":49:13)
#loc63 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":50:17)
#loc64 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":50:22)
#loc65 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":52:25)
#loc66 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":52:13)
#loc67 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":53:26)
#loc68 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":53:13)
#loc69 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":105:1)
#loc70 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":108:1)
#loc71 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":107:5)
#loc72 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":107:11)
#loc73 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":63:1)
#loc74 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":103:1)
#loc75 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":68:13)
#loc76 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":68:22)
#loc77 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":69:13)
#loc78 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":69:17)
#loc79 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":87:13)
#loc80 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":87:22)
#loc81 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":88:13)
#loc82 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":88:17)
#loc83 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":65:5)
#loc84 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":102:5)
#loc85 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":65:8)
#loc86 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":65:33)
#loc87 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":66:5)
#loc88 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":83:5)
#loc89 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":85:5)
#loc90 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":67:9)
#loc91 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":82:9)
#loc92 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":70:27)
#loc93 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":70:13)
#loc94 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":70:32)
#loc95 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":71:13)
#loc96 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":74:13)
#loc97 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":71:17)
#loc98 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":71:26)
#loc99 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":71:31)
#loc100 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":72:13)
#loc101 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":73:31)
#loc102 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":73:42)
#loc103 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":73:17)
#loc104 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":76:13)
#loc105 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":79:13)
#loc106 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":76:17)
#loc107 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":76:31)
#loc108 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":77:13)
#loc109 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":78:17)
#loc110 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":78:22)
#loc111 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":80:25)
#loc112 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":80:13)
#loc113 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":81:26)
#loc114 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":81:13)
#loc115 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":86:9)
#loc116 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":101:9)
#loc117 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":89:27)
#loc118 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":89:13)
#loc119 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":89:32)
#loc120 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":90:13)
#loc121 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":93:13)
#loc122 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":90:17)
#loc123 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":90:26)
#loc124 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":90:31)
#loc125 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":91:13)
#loc126 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":92:31)
#loc127 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":92:42)
#loc128 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":92:17)
#loc129 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":95:13)
#loc130 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":98:13)
#loc131 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":95:17)
#loc132 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":95:31)
#loc133 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":96:13)
#loc134 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":97:17)
#loc135 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":97:22)
#loc136 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":99:25)
#loc137 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":99:13)
#loc138 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":100:26)
#loc139 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":100:13)
#loc140 = loc(fused[#loc1, #loc2])
#loc141 = loc(fused[#loc3, #loc4])
#loc142 = loc(fused[#loc5, #loc6])
#loc143 = loc(fused[#loc7, #loc8])
#loc144 = loc(fused[#loc9, #loc10])
#loc145 = loc(fused[#loc11, #loc12])
#loc146 = loc(fused[#loc13, #loc14])
#loc147 = loc(fused[#loc15, #loc16])
#loc148 = loc(fused[#loc17, #loc18])
#loc149 = loc(fused[#loc19, #loc20])
#loc150 = loc(fused[#loc21, #loc22])
#loc151 = loc(fused[#loc23, #loc24, #loc25, #loc20])
#loc152 = loc(fused[#loc26, #loc27])
#loc153 = loc(fused[#loc29, #loc30])
#loc154 = loc(fused[#loc31, #loc32])
#loc155 = loc(fused[#loc33, #loc34])
#loc156 = loc(fused[#loc33, #loc35])
#loc157 = loc(fused[#loc36, #loc32])
#loc158 = loc(fused[#loc37, #loc38])
#loc159 = loc(fused[#loc39, #loc38])
#loc160 = loc(fused[#loc41, #loc40])
#loc161 = loc(fused[#loc44, #loc45])
#loc162 = loc(fused[#loc47, #loc48])
#loc163 = loc(fused[#loc49, #loc50])
#loc164 = loc(fused[#loc51, #loc52])
#loc165 = loc(fused[#loc51, #loc53])
#loc166 = loc(fused[#loc54, #loc50])
#loc167 = loc(fused[#loc55, #loc56])
#loc168 = loc(fused[#loc57, #loc56])
#loc169 = loc(fused[#loc58, #loc59])
#loc170 = loc(fused[#loc60, #loc61])
#loc171 = loc(fused[#loc62, #loc59])
#loc172 = loc(fused[#loc66, #loc65])
#loc173 = loc(fused[#loc69, #loc70])
#loc174 = loc(fused[#loc71, #loc72])
#loc175 = loc(fused[#loc73, #loc74])
#loc176 = loc(fused[#loc75, #loc76])
#loc177 = loc(fused[#loc77, #loc78])
#loc178 = loc(fused[#loc79, #loc80])
#loc179 = loc(fused[#loc81, #loc82])
#loc180 = loc(fused[#loc83, #loc84])
#loc181 = loc(fused[#loc85, #loc86])
#loc182 = loc(fused[#loc87, #loc88, #loc89, #loc84])
#loc183 = loc(fused[#loc90, #loc91])
#loc184 = loc(fused[#loc93, #loc94])
#loc185 = loc(fused[#loc95, #loc96])
#loc186 = loc(fused[#loc97, #loc98])
#loc187 = loc(fused[#loc97, #loc99])
#loc188 = loc(fused[#loc100, #loc96])
#loc189 = loc(fused[#loc101, #loc102])
#loc190 = loc(fused[#loc103, #loc102])
#loc191 = loc(fused[#loc104, #loc105])
#loc192 = loc(fused[#loc106, #loc107])
#loc193 = loc(fused[#loc108, #loc105])
#loc194 = loc(fused[#loc112, #loc111])
#loc195 = loc(fused[#loc115, #loc116])
#loc196 = loc(fused[#loc118, #loc119])
#loc197 = loc(fused[#loc120, #loc121])
#loc198 = loc(fused[#loc122, #loc123])
#loc199 = loc(fused[#loc122, #loc124])
#loc200 = loc(fused[#loc125, #loc121])
#loc201 = loc(fused[#loc126, #loc127])
#loc202 = loc(fused[#loc128, #loc127])
#loc203 = loc(fused[#loc129, #loc130])
#loc204 = loc(fused[#loc131, #loc132])
#loc205 = loc(fused[#loc133, #loc130])
#loc206 = loc(fused[#loc137, #loc136])
