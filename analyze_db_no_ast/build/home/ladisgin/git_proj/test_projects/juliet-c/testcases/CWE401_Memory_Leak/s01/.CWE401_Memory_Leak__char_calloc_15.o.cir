!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_calloc_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc199)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc200)
  cir.func private  @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc201)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"A String\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc7)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc202)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc10)
  cir.func no_proto  @CWE401_Memory_Leak__char_calloc_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc204)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc205)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc19)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc20)
        %4 = cir.const #cir.int<100> : !s32i loc(#loc21)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc21)
        %6 = cir.const #cir.int<1> : !u64i loc(#loc207)
        %7 = cir.call @calloc(%5, %6) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc208)
        cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc209)
        cir.scope {
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
          %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc29)
          %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !s32i loc(#loc211)
          %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc30)
          cir.if %19 {
            %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc33)
            %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc34)
            cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
          } loc(#loc212)
        } loc(#loc210)
        %9 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc35)
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
        %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc7)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc7)
        %13 = cir.call @strcpy(%10, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc35)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
        cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc38)
        cir.break loc(#loc39)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc10)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc10)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc40)
        cir.break loc(#loc41)
      }
      ] loc(#loc17)
    } loc(#loc206)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc44)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.break loc(#loc45)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc46)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc46)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc47)
        cir.break loc(#loc48)
      }
      ] loc(#loc42)
    } loc(#loc213)
    cir.return loc(#loc12)
  } loc(#loc203)
  cir.func no_proto  @CWE401_Memory_Leak__char_calloc_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc215)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc216)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc53)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc217)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc55)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    cir.return loc(#loc50)
  } loc(#loc214)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc219)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc221)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc65)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc222)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc69)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc70)
        %4 = cir.const #cir.int<100> : !s32i loc(#loc71)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc71)
        %6 = cir.const #cir.int<1> : !u64i loc(#loc224)
        %7 = cir.call @calloc(%5, %6) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc70)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc225)
        cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc226)
        cir.scope {
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
          %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc79)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc79)
          %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !s32i loc(#loc228)
          %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc80)
          cir.if %19 {
            %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc82)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc83)
            %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc84)
            cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc82)
          } loc(#loc229)
        } loc(#loc227)
        %9 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc85)
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc86)
        %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc87)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc87)
        %13 = cir.call @strcpy(%10, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc85)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc88)
        cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc89)
        cir.break loc(#loc90)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc91)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc91)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc92)
        cir.break loc(#loc93)
      }
      ] loc(#loc67)
    } loc(#loc223)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc96)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc97)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc97)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc98)
        cir.break loc(#loc99)
      },
      case (default) {
        %3 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc100)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
        %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc101)
        cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc100)
        cir.break loc(#loc102)
      }
      ] loc(#loc94)
    } loc(#loc230)
    cir.return loc(#loc62)
  } loc(#loc220)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc232)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc107)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc233)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc111)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc112)
        %4 = cir.const #cir.int<100> : !s32i loc(#loc113)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc113)
        %6 = cir.const #cir.int<1> : !u64i loc(#loc235)
        %7 = cir.call @calloc(%5, %6) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc112)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc236)
        cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc237)
        cir.scope {
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
          %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc121)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc121)
          %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !s32i loc(#loc239)
          %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc122)
          cir.if %19 {
            %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc124)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc125)
            %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc126)
            cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc124)
          } loc(#loc240)
        } loc(#loc238)
        %9 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc127)
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
        %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc129)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc129)
        %13 = cir.call @strcpy(%10, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc127)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
        cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc131)
        cir.break loc(#loc132)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc133)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc133)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc134)
        cir.break loc(#loc135)
      }
      ] loc(#loc109)
    } loc(#loc234)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc138)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        %3 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc139)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc140)
        %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc140)
        cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc139)
        cir.break loc(#loc141)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc142)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc142)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc143)
        cir.break loc(#loc144)
      }
      ] loc(#loc136)
    } loc(#loc241)
    cir.return loc(#loc104)
  } loc(#loc231)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc243)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc149)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc244)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc153)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc154)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc154)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc155)
        cir.break loc(#loc156)
      },
      case (default) {
        %3 = cir.const #cir.int<100> : !s32i loc(#loc157)
        %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc157)
        %5 = cir.const #cir.int<1> : !u64i loc(#loc157)
        %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc157)
        %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc157)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc157)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc157)
        cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc246)
        %10 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc159)
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc160)
        %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc161)
        %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc161)
        %14 = cir.call @strcpy(%11, %13) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc159)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc162)
        cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc163)
        cir.break loc(#loc164)
      }
      ] loc(#loc151)
    } loc(#loc245)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc167)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.break loc(#loc168)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc169)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc169)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc170)
        cir.break loc(#loc171)
      }
      ] loc(#loc165)
    } loc(#loc247)
    cir.return loc(#loc146)
  } loc(#loc242)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc249)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc176)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc250)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc180)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<100> : !s32i loc(#loc181)
        %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc181)
        %5 = cir.const #cir.int<1> : !u64i loc(#loc181)
        %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc181)
        %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc181)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc181)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc181)
        cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc252)
        %10 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc183)
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc184)
        %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc185)
        %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc185)
        %14 = cir.call @strcpy(%11, %13) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc183)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc186)
        cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc187)
        cir.break loc(#loc188)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc189)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc189)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc190)
        cir.break loc(#loc191)
      }
      ] loc(#loc178)
    } loc(#loc251)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc194)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.break loc(#loc195)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc196)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc196)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc197)
        cir.break loc(#loc198)
      }
      ] loc(#loc192)
    } loc(#loc253)
    cir.return loc(#loc173)
  } loc(#loc248)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_calloc_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":675:1)
#loc2 = loc("/usr/include/stdlib.h":676:14)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":141:1)
#loc6 = loc("/usr/include/string.h":142:14)
#loc7 = loc("CWE401_Memory_Leak__char_calloc_15.c":35:22)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE401_Memory_Leak__char_calloc_15.c":40:19)
#loc11 = loc("CWE401_Memory_Leak__char_calloc_15.c":24:1)
#loc12 = loc("CWE401_Memory_Leak__char_calloc_15.c":54:1)
#loc13 = loc("CWE401_Memory_Leak__char_calloc_15.c":26:5)
#loc14 = loc("CWE401_Memory_Leak__char_calloc_15.c":26:12)
#loc15 = loc("CWE401_Memory_Leak__char_calloc_15.c":27:12)
#loc16 = loc("CWE401_Memory_Leak__char_calloc_15.c":27:5)
#loc17 = loc("CWE401_Memory_Leak__char_calloc_15.c":28:5)
#loc18 = loc("CWE401_Memory_Leak__char_calloc_15.c":42:5)
#loc19 = loc("CWE401_Memory_Leak__char_calloc_15.c":28:12)
#loc20 = loc("CWE401_Memory_Leak__char_calloc_15.c":32:24)
#loc21 = loc("CWE401_Memory_Leak__char_calloc_15.c":32:31)
#loc22 = loc("CWE401_Memory_Leak__char_calloc_15.c":32:36)
#loc23 = loc("CWE401_Memory_Leak__char_calloc_15.c":32:47)
#loc24 = loc("CWE401_Memory_Leak__char_calloc_15.c":32:48)
#loc25 = loc("CWE401_Memory_Leak__char_calloc_15.c":32:9)
#loc26 = loc("CWE401_Memory_Leak__char_calloc_15.c":33:9)
#loc27 = loc("CWE401_Memory_Leak__char_calloc_15.c":33:37)
#loc28 = loc("CWE401_Memory_Leak__char_calloc_15.c":33:13)
#loc29 = loc("CWE401_Memory_Leak__char_calloc_15.c":33:21)
#loc30 = loc("CWE401_Memory_Leak__char_calloc_15.c":33:18)
#loc31 = loc("CWE401_Memory_Leak__char_calloc_15.c":33:27)
#loc32 = loc("CWE401_Memory_Leak__char_calloc_15.c":33:28)
#loc33 = loc("CWE401_Memory_Leak__char_calloc_15.c":33:34)
#loc34 = loc("CWE401_Memory_Leak__char_calloc_15.c":33:33)
#loc35 = loc("CWE401_Memory_Leak__char_calloc_15.c":35:9)
#loc36 = loc("CWE401_Memory_Leak__char_calloc_15.c":35:16)
#loc37 = loc("CWE401_Memory_Leak__char_calloc_15.c":36:19)
#loc38 = loc("CWE401_Memory_Leak__char_calloc_15.c":36:9)
#loc39 = loc("CWE401_Memory_Leak__char_calloc_15.c":37:9)
#loc40 = loc("CWE401_Memory_Leak__char_calloc_15.c":40:9)
#loc41 = loc("CWE401_Memory_Leak__char_calloc_15.c":41:9)
#loc42 = loc("CWE401_Memory_Leak__char_calloc_15.c":43:5)
#loc43 = loc("CWE401_Memory_Leak__char_calloc_15.c":53:5)
#loc44 = loc("CWE401_Memory_Leak__char_calloc_15.c":43:12)
#loc45 = loc("CWE401_Memory_Leak__char_calloc_15.c":48:9)
#loc46 = loc("CWE401_Memory_Leak__char_calloc_15.c":51:19)
#loc47 = loc("CWE401_Memory_Leak__char_calloc_15.c":51:9)
#loc48 = loc("CWE401_Memory_Leak__char_calloc_15.c":52:9)
#loc49 = loc("CWE401_Memory_Leak__char_calloc_15.c":190:1)
#loc50 = loc("CWE401_Memory_Leak__char_calloc_15.c":196:1)
#loc51 = loc("CWE401_Memory_Leak__char_calloc_15.c":192:5)
#loc52 = loc("CWE401_Memory_Leak__char_calloc_15.c":192:14)
#loc53 = loc("CWE401_Memory_Leak__char_calloc_15.c":193:5)
#loc54 = loc("CWE401_Memory_Leak__char_calloc_15.c":193:14)
#loc55 = loc("CWE401_Memory_Leak__char_calloc_15.c":194:5)
#loc56 = loc("CWE401_Memory_Leak__char_calloc_15.c":194:14)
#loc57 = loc("CWE401_Memory_Leak__char_calloc_15.c":195:5)
#loc58 = loc("CWE401_Memory_Leak__char_calloc_15.c":195:14)
#loc59 = loc("/usr/include/stdlib.h":687:1)
#loc60 = loc("/usr/include/stdlib.h":687:32)
#loc61 = loc("CWE401_Memory_Leak__char_calloc_15.c":61:1)
#loc62 = loc("CWE401_Memory_Leak__char_calloc_15.c":91:1)
#loc63 = loc("CWE401_Memory_Leak__char_calloc_15.c":63:5)
#loc64 = loc("CWE401_Memory_Leak__char_calloc_15.c":63:12)
#loc65 = loc("CWE401_Memory_Leak__char_calloc_15.c":64:12)
#loc66 = loc("CWE401_Memory_Leak__char_calloc_15.c":64:5)
#loc67 = loc("CWE401_Memory_Leak__char_calloc_15.c":65:5)
#loc68 = loc("CWE401_Memory_Leak__char_calloc_15.c":79:5)
#loc69 = loc("CWE401_Memory_Leak__char_calloc_15.c":65:12)
#loc70 = loc("CWE401_Memory_Leak__char_calloc_15.c":69:24)
#loc71 = loc("CWE401_Memory_Leak__char_calloc_15.c":69:31)
#loc72 = loc("CWE401_Memory_Leak__char_calloc_15.c":69:36)
#loc73 = loc("CWE401_Memory_Leak__char_calloc_15.c":69:47)
#loc74 = loc("CWE401_Memory_Leak__char_calloc_15.c":69:48)
#loc75 = loc("CWE401_Memory_Leak__char_calloc_15.c":69:9)
#loc76 = loc("CWE401_Memory_Leak__char_calloc_15.c":70:9)
#loc77 = loc("CWE401_Memory_Leak__char_calloc_15.c":70:37)
#loc78 = loc("CWE401_Memory_Leak__char_calloc_15.c":70:13)
#loc79 = loc("CWE401_Memory_Leak__char_calloc_15.c":70:21)
#loc80 = loc("CWE401_Memory_Leak__char_calloc_15.c":70:18)
#loc81 = loc("CWE401_Memory_Leak__char_calloc_15.c":70:27)
#loc82 = loc("CWE401_Memory_Leak__char_calloc_15.c":70:28)
#loc83 = loc("CWE401_Memory_Leak__char_calloc_15.c":70:34)
#loc84 = loc("CWE401_Memory_Leak__char_calloc_15.c":70:33)
#loc85 = loc("CWE401_Memory_Leak__char_calloc_15.c":72:9)
#loc86 = loc("CWE401_Memory_Leak__char_calloc_15.c":72:16)
#loc87 = loc("CWE401_Memory_Leak__char_calloc_15.c":72:22)
#loc88 = loc("CWE401_Memory_Leak__char_calloc_15.c":73:19)
#loc89 = loc("CWE401_Memory_Leak__char_calloc_15.c":73:9)
#loc90 = loc("CWE401_Memory_Leak__char_calloc_15.c":74:9)
#loc91 = loc("CWE401_Memory_Leak__char_calloc_15.c":77:19)
#loc92 = loc("CWE401_Memory_Leak__char_calloc_15.c":77:9)
#loc93 = loc("CWE401_Memory_Leak__char_calloc_15.c":78:9)
#loc94 = loc("CWE401_Memory_Leak__char_calloc_15.c":80:5)
#loc95 = loc("CWE401_Memory_Leak__char_calloc_15.c":90:5)
#loc96 = loc("CWE401_Memory_Leak__char_calloc_15.c":80:12)
#loc97 = loc("CWE401_Memory_Leak__char_calloc_15.c":84:19)
#loc98 = loc("CWE401_Memory_Leak__char_calloc_15.c":84:9)
#loc99 = loc("CWE401_Memory_Leak__char_calloc_15.c":85:9)
#loc100 = loc("CWE401_Memory_Leak__char_calloc_15.c":88:9)
#loc101 = loc("CWE401_Memory_Leak__char_calloc_15.c":88:14)
#loc102 = loc("CWE401_Memory_Leak__char_calloc_15.c":89:9)
#loc103 = loc("CWE401_Memory_Leak__char_calloc_15.c":94:1)
#loc104 = loc("CWE401_Memory_Leak__char_calloc_15.c":124:1)
#loc105 = loc("CWE401_Memory_Leak__char_calloc_15.c":96:5)
#loc106 = loc("CWE401_Memory_Leak__char_calloc_15.c":96:12)
#loc107 = loc("CWE401_Memory_Leak__char_calloc_15.c":97:12)
#loc108 = loc("CWE401_Memory_Leak__char_calloc_15.c":97:5)
#loc109 = loc("CWE401_Memory_Leak__char_calloc_15.c":98:5)
#loc110 = loc("CWE401_Memory_Leak__char_calloc_15.c":112:5)
#loc111 = loc("CWE401_Memory_Leak__char_calloc_15.c":98:12)
#loc112 = loc("CWE401_Memory_Leak__char_calloc_15.c":102:24)
#loc113 = loc("CWE401_Memory_Leak__char_calloc_15.c":102:31)
#loc114 = loc("CWE401_Memory_Leak__char_calloc_15.c":102:36)
#loc115 = loc("CWE401_Memory_Leak__char_calloc_15.c":102:47)
#loc116 = loc("CWE401_Memory_Leak__char_calloc_15.c":102:48)
#loc117 = loc("CWE401_Memory_Leak__char_calloc_15.c":102:9)
#loc118 = loc("CWE401_Memory_Leak__char_calloc_15.c":103:9)
#loc119 = loc("CWE401_Memory_Leak__char_calloc_15.c":103:37)
#loc120 = loc("CWE401_Memory_Leak__char_calloc_15.c":103:13)
#loc121 = loc("CWE401_Memory_Leak__char_calloc_15.c":103:21)
#loc122 = loc("CWE401_Memory_Leak__char_calloc_15.c":103:18)
#loc123 = loc("CWE401_Memory_Leak__char_calloc_15.c":103:27)
#loc124 = loc("CWE401_Memory_Leak__char_calloc_15.c":103:28)
#loc125 = loc("CWE401_Memory_Leak__char_calloc_15.c":103:34)
#loc126 = loc("CWE401_Memory_Leak__char_calloc_15.c":103:33)
#loc127 = loc("CWE401_Memory_Leak__char_calloc_15.c":105:9)
#loc128 = loc("CWE401_Memory_Leak__char_calloc_15.c":105:16)
#loc129 = loc("CWE401_Memory_Leak__char_calloc_15.c":105:22)
#loc130 = loc("CWE401_Memory_Leak__char_calloc_15.c":106:19)
#loc131 = loc("CWE401_Memory_Leak__char_calloc_15.c":106:9)
#loc132 = loc("CWE401_Memory_Leak__char_calloc_15.c":107:9)
#loc133 = loc("CWE401_Memory_Leak__char_calloc_15.c":110:19)
#loc134 = loc("CWE401_Memory_Leak__char_calloc_15.c":110:9)
#loc135 = loc("CWE401_Memory_Leak__char_calloc_15.c":111:9)
#loc136 = loc("CWE401_Memory_Leak__char_calloc_15.c":113:5)
#loc137 = loc("CWE401_Memory_Leak__char_calloc_15.c":123:5)
#loc138 = loc("CWE401_Memory_Leak__char_calloc_15.c":113:12)
#loc139 = loc("CWE401_Memory_Leak__char_calloc_15.c":117:9)
#loc140 = loc("CWE401_Memory_Leak__char_calloc_15.c":117:14)
#loc141 = loc("CWE401_Memory_Leak__char_calloc_15.c":118:9)
#loc142 = loc("CWE401_Memory_Leak__char_calloc_15.c":121:19)
#loc143 = loc("CWE401_Memory_Leak__char_calloc_15.c":121:9)
#loc144 = loc("CWE401_Memory_Leak__char_calloc_15.c":122:9)
#loc145 = loc("CWE401_Memory_Leak__char_calloc_15.c":127:1)
#loc146 = loc("CWE401_Memory_Leak__char_calloc_15.c":156:1)
#loc147 = loc("CWE401_Memory_Leak__char_calloc_15.c":129:5)
#loc148 = loc("CWE401_Memory_Leak__char_calloc_15.c":129:12)
#loc149 = loc("CWE401_Memory_Leak__char_calloc_15.c":130:12)
#loc150 = loc("CWE401_Memory_Leak__char_calloc_15.c":130:5)
#loc151 = loc("CWE401_Memory_Leak__char_calloc_15.c":131:5)
#loc152 = loc("CWE401_Memory_Leak__char_calloc_15.c":144:5)
#loc153 = loc("CWE401_Memory_Leak__char_calloc_15.c":131:12)
#loc154 = loc("CWE401_Memory_Leak__char_calloc_15.c":135:19)
#loc155 = loc("CWE401_Memory_Leak__char_calloc_15.c":135:9)
#loc156 = loc("CWE401_Memory_Leak__char_calloc_15.c":136:9)
#loc157 = loc("CWE401_Memory_Leak__char_calloc_15.c":139:24)
#loc158 = loc("CWE401_Memory_Leak__char_calloc_15.c":139:9)
#loc159 = loc("CWE401_Memory_Leak__char_calloc_15.c":141:9)
#loc160 = loc("CWE401_Memory_Leak__char_calloc_15.c":141:16)
#loc161 = loc("CWE401_Memory_Leak__char_calloc_15.c":141:22)
#loc162 = loc("CWE401_Memory_Leak__char_calloc_15.c":142:19)
#loc163 = loc("CWE401_Memory_Leak__char_calloc_15.c":142:9)
#loc164 = loc("CWE401_Memory_Leak__char_calloc_15.c":143:9)
#loc165 = loc("CWE401_Memory_Leak__char_calloc_15.c":145:5)
#loc166 = loc("CWE401_Memory_Leak__char_calloc_15.c":155:5)
#loc167 = loc("CWE401_Memory_Leak__char_calloc_15.c":145:12)
#loc168 = loc("CWE401_Memory_Leak__char_calloc_15.c":150:9)
#loc169 = loc("CWE401_Memory_Leak__char_calloc_15.c":153:19)
#loc170 = loc("CWE401_Memory_Leak__char_calloc_15.c":153:9)
#loc171 = loc("CWE401_Memory_Leak__char_calloc_15.c":154:9)
#loc172 = loc("CWE401_Memory_Leak__char_calloc_15.c":159:1)
#loc173 = loc("CWE401_Memory_Leak__char_calloc_15.c":188:1)
#loc174 = loc("CWE401_Memory_Leak__char_calloc_15.c":161:5)
#loc175 = loc("CWE401_Memory_Leak__char_calloc_15.c":161:12)
#loc176 = loc("CWE401_Memory_Leak__char_calloc_15.c":162:12)
#loc177 = loc("CWE401_Memory_Leak__char_calloc_15.c":162:5)
#loc178 = loc("CWE401_Memory_Leak__char_calloc_15.c":163:5)
#loc179 = loc("CWE401_Memory_Leak__char_calloc_15.c":176:5)
#loc180 = loc("CWE401_Memory_Leak__char_calloc_15.c":163:12)
#loc181 = loc("CWE401_Memory_Leak__char_calloc_15.c":167:24)
#loc182 = loc("CWE401_Memory_Leak__char_calloc_15.c":167:9)
#loc183 = loc("CWE401_Memory_Leak__char_calloc_15.c":169:9)
#loc184 = loc("CWE401_Memory_Leak__char_calloc_15.c":169:16)
#loc185 = loc("CWE401_Memory_Leak__char_calloc_15.c":169:22)
#loc186 = loc("CWE401_Memory_Leak__char_calloc_15.c":170:19)
#loc187 = loc("CWE401_Memory_Leak__char_calloc_15.c":170:9)
#loc188 = loc("CWE401_Memory_Leak__char_calloc_15.c":171:9)
#loc189 = loc("CWE401_Memory_Leak__char_calloc_15.c":174:19)
#loc190 = loc("CWE401_Memory_Leak__char_calloc_15.c":174:9)
#loc191 = loc("CWE401_Memory_Leak__char_calloc_15.c":175:9)
#loc192 = loc("CWE401_Memory_Leak__char_calloc_15.c":177:5)
#loc193 = loc("CWE401_Memory_Leak__char_calloc_15.c":187:5)
#loc194 = loc("CWE401_Memory_Leak__char_calloc_15.c":177:12)
#loc195 = loc("CWE401_Memory_Leak__char_calloc_15.c":182:9)
#loc196 = loc("CWE401_Memory_Leak__char_calloc_15.c":185:19)
#loc197 = loc("CWE401_Memory_Leak__char_calloc_15.c":185:9)
#loc198 = loc("CWE401_Memory_Leak__char_calloc_15.c":186:9)
#loc199 = loc(fused[#loc1, #loc2])
#loc200 = loc(fused[#loc3, #loc4])
#loc201 = loc(fused[#loc5, #loc6])
#loc202 = loc(fused[#loc8, #loc9])
#loc203 = loc(fused[#loc11, #loc12])
#loc204 = loc(fused[#loc13, #loc14])
#loc205 = loc(fused[#loc16, #loc15])
#loc206 = loc(fused[#loc17, #loc18])
#loc207 = loc(fused[#loc22, #loc23])
#loc208 = loc(fused[#loc20, #loc24])
#loc209 = loc(fused[#loc25, #loc24])
#loc210 = loc(fused[#loc26, #loc27])
#loc211 = loc(fused[#loc28, #loc29])
#loc212 = loc(fused[#loc31, #loc27])
#loc213 = loc(fused[#loc42, #loc43])
#loc214 = loc(fused[#loc49, #loc50])
#loc215 = loc(fused[#loc51, #loc52])
#loc216 = loc(fused[#loc53, #loc54])
#loc217 = loc(fused[#loc55, #loc56])
#loc218 = loc(fused[#loc57, #loc58])
#loc219 = loc(fused[#loc59, #loc60])
#loc220 = loc(fused[#loc61, #loc62])
#loc221 = loc(fused[#loc63, #loc64])
#loc222 = loc(fused[#loc66, #loc65])
#loc223 = loc(fused[#loc67, #loc68])
#loc224 = loc(fused[#loc72, #loc73])
#loc225 = loc(fused[#loc70, #loc74])
#loc226 = loc(fused[#loc75, #loc74])
#loc227 = loc(fused[#loc76, #loc77])
#loc228 = loc(fused[#loc78, #loc79])
#loc229 = loc(fused[#loc81, #loc77])
#loc230 = loc(fused[#loc94, #loc95])
#loc231 = loc(fused[#loc103, #loc104])
#loc232 = loc(fused[#loc105, #loc106])
#loc233 = loc(fused[#loc108, #loc107])
#loc234 = loc(fused[#loc109, #loc110])
#loc235 = loc(fused[#loc114, #loc115])
#loc236 = loc(fused[#loc112, #loc116])
#loc237 = loc(fused[#loc117, #loc116])
#loc238 = loc(fused[#loc118, #loc119])
#loc239 = loc(fused[#loc120, #loc121])
#loc240 = loc(fused[#loc123, #loc119])
#loc241 = loc(fused[#loc136, #loc137])
#loc242 = loc(fused[#loc145, #loc146])
#loc243 = loc(fused[#loc147, #loc148])
#loc244 = loc(fused[#loc150, #loc149])
#loc245 = loc(fused[#loc151, #loc152])
#loc246 = loc(fused[#loc158, #loc157])
#loc247 = loc(fused[#loc165, #loc166])
#loc248 = loc(fused[#loc172, #loc173])
#loc249 = loc(fused[#loc174, #loc175])
#loc250 = loc(fused[#loc177, #loc176])
#loc251 = loc(fused[#loc178, #loc179])
#loc252 = loc(fused[#loc182, #loc181])
#loc253 = loc(fused[#loc192, #loc193])
