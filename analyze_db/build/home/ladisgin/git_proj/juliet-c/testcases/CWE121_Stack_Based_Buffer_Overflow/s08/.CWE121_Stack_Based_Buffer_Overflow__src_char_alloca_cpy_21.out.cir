!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":26:25)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":26:32)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":135:10)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":135:14)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":135:20)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":135:32)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":61:30)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":61:37)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":93:30)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":93:37)
#loc186 = loc(fused[#loc5, #loc6])
#loc208 = loc(fused[#loc68, #loc69])
#loc209 = loc(fused[#loc70, #loc71])
#loc215 = loc(fused[#loc91, #loc92])
#loc231 = loc(fused[#loc141, #loc142])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc184)
  cir.func internal private @badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc5, #loc6])) -> !cir.ptr<!s8i> extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc186)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc4)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc7)
    cir.br ^bb1 loc(#loc187)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc184)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc10)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc188)
  ^bb2:  // pred: ^bb1
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc12)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc12)
    %7 = cir.const #cir.int<65> : !s32i loc(#loc13)
    %8 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc14)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc14)
    cir.libc.memset %11 bytes from %6 set to %7 : !cir.ptr<!void>, !s32i, !u64i loc(#loc189)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc18)
    %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc18)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
    %15 = cir.const #cir.int<100> : !s32i loc(#loc20)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc20)
    %18 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %17 : !s32i), !cir.ptr<!s8i> loc(#loc22)
    cir.store %13, %18 : !s8i, !cir.ptr<!s8i> loc(#loc190)
    cir.br ^bb3 loc(#loc9)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc9)
  ^bb4:  // pred: ^bb3
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
    cir.store %19, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc191)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc191)
    cir.return %20 : !cir.ptr<!s8i> loc(#loc191)
  } loc(#loc185)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr1) loc(#loc192)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc193)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc195)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc196)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc197)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc36)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc36)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc36)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc36)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc36)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc36)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc197)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc198)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %12 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc184)
    cir.store %11, %12 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
    %14 = cir.call @badSource(%13) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc42)
    cir.store %14, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc200)
    cir.br ^bb1 loc(#loc201)
  ^bb1:  // pred: ^bb0
    %15 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc195)
    cir.store %15, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc195)
    %16 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc47)
    %17 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc48)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
    %19 = cir.call @strcpy(%17, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr1) loc(#loc47)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    cir.br ^bb2 loc(#loc46)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc30)
  } loc(#loc194)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc204)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    cir.return loc(#loc53)
  } loc(#loc202)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc205)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc206)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc65)
  cir.func @main(%arg0: !s32i loc(fused[#loc68, #loc69]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc70, #loc71])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc209)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc67)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc72)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc73)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc74)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc74)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc75)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc62)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc210)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21_good() : () -> () loc(#loc77)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc63)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc64)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21_bad() : () -> () loc(#loc81)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc65)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc84)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc212)
    cir.return %17 : !s32i loc(#loc212)
  } loc(#loc207)
  cir.global "private" internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc213)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc88)
  cir.func internal private @goodG2B1Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc91, #loc92])) -> !cir.ptr<!s8i> extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc215)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc90)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc93)
    cir.br ^bb1 loc(#loc216)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc213)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc96)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc217)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc88)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc88)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    cir.br ^bb4 loc(#loc98)
  ^bb3:  // pred: ^bb1
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc101)
    %9 = cir.const #cir.int<65> : !s32i loc(#loc102)
    %10 = cir.const #cir.int<50> : !s32i loc(#loc103)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc104)
    %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc103)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc103)
    cir.libc.memset %13 bytes from %8 set to %9 : !cir.ptr<!void>, !s32i, !u64i loc(#loc218)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc107)
    %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc107)
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
    %17 = cir.const #cir.int<50> : !s32i loc(#loc109)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc110)
    %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc109)
    %20 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc111)
    cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc219)
    cir.br ^bb4 loc(#loc95)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc95)
  ^bb5:  // pred: ^bb4
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc112)
    cir.store %21, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc220)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc220)
    cir.return %22 : !cir.ptr<!s8i> loc(#loc220)
  } loc(#loc214)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc222)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc223)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc224)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc121)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc121)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc121)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc121)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc121)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc121)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc121)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc224)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc122)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc225)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc124)
    %12 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc213)
    cir.store %11, %12 : !s32i, !cir.ptr<!s32i> loc(#loc226)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
    %14 = cir.call @goodG2B1Source(%13) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc127)
    cir.store %14, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc227)
    cir.br ^bb1 loc(#loc228)
  ^bb1:  // pred: ^bb0
    %15 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc222)
    cir.store %15, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc222)
    %16 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc132)
    %17 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc133)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
    %19 = cir.call @strcpy(%17, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr1) loc(#loc132)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc136)
    cir.br ^bb2 loc(#loc131)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc115)
  } loc(#loc221)
  cir.global "private" internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc229)
  cir.func internal private @goodG2B2Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc141, #loc142])) -> !cir.ptr<!s8i> extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc231)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc140)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc143)
    cir.br ^bb1 loc(#loc232)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc229)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc146)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc146)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc233)
  ^bb2:  // pred: ^bb1
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc148)
    %7 = cir.const #cir.int<65> : !s32i loc(#loc149)
    %8 = cir.const #cir.int<50> : !s32i loc(#loc150)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc151)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc150)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc150)
    cir.libc.memset %11 bytes from %6 set to %7 : !cir.ptr<!void>, !s32i, !u64i loc(#loc234)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc154)
    %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc154)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc155)
    %15 = cir.const #cir.int<50> : !s32i loc(#loc156)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc157)
    %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc156)
    %18 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %17 : !s32i), !cir.ptr<!s8i> loc(#loc158)
    cir.store %13, %18 : !s8i, !cir.ptr<!s8i> loc(#loc235)
    cir.br ^bb3 loc(#loc145)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc145)
  ^bb4:  // pred: ^bb3
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
    cir.store %19, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc236)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc236)
    cir.return %20 : !cir.ptr<!s8i> loc(#loc236)
  } loc(#loc230)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc238)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc239)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc240)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc168)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc168)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc168)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc168)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc168)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc168)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc168)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc240)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc169)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc241)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc171)
    %12 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc229)
    cir.store %11, %12 : !s32i, !cir.ptr<!s32i> loc(#loc242)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc173)
    %14 = cir.call @goodG2B2Source(%13) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc174)
    cir.store %14, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc243)
    cir.br ^bb1 loc(#loc244)
  ^bb1:  // pred: ^bb0
    %15 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc238)
    cir.store %15, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc238)
    %16 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc179)
    %17 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc180)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc181)
    %19 = cir.call @strcpy(%17, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr1) loc(#loc179)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc182)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc183)
    cir.br ^bb2 loc(#loc178)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc162)
  } loc(#loc237)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":24:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":24:24)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":26:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":35:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":27:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":28:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":33:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":28:8)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":29:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":31:16)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":31:22)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":31:27)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":31:31)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":31:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":31:32)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":32:23)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":32:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":32:14)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":32:18)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":32:19)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":34:12)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":34:5)
#loc25 = loc("/usr/include/string.h":141:1)
#loc26 = loc("/usr/include/string.h":142:14)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":37:1)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":50:1)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":45:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":45:25)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":39:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":39:12)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":40:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":40:33)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":41:12)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":41:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":42:17)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":42:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":43:22)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":43:12)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":43:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":43:26)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":44:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":49:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":47:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":47:16)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":47:22)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":48:19)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":48:9)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":119:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":123:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":121:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":121:14)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":122:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":122:14)
#loc58 = loc("/usr/include/stdlib.h":575:1)
#loc59 = loc("/usr/include/stdlib.h":575:41)
#loc60 = loc("/usr/include/time.h":76:1)
#loc61 = loc("/usr/include/time.h":76:38)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":140:15)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":142:15)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":145:15)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":147:15)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":135:1)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":150:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":136:1)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":138:27)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":138:22)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":138:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":140:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":141:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":141:69)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":142:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":145:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":146:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":146:68)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":147:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":149:12)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":149:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":57:1)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":57:29)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":66:19)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":61:1)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":75:1)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":62:1)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":63:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":73:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":63:8)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":64:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":67:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":69:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":66:9)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":71:16)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":71:22)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":71:27)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":71:30)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":71:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":71:31)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":72:22)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":72:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":72:14)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":72:17)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":72:18)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":74:12)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":74:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":77:1)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":90:1)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":85:9)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":85:25)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":79:5)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":79:12)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":80:5)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":80:33)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":81:12)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":81:5)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":82:22)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":82:5)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":83:27)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":83:12)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":83:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":83:31)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":84:5)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":89:5)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":87:9)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":87:16)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":87:22)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":88:19)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":88:9)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":58:1)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":58:29)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":93:1)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":102:1)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":94:1)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":95:5)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":100:5)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":95:8)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":96:5)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":98:16)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":98:22)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":98:27)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":98:30)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":98:9)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":98:31)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":99:22)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":99:9)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":99:14)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":99:17)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":99:18)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":101:12)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":101:5)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":104:1)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":117:1)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":112:9)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":112:25)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":106:5)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":106:12)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":107:5)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":107:33)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":108:12)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":108:5)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":109:22)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":109:5)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":110:27)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":110:12)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":110:5)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":110:31)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":111:5)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":116:5)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":114:9)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":114:16)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":114:22)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":115:19)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c":115:9)
#loc184 = loc(fused[#loc1, #loc2])
#loc185 = loc(fused[#loc3, #loc4])
#loc187 = loc(fused[#loc8, #loc9])
#loc188 = loc(fused[#loc11, #loc9])
#loc189 = loc(fused[#loc16, #loc17])
#loc190 = loc(fused[#loc19, #loc18])
#loc191 = loc(fused[#loc24, #loc23])
#loc192 = loc(fused[#loc25, #loc26])
#loc193 = loc(fused[#loc27, #loc28])
#loc194 = loc(fused[#loc29, #loc30])
#loc195 = loc(fused[#loc31, #loc32])
#loc196 = loc(fused[#loc33, #loc34])
#loc197 = loc(fused[#loc35, #loc36])
#loc198 = loc(fused[#loc38, #loc37])
#loc199 = loc(fused[#loc40, #loc39])
#loc200 = loc(fused[#loc43, #loc44])
#loc201 = loc(fused[#loc45, #loc46])
#loc202 = loc(fused[#loc52, #loc53])
#loc203 = loc(fused[#loc54, #loc55])
#loc204 = loc(fused[#loc56, #loc57])
#loc205 = loc(fused[#loc58, #loc59])
#loc206 = loc(fused[#loc60, #loc61])
#loc207 = loc(fused[#loc66, #loc67])
#loc210 = loc(fused[#loc77, #loc78])
#loc211 = loc(fused[#loc81, #loc82])
#loc212 = loc(fused[#loc85, #loc84])
#loc213 = loc(fused[#loc86, #loc87])
#loc214 = loc(fused[#loc89, #loc90])
#loc216 = loc(fused[#loc94, #loc95])
#loc217 = loc(fused[#loc97, #loc98, #loc99, #loc95])
#loc218 = loc(fused[#loc105, #loc106])
#loc219 = loc(fused[#loc108, #loc107])
#loc220 = loc(fused[#loc113, #loc112])
#loc221 = loc(fused[#loc114, #loc115])
#loc222 = loc(fused[#loc116, #loc117])
#loc223 = loc(fused[#loc118, #loc119])
#loc224 = loc(fused[#loc120, #loc121])
#loc225 = loc(fused[#loc123, #loc122])
#loc226 = loc(fused[#loc125, #loc124])
#loc227 = loc(fused[#loc128, #loc129])
#loc228 = loc(fused[#loc130, #loc131])
#loc229 = loc(fused[#loc137, #loc138])
#loc230 = loc(fused[#loc139, #loc140])
#loc232 = loc(fused[#loc144, #loc145])
#loc233 = loc(fused[#loc147, #loc145])
#loc234 = loc(fused[#loc152, #loc153])
#loc235 = loc(fused[#loc155, #loc154])
#loc236 = loc(fused[#loc160, #loc159])
#loc237 = loc(fused[#loc161, #loc162])
#loc238 = loc(fused[#loc163, #loc164])
#loc239 = loc(fused[#loc165, #loc166])
#loc240 = loc(fused[#loc167, #loc168])
#loc241 = loc(fused[#loc170, #loc169])
#loc242 = loc(fused[#loc172, #loc171])
#loc243 = loc(fused[#loc175, #loc176])
#loc244 = loc(fused[#loc177, #loc178])
