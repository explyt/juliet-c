!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_malloc_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc153)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc154)
  cir.func private  @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc155)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"A String\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc7)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc156)
  cir.func no_proto  @CWE401_Memory_Leak__char_malloc_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc159)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc160)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc17)
    cir.store %3, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc161)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc21)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc163)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc24)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc164)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc25)
        cir.condition(%8) loc(#loc25)
      } body {
        cir.scope {
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc27)
          %6 = cir.const #cir.int<100> : !s32i loc(#loc28)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc28)
          %8 = cir.const #cir.int<1> : !u64i loc(#loc166)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc167)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc27)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc168)
          cir.store %11, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc169)
          cir.scope {
            %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc171)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc37)
            cir.if %22 {
              %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc39)
              %24 = cir.const #cir.int<1> : !s32i loc(#loc40)
              %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc41)
              cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc39)
            } loc(#loc172)
          } loc(#loc170)
          %12 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc42)
          %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
          %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc7)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc7)
          %16 = cir.call @strcpy(%13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc42)
          %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc44)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc45)
        } loc(#loc165)
        cir.yield loc(#loc20)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc47)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc173)
        cir.yield loc(#loc162)
      } loc(#loc162)
    } loc(#loc162)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc50)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc175)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc52)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc53)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc176)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc54)
        cir.condition(%8) loc(#loc54)
      } body {
        cir.scope {
        } loc(#loc177)
        cir.yield loc(#loc49)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc56)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc57)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc178)
        cir.yield loc(#loc174)
      } loc(#loc174)
    } loc(#loc174)
    cir.return loc(#loc11)
  } loc(#loc157)
  cir.func no_proto  @CWE401_Memory_Leak__char_malloc_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc62)
    cir.return loc(#loc59)
  } loc(#loc179)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc182)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc184)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc185)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc186)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc73)
    cir.store %3, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc187)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc77)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc80)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc190)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc81)
        cir.condition(%8) loc(#loc81)
      } body {
        cir.scope {
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc83)
          %6 = cir.const #cir.int<100> : !s32i loc(#loc84)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc84)
          %8 = cir.const #cir.int<1> : !u64i loc(#loc192)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc193)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc83)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc194)
          cir.store %11, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc195)
          cir.scope {
            %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc92)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc92)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc197)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc93)
            cir.if %22 {
              %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc95)
              %24 = cir.const #cir.int<1> : !s32i loc(#loc96)
              %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc97)
              cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc95)
            } loc(#loc198)
          } loc(#loc196)
          %12 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc98)
          %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
          %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc100)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc100)
          %16 = cir.call @strcpy(%13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc98)
          %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc102)
        } loc(#loc191)
        cir.yield loc(#loc76)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc104)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc199)
        cir.yield loc(#loc188)
      } loc(#loc188)
    } loc(#loc188)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc107)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc201)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc109)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc110)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc202)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc111)
        cir.condition(%8) loc(#loc111)
      } body {
        cir.scope {
          %5 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc113)
          %6 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc114)
          cir.call @free(%7) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc113)
        } loc(#loc203)
        cir.yield loc(#loc106)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc115)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc116)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc204)
        cir.yield loc(#loc200)
      } loc(#loc200)
    } loc(#loc200)
    cir.return loc(#loc67)
  } loc(#loc183)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc206)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc207)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc208)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc124)
    cir.store %3, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc209)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc128)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc211)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc130)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc131)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc212)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc132)
        cir.condition(%8) loc(#loc132)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<100> : !s32i loc(#loc134)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc134)
          %7 = cir.const #cir.int<1> : !u64i loc(#loc134)
          %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc134)
          %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc134)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc134)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc134)
          cir.store %11, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc214)
          %12 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc136)
          %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
          %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc138)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc138)
          %16 = cir.call @strcpy(%13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc136)
          %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc140)
        } loc(#loc213)
        cir.yield loc(#loc127)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc141)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc142)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc215)
        cir.yield loc(#loc210)
      } loc(#loc210)
    } loc(#loc210)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc145)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc217)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc147)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc148)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc218)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc149)
        cir.condition(%8) loc(#loc149)
      } body {
        cir.scope {
        } loc(#loc219)
        cir.yield loc(#loc144)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc151)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc152)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc220)
        cir.yield loc(#loc216)
      } loc(#loc216)
    } loc(#loc216)
    cir.return loc(#loc118)
  } loc(#loc205)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_malloc_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":141:1)
#loc6 = loc("/usr/include/string.h":142:14)
#loc7 = loc("CWE401_Memory_Leak__char_malloc_17.c":35:22)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE401_Memory_Leak__char_malloc_17.c":24:1)
#loc11 = loc("CWE401_Memory_Leak__char_malloc_17.c":43:1)
#loc12 = loc("CWE401_Memory_Leak__char_malloc_17.c":26:5)
#loc13 = loc("CWE401_Memory_Leak__char_malloc_17.c":26:9)
#loc14 = loc("CWE401_Memory_Leak__char_malloc_17.c":26:11)
#loc15 = loc("CWE401_Memory_Leak__char_malloc_17.c":27:5)
#loc16 = loc("CWE401_Memory_Leak__char_malloc_17.c":27:12)
#loc17 = loc("CWE401_Memory_Leak__char_malloc_17.c":28:12)
#loc18 = loc("CWE401_Memory_Leak__char_malloc_17.c":28:5)
#loc19 = loc("CWE401_Memory_Leak__char_malloc_17.c":29:5)
#loc20 = loc("CWE401_Memory_Leak__char_malloc_17.c":37:5)
#loc21 = loc("CWE401_Memory_Leak__char_malloc_17.c":29:13)
#loc22 = loc("CWE401_Memory_Leak__char_malloc_17.c":29:9)
#loc23 = loc("CWE401_Memory_Leak__char_malloc_17.c":29:16)
#loc24 = loc("CWE401_Memory_Leak__char_malloc_17.c":29:20)
#loc25 = loc("CWE401_Memory_Leak__char_malloc_17.c":29:18)
#loc26 = loc("CWE401_Memory_Leak__char_malloc_17.c":30:5)
#loc27 = loc("CWE401_Memory_Leak__char_malloc_17.c":32:24)
#loc28 = loc("CWE401_Memory_Leak__char_malloc_17.c":32:31)
#loc29 = loc("CWE401_Memory_Leak__char_malloc_17.c":32:35)
#loc30 = loc("CWE401_Memory_Leak__char_malloc_17.c":32:46)
#loc31 = loc("CWE401_Memory_Leak__char_malloc_17.c":32:47)
#loc32 = loc("CWE401_Memory_Leak__char_malloc_17.c":32:9)
#loc33 = loc("CWE401_Memory_Leak__char_malloc_17.c":33:9)
#loc34 = loc("CWE401_Memory_Leak__char_malloc_17.c":33:37)
#loc35 = loc("CWE401_Memory_Leak__char_malloc_17.c":33:13)
#loc36 = loc("CWE401_Memory_Leak__char_malloc_17.c":33:21)
#loc37 = loc("CWE401_Memory_Leak__char_malloc_17.c":33:18)
#loc38 = loc("CWE401_Memory_Leak__char_malloc_17.c":33:27)
#loc39 = loc("CWE401_Memory_Leak__char_malloc_17.c":33:28)
#loc40 = loc("CWE401_Memory_Leak__char_malloc_17.c":33:34)
#loc41 = loc("CWE401_Memory_Leak__char_malloc_17.c":33:33)
#loc42 = loc("CWE401_Memory_Leak__char_malloc_17.c":35:9)
#loc43 = loc("CWE401_Memory_Leak__char_malloc_17.c":35:16)
#loc44 = loc("CWE401_Memory_Leak__char_malloc_17.c":36:19)
#loc45 = loc("CWE401_Memory_Leak__char_malloc_17.c":36:9)
#loc46 = loc("CWE401_Memory_Leak__char_malloc_17.c":29:24)
#loc47 = loc("CWE401_Memory_Leak__char_malloc_17.c":29:23)
#loc48 = loc("CWE401_Memory_Leak__char_malloc_17.c":38:5)
#loc49 = loc("CWE401_Memory_Leak__char_malloc_17.c":42:5)
#loc50 = loc("CWE401_Memory_Leak__char_malloc_17.c":38:13)
#loc51 = loc("CWE401_Memory_Leak__char_malloc_17.c":38:9)
#loc52 = loc("CWE401_Memory_Leak__char_malloc_17.c":38:16)
#loc53 = loc("CWE401_Memory_Leak__char_malloc_17.c":38:20)
#loc54 = loc("CWE401_Memory_Leak__char_malloc_17.c":38:18)
#loc55 = loc("CWE401_Memory_Leak__char_malloc_17.c":39:5)
#loc56 = loc("CWE401_Memory_Leak__char_malloc_17.c":38:24)
#loc57 = loc("CWE401_Memory_Leak__char_malloc_17.c":38:23)
#loc58 = loc("CWE401_Memory_Leak__char_malloc_17.c":92:1)
#loc59 = loc("CWE401_Memory_Leak__char_malloc_17.c":96:1)
#loc60 = loc("CWE401_Memory_Leak__char_malloc_17.c":94:5)
#loc61 = loc("CWE401_Memory_Leak__char_malloc_17.c":94:13)
#loc62 = loc("CWE401_Memory_Leak__char_malloc_17.c":95:5)
#loc63 = loc("CWE401_Memory_Leak__char_malloc_17.c":95:13)
#loc64 = loc("/usr/include/stdlib.h":687:1)
#loc65 = loc("/usr/include/stdlib.h":687:32)
#loc66 = loc("CWE401_Memory_Leak__char_malloc_17.c":50:1)
#loc67 = loc("CWE401_Memory_Leak__char_malloc_17.c":69:1)
#loc68 = loc("CWE401_Memory_Leak__char_malloc_17.c":52:5)
#loc69 = loc("CWE401_Memory_Leak__char_malloc_17.c":52:9)
#loc70 = loc("CWE401_Memory_Leak__char_malloc_17.c":52:11)
#loc71 = loc("CWE401_Memory_Leak__char_malloc_17.c":53:5)
#loc72 = loc("CWE401_Memory_Leak__char_malloc_17.c":53:12)
#loc73 = loc("CWE401_Memory_Leak__char_malloc_17.c":54:12)
#loc74 = loc("CWE401_Memory_Leak__char_malloc_17.c":54:5)
#loc75 = loc("CWE401_Memory_Leak__char_malloc_17.c":55:5)
#loc76 = loc("CWE401_Memory_Leak__char_malloc_17.c":63:5)
#loc77 = loc("CWE401_Memory_Leak__char_malloc_17.c":55:13)
#loc78 = loc("CWE401_Memory_Leak__char_malloc_17.c":55:9)
#loc79 = loc("CWE401_Memory_Leak__char_malloc_17.c":55:16)
#loc80 = loc("CWE401_Memory_Leak__char_malloc_17.c":55:20)
#loc81 = loc("CWE401_Memory_Leak__char_malloc_17.c":55:18)
#loc82 = loc("CWE401_Memory_Leak__char_malloc_17.c":56:5)
#loc83 = loc("CWE401_Memory_Leak__char_malloc_17.c":58:24)
#loc84 = loc("CWE401_Memory_Leak__char_malloc_17.c":58:31)
#loc85 = loc("CWE401_Memory_Leak__char_malloc_17.c":58:35)
#loc86 = loc("CWE401_Memory_Leak__char_malloc_17.c":58:46)
#loc87 = loc("CWE401_Memory_Leak__char_malloc_17.c":58:47)
#loc88 = loc("CWE401_Memory_Leak__char_malloc_17.c":58:9)
#loc89 = loc("CWE401_Memory_Leak__char_malloc_17.c":59:9)
#loc90 = loc("CWE401_Memory_Leak__char_malloc_17.c":59:37)
#loc91 = loc("CWE401_Memory_Leak__char_malloc_17.c":59:13)
#loc92 = loc("CWE401_Memory_Leak__char_malloc_17.c":59:21)
#loc93 = loc("CWE401_Memory_Leak__char_malloc_17.c":59:18)
#loc94 = loc("CWE401_Memory_Leak__char_malloc_17.c":59:27)
#loc95 = loc("CWE401_Memory_Leak__char_malloc_17.c":59:28)
#loc96 = loc("CWE401_Memory_Leak__char_malloc_17.c":59:34)
#loc97 = loc("CWE401_Memory_Leak__char_malloc_17.c":59:33)
#loc98 = loc("CWE401_Memory_Leak__char_malloc_17.c":61:9)
#loc99 = loc("CWE401_Memory_Leak__char_malloc_17.c":61:16)
#loc100 = loc("CWE401_Memory_Leak__char_malloc_17.c":61:22)
#loc101 = loc("CWE401_Memory_Leak__char_malloc_17.c":62:19)
#loc102 = loc("CWE401_Memory_Leak__char_malloc_17.c":62:9)
#loc103 = loc("CWE401_Memory_Leak__char_malloc_17.c":55:24)
#loc104 = loc("CWE401_Memory_Leak__char_malloc_17.c":55:23)
#loc105 = loc("CWE401_Memory_Leak__char_malloc_17.c":64:5)
#loc106 = loc("CWE401_Memory_Leak__char_malloc_17.c":68:5)
#loc107 = loc("CWE401_Memory_Leak__char_malloc_17.c":64:13)
#loc108 = loc("CWE401_Memory_Leak__char_malloc_17.c":64:9)
#loc109 = loc("CWE401_Memory_Leak__char_malloc_17.c":64:16)
#loc110 = loc("CWE401_Memory_Leak__char_malloc_17.c":64:20)
#loc111 = loc("CWE401_Memory_Leak__char_malloc_17.c":64:18)
#loc112 = loc("CWE401_Memory_Leak__char_malloc_17.c":65:5)
#loc113 = loc("CWE401_Memory_Leak__char_malloc_17.c":67:9)
#loc114 = loc("CWE401_Memory_Leak__char_malloc_17.c":67:14)
#loc115 = loc("CWE401_Memory_Leak__char_malloc_17.c":64:24)
#loc116 = loc("CWE401_Memory_Leak__char_malloc_17.c":64:23)
#loc117 = loc("CWE401_Memory_Leak__char_malloc_17.c":72:1)
#loc118 = loc("CWE401_Memory_Leak__char_malloc_17.c":90:1)
#loc119 = loc("CWE401_Memory_Leak__char_malloc_17.c":74:5)
#loc120 = loc("CWE401_Memory_Leak__char_malloc_17.c":74:9)
#loc121 = loc("CWE401_Memory_Leak__char_malloc_17.c":74:11)
#loc122 = loc("CWE401_Memory_Leak__char_malloc_17.c":75:5)
#loc123 = loc("CWE401_Memory_Leak__char_malloc_17.c":75:12)
#loc124 = loc("CWE401_Memory_Leak__char_malloc_17.c":76:12)
#loc125 = loc("CWE401_Memory_Leak__char_malloc_17.c":76:5)
#loc126 = loc("CWE401_Memory_Leak__char_malloc_17.c":77:5)
#loc127 = loc("CWE401_Memory_Leak__char_malloc_17.c":84:5)
#loc128 = loc("CWE401_Memory_Leak__char_malloc_17.c":77:13)
#loc129 = loc("CWE401_Memory_Leak__char_malloc_17.c":77:9)
#loc130 = loc("CWE401_Memory_Leak__char_malloc_17.c":77:16)
#loc131 = loc("CWE401_Memory_Leak__char_malloc_17.c":77:20)
#loc132 = loc("CWE401_Memory_Leak__char_malloc_17.c":77:18)
#loc133 = loc("CWE401_Memory_Leak__char_malloc_17.c":78:5)
#loc134 = loc("CWE401_Memory_Leak__char_malloc_17.c":80:24)
#loc135 = loc("CWE401_Memory_Leak__char_malloc_17.c":80:9)
#loc136 = loc("CWE401_Memory_Leak__char_malloc_17.c":82:9)
#loc137 = loc("CWE401_Memory_Leak__char_malloc_17.c":82:16)
#loc138 = loc("CWE401_Memory_Leak__char_malloc_17.c":82:22)
#loc139 = loc("CWE401_Memory_Leak__char_malloc_17.c":83:19)
#loc140 = loc("CWE401_Memory_Leak__char_malloc_17.c":83:9)
#loc141 = loc("CWE401_Memory_Leak__char_malloc_17.c":77:24)
#loc142 = loc("CWE401_Memory_Leak__char_malloc_17.c":77:23)
#loc143 = loc("CWE401_Memory_Leak__char_malloc_17.c":85:5)
#loc144 = loc("CWE401_Memory_Leak__char_malloc_17.c":89:5)
#loc145 = loc("CWE401_Memory_Leak__char_malloc_17.c":85:13)
#loc146 = loc("CWE401_Memory_Leak__char_malloc_17.c":85:9)
#loc147 = loc("CWE401_Memory_Leak__char_malloc_17.c":85:16)
#loc148 = loc("CWE401_Memory_Leak__char_malloc_17.c":85:20)
#loc149 = loc("CWE401_Memory_Leak__char_malloc_17.c":85:18)
#loc150 = loc("CWE401_Memory_Leak__char_malloc_17.c":86:5)
#loc151 = loc("CWE401_Memory_Leak__char_malloc_17.c":85:24)
#loc152 = loc("CWE401_Memory_Leak__char_malloc_17.c":85:23)
#loc153 = loc(fused[#loc1, #loc2])
#loc154 = loc(fused[#loc3, #loc4])
#loc155 = loc(fused[#loc5, #loc6])
#loc156 = loc(fused[#loc8, #loc9])
#loc157 = loc(fused[#loc10, #loc11])
#loc158 = loc(fused[#loc12, #loc13])
#loc159 = loc(fused[#loc12, #loc14])
#loc160 = loc(fused[#loc15, #loc16])
#loc161 = loc(fused[#loc18, #loc17])
#loc162 = loc(fused[#loc19, #loc20])
#loc163 = loc(fused[#loc22, #loc21])
#loc164 = loc(fused[#loc23, #loc24])
#loc165 = loc(fused[#loc26, #loc20])
#loc166 = loc(fused[#loc29, #loc30])
#loc167 = loc(fused[#loc28, #loc30])
#loc168 = loc(fused[#loc27, #loc31])
#loc169 = loc(fused[#loc32, #loc31])
#loc170 = loc(fused[#loc33, #loc34])
#loc171 = loc(fused[#loc35, #loc36])
#loc172 = loc(fused[#loc38, #loc34])
#loc173 = loc(fused[#loc47, #loc46])
#loc174 = loc(fused[#loc48, #loc49])
#loc175 = loc(fused[#loc51, #loc50])
#loc176 = loc(fused[#loc52, #loc53])
#loc177 = loc(fused[#loc55, #loc49])
#loc178 = loc(fused[#loc57, #loc56])
#loc179 = loc(fused[#loc58, #loc59])
#loc180 = loc(fused[#loc60, #loc61])
#loc181 = loc(fused[#loc62, #loc63])
#loc182 = loc(fused[#loc64, #loc65])
#loc183 = loc(fused[#loc66, #loc67])
#loc184 = loc(fused[#loc68, #loc69])
#loc185 = loc(fused[#loc68, #loc70])
#loc186 = loc(fused[#loc71, #loc72])
#loc187 = loc(fused[#loc74, #loc73])
#loc188 = loc(fused[#loc75, #loc76])
#loc189 = loc(fused[#loc78, #loc77])
#loc190 = loc(fused[#loc79, #loc80])
#loc191 = loc(fused[#loc82, #loc76])
#loc192 = loc(fused[#loc85, #loc86])
#loc193 = loc(fused[#loc84, #loc86])
#loc194 = loc(fused[#loc83, #loc87])
#loc195 = loc(fused[#loc88, #loc87])
#loc196 = loc(fused[#loc89, #loc90])
#loc197 = loc(fused[#loc91, #loc92])
#loc198 = loc(fused[#loc94, #loc90])
#loc199 = loc(fused[#loc104, #loc103])
#loc200 = loc(fused[#loc105, #loc106])
#loc201 = loc(fused[#loc108, #loc107])
#loc202 = loc(fused[#loc109, #loc110])
#loc203 = loc(fused[#loc112, #loc106])
#loc204 = loc(fused[#loc116, #loc115])
#loc205 = loc(fused[#loc117, #loc118])
#loc206 = loc(fused[#loc119, #loc120])
#loc207 = loc(fused[#loc119, #loc121])
#loc208 = loc(fused[#loc122, #loc123])
#loc209 = loc(fused[#loc125, #loc124])
#loc210 = loc(fused[#loc126, #loc127])
#loc211 = loc(fused[#loc129, #loc128])
#loc212 = loc(fused[#loc130, #loc131])
#loc213 = loc(fused[#loc133, #loc127])
#loc214 = loc(fused[#loc135, #loc134])
#loc215 = loc(fused[#loc142, #loc141])
#loc216 = loc(fused[#loc143, #loc144])
#loc217 = loc(fused[#loc146, #loc145])
#loc218 = loc(fused[#loc147, #loc148])
#loc219 = loc(fused[#loc150, #loc144])
#loc220 = loc(fused[#loc152, #loc151])
