!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_add_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printHexCharLine(!s8i) loc(#loc79)
  cir.func @_ZN40CWE190_Integer_Overflow__char_max_add_333badEv() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc81)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc82)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc83)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc84)
    cir.store %2, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc12)
    %4 = cir.const #cir.int<32> : !s8i loc(#loc13)
    cir.store %4, %2 : !s8i, !cir.ptr<!s8i> loc(#loc85)
    %5 = cir.const #cir.int<127> : !s32i loc(#loc15)
    %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc15)
    cir.store %6, %2 : !s8i, !cir.ptr<!s8i> loc(#loc86)
    cir.br ^bb1 loc(#loc87)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc6)
    %8 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc6)
    cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc81)
    cir.br ^bb2 loc(#loc88)
  ^bb2:  // pred: ^bb1
    %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc21)
    %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc21)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc21)
    %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc21)
    cir.store %13, %1 : !s8i, !cir.ptr<!s8i> loc(#loc82)
    %14 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc22)
    cir.call @printHexCharLine(%14) : (!s8i) -> () loc(#loc23)
    cir.br ^bb3 loc(#loc20)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc18)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc4)
  } loc(#loc80)
  cir.func internal private @_ZN40CWE190_Integer_Overflow__char_max_add_33L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc90)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc91)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc92)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc93)
    cir.store %2, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc33)
    %4 = cir.const #cir.int<32> : !s8i loc(#loc34)
    cir.store %4, %2 : !s8i, !cir.ptr<!s8i> loc(#loc94)
    %5 = cir.const #cir.int<2> : !s32i loc(#loc36)
    %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc36)
    cir.store %6, %2 : !s8i, !cir.ptr<!s8i> loc(#loc95)
    cir.br ^bb1 loc(#loc96)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
    %8 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc27)
    cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc90)
    cir.br ^bb2 loc(#loc97)
  ^bb2:  // pred: ^bb1
    %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc42)
    %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc42)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc42)
    %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc42)
    cir.store %13, %1 : !s8i, !cir.ptr<!s8i> loc(#loc91)
    %14 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc43)
    cir.call @printHexCharLine(%14) : (!s8i) -> () loc(#loc44)
    cir.br ^bb3 loc(#loc41)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc39)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc25)
  } loc(#loc89)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc47)
  cir.func internal private @_ZN40CWE190_Integer_Overflow__char_max_add_33L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc100)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc101)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc102)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc103)
    cir.store %2, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc57)
    %4 = cir.const #cir.int<32> : !s8i loc(#loc58)
    cir.store %4, %2 : !s8i, !cir.ptr<!s8i> loc(#loc104)
    %5 = cir.const #cir.int<127> : !s32i loc(#loc60)
    %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc60)
    cir.store %6, %2 : !s8i, !cir.ptr<!s8i> loc(#loc105)
    cir.br ^bb1 loc(#loc106)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
    %8 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc51)
    cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc100)
    cir.br ^bb2 loc(#loc107)
  ^bb2:  // pred: ^bb1
    %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc66)
    %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc66)
    %11 = cir.const #cir.int<127> : !s32i loc(#loc67)
    %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc108)
    cir.brcond %12 ^bb3, ^bb4 loc(#loc109)
  ^bb3:  // pred: ^bb2
    %13 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc71)
    %14 = cir.cast(integral, %13 : !s8i), !s32i loc(#loc71)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %16 = cir.binop(add, %14, %15) nsw : !s32i loc(#loc71)
    %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc71)
    cir.store %17, %1 : !s8i, !cir.ptr<!s8i> loc(#loc101)
    %18 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc72)
    cir.call @printHexCharLine(%18) : (!s8i) -> () loc(#loc73)
    cir.br ^bb5 loc(#loc69)
  ^bb4:  // pred: ^bb2
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc47)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    cir.br ^bb5 loc(#loc65)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc65)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc63)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc49)
  } loc(#loc99)
  cir.func @_ZN40CWE190_Integer_Overflow__char_max_add_334goodEv() extra(#fn_attr) {
    cir.call @_ZN40CWE190_Integer_Overflow__char_max_add_33L7goodG2BEv() : () -> () loc(#loc77)
    cir.call @_ZN40CWE190_Integer_Overflow__char_max_add_33L7goodB2GEv() : () -> () loc(#loc78)
    cir.return loc(#loc76)
  } loc(#loc110)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_add_33.cpp":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc3 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":25:1)
#loc4 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":40:1)
#loc5 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":33:9)
#loc6 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":33:21)
#loc7 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":36:13)
#loc8 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":36:34)
#loc9 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":27:5)
#loc10 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":27:10)
#loc11 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":28:5)
#loc12 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":28:21)
#loc13 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":29:12)
#loc14 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":29:5)
#loc15 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":31:12)
#loc16 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":31:5)
#loc17 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":32:5)
#loc18 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":39:5)
#loc19 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":34:9)
#loc20 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":38:9)
#loc21 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":36:27)
#loc22 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":37:30)
#loc23 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":37:13)
#loc24 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":47:1)
#loc25 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":62:1)
#loc26 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":55:9)
#loc27 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":55:21)
#loc28 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":58:13)
#loc29 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":58:34)
#loc30 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":49:5)
#loc31 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":49:10)
#loc32 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":50:5)
#loc33 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":50:21)
#loc34 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":51:12)
#loc35 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":51:5)
#loc36 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":53:12)
#loc37 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":53:5)
#loc38 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":54:5)
#loc39 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":61:5)
#loc40 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":56:9)
#loc41 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":60:9)
#loc42 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":58:27)
#loc43 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":59:30)
#loc44 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":59:13)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":82:23)
#loc48 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":65:1)
#loc49 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":85:1)
#loc50 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":73:9)
#loc51 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":73:21)
#loc52 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":77:13)
#loc53 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":77:34)
#loc54 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":67:5)
#loc55 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":67:10)
#loc56 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":68:5)
#loc57 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":68:21)
#loc58 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":69:12)
#loc59 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":69:5)
#loc60 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":71:12)
#loc61 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":71:5)
#loc62 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":72:5)
#loc63 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":84:5)
#loc64 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":75:9)
#loc65 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":83:9)
#loc66 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":75:13)
#loc67 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":75:20)
#loc68 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":76:9)
#loc69 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":79:9)
#loc70 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":81:9)
#loc71 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":77:27)
#loc72 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":78:30)
#loc73 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":78:13)
#loc74 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":82:13)
#loc75 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":87:1)
#loc76 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":91:1)
#loc77 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":89:5)
#loc78 = loc("CWE190_Integer_Overflow__char_max_add_33.cpp":90:5)
#loc79 = loc(fused[#loc1, #loc2])
#loc80 = loc(fused[#loc3, #loc4])
#loc81 = loc(fused[#loc5, #loc6])
#loc82 = loc(fused[#loc7, #loc8])
#loc83 = loc(fused[#loc9, #loc10])
#loc84 = loc(fused[#loc11, #loc12])
#loc85 = loc(fused[#loc14, #loc13])
#loc86 = loc(fused[#loc16, #loc15])
#loc87 = loc(fused[#loc17, #loc18])
#loc88 = loc(fused[#loc19, #loc20])
#loc89 = loc(fused[#loc24, #loc25])
#loc90 = loc(fused[#loc26, #loc27])
#loc91 = loc(fused[#loc28, #loc29])
#loc92 = loc(fused[#loc30, #loc31])
#loc93 = loc(fused[#loc32, #loc33])
#loc94 = loc(fused[#loc35, #loc34])
#loc95 = loc(fused[#loc37, #loc36])
#loc96 = loc(fused[#loc38, #loc39])
#loc97 = loc(fused[#loc40, #loc41])
#loc98 = loc(fused[#loc45, #loc46])
#loc99 = loc(fused[#loc48, #loc49])
#loc100 = loc(fused[#loc50, #loc51])
#loc101 = loc(fused[#loc52, #loc53])
#loc102 = loc(fused[#loc54, #loc55])
#loc103 = loc(fused[#loc56, #loc57])
#loc104 = loc(fused[#loc59, #loc58])
#loc105 = loc(fused[#loc61, #loc60])
#loc106 = loc(fused[#loc62, #loc63])
#loc107 = loc(fused[#loc64, #loc65])
#loc108 = loc(fused[#loc66, #loc67])
#loc109 = loc(fused[#loc68, #loc69, #loc70, #loc65])
#loc110 = loc(fused[#loc75, #loc76])
