!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":86:10)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":86:14)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":86:20)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":86:32)
#loc138 = loc(fused[#loc49, #loc50])
#loc139 = loc(fused[#loc51, #loc52])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc117)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc118)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45_badData = #cir.ptr<null> : !cir.ptr<!cir.double> {alignment = 8 : i64} loc(#loc119)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc121)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc122)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc13)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc123)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc13)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc124)
    cir.store %5, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc125)
    cir.br ^bb1 loc(#loc126)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc20)
    %7 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc21)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc21)
    %9 = cir.cmp(eq, %6, %8) : !cir.ptr<!cir.double>, !cir.bool loc(#loc127)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc128)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc23)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc25)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc23)
    cir.br ^bb3 loc(#loc19)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // pred: ^bb3
    %13 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc26)
    %14 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc27)
    cir.store %13, %14 : !cir.double, !cir.ptr<!cir.double> loc(#loc129)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc29)
    %16 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45_badData : !cir.ptr<!cir.ptr<!cir.double>> loc(#loc119)
    cir.store %15, %16 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc130)
    %17 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc131)
    cir.call %17() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc8)
  } loc(#loc120)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc133)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc34)
  } loc(#loc132)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc134)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc135)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc136)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc46)
  cir.func @main(%arg0: !s32i loc(fused[#loc49, #loc50]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc51, #loc52])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc138)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc139)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc48)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc53)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc53)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc54)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc55)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc55)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc56)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc43)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45_good : !cir.ptr<!cir.func<!void ()>> loc(#loc140)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45_good() : () -> () loc(#loc58)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc44)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc45)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc141)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45_bad() : () -> () loc(#loc62)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc46)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc65)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    cir.return %17 : !s32i loc(#loc142)
  } loc(#loc137)
  cir.func private @printDoubleLine(!cir.double) loc(#loc143)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc144)
  cir.func no_proto internal private @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data", init] {alignment = 8 : i64} loc(#loc146)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45_badData : !cir.ptr<!cir.ptr<!cir.double>> loc(#loc119)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc74)
    cir.store %2, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc146)
    %3 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc75)
    %4 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc76)
    cir.call @printDoubleLine(%4) : (!cir.double) -> () loc(#loc77)
    %5 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc78)
    %6 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc79)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc79)
    cir.call @free(%7) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc78)
    cir.return loc(#loc72)
  } loc(#loc145)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45_goodG2BData = #cir.ptr<null> : !cir.ptr<!cir.double> {alignment = 8 : i64} loc(#loc147)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc149)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc86)
    cir.store %1, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc150)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc88)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc151)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc88)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc152)
    cir.store %5, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc153)
    cir.br ^bb1 loc(#loc154)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc95)
    %7 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc96)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc96)
    %9 = cir.cmp(eq, %6, %8) : !cir.ptr<!cir.double>, !cir.bool loc(#loc155)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc156)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc98)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc99)
    %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc100)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc98)
    cir.br ^bb3 loc(#loc94)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc94)
  ^bb4:  // pred: ^bb3
    %13 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc101)
    %14 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc102)
    cir.store %13, %14 : !cir.double, !cir.ptr<!cir.double> loc(#loc157)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc104)
    %16 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45_goodG2BData : !cir.ptr<!cir.ptr<!cir.double>> loc(#loc147)
    cir.store %15, %16 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc158)
    %17 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc159)
    cir.call %17() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc106)
    cir.return loc(#loc83)
  } loc(#loc148)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data", init] {alignment = 8 : i64} loc(#loc161)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45_goodG2BData : !cir.ptr<!cir.ptr<!cir.double>> loc(#loc147)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc111)
    cir.store %2, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc161)
    %3 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc112)
    %4 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc113)
    cir.call @printDoubleLine(%4) : (!cir.double) -> () loc(#loc114)
    %5 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc115)
    %6 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc116)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc116)
    cir.call @free(%7) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc115)
    cir.return loc(#loc109)
  } loc(#loc160)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":19:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":19:17)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":32:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":44:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":34:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":34:14)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":36:12)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":36:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":39:22)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":39:29)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":39:40)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":39:41)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":39:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":40:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":40:33)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":40:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":40:17)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":40:23)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":40:24)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":40:30)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":40:29)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":41:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":41:6)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":41:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":42:67)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":42:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":43:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":43:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":72:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":75:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":74:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":74:13)
#loc37 = loc("/usr/include/stdlib.h":575:1)
#loc38 = loc("/usr/include/stdlib.h":575:41)
#loc39 = loc("/usr/include/time.h":76:1)
#loc40 = loc("/usr/include/time.h":76:38)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":91:15)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":93:15)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":96:15)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":98:15)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":86:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":101:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":87:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":89:27)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":89:22)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":89:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":91:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":92:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":92:62)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":93:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":96:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":97:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":97:61)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":98:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":100:12)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":100:5)
#loc67 = loc("../../../testcasesupport/std_testcase_io.h":38:1)
#loc68 = loc("../../../testcasesupport/std_testcase_io.h":38:41)
#loc69 = loc("/usr/include/stdlib.h":687:1)
#loc70 = loc("/usr/include/stdlib.h":687:32)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":24:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":30:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":26:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":26:21)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":28:22)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":28:21)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":28:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":29:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":29:10)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":20:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":20:17)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":59:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":70:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":61:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":61:14)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":63:12)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":63:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":65:22)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":65:29)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":65:41)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":65:42)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":65:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":66:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":66:33)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":66:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":66:17)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":66:23)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":66:24)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":66:30)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":66:29)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":67:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":67:6)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":67:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":68:71)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":68:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":69:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":69:17)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":51:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":57:1)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":53:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":53:21)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":55:22)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":55:21)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":55:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":56:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c":56:10)
#loc117 = loc(fused[#loc1, #loc2])
#loc118 = loc(fused[#loc3, #loc4])
#loc119 = loc(fused[#loc5, #loc6])
#loc120 = loc(fused[#loc7, #loc8])
#loc121 = loc(fused[#loc9, #loc10])
#loc122 = loc(fused[#loc12, #loc11])
#loc123 = loc(fused[#loc14, #loc15])
#loc124 = loc(fused[#loc13, #loc16])
#loc125 = loc(fused[#loc17, #loc16])
#loc126 = loc(fused[#loc18, #loc19])
#loc127 = loc(fused[#loc20, #loc21])
#loc128 = loc(fused[#loc22, #loc19])
#loc129 = loc(fused[#loc28, #loc26])
#loc130 = loc(fused[#loc30, #loc29])
#loc131 = loc(fused[#loc31, #loc32])
#loc132 = loc(fused[#loc33, #loc34])
#loc133 = loc(fused[#loc35, #loc36])
#loc134 = loc(fused[#loc37, #loc38])
#loc135 = loc(fused[#loc39, #loc40])
#loc136 = loc(fused[#loc41, #loc42])
#loc137 = loc(fused[#loc47, #loc48])
#loc140 = loc(fused[#loc58, #loc59])
#loc141 = loc(fused[#loc62, #loc63])
#loc142 = loc(fused[#loc66, #loc65])
#loc143 = loc(fused[#loc67, #loc68])
#loc144 = loc(fused[#loc69, #loc70])
#loc145 = loc(fused[#loc71, #loc72])
#loc146 = loc(fused[#loc73, #loc74])
#loc147 = loc(fused[#loc80, #loc81])
#loc148 = loc(fused[#loc82, #loc83])
#loc149 = loc(fused[#loc84, #loc85])
#loc150 = loc(fused[#loc87, #loc86])
#loc151 = loc(fused[#loc89, #loc90])
#loc152 = loc(fused[#loc88, #loc91])
#loc153 = loc(fused[#loc92, #loc91])
#loc154 = loc(fused[#loc93, #loc94])
#loc155 = loc(fused[#loc95, #loc96])
#loc156 = loc(fused[#loc97, #loc94])
#loc157 = loc(fused[#loc103, #loc101])
#loc158 = loc(fused[#loc105, #loc104])
#loc159 = loc(fused[#loc106, #loc107])
#loc160 = loc(fused[#loc108, #loc109])
#loc161 = loc(fused[#loc110, #loc111])
