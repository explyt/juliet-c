!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":133:10)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":133:14)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":133:20)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":133:32)
#loc222 = loc(fused[#loc75, #loc76])
#loc223 = loc(fused[#loc77, #loc78])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B2.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc191)
  cir.global "private" constant cir_private @__const.goodG2B1.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc192)
  cir.global "private" constant cir_private @__const.CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc193)
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc194)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc195)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc196)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc198)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc199)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc18)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc18)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc18)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc18)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc18)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc200)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc18)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc18)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc199)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc20)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc20)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc20)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc20)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc20)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc20)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc20)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc20)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc200)
    cir.scope {
      %19 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc194)
      %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc23)
      %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc23)
      cir.if %21 {
        %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
        cir.store %22, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc203)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc27)
        %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc27)
        %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
        %26 = cir.const #cir.int<0> : !s32i loc(#loc29)
        %27 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc30)
        cir.store %24, %27 : !s8i, !cir.ptr<!s8i> loc(#loc204)
      } loc(#loc202)
    } loc(#loc201)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc193)
      %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc206)
      %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc207)
      %22 = cir.get_global @__const.CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc193)
      cir.copy %22 to %19 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc193)
      %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc36)
      %24 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc37)
      %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc36)
      cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc208)
      cir.scope {
        %27 = cir.const #cir.int<0> : !s32i loc(#loc42)
        %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc42)
        cir.store %28, %20 : !u64i, !cir.ptr<!u64i> loc(#loc210)
        cir.for : cond {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc44)
          %30 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc45)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc46)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc46)
          %33 = cir.binop(add, %30, %32) : !u64i loc(#loc211)
          %34 = cir.cmp(lt, %29, %33) : !u64i, !cir.bool loc(#loc212)
          cir.condition(%34) loc(#loc47)
        } body {
          cir.scope {
            %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc49)
            %30 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc50)
            %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc50)
            %32 = cir.load %31 : !cir.ptr<!s8i>, !s8i loc(#loc50)
            %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
            %34 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc52)
            %35 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc53)
            cir.store %32, %35 : !s8i, !cir.ptr<!s8i> loc(#loc214)
          } loc(#loc213)
          cir.yield loc(#loc41)
        } step {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc55)
          %30 = cir.unary(inc, %29) : !u64i, !u64i loc(#loc56)
          cir.store %30, %20 : !u64i, !cir.ptr<!u64i> loc(#loc215)
          cir.yield loc(#loc209)
        } loc(#loc209)
      } loc(#loc209)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    } loc(#loc205)
    cir.return loc(#loc14)
  } loc(#loc197)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc217)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    cir.return loc(#loc60)
  } loc(#loc216)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc219)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc220)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc72)
  cir.func @main(%arg0: !s32i loc(fused[#loc75, #loc76]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc77, #loc78])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc222)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc223)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc74)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc79)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc80)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc81)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc81)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc82)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc69)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10_good : !cir.ptr<!cir.func<!void ()>> loc(#loc224)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10_good() : () -> () loc(#loc84)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc70)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc71)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc225)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10_bad() : () -> () loc(#loc88)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc72)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc91)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc226)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc226)
    cir.return %17 : !s32i loc(#loc226)
  } loc(#loc221)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc227)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc95)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc229)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc230)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc101)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc101)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc101)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc101)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc101)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc231)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc101)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc101)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc230)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc103)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc103)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc103)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc103)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc103)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc103)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc103)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc103)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc103)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc231)
    cir.scope {
      %19 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc227)
      %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc106)
      %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc106)
      cir.if %21 {
        %22 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc95)
        %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc95)
        cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc110)
      } else {
        %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
        cir.store %22, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc234)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc113)
        %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc113)
        %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
        %26 = cir.const #cir.int<0> : !s32i loc(#loc115)
        %27 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc116)
        cir.store %24, %27 : !s8i, !cir.ptr<!s8i> loc(#loc235)
      } loc(#loc233)
    } loc(#loc232)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc192)
      %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc237)
      %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc238)
      %22 = cir.get_global @__const.goodG2B1.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc192)
      cir.copy %22 to %19 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc192)
      %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc122)
      %24 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc123)
      %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc122)
      cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc239)
      cir.scope {
        %27 = cir.const #cir.int<0> : !s32i loc(#loc128)
        %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc128)
        cir.store %28, %20 : !u64i, !cir.ptr<!u64i> loc(#loc241)
        cir.for : cond {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc130)
          %30 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc131)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc132)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc132)
          %33 = cir.binop(add, %30, %32) : !u64i loc(#loc242)
          %34 = cir.cmp(lt, %29, %33) : !u64i, !cir.bool loc(#loc243)
          cir.condition(%34) loc(#loc133)
        } body {
          cir.scope {
            %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc135)
            %30 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc136)
            %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc136)
            %32 = cir.load %31 : !cir.ptr<!s8i>, !s8i loc(#loc136)
            %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
            %34 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc138)
            %35 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc139)
            cir.store %32, %35 : !s8i, !cir.ptr<!s8i> loc(#loc245)
          } loc(#loc244)
          cir.yield loc(#loc127)
        } step {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc141)
          %30 = cir.unary(inc, %29) : !u64i, !u64i loc(#loc142)
          cir.store %30, %20 : !u64i, !cir.ptr<!u64i> loc(#loc246)
          cir.yield loc(#loc240)
        } loc(#loc240)
      } loc(#loc240)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc144)
    } loc(#loc236)
    cir.return loc(#loc97)
  } loc(#loc228)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc248)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc249)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc150)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc150)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc150)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc150)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc150)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc250)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc150)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc150)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc249)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc152)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc152)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc152)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc152)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc152)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc152)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc152)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc152)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc152)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc250)
    cir.scope {
      %19 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc194)
      %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc155)
      %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc155)
      cir.if %21 {
        %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
        cir.store %22, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc253)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc159)
        %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc159)
        %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc160)
        %26 = cir.const #cir.int<0> : !s32i loc(#loc161)
        %27 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc162)
        cir.store %24, %27 : !s8i, !cir.ptr<!s8i> loc(#loc254)
      } loc(#loc252)
    } loc(#loc251)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc191)
      %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc256)
      %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc257)
      %22 = cir.get_global @__const.goodG2B2.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc191)
      cir.copy %22 to %19 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc191)
      %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc168)
      %24 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc169)
      %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc168)
      cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc258)
      cir.scope {
        %27 = cir.const #cir.int<0> : !s32i loc(#loc174)
        %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc174)
        cir.store %28, %20 : !u64i, !cir.ptr<!u64i> loc(#loc260)
        cir.for : cond {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc176)
          %30 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc177)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc178)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc178)
          %33 = cir.binop(add, %30, %32) : !u64i loc(#loc261)
          %34 = cir.cmp(lt, %29, %33) : !u64i, !cir.bool loc(#loc262)
          cir.condition(%34) loc(#loc179)
        } body {
          cir.scope {
            %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc181)
            %30 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc182)
            %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc182)
            %32 = cir.load %31 : !cir.ptr<!s8i>, !s8i loc(#loc182)
            %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc183)
            %34 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc184)
            %35 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc185)
            cir.store %32, %35 : !s8i, !cir.ptr<!s8i> loc(#loc264)
          } loc(#loc263)
          cir.yield loc(#loc173)
        } step {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc187)
          %30 = cir.unary(inc, %29) : !u64i, !u64i loc(#loc188)
          cir.store %30, %20 : !u64i, !cir.ptr<!u64i> loc(#loc265)
          cir.yield loc(#loc259)
        } loc(#loc259)
      } loc(#loc259)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc189)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc190)
    } loc(#loc255)
    cir.return loc(#loc146)
  } loc(#loc247)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":104:9)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":104:29)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":77:9)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":77:29)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":41:9)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":41:29)
#loc7 = loc("../../../testcasesupport/std_testcase.h":116:1)
#loc8 = loc("../../../testcasesupport/std_testcase.h":116:12)
#loc9 = loc("/usr/include/string.h":407:1)
#loc10 = loc("/usr/include/string.h":408:33)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":28:1)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":52:1)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":30:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":30:12)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":31:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":31:36)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":32:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":32:37)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":33:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":39:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":33:8)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":34:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":37:16)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":37:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":38:19)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":38:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":38:14)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":38:15)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":40:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":51:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":42:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":42:16)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":42:19)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":43:21)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":43:28)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":43:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":43:34)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":46:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":49:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":46:18)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":46:14)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":46:21)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":46:25)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":46:37)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":46:23)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":47:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":48:30)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":48:23)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":48:13)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":48:18)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":48:19)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":48:31)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":46:41)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":46:40)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":50:19)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":50:9)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":117:1)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":121:1)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":119:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":119:14)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":120:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":120:14)
#loc65 = loc("/usr/include/stdlib.h":575:1)
#loc66 = loc("/usr/include/stdlib.h":575:41)
#loc67 = loc("/usr/include/time.h":76:1)
#loc68 = loc("/usr/include/time.h":76:38)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":138:15)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":140:15)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":143:15)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":145:15)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":133:1)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":148:1)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":134:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":136:27)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":136:22)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":136:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":138:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":139:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":139:73)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":140:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":143:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":144:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":144:72)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":145:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":147:12)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":147:5)
#loc93 = loc("../../../testcasesupport/std_testcase.h":117:1)
#loc94 = loc("../../../testcasesupport/std_testcase.h":117:12)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":67:19)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":59:1)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":88:1)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":61:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":61:12)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":62:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":62:36)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":63:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":63:37)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":64:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":75:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":64:8)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":65:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":68:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":70:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":67:9)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":73:16)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":73:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":74:19)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":74:9)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":74:14)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":74:15)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":76:5)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":87:5)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":78:9)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":78:16)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":78:19)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":79:21)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":79:28)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":79:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":79:34)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":82:9)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":85:9)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":82:18)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":82:14)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":82:21)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":82:25)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":82:37)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":82:23)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":83:9)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":84:30)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":84:23)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":84:13)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":84:18)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":84:19)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":84:31)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":82:41)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":82:40)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":86:19)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":86:9)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":91:1)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":115:1)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":93:5)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":93:12)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":94:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":94:36)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":95:5)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":95:37)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":96:5)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":102:5)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":96:8)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":97:5)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":100:16)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":100:9)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":101:19)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":101:9)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":101:14)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":101:15)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":103:5)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":114:5)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":105:9)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":105:16)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":105:19)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":106:21)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":106:28)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":106:9)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":106:34)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":109:9)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":112:9)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":109:18)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":109:14)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":109:21)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":109:25)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":109:37)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":109:23)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":110:9)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":111:30)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":111:23)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":111:13)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":111:18)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":111:19)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":111:31)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":109:41)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":109:40)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":113:19)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c":113:9)
#loc191 = loc(fused[#loc1, #loc2])
#loc192 = loc(fused[#loc3, #loc4])
#loc193 = loc(fused[#loc5, #loc6])
#loc194 = loc(fused[#loc7, #loc8])
#loc195 = loc(fused[#loc9, #loc10])
#loc196 = loc(fused[#loc11, #loc12])
#loc197 = loc(fused[#loc13, #loc14])
#loc198 = loc(fused[#loc15, #loc16])
#loc199 = loc(fused[#loc17, #loc18])
#loc200 = loc(fused[#loc19, #loc20])
#loc201 = loc(fused[#loc21, #loc22])
#loc202 = loc(fused[#loc24, #loc22])
#loc203 = loc(fused[#loc26, #loc25])
#loc204 = loc(fused[#loc28, #loc27])
#loc205 = loc(fused[#loc31, #loc32])
#loc206 = loc(fused[#loc33, #loc34])
#loc207 = loc(fused[#loc33, #loc35])
#loc208 = loc(fused[#loc38, #loc39])
#loc209 = loc(fused[#loc40, #loc41])
#loc210 = loc(fused[#loc43, #loc42])
#loc211 = loc(fused[#loc45, #loc46])
#loc212 = loc(fused[#loc44, #loc46])
#loc213 = loc(fused[#loc48, #loc41])
#loc214 = loc(fused[#loc51, #loc54])
#loc215 = loc(fused[#loc56, #loc55])
#loc216 = loc(fused[#loc59, #loc60])
#loc217 = loc(fused[#loc61, #loc62])
#loc218 = loc(fused[#loc63, #loc64])
#loc219 = loc(fused[#loc65, #loc66])
#loc220 = loc(fused[#loc67, #loc68])
#loc221 = loc(fused[#loc73, #loc74])
#loc224 = loc(fused[#loc84, #loc85])
#loc225 = loc(fused[#loc88, #loc89])
#loc226 = loc(fused[#loc92, #loc91])
#loc227 = loc(fused[#loc93, #loc94])
#loc228 = loc(fused[#loc96, #loc97])
#loc229 = loc(fused[#loc98, #loc99])
#loc230 = loc(fused[#loc100, #loc101])
#loc231 = loc(fused[#loc102, #loc103])
#loc232 = loc(fused[#loc104, #loc105])
#loc233 = loc(fused[#loc107, #loc108, #loc109, #loc105])
#loc234 = loc(fused[#loc112, #loc111])
#loc235 = loc(fused[#loc114, #loc113])
#loc236 = loc(fused[#loc117, #loc118])
#loc237 = loc(fused[#loc119, #loc120])
#loc238 = loc(fused[#loc119, #loc121])
#loc239 = loc(fused[#loc124, #loc125])
#loc240 = loc(fused[#loc126, #loc127])
#loc241 = loc(fused[#loc129, #loc128])
#loc242 = loc(fused[#loc131, #loc132])
#loc243 = loc(fused[#loc130, #loc132])
#loc244 = loc(fused[#loc134, #loc127])
#loc245 = loc(fused[#loc137, #loc140])
#loc246 = loc(fused[#loc142, #loc141])
#loc247 = loc(fused[#loc145, #loc146])
#loc248 = loc(fused[#loc147, #loc148])
#loc249 = loc(fused[#loc149, #loc150])
#loc250 = loc(fused[#loc151, #loc152])
#loc251 = loc(fused[#loc153, #loc154])
#loc252 = loc(fused[#loc156, #loc154])
#loc253 = loc(fused[#loc158, #loc157])
#loc254 = loc(fused[#loc160, #loc159])
#loc255 = loc(fused[#loc163, #loc164])
#loc256 = loc(fused[#loc165, #loc166])
#loc257 = loc(fused[#loc165, #loc167])
#loc258 = loc(fused[#loc170, #loc171])
#loc259 = loc(fused[#loc172, #loc173])
#loc260 = loc(fused[#loc175, #loc174])
#loc261 = loc(fused[#loc177, #loc178])
#loc262 = loc(fused[#loc176, #loc178])
#loc263 = loc(fused[#loc180, #loc173])
#loc264 = loc(fused[#loc183, #loc186])
#loc265 = loc(fused[#loc188, #loc187])
