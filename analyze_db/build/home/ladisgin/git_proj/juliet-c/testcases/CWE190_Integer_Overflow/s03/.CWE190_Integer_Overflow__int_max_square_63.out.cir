!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":24:58)
#loc6 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":24:64)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":39:62)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":39:68)
#loc39 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":50:62)
#loc40 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":50:68)
#true = #cir.bool<true> : !cir.bool
#loc66 = loc(fused[#loc5, #loc6])
#loc71 = loc(fused[#loc20, #loc21])
#loc77 = loc(fused[#loc39, #loc40])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_63b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc64)
  cir.func @CWE190_Integer_Overflow__int_max_square_63b_badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc66)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc67)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc9)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc8)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc67)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc69)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc15)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc69)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc16)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc17)
    } loc(#loc68)
    cir.return loc(#loc4)
  } loc(#loc65)
  cir.func @CWE190_Integer_Overflow__int_max_square_63b_goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc20, #loc21])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc71)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc72)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc24)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc23)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc74)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc30)
      %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc30)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc74)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc31)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc32)
    } loc(#loc73)
    cir.return loc(#loc19)
  } loc(#loc70)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc33)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc36)
  cir.func @CWE190_Integer_Overflow__int_max_square_63b_goodB2GSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc39, #loc40])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc77)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc78)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc43)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc78)
    cir.scope {
      %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc47)
      %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc48)
      %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc48)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc48)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc48)
      %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc80)
      %10 = cir.ternary(%9, true {
        %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc50)
        %12 = cir.abs %11 poison : !s32i loc(#loc51)
        %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc51)
        %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc52)
        %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc53)
        %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc53)
        %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc52)
        %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc52)
        %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc81)
        %20 = cir.ternary(%19, true {
          %21 = cir.const #true loc(#loc49)
          cir.yield %21 : !cir.bool loc(#loc49)
        }, false {
          %21 = cir.const #false loc(#loc49)
          cir.yield %21 : !cir.bool loc(#loc49)
        }) : (!cir.bool) -> !cir.bool loc(#loc49)
        cir.yield %20 : !cir.bool loc(#loc49)
      }, false {
        %11 = cir.const #false loc(#loc49)
        cir.yield %11 : !cir.bool loc(#loc49)
      }) : (!cir.bool) -> !cir.bool loc(#loc49)
      cir.if %10 {
        %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc83)
        %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc60)
        %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc59)
        %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc60)
        cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc83)
        %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc61)
        cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc62)
      } else {
        %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc36)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc36)
        cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc63)
      } loc(#loc82)
    } loc(#loc79)
    cir.return loc(#loc38)
  } loc(#loc76)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_63b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":32:1)
#loc7 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":26:5)
#loc8 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":26:17)
#loc9 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":25:1)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":26:16)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":27:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":31:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":29:9)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":29:29)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":29:22)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":30:22)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":30:9)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":39:1)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":47:1)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":41:5)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":41:17)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":40:1)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":41:16)
#loc26 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":42:5)
#loc27 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":46:5)
#loc28 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":44:9)
#loc29 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":44:29)
#loc30 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":44:22)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":45:22)
#loc32 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":45:9)
#loc33 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":61:19)
#loc37 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":50:1)
#loc38 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":63:1)
#loc41 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":52:5)
#loc42 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":52:17)
#loc43 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":51:1)
#loc44 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":52:16)
#loc45 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":54:5)
#loc46 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":62:5)
#loc47 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":54:9)
#loc48 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":54:16)
#loc49 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":54:24)
#loc50 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":54:31)
#loc51 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":54:27)
#loc52 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":54:45)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":54:58)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":54:65)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":55:5)
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":58:5)
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":60:5)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":56:9)
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":56:29)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":56:22)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":57:22)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":57:9)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_63b.c":61:9)
#loc64 = loc(fused[#loc1, #loc2])
#loc65 = loc(fused[#loc3, #loc4])
#loc67 = loc(fused[#loc7, #loc8])
#loc68 = loc(fused[#loc11, #loc12])
#loc69 = loc(fused[#loc13, #loc14])
#loc70 = loc(fused[#loc18, #loc19])
#loc72 = loc(fused[#loc22, #loc23])
#loc73 = loc(fused[#loc26, #loc27])
#loc74 = loc(fused[#loc28, #loc29])
#loc75 = loc(fused[#loc34, #loc35])
#loc76 = loc(fused[#loc37, #loc38])
#loc78 = loc(fused[#loc41, #loc42])
#loc79 = loc(fused[#loc45, #loc46])
#loc80 = loc(fused[#loc47, #loc48])
#loc81 = loc(fused[#loc51, #loc54])
#loc82 = loc(fused[#loc55, #loc56, #loc57, #loc46])
#loc83 = loc(fused[#loc58, #loc59])
