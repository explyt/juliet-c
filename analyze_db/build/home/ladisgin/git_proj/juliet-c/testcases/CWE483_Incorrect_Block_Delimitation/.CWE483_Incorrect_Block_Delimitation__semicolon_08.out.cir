!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc52 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":122:10)
#loc53 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":122:14)
#loc54 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":122:20)
#loc55 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":122:32)
#loc164 = loc(fused[#loc52, #loc53])
#loc165 = loc(fused[#loc54, #loc55])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE483_Incorrect_Block_Delimitation/CWE483_Incorrect_Block_Delimitation__semicolon_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc142)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc143)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"x == 0\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"x was 0\0A\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE483_Incorrect_Block_Delimitation__semicolon_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc145)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64} loc(#loc146)
    cir.br ^bb1 loc(#loc147)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc148)
    %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc15)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %4 ^bb2, ^bb15 loc(#loc149)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc150)
  ^bb3:  // pred: ^bb2
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %6 = cir.const #cir.int<3> : !s32i loc(#loc21)
    %7 = cir.binop(rem, %5, %6) : !s32i loc(#loc151)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc12)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc146)
    cir.br ^bb4 loc(#loc152)
  ^bb4:  // pred: ^bb3
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %10 = cir.const #cir.int<0> : !s32i loc(#loc25)
    %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc153)
    cir.brcond %11 ^bb5, ^bb6 loc(#loc23)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc23)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc23)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc154)
  ^bb8:  // pred: ^bb7
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc5)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc28)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc29)
    cir.store %14, %1 : !s32i, !cir.ptr<!s32i> loc(#loc155)
    cir.br ^bb9 loc(#loc27)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc156)
  ^bb10:  // pred: ^bb9
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc33)
    cir.brcond %16 ^bb11, ^bb12 loc(#loc157)
  ^bb11:  // pred: ^bb10
    %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc6)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc6)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc35)
    cir.br ^bb12 loc(#loc32)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc32)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc19)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc14)
  ^bb15:  // 2 preds: ^bb1, ^bb14
    cir.br ^bb16 loc(#loc14)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc8)
  } loc(#loc144)
  cir.func no_proto @CWE483_Incorrect_Block_Delimitation__semicolon_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc159)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc160)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc37)
  } loc(#loc158)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc161)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc162)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc49)
  cir.func @main(%arg0: !s32i loc(fused[#loc52, #loc53]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc54, #loc55])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc165)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc51)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc56)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc56)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc57)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc58)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc58)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc59)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc46)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %8 = cir.get_global @CWE483_Incorrect_Block_Delimitation__semicolon_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc166)
    cir.call @CWE483_Incorrect_Block_Delimitation__semicolon_08_good() : () -> () loc(#loc61)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc47)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc48)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %13 = cir.get_global @CWE483_Incorrect_Block_Delimitation__semicolon_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc167)
    cir.call @CWE483_Incorrect_Block_Delimitation__semicolon_08_bad() : () -> () loc(#loc65)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc49)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc68)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc168)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc168)
    cir.return %17 : !s32i loc(#loc168)
  } loc(#loc163)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc71)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc72)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc170)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc170)
    cir.return %2 : !s32i loc(#loc170)
  } loc(#loc169)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc74)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc172)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64} loc(#loc173)
    cir.br ^bb1 loc(#loc174)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc175)
    %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc83)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc83)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc176)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc74)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    cir.br ^bb14 loc(#loc86)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc177)
  ^bb4:  // pred: ^bb3
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
    %8 = cir.const #cir.int<3> : !s32i loc(#loc92)
    %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc178)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    %10 = cir.const #cir.int<0> : !s32i loc(#loc80)
    cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc173)
    cir.br ^bb5 loc(#loc179)
  ^bb5:  // pred: ^bb4
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc96)
    %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc180)
    cir.brcond %13 ^bb6, ^bb7 loc(#loc181)
  ^bb6:  // pred: ^bb5
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc98)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc98)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc100)
    cir.store %16, %1 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    cir.br ^bb7 loc(#loc94)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc94)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc183)
  ^bb9:  // pred: ^bb8
    %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc104)
    cir.brcond %18 ^bb10, ^bb11 loc(#loc184)
  ^bb10:  // pred: ^bb9
    %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc106)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc106)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    cir.br ^bb11 loc(#loc103)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc103)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc90)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc82)
  ^bb14:  // 2 preds: ^bb2, ^bb13
    cir.br ^bb15 loc(#loc82)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc76)
  } loc(#loc171)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc109)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc110)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc186)
    cir.return %2 : !s32i loc(#loc186)
  } loc(#loc185)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc188)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64} loc(#loc189)
    cir.br ^bb1 loc(#loc190)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc191)
    %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc120)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc120)
    cir.brcond %4 ^bb2, ^bb13 loc(#loc192)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc193)
  ^bb3:  // pred: ^bb2
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc125)
    %6 = cir.const #cir.int<3> : !s32i loc(#loc126)
    %7 = cir.binop(rem, %5, %6) : !s32i loc(#loc194)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc117)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    cir.br ^bb4 loc(#loc195)
  ^bb4:  // pred: ^bb3
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    %10 = cir.const #cir.int<0> : !s32i loc(#loc130)
    %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc196)
    cir.brcond %11 ^bb5, ^bb6 loc(#loc197)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc132)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc132)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc133)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc134)
    cir.store %14, %1 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    cir.br ^bb6 loc(#loc128)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc128)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc199)
  ^bb8:  // pred: ^bb7
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc138)
    cir.brcond %16 ^bb9, ^bb10 loc(#loc200)
  ^bb9:  // pred: ^bb8
    %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc140)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc140)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc141)
    cir.br ^bb10 loc(#loc137)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc137)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc124)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc119)
  ^bb13:  // 2 preds: ^bb1, ^bb12
    cir.br ^bb14 loc(#loc119)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc113)
  } loc(#loc187)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE483_Incorrect_Block_Delimitation/CWE483_Incorrect_Block_Delimitation__semicolon_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":43:27)
#loc6 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":48:27)
#loc7 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":33:1)
#loc8 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":52:1)
#loc9 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":38:13)
#loc10 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":38:32)
#loc11 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":39:13)
#loc12 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":39:21)
#loc13 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":35:5)
#loc14 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":51:5)
#loc15 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":35:8)
#loc16 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":35:26)
#loc17 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":36:5)
#loc18 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":37:9)
#loc19 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":50:9)
#loc20 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":38:22)
#loc21 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":38:31)
#loc22 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":41:13)
#loc23 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":41:24)
#loc24 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":41:17)
#loc25 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":41:22)
#loc26 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":42:13)
#loc27 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":45:13)
#loc28 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":43:17)
#loc29 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":44:21)
#loc30 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":44:17)
#loc31 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":46:13)
#loc32 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":49:13)
#loc33 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":46:17)
#loc34 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":47:13)
#loc35 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":48:17)
#loc36 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":107:1)
#loc37 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":111:1)
#loc38 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":109:5)
#loc39 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":109:11)
#loc40 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":110:5)
#loc41 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":110:11)
#loc42 = loc("/usr/include/stdlib.h":575:1)
#loc43 = loc("/usr/include/stdlib.h":575:41)
#loc44 = loc("/usr/include/time.h":76:1)
#loc45 = loc("/usr/include/time.h":76:38)
#loc46 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":127:15)
#loc47 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":129:15)
#loc48 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":132:15)
#loc49 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":134:15)
#loc50 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":122:1)
#loc51 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":137:1)
#loc56 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":123:1)
#loc57 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":125:27)
#loc58 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":125:22)
#loc59 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":125:5)
#loc60 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":127:5)
#loc61 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":128:5)
#loc62 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":128:60)
#loc63 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":129:5)
#loc64 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":132:5)
#loc65 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":133:5)
#loc66 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":133:59)
#loc67 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":134:5)
#loc68 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":136:12)
#loc69 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":136:5)
#loc70 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":21:1)
#loc71 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":24:1)
#loc72 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":23:12)
#loc73 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":23:5)
#loc74 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":64:19)
#loc75 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":59:1)
#loc76 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":83:1)
#loc77 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":69:13)
#loc78 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":69:32)
#loc79 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":70:13)
#loc80 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":70:21)
#loc81 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":61:5)
#loc82 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":82:5)
#loc83 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":61:8)
#loc84 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":61:27)
#loc85 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":62:5)
#loc86 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":65:5)
#loc87 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":67:5)
#loc88 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":64:9)
#loc89 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":68:9)
#loc90 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":81:9)
#loc91 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":69:22)
#loc92 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":69:31)
#loc93 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":72:13)
#loc94 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":76:13)
#loc95 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":72:17)
#loc96 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":72:22)
#loc97 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":73:13)
#loc98 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":74:27)
#loc99 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":74:17)
#loc100 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":75:21)
#loc101 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":75:17)
#loc102 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":77:13)
#loc103 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":80:13)
#loc104 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":77:17)
#loc105 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":78:13)
#loc106 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":79:27)
#loc107 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":79:17)
#loc108 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":26:1)
#loc109 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":29:1)
#loc110 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":28:12)
#loc111 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":28:5)
#loc112 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":86:1)
#loc113 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":105:1)
#loc114 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":91:13)
#loc115 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":91:32)
#loc116 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":92:13)
#loc117 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":92:21)
#loc118 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":88:5)
#loc119 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":104:5)
#loc120 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":88:8)
#loc121 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":88:26)
#loc122 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":89:5)
#loc123 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":90:9)
#loc124 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":103:9)
#loc125 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":91:22)
#loc126 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":91:31)
#loc127 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":94:13)
#loc128 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":98:13)
#loc129 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":94:17)
#loc130 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":94:22)
#loc131 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":95:13)
#loc132 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":96:27)
#loc133 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":96:17)
#loc134 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":97:21)
#loc135 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":97:17)
#loc136 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":99:13)
#loc137 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":102:13)
#loc138 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":99:17)
#loc139 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":100:13)
#loc140 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":101:27)
#loc141 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_08.c":101:17)
#loc142 = loc(fused[#loc1, #loc2])
#loc143 = loc(fused[#loc3, #loc4])
#loc144 = loc(fused[#loc7, #loc8])
#loc145 = loc(fused[#loc9, #loc10])
#loc146 = loc(fused[#loc11, #loc12])
#loc147 = loc(fused[#loc13, #loc14])
#loc148 = loc(fused[#loc15, #loc16])
#loc149 = loc(fused[#loc17, #loc14])
#loc150 = loc(fused[#loc18, #loc19])
#loc151 = loc(fused[#loc20, #loc21])
#loc152 = loc(fused[#loc22, #loc23])
#loc153 = loc(fused[#loc24, #loc25])
#loc154 = loc(fused[#loc26, #loc27])
#loc155 = loc(fused[#loc30, #loc29])
#loc156 = loc(fused[#loc31, #loc32])
#loc157 = loc(fused[#loc34, #loc32])
#loc158 = loc(fused[#loc36, #loc37])
#loc159 = loc(fused[#loc38, #loc39])
#loc160 = loc(fused[#loc40, #loc41])
#loc161 = loc(fused[#loc42, #loc43])
#loc162 = loc(fused[#loc44, #loc45])
#loc163 = loc(fused[#loc50, #loc51])
#loc166 = loc(fused[#loc61, #loc62])
#loc167 = loc(fused[#loc65, #loc66])
#loc168 = loc(fused[#loc69, #loc68])
#loc169 = loc(fused[#loc70, #loc71])
#loc170 = loc(fused[#loc73, #loc72])
#loc171 = loc(fused[#loc75, #loc76])
#loc172 = loc(fused[#loc77, #loc78])
#loc173 = loc(fused[#loc79, #loc80])
#loc174 = loc(fused[#loc81, #loc82])
#loc175 = loc(fused[#loc83, #loc84])
#loc176 = loc(fused[#loc85, #loc86, #loc87, #loc82])
#loc177 = loc(fused[#loc89, #loc90])
#loc178 = loc(fused[#loc91, #loc92])
#loc179 = loc(fused[#loc93, #loc94])
#loc180 = loc(fused[#loc95, #loc96])
#loc181 = loc(fused[#loc97, #loc94])
#loc182 = loc(fused[#loc101, #loc100])
#loc183 = loc(fused[#loc102, #loc103])
#loc184 = loc(fused[#loc105, #loc103])
#loc185 = loc(fused[#loc108, #loc109])
#loc186 = loc(fused[#loc111, #loc110])
#loc187 = loc(fused[#loc112, #loc113])
#loc188 = loc(fused[#loc114, #loc115])
#loc189 = loc(fused[#loc116, #loc117])
#loc190 = loc(fused[#loc118, #loc119])
#loc191 = loc(fused[#loc120, #loc121])
#loc192 = loc(fused[#loc122, #loc119])
#loc193 = loc(fused[#loc123, #loc124])
#loc194 = loc(fused[#loc125, #loc126])
#loc195 = loc(fused[#loc127, #loc128])
#loc196 = loc(fused[#loc129, #loc130])
#loc197 = loc(fused[#loc131, #loc128])
#loc198 = loc(fused[#loc135, #loc134])
#loc199 = loc(fused[#loc136, #loc137])
#loc200 = loc(fused[#loc139, #loc137])
