!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":115:10)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":115:14)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":115:20)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":115:32)
#loc168 = loc(fused[#loc53, #loc54])
#loc169 = loc(fused[#loc55, #loc56])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printUnsignedLine(!u32i) loc(#loc146)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_square_32_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc148)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc149)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc150)
    %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc151)
    %4 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc152)
    %5 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc153)
    cir.store %3, %4 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc152)
    cir.store %3, %5 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc153)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc17)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc17)
    cir.store %7, %3 : !u32i, !cir.ptr<!u32i> loc(#loc154)
    cir.br ^bb1 loc(#loc155)
  ^bb1:  // pred: ^bb0
    %8 = cir.load deref %4 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc6)
    %9 = cir.load %8 : !cir.ptr<!u32i>, !u32i loc(#loc21)
    cir.store %9, %0 : !u32i, !cir.ptr<!u32i> loc(#loc148)
    %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc22)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc22)
    %12 = cir.const #cir.int<2> : !u32i loc(#loc22)
    %13 = cir.binop(mul, %11, %12) : !u32i loc(#loc22)
    %14 = cir.const #cir.int<1> : !u32i loc(#loc22)
    %15 = cir.binop(add, %13, %14) : !u32i loc(#loc22)
    cir.store %15, %0 : !u32i, !cir.ptr<!u32i> loc(#loc156)
    %16 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc24)
    %17 = cir.load deref %4 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc25)
    cir.store %16, %17 : !u32i, !cir.ptr<!u32i> loc(#loc157)
    cir.br ^bb2 loc(#loc20)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc158)
  ^bb3:  // pred: ^bb2
    %18 = cir.load deref %5 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc8)
    %19 = cir.load %18 : !cir.ptr<!u32i>, !u32i loc(#loc29)
    cir.store %19, %1 : !u32i, !cir.ptr<!u32i> loc(#loc149)
    cir.br ^bb4 loc(#loc159)
  ^bb4:  // pred: ^bb3
    %20 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc32)
    %21 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc10)
    %22 = cir.binop(mul, %20, %21) : !u32i loc(#loc160)
    cir.store %22, %2 : !u32i, !cir.ptr<!u32i> loc(#loc150)
    %23 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc33)
    cir.call @printUnsignedLine(%23) : (!u32i) -> () loc(#loc34)
    cir.br ^bb5 loc(#loc31)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc28)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc4)
  } loc(#loc147)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_square_32_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc162)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc163)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc161)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc164)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc165)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc166)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc50)
  cir.func @main(%arg0: !s32i loc(fused[#loc53, #loc54]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc55, #loc56])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc168)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc169)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc52)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc57)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc58)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc59)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc59)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc60)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc47)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %8 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_max_square_32_good : !cir.ptr<!cir.func<!void ()>> loc(#loc170)
    cir.call @CWE190_Integer_Overflow__unsigned_int_max_square_32_good() : () -> () loc(#loc62)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc48)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc49)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %13 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_max_square_32_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc171)
    cir.call @CWE190_Integer_Overflow__unsigned_int_max_square_32_bad() : () -> () loc(#loc66)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc50)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc172)
    cir.return %17 : !s32i loc(#loc172)
  } loc(#loc167)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc174)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc175)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc176)
    %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc177)
    %4 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc178)
    %5 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc179)
    cir.store %3, %4 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc178)
    cir.store %3, %5 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc179)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc85)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc85)
    cir.store %7, %3 : !u32i, !cir.ptr<!u32i> loc(#loc180)
    cir.br ^bb1 loc(#loc181)
  ^bb1:  // pred: ^bb0
    %8 = cir.load deref %4 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc74)
    %9 = cir.load %8 : !cir.ptr<!u32i>, !u32i loc(#loc89)
    cir.store %9, %0 : !u32i, !cir.ptr<!u32i> loc(#loc174)
    %10 = cir.const #cir.int<2> : !s32i loc(#loc90)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc90)
    cir.store %11, %0 : !u32i, !cir.ptr<!u32i> loc(#loc182)
    %12 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc92)
    %13 = cir.load deref %4 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc93)
    cir.store %12, %13 : !u32i, !cir.ptr<!u32i> loc(#loc183)
    cir.br ^bb2 loc(#loc88)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc184)
  ^bb3:  // pred: ^bb2
    %14 = cir.load deref %5 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc76)
    %15 = cir.load %14 : !cir.ptr<!u32i>, !u32i loc(#loc97)
    cir.store %15, %1 : !u32i, !cir.ptr<!u32i> loc(#loc175)
    cir.br ^bb4 loc(#loc185)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc100)
    %17 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc78)
    %18 = cir.binop(mul, %16, %17) : !u32i loc(#loc186)
    cir.store %18, %2 : !u32i, !cir.ptr<!u32i> loc(#loc176)
    %19 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc101)
    cir.call @printUnsignedLine(%19) : (!u32i) -> () loc(#loc102)
    cir.br ^bb5 loc(#loc99)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc96)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc72)
  } loc(#loc173)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc104)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc188)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc189)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc190)
    %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc191)
    %4 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc192)
    %5 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc193)
    cir.store %3, %4 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc192)
    cir.store %3, %5 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc193)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc119)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc119)
    cir.store %7, %3 : !u32i, !cir.ptr<!u32i> loc(#loc194)
    cir.br ^bb1 loc(#loc195)
  ^bb1:  // pred: ^bb0
    %8 = cir.load deref %4 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc108)
    %9 = cir.load %8 : !cir.ptr<!u32i>, !u32i loc(#loc123)
    cir.store %9, %0 : !u32i, !cir.ptr<!u32i> loc(#loc188)
    %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc124)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc124)
    %12 = cir.const #cir.int<2> : !u32i loc(#loc124)
    %13 = cir.binop(mul, %11, %12) : !u32i loc(#loc124)
    %14 = cir.const #cir.int<1> : !u32i loc(#loc124)
    %15 = cir.binop(add, %13, %14) : !u32i loc(#loc124)
    cir.store %15, %0 : !u32i, !cir.ptr<!u32i> loc(#loc196)
    %16 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc126)
    %17 = cir.load deref %4 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc127)
    cir.store %16, %17 : !u32i, !cir.ptr<!u32i> loc(#loc197)
    cir.br ^bb2 loc(#loc122)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc198)
  ^bb3:  // pred: ^bb2
    %18 = cir.load deref %5 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc110)
    %19 = cir.load %18 : !cir.ptr<!u32i>, !u32i loc(#loc131)
    cir.store %19, %1 : !u32i, !cir.ptr<!u32i> loc(#loc189)
    cir.br ^bb4 loc(#loc199)
  ^bb4:  // pred: ^bb3
    %20 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc134)
    %21 = cir.cast(integral, %20 : !u32i), !s64i loc(#loc134)
    %22 = cir.cast(integral, %21 : !s64i), !s32i loc(#loc134)
    %23 = cir.abs %22 poison : !s32i loc(#loc135)
    %24 = cir.cast(integral, %23 : !s32i), !s64i loc(#loc135)
    %25 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc136)
    %26 = cir.const #cir.int<2147483647> : !s32i loc(#loc137)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc137)
    %28 = cir.const #cir.int<2> : !u32i loc(#loc137)
    %29 = cir.binop(mul, %27, %28) : !u32i loc(#loc137)
    %30 = cir.const #cir.int<1> : !u32i loc(#loc137)
    %31 = cir.binop(add, %29, %30) : !u32i loc(#loc137)
    %32 = cir.cast(int_to_float, %31 : !u32i), !cir.double loc(#loc137)
    %33 = cir.call @sqrt(%32) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc136)
    %34 = cir.cast(float_to_int, %33 : !cir.double), !s64i loc(#loc136)
    %35 = cir.cmp(lt, %24, %34) : !s64i, !cir.bool loc(#loc200)
    cir.brcond %35 ^bb5, ^bb6 loc(#loc201)
  ^bb5:  // pred: ^bb4
    %36 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc142)
    %37 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc112)
    %38 = cir.binop(mul, %36, %37) : !u32i loc(#loc202)
    cir.store %38, %2 : !u32i, !cir.ptr<!u32i> loc(#loc190)
    %39 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc143)
    cir.call @printUnsignedLine(%39) : (!u32i) -> () loc(#loc144)
    cir.br ^bb7 loc(#loc140)
  ^bb6:  // pred: ^bb4
    %40 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc104)
    %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc104)
    cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc145)
    cir.br ^bb7 loc(#loc133)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc133)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc130)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc106)
  } loc(#loc187)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_32.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc3 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":44:1)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":31:9)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":31:30)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":37:9)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":37:30)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":40:13)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":40:42)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":26:5)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":26:18)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":27:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":27:31)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":28:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":28:31)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":29:12)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":29:5)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":30:5)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":35:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":31:29)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":33:16)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":33:9)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":34:21)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":34:10)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":34:9)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":36:5)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":43:5)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":37:29)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":38:9)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":42:9)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":40:35)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":41:31)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":41:13)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":101:1)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":105:1)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":103:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":103:13)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":104:5)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":104:13)
#loc41 = loc("/usr/include/stdlib.h":575:1)
#loc42 = loc("/usr/include/stdlib.h":575:41)
#loc43 = loc("/usr/include/time.h":76:1)
#loc44 = loc("/usr/include/time.h":76:38)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":120:15)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":122:15)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":125:15)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":127:15)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":115:1)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":130:1)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":116:1)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":118:27)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":118:22)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":118:5)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":120:5)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":121:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":121:62)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":122:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":125:5)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":126:5)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":126:61)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":127:5)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":129:12)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":129:5)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":51:1)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":71:1)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":58:9)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":58:30)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":64:9)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":64:30)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":67:13)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":67:42)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":53:5)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":53:18)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":54:5)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":54:31)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":55:5)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":55:31)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":56:12)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":56:5)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":57:5)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":62:5)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":58:29)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":60:16)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":60:9)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":61:21)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":61:10)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":61:9)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":63:5)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":70:5)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":64:29)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":65:9)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":69:9)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":67:35)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":68:31)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":68:13)
#loc103 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":96:23)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":74:1)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":99:1)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":81:9)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":81:30)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":87:9)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":87:30)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":91:13)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":91:42)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":76:5)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":76:18)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":77:5)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":77:31)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":78:5)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":78:31)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":79:12)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":79:5)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":80:5)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":85:5)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":81:29)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":83:16)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":83:9)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":84:21)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":84:10)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":84:9)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":86:5)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":98:5)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":87:29)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":89:9)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":97:9)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":89:23)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":89:13)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":89:37)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":89:50)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":89:58)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":90:9)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":93:9)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":95:9)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":91:35)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":92:31)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":92:13)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_32.c":96:13)
#loc146 = loc(fused[#loc1, #loc2])
#loc147 = loc(fused[#loc3, #loc4])
#loc148 = loc(fused[#loc5, #loc6])
#loc149 = loc(fused[#loc7, #loc8])
#loc150 = loc(fused[#loc9, #loc10])
#loc151 = loc(fused[#loc11, #loc12])
#loc152 = loc(fused[#loc13, #loc14])
#loc153 = loc(fused[#loc15, #loc16])
#loc154 = loc(fused[#loc18, #loc17])
#loc155 = loc(fused[#loc19, #loc20])
#loc156 = loc(fused[#loc23, #loc22])
#loc157 = loc(fused[#loc26, #loc24])
#loc158 = loc(fused[#loc27, #loc28])
#loc159 = loc(fused[#loc30, #loc31])
#loc160 = loc(fused[#loc32, #loc10])
#loc161 = loc(fused[#loc35, #loc36])
#loc162 = loc(fused[#loc37, #loc38])
#loc163 = loc(fused[#loc39, #loc40])
#loc164 = loc(fused[#loc41, #loc42])
#loc165 = loc(fused[#loc43, #loc44])
#loc166 = loc(fused[#loc45, #loc46])
#loc167 = loc(fused[#loc51, #loc52])
#loc170 = loc(fused[#loc62, #loc63])
#loc171 = loc(fused[#loc66, #loc67])
#loc172 = loc(fused[#loc70, #loc69])
#loc173 = loc(fused[#loc71, #loc72])
#loc174 = loc(fused[#loc73, #loc74])
#loc175 = loc(fused[#loc75, #loc76])
#loc176 = loc(fused[#loc77, #loc78])
#loc177 = loc(fused[#loc79, #loc80])
#loc178 = loc(fused[#loc81, #loc82])
#loc179 = loc(fused[#loc83, #loc84])
#loc180 = loc(fused[#loc86, #loc85])
#loc181 = loc(fused[#loc87, #loc88])
#loc182 = loc(fused[#loc91, #loc90])
#loc183 = loc(fused[#loc94, #loc92])
#loc184 = loc(fused[#loc95, #loc96])
#loc185 = loc(fused[#loc98, #loc99])
#loc186 = loc(fused[#loc100, #loc78])
#loc187 = loc(fused[#loc105, #loc106])
#loc188 = loc(fused[#loc107, #loc108])
#loc189 = loc(fused[#loc109, #loc110])
#loc190 = loc(fused[#loc111, #loc112])
#loc191 = loc(fused[#loc113, #loc114])
#loc192 = loc(fused[#loc115, #loc116])
#loc193 = loc(fused[#loc117, #loc118])
#loc194 = loc(fused[#loc120, #loc119])
#loc195 = loc(fused[#loc121, #loc122])
#loc196 = loc(fused[#loc125, #loc124])
#loc197 = loc(fused[#loc128, #loc126])
#loc198 = loc(fused[#loc129, #loc130])
#loc199 = loc(fused[#loc132, #loc133])
#loc200 = loc(fused[#loc135, #loc138])
#loc201 = loc(fused[#loc139, #loc140, #loc141, #loc133])
#loc202 = loc(fused[#loc142, #loc112])
