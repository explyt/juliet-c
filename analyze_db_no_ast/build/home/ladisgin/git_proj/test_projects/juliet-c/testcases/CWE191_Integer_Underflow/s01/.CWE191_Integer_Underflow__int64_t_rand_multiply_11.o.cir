!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_rand_multiply_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrue(...) -> !s32i loc(#loc200)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc201)
  cir.func private  @printLongLongLine(!s64i) loc(#loc202)
  cir.func no_proto  @CWE191_Integer_Underflow__int64_t_rand_multiply_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc204)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc205)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc207)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc207)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc15)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc18)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc18)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc18)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc18)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc18)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc18)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc18)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc18)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc18)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc18)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc18)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc18)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc18)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc18)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc18)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc18)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc18)
          cir.yield %33 : !u64i loc(#loc18)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc18)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc18)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc18)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc18)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc18)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc18)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc18)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc18)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc18)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc18)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc18)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc18)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc18)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc18)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc18)
          %34 = cir.unary(minus, %33) : !u64i, !u64i loc(#loc18)
          %35 = cir.const #cir.int<1> : !s32i loc(#loc18)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc18)
          %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc18)
          cir.yield %37 : !u64i loc(#loc18)
        }) : (!cir.bool) -> !u64i loc(#loc18)
        %11 = cir.cast(integral, %10 : !u64i), !s64i loc(#loc18)
        cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc209)
      } loc(#loc208)
    } loc(#loc206)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc211)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc211)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc22)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc22)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc27)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc28)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc28)
          %9 = cir.cmp(lt, %6, %8) : !s64i, !s32i loc(#loc214)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc29)
          cir.if %10 {
            %11 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc216)
            %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc33)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc32)
            %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc32)
            %15 = cir.binop(mul, %12, %14) nsw : !s64i loc(#loc33)
            cir.store %15, %11 : !s64i, !cir.ptr<!s64i> loc(#loc216)
            %16 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc34)
            cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc35)
          } loc(#loc215)
        } loc(#loc213)
      } loc(#loc212)
    } loc(#loc210)
    cir.return loc(#loc8)
  } loc(#loc203)
  cir.func no_proto  @CWE191_Integer_Underflow__int64_t_rand_multiply_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    cir.return loc(#loc37)
  } loc(#loc217)
  cir.func no_proto private  @globalReturnsFalse(...) -> !s32i loc(#loc222)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc223)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc225)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc56)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc226)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc228)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc228)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc60)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc60)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc63)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc63)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc63)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc63)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc63)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc63)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc63)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc63)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc63)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc63)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc63)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc63)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc63)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc63)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc63)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc63)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc63)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc63)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc63)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc63)
          cir.yield %33 : !u64i loc(#loc63)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc63)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc63)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc63)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc63)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc63)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc63)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc63)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc63)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc63)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc63)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc63)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc63)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc63)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc63)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc63)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc63)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc63)
          %34 = cir.unary(minus, %33) : !u64i, !u64i loc(#loc63)
          %35 = cir.const #cir.int<1> : !s32i loc(#loc63)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc63)
          %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc63)
          cir.yield %37 : !u64i loc(#loc63)
        }) : (!cir.bool) -> !u64i loc(#loc63)
        %11 = cir.cast(integral, %10 : !u64i), !s64i loc(#loc63)
        cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc230)
      } loc(#loc229)
    } loc(#loc227)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc232)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc232)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc67)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc67)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc72)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc75)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc76)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc76)
          %9 = cir.cmp(lt, %6, %8) : !s64i, !s32i loc(#loc235)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc77)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc81)
              %12 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc82)
              %13 = cir.unary(minus, %12) : !s64i, !s64i loc(#loc82)
              %14 = cir.const #cir.int<1> : !s64i loc(#loc82)
              %15 = cir.binop(sub, %13, %14) nsw : !s64i loc(#loc82)
              %16 = cir.const #cir.int<2> : !s32i loc(#loc83)
              %17 = cir.cast(integral, %16 : !s32i), !s64i loc(#loc83)
              %18 = cir.binop(div, %15, %17) : !s64i loc(#loc238)
              %19 = cir.cmp(gt, %11, %18) : !s64i, !s32i loc(#loc239)
              %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc85)
              cir.if %20 {
                %21 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc241)
                %22 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc91)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc90)
                %24 = cir.cast(integral, %23 : !s32i), !s64i loc(#loc90)
                %25 = cir.binop(mul, %22, %24) nsw : !s64i loc(#loc91)
                cir.store %25, %21 : !s64i, !cir.ptr<!s64i> loc(#loc241)
                %26 = cir.load %21 : !cir.ptr<!s64i>, !s64i loc(#loc92)
                cir.call @printLongLongLine(%26) : (!s64i) -> () loc(#loc93)
              } else {
                %21 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc51)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc51)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc94)
              } loc(#loc240)
            } loc(#loc237)
          } loc(#loc236)
        } loc(#loc234)
      } loc(#loc233)
    } loc(#loc231)
    cir.return loc(#loc53)
  } loc(#loc224)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc243)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc99)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc244)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc246)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc246)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc103)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc103)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc106)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc106)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc106)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc106)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc106)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc106)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc106)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc106)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc106)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc106)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc106)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc106)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc106)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc106)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc106)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc106)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc106)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc106)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc106)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc106)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc106)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc106)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc106)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc106)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc106)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc106)
          cir.yield %33 : !u64i loc(#loc106)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc106)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc106)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc106)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc106)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc106)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc106)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc106)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc106)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc106)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc106)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc106)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc106)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc106)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc106)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc106)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc106)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc106)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc106)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc106)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc106)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc106)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc106)
          %34 = cir.unary(minus, %33) : !u64i, !u64i loc(#loc106)
          %35 = cir.const #cir.int<1> : !s32i loc(#loc106)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc106)
          %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc106)
          cir.yield %37 : !u64i loc(#loc106)
        }) : (!cir.bool) -> !u64i loc(#loc106)
        %11 = cir.cast(integral, %10 : !u64i), !s64i loc(#loc106)
        cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc248)
      } loc(#loc247)
    } loc(#loc245)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc250)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc250)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc110)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc110)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc115)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc116)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc116)
          %9 = cir.cmp(lt, %6, %8) : !s64i, !s32i loc(#loc253)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc117)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc121)
              %12 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc122)
              %13 = cir.unary(minus, %12) : !s64i, !s64i loc(#loc122)
              %14 = cir.const #cir.int<1> : !s64i loc(#loc122)
              %15 = cir.binop(sub, %13, %14) nsw : !s64i loc(#loc122)
              %16 = cir.const #cir.int<2> : !s32i loc(#loc123)
              %17 = cir.cast(integral, %16 : !s32i), !s64i loc(#loc123)
              %18 = cir.binop(div, %15, %17) : !s64i loc(#loc256)
              %19 = cir.cmp(gt, %11, %18) : !s64i, !s32i loc(#loc257)
              %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc125)
              cir.if %20 {
                %21 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc259)
                %22 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc131)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc130)
                %24 = cir.cast(integral, %23 : !s32i), !s64i loc(#loc130)
                %25 = cir.binop(mul, %22, %24) nsw : !s64i loc(#loc131)
                cir.store %25, %21 : !s64i, !cir.ptr<!s64i> loc(#loc259)
                %26 = cir.load %21 : !cir.ptr<!s64i>, !s64i loc(#loc132)
                cir.call @printLongLongLine(%26) : (!s64i) -> () loc(#loc133)
              } else {
                %21 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc134)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc134)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc135)
              } loc(#loc258)
            } loc(#loc255)
          } loc(#loc254)
        } loc(#loc252)
      } loc(#loc251)
    } loc(#loc249)
    cir.return loc(#loc96)
  } loc(#loc242)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc261)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc140)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc262)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc264)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc264)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc144)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc144)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc149)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc149)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc150)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc151)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc152)
        %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc152)
        cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc266)
      } loc(#loc265)
    } loc(#loc263)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc268)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc268)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc156)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc156)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc161)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc162)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc162)
          %9 = cir.cmp(lt, %6, %8) : !s64i, !s32i loc(#loc271)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc163)
          cir.if %10 {
            %11 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc273)
            %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc167)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc166)
            %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc166)
            %15 = cir.binop(mul, %12, %14) nsw : !s64i loc(#loc167)
            cir.store %15, %11 : !s64i, !cir.ptr<!s64i> loc(#loc273)
            %16 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc168)
            cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc169)
          } loc(#loc272)
        } loc(#loc270)
      } loc(#loc269)
    } loc(#loc267)
    cir.return loc(#loc137)
  } loc(#loc260)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc275)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc174)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc276)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc278)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc278)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc178)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc178)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc181)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc182)
        %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc182)
        cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc280)
      } loc(#loc279)
    } loc(#loc277)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc282)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc282)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc186)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc186)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc191)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc192)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc192)
          %9 = cir.cmp(lt, %6, %8) : !s64i, !s32i loc(#loc285)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc193)
          cir.if %10 {
            %11 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc287)
            %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc197)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc196)
            %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc196)
            %15 = cir.binop(mul, %12, %14) nsw : !s64i loc(#loc197)
            cir.store %15, %11 : !s64i, !cir.ptr<!s64i> loc(#loc287)
            %16 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc198)
            cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc199)
          } loc(#loc286)
        } loc(#loc284)
      } loc(#loc283)
    } loc(#loc281)
    cir.return loc(#loc171)
  } loc(#loc274)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":22:1)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":40:1)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":24:5)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":24:13)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":25:12)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":25:5)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":26:5)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":30:5)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":26:8)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":26:26)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":27:5)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":29:25)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":29:9)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":31:5)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":39:5)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":31:8)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":31:26)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":32:5)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":33:9)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":38:9)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":33:12)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":33:19)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":33:17)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":34:9)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":36:13)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":36:37)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":36:30)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":37:31)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":37:13)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":154:1)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":160:1)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":156:5)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":156:14)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":157:5)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":157:14)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":158:5)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":158:14)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":159:5)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":159:14)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":59:19)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":73:27)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":47:1)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":77:1)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":49:5)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":49:13)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":50:12)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":50:5)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":51:5)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":55:5)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":51:8)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":51:26)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":52:5)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":54:25)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":54:9)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":56:5)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":76:5)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":56:8)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":56:27)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":57:5)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":60:5)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":62:5)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":59:9)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":63:9)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":75:9)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":63:12)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":63:19)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":63:17)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":64:9)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":66:13)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":74:13)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":66:17)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":66:25)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":66:35)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":66:36)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":66:22)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":67:13)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":70:13)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":72:13)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":68:17)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":68:41)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":68:34)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":69:35)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":69:17)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":73:17)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":80:1)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":105:1)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":82:5)
#loc98 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":82:13)
#loc99 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":83:12)
#loc100 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":83:5)
#loc101 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":84:5)
#loc102 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":88:5)
#loc103 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":84:8)
#loc104 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":84:26)
#loc105 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":85:5)
#loc106 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":87:25)
#loc107 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":87:9)
#loc108 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":89:5)
#loc109 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":104:5)
#loc110 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":89:8)
#loc111 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":89:26)
#loc112 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":90:5)
#loc113 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":91:9)
#loc114 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":103:9)
#loc115 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":91:12)
#loc116 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":91:19)
#loc117 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":91:17)
#loc118 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":92:9)
#loc119 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":94:13)
#loc120 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":102:13)
#loc121 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":94:17)
#loc122 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":94:25)
#loc123 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":94:35)
#loc124 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":94:36)
#loc125 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":94:22)
#loc126 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":95:13)
#loc127 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":98:13)
#loc128 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":100:13)
#loc129 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":96:17)
#loc130 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":96:41)
#loc131 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":96:34)
#loc132 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":97:35)
#loc133 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":97:17)
#loc134 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":101:27)
#loc135 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":101:17)
#loc136 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":108:1)
#loc137 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":131:1)
#loc138 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":110:5)
#loc139 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":110:13)
#loc140 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":111:12)
#loc141 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":111:5)
#loc142 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":112:5)
#loc143 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":121:5)
#loc144 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":112:8)
#loc145 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":112:27)
#loc146 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":113:5)
#loc147 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":116:5)
#loc148 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":118:5)
#loc149 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":115:19)
#loc150 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":115:9)
#loc151 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":120:17)
#loc152 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":120:16)
#loc153 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":120:9)
#loc154 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":122:5)
#loc155 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":130:5)
#loc156 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":122:8)
#loc157 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":122:26)
#loc158 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":123:5)
#loc159 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":124:9)
#loc160 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":129:9)
#loc161 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":124:12)
#loc162 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":124:19)
#loc163 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":124:17)
#loc164 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":125:9)
#loc165 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":127:13)
#loc166 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":127:37)
#loc167 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":127:30)
#loc168 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":128:31)
#loc169 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":128:13)
#loc170 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":134:1)
#loc171 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":152:1)
#loc172 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":136:5)
#loc173 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":136:13)
#loc174 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":137:12)
#loc175 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":137:5)
#loc176 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":138:5)
#loc177 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":142:5)
#loc178 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":138:8)
#loc179 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":138:26)
#loc180 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":139:5)
#loc181 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":141:17)
#loc182 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":141:16)
#loc183 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":141:9)
#loc184 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":143:5)
#loc185 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":151:5)
#loc186 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":143:8)
#loc187 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":143:26)
#loc188 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":144:5)
#loc189 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":145:9)
#loc190 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":150:9)
#loc191 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":145:12)
#loc192 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":145:19)
#loc193 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":145:17)
#loc194 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":146:9)
#loc195 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":148:13)
#loc196 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":148:37)
#loc197 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":148:30)
#loc198 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":149:31)
#loc199 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_11.c":149:13)
#loc200 = loc(fused[#loc1, #loc2])
#loc201 = loc(fused[#loc3, #loc4])
#loc202 = loc(fused[#loc5, #loc6])
#loc203 = loc(fused[#loc7, #loc8])
#loc204 = loc(fused[#loc9, #loc10])
#loc205 = loc(fused[#loc12, #loc11])
#loc206 = loc(fused[#loc13, #loc14])
#loc207 = loc(fused[#loc15, #loc16])
#loc208 = loc(fused[#loc17, #loc14])
#loc209 = loc(fused[#loc19, #loc18])
#loc210 = loc(fused[#loc20, #loc21])
#loc211 = loc(fused[#loc22, #loc23])
#loc212 = loc(fused[#loc24, #loc21])
#loc213 = loc(fused[#loc25, #loc26])
#loc214 = loc(fused[#loc27, #loc28])
#loc215 = loc(fused[#loc30, #loc26])
#loc216 = loc(fused[#loc31, #loc32])
#loc217 = loc(fused[#loc36, #loc37])
#loc218 = loc(fused[#loc38, #loc39])
#loc219 = loc(fused[#loc40, #loc41])
#loc220 = loc(fused[#loc42, #loc43])
#loc221 = loc(fused[#loc44, #loc45])
#loc222 = loc(fused[#loc46, #loc47])
#loc223 = loc(fused[#loc48, #loc49])
#loc224 = loc(fused[#loc52, #loc53])
#loc225 = loc(fused[#loc54, #loc55])
#loc226 = loc(fused[#loc57, #loc56])
#loc227 = loc(fused[#loc58, #loc59])
#loc228 = loc(fused[#loc60, #loc61])
#loc229 = loc(fused[#loc62, #loc59])
#loc230 = loc(fused[#loc64, #loc63])
#loc231 = loc(fused[#loc65, #loc66])
#loc232 = loc(fused[#loc67, #loc68])
#loc233 = loc(fused[#loc69, #loc70, #loc71, #loc66])
#loc234 = loc(fused[#loc73, #loc74])
#loc235 = loc(fused[#loc75, #loc76])
#loc236 = loc(fused[#loc78, #loc74])
#loc237 = loc(fused[#loc79, #loc80])
#loc238 = loc(fused[#loc82, #loc83])
#loc239 = loc(fused[#loc81, #loc84])
#loc240 = loc(fused[#loc86, #loc87, #loc88, #loc80])
#loc241 = loc(fused[#loc89, #loc90])
#loc242 = loc(fused[#loc95, #loc96])
#loc243 = loc(fused[#loc97, #loc98])
#loc244 = loc(fused[#loc100, #loc99])
#loc245 = loc(fused[#loc101, #loc102])
#loc246 = loc(fused[#loc103, #loc104])
#loc247 = loc(fused[#loc105, #loc102])
#loc248 = loc(fused[#loc107, #loc106])
#loc249 = loc(fused[#loc108, #loc109])
#loc250 = loc(fused[#loc110, #loc111])
#loc251 = loc(fused[#loc112, #loc109])
#loc252 = loc(fused[#loc113, #loc114])
#loc253 = loc(fused[#loc115, #loc116])
#loc254 = loc(fused[#loc118, #loc114])
#loc255 = loc(fused[#loc119, #loc120])
#loc256 = loc(fused[#loc122, #loc123])
#loc257 = loc(fused[#loc121, #loc124])
#loc258 = loc(fused[#loc126, #loc127, #loc128, #loc120])
#loc259 = loc(fused[#loc129, #loc130])
#loc260 = loc(fused[#loc136, #loc137])
#loc261 = loc(fused[#loc138, #loc139])
#loc262 = loc(fused[#loc141, #loc140])
#loc263 = loc(fused[#loc142, #loc143])
#loc264 = loc(fused[#loc144, #loc145])
#loc265 = loc(fused[#loc146, #loc147, #loc148, #loc143])
#loc266 = loc(fused[#loc153, #loc151])
#loc267 = loc(fused[#loc154, #loc155])
#loc268 = loc(fused[#loc156, #loc157])
#loc269 = loc(fused[#loc158, #loc155])
#loc270 = loc(fused[#loc159, #loc160])
#loc271 = loc(fused[#loc161, #loc162])
#loc272 = loc(fused[#loc164, #loc160])
#loc273 = loc(fused[#loc165, #loc166])
#loc274 = loc(fused[#loc170, #loc171])
#loc275 = loc(fused[#loc172, #loc173])
#loc276 = loc(fused[#loc175, #loc174])
#loc277 = loc(fused[#loc176, #loc177])
#loc278 = loc(fused[#loc178, #loc179])
#loc279 = loc(fused[#loc180, #loc177])
#loc280 = loc(fused[#loc183, #loc181])
#loc281 = loc(fused[#loc184, #loc185])
#loc282 = loc(fused[#loc186, #loc187])
#loc283 = loc(fused[#loc188, #loc185])
#loc284 = loc(fused[#loc189, #loc190])
#loc285 = loc(fused[#loc191, #loc192])
#loc286 = loc(fused[#loc194, #loc190])
#loc287 = loc(fused[#loc195, #loc196])
