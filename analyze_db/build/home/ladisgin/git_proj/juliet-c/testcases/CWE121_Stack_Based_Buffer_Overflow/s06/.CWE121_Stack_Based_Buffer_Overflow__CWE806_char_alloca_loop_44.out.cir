!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":23:21)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":23:28)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":100:10)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":100:14)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":100:20)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":100:32)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":58:25)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":58:32)
#loc159 = loc(fused[#loc5, #loc6])
#loc185 = loc(fused[#loc79, #loc80])
#loc186 = loc(fused[#loc81, #loc82])
#loc191 = loc(fused[#loc99, #loc100])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc157)
  cir.func internal private @badSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc5, #loc6])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc159)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc161)
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc162)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc163)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc161)
      cir.store %4, %1 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc161)
      %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc15)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
      %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc15)
      cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc164)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc21)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc21)
        cir.store %17, %2 : !u64i, !cir.ptr<!u64i> loc(#loc166)
        cir.for : cond {
          %18 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc23)
          %19 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc24)
          %20 = cir.cmp(lt, %18, %19) : !u64i, !cir.bool loc(#loc167)
          cir.condition(%20) loc(#loc25)
        } body {
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
            %19 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc28)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %19 : !u64i), !cir.ptr<!s8i> loc(#loc29)
            %21 = cir.load %20 : !cir.ptr<!s8i>, !s8i loc(#loc27)
            %22 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc30)
            %23 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc31)
            %24 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %22 : !u64i), !cir.ptr<!s8i> loc(#loc31)
            cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc169)
          } loc(#loc168)
          cir.yield loc(#loc20)
        } step {
          %18 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc32)
          %19 = cir.unary(inc, %18) : !u64i, !u64i loc(#loc33)
          cir.store %19, %2 : !u64i, !cir.ptr<!u64i> loc(#loc170)
          cir.yield loc(#loc165)
        } loc(#loc165)
      } loc(#loc165)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc34)
      %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc34)
      %10 = cir.const #cir.int<50> : !s32i loc(#loc35)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc36)
      %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc35)
      %13 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc37)
      %14 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc37)
      cir.store %9, %14 : !s8i, !cir.ptr<!s8i> loc(#loc171)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
      cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc39)
    } loc(#loc160)
    cir.return loc(#loc4)
  } loc(#loc158)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc173)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc174)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc175)
    %3 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc45)
    cir.store %3, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc174)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc47)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc47)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc47)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc47)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc47)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc47)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc47)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc175)
    %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc176)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc50)
    %14 = cir.const #cir.int<65> : !s32i loc(#loc51)
    %15 = cir.const #cir.int<100> : !s32i loc(#loc52)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc52)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc52)
    cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc177)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc56)
    %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc56)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
    %22 = cir.const #cir.int<100> : !s32i loc(#loc58)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc58)
    %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc60)
    cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc178)
    %26 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc61)
    %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
    cir.call %26(%27) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc61)
    cir.return loc(#loc41)
  } loc(#loc172)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    cir.return loc(#loc64)
  } loc(#loc179)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc181)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc182)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc183)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc76)
  cir.func @main(%arg0: !s32i loc(fused[#loc79, #loc80]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc81, #loc82])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc185)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc186)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc78)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc83)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc84)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc85)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc85)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc86)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc73)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc187)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44_good() : () -> () loc(#loc88)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc74)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc75)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc188)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44_bad() : () -> () loc(#loc92)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc76)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc95)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc189)
    cir.return %17 : !s32i loc(#loc189)
  } loc(#loc184)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc99, #loc100])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc191)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc101)
    cir.scope {
      %1 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc193)
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc194)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc195)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc193)
      cir.store %4, %1 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc193)
      %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc109)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc110)
      %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc109)
      cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc196)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc115)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc115)
        cir.store %17, %2 : !u64i, !cir.ptr<!u64i> loc(#loc198)
        cir.for : cond {
          %18 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc117)
          %19 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc118)
          %20 = cir.cmp(lt, %18, %19) : !u64i, !cir.bool loc(#loc199)
          cir.condition(%20) loc(#loc119)
        } body {
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc121)
            %19 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc122)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %19 : !u64i), !cir.ptr<!s8i> loc(#loc123)
            %21 = cir.load %20 : !cir.ptr<!s8i>, !s8i loc(#loc121)
            %22 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc124)
            %23 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc125)
            %24 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %22 : !u64i), !cir.ptr<!s8i> loc(#loc125)
            cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc201)
          } loc(#loc200)
          cir.yield loc(#loc114)
        } step {
          %18 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc126)
          %19 = cir.unary(inc, %18) : !u64i, !u64i loc(#loc127)
          cir.store %19, %2 : !u64i, !cir.ptr<!u64i> loc(#loc202)
          cir.yield loc(#loc197)
        } loc(#loc197)
      } loc(#loc197)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc128)
      %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc128)
      %10 = cir.const #cir.int<50> : !s32i loc(#loc129)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc130)
      %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc129)
      %13 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc131)
      %14 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc131)
      cir.store %9, %14 : !s8i, !cir.ptr<!s8i> loc(#loc203)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
      cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc133)
    } loc(#loc192)
    cir.return loc(#loc98)
  } loc(#loc190)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc205)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc206)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc207)
    %3 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc139)
    cir.store %3, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc206)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc141)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc141)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc141)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc141)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc141)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc141)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc141)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc207)
    %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc208)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc144)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc144)
    %14 = cir.const #cir.int<65> : !s32i loc(#loc145)
    %15 = cir.const #cir.int<50> : !s32i loc(#loc146)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc147)
    %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc146)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc146)
    cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc209)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc150)
    %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc150)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
    %22 = cir.const #cir.int<50> : !s32i loc(#loc152)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc153)
    %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc152)
    %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc154)
    cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc210)
    %26 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc155)
    %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
    cir.call %26(%27) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc155)
    cir.return loc(#loc135)
  } loc(#loc204)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":23:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":37:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":24:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":25:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":36:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":26:9)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":26:25)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":27:9)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":27:16)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":27:19)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":28:19)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":28:26)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":28:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":28:30)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":30:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":33:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":30:18)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":30:14)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":30:21)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":30:25)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":30:23)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":31:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":32:23)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":32:28)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":32:29)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":32:18)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":32:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":30:35)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":30:34)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":34:22)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":34:14)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":34:17)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":34:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":35:19)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":35:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":39:1)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":51:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":41:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":41:12)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":43:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":43:32)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":44:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":44:33)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":45:12)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":45:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":47:12)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":47:18)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":47:23)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":47:27)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":47:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":47:28)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":48:19)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":48:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":48:10)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":48:14)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":48:15)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":50:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":50:13)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":86:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":89:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":88:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":88:13)
#loc67 = loc("/usr/include/stdlib.h":575:1)
#loc68 = loc("/usr/include/stdlib.h":575:41)
#loc69 = loc("/usr/include/time.h":76:1)
#loc70 = loc("/usr/include/time.h":76:38)
#loc71 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc72 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":105:15)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":107:15)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":110:15)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":112:15)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":100:1)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":115:1)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":101:1)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":103:27)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":103:22)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":103:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":105:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":106:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":106:73)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":107:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":110:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":111:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":111:72)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":112:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":114:12)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":114:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":58:1)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":72:1)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":59:1)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":60:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":71:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":61:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":61:25)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":62:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":62:16)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":62:19)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":63:19)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":63:26)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":63:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":63:30)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":65:9)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":68:9)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":65:18)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":65:14)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":65:21)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":65:25)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":65:23)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":66:9)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":67:23)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":67:28)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":67:29)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":67:18)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":67:13)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":65:35)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":65:34)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":69:22)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":69:14)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":69:17)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":69:9)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":70:19)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":70:9)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":74:1)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":84:1)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":76:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":76:12)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":77:5)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":77:32)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":78:5)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":78:33)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":79:12)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":79:5)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":81:12)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":81:18)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":81:23)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":81:26)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":81:5)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":81:27)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":82:18)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":82:5)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":82:10)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":82:13)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":82:14)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":83:5)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c":83:13)
#loc157 = loc(fused[#loc1, #loc2])
#loc158 = loc(fused[#loc3, #loc4])
#loc160 = loc(fused[#loc8, #loc9])
#loc161 = loc(fused[#loc10, #loc11])
#loc162 = loc(fused[#loc12, #loc13])
#loc163 = loc(fused[#loc12, #loc14])
#loc164 = loc(fused[#loc17, #loc18])
#loc165 = loc(fused[#loc19, #loc20])
#loc166 = loc(fused[#loc22, #loc21])
#loc167 = loc(fused[#loc23, #loc24])
#loc168 = loc(fused[#loc26, #loc20])
#loc169 = loc(fused[#loc31, #loc29])
#loc170 = loc(fused[#loc33, #loc32])
#loc171 = loc(fused[#loc37, #loc34])
#loc172 = loc(fused[#loc40, #loc41])
#loc173 = loc(fused[#loc42, #loc43])
#loc174 = loc(fused[#loc44, #loc45])
#loc175 = loc(fused[#loc46, #loc47])
#loc176 = loc(fused[#loc49, #loc48])
#loc177 = loc(fused[#loc54, #loc55])
#loc178 = loc(fused[#loc57, #loc56])
#loc179 = loc(fused[#loc63, #loc64])
#loc180 = loc(fused[#loc65, #loc66])
#loc181 = loc(fused[#loc67, #loc68])
#loc182 = loc(fused[#loc69, #loc70])
#loc183 = loc(fused[#loc71, #loc72])
#loc184 = loc(fused[#loc77, #loc78])
#loc187 = loc(fused[#loc88, #loc89])
#loc188 = loc(fused[#loc92, #loc93])
#loc189 = loc(fused[#loc96, #loc95])
#loc190 = loc(fused[#loc97, #loc98])
#loc192 = loc(fused[#loc102, #loc103])
#loc193 = loc(fused[#loc104, #loc105])
#loc194 = loc(fused[#loc106, #loc107])
#loc195 = loc(fused[#loc106, #loc108])
#loc196 = loc(fused[#loc111, #loc112])
#loc197 = loc(fused[#loc113, #loc114])
#loc198 = loc(fused[#loc116, #loc115])
#loc199 = loc(fused[#loc117, #loc118])
#loc200 = loc(fused[#loc120, #loc114])
#loc201 = loc(fused[#loc125, #loc123])
#loc202 = loc(fused[#loc127, #loc126])
#loc203 = loc(fused[#loc131, #loc128])
#loc204 = loc(fused[#loc134, #loc135])
#loc205 = loc(fused[#loc136, #loc137])
#loc206 = loc(fused[#loc138, #loc139])
#loc207 = loc(fused[#loc140, #loc141])
#loc208 = loc(fused[#loc143, #loc142])
#loc209 = loc(fused[#loc148, #loc149])
#loc210 = loc(fused[#loc151, #loc150])
