clang: warning: argument unused during compilation: '-c' [-Wunused-command-line-argument]
warning: unknown warning option '-Wno-terminate' [-Wunknown-warning-option]
clang: /workspaces/clangir/clang/lib/CIR/CodeGen/CIRGenExprCXX.cpp:635: mlir::Value emitCXXNewAllocSize(CIRGenFunction &, const CXXNewExpr *, unsigned int, mlir::Value &, mlir::Value &): Assertion `numElementsWidth == sizeWidth && "Expected a size_t array size constant"' failed.
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /workspaces/clangir/install/bin/clang -S -Xclang -emit-cir-flat -std=c++11 -Wno-terminate -std=c++11 -I ../../../testcasesupport -c CWE762_Mismatched_Memory_Management_Routines__delete_array_char_malloc_17.cpp -o /workspaces/juliet-c/testcases/CWE762_Mismatched_Memory_Management_Routines/s01/.CWE762_Mismatched_Memory_Management_Routines__delete_array_char_malloc_17.o.cir
1.	<eof> parser at end of file
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang     0x00005572923aab68 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
1  clang     0x00005572923a873e llvm::sys::RunSignalHandlers() + 238
2  clang     0x0000557292319946
3  libc.so.6 0x00007f2ecba45330
4  libc.so.6 0x00007f2ecba9eb2c pthread_kill + 284
5  libc.so.6 0x00007f2ecba4527e gsignal + 30
6  libc.so.6 0x00007f2ecba288ff abort + 223
7  libc.so.6 0x00007f2ecba2881b
8  libc.so.6 0x00007f2ecba3b517
9  clang     0x00005572937f34fc clang::CIRGen::CIRGenFunction::emitCXXNewExpr(clang::CXXNewExpr const*) + 12028
10 clang     0x00005572937f6d1f clang::CIRGen::CIRGenFunction::emitScalarExpr(clang::Expr const*) + 63
11 clang     0x00005572937b87e2 clang::CIRGen::CIRGenFunction::emitAnyExpr(clang::Expr const*, clang::CIRGen::AggValueSlot, bool) + 66
12 clang     0x00005572937b83d4 clang::CIRGen::CIRGenFunction::emitBinaryOperatorLValue(clang::BinaryOperator const*) + 420
13 clang     0x00005572937b2694 clang::CIRGen::CIRGenFunction::emitLValue(clang::Expr const*) + 308
14 clang     0x00005572937b24f1 clang::CIRGen::CIRGenFunction::emitIgnoredExpr(clang::Expr const*) + 33
15 clang     0x0000557293829518 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 120
16 clang     0x0000557293829284 clang::CIRGen::CIRGenFunction::emitCompoundStmtWithoutScope(clang::CompoundStmt const&, bool, clang::CIRGen::AggValueSlot) + 260
17 clang     0x0000557293829955 clang::CIRGen::CIRGenFunction::emitCompoundStmt(clang::CompoundStmt const&, bool, clang::CIRGen::AggValueSlot) + 453
18 clang     0x0000557293829d65 clang::CIRGen::CIRGenFunction::emitSimpleStmt(clang::Stmt const*, bool) + 757
19 clang     0x00005572938294b0 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 16
20 clang     0x000055729382e8db
21 clang     0x00005572949b2c08 cir::ForOp::build(mlir::OpBuilder&, mlir::OperationState&, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>) + 216
22 clang     0x000055729382e0f8
23 clang     0x000055729382e5a9
24 clang     0x0000557294916e86 cir::ScopeOp::build(mlir::OpBuilder&, mlir::OperationState&, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>) + 134
25 clang     0x000055729382a451 clang::CIRGen::CIRGenFunction::emitForStmt(clang::ForStmt const&) + 193
26 clang     0x000055729382960e clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 366
27 clang     0x0000557293829284 clang::CIRGen::CIRGenFunction::emitCompoundStmtWithoutScope(clang::CompoundStmt const&, bool, clang::CIRGen::AggValueSlot) + 260
28 clang     0x000055729381381a clang::CIRGen::CIRGenFunction::generateCode(clang::GlobalDecl, cir::FuncOp, clang::CIRGen::CIRGenFunctionInfo const&) + 1514
29 clang     0x0000557293766839 clang::CIRGen::CIRGenModule::emitGlobalFunctionDefinition(clang::GlobalDecl, mlir::Operation*) + 393
30 clang     0x0000557293771b22 clang::CIRGen::CIRGenModule::emitGlobalDecl(clang::GlobalDecl&) + 338
31 clang     0x0000557293771dfb clang::CIRGen::CIRGenModule::emitDeferred(unsigned int) + 315
32 clang     0x0000557293771f20 clang::CIRGen::CIRGenModule::Release() + 32
33 clang     0x0000557293653a8c
34 clang     0x0000557295755a09 clang::ParseAST(clang::Sema&, bool, bool) + 617
35 clang     0x0000557292e70d36 clang::FrontendAction::Execute() + 38
36 clang     0x0000557292ddc3ad clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1149
37 clang     0x0000557292f59edf clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 815
38 clang     0x000055729117ca7a cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 6074
39 clang     0x000055729117906d
40 clang     0x0000557292c23339
41 clang     0x0000557292319686 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 150
42 clang     0x0000557292c22892 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const + 242
43 clang     0x0000557292bdec27 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 455
44 clang     0x0000557292bdef17 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const + 135
45 clang     0x0000557292bfe928 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 904
46 clang     0x00005572911786ba clang_main(int, char**, llvm::ToolContext const&) + 6090
47 clang     0x0000557291188147 main + 87
48 libc.so.6 0x00007f2ecba2a1ca
49 libc.so.6 0x00007f2ecba2a28b __libc_start_main + 139
50 clang     0x0000557291176aa5 _start + 37
clang: error: clang frontend command failed with exit code 134 (use -v to see invocation)
clang version 21.0.0git (git@github.com:llvm/clangir.git 4e7a2236d38507e994cbe5b79c888cf86427e7db)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /workspaces/clangir/install/bin
Build config: +assertions
clang: error: unable to execute command: Aborted (core dumped)
clang: note: diagnostic msg: Error generating preprocessed source(s).
