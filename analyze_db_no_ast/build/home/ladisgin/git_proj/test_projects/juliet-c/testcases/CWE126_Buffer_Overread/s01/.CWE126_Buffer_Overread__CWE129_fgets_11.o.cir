!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_fgets_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrue(...) -> !s32i loc(#loc280)
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc281)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc282)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc283)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc284)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private  @printIntLine(!s32i) loc(#loc285)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is negative\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc14)
  cir.func no_proto  @CWE126_Buffer_Overread__CWE129_fgets_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc287)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc20)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc288)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc290)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc290)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc24)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc24)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc293)
          %8 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc293)
          cir.store %8, %7 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc293)
          cir.scope {
            %9 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc33)
            %10 = cir.const #cir.int<3> : !s32i loc(#loc34)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc34)
            %12 = cir.const #cir.int<4> : !u64i loc(#loc34)
            %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc34)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc34)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc34)
            %16 = cir.binop(add, %13, %15) : !u64i loc(#loc34)
            %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc34)
            %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc282)
            %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc35)
            %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc36)
            %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc37)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc37)
            %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !s32i loc(#loc295)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc38)
            cir.if %24 {
              %25 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc42)
              %26 = cir.call @atoi(%25) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc43)
              cir.store %26, %0 : !s32i, !cir.ptr<!s32i> loc(#loc297)
            } else {
              %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc46)
            } loc(#loc296)
          } loc(#loc294)
        } loc(#loc292)
      } loc(#loc291)
    } loc(#loc289)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc299)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc299)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc49)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc49)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc302)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc302)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc302)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc58)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc59)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc304)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc60)
            cir.if %12 {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
              %14 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc65)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc65)
              %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc65)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc66)
            } else {
              %13 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc14)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc14)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc67)
            } loc(#loc305)
          } loc(#loc303)
        } loc(#loc301)
      } loc(#loc300)
    } loc(#loc298)
    cir.return loc(#loc16)
  } loc(#loc286)
  cir.func no_proto  @CWE126_Buffer_Overread__CWE129_fgets_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc307)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc70)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc308)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc72)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc309)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc74)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc310)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc76)
    cir.return loc(#loc69)
  } loc(#loc306)
  cir.func no_proto private  @globalReturnsFalse(...) -> !s32i loc(#loc311)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc80)
  cir.global "private"  constant internal dsolocal @".str3" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc81)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc313)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc87)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc314)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc316)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc316)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc91)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc91)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc319)
          %8 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc319)
          cir.store %8, %7 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc319)
          cir.scope {
            %9 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc100)
            %10 = cir.const #cir.int<3> : !s32i loc(#loc101)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc101)
            %12 = cir.const #cir.int<4> : !u64i loc(#loc101)
            %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc101)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc101)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc101)
            %16 = cir.binop(add, %13, %15) : !u64i loc(#loc101)
            %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc101)
            %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc282)
            %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc102)
            %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc103)
            %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc104)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc104)
            %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !s32i loc(#loc321)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc105)
            cir.if %24 {
              %25 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc109)
              %26 = cir.call @atoi(%25) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc110)
              cir.store %26, %0 : !s32i, !cir.ptr<!s32i> loc(#loc323)
            } else {
              %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc113)
              %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc113)
              cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc114)
            } loc(#loc322)
          } loc(#loc320)
        } loc(#loc318)
      } loc(#loc317)
    } loc(#loc315)
    cir.scope {
      %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc325)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc325)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc117)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc117)
      cir.if %6 {
        %7 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc80)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc80)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc122)
      } else {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc328)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc328)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc328)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc130)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc330)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc131)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc133)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc134)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc331)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc136)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc132)
                cir.yield %19 : !cir.bool loc(#loc132)
              }, false {
                %19 = cir.const #false loc(#loc132)
                cir.yield %19 : !cir.bool loc(#loc132)
              }) : (!cir.bool) -> !cir.bool loc(#loc132)
              cir.yield %18 : !cir.bool loc(#loc132)
            }, false {
              %14 = cir.const #false loc(#loc132)
              cir.yield %14 : !cir.bool loc(#loc132)
            }) : (!cir.bool) -> !cir.bool loc(#loc132)
            cir.if %13 {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc140)
              %15 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc141)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc141)
              %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc141)
              cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc142)
            } else {
              %14 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc81)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc81)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc143)
            } loc(#loc332)
          } loc(#loc329)
        } loc(#loc327)
      } loc(#loc326)
    } loc(#loc324)
    cir.return loc(#loc83)
  } loc(#loc312)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc334)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc149)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc335)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc337)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc337)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc153)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc153)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc340)
          %8 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc340)
          cir.store %8, %7 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc340)
          cir.scope {
            %9 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc162)
            %10 = cir.const #cir.int<3> : !s32i loc(#loc163)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc163)
            %12 = cir.const #cir.int<4> : !u64i loc(#loc163)
            %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc163)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc163)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc163)
            %16 = cir.binop(add, %13, %15) : !u64i loc(#loc163)
            %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc163)
            %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc282)
            %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc164)
            %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc165)
            %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc166)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc166)
            %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !s32i loc(#loc342)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc167)
            cir.if %24 {
              %25 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc171)
              %26 = cir.call @atoi(%25) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc172)
              cir.store %26, %0 : !s32i, !cir.ptr<!s32i> loc(#loc344)
            } else {
              %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc175)
              %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc175)
              cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc176)
            } loc(#loc343)
          } loc(#loc341)
        } loc(#loc339)
      } loc(#loc338)
    } loc(#loc336)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc346)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc346)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc179)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc179)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc349)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc349)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc349)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc188)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc189)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc351)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc190)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc192)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc193)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc352)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc195)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc191)
                cir.yield %19 : !cir.bool loc(#loc191)
              }, false {
                %19 = cir.const #false loc(#loc191)
                cir.yield %19 : !cir.bool loc(#loc191)
              }) : (!cir.bool) -> !cir.bool loc(#loc191)
              cir.yield %18 : !cir.bool loc(#loc191)
            }, false {
              %14 = cir.const #false loc(#loc191)
              cir.yield %14 : !cir.bool loc(#loc191)
            }) : (!cir.bool) -> !cir.bool loc(#loc191)
            cir.if %13 {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc199)
              %15 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc200)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc200)
              %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc200)
              cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc201)
            } else {
              %14 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc202)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc202)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc203)
            } loc(#loc353)
          } loc(#loc350)
        } loc(#loc348)
      } loc(#loc347)
    } loc(#loc345)
    cir.return loc(#loc145)
  } loc(#loc333)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc355)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc208)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc209)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc356)
    cir.scope {
      %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc358)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc358)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc213)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc213)
      cir.if %6 {
        %7 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc218)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc218)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc219)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc220)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc360)
      } loc(#loc359)
    } loc(#loc357)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc362)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc362)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc224)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc224)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc365)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc365)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc365)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc233)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc234)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc367)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc235)
            cir.if %12 {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc239)
              %14 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc240)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc240)
              %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc240)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc241)
            } else {
              %13 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc242)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc242)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc243)
            } loc(#loc368)
          } loc(#loc366)
        } loc(#loc364)
      } loc(#loc363)
    } loc(#loc361)
    cir.return loc(#loc205)
  } loc(#loc354)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc370)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc248)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc249)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc371)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc373)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc373)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc253)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc253)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc256)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc375)
      } loc(#loc374)
    } loc(#loc372)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc377)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc377)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc260)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc260)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc380)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc380)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc380)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc269)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc270)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc382)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc271)
            cir.if %12 {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc275)
              %14 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc276)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc276)
              %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc276)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc277)
            } else {
              %13 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc278)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc278)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc279)
            } loc(#loc383)
          } loc(#loc381)
        } loc(#loc379)
      } loc(#loc378)
    } loc(#loc376)
    cir.return loc(#loc245)
  } loc(#loc369)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_fgets_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":41:27)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":57:27)
#loc15 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":24:1)
#loc16 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":61:1)
#loc17 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":26:5)
#loc18 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":26:9)
#loc19 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":28:13)
#loc20 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":28:12)
#loc21 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":28:5)
#loc22 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":29:5)
#loc23 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":44:5)
#loc24 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":29:8)
#loc25 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":29:26)
#loc26 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":30:5)
#loc27 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":31:9)
#loc28 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":43:9)
#loc29 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":32:13)
#loc30 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":32:49)
#loc31 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":34:13)
#loc32 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":42:13)
#loc33 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":34:23)
#loc34 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":34:36)
#loc35 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":34:53)
#loc36 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":34:17)
#loc37 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":34:63)
#loc38 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":34:60)
#loc39 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":35:13)
#loc40 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":38:13)
#loc41 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":40:13)
#loc42 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":37:29)
#loc43 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":37:24)
#loc44 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":37:17)
#loc45 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":37:40)
#loc46 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":41:17)
#loc47 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":45:5)
#loc48 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":60:5)
#loc49 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":45:8)
#loc50 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":45:26)
#loc51 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":46:5)
#loc52 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":47:9)
#loc53 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":59:9)
#loc54 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":48:13)
#loc55 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":48:34)
#loc56 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":51:13)
#loc57 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":58:13)
#loc58 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":51:17)
#loc59 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":51:25)
#loc60 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":51:22)
#loc61 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":52:13)
#loc62 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":54:13)
#loc63 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":56:13)
#loc64 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":53:37)
#loc65 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":53:30)
#loc66 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":53:17)
#loc67 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":57:17)
#loc68 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":215:1)
#loc69 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":221:1)
#loc70 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":217:5)
#loc71 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":217:14)
#loc72 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":218:5)
#loc73 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":218:14)
#loc74 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":219:5)
#loc75 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":219:14)
#loc76 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":220:5)
#loc77 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":220:14)
#loc78 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc79 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc80 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":92:19)
#loc81 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":105:27)
#loc82 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":68:1)
#loc83 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":109:1)
#loc84 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":70:5)
#loc85 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":70:9)
#loc86 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":72:13)
#loc87 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":72:12)
#loc88 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":72:5)
#loc89 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":73:5)
#loc90 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":88:5)
#loc91 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":73:8)
#loc92 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":73:26)
#loc93 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":74:5)
#loc94 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":75:9)
#loc95 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":87:9)
#loc96 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":76:13)
#loc97 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":76:49)
#loc98 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":78:13)
#loc99 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":86:13)
#loc100 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":78:23)
#loc101 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":78:36)
#loc102 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":78:53)
#loc103 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":78:17)
#loc104 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":78:63)
#loc105 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":78:60)
#loc106 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":79:13)
#loc107 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":82:13)
#loc108 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":84:13)
#loc109 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":81:29)
#loc110 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":81:24)
#loc111 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":81:17)
#loc112 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":81:40)
#loc113 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":85:27)
#loc114 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":85:17)
#loc115 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":89:5)
#loc116 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":108:5)
#loc117 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":89:8)
#loc118 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":89:27)
#loc119 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":90:5)
#loc120 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":93:5)
#loc121 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":95:5)
#loc122 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":92:9)
#loc123 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":96:9)
#loc124 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":107:9)
#loc125 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":97:13)
#loc126 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":97:34)
#loc127 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":99:13)
#loc128 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":106:13)
#loc129 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":99:17)
#loc130 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":99:25)
#loc131 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":99:22)
#loc132 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":99:27)
#loc133 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":99:30)
#loc134 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":99:38)
#loc135 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":99:40)
#loc136 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":99:35)
#loc137 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":100:13)
#loc138 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":102:13)
#loc139 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":104:13)
#loc140 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":101:37)
#loc141 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":101:30)
#loc142 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":101:17)
#loc143 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":105:17)
#loc144 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":112:1)
#loc145 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":148:1)
#loc146 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":114:5)
#loc147 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":114:9)
#loc148 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":116:13)
#loc149 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":116:12)
#loc150 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":116:5)
#loc151 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":117:5)
#loc152 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":132:5)
#loc153 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":117:8)
#loc154 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":117:26)
#loc155 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":118:5)
#loc156 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":119:9)
#loc157 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":131:9)
#loc158 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":120:13)
#loc159 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":120:49)
#loc160 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":122:13)
#loc161 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":130:13)
#loc162 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":122:23)
#loc163 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":122:36)
#loc164 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":122:53)
#loc165 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":122:17)
#loc166 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":122:63)
#loc167 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":122:60)
#loc168 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":123:13)
#loc169 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":126:13)
#loc170 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":128:13)
#loc171 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":125:29)
#loc172 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":125:24)
#loc173 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":125:17)
#loc174 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":125:40)
#loc175 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":129:27)
#loc176 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":129:17)
#loc177 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":133:5)
#loc178 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":147:5)
#loc179 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":133:8)
#loc180 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":133:26)
#loc181 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":134:5)
#loc182 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":135:9)
#loc183 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":146:9)
#loc184 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":136:13)
#loc185 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":136:34)
#loc186 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":138:13)
#loc187 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":145:13)
#loc188 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":138:17)
#loc189 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":138:25)
#loc190 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":138:22)
#loc191 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":138:27)
#loc192 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":138:30)
#loc193 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":138:38)
#loc194 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":138:40)
#loc195 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":138:35)
#loc196 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":139:13)
#loc197 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":141:13)
#loc198 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":143:13)
#loc199 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":140:37)
#loc200 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":140:30)
#loc201 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":140:17)
#loc202 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":144:27)
#loc203 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":144:17)
#loc204 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":151:1)
#loc205 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":183:1)
#loc206 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":153:5)
#loc207 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":153:9)
#loc208 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":155:13)
#loc209 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":155:12)
#loc210 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":155:5)
#loc211 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":156:5)
#loc212 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":166:5)
#loc213 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":156:8)
#loc214 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":156:27)
#loc215 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":157:5)
#loc216 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":160:5)
#loc217 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":162:5)
#loc218 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":159:19)
#loc219 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":159:9)
#loc220 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":165:16)
#loc221 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":165:9)
#loc222 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":167:5)
#loc223 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":182:5)
#loc224 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":167:8)
#loc225 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":167:26)
#loc226 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":168:5)
#loc227 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":169:9)
#loc228 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":181:9)
#loc229 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":170:13)
#loc230 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":170:34)
#loc231 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":173:13)
#loc232 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":180:13)
#loc233 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":173:17)
#loc234 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":173:25)
#loc235 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":173:22)
#loc236 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":174:13)
#loc237 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":176:13)
#loc238 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":178:13)
#loc239 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":175:37)
#loc240 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":175:30)
#loc241 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":175:17)
#loc242 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":179:27)
#loc243 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":179:17)
#loc244 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":186:1)
#loc245 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":213:1)
#loc246 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":188:5)
#loc247 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":188:9)
#loc248 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":190:13)
#loc249 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":190:12)
#loc250 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":190:5)
#loc251 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":191:5)
#loc252 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":196:5)
#loc253 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":191:8)
#loc254 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":191:26)
#loc255 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":192:5)
#loc256 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":195:16)
#loc257 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":195:9)
#loc258 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":197:5)
#loc259 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":212:5)
#loc260 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":197:8)
#loc261 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":197:26)
#loc262 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":198:5)
#loc263 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":199:9)
#loc264 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":211:9)
#loc265 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":200:13)
#loc266 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":200:34)
#loc267 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":203:13)
#loc268 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":210:13)
#loc269 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":203:17)
#loc270 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":203:25)
#loc271 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":203:22)
#loc272 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":204:13)
#loc273 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":206:13)
#loc274 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":208:13)
#loc275 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":205:37)
#loc276 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":205:30)
#loc277 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":205:17)
#loc278 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":209:27)
#loc279 = loc("CWE126_Buffer_Overread__CWE129_fgets_11.c":209:17)
#loc280 = loc(fused[#loc1, #loc2])
#loc281 = loc(fused[#loc3, #loc4])
#loc282 = loc(fused[#loc5, #loc6])
#loc283 = loc(fused[#loc7, #loc8])
#loc284 = loc(fused[#loc9, #loc10])
#loc285 = loc(fused[#loc12, #loc13])
#loc286 = loc(fused[#loc15, #loc16])
#loc287 = loc(fused[#loc17, #loc18])
#loc288 = loc(fused[#loc21, #loc19])
#loc289 = loc(fused[#loc22, #loc23])
#loc290 = loc(fused[#loc24, #loc25])
#loc291 = loc(fused[#loc26, #loc23])
#loc292 = loc(fused[#loc27, #loc28])
#loc293 = loc(fused[#loc29, #loc30])
#loc294 = loc(fused[#loc31, #loc32])
#loc295 = loc(fused[#loc36, #loc37])
#loc296 = loc(fused[#loc39, #loc40, #loc41, #loc32])
#loc297 = loc(fused[#loc44, #loc45])
#loc298 = loc(fused[#loc47, #loc48])
#loc299 = loc(fused[#loc49, #loc50])
#loc300 = loc(fused[#loc51, #loc48])
#loc301 = loc(fused[#loc52, #loc53])
#loc302 = loc(fused[#loc54, #loc55])
#loc303 = loc(fused[#loc56, #loc57])
#loc304 = loc(fused[#loc58, #loc59])
#loc305 = loc(fused[#loc61, #loc62, #loc63, #loc57])
#loc306 = loc(fused[#loc68, #loc69])
#loc307 = loc(fused[#loc70, #loc71])
#loc308 = loc(fused[#loc72, #loc73])
#loc309 = loc(fused[#loc74, #loc75])
#loc310 = loc(fused[#loc76, #loc77])
#loc311 = loc(fused[#loc78, #loc79])
#loc312 = loc(fused[#loc82, #loc83])
#loc313 = loc(fused[#loc84, #loc85])
#loc314 = loc(fused[#loc88, #loc86])
#loc315 = loc(fused[#loc89, #loc90])
#loc316 = loc(fused[#loc91, #loc92])
#loc317 = loc(fused[#loc93, #loc90])
#loc318 = loc(fused[#loc94, #loc95])
#loc319 = loc(fused[#loc96, #loc97])
#loc320 = loc(fused[#loc98, #loc99])
#loc321 = loc(fused[#loc103, #loc104])
#loc322 = loc(fused[#loc106, #loc107, #loc108, #loc99])
#loc323 = loc(fused[#loc111, #loc112])
#loc324 = loc(fused[#loc115, #loc116])
#loc325 = loc(fused[#loc117, #loc118])
#loc326 = loc(fused[#loc119, #loc120, #loc121, #loc116])
#loc327 = loc(fused[#loc123, #loc124])
#loc328 = loc(fused[#loc125, #loc126])
#loc329 = loc(fused[#loc127, #loc128])
#loc330 = loc(fused[#loc129, #loc130])
#loc331 = loc(fused[#loc133, #loc135])
#loc332 = loc(fused[#loc137, #loc138, #loc139, #loc128])
#loc333 = loc(fused[#loc144, #loc145])
#loc334 = loc(fused[#loc146, #loc147])
#loc335 = loc(fused[#loc150, #loc148])
#loc336 = loc(fused[#loc151, #loc152])
#loc337 = loc(fused[#loc153, #loc154])
#loc338 = loc(fused[#loc155, #loc152])
#loc339 = loc(fused[#loc156, #loc157])
#loc340 = loc(fused[#loc158, #loc159])
#loc341 = loc(fused[#loc160, #loc161])
#loc342 = loc(fused[#loc165, #loc166])
#loc343 = loc(fused[#loc168, #loc169, #loc170, #loc161])
#loc344 = loc(fused[#loc173, #loc174])
#loc345 = loc(fused[#loc177, #loc178])
#loc346 = loc(fused[#loc179, #loc180])
#loc347 = loc(fused[#loc181, #loc178])
#loc348 = loc(fused[#loc182, #loc183])
#loc349 = loc(fused[#loc184, #loc185])
#loc350 = loc(fused[#loc186, #loc187])
#loc351 = loc(fused[#loc188, #loc189])
#loc352 = loc(fused[#loc192, #loc194])
#loc353 = loc(fused[#loc196, #loc197, #loc198, #loc187])
#loc354 = loc(fused[#loc204, #loc205])
#loc355 = loc(fused[#loc206, #loc207])
#loc356 = loc(fused[#loc210, #loc208])
#loc357 = loc(fused[#loc211, #loc212])
#loc358 = loc(fused[#loc213, #loc214])
#loc359 = loc(fused[#loc215, #loc216, #loc217, #loc212])
#loc360 = loc(fused[#loc221, #loc220])
#loc361 = loc(fused[#loc222, #loc223])
#loc362 = loc(fused[#loc224, #loc225])
#loc363 = loc(fused[#loc226, #loc223])
#loc364 = loc(fused[#loc227, #loc228])
#loc365 = loc(fused[#loc229, #loc230])
#loc366 = loc(fused[#loc231, #loc232])
#loc367 = loc(fused[#loc233, #loc234])
#loc368 = loc(fused[#loc236, #loc237, #loc238, #loc232])
#loc369 = loc(fused[#loc244, #loc245])
#loc370 = loc(fused[#loc246, #loc247])
#loc371 = loc(fused[#loc250, #loc248])
#loc372 = loc(fused[#loc251, #loc252])
#loc373 = loc(fused[#loc253, #loc254])
#loc374 = loc(fused[#loc255, #loc252])
#loc375 = loc(fused[#loc257, #loc256])
#loc376 = loc(fused[#loc258, #loc259])
#loc377 = loc(fused[#loc260, #loc261])
#loc378 = loc(fused[#loc262, #loc259])
#loc379 = loc(fused[#loc263, #loc264])
#loc380 = loc(fused[#loc265, #loc266])
#loc381 = loc(fused[#loc267, #loc268])
#loc382 = loc(fused[#loc269, #loc270])
#loc383 = loc(fused[#loc272, #loc273, #loc274, #loc268])
