!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc9 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":27:16)
#loc10 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":27:23)
#loc30 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":40:20)
#loc31 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":40:27)
#loc49 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":48:20)
#loc50 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":48:27)
#loc72 = loc(fused[#loc9, #loc10])
#loc81 = loc(fused[#loc30, #loc31])
#loc90 = loc(fused[#loc49, #loc50])
module @"/workspaces/juliet-c/testcases/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_62b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc68)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc69)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc70)
  cir.func @_ZN38CWE415_Double_Free__malloc_free_int_629badSourceERPi(%arg0: !cir.ptr<!cir.ptr<!s32i>> loc(fused[#loc9, #loc10])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc72)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc11)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc12)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc13)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc13)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc73)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc74)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc12)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc75)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc17)
    cir.store %7, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc76)
    cir.scope {
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc20)
      %14 = cir.load %13 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc21)
      %16 = cir.cmp(eq, %14, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc78)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc23)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc24)
        %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc25)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc23)
      } loc(#loc79)
    } loc(#loc77)
    %9 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc26)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc27)
    %11 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc27)
    cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc26)
    cir.return loc(#loc8)
  } loc(#loc71)
  cir.func @_ZN38CWE415_Double_Free__malloc_free_int_6213goodG2BSourceERPi(%arg0: !cir.ptr<!cir.ptr<!s32i>> loc(fused[#loc30, #loc31])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc81)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc32)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc33)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc34)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc34)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc82)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc83)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc33)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc84)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc38)
    cir.store %7, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc85)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc41)
      %10 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc42)
      %12 = cir.cmp(eq, %10, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc87)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc44)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc45)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc46)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc44)
      } loc(#loc88)
    } loc(#loc86)
    cir.return loc(#loc29)
  } loc(#loc80)
  cir.func @_ZN38CWE415_Double_Free__malloc_free_int_6213goodB2GSourceERPi(%arg0: !cir.ptr<!cir.ptr<!s32i>> loc(fused[#loc49, #loc50])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc90)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc51)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc52)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc53)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc53)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc91)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc92)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc52)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc93)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc57)
    cir.store %7, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc94)
    cir.scope {
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc60)
      %14 = cir.load %13 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc61)
      %16 = cir.cmp(eq, %14, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc96)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc63)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc64)
        %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc65)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc63)
      } loc(#loc97)
    } loc(#loc95)
    %9 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc66)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc67)
    %11 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc67)
    cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc66)
    cir.return loc(#loc48)
  } loc(#loc89)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_62b.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/stdlib.h":687:1)
#loc6 = loc("/usr/include/stdlib.h":687:32)
#loc7 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":27:1)
#loc8 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":33:1)
#loc11 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":28:1)
#loc12 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":29:19)
#loc13 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":29:26)
#loc14 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":29:30)
#loc15 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":29:40)
#loc16 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":29:41)
#loc17 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":29:5)
#loc18 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":30:5)
#loc19 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":30:33)
#loc20 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":30:9)
#loc21 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":30:17)
#loc22 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":30:23)
#loc23 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":30:24)
#loc24 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":30:30)
#loc25 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":30:29)
#loc26 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":32:5)
#loc27 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":32:10)
#loc28 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":40:1)
#loc29 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":45:1)
#loc32 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":41:1)
#loc33 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":42:19)
#loc34 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":42:26)
#loc35 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":42:30)
#loc36 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":42:40)
#loc37 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":42:41)
#loc38 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":42:5)
#loc39 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":43:5)
#loc40 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":43:33)
#loc41 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":43:9)
#loc42 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":43:17)
#loc43 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":43:23)
#loc44 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":43:24)
#loc45 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":43:30)
#loc46 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":43:29)
#loc47 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":48:1)
#loc48 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":54:1)
#loc51 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":49:1)
#loc52 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":50:19)
#loc53 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":50:26)
#loc54 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":50:30)
#loc55 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":50:40)
#loc56 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":50:41)
#loc57 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":50:5)
#loc58 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":51:5)
#loc59 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":51:33)
#loc60 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":51:9)
#loc61 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":51:17)
#loc62 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":51:23)
#loc63 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":51:24)
#loc64 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":51:30)
#loc65 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":51:29)
#loc66 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":53:5)
#loc67 = loc("CWE415_Double_Free__malloc_free_int_62b.cpp":53:10)
#loc68 = loc(fused[#loc1, #loc2])
#loc69 = loc(fused[#loc3, #loc4])
#loc70 = loc(fused[#loc5, #loc6])
#loc71 = loc(fused[#loc7, #loc8])
#loc73 = loc(fused[#loc14, #loc15])
#loc74 = loc(fused[#loc13, #loc15])
#loc75 = loc(fused[#loc12, #loc16])
#loc76 = loc(fused[#loc17, #loc16])
#loc77 = loc(fused[#loc18, #loc19])
#loc78 = loc(fused[#loc20, #loc21])
#loc79 = loc(fused[#loc22, #loc19])
#loc80 = loc(fused[#loc28, #loc29])
#loc82 = loc(fused[#loc35, #loc36])
#loc83 = loc(fused[#loc34, #loc36])
#loc84 = loc(fused[#loc33, #loc37])
#loc85 = loc(fused[#loc38, #loc37])
#loc86 = loc(fused[#loc39, #loc40])
#loc87 = loc(fused[#loc41, #loc42])
#loc88 = loc(fused[#loc43, #loc40])
#loc89 = loc(fused[#loc47, #loc48])
#loc91 = loc(fused[#loc54, #loc55])
#loc92 = loc(fused[#loc53, #loc55])
#loc93 = loc(fused[#loc52, #loc56])
#loc94 = loc(fused[#loc57, #loc56])
#loc95 = loc(fused[#loc58, #loc59])
#loc96 = loc(fused[#loc60, #loc61])
#loc97 = loc(fused[#loc62, #loc59])
