!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":26:25)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":26:32)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":61:30)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":61:37)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":93:30)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":93:37)
#loc158 = loc(fused[#loc5, #loc6])
#loc179 = loc(fused[#loc63, #loc64])
#loc195 = loc(fused[#loc113, #loc114])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc156)
  cir.func internal private @badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc5, #loc6])) -> !cir.ptr<!s8i> extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc158)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc4)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc7)
    cir.br ^bb1 loc(#loc159)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc156)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc10)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc160)
  ^bb2:  // pred: ^bb1
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc12)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc12)
    %7 = cir.const #cir.int<65> : !s32i loc(#loc13)
    %8 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc14)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc14)
    cir.libc.memset %11 bytes from %6 set to %7 : !cir.ptr<!void>, !s32i, !u64i loc(#loc161)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc18)
    %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc18)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
    %15 = cir.const #cir.int<100> : !s32i loc(#loc20)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc20)
    %18 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %17 : !s32i), !cir.ptr<!s8i> loc(#loc22)
    cir.store %13, %18 : !s8i, !cir.ptr<!s8i> loc(#loc162)
    cir.br ^bb3 loc(#loc9)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc9)
  ^bb4:  // pred: ^bb3
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
    cir.store %19, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc163)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc163)
    cir.return %20 : !cir.ptr<!s8i> loc(#loc163)
  } loc(#loc157)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr1) loc(#loc164)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc165)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc167)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc168)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc169)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc36)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc36)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc36)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc36)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc36)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc36)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc169)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc170)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %12 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc156)
    cir.store %11, %12 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
    %14 = cir.call @badSource(%13) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc42)
    cir.store %14, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc172)
    cir.br ^bb1 loc(#loc173)
  ^bb1:  // pred: ^bb0
    %15 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc167)
    cir.store %15, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc167)
    %16 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc47)
    %17 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc48)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
    %19 = cir.call @strcat(%17, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr1) loc(#loc47)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    cir.br ^bb2 loc(#loc46)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc30)
  } loc(#loc166)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    cir.return loc(#loc53)
  } loc(#loc174)
  cir.global "private" internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc177)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc60)
  cir.func internal private @goodG2B1Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc63, #loc64])) -> !cir.ptr<!s8i> extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc179)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc62)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc65)
    cir.br ^bb1 loc(#loc180)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc177)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc68)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc68)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc181)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc60)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    cir.br ^bb4 loc(#loc70)
  ^bb3:  // pred: ^bb1
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc73)
    %9 = cir.const #cir.int<65> : !s32i loc(#loc74)
    %10 = cir.const #cir.int<50> : !s32i loc(#loc75)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc76)
    %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc75)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc75)
    cir.libc.memset %13 bytes from %8 set to %9 : !cir.ptr<!void>, !s32i, !u64i loc(#loc182)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc79)
    %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc79)
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
    %17 = cir.const #cir.int<50> : !s32i loc(#loc81)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc81)
    %20 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc83)
    cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc183)
    cir.br ^bb4 loc(#loc67)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc67)
  ^bb5:  // pred: ^bb4
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc84)
    cir.store %21, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc184)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc184)
    cir.return %22 : !cir.ptr<!s8i> loc(#loc184)
  } loc(#loc178)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc186)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc187)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc188)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc93)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc93)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc93)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc93)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc93)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc93)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc93)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc188)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc189)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc96)
    %12 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc177)
    cir.store %11, %12 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
    %14 = cir.call @goodG2B1Source(%13) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc99)
    cir.store %14, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc191)
    cir.br ^bb1 loc(#loc192)
  ^bb1:  // pred: ^bb0
    %15 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc186)
    cir.store %15, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc186)
    %16 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc104)
    %17 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc105)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc106)
    %19 = cir.call @strcat(%17, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr1) loc(#loc104)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc108)
    cir.br ^bb2 loc(#loc103)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc87)
  } loc(#loc185)
  cir.global "private" internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc193)
  cir.func internal private @goodG2B2Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc113, #loc114])) -> !cir.ptr<!s8i> extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc195)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc112)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc115)
    cir.br ^bb1 loc(#loc196)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc193)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc118)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc197)
  ^bb2:  // pred: ^bb1
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc120)
    %7 = cir.const #cir.int<65> : !s32i loc(#loc121)
    %8 = cir.const #cir.int<50> : !s32i loc(#loc122)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc123)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc122)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc122)
    cir.libc.memset %11 bytes from %6 set to %7 : !cir.ptr<!void>, !s32i, !u64i loc(#loc198)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc126)
    %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc126)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
    %15 = cir.const #cir.int<50> : !s32i loc(#loc128)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc128)
    %18 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %17 : !s32i), !cir.ptr<!s8i> loc(#loc130)
    cir.store %13, %18 : !s8i, !cir.ptr<!s8i> loc(#loc199)
    cir.br ^bb3 loc(#loc117)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc117)
  ^bb4:  // pred: ^bb3
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
    cir.store %19, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc200)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc200)
    cir.return %20 : !cir.ptr<!s8i> loc(#loc200)
  } loc(#loc194)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc202)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc203)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc204)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc140)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc140)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc140)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc140)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc140)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc140)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc140)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc204)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc205)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc143)
    %12 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc193)
    cir.store %11, %12 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
    %14 = cir.call @goodG2B2Source(%13) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc146)
    cir.store %14, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc207)
    cir.br ^bb1 loc(#loc208)
  ^bb1:  // pred: ^bb0
    %15 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc202)
    cir.store %15, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc202)
    %16 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc151)
    %17 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc152)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
    %19 = cir.call @strcat(%17, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr1) loc(#loc151)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc154)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc155)
    cir.br ^bb2 loc(#loc150)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc134)
  } loc(#loc201)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":24:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":24:24)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":26:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":35:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":27:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":28:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":33:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":28:8)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":29:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":31:16)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":31:22)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":31:27)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":31:31)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":31:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":31:32)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":32:23)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":32:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":32:14)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":32:18)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":32:19)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":34:12)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":34:5)
#loc25 = loc("/usr/include/string.h":149:1)
#loc26 = loc("/usr/include/string.h":150:14)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":37:1)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":50:1)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":45:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":45:25)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":39:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":39:12)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":40:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":40:33)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":41:12)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":41:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":42:17)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":42:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":43:22)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":43:12)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":43:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":43:26)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":44:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":49:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":47:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":47:16)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":47:22)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":48:19)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":48:9)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":119:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":123:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":121:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":121:14)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":122:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":122:14)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":57:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":57:29)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":66:19)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":61:1)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":75:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":62:1)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":63:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":73:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":63:8)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":64:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":67:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":69:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":66:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":71:16)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":71:22)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":71:27)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":71:30)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":71:9)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":71:31)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":72:22)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":72:9)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":72:14)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":72:17)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":72:18)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":74:12)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":74:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":77:1)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":90:1)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":85:9)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":85:25)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":79:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":79:12)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":80:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":80:33)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":81:12)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":81:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":82:22)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":82:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":83:27)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":83:12)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":83:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":83:31)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":84:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":89:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":87:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":87:16)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":87:22)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":88:19)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":88:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":58:1)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":58:29)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":93:1)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":102:1)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":94:1)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":95:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":100:5)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":95:8)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":96:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":98:16)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":98:22)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":98:27)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":98:30)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":98:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":98:31)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":99:22)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":99:9)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":99:14)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":99:17)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":99:18)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":101:12)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":101:5)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":104:1)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":117:1)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":112:9)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":112:25)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":106:5)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":106:12)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":107:5)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":107:33)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":108:12)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":108:5)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":109:22)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":109:5)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":110:27)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":110:12)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":110:5)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":110:31)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":111:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":116:5)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":114:9)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":114:16)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":114:22)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":115:19)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c":115:9)
#loc156 = loc(fused[#loc1, #loc2])
#loc157 = loc(fused[#loc3, #loc4])
#loc159 = loc(fused[#loc8, #loc9])
#loc160 = loc(fused[#loc11, #loc9])
#loc161 = loc(fused[#loc16, #loc17])
#loc162 = loc(fused[#loc19, #loc18])
#loc163 = loc(fused[#loc24, #loc23])
#loc164 = loc(fused[#loc25, #loc26])
#loc165 = loc(fused[#loc27, #loc28])
#loc166 = loc(fused[#loc29, #loc30])
#loc167 = loc(fused[#loc31, #loc32])
#loc168 = loc(fused[#loc33, #loc34])
#loc169 = loc(fused[#loc35, #loc36])
#loc170 = loc(fused[#loc38, #loc37])
#loc171 = loc(fused[#loc40, #loc39])
#loc172 = loc(fused[#loc43, #loc44])
#loc173 = loc(fused[#loc45, #loc46])
#loc174 = loc(fused[#loc52, #loc53])
#loc175 = loc(fused[#loc54, #loc55])
#loc176 = loc(fused[#loc56, #loc57])
#loc177 = loc(fused[#loc58, #loc59])
#loc178 = loc(fused[#loc61, #loc62])
#loc180 = loc(fused[#loc66, #loc67])
#loc181 = loc(fused[#loc69, #loc70, #loc71, #loc67])
#loc182 = loc(fused[#loc77, #loc78])
#loc183 = loc(fused[#loc80, #loc79])
#loc184 = loc(fused[#loc85, #loc84])
#loc185 = loc(fused[#loc86, #loc87])
#loc186 = loc(fused[#loc88, #loc89])
#loc187 = loc(fused[#loc90, #loc91])
#loc188 = loc(fused[#loc92, #loc93])
#loc189 = loc(fused[#loc95, #loc94])
#loc190 = loc(fused[#loc97, #loc96])
#loc191 = loc(fused[#loc100, #loc101])
#loc192 = loc(fused[#loc102, #loc103])
#loc193 = loc(fused[#loc109, #loc110])
#loc194 = loc(fused[#loc111, #loc112])
#loc196 = loc(fused[#loc116, #loc117])
#loc197 = loc(fused[#loc119, #loc117])
#loc198 = loc(fused[#loc124, #loc125])
#loc199 = loc(fused[#loc127, #loc126])
#loc200 = loc(fused[#loc132, #loc131])
#loc201 = loc(fused[#loc133, #loc134])
#loc202 = loc(fused[#loc135, #loc136])
#loc203 = loc(fused[#loc137, #loc138])
#loc204 = loc(fused[#loc139, #loc140])
#loc205 = loc(fused[#loc142, #loc141])
#loc206 = loc(fused[#loc144, #loc143])
#loc207 = loc(fused[#loc147, #loc148])
#loc208 = loc(fused[#loc149, #loc150])
