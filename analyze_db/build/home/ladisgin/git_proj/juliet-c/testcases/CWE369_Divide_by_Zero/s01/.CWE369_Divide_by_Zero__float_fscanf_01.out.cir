!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc42 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":92:10)
#loc43 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":92:14)
#loc44 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":92:20)
#loc45 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":92:32)
#loc117 = loc(fused[#loc42, #loc43])
#loc118 = loc(fused[#loc44, #loc45])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fscanf_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc101)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc102)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%f\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc103)
  cir.func no_proto @CWE369_Divide_by_Zero__float_fscanf_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc105)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc12)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc106)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc14)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc102)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc15)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!cir.float>) -> !s32i loc(#loc14)
    cir.scope {
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc108)
      %9 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc20)
      %10 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc21)
      %11 = cir.cast(floating, %10 : !cir.float), !cir.double loc(#loc21)
      %12 = cir.binop(div, %9, %11) : !cir.double loc(#loc109)
      %13 = cir.cast(float_to_int, %12 : !cir.double), !s32i loc(#loc109)
      cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc108)
      %14 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc23)
    } loc(#loc107)
    cir.return loc(#loc9)
  } loc(#loc104)
  cir.func no_proto @CWE369_Divide_by_Zero__float_fscanf_01_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc111)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc112)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc110)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc113)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc114)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc115)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc39)
  cir.func @main(%arg0: !s32i loc(fused[#loc42, #loc43]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc44, #loc45])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc117)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc118)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc41)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc46)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc46)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc47)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc48)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc48)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc49)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc36)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    %8 = cir.get_global @CWE369_Divide_by_Zero__float_fscanf_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc119)
    cir.call @CWE369_Divide_by_Zero__float_fscanf_01_good() : () -> () loc(#loc51)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc38)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %13 = cir.get_global @CWE369_Divide_by_Zero__float_fscanf_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc120)
    cir.call @CWE369_Divide_by_Zero__float_fscanf_01_bad() : () -> () loc(#loc55)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc39)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc58)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    cir.return %17 : !s32i loc(#loc121)
  } loc(#loc116)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc123)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc64)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc124)
    %2 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc66)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc125)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc127)
      %4 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc72)
      %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc73)
      %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc73)
      %7 = cir.binop(div, %4, %6) : !cir.double loc(#loc128)
      %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc128)
      cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc127)
      %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc74)
      cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc75)
    } loc(#loc126)
    cir.return loc(#loc61)
  } loc(#loc122)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc76)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc130)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc81)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc131)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc83)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc102)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc84)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc85)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc85)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!cir.float>) -> !s32i loc(#loc83)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc88)
      %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc88)
      %10 = cir.fabs %9 : !cir.double loc(#loc88)
      %11 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc89)
      %12 = cir.cmp(gt, %10, %11) : !cir.double, !cir.bool loc(#loc133)
      cir.if %12 {
        %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc135)
        %14 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc96)
        %15 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc97)
        %16 = cir.cast(floating, %15 : !cir.float), !cir.double loc(#loc97)
        %17 = cir.binop(div, %14, %16) : !cir.double loc(#loc136)
        %18 = cir.cast(float_to_int, %17 : !cir.double), !s32i loc(#loc136)
        cir.store %18, %13 : !s32i, !cir.ptr<!s32i> loc(#loc135)
        %19 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc98)
        cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc99)
      } else {
        %13 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc76)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc76)
        cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc100)
      } loc(#loc134)
    } loc(#loc132)
    cir.return loc(#loc78)
  } loc(#loc129)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fscanf_01.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":30:20)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":24:1)
#loc9 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":36:1)
#loc10 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":26:5)
#loc11 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":26:11)
#loc12 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":28:12)
#loc13 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":28:5)
#loc14 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":30:5)
#loc15 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":30:13)
#loc16 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":31:5)
#loc17 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":35:5)
#loc18 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":33:9)
#loc19 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":33:40)
#loc20 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":33:28)
#loc21 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":33:36)
#loc22 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":34:22)
#loc23 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":34:9)
#loc24 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":77:1)
#loc25 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":81:1)
#loc26 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":79:5)
#loc27 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":79:13)
#loc28 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":80:5)
#loc29 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":80:13)
#loc30 = loc("/usr/include/stdlib.h":575:1)
#loc31 = loc("/usr/include/stdlib.h":575:41)
#loc32 = loc("/usr/include/time.h":76:1)
#loc33 = loc("/usr/include/time.h":76:38)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":97:15)
#loc37 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":99:15)
#loc38 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":102:15)
#loc39 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":104:15)
#loc40 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":92:1)
#loc41 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":107:1)
#loc46 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":93:1)
#loc47 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":95:27)
#loc48 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":95:22)
#loc49 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":95:5)
#loc50 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":97:5)
#loc51 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":98:5)
#loc52 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":98:49)
#loc53 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":99:5)
#loc54 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":102:5)
#loc55 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":103:5)
#loc56 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":103:48)
#loc57 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":104:5)
#loc58 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":106:12)
#loc59 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":106:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":43:1)
#loc61 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":55:1)
#loc62 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":45:5)
#loc63 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":45:11)
#loc64 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":47:12)
#loc65 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":47:5)
#loc66 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":49:12)
#loc67 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":49:5)
#loc68 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":50:5)
#loc69 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":54:5)
#loc70 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":52:9)
#loc71 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":52:40)
#loc72 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":52:28)
#loc73 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":52:36)
#loc74 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":53:22)
#loc75 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":53:9)
#loc76 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":73:19)
#loc77 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":58:1)
#loc78 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":75:1)
#loc79 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":60:5)
#loc80 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":60:11)
#loc81 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":62:12)
#loc82 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":62:5)
#loc83 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":64:5)
#loc84 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":64:13)
#loc85 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":64:20)
#loc86 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":66:5)
#loc87 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":74:5)
#loc88 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":66:13)
#loc89 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":66:21)
#loc90 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":66:8)
#loc91 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":67:5)
#loc92 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":70:5)
#loc93 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":72:5)
#loc94 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":68:9)
#loc95 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":68:40)
#loc96 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":68:28)
#loc97 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":68:36)
#loc98 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":69:22)
#loc99 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":69:9)
#loc100 = loc("CWE369_Divide_by_Zero__float_fscanf_01.c":73:9)
#loc101 = loc(fused[#loc1, #loc2])
#loc102 = loc(fused[#loc3, #loc4])
#loc103 = loc(fused[#loc6, #loc7])
#loc104 = loc(fused[#loc8, #loc9])
#loc105 = loc(fused[#loc10, #loc11])
#loc106 = loc(fused[#loc13, #loc12])
#loc107 = loc(fused[#loc16, #loc17])
#loc108 = loc(fused[#loc18, #loc19])
#loc109 = loc(fused[#loc20, #loc21])
#loc110 = loc(fused[#loc24, #loc25])
#loc111 = loc(fused[#loc26, #loc27])
#loc112 = loc(fused[#loc28, #loc29])
#loc113 = loc(fused[#loc30, #loc31])
#loc114 = loc(fused[#loc32, #loc33])
#loc115 = loc(fused[#loc34, #loc35])
#loc116 = loc(fused[#loc40, #loc41])
#loc119 = loc(fused[#loc51, #loc52])
#loc120 = loc(fused[#loc55, #loc56])
#loc121 = loc(fused[#loc59, #loc58])
#loc122 = loc(fused[#loc60, #loc61])
#loc123 = loc(fused[#loc62, #loc63])
#loc124 = loc(fused[#loc65, #loc64])
#loc125 = loc(fused[#loc67, #loc66])
#loc126 = loc(fused[#loc68, #loc69])
#loc127 = loc(fused[#loc70, #loc71])
#loc128 = loc(fused[#loc72, #loc73])
#loc129 = loc(fused[#loc77, #loc78])
#loc130 = loc(fused[#loc79, #loc80])
#loc131 = loc(fused[#loc82, #loc81])
#loc132 = loc(fused[#loc86, #loc87])
#loc133 = loc(fused[#loc90, #loc89])
#loc134 = loc(fused[#loc91, #loc92, #loc93, #loc87])
#loc135 = loc(fused[#loc94, #loc95])
#loc136 = loc(fused[#loc96, #loc97])
