!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_square_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc520)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc521)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc522)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc523)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc524)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc525)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc526)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc527)
  cir.func private @close(!s32i) -> !s32i loc(#loc528)
  cir.func private @printIntLine(!s32i) loc(#loc529)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc21)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc530)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc24)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_square_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc532)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc29)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc533)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc535)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc535)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc33)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc33)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc538)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc539)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc540)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc541)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc542)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc45)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc45)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc540)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc47)
          %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc47)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc541)
          cir.scope {
            cir.do {
              cir.scope {
                %15 = cir.const #cir.int<2> : !s32i loc(#loc54)
                %16 = cir.const #cir.int<1> : !s32i loc(#loc55)
                %17 = cir.const #cir.int<6> : !s32i loc(#loc56)
                %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc57)
                cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc545)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc62)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc63)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc63)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc547)
                  cir.if %63 {
                    cir.break loc(#loc65)
                  } loc(#loc548)
                } loc(#loc546)
                %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc549)
                %20 = cir.const #cir.int<0> : !s32i loc(#loc68)
                %21 = cir.const #cir.int<16> : !u64i loc(#loc550)
                cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc551)
                %22 = cir.const #cir.int<2> : !s32i loc(#loc73)
                %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc73)
                %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
                cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc552)
                %25 = cir.const #cir.int<0> : !s32i loc(#loc76)
                %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc76)
                %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
                %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
                cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc553)
                %29 = cir.const #cir.int<27015> : !s32i loc(#loc80)
                %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc80)
                %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc81)
                %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
                cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc554)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc87)
                  %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc556)
                  %62 = cir.const #cir.int<16> : !u64i loc(#loc557)
                  %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc557)
                  %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc92)
                  %65 = cir.const #cir.int<1> : !s32i loc(#loc93)
                  %66 = cir.unary(minus, %65) nsw : !s32i, !s32i loc(#loc93)
                  %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc558)
                  cir.if %67 {
                    cir.break loc(#loc95)
                  } loc(#loc559)
                } loc(#loc555)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc98)
                  %61 = cir.const #cir.int<5> : !s32i loc(#loc99)
                  %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc100)
                  %63 = cir.const #cir.int<1> : !s32i loc(#loc101)
                  %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc101)
                  %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc561)
                  cir.if %65 {
                    cir.break loc(#loc103)
                  } loc(#loc562)
                } loc(#loc560)
                %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc104)
                %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc105)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc106)
                %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc107)
                cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc563)
                cir.scope {
                  %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc112)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc113)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc113)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc565)
                  cir.if %63 {
                    cir.break loc(#loc115)
                  } loc(#loc566)
                } loc(#loc564)
                %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc117)
                %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc117)
                %40 = cir.const #cir.int<3> : !s32i loc(#loc118)
                %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc118)
                %42 = cir.const #cir.int<4> : !u64i loc(#loc118)
                %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc118)
                %44 = cir.const #cir.int<2> : !s32i loc(#loc118)
                %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc118)
                %46 = cir.binop(add, %43, %45) : !u64i loc(#loc118)
                %47 = cir.const #cir.int<1> : !s32i loc(#loc119)
                %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc119)
                %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc567)
                %50 = cir.const #cir.int<0> : !s32i loc(#loc120)
                %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc121)
                %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc121)
                cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc568)
                cir.scope {
                  %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc126)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc127)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc127)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc570)
                  %64 = cir.ternary(%63, true {
                    %65 = cir.const #true loc(#loc128)
                    cir.yield %65 : !cir.bool loc(#loc128)
                  }, false {
                    %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc129)
                    %66 = cir.const #cir.int<0> : !s32i loc(#loc130)
                    %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc571)
                    %68 = cir.ternary(%67, true {
                      %69 = cir.const #true loc(#loc128)
                      cir.yield %69 : !cir.bool loc(#loc128)
                    }, false {
                      %69 = cir.const #false loc(#loc128)
                      cir.yield %69 : !cir.bool loc(#loc128)
                    }) : (!cir.bool) -> !cir.bool loc(#loc128)
                    cir.yield %68 : !cir.bool loc(#loc128)
                  }) : (!cir.bool) -> !cir.bool loc(#loc128)
                  cir.if %64 {
                    cir.break loc(#loc132)
                  } loc(#loc572)
                } loc(#loc569)
                %53 = cir.const #cir.int<0> : !s32i loc(#loc133)
                %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc133)
                %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc134)
                %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc135)
                %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc135)
                cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc573)
                %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc136)
                %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc137)
                cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc574)
              } loc(#loc544)
              cir.yield loc(#loc51)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc140)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc140)
              cir.condition(%16) loc(#loc140)
            } loc(#loc543)
          } loc(#loc543)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc143)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc144)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc144)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc576)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc146)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc147)
            } loc(#loc577)
          } loc(#loc575)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc150)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc151)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc151)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc579)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc153)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc154)
            } loc(#loc580)
          } loc(#loc578)
        } loc(#loc537)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc155)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc581)
      } loc(#loc536)
    } loc(#loc534)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc583)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc583)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc159)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc159)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc586)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc168)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc167)
          %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc168)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc586)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc169)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc170)
        } loc(#loc585)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc173)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc174)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc174)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc174)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc174)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc588)
          %12 = cir.ternary(%11, true {
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc176)
            %14 = cir.abs %13 poison : !s32i loc(#loc177)
            %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc177)
            %16 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc178)
            %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc179)
            %18 = cir.cast(int_to_float, %17 : !s32i), !cir.double loc(#loc179)
            %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc178)
            %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc178)
            %21 = cir.cmp(lt, %15, %20) : !s64i, !cir.bool loc(#loc589)
            %22 = cir.ternary(%21, true {
              %23 = cir.const #true loc(#loc175)
              cir.yield %23 : !cir.bool loc(#loc175)
            }, false {
              %23 = cir.const #false loc(#loc175)
              cir.yield %23 : !cir.bool loc(#loc175)
            }) : (!cir.bool) -> !cir.bool loc(#loc175)
            cir.yield %22 : !cir.bool loc(#loc175)
          }, false {
            %13 = cir.const #false loc(#loc175)
            cir.yield %13 : !cir.bool loc(#loc175)
          }) : (!cir.bool) -> !cir.bool loc(#loc175)
          cir.if %12 {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc591)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc186)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc185)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc186)
            cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc591)
            %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc187)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc188)
          } else {
            %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc24)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc24)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc189)
          } loc(#loc590)
        } loc(#loc587)
      } loc(#loc584)
    } loc(#loc582)
    cir.return loc(#loc26)
  } loc(#loc531)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_square_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc593)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc192)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc594)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc194)
    cir.return loc(#loc191)
  } loc(#loc592)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc596)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc200)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc597)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc599)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc599)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc204)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc204)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc602)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc603)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc604)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc605)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc606)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc216)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc216)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc604)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc218)
          %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc218)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc605)
          cir.scope {
            cir.do {
              cir.scope {
                %15 = cir.const #cir.int<2> : !s32i loc(#loc225)
                %16 = cir.const #cir.int<1> : !s32i loc(#loc226)
                %17 = cir.const #cir.int<6> : !s32i loc(#loc227)
                %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc228)
                cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc609)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc233)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc234)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc234)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc611)
                  cir.if %63 {
                    cir.break loc(#loc236)
                  } loc(#loc612)
                } loc(#loc610)
                %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc613)
                %20 = cir.const #cir.int<0> : !s32i loc(#loc239)
                %21 = cir.const #cir.int<16> : !u64i loc(#loc614)
                cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc615)
                %22 = cir.const #cir.int<2> : !s32i loc(#loc244)
                %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc244)
                %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
                cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc616)
                %25 = cir.const #cir.int<0> : !s32i loc(#loc246)
                %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc246)
                %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
                %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
                cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc617)
                %29 = cir.const #cir.int<27015> : !s32i loc(#loc248)
                %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc248)
                %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc249)
                %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
                cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc618)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc254)
                  %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc620)
                  %62 = cir.const #cir.int<16> : !u64i loc(#loc621)
                  %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc621)
                  %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc259)
                  %65 = cir.const #cir.int<1> : !s32i loc(#loc260)
                  %66 = cir.unary(minus, %65) nsw : !s32i, !s32i loc(#loc260)
                  %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc622)
                  cir.if %67 {
                    cir.break loc(#loc262)
                  } loc(#loc623)
                } loc(#loc619)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc265)
                  %61 = cir.const #cir.int<5> : !s32i loc(#loc266)
                  %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc267)
                  %63 = cir.const #cir.int<1> : !s32i loc(#loc268)
                  %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc268)
                  %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc625)
                  cir.if %65 {
                    cir.break loc(#loc270)
                  } loc(#loc626)
                } loc(#loc624)
                %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc271)
                %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc272)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc273)
                %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc274)
                cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc627)
                cir.scope {
                  %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc279)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc280)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc280)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc629)
                  cir.if %63 {
                    cir.break loc(#loc282)
                  } loc(#loc630)
                } loc(#loc628)
                %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc283)
                %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc284)
                %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc284)
                %40 = cir.const #cir.int<3> : !s32i loc(#loc285)
                %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc285)
                %42 = cir.const #cir.int<4> : !u64i loc(#loc285)
                %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc285)
                %44 = cir.const #cir.int<2> : !s32i loc(#loc285)
                %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc285)
                %46 = cir.binop(add, %43, %45) : !u64i loc(#loc285)
                %47 = cir.const #cir.int<1> : !s32i loc(#loc286)
                %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc286)
                %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc631)
                %50 = cir.const #cir.int<0> : !s32i loc(#loc287)
                %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc288)
                %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc288)
                cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc632)
                cir.scope {
                  %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc293)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc294)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc294)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc634)
                  %64 = cir.ternary(%63, true {
                    %65 = cir.const #true loc(#loc295)
                    cir.yield %65 : !cir.bool loc(#loc295)
                  }, false {
                    %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc296)
                    %66 = cir.const #cir.int<0> : !s32i loc(#loc297)
                    %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc635)
                    %68 = cir.ternary(%67, true {
                      %69 = cir.const #true loc(#loc295)
                      cir.yield %69 : !cir.bool loc(#loc295)
                    }, false {
                      %69 = cir.const #false loc(#loc295)
                      cir.yield %69 : !cir.bool loc(#loc295)
                    }) : (!cir.bool) -> !cir.bool loc(#loc295)
                    cir.yield %68 : !cir.bool loc(#loc295)
                  }) : (!cir.bool) -> !cir.bool loc(#loc295)
                  cir.if %64 {
                    cir.break loc(#loc299)
                  } loc(#loc636)
                } loc(#loc633)
                %53 = cir.const #cir.int<0> : !s32i loc(#loc300)
                %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc300)
                %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc301)
                %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc302)
                %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc302)
                cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc637)
                %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc303)
                %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc304)
                cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc638)
              } loc(#loc608)
              cir.yield loc(#loc222)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc307)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc307)
              cir.condition(%16) loc(#loc307)
            } loc(#loc607)
          } loc(#loc607)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc310)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc311)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc311)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc640)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc313)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc314)
            } loc(#loc641)
          } loc(#loc639)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc317)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc318)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc318)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc643)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc320)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc321)
            } loc(#loc644)
          } loc(#loc642)
        } loc(#loc601)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc646)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc647)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc648)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc649)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc650)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc329)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc329)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc648)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc331)
          %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc331)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc649)
          cir.scope {
            cir.do {
              cir.scope {
                %15 = cir.const #cir.int<2> : !s32i loc(#loc338)
                %16 = cir.const #cir.int<1> : !s32i loc(#loc339)
                %17 = cir.const #cir.int<6> : !s32i loc(#loc340)
                %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc341)
                cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc653)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc346)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc347)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc347)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc655)
                  cir.if %63 {
                    cir.break loc(#loc349)
                  } loc(#loc656)
                } loc(#loc654)
                %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc657)
                %20 = cir.const #cir.int<0> : !s32i loc(#loc352)
                %21 = cir.const #cir.int<16> : !u64i loc(#loc658)
                cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc659)
                %22 = cir.const #cir.int<2> : !s32i loc(#loc357)
                %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc357)
                %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
                cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc660)
                %25 = cir.const #cir.int<0> : !s32i loc(#loc359)
                %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc359)
                %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
                %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
                cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc661)
                %29 = cir.const #cir.int<27015> : !s32i loc(#loc361)
                %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc361)
                %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc362)
                %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
                cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc662)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc367)
                  %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc664)
                  %62 = cir.const #cir.int<16> : !u64i loc(#loc665)
                  %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc665)
                  %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc372)
                  %65 = cir.const #cir.int<1> : !s32i loc(#loc373)
                  %66 = cir.unary(minus, %65) nsw : !s32i, !s32i loc(#loc373)
                  %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc666)
                  cir.if %67 {
                    cir.break loc(#loc375)
                  } loc(#loc667)
                } loc(#loc663)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc378)
                  %61 = cir.const #cir.int<5> : !s32i loc(#loc379)
                  %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc380)
                  %63 = cir.const #cir.int<1> : !s32i loc(#loc381)
                  %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc381)
                  %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc669)
                  cir.if %65 {
                    cir.break loc(#loc383)
                  } loc(#loc670)
                } loc(#loc668)
                %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc384)
                %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc385)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc386)
                %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc387)
                cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc671)
                cir.scope {
                  %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc392)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc393)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc393)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc673)
                  cir.if %63 {
                    cir.break loc(#loc395)
                  } loc(#loc674)
                } loc(#loc672)
                %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc396)
                %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc397)
                %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc397)
                %40 = cir.const #cir.int<3> : !s32i loc(#loc398)
                %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc398)
                %42 = cir.const #cir.int<4> : !u64i loc(#loc398)
                %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc398)
                %44 = cir.const #cir.int<2> : !s32i loc(#loc398)
                %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc398)
                %46 = cir.binop(add, %43, %45) : !u64i loc(#loc398)
                %47 = cir.const #cir.int<1> : !s32i loc(#loc399)
                %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc399)
                %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc675)
                %50 = cir.const #cir.int<0> : !s32i loc(#loc400)
                %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc401)
                %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc401)
                cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc676)
                cir.scope {
                  %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc406)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc407)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc407)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc678)
                  %64 = cir.ternary(%63, true {
                    %65 = cir.const #true loc(#loc408)
                    cir.yield %65 : !cir.bool loc(#loc408)
                  }, false {
                    %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc409)
                    %66 = cir.const #cir.int<0> : !s32i loc(#loc410)
                    %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc679)
                    %68 = cir.ternary(%67, true {
                      %69 = cir.const #true loc(#loc408)
                      cir.yield %69 : !cir.bool loc(#loc408)
                    }, false {
                      %69 = cir.const #false loc(#loc408)
                      cir.yield %69 : !cir.bool loc(#loc408)
                    }) : (!cir.bool) -> !cir.bool loc(#loc408)
                    cir.yield %68 : !cir.bool loc(#loc408)
                  }) : (!cir.bool) -> !cir.bool loc(#loc408)
                  cir.if %64 {
                    cir.break loc(#loc412)
                  } loc(#loc680)
                } loc(#loc677)
                %53 = cir.const #cir.int<0> : !s32i loc(#loc413)
                %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc413)
                %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc414)
                %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc415)
                %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc415)
                cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc681)
                %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc416)
                %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc417)
                cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc682)
              } loc(#loc652)
              cir.yield loc(#loc335)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc420)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc420)
              cir.condition(%16) loc(#loc420)
            } loc(#loc651)
          } loc(#loc651)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc423)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc424)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc424)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc684)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc426)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc427)
            } loc(#loc685)
          } loc(#loc683)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc430)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc431)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc431)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc687)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc433)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc434)
            } loc(#loc688)
          } loc(#loc686)
        } loc(#loc645)
      } loc(#loc600)
    } loc(#loc598)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc690)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc690)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc437)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc437)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc444)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc445)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc445)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc445)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc445)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc693)
          %12 = cir.ternary(%11, true {
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc447)
            %14 = cir.abs %13 poison : !s32i loc(#loc448)
            %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc448)
            %16 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc449)
            %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc450)
            %18 = cir.cast(int_to_float, %17 : !s32i), !cir.double loc(#loc450)
            %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc449)
            %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc449)
            %21 = cir.cmp(lt, %15, %20) : !s64i, !cir.bool loc(#loc694)
            %22 = cir.ternary(%21, true {
              %23 = cir.const #true loc(#loc446)
              cir.yield %23 : !cir.bool loc(#loc446)
            }, false {
              %23 = cir.const #false loc(#loc446)
              cir.yield %23 : !cir.bool loc(#loc446)
            }) : (!cir.bool) -> !cir.bool loc(#loc446)
            cir.yield %22 : !cir.bool loc(#loc446)
          }, false {
            %13 = cir.const #false loc(#loc446)
            cir.yield %13 : !cir.bool loc(#loc446)
          }) : (!cir.bool) -> !cir.bool loc(#loc446)
          cir.if %12 {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc696)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc457)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc456)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc457)
            cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc696)
            %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc458)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc459)
          } else {
            %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc460)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc460)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc461)
          } loc(#loc695)
        } loc(#loc692)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc464)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc465)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc465)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc465)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc465)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc698)
          %12 = cir.ternary(%11, true {
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc467)
            %14 = cir.abs %13 poison : !s32i loc(#loc468)
            %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc468)
            %16 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc469)
            %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc470)
            %18 = cir.cast(int_to_float, %17 : !s32i), !cir.double loc(#loc470)
            %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc469)
            %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc469)
            %21 = cir.cmp(lt, %15, %20) : !s64i, !cir.bool loc(#loc699)
            %22 = cir.ternary(%21, true {
              %23 = cir.const #true loc(#loc466)
              cir.yield %23 : !cir.bool loc(#loc466)
            }, false {
              %23 = cir.const #false loc(#loc466)
              cir.yield %23 : !cir.bool loc(#loc466)
            }) : (!cir.bool) -> !cir.bool loc(#loc466)
            cir.yield %22 : !cir.bool loc(#loc466)
          }, false {
            %13 = cir.const #false loc(#loc466)
            cir.yield %13 : !cir.bool loc(#loc466)
          }) : (!cir.bool) -> !cir.bool loc(#loc466)
          cir.if %12 {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc701)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc477)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc476)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc477)
            cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc701)
            %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc478)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc479)
          } else {
            %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc480)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc480)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc481)
          } loc(#loc700)
        } loc(#loc697)
      } loc(#loc691)
    } loc(#loc689)
    cir.return loc(#loc197)
  } loc(#loc595)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc703)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc486)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc704)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc706)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc706)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc490)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc490)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc495)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc708)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc497)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc709)
      } loc(#loc707)
    } loc(#loc705)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc711)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc711)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc501)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc501)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc714)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc510)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc509)
          %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc510)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc714)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc511)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc512)
        } loc(#loc713)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc716)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc517)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc516)
          %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc517)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc716)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc518)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc519)
        } loc(#loc715)
      } loc(#loc712)
    } loc(#loc710)
    cir.return loc(#loc483)
  } loc(#loc702)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_square_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc4 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":402:1)
#loc6 = loc("/usr/include/netinet/in.h":403:40)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc15 = loc("/usr/include/stdlib.h":105:1)
#loc16 = loc("/usr/include/stdlib.h":106:33)
#loc17 = loc("/usr/include/unistd.h":358:1)
#loc18 = loc("/usr/include/unistd.h":358:27)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc21 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":146:23)
#loc25 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":46:1)
#loc26 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":149:1)
#loc27 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":48:5)
#loc28 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":48:9)
#loc29 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":50:12)
#loc30 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":50:5)
#loc31 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":51:5)
#loc32 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":127:5)
#loc33 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":51:8)
#loc34 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":51:33)
#loc35 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":52:5)
#loc36 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":122:5)
#loc37 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":124:5)
#loc38 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":53:9)
#loc39 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":121:9)
#loc40 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":58:13)
#loc41 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":58:17)
#loc42 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":59:13)
#loc43 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":59:32)
#loc44 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":60:13)
#loc45 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":60:35)
#loc46 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":61:13)
#loc47 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":61:35)
#loc48 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":62:13)
#loc49 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":62:45)
#loc50 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":63:13)
#loc51 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":106:21)
#loc52 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":64:13)
#loc53 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":105:13)
#loc54 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":73:39)
#loc55 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":73:48)
#loc56 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":73:61)
#loc57 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":73:32)
#loc58 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":73:17)
#loc59 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":73:72)
#loc60 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":74:17)
#loc61 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":77:17)
#loc62 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":74:21)
#loc63 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":74:37)
#loc64 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":75:17)
#loc65 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":76:21)
#loc66 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":78:24)
#loc67 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":78:25)
#loc68 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":78:34)
#loc69 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":78:37)
#loc70 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":78:51)
#loc71 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":78:17)
#loc72 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":78:52)
#loc73 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":79:38)
#loc74 = loc("/usr/include/netinet/in.h":249:5)
#loc75 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":79:17)
#loc76 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":80:43)
#loc77 = loc("/usr/include/netinet/in.h":251:20)
#loc78 = loc("/usr/include/netinet/in.h":33:15)
#loc79 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":80:17)
#loc80 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":81:42)
#loc81 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":81:36)
#loc82 = loc("/usr/include/netinet/in.h":250:15)
#loc83 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":81:17)
#loc84 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":81:50)
#loc85 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":82:17)
#loc86 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":85:17)
#loc87 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":82:26)
#loc88 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":82:58)
#loc89 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":82:59)
#loc90 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":82:68)
#loc91 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":82:82)
#loc92 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":82:21)
#loc93 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":82:88)
#loc94 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":83:17)
#loc95 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":84:21)
#loc96 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":86:17)
#loc97 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":89:17)
#loc98 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":86:28)
#loc99 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":86:42)
#loc100 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":86:21)
#loc101 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":86:61)
#loc102 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":87:17)
#loc103 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":88:21)
#loc104 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":90:39)
#loc105 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":90:53)
#loc106 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":90:59)
#loc107 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":90:32)
#loc108 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":90:17)
#loc109 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":90:63)
#loc110 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":91:17)
#loc111 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":94:17)
#loc112 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":91:21)
#loc113 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":91:37)
#loc114 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":92:17)
#loc115 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":93:21)
#loc116 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":96:35)
#loc117 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":96:49)
#loc118 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":96:62)
#loc119 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":96:80)
#loc120 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":96:83)
#loc121 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":96:30)
#loc122 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":96:17)
#loc123 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":96:84)
#loc124 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":97:17)
#loc125 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":100:17)
#loc126 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":97:21)
#loc127 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":97:35)
#loc128 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":97:48)
#loc129 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":97:51)
#loc130 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":97:65)
#loc131 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":98:17)
#loc132 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":99:21)
#loc133 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":102:43)
#loc134 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":102:29)
#loc135 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":102:17)
#loc136 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":104:29)
#loc137 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":104:24)
#loc138 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":104:17)
#loc139 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":104:40)
#loc140 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":106:20)
#loc141 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":107:13)
#loc142 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":110:13)
#loc143 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":107:17)
#loc144 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":107:33)
#loc145 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":108:13)
#loc146 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":109:30)
#loc147 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":109:17)
#loc148 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":111:13)
#loc149 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":114:13)
#loc150 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":111:17)
#loc151 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":111:33)
#loc152 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":112:13)
#loc153 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":113:30)
#loc154 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":113:17)
#loc155 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":126:16)
#loc156 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":126:9)
#loc157 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":128:5)
#loc158 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":148:5)
#loc159 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":128:8)
#loc160 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":128:33)
#loc161 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":129:5)
#loc162 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":135:5)
#loc163 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":137:5)
#loc164 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":130:9)
#loc165 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":134:9)
#loc166 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":132:13)
#loc167 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":132:33)
#loc168 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":132:26)
#loc169 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":133:26)
#loc170 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":133:13)
#loc171 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":139:9)
#loc172 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":147:9)
#loc173 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":139:13)
#loc174 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":139:20)
#loc175 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":139:28)
#loc176 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":139:35)
#loc177 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":139:31)
#loc178 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":139:49)
#loc179 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":139:62)
#loc180 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":139:69)
#loc181 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":140:9)
#loc182 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":143:9)
#loc183 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":145:9)
#loc184 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":141:13)
#loc185 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":141:33)
#loc186 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":141:26)
#loc187 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":142:26)
#loc188 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":142:13)
#loc189 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":146:13)
#loc190 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":371:1)
#loc191 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":375:1)
#loc192 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":373:5)
#loc193 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":373:13)
#loc194 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":374:5)
#loc195 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":374:13)
#loc196 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":158:1)
#loc197 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":333:1)
#loc198 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":160:5)
#loc199 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":160:9)
#loc200 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":162:12)
#loc201 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":162:5)
#loc202 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":163:5)
#loc203 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":306:5)
#loc204 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":163:8)
#loc205 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":163:33)
#loc206 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":164:5)
#loc207 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":234:5)
#loc208 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":236:5)
#loc209 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":165:9)
#loc210 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":233:9)
#loc211 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":170:13)
#loc212 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":170:17)
#loc213 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":171:13)
#loc214 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":171:32)
#loc215 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":172:13)
#loc216 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":172:35)
#loc217 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":173:13)
#loc218 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":173:35)
#loc219 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":174:13)
#loc220 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":174:45)
#loc221 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":175:13)
#loc222 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":218:21)
#loc223 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":176:13)
#loc224 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":217:13)
#loc225 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":185:39)
#loc226 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":185:48)
#loc227 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":185:61)
#loc228 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":185:32)
#loc229 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":185:17)
#loc230 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":185:72)
#loc231 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":186:17)
#loc232 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":189:17)
#loc233 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":186:21)
#loc234 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":186:37)
#loc235 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":187:17)
#loc236 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":188:21)
#loc237 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":190:24)
#loc238 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":190:25)
#loc239 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":190:34)
#loc240 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":190:37)
#loc241 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":190:51)
#loc242 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":190:17)
#loc243 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":190:52)
#loc244 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":191:38)
#loc245 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":191:17)
#loc246 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":192:43)
#loc247 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":192:17)
#loc248 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":193:42)
#loc249 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":193:36)
#loc250 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":193:17)
#loc251 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":193:50)
#loc252 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":194:17)
#loc253 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":197:17)
#loc254 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":194:26)
#loc255 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":194:58)
#loc256 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":194:59)
#loc257 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":194:68)
#loc258 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":194:82)
#loc259 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":194:21)
#loc260 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":194:88)
#loc261 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":195:17)
#loc262 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":196:21)
#loc263 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":198:17)
#loc264 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":201:17)
#loc265 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":198:28)
#loc266 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":198:42)
#loc267 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":198:21)
#loc268 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":198:61)
#loc269 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":199:17)
#loc270 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":200:21)
#loc271 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":202:39)
#loc272 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":202:53)
#loc273 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":202:59)
#loc274 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":202:32)
#loc275 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":202:17)
#loc276 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":202:63)
#loc277 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":203:17)
#loc278 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":206:17)
#loc279 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":203:21)
#loc280 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":203:37)
#loc281 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":204:17)
#loc282 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":205:21)
#loc283 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":208:35)
#loc284 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":208:49)
#loc285 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":208:62)
#loc286 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":208:80)
#loc287 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":208:83)
#loc288 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":208:30)
#loc289 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":208:17)
#loc290 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":208:84)
#loc291 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":209:17)
#loc292 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":212:17)
#loc293 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":209:21)
#loc294 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":209:35)
#loc295 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":209:48)
#loc296 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":209:51)
#loc297 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":209:65)
#loc298 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":210:17)
#loc299 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":211:21)
#loc300 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":214:43)
#loc301 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":214:29)
#loc302 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":214:17)
#loc303 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":216:29)
#loc304 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":216:24)
#loc305 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":216:17)
#loc306 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":216:40)
#loc307 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":218:20)
#loc308 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":219:13)
#loc309 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":222:13)
#loc310 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":219:17)
#loc311 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":219:33)
#loc312 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":220:13)
#loc313 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":221:30)
#loc314 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":221:17)
#loc315 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":223:13)
#loc316 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":226:13)
#loc317 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":223:17)
#loc318 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":223:33)
#loc319 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":224:13)
#loc320 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":225:30)
#loc321 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":225:17)
#loc322 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":237:9)
#loc323 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":305:9)
#loc324 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":242:13)
#loc325 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":242:17)
#loc326 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":243:13)
#loc327 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":243:32)
#loc328 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":244:13)
#loc329 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":244:35)
#loc330 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":245:13)
#loc331 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":245:35)
#loc332 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":246:13)
#loc333 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":246:45)
#loc334 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":247:13)
#loc335 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":290:21)
#loc336 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":248:13)
#loc337 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":289:13)
#loc338 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":257:39)
#loc339 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":257:48)
#loc340 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":257:61)
#loc341 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":257:32)
#loc342 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":257:17)
#loc343 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":257:72)
#loc344 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":258:17)
#loc345 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":261:17)
#loc346 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":258:21)
#loc347 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":258:37)
#loc348 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":259:17)
#loc349 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":260:21)
#loc350 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":262:24)
#loc351 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":262:25)
#loc352 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":262:34)
#loc353 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":262:37)
#loc354 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":262:51)
#loc355 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":262:17)
#loc356 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":262:52)
#loc357 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":263:38)
#loc358 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":263:17)
#loc359 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":264:43)
#loc360 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":264:17)
#loc361 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":265:42)
#loc362 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":265:36)
#loc363 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":265:17)
#loc364 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":265:50)
#loc365 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":266:17)
#loc366 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":269:17)
#loc367 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":266:26)
#loc368 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":266:58)
#loc369 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":266:59)
#loc370 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":266:68)
#loc371 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":266:82)
#loc372 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":266:21)
#loc373 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":266:88)
#loc374 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":267:17)
#loc375 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":268:21)
#loc376 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":270:17)
#loc377 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":273:17)
#loc378 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":270:28)
#loc379 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":270:42)
#loc380 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":270:21)
#loc381 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":270:61)
#loc382 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":271:17)
#loc383 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":272:21)
#loc384 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":274:39)
#loc385 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":274:53)
#loc386 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":274:59)
#loc387 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":274:32)
#loc388 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":274:17)
#loc389 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":274:63)
#loc390 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":275:17)
#loc391 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":278:17)
#loc392 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":275:21)
#loc393 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":275:37)
#loc394 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":276:17)
#loc395 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":277:21)
#loc396 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":280:35)
#loc397 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":280:49)
#loc398 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":280:62)
#loc399 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":280:80)
#loc400 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":280:83)
#loc401 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":280:30)
#loc402 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":280:17)
#loc403 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":280:84)
#loc404 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":281:17)
#loc405 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":284:17)
#loc406 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":281:21)
#loc407 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":281:35)
#loc408 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":281:48)
#loc409 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":281:51)
#loc410 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":281:65)
#loc411 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":282:17)
#loc412 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":283:21)
#loc413 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":286:43)
#loc414 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":286:29)
#loc415 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":286:17)
#loc416 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":288:29)
#loc417 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":288:24)
#loc418 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":288:17)
#loc419 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":288:40)
#loc420 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":290:20)
#loc421 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":291:13)
#loc422 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":294:13)
#loc423 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":291:17)
#loc424 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":291:33)
#loc425 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":292:13)
#loc426 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":293:30)
#loc427 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":293:17)
#loc428 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":295:13)
#loc429 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":298:13)
#loc430 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":295:17)
#loc431 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":295:33)
#loc432 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":296:13)
#loc433 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":297:30)
#loc434 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":297:17)
#loc435 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":307:5)
#loc436 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":332:5)
#loc437 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":307:8)
#loc438 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":307:33)
#loc439 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":308:5)
#loc440 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":319:5)
#loc441 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":321:5)
#loc442 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":310:9)
#loc443 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":318:9)
#loc444 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":310:13)
#loc445 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":310:20)
#loc446 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":310:28)
#loc447 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":310:35)
#loc448 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":310:31)
#loc449 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":310:49)
#loc450 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":310:62)
#loc451 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":310:69)
#loc452 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":311:9)
#loc453 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":314:9)
#loc454 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":316:9)
#loc455 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":312:13)
#loc456 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":312:33)
#loc457 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":312:26)
#loc458 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":313:26)
#loc459 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":313:13)
#loc460 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":317:23)
#loc461 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":317:13)
#loc462 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":323:9)
#loc463 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":331:9)
#loc464 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":323:13)
#loc465 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":323:20)
#loc466 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":323:28)
#loc467 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":323:35)
#loc468 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":323:31)
#loc469 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":323:49)
#loc470 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":323:62)
#loc471 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":323:69)
#loc472 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":324:9)
#loc473 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":327:9)
#loc474 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":329:9)
#loc475 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":325:13)
#loc476 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":325:33)
#loc477 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":325:26)
#loc478 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":326:26)
#loc479 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":326:13)
#loc480 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":330:23)
#loc481 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":330:13)
#loc482 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":338:1)
#loc483 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":369:1)
#loc484 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":340:5)
#loc485 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":340:9)
#loc486 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":342:12)
#loc487 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":342:5)
#loc488 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":343:5)
#loc489 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":352:5)
#loc490 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":343:8)
#loc491 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":343:33)
#loc492 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":344:5)
#loc493 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":347:5)
#loc494 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":349:5)
#loc495 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":346:16)
#loc496 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":346:9)
#loc497 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":351:16)
#loc498 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":351:9)
#loc499 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":353:5)
#loc500 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":368:5)
#loc501 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":353:8)
#loc502 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":353:33)
#loc503 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":354:5)
#loc504 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":360:5)
#loc505 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":362:5)
#loc506 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":355:9)
#loc507 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":359:9)
#loc508 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":357:13)
#loc509 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":357:33)
#loc510 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":357:26)
#loc511 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":358:26)
#loc512 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":358:13)
#loc513 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":363:9)
#loc514 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":367:9)
#loc515 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":365:13)
#loc516 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":365:33)
#loc517 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":365:26)
#loc518 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":366:26)
#loc519 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":366:13)
#loc520 = loc(fused[#loc1, #loc2])
#loc521 = loc(fused[#loc3, #loc4])
#loc522 = loc(fused[#loc5, #loc6])
#loc523 = loc(fused[#loc7, #loc8])
#loc524 = loc(fused[#loc9, #loc10])
#loc525 = loc(fused[#loc11, #loc12])
#loc526 = loc(fused[#loc13, #loc14])
#loc527 = loc(fused[#loc15, #loc16])
#loc528 = loc(fused[#loc17, #loc18])
#loc529 = loc(fused[#loc19, #loc20])
#loc530 = loc(fused[#loc22, #loc23])
#loc531 = loc(fused[#loc25, #loc26])
#loc532 = loc(fused[#loc27, #loc28])
#loc533 = loc(fused[#loc30, #loc29])
#loc534 = loc(fused[#loc31, #loc32])
#loc535 = loc(fused[#loc33, #loc34])
#loc536 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc537 = loc(fused[#loc38, #loc39])
#loc538 = loc(fused[#loc40, #loc41])
#loc539 = loc(fused[#loc42, #loc43])
#loc540 = loc(fused[#loc44, #loc45])
#loc541 = loc(fused[#loc46, #loc47])
#loc542 = loc(fused[#loc48, #loc49])
#loc543 = loc(fused[#loc50, #loc51])
#loc544 = loc(fused[#loc52, #loc53])
#loc545 = loc(fused[#loc58, #loc59])
#loc546 = loc(fused[#loc60, #loc61])
#loc547 = loc(fused[#loc62, #loc63])
#loc548 = loc(fused[#loc64, #loc61])
#loc549 = loc(fused[#loc66, #loc67])
#loc550 = loc(fused[#loc69, #loc70])
#loc551 = loc(fused[#loc71, #loc72])
#loc552 = loc(fused[#loc75, #loc73])
#loc553 = loc(fused[#loc79, #loc76])
#loc554 = loc(fused[#loc83, #loc84])
#loc555 = loc(fused[#loc85, #loc86])
#loc556 = loc(fused[#loc88, #loc89])
#loc557 = loc(fused[#loc90, #loc91])
#loc558 = loc(fused[#loc92, #loc93])
#loc559 = loc(fused[#loc94, #loc86])
#loc560 = loc(fused[#loc96, #loc97])
#loc561 = loc(fused[#loc100, #loc101])
#loc562 = loc(fused[#loc102, #loc97])
#loc563 = loc(fused[#loc108, #loc109])
#loc564 = loc(fused[#loc110, #loc111])
#loc565 = loc(fused[#loc112, #loc113])
#loc566 = loc(fused[#loc114, #loc111])
#loc567 = loc(fused[#loc118, #loc119])
#loc568 = loc(fused[#loc122, #loc123])
#loc569 = loc(fused[#loc124, #loc125])
#loc570 = loc(fused[#loc126, #loc127])
#loc571 = loc(fused[#loc129, #loc130])
#loc572 = loc(fused[#loc131, #loc125])
#loc573 = loc(fused[#loc135, #loc133])
#loc574 = loc(fused[#loc138, #loc139])
#loc575 = loc(fused[#loc141, #loc142])
#loc576 = loc(fused[#loc143, #loc144])
#loc577 = loc(fused[#loc145, #loc142])
#loc578 = loc(fused[#loc148, #loc149])
#loc579 = loc(fused[#loc150, #loc151])
#loc580 = loc(fused[#loc152, #loc149])
#loc581 = loc(fused[#loc156, #loc155])
#loc582 = loc(fused[#loc157, #loc158])
#loc583 = loc(fused[#loc159, #loc160])
#loc584 = loc(fused[#loc161, #loc162, #loc163, #loc158])
#loc585 = loc(fused[#loc164, #loc165])
#loc586 = loc(fused[#loc166, #loc167])
#loc587 = loc(fused[#loc171, #loc172])
#loc588 = loc(fused[#loc173, #loc174])
#loc589 = loc(fused[#loc177, #loc180])
#loc590 = loc(fused[#loc181, #loc182, #loc183, #loc172])
#loc591 = loc(fused[#loc184, #loc185])
#loc592 = loc(fused[#loc190, #loc191])
#loc593 = loc(fused[#loc192, #loc193])
#loc594 = loc(fused[#loc194, #loc195])
#loc595 = loc(fused[#loc196, #loc197])
#loc596 = loc(fused[#loc198, #loc199])
#loc597 = loc(fused[#loc201, #loc200])
#loc598 = loc(fused[#loc202, #loc203])
#loc599 = loc(fused[#loc204, #loc205])
#loc600 = loc(fused[#loc206, #loc207, #loc208, #loc203])
#loc601 = loc(fused[#loc209, #loc210])
#loc602 = loc(fused[#loc211, #loc212])
#loc603 = loc(fused[#loc213, #loc214])
#loc604 = loc(fused[#loc215, #loc216])
#loc605 = loc(fused[#loc217, #loc218])
#loc606 = loc(fused[#loc219, #loc220])
#loc607 = loc(fused[#loc221, #loc222])
#loc608 = loc(fused[#loc223, #loc224])
#loc609 = loc(fused[#loc229, #loc230])
#loc610 = loc(fused[#loc231, #loc232])
#loc611 = loc(fused[#loc233, #loc234])
#loc612 = loc(fused[#loc235, #loc232])
#loc613 = loc(fused[#loc237, #loc238])
#loc614 = loc(fused[#loc240, #loc241])
#loc615 = loc(fused[#loc242, #loc243])
#loc616 = loc(fused[#loc245, #loc244])
#loc617 = loc(fused[#loc247, #loc246])
#loc618 = loc(fused[#loc250, #loc251])
#loc619 = loc(fused[#loc252, #loc253])
#loc620 = loc(fused[#loc255, #loc256])
#loc621 = loc(fused[#loc257, #loc258])
#loc622 = loc(fused[#loc259, #loc260])
#loc623 = loc(fused[#loc261, #loc253])
#loc624 = loc(fused[#loc263, #loc264])
#loc625 = loc(fused[#loc267, #loc268])
#loc626 = loc(fused[#loc269, #loc264])
#loc627 = loc(fused[#loc275, #loc276])
#loc628 = loc(fused[#loc277, #loc278])
#loc629 = loc(fused[#loc279, #loc280])
#loc630 = loc(fused[#loc281, #loc278])
#loc631 = loc(fused[#loc285, #loc286])
#loc632 = loc(fused[#loc289, #loc290])
#loc633 = loc(fused[#loc291, #loc292])
#loc634 = loc(fused[#loc293, #loc294])
#loc635 = loc(fused[#loc296, #loc297])
#loc636 = loc(fused[#loc298, #loc292])
#loc637 = loc(fused[#loc302, #loc300])
#loc638 = loc(fused[#loc305, #loc306])
#loc639 = loc(fused[#loc308, #loc309])
#loc640 = loc(fused[#loc310, #loc311])
#loc641 = loc(fused[#loc312, #loc309])
#loc642 = loc(fused[#loc315, #loc316])
#loc643 = loc(fused[#loc317, #loc318])
#loc644 = loc(fused[#loc319, #loc316])
#loc645 = loc(fused[#loc322, #loc323])
#loc646 = loc(fused[#loc324, #loc325])
#loc647 = loc(fused[#loc326, #loc327])
#loc648 = loc(fused[#loc328, #loc329])
#loc649 = loc(fused[#loc330, #loc331])
#loc650 = loc(fused[#loc332, #loc333])
#loc651 = loc(fused[#loc334, #loc335])
#loc652 = loc(fused[#loc336, #loc337])
#loc653 = loc(fused[#loc342, #loc343])
#loc654 = loc(fused[#loc344, #loc345])
#loc655 = loc(fused[#loc346, #loc347])
#loc656 = loc(fused[#loc348, #loc345])
#loc657 = loc(fused[#loc350, #loc351])
#loc658 = loc(fused[#loc353, #loc354])
#loc659 = loc(fused[#loc355, #loc356])
#loc660 = loc(fused[#loc358, #loc357])
#loc661 = loc(fused[#loc360, #loc359])
#loc662 = loc(fused[#loc363, #loc364])
#loc663 = loc(fused[#loc365, #loc366])
#loc664 = loc(fused[#loc368, #loc369])
#loc665 = loc(fused[#loc370, #loc371])
#loc666 = loc(fused[#loc372, #loc373])
#loc667 = loc(fused[#loc374, #loc366])
#loc668 = loc(fused[#loc376, #loc377])
#loc669 = loc(fused[#loc380, #loc381])
#loc670 = loc(fused[#loc382, #loc377])
#loc671 = loc(fused[#loc388, #loc389])
#loc672 = loc(fused[#loc390, #loc391])
#loc673 = loc(fused[#loc392, #loc393])
#loc674 = loc(fused[#loc394, #loc391])
#loc675 = loc(fused[#loc398, #loc399])
#loc676 = loc(fused[#loc402, #loc403])
#loc677 = loc(fused[#loc404, #loc405])
#loc678 = loc(fused[#loc406, #loc407])
#loc679 = loc(fused[#loc409, #loc410])
#loc680 = loc(fused[#loc411, #loc405])
#loc681 = loc(fused[#loc415, #loc413])
#loc682 = loc(fused[#loc418, #loc419])
#loc683 = loc(fused[#loc421, #loc422])
#loc684 = loc(fused[#loc423, #loc424])
#loc685 = loc(fused[#loc425, #loc422])
#loc686 = loc(fused[#loc428, #loc429])
#loc687 = loc(fused[#loc430, #loc431])
#loc688 = loc(fused[#loc432, #loc429])
#loc689 = loc(fused[#loc435, #loc436])
#loc690 = loc(fused[#loc437, #loc438])
#loc691 = loc(fused[#loc439, #loc440, #loc441, #loc436])
#loc692 = loc(fused[#loc442, #loc443])
#loc693 = loc(fused[#loc444, #loc445])
#loc694 = loc(fused[#loc448, #loc451])
#loc695 = loc(fused[#loc452, #loc453, #loc454, #loc443])
#loc696 = loc(fused[#loc455, #loc456])
#loc697 = loc(fused[#loc462, #loc463])
#loc698 = loc(fused[#loc464, #loc465])
#loc699 = loc(fused[#loc468, #loc471])
#loc700 = loc(fused[#loc472, #loc473, #loc474, #loc463])
#loc701 = loc(fused[#loc475, #loc476])
#loc702 = loc(fused[#loc482, #loc483])
#loc703 = loc(fused[#loc484, #loc485])
#loc704 = loc(fused[#loc487, #loc486])
#loc705 = loc(fused[#loc488, #loc489])
#loc706 = loc(fused[#loc490, #loc491])
#loc707 = loc(fused[#loc492, #loc493, #loc494, #loc489])
#loc708 = loc(fused[#loc496, #loc495])
#loc709 = loc(fused[#loc498, #loc497])
#loc710 = loc(fused[#loc499, #loc500])
#loc711 = loc(fused[#loc501, #loc502])
#loc712 = loc(fused[#loc503, #loc504, #loc505, #loc500])
#loc713 = loc(fused[#loc506, #loc507])
#loc714 = loc(fused[#loc508, #loc509])
#loc715 = loc(fused[#loc513, #loc514])
#loc716 = loc(fused[#loc515, #loc516])
