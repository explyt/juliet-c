!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc153)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc154)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc155)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc156)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc158)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc159)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
        cir.condition(%3) loc(#loc17)
      } do {
        cir.scope {
          %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc19)
          %3 = cir.const #cir.int<50> : !s32i loc(#loc20)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc20)
          %5 = cir.const #cir.int<1> : !u64i loc(#loc162)
          %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc163)
          %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc19)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc164)
          cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc165)
          cir.scope {
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
            %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc28)
            %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc167)
            cir.if %17 {
              %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc30)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc31)
              %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc32)
              cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
            } loc(#loc168)
          } loc(#loc166)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc33)
          %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc33)
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc35)
          %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc36)
          cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc169)
          cir.break loc(#loc37)
        } loc(#loc161)
        cir.yield loc(#loc16)
      } loc(#loc160)
    } loc(#loc160)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc171)
      %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc172)
      %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc44)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc44)
      %6 = cir.const #cir.int<67> : !s32i loc(#loc45)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc46)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc47)
      %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc46)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc46)
      cir.libc.memset %10 bytes from %5 set to %6 : !cir.ptr<!void>, !s32i, !u64i loc(#loc173)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc50)
      %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc50)
      %13 = cir.const #cir.int<100> : !s32i loc(#loc51)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc52)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc51)
      %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc53)
      %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc53)
      cir.store %12, %17 : !s8i, !cir.ptr<!s8i> loc(#loc174)
      cir.scope {
        %29 = cir.const #cir.int<0> : !s32i loc(#loc56)
        %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc56)
        cir.store %30, %2 : !u64i, !cir.ptr<!u64i> loc(#loc176)
        cir.for : cond {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc58)
          %32 = cir.const #cir.int<100> : !s32i loc(#loc59)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc59)
          %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc177)
          cir.condition(%34) loc(#loc60)
        } body {
          cir.scope {
            %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc62)
            %32 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc63)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc63)
            %34 = cir.load %33 : !cir.ptr<!s8i>, !s8i loc(#loc63)
            %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
            %36 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc65)
            %37 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %36 : !u64i), !cir.ptr<!s8i> loc(#loc66)
            cir.store %34, %37 : !s8i, !cir.ptr<!s8i> loc(#loc179)
          } loc(#loc178)
          cir.yield loc(#loc55)
        } step {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc68)
          %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc69)
          cir.store %32, %2 : !u64i, !cir.ptr<!u64i> loc(#loc180)
          cir.yield loc(#loc175)
        } loc(#loc175)
      } loc(#loc175)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc70)
      %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc70)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc72)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc73)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc72)
      %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc74)
      cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc181)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc76)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc77)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc78)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc77)
    } loc(#loc170)
    cir.return loc(#loc10)
  } loc(#loc157)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc183)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc81)
    cir.return loc(#loc80)
  } loc(#loc182)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc185)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc87)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc186)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc91)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc91)
        cir.condition(%3) loc(#loc91)
      } do {
        cir.scope {
          %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc93)
          %3 = cir.const #cir.int<100> : !s32i loc(#loc94)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc94)
          %5 = cir.const #cir.int<1> : !u64i loc(#loc189)
          %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc190)
          %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc93)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc191)
          cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc192)
          cir.scope {
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
            %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc102)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc102)
            %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc194)
            cir.if %17 {
              %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc104)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc105)
              %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc106)
              cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc104)
            } loc(#loc195)
          } loc(#loc193)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc107)
          %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc107)
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc109)
          %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc110)
          cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc196)
          cir.break loc(#loc111)
        } loc(#loc188)
        cir.yield loc(#loc90)
      } loc(#loc187)
    } loc(#loc187)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc198)
      %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc199)
      %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc118)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc118)
      %6 = cir.const #cir.int<67> : !s32i loc(#loc119)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc120)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc121)
      %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc120)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc120)
      cir.libc.memset %10 bytes from %5 set to %6 : !cir.ptr<!void>, !s32i, !u64i loc(#loc200)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc124)
      %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc124)
      %13 = cir.const #cir.int<100> : !s32i loc(#loc125)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc126)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc125)
      %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc127)
      %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc127)
      cir.store %12, %17 : !s8i, !cir.ptr<!s8i> loc(#loc201)
      cir.scope {
        %29 = cir.const #cir.int<0> : !s32i loc(#loc130)
        %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc130)
        cir.store %30, %2 : !u64i, !cir.ptr<!u64i> loc(#loc203)
        cir.for : cond {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc132)
          %32 = cir.const #cir.int<100> : !s32i loc(#loc133)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc133)
          %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc204)
          cir.condition(%34) loc(#loc134)
        } body {
          cir.scope {
            %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc136)
            %32 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc137)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc137)
            %34 = cir.load %33 : !cir.ptr<!s8i>, !s8i loc(#loc137)
            %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc138)
            %36 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc139)
            %37 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %36 : !u64i), !cir.ptr<!s8i> loc(#loc140)
            cir.store %34, %37 : !s8i, !cir.ptr<!s8i> loc(#loc206)
          } loc(#loc205)
          cir.yield loc(#loc129)
        } step {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc142)
          %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc143)
          cir.store %32, %2 : !u64i, !cir.ptr<!u64i> loc(#loc207)
          cir.yield loc(#loc202)
        } loc(#loc202)
      } loc(#loc202)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc144)
      %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc144)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc146)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc147)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc146)
      %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc148)
      cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc208)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc150)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc151)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc152)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc152)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc151)
    } loc(#loc197)
    cir.return loc(#loc84)
  } loc(#loc184)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":23:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":49:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":25:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":25:12)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":26:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":26:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":27:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":34:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":27:11)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":28:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":30:24)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":30:31)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":30:34)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":30:45)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":30:46)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":30:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":31:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":31:37)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":31:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":31:21)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":31:27)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":31:28)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":31:34)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":31:33)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":32:19)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":32:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":32:14)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":32:15)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":33:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":35:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":48:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":36:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":36:16)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":37:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":37:24)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":38:16)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":38:24)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":38:29)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":38:33)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":38:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":38:34)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":39:25)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":39:16)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":39:20)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":39:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":41:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":44:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":41:18)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":41:14)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":41:21)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":41:25)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":41:23)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":42:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":43:30)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":43:23)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":43:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":43:18)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":43:19)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":43:31)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":41:31)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":41:30)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":45:23)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":45:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":45:14)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":45:18)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":45:19)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":46:19)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":46:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":47:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":47:14)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":84:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":87:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":86:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":86:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":56:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":82:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":58:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":58:12)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":59:12)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":59:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":60:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":67:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":60:11)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":61:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":63:24)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":63:31)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":63:35)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":63:46)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":63:47)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":63:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":64:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":64:37)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":64:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":64:21)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":64:27)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":64:28)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":64:34)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":64:33)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":65:19)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":65:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":65:14)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":65:15)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":66:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":68:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":81:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":69:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":69:16)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":70:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":70:24)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":71:16)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":71:24)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":71:29)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":71:33)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":71:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":71:34)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":72:25)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":72:16)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":72:20)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":72:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":74:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":77:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":74:18)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":74:14)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":74:21)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":74:25)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":74:23)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":75:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":76:30)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":76:23)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":76:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":76:18)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":76:19)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":76:31)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":74:31)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":74:30)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":78:23)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":78:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":78:14)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":78:18)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":78:19)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":79:19)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":79:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":80:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c":80:14)
#loc153 = loc(fused[#loc1, #loc2])
#loc154 = loc(fused[#loc3, #loc4])
#loc155 = loc(fused[#loc5, #loc6])
#loc156 = loc(fused[#loc7, #loc8])
#loc157 = loc(fused[#loc9, #loc10])
#loc158 = loc(fused[#loc11, #loc12])
#loc159 = loc(fused[#loc14, #loc13])
#loc160 = loc(fused[#loc15, #loc16])
#loc161 = loc(fused[#loc18, #loc16])
#loc162 = loc(fused[#loc21, #loc22])
#loc163 = loc(fused[#loc20, #loc22])
#loc164 = loc(fused[#loc19, #loc23])
#loc165 = loc(fused[#loc24, #loc23])
#loc166 = loc(fused[#loc25, #loc26])
#loc167 = loc(fused[#loc27, #loc28])
#loc168 = loc(fused[#loc29, #loc26])
#loc169 = loc(fused[#loc34, #loc33])
#loc170 = loc(fused[#loc38, #loc39])
#loc171 = loc(fused[#loc40, #loc41])
#loc172 = loc(fused[#loc42, #loc43])
#loc173 = loc(fused[#loc48, #loc49])
#loc174 = loc(fused[#loc53, #loc50])
#loc175 = loc(fused[#loc54, #loc55])
#loc176 = loc(fused[#loc57, #loc56])
#loc177 = loc(fused[#loc58, #loc59])
#loc178 = loc(fused[#loc61, #loc55])
#loc179 = loc(fused[#loc64, #loc67])
#loc180 = loc(fused[#loc69, #loc68])
#loc181 = loc(fused[#loc71, #loc70])
#loc182 = loc(fused[#loc79, #loc80])
#loc183 = loc(fused[#loc81, #loc82])
#loc184 = loc(fused[#loc83, #loc84])
#loc185 = loc(fused[#loc85, #loc86])
#loc186 = loc(fused[#loc88, #loc87])
#loc187 = loc(fused[#loc89, #loc90])
#loc188 = loc(fused[#loc92, #loc90])
#loc189 = loc(fused[#loc95, #loc96])
#loc190 = loc(fused[#loc94, #loc96])
#loc191 = loc(fused[#loc93, #loc97])
#loc192 = loc(fused[#loc98, #loc97])
#loc193 = loc(fused[#loc99, #loc100])
#loc194 = loc(fused[#loc101, #loc102])
#loc195 = loc(fused[#loc103, #loc100])
#loc196 = loc(fused[#loc108, #loc107])
#loc197 = loc(fused[#loc112, #loc113])
#loc198 = loc(fused[#loc114, #loc115])
#loc199 = loc(fused[#loc116, #loc117])
#loc200 = loc(fused[#loc122, #loc123])
#loc201 = loc(fused[#loc127, #loc124])
#loc202 = loc(fused[#loc128, #loc129])
#loc203 = loc(fused[#loc131, #loc130])
#loc204 = loc(fused[#loc132, #loc133])
#loc205 = loc(fused[#loc135, #loc129])
#loc206 = loc(fused[#loc138, #loc141])
#loc207 = loc(fused[#loc143, #loc142])
#loc208 = loc(fused[#loc145, #loc144])
