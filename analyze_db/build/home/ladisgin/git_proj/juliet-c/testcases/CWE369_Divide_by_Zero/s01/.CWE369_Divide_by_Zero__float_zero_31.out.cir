!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc43 = loc("CWE369_Divide_by_Zero__float_zero_31.c":103:10)
#loc44 = loc("CWE369_Divide_by_Zero__float_zero_31.c":103:14)
#loc45 = loc("CWE369_Divide_by_Zero__float_zero_31.c":103:20)
#loc46 = loc("CWE369_Divide_by_Zero__float_zero_31.c":103:32)
#loc131 = loc(fused[#loc43, #loc44])
#loc132 = loc(fused[#loc45, #loc46])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc113)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_31_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc115)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc7)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc116)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc9)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc117)
    cir.scope {
      %3 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc119)
      %4 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc120)
      %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc14)
      cir.store %5, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc119)
      %6 = cir.load %3 : !cir.ptr<!cir.float>, !cir.float loc(#loc16)
      cir.store %6, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc120)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc122)
        %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc21)
        %9 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc22)
        %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc22)
        %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc123)
        %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc123)
        cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc122)
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc24)
      } loc(#loc121)
    } loc(#loc118)
    cir.return loc(#loc4)
  } loc(#loc114)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_31_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc125)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc126)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc124)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc127)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc128)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc129)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc40)
  cir.func @main(%arg0: !s32i loc(fused[#loc43, #loc44]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc45, #loc46])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc131)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc132)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc42)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc47)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc47)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc48)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc49)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc49)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc50)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc37)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %8 = cir.get_global @CWE369_Divide_by_Zero__float_zero_31_good : !cir.ptr<!cir.func<!void ()>> loc(#loc133)
    cir.call @CWE369_Divide_by_Zero__float_zero_31_good() : () -> () loc(#loc52)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc38)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc39)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %13 = cir.get_global @CWE369_Divide_by_Zero__float_zero_31_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc134)
    cir.call @CWE369_Divide_by_Zero__float_zero_31_bad() : () -> () loc(#loc56)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc40)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc59)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc135)
    cir.return %17 : !s32i loc(#loc135)
  } loc(#loc130)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc137)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc65)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc138)
    %2 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc67)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc139)
    cir.scope {
      %3 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc141)
      %4 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc142)
      %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc72)
      cir.store %5, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc141)
      %6 = cir.load %3 : !cir.ptr<!cir.float>, !cir.float loc(#loc74)
      cir.store %6, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc142)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc144)
        %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc79)
        %9 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc80)
        %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc80)
        %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc145)
        %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc145)
        cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc144)
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc81)
        cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc82)
      } loc(#loc143)
    } loc(#loc140)
    cir.return loc(#loc62)
  } loc(#loc136)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc83)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc147)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc88)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc148)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc90)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc149)
    cir.scope {
      %3 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc151)
      %4 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc152)
      %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc95)
      cir.store %5, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc151)
      %6 = cir.load %3 : !cir.ptr<!cir.float>, !cir.float loc(#loc97)
      cir.store %6, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc152)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc100)
        %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc100)
        %9 = cir.fabs %8 : !cir.double loc(#loc100)
        %10 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc101)
        %11 = cir.cmp(gt, %9, %10) : !cir.double, !cir.bool loc(#loc154)
        cir.if %11 {
          %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc156)
          %13 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc108)
          %14 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc109)
          %15 = cir.cast(floating, %14 : !cir.float), !cir.double loc(#loc109)
          %16 = cir.binop(div, %13, %15) : !cir.double loc(#loc157)
          %17 = cir.cast(float_to_int, %16 : !cir.double), !s32i loc(#loc157)
          cir.store %17, %12 : !s32i, !cir.ptr<!s32i> loc(#loc156)
          %18 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc110)
          cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc111)
        } else {
          %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc83)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc83)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc112)
        } loc(#loc155)
      } loc(#loc153)
    } loc(#loc150)
    cir.return loc(#loc85)
  } loc(#loc146)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_31.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__float_zero_31.c":24:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_zero_31.c":40:1)
#loc5 = loc("CWE369_Divide_by_Zero__float_zero_31.c":26:5)
#loc6 = loc("CWE369_Divide_by_Zero__float_zero_31.c":26:11)
#loc7 = loc("CWE369_Divide_by_Zero__float_zero_31.c":28:12)
#loc8 = loc("CWE369_Divide_by_Zero__float_zero_31.c":28:5)
#loc9 = loc("CWE369_Divide_by_Zero__float_zero_31.c":30:12)
#loc10 = loc("CWE369_Divide_by_Zero__float_zero_31.c":30:5)
#loc11 = loc("CWE369_Divide_by_Zero__float_zero_31.c":31:5)
#loc12 = loc("CWE369_Divide_by_Zero__float_zero_31.c":39:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_zero_31.c":32:9)
#loc14 = loc("CWE369_Divide_by_Zero__float_zero_31.c":32:26)
#loc15 = loc("CWE369_Divide_by_Zero__float_zero_31.c":33:9)
#loc16 = loc("CWE369_Divide_by_Zero__float_zero_31.c":33:22)
#loc17 = loc("CWE369_Divide_by_Zero__float_zero_31.c":34:9)
#loc18 = loc("CWE369_Divide_by_Zero__float_zero_31.c":38:9)
#loc19 = loc("CWE369_Divide_by_Zero__float_zero_31.c":36:13)
#loc20 = loc("CWE369_Divide_by_Zero__float_zero_31.c":36:44)
#loc21 = loc("CWE369_Divide_by_Zero__float_zero_31.c":36:32)
#loc22 = loc("CWE369_Divide_by_Zero__float_zero_31.c":36:40)
#loc23 = loc("CWE369_Divide_by_Zero__float_zero_31.c":37:26)
#loc24 = loc("CWE369_Divide_by_Zero__float_zero_31.c":37:13)
#loc25 = loc("CWE369_Divide_by_Zero__float_zero_31.c":89:1)
#loc26 = loc("CWE369_Divide_by_Zero__float_zero_31.c":93:1)
#loc27 = loc("CWE369_Divide_by_Zero__float_zero_31.c":91:5)
#loc28 = loc("CWE369_Divide_by_Zero__float_zero_31.c":91:13)
#loc29 = loc("CWE369_Divide_by_Zero__float_zero_31.c":92:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_zero_31.c":92:13)
#loc31 = loc("/usr/include/stdlib.h":575:1)
#loc32 = loc("/usr/include/stdlib.h":575:41)
#loc33 = loc("/usr/include/time.h":76:1)
#loc34 = loc("/usr/include/time.h":76:38)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc37 = loc("CWE369_Divide_by_Zero__float_zero_31.c":108:15)
#loc38 = loc("CWE369_Divide_by_Zero__float_zero_31.c":110:15)
#loc39 = loc("CWE369_Divide_by_Zero__float_zero_31.c":113:15)
#loc40 = loc("CWE369_Divide_by_Zero__float_zero_31.c":115:15)
#loc41 = loc("CWE369_Divide_by_Zero__float_zero_31.c":103:1)
#loc42 = loc("CWE369_Divide_by_Zero__float_zero_31.c":118:1)
#loc47 = loc("CWE369_Divide_by_Zero__float_zero_31.c":104:1)
#loc48 = loc("CWE369_Divide_by_Zero__float_zero_31.c":106:27)
#loc49 = loc("CWE369_Divide_by_Zero__float_zero_31.c":106:22)
#loc50 = loc("CWE369_Divide_by_Zero__float_zero_31.c":106:5)
#loc51 = loc("CWE369_Divide_by_Zero__float_zero_31.c":108:5)
#loc52 = loc("CWE369_Divide_by_Zero__float_zero_31.c":109:5)
#loc53 = loc("CWE369_Divide_by_Zero__float_zero_31.c":109:47)
#loc54 = loc("CWE369_Divide_by_Zero__float_zero_31.c":110:5)
#loc55 = loc("CWE369_Divide_by_Zero__float_zero_31.c":113:5)
#loc56 = loc("CWE369_Divide_by_Zero__float_zero_31.c":114:5)
#loc57 = loc("CWE369_Divide_by_Zero__float_zero_31.c":114:46)
#loc58 = loc("CWE369_Divide_by_Zero__float_zero_31.c":115:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_zero_31.c":117:12)
#loc60 = loc("CWE369_Divide_by_Zero__float_zero_31.c":117:5)
#loc61 = loc("CWE369_Divide_by_Zero__float_zero_31.c":47:1)
#loc62 = loc("CWE369_Divide_by_Zero__float_zero_31.c":63:1)
#loc63 = loc("CWE369_Divide_by_Zero__float_zero_31.c":49:5)
#loc64 = loc("CWE369_Divide_by_Zero__float_zero_31.c":49:11)
#loc65 = loc("CWE369_Divide_by_Zero__float_zero_31.c":51:12)
#loc66 = loc("CWE369_Divide_by_Zero__float_zero_31.c":51:5)
#loc67 = loc("CWE369_Divide_by_Zero__float_zero_31.c":53:12)
#loc68 = loc("CWE369_Divide_by_Zero__float_zero_31.c":53:5)
#loc69 = loc("CWE369_Divide_by_Zero__float_zero_31.c":54:5)
#loc70 = loc("CWE369_Divide_by_Zero__float_zero_31.c":62:5)
#loc71 = loc("CWE369_Divide_by_Zero__float_zero_31.c":55:9)
#loc72 = loc("CWE369_Divide_by_Zero__float_zero_31.c":55:26)
#loc73 = loc("CWE369_Divide_by_Zero__float_zero_31.c":56:9)
#loc74 = loc("CWE369_Divide_by_Zero__float_zero_31.c":56:22)
#loc75 = loc("CWE369_Divide_by_Zero__float_zero_31.c":57:9)
#loc76 = loc("CWE369_Divide_by_Zero__float_zero_31.c":61:9)
#loc77 = loc("CWE369_Divide_by_Zero__float_zero_31.c":59:13)
#loc78 = loc("CWE369_Divide_by_Zero__float_zero_31.c":59:44)
#loc79 = loc("CWE369_Divide_by_Zero__float_zero_31.c":59:32)
#loc80 = loc("CWE369_Divide_by_Zero__float_zero_31.c":59:40)
#loc81 = loc("CWE369_Divide_by_Zero__float_zero_31.c":60:26)
#loc82 = loc("CWE369_Divide_by_Zero__float_zero_31.c":60:13)
#loc83 = loc("CWE369_Divide_by_Zero__float_zero_31.c":84:23)
#loc84 = loc("CWE369_Divide_by_Zero__float_zero_31.c":66:1)
#loc85 = loc("CWE369_Divide_by_Zero__float_zero_31.c":87:1)
#loc86 = loc("CWE369_Divide_by_Zero__float_zero_31.c":68:5)
#loc87 = loc("CWE369_Divide_by_Zero__float_zero_31.c":68:11)
#loc88 = loc("CWE369_Divide_by_Zero__float_zero_31.c":70:12)
#loc89 = loc("CWE369_Divide_by_Zero__float_zero_31.c":70:5)
#loc90 = loc("CWE369_Divide_by_Zero__float_zero_31.c":72:12)
#loc91 = loc("CWE369_Divide_by_Zero__float_zero_31.c":72:5)
#loc92 = loc("CWE369_Divide_by_Zero__float_zero_31.c":73:5)
#loc93 = loc("CWE369_Divide_by_Zero__float_zero_31.c":86:5)
#loc94 = loc("CWE369_Divide_by_Zero__float_zero_31.c":74:9)
#loc95 = loc("CWE369_Divide_by_Zero__float_zero_31.c":74:26)
#loc96 = loc("CWE369_Divide_by_Zero__float_zero_31.c":75:9)
#loc97 = loc("CWE369_Divide_by_Zero__float_zero_31.c":75:22)
#loc98 = loc("CWE369_Divide_by_Zero__float_zero_31.c":77:9)
#loc99 = loc("CWE369_Divide_by_Zero__float_zero_31.c":85:9)
#loc100 = loc("CWE369_Divide_by_Zero__float_zero_31.c":77:17)
#loc101 = loc("CWE369_Divide_by_Zero__float_zero_31.c":77:25)
#loc102 = loc("CWE369_Divide_by_Zero__float_zero_31.c":77:12)
#loc103 = loc("CWE369_Divide_by_Zero__float_zero_31.c":78:9)
#loc104 = loc("CWE369_Divide_by_Zero__float_zero_31.c":81:9)
#loc105 = loc("CWE369_Divide_by_Zero__float_zero_31.c":83:9)
#loc106 = loc("CWE369_Divide_by_Zero__float_zero_31.c":79:13)
#loc107 = loc("CWE369_Divide_by_Zero__float_zero_31.c":79:44)
#loc108 = loc("CWE369_Divide_by_Zero__float_zero_31.c":79:32)
#loc109 = loc("CWE369_Divide_by_Zero__float_zero_31.c":79:40)
#loc110 = loc("CWE369_Divide_by_Zero__float_zero_31.c":80:26)
#loc111 = loc("CWE369_Divide_by_Zero__float_zero_31.c":80:13)
#loc112 = loc("CWE369_Divide_by_Zero__float_zero_31.c":84:13)
#loc113 = loc(fused[#loc1, #loc2])
#loc114 = loc(fused[#loc3, #loc4])
#loc115 = loc(fused[#loc5, #loc6])
#loc116 = loc(fused[#loc8, #loc7])
#loc117 = loc(fused[#loc10, #loc9])
#loc118 = loc(fused[#loc11, #loc12])
#loc119 = loc(fused[#loc13, #loc14])
#loc120 = loc(fused[#loc15, #loc16])
#loc121 = loc(fused[#loc17, #loc18])
#loc122 = loc(fused[#loc19, #loc20])
#loc123 = loc(fused[#loc21, #loc22])
#loc124 = loc(fused[#loc25, #loc26])
#loc125 = loc(fused[#loc27, #loc28])
#loc126 = loc(fused[#loc29, #loc30])
#loc127 = loc(fused[#loc31, #loc32])
#loc128 = loc(fused[#loc33, #loc34])
#loc129 = loc(fused[#loc35, #loc36])
#loc130 = loc(fused[#loc41, #loc42])
#loc133 = loc(fused[#loc52, #loc53])
#loc134 = loc(fused[#loc56, #loc57])
#loc135 = loc(fused[#loc60, #loc59])
#loc136 = loc(fused[#loc61, #loc62])
#loc137 = loc(fused[#loc63, #loc64])
#loc138 = loc(fused[#loc66, #loc65])
#loc139 = loc(fused[#loc68, #loc67])
#loc140 = loc(fused[#loc69, #loc70])
#loc141 = loc(fused[#loc71, #loc72])
#loc142 = loc(fused[#loc73, #loc74])
#loc143 = loc(fused[#loc75, #loc76])
#loc144 = loc(fused[#loc77, #loc78])
#loc145 = loc(fused[#loc79, #loc80])
#loc146 = loc(fused[#loc84, #loc85])
#loc147 = loc(fused[#loc86, #loc87])
#loc148 = loc(fused[#loc89, #loc88])
#loc149 = loc(fused[#loc91, #loc90])
#loc150 = loc(fused[#loc92, #loc93])
#loc151 = loc(fused[#loc94, #loc95])
#loc152 = loc(fused[#loc96, #loc97])
#loc153 = loc(fused[#loc98, #loc99])
#loc154 = loc(fused[#loc102, #loc101])
#loc155 = loc(fused[#loc103, #loc104, #loc105, #loc99])
#loc156 = loc(fused[#loc106, #loc107])
#loc157 = loc(fused[#loc108, #loc109])
