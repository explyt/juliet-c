!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":31:26)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":53:26)
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc77)
  cir.func private @printUnsignedLine(!u32i) loc(#loc78)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_square_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc80)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc81)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc11)
    cir.store %3, %0 : !u32i, !cir.ptr<!u32i> loc(#loc82)
    cir.br ^bb1 loc(#loc83)
  ^bb1:  // pred: ^bb0
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc15)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc15)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc15)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc15)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc15)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc15)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc15)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc15)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc15)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc15)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc15)
    cir.br ^bb4(%19 : !u32i) loc(#loc15)
  ^bb3:  // pred: ^bb1
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc15)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc15)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc15)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc15)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc15)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc15)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc15)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc15)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc15)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc15)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc15)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc15)
    cir.br ^bb4(%35 : !u32i) loc(#loc15)
  ^bb4(%36: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":31:26)):  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc15)
  ^bb5:  // pred: ^bb4
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc15)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc15)
    cir.store %38, %0 : !u32i, !cir.ptr<!u32i> loc(#loc84)
    cir.br ^bb6 loc(#loc85)
  ^bb6:  // pred: ^bb5
    %39 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc19)
    %40 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc10)
    %41 = cir.binop(mul, %39, %40) : !u32i loc(#loc86)
    cir.store %41, %1 : !u32i, !cir.ptr<!u32i> loc(#loc81)
    %42 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc20)
    cir.call @printUnsignedLine(%42) : (!u32i) -> () loc(#loc21)
    cir.return loc(#loc6)
  } loc(#loc79)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_square_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc88)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc24)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc89)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    cir.return loc(#loc23)
  } loc(#loc87)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc28)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc31)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc92)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc93)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc38)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc38)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc94)
    cir.br ^bb1 loc(#loc95)
  ^bb1:  // pred: ^bb0
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc42)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc42)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc42)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc42)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc42)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc42)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc42)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc42)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc42)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc42)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc42)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc42)
    cir.br ^bb4(%19 : !u32i) loc(#loc42)
  ^bb3:  // pred: ^bb1
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc42)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc42)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc42)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc42)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc42)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc42)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc42)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc42)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc42)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc42)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc42)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc42)
    cir.br ^bb4(%35 : !u32i) loc(#loc42)
  ^bb4(%36: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":53:26)):  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc42)
  ^bb5:  // pred: ^bb4
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc42)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc42)
    cir.store %38, %1 : !u32i, !cir.ptr<!u32i> loc(#loc96)
    cir.br ^bb6 loc(#loc97)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc98)
  ^bb7:  // pred: ^bb6
    %39 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc48)
    %40 = cir.cast(integral, %39 : !u32i), !s64i loc(#loc48)
    %41 = cir.cast(integral, %40 : !s64i), !s32i loc(#loc48)
    %42 = cir.abs %41 poison : !s32i loc(#loc49)
    %43 = cir.cast(integral, %42 : !s32i), !s64i loc(#loc49)
    %44 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc50)
    %45 = cir.const #cir.int<2147483647> : !s32i loc(#loc51)
    %46 = cir.cast(integral, %45 : !s32i), !u32i loc(#loc51)
    %47 = cir.const #cir.int<2> : !u32i loc(#loc51)
    %48 = cir.binop(mul, %46, %47) : !u32i loc(#loc51)
    %49 = cir.const #cir.int<1> : !u32i loc(#loc51)
    %50 = cir.binop(add, %48, %49) : !u32i loc(#loc51)
    %51 = cir.cast(int_to_float, %50 : !u32i), !cir.double loc(#loc51)
    %52 = cir.call @sqrt(%51) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc50)
    %53 = cir.cast(float_to_int, %52 : !cir.double), !s64i loc(#loc50)
    %54 = cir.cmp(lt, %43, %53) : !s64i, !cir.bool loc(#loc99)
    cir.brcond %54 ^bb8, ^bb9 loc(#loc100)
  ^bb8:  // pred: ^bb7
    %55 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc56)
    %56 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc35)
    %57 = cir.binop(mul, %55, %56) : !u32i loc(#loc101)
    cir.store %57, %0 : !u32i, !cir.ptr<!u32i> loc(#loc92)
    %58 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc57)
    cir.call @printUnsignedLine(%58) : (!u32i) -> () loc(#loc58)
    cir.br ^bb10 loc(#loc54)
  ^bb9:  // pred: ^bb7
    %59 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc31)
    %60 = cir.cast(array_to_ptrdecay, %59 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc31)
    cir.call @printLine(%60) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    cir.br ^bb10 loc(#loc47)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc47)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc33)
  } loc(#loc91)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc103)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc104)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc66)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc66)
    cir.store %3, %0 : !u32i, !cir.ptr<!u32i> loc(#loc105)
    cir.br ^bb1 loc(#loc106)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<2> : !s32i loc(#loc70)
    %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc70)
    cir.store %5, %0 : !u32i, !cir.ptr<!u32i> loc(#loc107)
    cir.br ^bb2 loc(#loc108)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc74)
    %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc65)
    %8 = cir.binop(mul, %6, %7) : !u32i loc(#loc109)
    cir.store %8, %1 : !u32i, !cir.ptr<!u32i> loc(#loc104)
    %9 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc75)
    cir.call @printUnsignedLine(%9) : (!u32i) -> () loc(#loc76)
    cir.return loc(#loc61)
  } loc(#loc102)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":24:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":39:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":26:5)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":26:18)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":36:9)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":36:38)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":27:12)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":27:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":28:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":28:10)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":31:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":32:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":32:10)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":36:31)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":37:27)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":37:9)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":86:1)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":90:1)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":88:5)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":88:13)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":89:5)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":89:13)
#loc28 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc29 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc30 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":64:19)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":46:1)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":66:1)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":59:9)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":59:38)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":48:5)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":48:18)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":49:12)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":49:5)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":50:5)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":50:10)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":53:5)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":54:5)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":54:10)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":57:5)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":65:5)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":57:19)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":57:9)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":57:33)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":57:46)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":57:54)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":58:5)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":61:5)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":63:5)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":59:31)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":60:27)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":60:9)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":64:9)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":69:1)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":84:1)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":71:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":71:18)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":81:9)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":81:38)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":72:12)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":72:5)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":73:5)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":73:10)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":76:12)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":76:5)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":77:5)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":77:10)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":81:31)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":82:27)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_18.c":82:9)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc3, #loc4])
#loc79 = loc(fused[#loc5, #loc6])
#loc80 = loc(fused[#loc7, #loc8])
#loc81 = loc(fused[#loc9, #loc10])
#loc82 = loc(fused[#loc12, #loc11])
#loc83 = loc(fused[#loc13, #loc14])
#loc84 = loc(fused[#loc16, #loc15])
#loc85 = loc(fused[#loc17, #loc18])
#loc86 = loc(fused[#loc19, #loc10])
#loc87 = loc(fused[#loc22, #loc23])
#loc88 = loc(fused[#loc24, #loc25])
#loc89 = loc(fused[#loc26, #loc27])
#loc90 = loc(fused[#loc29, #loc30])
#loc91 = loc(fused[#loc32, #loc33])
#loc92 = loc(fused[#loc34, #loc35])
#loc93 = loc(fused[#loc36, #loc37])
#loc94 = loc(fused[#loc39, #loc38])
#loc95 = loc(fused[#loc40, #loc41])
#loc96 = loc(fused[#loc43, #loc42])
#loc97 = loc(fused[#loc44, #loc45])
#loc98 = loc(fused[#loc46, #loc47])
#loc99 = loc(fused[#loc49, #loc52])
#loc100 = loc(fused[#loc53, #loc54, #loc55, #loc47])
#loc101 = loc(fused[#loc56, #loc35])
#loc102 = loc(fused[#loc60, #loc61])
#loc103 = loc(fused[#loc62, #loc63])
#loc104 = loc(fused[#loc64, #loc65])
#loc105 = loc(fused[#loc67, #loc66])
#loc106 = loc(fused[#loc68, #loc69])
#loc107 = loc(fused[#loc71, #loc70])
#loc108 = loc(fused[#loc72, #loc73])
#loc109 = loc(fused[#loc74, #loc65])
