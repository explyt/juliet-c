!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc52 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":169:10)
#loc53 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":169:14)
#loc54 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":169:20)
#loc55 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":169:32)
#loc216 = loc(fused[#loc52, #loc53])
#loc217 = loc(fused[#loc54, #loc55])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_fscanf_modulo_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc194)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc196)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_modulo_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc198)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    cir.br ^bb1 loc(#loc200)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc201)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc202)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc20)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc195)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc21)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc20)
    cir.br ^bb3 loc(#loc16)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc16)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc203)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc204)
    %13 = cir.call %12() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc24)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %14 ^bb6, ^bb7 loc(#loc205)
  ^bb6:  // pred: ^bb5
    %15 = cir.const #cir.int<100> : !s32i loc(#loc27)
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    %17 = cir.binop(rem, %15, %16) : !s32i loc(#loc206)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc29)
    cir.br ^bb7 loc(#loc23)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc23)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc9)
  } loc(#loc197)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_modulo_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc209)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc210)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc207)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc212)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc213)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc214)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc49)
  cir.func @main(%arg0: !s32i loc(fused[#loc52, #loc53]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc54, #loc55])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc216)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc217)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc51)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc56)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc56)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc57)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc58)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc58)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc59)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc46)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_fscanf_modulo_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call @CWE369_Divide_by_Zero__int_fscanf_modulo_08_good() : () -> () loc(#loc61)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc47)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc48)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_fscanf_modulo_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call @CWE369_Divide_by_Zero__int_fscanf_modulo_08_bad() : () -> () loc(#loc65)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc49)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc68)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc220)
    cir.return %17 : !s32i loc(#loc220)
  } loc(#loc215)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc71)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc72)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc222)
    cir.return %2 : !s32i loc(#loc222)
  } loc(#loc221)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc75)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc224)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc81)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    cir.br ^bb1 loc(#loc226)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc227)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc85)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc85)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc228)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc88)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc195)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc89)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc90)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc90)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc88)
    cir.br ^bb3 loc(#loc84)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc84)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc229)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc230)
    %13 = cir.call %12() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc93)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc93)
    cir.brcond %14 ^bb6, ^bb7 loc(#loc231)
  ^bb6:  // pred: ^bb5
    %15 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc74)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    cir.br ^bb13 loc(#loc96)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc232)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    %18 = cir.const #cir.int<0> : !s32i loc(#loc102)
    %19 = cir.cmp(ne, %17, %18) : !s32i, !cir.bool loc(#loc233)
    cir.brcond %19 ^bb9, ^bb10 loc(#loc234)
  ^bb9:  // pred: ^bb8
    %20 = cir.const #cir.int<100> : !s32i loc(#loc106)
    %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
    %22 = cir.binop(rem, %20, %21) : !s32i loc(#loc235)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc108)
    cir.br ^bb11 loc(#loc104)
  ^bb10:  // pred: ^bb8
    %23 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc75)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc109)
    cir.br ^bb11 loc(#loc100)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc100)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc92)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc92)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc77)
  } loc(#loc223)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc111)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc112)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc237)
    cir.return %2 : !s32i loc(#loc237)
  } loc(#loc236)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc239)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc119)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc240)
    cir.br ^bb1 loc(#loc241)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc242)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc123)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc123)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc243)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc126)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc195)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc127)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc128)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc128)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc126)
    cir.br ^bb3 loc(#loc122)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc122)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc244)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc245)
    %13 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc131)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc131)
    cir.brcond %14 ^bb6, ^bb12 loc(#loc246)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc247)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc137)
    %17 = cir.cmp(ne, %15, %16) : !s32i, !cir.bool loc(#loc248)
    cir.brcond %17 ^bb8, ^bb9 loc(#loc249)
  ^bb8:  // pred: ^bb7
    %18 = cir.const #cir.int<100> : !s32i loc(#loc141)
    %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    %20 = cir.binop(rem, %18, %19) : !s32i loc(#loc250)
    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc143)
    cir.br ^bb10 loc(#loc139)
  ^bb9:  // pred: ^bb7
    %21 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc144)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc144)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc145)
    cir.br ^bb10 loc(#loc135)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc135)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc130)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc130)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc115)
  } loc(#loc238)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc252)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc150)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc151)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc253)
    cir.br ^bb1 loc(#loc254)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc255)
    %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc155)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc155)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc256)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc160)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc160)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc161)
    cir.br ^bb4 loc(#loc158)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<7> : !s32i loc(#loc162)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc257)
    cir.br ^bb4 loc(#loc154)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc154)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc258)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc259)
    %10 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc166)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc166)
    cir.brcond %11 ^bb7, ^bb8 loc(#loc260)
  ^bb7:  // pred: ^bb6
    %12 = cir.const #cir.int<100> : !s32i loc(#loc169)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc170)
    %14 = cir.binop(rem, %12, %13) : !s32i loc(#loc261)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc171)
    cir.br ^bb8 loc(#loc165)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc165)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc147)
  } loc(#loc251)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc263)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc176)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc177)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc264)
    cir.br ^bb1 loc(#loc265)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc266)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc181)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc181)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc267)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<7> : !s32i loc(#loc184)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc268)
    cir.br ^bb3 loc(#loc180)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc180)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc269)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc270)
    %8 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc188)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc188)
    cir.brcond %9 ^bb6, ^bb7 loc(#loc271)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.int<100> : !s32i loc(#loc191)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc192)
    %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc272)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc193)
    cir.br ^bb7 loc(#loc187)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc187)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc173)
  } loc(#loc262)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":43:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":35:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":50:1)
#loc10 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":37:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":37:9)
#loc12 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":39:13)
#loc13 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":39:12)
#loc14 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":39:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":40:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":44:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":40:8)
#loc18 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":40:26)
#loc19 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":41:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":43:9)
#loc21 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":43:16)
#loc22 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":45:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":49:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":45:8)
#loc25 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":45:26)
#loc26 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":46:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":48:22)
#loc28 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":48:28)
#loc29 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":48:9)
#loc30 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":152:1)
#loc31 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":158:1)
#loc32 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":154:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":154:14)
#loc34 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":155:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":155:14)
#loc36 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":156:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":156:14)
#loc38 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":157:5)
#loc39 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":157:14)
#loc40 = loc("/usr/include/stdlib.h":575:1)
#loc41 = loc("/usr/include/stdlib.h":575:41)
#loc42 = loc("/usr/include/time.h":76:1)
#loc43 = loc("/usr/include/time.h":76:38)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":174:15)
#loc47 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":176:15)
#loc48 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":179:15)
#loc49 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":181:15)
#loc50 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":169:1)
#loc51 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":184:1)
#loc56 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":170:1)
#loc57 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":172:27)
#loc58 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":172:22)
#loc59 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":172:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":174:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":175:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":175:54)
#loc63 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":176:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":179:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":180:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":180:53)
#loc67 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":181:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":183:12)
#loc69 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":183:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":23:1)
#loc71 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":26:1)
#loc72 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":25:12)
#loc73 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":25:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":70:19)
#loc75 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":81:23)
#loc76 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":57:1)
#loc77 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":84:1)
#loc78 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":59:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":59:9)
#loc80 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":61:13)
#loc81 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":61:12)
#loc82 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":61:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":62:5)
#loc84 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":66:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":62:8)
#loc86 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":62:26)
#loc87 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":63:5)
#loc88 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":65:9)
#loc89 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":65:16)
#loc90 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":65:23)
#loc91 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":67:5)
#loc92 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":83:5)
#loc93 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":67:8)
#loc94 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":67:27)
#loc95 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":68:5)
#loc96 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":71:5)
#loc97 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":73:5)
#loc98 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":70:9)
#loc99 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":75:9)
#loc100 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":82:9)
#loc101 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":75:13)
#loc102 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":75:21)
#loc103 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":76:9)
#loc104 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":78:9)
#loc105 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":80:9)
#loc106 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":77:26)
#loc107 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":77:32)
#loc108 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":77:13)
#loc109 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":81:13)
#loc110 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":28:1)
#loc111 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":31:1)
#loc112 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":30:12)
#loc113 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":30:5)
#loc114 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":87:1)
#loc115 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":109:1)
#loc116 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":89:5)
#loc117 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":89:9)
#loc118 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":91:13)
#loc119 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":91:12)
#loc120 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":91:5)
#loc121 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":92:5)
#loc122 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":96:5)
#loc123 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":92:8)
#loc124 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":92:26)
#loc125 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":93:5)
#loc126 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":95:9)
#loc127 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":95:16)
#loc128 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":95:23)
#loc129 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":97:5)
#loc130 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":108:5)
#loc131 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":97:8)
#loc132 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":97:26)
#loc133 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":98:5)
#loc134 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":100:9)
#loc135 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":107:9)
#loc136 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":100:13)
#loc137 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":100:21)
#loc138 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":101:9)
#loc139 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":103:9)
#loc140 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":105:9)
#loc141 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":102:26)
#loc142 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":102:32)
#loc143 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":102:13)
#loc144 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":106:23)
#loc145 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":106:13)
#loc146 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":112:1)
#loc147 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":132:1)
#loc148 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":114:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":114:9)
#loc150 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":116:13)
#loc151 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":116:12)
#loc152 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":116:5)
#loc153 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":117:5)
#loc154 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":126:5)
#loc155 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":117:8)
#loc156 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":117:27)
#loc157 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":118:5)
#loc158 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":121:5)
#loc159 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":123:5)
#loc160 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":120:19)
#loc161 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":120:9)
#loc162 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":125:16)
#loc163 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":125:9)
#loc164 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":127:5)
#loc165 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":131:5)
#loc166 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":127:8)
#loc167 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":127:26)
#loc168 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":128:5)
#loc169 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":130:22)
#loc170 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":130:28)
#loc171 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":130:9)
#loc172 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":135:1)
#loc173 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":150:1)
#loc174 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":137:5)
#loc175 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":137:9)
#loc176 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":139:13)
#loc177 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":139:12)
#loc178 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":139:5)
#loc179 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":140:5)
#loc180 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":144:5)
#loc181 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":140:8)
#loc182 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":140:26)
#loc183 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":141:5)
#loc184 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":143:16)
#loc185 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":143:9)
#loc186 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":145:5)
#loc187 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":149:5)
#loc188 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":145:8)
#loc189 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":145:26)
#loc190 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":146:5)
#loc191 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":148:22)
#loc192 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":148:28)
#loc193 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":148:9)
#loc194 = loc(fused[#loc1, #loc2])
#loc195 = loc(fused[#loc3, #loc4])
#loc196 = loc(fused[#loc6, #loc7])
#loc197 = loc(fused[#loc8, #loc9])
#loc198 = loc(fused[#loc10, #loc11])
#loc199 = loc(fused[#loc14, #loc12])
#loc200 = loc(fused[#loc15, #loc16])
#loc201 = loc(fused[#loc17, #loc18])
#loc202 = loc(fused[#loc19, #loc16])
#loc203 = loc(fused[#loc22, #loc23])
#loc204 = loc(fused[#loc24, #loc25])
#loc205 = loc(fused[#loc26, #loc23])
#loc206 = loc(fused[#loc27, #loc28])
#loc207 = loc(fused[#loc30, #loc31])
#loc208 = loc(fused[#loc32, #loc33])
#loc209 = loc(fused[#loc34, #loc35])
#loc210 = loc(fused[#loc36, #loc37])
#loc211 = loc(fused[#loc38, #loc39])
#loc212 = loc(fused[#loc40, #loc41])
#loc213 = loc(fused[#loc42, #loc43])
#loc214 = loc(fused[#loc44, #loc45])
#loc215 = loc(fused[#loc50, #loc51])
#loc218 = loc(fused[#loc61, #loc62])
#loc219 = loc(fused[#loc65, #loc66])
#loc220 = loc(fused[#loc69, #loc68])
#loc221 = loc(fused[#loc70, #loc71])
#loc222 = loc(fused[#loc73, #loc72])
#loc223 = loc(fused[#loc76, #loc77])
#loc224 = loc(fused[#loc78, #loc79])
#loc225 = loc(fused[#loc82, #loc80])
#loc226 = loc(fused[#loc83, #loc84])
#loc227 = loc(fused[#loc85, #loc86])
#loc228 = loc(fused[#loc87, #loc84])
#loc229 = loc(fused[#loc91, #loc92])
#loc230 = loc(fused[#loc93, #loc94])
#loc231 = loc(fused[#loc95, #loc96, #loc97, #loc92])
#loc232 = loc(fused[#loc99, #loc100])
#loc233 = loc(fused[#loc101, #loc102])
#loc234 = loc(fused[#loc103, #loc104, #loc105, #loc100])
#loc235 = loc(fused[#loc106, #loc107])
#loc236 = loc(fused[#loc110, #loc111])
#loc237 = loc(fused[#loc113, #loc112])
#loc238 = loc(fused[#loc114, #loc115])
#loc239 = loc(fused[#loc116, #loc117])
#loc240 = loc(fused[#loc120, #loc118])
#loc241 = loc(fused[#loc121, #loc122])
#loc242 = loc(fused[#loc123, #loc124])
#loc243 = loc(fused[#loc125, #loc122])
#loc244 = loc(fused[#loc129, #loc130])
#loc245 = loc(fused[#loc131, #loc132])
#loc246 = loc(fused[#loc133, #loc130])
#loc247 = loc(fused[#loc134, #loc135])
#loc248 = loc(fused[#loc136, #loc137])
#loc249 = loc(fused[#loc138, #loc139, #loc140, #loc135])
#loc250 = loc(fused[#loc141, #loc142])
#loc251 = loc(fused[#loc146, #loc147])
#loc252 = loc(fused[#loc148, #loc149])
#loc253 = loc(fused[#loc152, #loc150])
#loc254 = loc(fused[#loc153, #loc154])
#loc255 = loc(fused[#loc155, #loc156])
#loc256 = loc(fused[#loc157, #loc158, #loc159, #loc154])
#loc257 = loc(fused[#loc163, #loc162])
#loc258 = loc(fused[#loc164, #loc165])
#loc259 = loc(fused[#loc166, #loc167])
#loc260 = loc(fused[#loc168, #loc165])
#loc261 = loc(fused[#loc169, #loc170])
#loc262 = loc(fused[#loc172, #loc173])
#loc263 = loc(fused[#loc174, #loc175])
#loc264 = loc(fused[#loc178, #loc176])
#loc265 = loc(fused[#loc179, #loc180])
#loc266 = loc(fused[#loc181, #loc182])
#loc267 = loc(fused[#loc183, #loc180])
#loc268 = loc(fused[#loc185, #loc184])
#loc269 = loc(fused[#loc186, #loc187])
#loc270 = loc(fused[#loc188, #loc189])
#loc271 = loc(fused[#loc190, #loc187])
#loc272 = loc(fused[#loc191, #loc192])
