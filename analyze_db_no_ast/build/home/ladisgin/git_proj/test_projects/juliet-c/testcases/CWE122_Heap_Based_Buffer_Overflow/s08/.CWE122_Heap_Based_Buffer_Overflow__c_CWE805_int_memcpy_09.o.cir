!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc151)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc152)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc153)
  cir.func private  @printIntLine(!s32i) loc(#loc154)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc155)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc157)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc158)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc151)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc19)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
        %6 = cir.const #cir.int<50> : !s32i loc(#loc22)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc22)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc161)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc162)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc163)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc164)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc30)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !s32i loc(#loc166)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc31)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc33)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc34)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc35)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
          } loc(#loc167)
        } loc(#loc165)
      } loc(#loc160)
    } loc(#loc159)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc169)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc169)
      cir.store %3, %2 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc169)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc40)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc40)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc41)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc41)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc42)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc42)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc170)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc171)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc172)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc48)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc49)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc47)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc50)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc51)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc52)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc51)
    } loc(#loc168)
    cir.return loc(#loc12)
  } loc(#loc156)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc55)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    cir.return loc(#loc54)
  } loc(#loc173)
  cir.global "private"  constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc176)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc177)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc63)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc179)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc68)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc180)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc176)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc72)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc72)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc63)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc63)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc76)
      } else {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc77)
        %6 = cir.const #cir.int<100> : !s32i loc(#loc78)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc78)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc183)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc184)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc77)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc185)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc186)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc85)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc86)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc86)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !s32i loc(#loc188)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc87)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc89)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc90)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc91)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc89)
          } loc(#loc189)
        } loc(#loc187)
      } loc(#loc182)
    } loc(#loc181)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc191)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc191)
      cir.store %3, %2 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc191)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc96)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc96)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc97)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc97)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc98)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc98)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc192)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc193)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc194)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc103)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc104)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc105)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc103)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc106)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc107)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc108)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc108)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc107)
    } loc(#loc190)
    cir.return loc(#loc65)
  } loc(#loc178)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc196)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc113)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc197)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc151)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc117)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc117)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc119)
        %6 = cir.const #cir.int<100> : !s32i loc(#loc120)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc120)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc200)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc201)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc119)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc202)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc203)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc127)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc128)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc128)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !s32i loc(#loc205)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc129)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc131)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc132)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc133)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc131)
          } loc(#loc206)
        } loc(#loc204)
      } loc(#loc199)
    } loc(#loc198)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc208)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc208)
      cir.store %3, %2 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc208)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc138)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc138)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc139)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc139)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc140)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc140)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc209)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc210)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc211)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc145)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc146)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc147)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc145)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc148)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc149)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc150)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc150)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc149)
    } loc(#loc207)
    cir.return loc(#loc110)
  } loc(#loc195)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":21:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":38:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":23:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":23:11)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":24:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":24:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":25:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":30:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":25:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":26:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":28:23)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":28:30)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":28:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":28:43)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":28:44)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":28:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":29:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":29:37)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":29:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":29:21)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":29:18)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":29:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":29:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":29:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":29:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":31:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":37:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":32:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":32:29)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":34:16)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":34:22)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":34:30)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":34:34)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":34:44)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":34:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":34:45)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":35:22)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":35:27)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":35:28)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":35:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":36:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":36:14)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":89:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":93:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":91:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":91:14)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":92:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":92:14)
#loc59 = loc("../../../testcasesupport/std_testcase.h":110:1)
#loc60 = loc("../../../testcasesupport/std_testcase.h":110:18)
#loc61 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc62 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":52:19)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":45:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":67:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":47:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":47:11)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":48:12)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":48:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":49:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":59:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":49:8)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":50:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":53:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":55:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":52:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":57:23)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":57:30)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":57:34)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":57:44)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":57:45)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":57:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":58:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":58:37)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":58:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":58:21)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":58:18)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":58:27)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":58:28)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":58:34)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":58:33)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":60:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":66:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":61:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":61:29)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":63:16)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":63:22)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":63:30)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":63:34)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":63:44)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":63:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":63:45)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":64:22)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":64:27)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":64:28)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":64:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":65:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":65:14)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":70:1)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":87:1)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":72:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":72:11)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":73:12)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":73:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":74:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":79:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":74:8)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":75:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":77:23)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":77:30)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":77:34)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":77:44)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":77:45)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":77:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":78:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":78:37)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":78:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":78:21)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":78:18)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":78:27)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":78:28)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":78:34)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":78:33)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":80:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":86:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":81:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":81:29)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":83:16)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":83:22)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":83:30)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":83:34)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":83:44)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":83:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":83:45)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":84:22)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":84:27)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":84:28)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":84:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":85:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c":85:14)
#loc151 = loc(fused[#loc1, #loc2])
#loc152 = loc(fused[#loc3, #loc4])
#loc153 = loc(fused[#loc5, #loc6])
#loc154 = loc(fused[#loc7, #loc8])
#loc155 = loc(fused[#loc9, #loc10])
#loc156 = loc(fused[#loc11, #loc12])
#loc157 = loc(fused[#loc13, #loc14])
#loc158 = loc(fused[#loc16, #loc15])
#loc159 = loc(fused[#loc17, #loc18])
#loc160 = loc(fused[#loc20, #loc18])
#loc161 = loc(fused[#loc23, #loc24])
#loc162 = loc(fused[#loc22, #loc24])
#loc163 = loc(fused[#loc21, #loc25])
#loc164 = loc(fused[#loc26, #loc25])
#loc165 = loc(fused[#loc27, #loc28])
#loc166 = loc(fused[#loc29, #loc30])
#loc167 = loc(fused[#loc32, #loc28])
#loc168 = loc(fused[#loc36, #loc37])
#loc169 = loc(fused[#loc38, #loc39])
#loc170 = loc(fused[#loc43, #loc44])
#loc171 = loc(fused[#loc42, #loc44])
#loc172 = loc(fused[#loc45, #loc46])
#loc173 = loc(fused[#loc53, #loc54])
#loc174 = loc(fused[#loc55, #loc56])
#loc175 = loc(fused[#loc57, #loc58])
#loc176 = loc(fused[#loc59, #loc60])
#loc177 = loc(fused[#loc61, #loc62])
#loc178 = loc(fused[#loc64, #loc65])
#loc179 = loc(fused[#loc66, #loc67])
#loc180 = loc(fused[#loc69, #loc68])
#loc181 = loc(fused[#loc70, #loc71])
#loc182 = loc(fused[#loc73, #loc74, #loc75, #loc71])
#loc183 = loc(fused[#loc79, #loc80])
#loc184 = loc(fused[#loc78, #loc80])
#loc185 = loc(fused[#loc77, #loc81])
#loc186 = loc(fused[#loc82, #loc81])
#loc187 = loc(fused[#loc83, #loc84])
#loc188 = loc(fused[#loc85, #loc86])
#loc189 = loc(fused[#loc88, #loc84])
#loc190 = loc(fused[#loc92, #loc93])
#loc191 = loc(fused[#loc94, #loc95])
#loc192 = loc(fused[#loc99, #loc100])
#loc193 = loc(fused[#loc98, #loc100])
#loc194 = loc(fused[#loc101, #loc102])
#loc195 = loc(fused[#loc109, #loc110])
#loc196 = loc(fused[#loc111, #loc112])
#loc197 = loc(fused[#loc114, #loc113])
#loc198 = loc(fused[#loc115, #loc116])
#loc199 = loc(fused[#loc118, #loc116])
#loc200 = loc(fused[#loc121, #loc122])
#loc201 = loc(fused[#loc120, #loc122])
#loc202 = loc(fused[#loc119, #loc123])
#loc203 = loc(fused[#loc124, #loc123])
#loc204 = loc(fused[#loc125, #loc126])
#loc205 = loc(fused[#loc127, #loc128])
#loc206 = loc(fused[#loc130, #loc126])
#loc207 = loc(fused[#loc134, #loc135])
#loc208 = loc(fused[#loc136, #loc137])
#loc209 = loc(fused[#loc141, #loc142])
#loc210 = loc(fused[#loc140, #loc142])
#loc211 = loc(fused[#loc143, #loc144])
