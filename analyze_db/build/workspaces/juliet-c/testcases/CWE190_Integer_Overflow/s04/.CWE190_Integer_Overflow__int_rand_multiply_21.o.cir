!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc9 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":25:21)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":25:25)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":44:12)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":59:26)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":59:30)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":90:12)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":96:26)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":96:30)
#loc134 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":122:12)
#loc144 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":128:25)
#loc145 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":128:29)
#loc177 = loc(fused[#loc9, #loc10])
#loc196 = loc(fused[#loc54, #loc55])
#loc214 = loc(fused[#loc100, #loc101])
#loc232 = loc(fused[#loc144, #loc145])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc173)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc174)
  cir.func private @printIntLine(!s32i) loc(#loc175)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc9, #loc10])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc178)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc177)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc13)
    cir.br ^bb1 loc(#loc179)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc174)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc16)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc180)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc181)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc21)
    %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc182)
    cir.brcond %7 ^bb4, ^bb5 loc(#loc183)
  ^bb4:  // pred: ^bb3
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc12)
    %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc23)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc25)
    cir.br ^bb5 loc(#loc19)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc19)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc15)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc15)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc8)
  } loc(#loc176)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_multiply_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc185)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc30)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc32)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc32)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc32)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc32)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc32)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc32)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc32)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc32)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc32)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc32)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc32)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc32)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc32)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc32)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc32)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc32)
    cir.br ^bb3(%17 : !u32i) loc(#loc32)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc32)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc32)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc32)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc32)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc32)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc32)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc32)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc32)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc32)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc32)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc32)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc32)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc32)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc32)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc32)
    cir.br ^bb3(%33 : !u32i) loc(#loc32)
  ^bb3(%34: !u32i loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":44:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc32)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc32)
    cir.store %35, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %37 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc174)
    cir.store %36, %37 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    %38 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    cir.call @badSink(%38) : (!s32i) -> () loc(#loc37)
    cir.return loc(#loc27)
  } loc(#loc184)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_multiply_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc190)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc191)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc192)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    cir.return loc(#loc39)
  } loc(#loc189)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc193)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc194)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc51)
  cir.func internal private @goodB2G1Sink(%arg0: !s32i loc(fused[#loc54, #loc55])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc197)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc196)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc58)
    cir.br ^bb1 loc(#loc198)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc193)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc61)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc199)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    cir.br ^bb13 loc(#loc63)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc200)
  ^bb4:  // pred: ^bb3
    %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc68)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc69)
    %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc201)
    cir.brcond %9 ^bb5, ^bb11 loc(#loc202)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc203)
  ^bb6:  // pred: ^bb5
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc74)
    %12 = cir.const #cir.int<2> : !s32i loc(#loc75)
    %13 = cir.binop(div, %11, %12) : !s32i loc(#loc204)
    %14 = cir.cmp(lt, %10, %13) : !s32i, !cir.bool loc(#loc205)
    cir.brcond %14 ^bb7, ^bb8 loc(#loc206)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc57)
    %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc80)
    cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc82)
    cir.br ^bb9 loc(#loc78)
  ^bb8:  // pred: ^bb6
    %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc51)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    cir.br ^bb9 loc(#loc72)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc72)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc67)
  ^bb11:  // 2 preds: ^bb4, ^bb10
    cir.br ^bb12 loc(#loc67)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc60)
  ^bb13:  // 2 preds: ^bb2, ^bb12
    cir.br ^bb14 loc(#loc60)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc53)
  } loc(#loc195)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc88)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc90)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc90)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc90)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc90)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc90)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc90)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc90)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc90)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc90)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc90)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc90)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc90)
    cir.br ^bb3(%17 : !u32i) loc(#loc90)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc90)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc90)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc90)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc90)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc90)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc90)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc90)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc90)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc90)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc90)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc90)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc90)
    cir.br ^bb3(%33 : !u32i) loc(#loc90)
  ^bb3(%34: !u32i loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":90:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc90)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc90)
    cir.store %35, %0 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    %36 = cir.const #cir.int<0> : !s32i loc(#loc92)
    %37 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc193)
    cir.store %36, %37 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    %38 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    cir.call @goodB2G1Sink(%38) : (!s32i) -> () loc(#loc95)
    cir.return loc(#loc85)
  } loc(#loc207)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc212)
  cir.func internal private @goodB2G2Sink(%arg0: !s32i loc(fused[#loc100, #loc101])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc215)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc214)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    cir.br ^bb1 loc(#loc216)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc212)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc107)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc107)
    cir.brcond %4 ^bb2, ^bb12 loc(#loc217)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc218)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc111)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc112)
    %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc219)
    cir.brcond %7 ^bb4, ^bb10 loc(#loc220)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc221)
  ^bb5:  // pred: ^bb4
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc116)
    %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc117)
    %10 = cir.const #cir.int<2> : !s32i loc(#loc118)
    %11 = cir.binop(div, %9, %10) : !s32i loc(#loc222)
    %12 = cir.cmp(lt, %8, %11) : !s32i, !cir.bool loc(#loc223)
    cir.brcond %12 ^bb6, ^bb7 loc(#loc224)
  ^bb6:  // pred: ^bb5
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc123)
    %14 = cir.const #cir.int<2> : !s32i loc(#loc103)
    %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc123)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc124)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc125)
    cir.br ^bb8 loc(#loc121)
  ^bb7:  // pred: ^bb5
    %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc126)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc126)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc127)
    cir.br ^bb8 loc(#loc115)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc115)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc110)
  ^bb10:  // 2 preds: ^bb3, ^bb9
    cir.br ^bb11 loc(#loc110)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc106)
  ^bb12:  // 2 preds: ^bb1, ^bb11
    cir.br ^bb13 loc(#loc106)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc99)
  } loc(#loc213)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc226)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc132)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc227)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc134)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc134)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc134)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc134)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc134)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc134)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc134)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc134)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc134)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc134)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc134)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc134)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc134)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc134)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc134)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc134)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc134)
    cir.br ^bb3(%17 : !u32i) loc(#loc134)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc134)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc134)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc134)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc134)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc134)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc134)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc134)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc134)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc134)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc134)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc134)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc134)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc134)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc134)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc134)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc134)
    cir.br ^bb3(%33 : !u32i) loc(#loc134)
  ^bb3(%34: !u32i loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":122:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc134)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc134)
    cir.store %35, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc136)
    %37 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc212)
    cir.store %36, %37 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    %38 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    cir.call @goodB2G2Sink(%38) : (!s32i) -> () loc(#loc139)
    cir.return loc(#loc129)
  } loc(#loc225)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc230)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc144, #loc145])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc233)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc232)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc148)
    cir.br ^bb1 loc(#loc234)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc230)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc151)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc235)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc236)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc155)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc156)
    %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc237)
    cir.brcond %7 ^bb4, ^bb5 loc(#loc238)
  ^bb4:  // pred: ^bb3
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc147)
    %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc158)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc233)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc159)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc160)
    cir.br ^bb5 loc(#loc154)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc154)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc150)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc150)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc143)
  } loc(#loc231)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc240)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc165)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc167)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc242)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc169)
    %4 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc230)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc243)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc171)
    cir.call @goodG2BSink(%5) : (!s32i) -> () loc(#loc172)
    cir.return loc(#loc162)
  } loc(#loc239)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_21.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":23:1)
#loc4 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":23:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":25:1)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":36:1)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":32:13)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":32:33)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":26:1)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":27:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":35:5)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":27:8)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":28:5)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":29:9)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":34:9)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":29:12)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":29:19)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":30:9)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":32:26)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":33:26)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":33:13)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":38:1)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":47:1)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":40:5)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":40:9)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":42:12)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":42:5)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":44:5)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":45:17)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":45:5)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":46:13)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":46:5)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":152:1)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":157:1)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":154:5)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":154:14)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":155:5)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":155:14)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":156:5)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":156:13)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":54:1)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":54:29)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":64:19)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":78:27)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":59:1)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":82:1)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":73:17)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":73:37)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":60:1)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":61:5)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":81:5)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":61:8)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":62:5)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":65:5)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":67:5)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":64:9)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":68:9)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":80:9)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":68:12)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":68:19)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":69:9)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":71:13)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":79:13)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":71:17)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":71:25)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":71:33)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":71:34)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":72:13)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":75:13)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":77:13)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":73:30)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":74:30)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":74:17)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":78:17)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":84:1)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":93:1)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":86:5)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":86:9)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":88:12)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":88:5)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":90:5)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":91:22)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":91:5)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":92:18)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":92:5)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":55:1)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":55:29)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":96:1)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":114:1)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":105:17)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":105:37)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":97:1)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":98:5)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":113:5)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":98:8)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":99:5)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":100:9)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":112:9)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":100:12)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":100:19)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":101:9)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":103:13)
#loc115 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":111:13)
#loc116 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":103:17)
#loc117 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":103:25)
#loc118 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":103:33)
#loc119 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":103:34)
#loc120 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":104:13)
#loc121 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":107:13)
#loc122 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":109:13)
#loc123 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":105:30)
#loc124 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":106:30)
#loc125 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":106:17)
#loc126 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":110:27)
#loc127 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":110:17)
#loc128 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":116:1)
#loc129 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":125:1)
#loc130 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":118:5)
#loc131 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":118:9)
#loc132 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":120:12)
#loc133 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":120:5)
#loc135 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":122:5)
#loc136 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":123:22)
#loc137 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":123:5)
#loc138 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":124:18)
#loc139 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":124:5)
#loc140 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":56:1)
#loc141 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":56:28)
#loc142 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":128:1)
#loc143 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":139:1)
#loc146 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":135:13)
#loc147 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":135:33)
#loc148 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":129:1)
#loc149 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":130:5)
#loc150 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":138:5)
#loc151 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":130:8)
#loc152 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":131:5)
#loc153 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":132:9)
#loc154 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":137:9)
#loc155 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":132:12)
#loc156 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":132:19)
#loc157 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":133:9)
#loc158 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":135:26)
#loc159 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":136:26)
#loc160 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":136:13)
#loc161 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":141:1)
#loc162 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":150:1)
#loc163 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":143:5)
#loc164 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":143:9)
#loc165 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":145:12)
#loc166 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":145:5)
#loc167 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":147:12)
#loc168 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":147:5)
#loc169 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":148:21)
#loc170 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":148:5)
#loc171 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":149:17)
#loc172 = loc("CWE190_Integer_Overflow__int_rand_multiply_21.c":149:5)
#loc173 = loc(fused[#loc1, #loc2])
#loc174 = loc(fused[#loc3, #loc4])
#loc175 = loc(fused[#loc5, #loc6])
#loc176 = loc(fused[#loc7, #loc8])
#loc178 = loc(fused[#loc11, #loc12])
#loc179 = loc(fused[#loc14, #loc15])
#loc180 = loc(fused[#loc17, #loc15])
#loc181 = loc(fused[#loc18, #loc19])
#loc182 = loc(fused[#loc20, #loc21])
#loc183 = loc(fused[#loc22, #loc19])
#loc184 = loc(fused[#loc26, #loc27])
#loc185 = loc(fused[#loc28, #loc29])
#loc186 = loc(fused[#loc31, #loc30])
#loc187 = loc(fused[#loc33, #loc32])
#loc188 = loc(fused[#loc35, #loc34])
#loc189 = loc(fused[#loc38, #loc39])
#loc190 = loc(fused[#loc40, #loc41])
#loc191 = loc(fused[#loc42, #loc43])
#loc192 = loc(fused[#loc44, #loc45])
#loc193 = loc(fused[#loc46, #loc47])
#loc194 = loc(fused[#loc48, #loc49])
#loc195 = loc(fused[#loc52, #loc53])
#loc197 = loc(fused[#loc56, #loc57])
#loc198 = loc(fused[#loc59, #loc60])
#loc199 = loc(fused[#loc62, #loc63, #loc64, #loc60])
#loc200 = loc(fused[#loc66, #loc67])
#loc201 = loc(fused[#loc68, #loc69])
#loc202 = loc(fused[#loc70, #loc67])
#loc203 = loc(fused[#loc71, #loc72])
#loc204 = loc(fused[#loc74, #loc75])
#loc205 = loc(fused[#loc73, #loc76])
#loc206 = loc(fused[#loc77, #loc78, #loc79, #loc72])
#loc207 = loc(fused[#loc84, #loc85])
#loc208 = loc(fused[#loc86, #loc87])
#loc209 = loc(fused[#loc89, #loc88])
#loc210 = loc(fused[#loc91, #loc90])
#loc211 = loc(fused[#loc93, #loc92])
#loc212 = loc(fused[#loc96, #loc97])
#loc213 = loc(fused[#loc98, #loc99])
#loc215 = loc(fused[#loc102, #loc103])
#loc216 = loc(fused[#loc105, #loc106])
#loc217 = loc(fused[#loc108, #loc106])
#loc218 = loc(fused[#loc109, #loc110])
#loc219 = loc(fused[#loc111, #loc112])
#loc220 = loc(fused[#loc113, #loc110])
#loc221 = loc(fused[#loc114, #loc115])
#loc222 = loc(fused[#loc117, #loc118])
#loc223 = loc(fused[#loc116, #loc119])
#loc224 = loc(fused[#loc120, #loc121, #loc122, #loc115])
#loc225 = loc(fused[#loc128, #loc129])
#loc226 = loc(fused[#loc130, #loc131])
#loc227 = loc(fused[#loc133, #loc132])
#loc228 = loc(fused[#loc135, #loc134])
#loc229 = loc(fused[#loc137, #loc136])
#loc230 = loc(fused[#loc140, #loc141])
#loc231 = loc(fused[#loc142, #loc143])
#loc233 = loc(fused[#loc146, #loc147])
#loc234 = loc(fused[#loc149, #loc150])
#loc235 = loc(fused[#loc152, #loc150])
#loc236 = loc(fused[#loc153, #loc154])
#loc237 = loc(fused[#loc155, #loc156])
#loc238 = loc(fused[#loc157, #loc154])
#loc239 = loc(fused[#loc161, #loc162])
#loc240 = loc(fused[#loc163, #loc164])
#loc241 = loc(fused[#loc166, #loc165])
#loc242 = loc(fused[#loc168, #loc167])
#loc243 = loc(fused[#loc170, #loc169])
