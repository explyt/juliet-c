!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc95)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc96)
  cir.func private @printIntLine(!s32i) loc(#loc97)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc98)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc100)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc101)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc15)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc102)
    cir.br ^bb1 loc(#loc103)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc103)
  ^bb2:  // 2 preds: ^bb1, ^bb9
    %3 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %4 ^bb3, ^bb10 loc(#loc19)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc104)
  ^bb4:  // pred: ^bb3
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc21)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc22)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc22)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc105)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc106)
    cir.br ^bb5 loc(#loc107)
  ^bb5:  // pred: ^bb4
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc28)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc108)
    cir.brcond %13 ^bb6, ^bb7 loc(#loc109)
  ^bb6:  // pred: ^bb5
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc30)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc32)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
    cir.br ^bb7 loc(#loc26)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc26)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10 loc(#loc33)
  ^bb9:  // no predecessors
    cir.br ^bb2 loc(#loc18)
  ^bb10:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb11 loc(#loc18)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc110)
  ^bb12:  // pred: ^bb11
    %17 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc100)
    cir.store %17, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc100)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc36)
    %20 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc37)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc37)
    %22 = cir.const #cir.int<10> : !s32i loc(#loc38)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc38)
    %24 = cir.const #cir.int<4> : !u64i loc(#loc111)
    %25 = cir.binop(mul, %23, %24) : !u64i loc(#loc112)
    cir.libc.memcpy %25 bytes from %21 to %19 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc113)
    %26 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
    %27 = cir.const #cir.int<0> : !s32i loc(#loc44)
    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc45)
    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc43)
    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc46)
    %30 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc47)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc48)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc48)
    cir.call @free(%32) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc47)
    cir.br ^bb13 loc(#loc35)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc10)
  } loc(#loc99)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc115)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc51)
    cir.return loc(#loc50)
  } loc(#loc114)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc117)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc118)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc59)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc119)
    cir.br ^bb1 loc(#loc120)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc120)
  ^bb2:  // 2 preds: ^bb1, ^bb9
    %3 = cir.const #cir.int<1> : !s32i loc(#loc63)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc63)
    cir.brcond %4 ^bb3, ^bb10 loc(#loc63)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc121)
  ^bb4:  // pred: ^bb3
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc65)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc66)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc66)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc122)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc123)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc65)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc124)
    cir.store %11, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc125)
    cir.br ^bb5 loc(#loc126)
  ^bb5:  // pred: ^bb4
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc73)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc74)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc74)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc127)
    cir.brcond %15 ^bb6, ^bb7 loc(#loc128)
  ^bb6:  // pred: ^bb5
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc76)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc78)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc76)
    cir.br ^bb7 loc(#loc72)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc72)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10 loc(#loc79)
  ^bb9:  // no predecessors
    cir.br ^bb2 loc(#loc62)
  ^bb10:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb11 loc(#loc62)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc129)
  ^bb12:  // pred: ^bb11
    %19 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc117)
    cir.store %19, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc117)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc82)
    %22 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc83)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc83)
    %24 = cir.const #cir.int<10> : !s32i loc(#loc84)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc84)
    %26 = cir.const #cir.int<4> : !u64i loc(#loc130)
    %27 = cir.binop(mul, %25, %26) : !u64i loc(#loc131)
    cir.libc.memcpy %27 bytes from %23 to %21 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc132)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc89)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc90)
    %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc91)
    %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc92)
    %32 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc93)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc94)
    %34 = cir.cast(bitcast, %33 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc94)
    cir.call @free(%34) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc93)
    cir.br ^bb13 loc(#loc81)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc54)
  } loc(#loc116)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":39:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":33:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":33:28)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":23:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":23:11)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":24:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":24:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":25:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":31:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":25:11)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":26:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":28:23)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":28:30)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":28:32)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":28:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:37)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:21)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:27)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:28)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:34)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:33)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":30:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":32:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":38:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:16)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:22)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:30)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:33)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:43)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:44)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":36:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":36:27)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":36:28)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":36:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":37:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":37:14)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":66:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":69:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":68:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":68:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":46:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":64:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":58:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":58:28)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":48:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":48:11)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":49:12)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":49:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":50:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":56:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":50:11)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":51:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":53:23)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":53:30)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":53:33)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":53:43)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":53:44)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":53:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:37)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:21)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:27)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:28)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:34)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:33)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":55:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":57:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":63:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:16)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:22)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:30)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:33)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:43)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:44)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":61:22)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":61:27)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":61:28)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":61:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":62:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":62:14)
#loc95 = loc(fused[#loc1, #loc2])
#loc96 = loc(fused[#loc3, #loc4])
#loc97 = loc(fused[#loc5, #loc6])
#loc98 = loc(fused[#loc7, #loc8])
#loc99 = loc(fused[#loc9, #loc10])
#loc100 = loc(fused[#loc11, #loc12])
#loc101 = loc(fused[#loc13, #loc14])
#loc102 = loc(fused[#loc16, #loc15])
#loc103 = loc(fused[#loc17, #loc18])
#loc104 = loc(fused[#loc20, #loc18])
#loc105 = loc(fused[#loc21, #loc23])
#loc106 = loc(fused[#loc24, #loc23])
#loc107 = loc(fused[#loc25, #loc26])
#loc108 = loc(fused[#loc27, #loc28])
#loc109 = loc(fused[#loc29, #loc26])
#loc110 = loc(fused[#loc34, #loc35])
#loc111 = loc(fused[#loc39, #loc40])
#loc112 = loc(fused[#loc38, #loc40])
#loc113 = loc(fused[#loc41, #loc42])
#loc114 = loc(fused[#loc49, #loc50])
#loc115 = loc(fused[#loc51, #loc52])
#loc116 = loc(fused[#loc53, #loc54])
#loc117 = loc(fused[#loc55, #loc56])
#loc118 = loc(fused[#loc57, #loc58])
#loc119 = loc(fused[#loc60, #loc59])
#loc120 = loc(fused[#loc61, #loc62])
#loc121 = loc(fused[#loc64, #loc62])
#loc122 = loc(fused[#loc67, #loc68])
#loc123 = loc(fused[#loc66, #loc68])
#loc124 = loc(fused[#loc65, #loc69])
#loc125 = loc(fused[#loc70, #loc69])
#loc126 = loc(fused[#loc71, #loc72])
#loc127 = loc(fused[#loc73, #loc74])
#loc128 = loc(fused[#loc75, #loc72])
#loc129 = loc(fused[#loc80, #loc81])
#loc130 = loc(fused[#loc85, #loc86])
#loc131 = loc(fused[#loc84, #loc86])
#loc132 = loc(fused[#loc87, #loc88])
