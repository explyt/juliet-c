!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc149)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc150)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc151)
  cir.func private @printIntLine(!s32i) loc(#loc152)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc153)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc155)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc156)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc158)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc158)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc19)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc22)
        %7 = cir.const #cir.int<10> : !s32i loc(#loc23)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc23)
        %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc160)
        cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc161)
        cir.scope {
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
          %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc29)
          %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc163)
          cir.if %14 {
            %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc31)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc32)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc33)
            cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
          } loc(#loc164)
        } loc(#loc162)
      } loc(#loc159)
    } loc(#loc157)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc166)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc166)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc166)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc38)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc39)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc39)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc40)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc40)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc167)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc168)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc169)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc46)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc47)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc45)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc48)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc49)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc50)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc49)
    } loc(#loc165)
    cir.return loc(#loc12)
  } loc(#loc154)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc171)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc53)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc172)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc55)
    cir.return loc(#loc52)
  } loc(#loc170)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc173)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc174)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc61)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc176)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc66)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc177)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc179)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc179)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc70)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc70)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc61)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc61)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc75)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc76)
        %7 = cir.const #cir.int<10> : !s32i loc(#loc77)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc77)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc181)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc182)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc76)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc183)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc184)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc85)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc85)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc186)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc87)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc88)
            %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc89)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc87)
          } loc(#loc187)
        } loc(#loc185)
      } loc(#loc180)
    } loc(#loc178)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc189)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc189)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc189)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc94)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc94)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc95)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc95)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc96)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc96)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc190)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc191)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc192)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc102)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc103)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc101)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc104)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc105)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc106)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc106)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc105)
    } loc(#loc188)
    cir.return loc(#loc63)
  } loc(#loc175)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc194)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc111)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc195)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc197)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc197)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc115)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc115)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc118)
        %7 = cir.const #cir.int<10> : !s32i loc(#loc119)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc119)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc199)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc200)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc118)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc201)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc202)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc126)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc127)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc127)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc204)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc129)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc130)
            %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc131)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc129)
          } loc(#loc205)
        } loc(#loc203)
      } loc(#loc198)
    } loc(#loc196)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc207)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc207)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc207)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc136)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc136)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc137)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc137)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc138)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc138)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc208)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc209)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc210)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc143)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc144)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc145)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc143)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc146)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc147)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc148)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc148)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc147)
    } loc(#loc206)
    cir.return loc(#loc108)
  } loc(#loc193)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":21:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":38:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":23:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":23:11)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":24:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":24:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":25:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":30:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":25:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":25:26)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":28:23)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":28:30)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":28:32)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":28:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":29:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":29:37)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":29:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":29:21)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":29:27)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":29:28)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":29:34)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":29:33)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":31:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":37:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":32:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":32:28)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":34:17)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":34:23)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":34:31)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":34:34)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":34:44)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":34:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":34:45)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":35:22)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":35:27)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":35:28)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":35:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":36:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":36:14)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":89:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":93:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":91:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":91:14)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":92:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":92:14)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc60 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":52:19)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":45:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":67:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":47:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":47:11)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":48:12)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":48:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":49:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":59:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":49:8)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":49:27)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":50:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":53:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":55:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":52:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":57:23)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":57:30)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":57:33)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":57:43)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":57:44)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":57:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":58:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":58:37)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":58:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":58:21)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":58:27)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":58:28)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":58:34)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":58:33)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":60:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":66:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":61:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":61:28)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":63:17)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":63:23)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":63:31)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":63:34)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":63:44)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":63:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":63:45)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":64:22)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":64:27)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":64:28)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":64:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":65:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":65:14)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":70:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":87:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":72:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":72:11)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":73:12)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":73:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":74:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":79:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":74:8)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":74:26)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":75:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":77:23)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":77:30)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":77:33)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":77:43)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":77:44)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":77:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":78:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":78:37)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":78:13)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":78:21)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":78:27)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":78:28)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":78:34)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":78:33)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":80:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":86:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":81:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":81:28)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":83:17)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":83:23)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":83:31)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":83:34)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":83:44)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":83:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":83:45)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":84:22)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":84:27)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":84:28)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":84:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":85:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c":85:14)
#loc149 = loc(fused[#loc1, #loc2])
#loc150 = loc(fused[#loc3, #loc4])
#loc151 = loc(fused[#loc5, #loc6])
#loc152 = loc(fused[#loc7, #loc8])
#loc153 = loc(fused[#loc9, #loc10])
#loc154 = loc(fused[#loc11, #loc12])
#loc155 = loc(fused[#loc13, #loc14])
#loc156 = loc(fused[#loc16, #loc15])
#loc157 = loc(fused[#loc17, #loc18])
#loc158 = loc(fused[#loc19, #loc20])
#loc159 = loc(fused[#loc21, #loc18])
#loc160 = loc(fused[#loc22, #loc24])
#loc161 = loc(fused[#loc25, #loc24])
#loc162 = loc(fused[#loc26, #loc27])
#loc163 = loc(fused[#loc28, #loc29])
#loc164 = loc(fused[#loc30, #loc27])
#loc165 = loc(fused[#loc34, #loc35])
#loc166 = loc(fused[#loc36, #loc37])
#loc167 = loc(fused[#loc41, #loc42])
#loc168 = loc(fused[#loc40, #loc42])
#loc169 = loc(fused[#loc43, #loc44])
#loc170 = loc(fused[#loc51, #loc52])
#loc171 = loc(fused[#loc53, #loc54])
#loc172 = loc(fused[#loc55, #loc56])
#loc173 = loc(fused[#loc57, #loc58])
#loc174 = loc(fused[#loc59, #loc60])
#loc175 = loc(fused[#loc62, #loc63])
#loc176 = loc(fused[#loc64, #loc65])
#loc177 = loc(fused[#loc67, #loc66])
#loc178 = loc(fused[#loc68, #loc69])
#loc179 = loc(fused[#loc70, #loc71])
#loc180 = loc(fused[#loc72, #loc73, #loc74, #loc69])
#loc181 = loc(fused[#loc78, #loc79])
#loc182 = loc(fused[#loc77, #loc79])
#loc183 = loc(fused[#loc76, #loc80])
#loc184 = loc(fused[#loc81, #loc80])
#loc185 = loc(fused[#loc82, #loc83])
#loc186 = loc(fused[#loc84, #loc85])
#loc187 = loc(fused[#loc86, #loc83])
#loc188 = loc(fused[#loc90, #loc91])
#loc189 = loc(fused[#loc92, #loc93])
#loc190 = loc(fused[#loc97, #loc98])
#loc191 = loc(fused[#loc96, #loc98])
#loc192 = loc(fused[#loc99, #loc100])
#loc193 = loc(fused[#loc107, #loc108])
#loc194 = loc(fused[#loc109, #loc110])
#loc195 = loc(fused[#loc112, #loc111])
#loc196 = loc(fused[#loc113, #loc114])
#loc197 = loc(fused[#loc115, #loc116])
#loc198 = loc(fused[#loc117, #loc114])
#loc199 = loc(fused[#loc120, #loc121])
#loc200 = loc(fused[#loc119, #loc121])
#loc201 = loc(fused[#loc118, #loc122])
#loc202 = loc(fused[#loc123, #loc122])
#loc203 = loc(fused[#loc124, #loc125])
#loc204 = loc(fused[#loc126, #loc127])
#loc205 = loc(fused[#loc128, #loc125])
#loc206 = loc(fused[#loc132, #loc133])
#loc207 = loc(fused[#loc134, #loc135])
#loc208 = loc(fused[#loc139, #loc140])
#loc209 = loc(fused[#loc138, #loc140])
#loc210 = loc(fused[#loc141, #loc142])
