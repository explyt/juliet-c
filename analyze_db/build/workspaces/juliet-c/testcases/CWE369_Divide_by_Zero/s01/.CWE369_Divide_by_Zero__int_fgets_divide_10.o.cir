!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc205)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc206)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc207)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc208)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc209)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printIntLine(!s32i) loc(#loc210)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fgets_divide_10_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc212)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc19)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc205)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc23)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc23)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc217)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc217)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc217)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc31)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc32)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc32)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc32)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc32)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc32)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc32)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc32)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc32)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc207)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc33)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc34)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc35)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc35)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc219)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc39)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc40)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc43)
            } loc(#loc220)
          } loc(#loc218)
        } loc(#loc216)
      } loc(#loc215)
    } loc(#loc214)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc205)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc46)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc46)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc48)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
        %8 = cir.binop(div, %6, %7) : !s32i loc(#loc224)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc50)
      } loc(#loc223)
    } loc(#loc222)
    cir.return loc(#loc15)
  } loc(#loc211)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fgets_divide_10_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc226)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc53)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc227)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc55)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc228)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc57)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc229)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc59)
    cir.return loc(#loc52)
  } loc(#loc225)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc230)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc64)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc232)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc70)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc233)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc205)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc74)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc74)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc237)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc237)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc237)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc82)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc83)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc83)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc83)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc83)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc83)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc83)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc83)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc83)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc207)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc84)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc85)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc86)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc86)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc239)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc90)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc91)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc241)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc94)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc94)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc95)
            } loc(#loc240)
          } loc(#loc238)
        } loc(#loc236)
      } loc(#loc235)
    } loc(#loc234)
    cir.scope {
      %3 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc230)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc98)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc98)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc63)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc63)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc102)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc106)
          %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc245)
          cir.if %8 {
            %9 = cir.const #cir.int<100> : !s32i loc(#loc110)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
            %11 = cir.binop(div, %9, %10) : !s32i loc(#loc247)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc112)
          } else {
            %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc64)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc64)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc113)
          } loc(#loc246)
        } loc(#loc244)
      } loc(#loc243)
    } loc(#loc242)
    cir.return loc(#loc66)
  } loc(#loc231)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc249)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc119)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc250)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc205)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc123)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc123)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc254)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc254)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc254)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc131)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc132)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc132)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc132)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc132)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc132)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc132)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc132)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc132)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc207)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc133)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc134)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc135)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc135)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc256)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc139)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc140)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc258)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc143)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc143)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc144)
            } loc(#loc257)
          } loc(#loc255)
        } loc(#loc253)
      } loc(#loc252)
    } loc(#loc251)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc205)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc147)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc147)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc152)
          %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc262)
          cir.if %8 {
            %9 = cir.const #cir.int<100> : !s32i loc(#loc156)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
            %11 = cir.binop(div, %9, %10) : !s32i loc(#loc264)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc158)
          } else {
            %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc159)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc159)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc160)
          } loc(#loc263)
        } loc(#loc261)
      } loc(#loc260)
    } loc(#loc259)
    cir.return loc(#loc115)
  } loc(#loc248)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc266)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc165)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc166)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc267)
    cir.scope {
      %3 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc230)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc170)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc170)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc174)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc174)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc175)
      } else {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc176)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc270)
      } loc(#loc269)
    } loc(#loc268)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc205)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc180)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc180)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc182)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc183)
        %8 = cir.binop(div, %6, %7) : !s32i loc(#loc273)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc184)
      } loc(#loc272)
    } loc(#loc271)
    cir.return loc(#loc162)
  } loc(#loc265)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc275)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc189)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc190)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc276)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc205)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc194)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc194)
      cir.if %5 {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc196)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc279)
      } loc(#loc278)
    } loc(#loc277)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc205)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc200)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc200)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc202)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc203)
        %8 = cir.binop(div, %6, %7) : !s32i loc(#loc282)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc204)
      } loc(#loc281)
    } loc(#loc280)
    cir.return loc(#loc186)
  } loc(#loc274)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_10.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":41:27)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":24:1)
#loc15 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":50:1)
#loc16 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":26:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":26:9)
#loc18 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":28:13)
#loc19 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":28:12)
#loc20 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":28:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":29:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":44:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":29:8)
#loc24 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":30:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":31:9)
#loc26 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":43:9)
#loc27 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":32:13)
#loc28 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":32:49)
#loc29 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":34:13)
#loc30 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":42:13)
#loc31 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":34:23)
#loc32 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":34:36)
#loc33 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":34:53)
#loc34 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":34:17)
#loc35 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":34:63)
#loc36 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":35:13)
#loc37 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":38:13)
#loc38 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":40:13)
#loc39 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":37:29)
#loc40 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":37:24)
#loc41 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":37:17)
#loc42 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":37:40)
#loc43 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":41:17)
#loc44 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":45:5)
#loc45 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":49:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":45:8)
#loc47 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":46:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":48:22)
#loc49 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":48:28)
#loc50 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":48:9)
#loc51 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":174:1)
#loc52 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":180:1)
#loc53 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":176:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":176:14)
#loc55 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":177:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":177:14)
#loc57 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":178:5)
#loc58 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":178:14)
#loc59 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":179:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":179:14)
#loc61 = loc("../../../testcasesupport/std_testcase.h":117:1)
#loc62 = loc("../../../testcasesupport/std_testcase.h":117:12)
#loc63 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":81:19)
#loc64 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":92:23)
#loc65 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":57:1)
#loc66 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":95:1)
#loc67 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":59:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":59:9)
#loc69 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":61:13)
#loc70 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":61:12)
#loc71 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":61:5)
#loc72 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":62:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":77:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":62:8)
#loc75 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":63:5)
#loc76 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":64:9)
#loc77 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":76:9)
#loc78 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":65:13)
#loc79 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":65:49)
#loc80 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":67:13)
#loc81 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":75:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":67:23)
#loc83 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":67:36)
#loc84 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":67:53)
#loc85 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":67:17)
#loc86 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":67:63)
#loc87 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":68:13)
#loc88 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":71:13)
#loc89 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":73:13)
#loc90 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":70:29)
#loc91 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":70:24)
#loc92 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":70:17)
#loc93 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":70:40)
#loc94 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":74:27)
#loc95 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":74:17)
#loc96 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":78:5)
#loc97 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":94:5)
#loc98 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":78:8)
#loc99 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":79:5)
#loc100 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":82:5)
#loc101 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":84:5)
#loc102 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":81:9)
#loc103 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":86:9)
#loc104 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":93:9)
#loc105 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":86:13)
#loc106 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":86:21)
#loc107 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":87:9)
#loc108 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":89:9)
#loc109 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":91:9)
#loc110 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":88:26)
#loc111 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":88:32)
#loc112 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":88:13)
#loc113 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":92:13)
#loc114 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":98:1)
#loc115 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":131:1)
#loc116 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":100:5)
#loc117 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":100:9)
#loc118 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":102:13)
#loc119 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":102:12)
#loc120 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":102:5)
#loc121 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":103:5)
#loc122 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":118:5)
#loc123 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":103:8)
#loc124 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":104:5)
#loc125 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":105:9)
#loc126 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":117:9)
#loc127 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":106:13)
#loc128 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":106:49)
#loc129 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":108:13)
#loc130 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":116:13)
#loc131 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":108:23)
#loc132 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":108:36)
#loc133 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":108:53)
#loc134 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":108:17)
#loc135 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":108:63)
#loc136 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":109:13)
#loc137 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":112:13)
#loc138 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":114:13)
#loc139 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":111:29)
#loc140 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":111:24)
#loc141 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":111:17)
#loc142 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":111:40)
#loc143 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":115:27)
#loc144 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":115:17)
#loc145 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":119:5)
#loc146 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":130:5)
#loc147 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":119:8)
#loc148 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":120:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":122:9)
#loc150 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":129:9)
#loc151 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":122:13)
#loc152 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":122:21)
#loc153 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":123:9)
#loc154 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":125:9)
#loc155 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":127:9)
#loc156 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":124:26)
#loc157 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":124:32)
#loc158 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":124:13)
#loc159 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":128:23)
#loc160 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":128:13)
#loc161 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":134:1)
#loc162 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":154:1)
#loc163 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":136:5)
#loc164 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":136:9)
#loc165 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":138:13)
#loc166 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":138:12)
#loc167 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":138:5)
#loc168 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":139:5)
#loc169 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":148:5)
#loc170 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":139:8)
#loc171 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":140:5)
#loc172 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":143:5)
#loc173 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":145:5)
#loc174 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":142:19)
#loc175 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":142:9)
#loc176 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":147:16)
#loc177 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":147:9)
#loc178 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":149:5)
#loc179 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":153:5)
#loc180 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":149:8)
#loc181 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":150:5)
#loc182 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":152:22)
#loc183 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":152:28)
#loc184 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":152:9)
#loc185 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":157:1)
#loc186 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":172:1)
#loc187 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":159:5)
#loc188 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":159:9)
#loc189 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":161:13)
#loc190 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":161:12)
#loc191 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":161:5)
#loc192 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":162:5)
#loc193 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":166:5)
#loc194 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":162:8)
#loc195 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":163:5)
#loc196 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":165:16)
#loc197 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":165:9)
#loc198 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":167:5)
#loc199 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":171:5)
#loc200 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":167:8)
#loc201 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":168:5)
#loc202 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":170:22)
#loc203 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":170:28)
#loc204 = loc("CWE369_Divide_by_Zero__int_fgets_divide_10.c":170:9)
#loc205 = loc(fused[#loc1, #loc2])
#loc206 = loc(fused[#loc3, #loc4])
#loc207 = loc(fused[#loc5, #loc6])
#loc208 = loc(fused[#loc7, #loc8])
#loc209 = loc(fused[#loc9, #loc10])
#loc210 = loc(fused[#loc12, #loc13])
#loc211 = loc(fused[#loc14, #loc15])
#loc212 = loc(fused[#loc16, #loc17])
#loc213 = loc(fused[#loc20, #loc18])
#loc214 = loc(fused[#loc21, #loc22])
#loc215 = loc(fused[#loc24, #loc22])
#loc216 = loc(fused[#loc25, #loc26])
#loc217 = loc(fused[#loc27, #loc28])
#loc218 = loc(fused[#loc29, #loc30])
#loc219 = loc(fused[#loc34, #loc35])
#loc220 = loc(fused[#loc36, #loc37, #loc38, #loc30])
#loc221 = loc(fused[#loc41, #loc42])
#loc222 = loc(fused[#loc44, #loc45])
#loc223 = loc(fused[#loc47, #loc45])
#loc224 = loc(fused[#loc48, #loc49])
#loc225 = loc(fused[#loc51, #loc52])
#loc226 = loc(fused[#loc53, #loc54])
#loc227 = loc(fused[#loc55, #loc56])
#loc228 = loc(fused[#loc57, #loc58])
#loc229 = loc(fused[#loc59, #loc60])
#loc230 = loc(fused[#loc61, #loc62])
#loc231 = loc(fused[#loc65, #loc66])
#loc232 = loc(fused[#loc67, #loc68])
#loc233 = loc(fused[#loc71, #loc69])
#loc234 = loc(fused[#loc72, #loc73])
#loc235 = loc(fused[#loc75, #loc73])
#loc236 = loc(fused[#loc76, #loc77])
#loc237 = loc(fused[#loc78, #loc79])
#loc238 = loc(fused[#loc80, #loc81])
#loc239 = loc(fused[#loc85, #loc86])
#loc240 = loc(fused[#loc87, #loc88, #loc89, #loc81])
#loc241 = loc(fused[#loc92, #loc93])
#loc242 = loc(fused[#loc96, #loc97])
#loc243 = loc(fused[#loc99, #loc100, #loc101, #loc97])
#loc244 = loc(fused[#loc103, #loc104])
#loc245 = loc(fused[#loc105, #loc106])
#loc246 = loc(fused[#loc107, #loc108, #loc109, #loc104])
#loc247 = loc(fused[#loc110, #loc111])
#loc248 = loc(fused[#loc114, #loc115])
#loc249 = loc(fused[#loc116, #loc117])
#loc250 = loc(fused[#loc120, #loc118])
#loc251 = loc(fused[#loc121, #loc122])
#loc252 = loc(fused[#loc124, #loc122])
#loc253 = loc(fused[#loc125, #loc126])
#loc254 = loc(fused[#loc127, #loc128])
#loc255 = loc(fused[#loc129, #loc130])
#loc256 = loc(fused[#loc134, #loc135])
#loc257 = loc(fused[#loc136, #loc137, #loc138, #loc130])
#loc258 = loc(fused[#loc141, #loc142])
#loc259 = loc(fused[#loc145, #loc146])
#loc260 = loc(fused[#loc148, #loc146])
#loc261 = loc(fused[#loc149, #loc150])
#loc262 = loc(fused[#loc151, #loc152])
#loc263 = loc(fused[#loc153, #loc154, #loc155, #loc150])
#loc264 = loc(fused[#loc156, #loc157])
#loc265 = loc(fused[#loc161, #loc162])
#loc266 = loc(fused[#loc163, #loc164])
#loc267 = loc(fused[#loc167, #loc165])
#loc268 = loc(fused[#loc168, #loc169])
#loc269 = loc(fused[#loc171, #loc172, #loc173, #loc169])
#loc270 = loc(fused[#loc177, #loc176])
#loc271 = loc(fused[#loc178, #loc179])
#loc272 = loc(fused[#loc181, #loc179])
#loc273 = loc(fused[#loc182, #loc183])
#loc274 = loc(fused[#loc185, #loc186])
#loc275 = loc(fused[#loc187, #loc188])
#loc276 = loc(fused[#loc191, #loc189])
#loc277 = loc(fused[#loc192, #loc193])
#loc278 = loc(fused[#loc195, #loc193])
#loc279 = loc(fused[#loc197, #loc196])
#loc280 = loc(fused[#loc198, #loc199])
#loc281 = loc(fused[#loc201, #loc199])
#loc282 = loc(fused[#loc202, #loc203])
