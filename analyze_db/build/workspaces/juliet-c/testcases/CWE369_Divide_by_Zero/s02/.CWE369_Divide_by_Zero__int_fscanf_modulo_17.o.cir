!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_fscanf_modulo_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc131)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc132)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc133)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_modulo_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc135)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc136)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc137)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc16)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc20)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc140)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc141)
        cir.condition(%8) loc(#loc24)
      } body {
        cir.scope {
          %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc26)
          %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc132)
          %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc27)
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
          %11 = cir.call @__isoc99_fscanf(%8, %10, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc26)
        } loc(#loc142)
        cir.yield loc(#loc19)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc29)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc143)
        cir.yield loc(#loc139)
      } loc(#loc139)
    } loc(#loc139)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc32)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc145)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc34)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc35)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc146)
        cir.condition(%8) loc(#loc36)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<100> : !s32i loc(#loc38)
          %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc39)
          %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc148)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc40)
        } loc(#loc147)
        cir.yield loc(#loc31)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc41)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc42)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc149)
        cir.yield loc(#loc144)
      } loc(#loc144)
    } loc(#loc144)
    cir.return loc(#loc9)
  } loc(#loc134)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_modulo_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc151)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc152)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    cir.return loc(#loc44)
  } loc(#loc150)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc153)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc155)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc156)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc157)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc60)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc64)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc160)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc67)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc161)
        cir.condition(%8) loc(#loc68)
      } body {
        cir.scope {
          %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc70)
          %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc132)
          %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc71)
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc72)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc72)
          %11 = cir.call @__isoc99_fscanf(%8, %10, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc70)
        } loc(#loc162)
        cir.yield loc(#loc63)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc74)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc163)
        cir.yield loc(#loc159)
      } loc(#loc159)
    } loc(#loc159)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc77)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc165)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc79)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc80)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc166)
        cir.condition(%8) loc(#loc81)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc85)
            %7 = cir.const #cir.int<0> : !s32i loc(#loc86)
            %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc169)
            cir.if %8 {
              %9 = cir.const #cir.int<100> : !s32i loc(#loc90)
              %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc91)
              %11 = cir.binop(rem, %9, %10) : !s32i loc(#loc171)
              cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc92)
            } else {
              %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc51)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc51)
              cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc93)
            } loc(#loc170)
          } loc(#loc168)
        } loc(#loc167)
        cir.yield loc(#loc76)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc94)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc95)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc172)
        cir.yield loc(#loc164)
      } loc(#loc164)
    } loc(#loc164)
    cir.return loc(#loc53)
  } loc(#loc154)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc174)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc175)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc176)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc103)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc104)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc108)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc179)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc111)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc180)
        cir.condition(%8) loc(#loc112)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<7> : !s32i loc(#loc114)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc182)
        } loc(#loc181)
        cir.yield loc(#loc107)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc117)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
        cir.yield loc(#loc178)
      } loc(#loc178)
    } loc(#loc178)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc120)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc185)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc122)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc123)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc186)
        cir.condition(%8) loc(#loc124)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<100> : !s32i loc(#loc126)
          %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc127)
          %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc188)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc128)
        } loc(#loc187)
        cir.yield loc(#loc119)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc129)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc130)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc189)
        cir.yield loc(#loc184)
      } loc(#loc184)
    } loc(#loc184)
    cir.return loc(#loc97)
  } loc(#loc173)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":31:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":22:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":38:1)
#loc10 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":24:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":24:9)
#loc12 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":24:11)
#loc13 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":25:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":25:9)
#loc15 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":27:13)
#loc16 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":27:12)
#loc17 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":27:5)
#loc18 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":28:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":32:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":28:13)
#loc21 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":28:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":28:16)
#loc23 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":28:20)
#loc24 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":28:18)
#loc25 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":29:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":31:9)
#loc27 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":31:16)
#loc28 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":28:24)
#loc29 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":28:23)
#loc30 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":33:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":37:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":33:13)
#loc33 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":33:9)
#loc34 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":33:16)
#loc35 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":33:20)
#loc36 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":33:18)
#loc37 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":34:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":36:22)
#loc39 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":36:28)
#loc40 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":36:9)
#loc41 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":33:24)
#loc42 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":33:23)
#loc43 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":89:1)
#loc44 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":93:1)
#loc45 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":91:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":91:13)
#loc47 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":92:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":92:13)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc51 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":65:23)
#loc52 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":45:1)
#loc53 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":68:1)
#loc54 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":47:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":47:9)
#loc56 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":47:11)
#loc57 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":48:5)
#loc58 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":48:9)
#loc59 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":50:13)
#loc60 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":50:12)
#loc61 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":50:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":51:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":55:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":51:13)
#loc65 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":51:9)
#loc66 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":51:16)
#loc67 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":51:20)
#loc68 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":51:18)
#loc69 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":52:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":54:9)
#loc71 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":54:16)
#loc72 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":54:23)
#loc73 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":51:24)
#loc74 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":51:23)
#loc75 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":56:5)
#loc76 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":67:5)
#loc77 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":56:13)
#loc78 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":56:9)
#loc79 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":56:16)
#loc80 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":56:20)
#loc81 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":56:18)
#loc82 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":57:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":59:9)
#loc84 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":66:9)
#loc85 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":59:13)
#loc86 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":59:21)
#loc87 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":60:9)
#loc88 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":62:9)
#loc89 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":64:9)
#loc90 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":61:26)
#loc91 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":61:32)
#loc92 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":61:13)
#loc93 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":65:13)
#loc94 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":56:24)
#loc95 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":56:23)
#loc96 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":71:1)
#loc97 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":87:1)
#loc98 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":73:5)
#loc99 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":73:9)
#loc100 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":73:11)
#loc101 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":74:5)
#loc102 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":74:9)
#loc103 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":76:13)
#loc104 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":76:12)
#loc105 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":76:5)
#loc106 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":77:5)
#loc107 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":81:5)
#loc108 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":77:13)
#loc109 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":77:9)
#loc110 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":77:16)
#loc111 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":77:20)
#loc112 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":77:18)
#loc113 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":78:5)
#loc114 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":80:16)
#loc115 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":80:9)
#loc116 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":77:24)
#loc117 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":77:23)
#loc118 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":82:5)
#loc119 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":86:5)
#loc120 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":82:13)
#loc121 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":82:9)
#loc122 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":82:16)
#loc123 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":82:20)
#loc124 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":82:18)
#loc125 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":83:5)
#loc126 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":85:22)
#loc127 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":85:28)
#loc128 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":85:9)
#loc129 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":82:24)
#loc130 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_17.c":82:23)
#loc131 = loc(fused[#loc1, #loc2])
#loc132 = loc(fused[#loc3, #loc4])
#loc133 = loc(fused[#loc6, #loc7])
#loc134 = loc(fused[#loc8, #loc9])
#loc135 = loc(fused[#loc10, #loc11])
#loc136 = loc(fused[#loc10, #loc12])
#loc137 = loc(fused[#loc13, #loc14])
#loc138 = loc(fused[#loc17, #loc15])
#loc139 = loc(fused[#loc18, #loc19])
#loc140 = loc(fused[#loc21, #loc20])
#loc141 = loc(fused[#loc22, #loc23])
#loc142 = loc(fused[#loc25, #loc19])
#loc143 = loc(fused[#loc29, #loc28])
#loc144 = loc(fused[#loc30, #loc31])
#loc145 = loc(fused[#loc33, #loc32])
#loc146 = loc(fused[#loc34, #loc35])
#loc147 = loc(fused[#loc37, #loc31])
#loc148 = loc(fused[#loc38, #loc39])
#loc149 = loc(fused[#loc42, #loc41])
#loc150 = loc(fused[#loc43, #loc44])
#loc151 = loc(fused[#loc45, #loc46])
#loc152 = loc(fused[#loc47, #loc48])
#loc153 = loc(fused[#loc49, #loc50])
#loc154 = loc(fused[#loc52, #loc53])
#loc155 = loc(fused[#loc54, #loc55])
#loc156 = loc(fused[#loc54, #loc56])
#loc157 = loc(fused[#loc57, #loc58])
#loc158 = loc(fused[#loc61, #loc59])
#loc159 = loc(fused[#loc62, #loc63])
#loc160 = loc(fused[#loc65, #loc64])
#loc161 = loc(fused[#loc66, #loc67])
#loc162 = loc(fused[#loc69, #loc63])
#loc163 = loc(fused[#loc74, #loc73])
#loc164 = loc(fused[#loc75, #loc76])
#loc165 = loc(fused[#loc78, #loc77])
#loc166 = loc(fused[#loc79, #loc80])
#loc167 = loc(fused[#loc82, #loc76])
#loc168 = loc(fused[#loc83, #loc84])
#loc169 = loc(fused[#loc85, #loc86])
#loc170 = loc(fused[#loc87, #loc88, #loc89, #loc84])
#loc171 = loc(fused[#loc90, #loc91])
#loc172 = loc(fused[#loc95, #loc94])
#loc173 = loc(fused[#loc96, #loc97])
#loc174 = loc(fused[#loc98, #loc99])
#loc175 = loc(fused[#loc98, #loc100])
#loc176 = loc(fused[#loc101, #loc102])
#loc177 = loc(fused[#loc105, #loc103])
#loc178 = loc(fused[#loc106, #loc107])
#loc179 = loc(fused[#loc109, #loc108])
#loc180 = loc(fused[#loc110, #loc111])
#loc181 = loc(fused[#loc113, #loc107])
#loc182 = loc(fused[#loc115, #loc114])
#loc183 = loc(fused[#loc117, #loc116])
#loc184 = loc(fused[#loc118, #loc119])
#loc185 = loc(fused[#loc121, #loc120])
#loc186 = loc(fused[#loc122, #loc123])
#loc187 = loc(fused[#loc125, #loc119])
#loc188 = loc(fused[#loc126, #loc127])
#loc189 = loc(fused[#loc130, #loc129])
