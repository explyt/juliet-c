!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":25:21)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":25:29)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":42:21)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":57:26)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":57:34)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":84:21)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":90:26)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":90:34)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":112:21)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":118:25)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":118:33)
#loc157 = loc(fused[#loc9, #loc10])
#loc174 = loc(fused[#loc51, #loc52])
#loc188 = loc(fused[#loc90, #loc91])
#loc202 = loc(fused[#loc127, #loc128])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_add_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc153)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc154)
  cir.func private @printLongLongLine(!s64i) loc(#loc155)
  cir.func internal private @badSink(%arg0: !s64i loc(fused[#loc9, #loc10])) extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc158)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc157)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc13)
    cir.br ^bb1 loc(#loc159)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc154)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc16)
    cir.brcond %4 ^bb2, ^bb5 loc(#loc160)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc161)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc20)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc12)
    %8 = cir.binop(add, %5, %7) nsw : !s64i loc(#loc20)
    cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc158)
    %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc21)
    cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc22)
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc15)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc15)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc8)
  } loc(#loc156)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_add_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc163)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc27)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc164)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc29)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc29)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc29)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc29)
    %8 = cir.const #cir.int<60> : !s32i loc(#loc29)
    %9 = cir.shift(left, %7 : !u64i, %8 : !s32i) -> !u64i loc(#loc29)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc29)
    %12 = cir.const #cir.int<45> : !s32i loc(#loc29)
    %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc29)
    %14 = cir.binop(xor, %9, %13) : !u64i loc(#loc29)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc29)
    %17 = cir.const #cir.int<30> : !s32i loc(#loc29)
    %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc29)
    %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc29)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc29)
    %22 = cir.const #cir.int<15> : !s32i loc(#loc29)
    %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc29)
    %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc29)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc29)
    %27 = cir.binop(xor, %24, %26) : !u64i loc(#loc29)
    cir.br ^bb3(%27 : !u64i) loc(#loc29)
  ^bb2:  // pred: ^bb0
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc29)
    %30 = cir.const #cir.int<60> : !s32i loc(#loc29)
    %31 = cir.shift(left, %29 : !u64i, %30 : !s32i) -> !u64i loc(#loc29)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc29)
    %34 = cir.const #cir.int<45> : !s32i loc(#loc29)
    %35 = cir.shift(left, %33 : !u64i, %34 : !s32i) -> !u64i loc(#loc29)
    %36 = cir.binop(xor, %31, %35) : !u64i loc(#loc29)
    %37 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc29)
    %39 = cir.const #cir.int<30> : !s32i loc(#loc29)
    %40 = cir.shift(left, %38 : !u64i, %39 : !s32i) -> !u64i loc(#loc29)
    %41 = cir.binop(xor, %36, %40) : !u64i loc(#loc29)
    %42 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc29)
    %44 = cir.const #cir.int<15> : !s32i loc(#loc29)
    %45 = cir.shift(left, %43 : !u64i, %44 : !s32i) -> !u64i loc(#loc29)
    %46 = cir.binop(xor, %41, %45) : !u64i loc(#loc29)
    %47 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc29)
    %49 = cir.binop(xor, %46, %48) : !u64i loc(#loc29)
    %50 = cir.unary(minus, %49) : !u64i, !u64i loc(#loc29)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc29)
    %53 = cir.binop(sub, %50, %52) : !u64i loc(#loc29)
    cir.br ^bb3(%53 : !u64i) loc(#loc29)
  ^bb3(%54: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":42:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc29)
  ^bb4:  // pred: ^bb3
    %55 = cir.cast(integral, %54 : !u64i), !s64i loc(#loc29)
    cir.store %55, %0 : !s64i, !cir.ptr<!s64i> loc(#loc165)
    %56 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %57 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc154)
    cir.store %56, %57 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    %58 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc33)
    cir.call @badSink(%58) : (!s64i) -> () loc(#loc34)
    cir.return loc(#loc24)
  } loc(#loc162)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_add_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc168)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc170)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc36)
  } loc(#loc167)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc171)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc48)
  cir.func internal private @goodB2G1Sink(%arg0: !s64i loc(fused[#loc51, #loc52])) extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc175)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc174)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc55)
    cir.br ^bb1 loc(#loc176)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc171)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc58)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc177)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc47)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    cir.br ^bb9 loc(#loc60)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc178)
  ^bb4:  // pred: ^bb3
    %7 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc65)
    %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc66)
    %9 = cir.cmp(lt, %7, %8) : !s64i, !cir.bool loc(#loc179)
    cir.brcond %9 ^bb5, ^bb6 loc(#loc180)
  ^bb5:  // pred: ^bb4
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc70)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc54)
    %13 = cir.binop(add, %10, %12) nsw : !s64i loc(#loc70)
    cir.store %13, %0 : !s64i, !cir.ptr<!s64i> loc(#loc175)
    %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc71)
    cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc72)
    cir.br ^bb7 loc(#loc68)
  ^bb6:  // pred: ^bb4
    %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc48)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    cir.br ^bb7 loc(#loc64)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc64)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc57)
  ^bb9:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb10 loc(#loc57)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc50)
  } loc(#loc173)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc182)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc78)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc183)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc80)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc80)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc80)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc80)
    %8 = cir.const #cir.int<60> : !s32i loc(#loc80)
    %9 = cir.shift(left, %7 : !u64i, %8 : !s32i) -> !u64i loc(#loc80)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc80)
    %12 = cir.const #cir.int<45> : !s32i loc(#loc80)
    %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc80)
    %14 = cir.binop(xor, %9, %13) : !u64i loc(#loc80)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc80)
    %17 = cir.const #cir.int<30> : !s32i loc(#loc80)
    %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc80)
    %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc80)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc80)
    %22 = cir.const #cir.int<15> : !s32i loc(#loc80)
    %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc80)
    %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc80)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc80)
    %27 = cir.binop(xor, %24, %26) : !u64i loc(#loc80)
    cir.br ^bb3(%27 : !u64i) loc(#loc80)
  ^bb2:  // pred: ^bb0
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc80)
    %30 = cir.const #cir.int<60> : !s32i loc(#loc80)
    %31 = cir.shift(left, %29 : !u64i, %30 : !s32i) -> !u64i loc(#loc80)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc80)
    %34 = cir.const #cir.int<45> : !s32i loc(#loc80)
    %35 = cir.shift(left, %33 : !u64i, %34 : !s32i) -> !u64i loc(#loc80)
    %36 = cir.binop(xor, %31, %35) : !u64i loc(#loc80)
    %37 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc80)
    %39 = cir.const #cir.int<30> : !s32i loc(#loc80)
    %40 = cir.shift(left, %38 : !u64i, %39 : !s32i) -> !u64i loc(#loc80)
    %41 = cir.binop(xor, %36, %40) : !u64i loc(#loc80)
    %42 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc80)
    %44 = cir.const #cir.int<15> : !s32i loc(#loc80)
    %45 = cir.shift(left, %43 : !u64i, %44 : !s32i) -> !u64i loc(#loc80)
    %46 = cir.binop(xor, %41, %45) : !u64i loc(#loc80)
    %47 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc80)
    %49 = cir.binop(xor, %46, %48) : !u64i loc(#loc80)
    %50 = cir.unary(minus, %49) : !u64i, !u64i loc(#loc80)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc80)
    %53 = cir.binop(sub, %50, %52) : !u64i loc(#loc80)
    cir.br ^bb3(%53 : !u64i) loc(#loc80)
  ^bb3(%54: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":84:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc80)
  ^bb4:  // pred: ^bb3
    %55 = cir.cast(integral, %54 : !u64i), !s64i loc(#loc80)
    cir.store %55, %0 : !s64i, !cir.ptr<!s64i> loc(#loc184)
    %56 = cir.const #cir.int<0> : !s32i loc(#loc82)
    %57 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc171)
    cir.store %56, %57 : !s32i, !cir.ptr<!s32i> loc(#loc185)
    %58 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc84)
    cir.call @goodB2G1Sink(%58) : (!s64i) -> () loc(#loc85)
    cir.return loc(#loc75)
  } loc(#loc181)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc186)
  cir.func internal private @goodB2G2Sink(%arg0: !s64i loc(fused[#loc90, #loc91])) extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc189)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc188)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc94)
    cir.br ^bb1 loc(#loc190)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc186)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc97)
    cir.brcond %4 ^bb2, ^bb8 loc(#loc191)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc192)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc101)
    %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc102)
    %7 = cir.cmp(lt, %5, %6) : !s64i, !cir.bool loc(#loc193)
    cir.brcond %7 ^bb4, ^bb5 loc(#loc194)
  ^bb4:  // pred: ^bb3
    %8 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc106)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc93)
    %11 = cir.binop(add, %8, %10) nsw : !s64i loc(#loc106)
    cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc189)
    %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc107)
    cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc108)
    cir.br ^bb6 loc(#loc104)
  ^bb5:  // pred: ^bb3
    %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc109)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc109)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    cir.br ^bb6 loc(#loc100)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc100)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc96)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc96)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc89)
  } loc(#loc187)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc196)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc115)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc197)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc117)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc117)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc117)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc117)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc117)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc117)
    %8 = cir.const #cir.int<60> : !s32i loc(#loc117)
    %9 = cir.shift(left, %7 : !u64i, %8 : !s32i) -> !u64i loc(#loc117)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc117)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc117)
    %12 = cir.const #cir.int<45> : !s32i loc(#loc117)
    %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc117)
    %14 = cir.binop(xor, %9, %13) : !u64i loc(#loc117)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc117)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc117)
    %17 = cir.const #cir.int<30> : !s32i loc(#loc117)
    %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc117)
    %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc117)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc117)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc117)
    %22 = cir.const #cir.int<15> : !s32i loc(#loc117)
    %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc117)
    %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc117)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc117)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc117)
    %27 = cir.binop(xor, %24, %26) : !u64i loc(#loc117)
    cir.br ^bb3(%27 : !u64i) loc(#loc117)
  ^bb2:  // pred: ^bb0
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc117)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc117)
    %30 = cir.const #cir.int<60> : !s32i loc(#loc117)
    %31 = cir.shift(left, %29 : !u64i, %30 : !s32i) -> !u64i loc(#loc117)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc117)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc117)
    %34 = cir.const #cir.int<45> : !s32i loc(#loc117)
    %35 = cir.shift(left, %33 : !u64i, %34 : !s32i) -> !u64i loc(#loc117)
    %36 = cir.binop(xor, %31, %35) : !u64i loc(#loc117)
    %37 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc117)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc117)
    %39 = cir.const #cir.int<30> : !s32i loc(#loc117)
    %40 = cir.shift(left, %38 : !u64i, %39 : !s32i) -> !u64i loc(#loc117)
    %41 = cir.binop(xor, %36, %40) : !u64i loc(#loc117)
    %42 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc117)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc117)
    %44 = cir.const #cir.int<15> : !s32i loc(#loc117)
    %45 = cir.shift(left, %43 : !u64i, %44 : !s32i) -> !u64i loc(#loc117)
    %46 = cir.binop(xor, %41, %45) : !u64i loc(#loc117)
    %47 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc117)
    %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc117)
    %49 = cir.binop(xor, %46, %48) : !u64i loc(#loc117)
    %50 = cir.unary(minus, %49) : !u64i, !u64i loc(#loc117)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc117)
    %53 = cir.binop(sub, %50, %52) : !u64i loc(#loc117)
    cir.br ^bb3(%53 : !u64i) loc(#loc117)
  ^bb3(%54: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":112:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc117)
  ^bb4:  // pred: ^bb3
    %55 = cir.cast(integral, %54 : !u64i), !s64i loc(#loc117)
    cir.store %55, %0 : !s64i, !cir.ptr<!s64i> loc(#loc198)
    %56 = cir.const #cir.int<1> : !s32i loc(#loc119)
    %57 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc186)
    cir.store %56, %57 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    %58 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc121)
    cir.call @goodB2G2Sink(%58) : (!s64i) -> () loc(#loc122)
    cir.return loc(#loc112)
  } loc(#loc195)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc200)
  cir.func internal private @goodG2BSink(%arg0: !s64i loc(fused[#loc127, #loc128])) extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc203)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc202)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc131)
    cir.br ^bb1 loc(#loc204)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc200)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc134)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc134)
    cir.brcond %4 ^bb2, ^bb5 loc(#loc205)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc206)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc138)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc130)
    %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc130)
    %8 = cir.binop(add, %5, %7) nsw : !s64i loc(#loc138)
    cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc203)
    %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc139)
    cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc140)
    cir.br ^bb4 loc(#loc137)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc133)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc133)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc126)
  } loc(#loc201)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc208)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc145)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc209)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc147)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc147)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc210)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc149)
    %5 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc200)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc151)
    cir.call @goodG2BSink(%6) : (!s64i) -> () loc(#loc152)
    cir.return loc(#loc142)
  } loc(#loc207)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_add_21.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":23:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":23:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":25:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":35:1)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":31:13)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":31:37)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":26:1)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":27:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":34:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":27:8)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":28:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":29:9)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":33:9)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":31:30)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":32:31)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":32:13)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":37:1)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":45:1)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":39:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":39:13)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":40:12)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":40:5)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":42:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":43:17)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":43:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":44:13)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":44:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":140:1)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":145:1)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":142:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":142:14)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":143:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":143:14)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":144:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":144:13)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":52:1)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":52:29)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":62:19)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":74:23)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":57:1)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":77:1)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":69:13)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":69:37)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":58:1)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":59:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":76:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":59:8)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":60:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":63:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":65:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":62:9)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":67:9)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":75:9)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":67:13)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":67:20)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":68:9)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":71:9)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":73:9)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":69:30)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":70:31)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":70:13)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":74:13)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":79:1)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":87:1)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":81:5)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":81:13)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":82:12)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":82:5)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":84:5)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":85:22)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":85:5)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":86:18)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":86:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":53:1)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":53:29)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":90:1)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":105:1)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":97:13)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":97:37)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":91:1)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":92:5)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":104:5)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":92:8)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":93:5)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":95:9)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":103:9)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":95:13)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":95:20)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":96:9)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":99:9)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":101:9)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":97:30)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":98:31)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":98:13)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":102:23)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":102:13)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":107:1)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":115:1)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":109:5)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":109:13)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":110:12)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":110:5)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":112:5)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":113:22)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":113:5)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":114:18)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":114:5)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":54:1)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":54:28)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":118:1)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":128:1)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":124:13)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":124:37)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":119:1)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":120:5)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":127:5)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":120:8)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":121:5)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":122:9)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":126:9)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":124:30)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":125:31)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":125:13)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":130:1)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":138:1)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":132:5)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":132:13)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":133:12)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":133:5)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":135:12)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":135:5)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":136:21)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":136:5)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":137:17)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_rand_add_21.c":137:5)
#loc153 = loc(fused[#loc1, #loc2])
#loc154 = loc(fused[#loc3, #loc4])
#loc155 = loc(fused[#loc5, #loc6])
#loc156 = loc(fused[#loc7, #loc8])
#loc158 = loc(fused[#loc11, #loc12])
#loc159 = loc(fused[#loc14, #loc15])
#loc160 = loc(fused[#loc17, #loc15])
#loc161 = loc(fused[#loc18, #loc19])
#loc162 = loc(fused[#loc23, #loc24])
#loc163 = loc(fused[#loc25, #loc26])
#loc164 = loc(fused[#loc28, #loc27])
#loc165 = loc(fused[#loc30, #loc29])
#loc166 = loc(fused[#loc32, #loc31])
#loc167 = loc(fused[#loc35, #loc36])
#loc168 = loc(fused[#loc37, #loc38])
#loc169 = loc(fused[#loc39, #loc40])
#loc170 = loc(fused[#loc41, #loc42])
#loc171 = loc(fused[#loc43, #loc44])
#loc172 = loc(fused[#loc45, #loc46])
#loc173 = loc(fused[#loc49, #loc50])
#loc175 = loc(fused[#loc53, #loc54])
#loc176 = loc(fused[#loc56, #loc57])
#loc177 = loc(fused[#loc59, #loc60, #loc61, #loc57])
#loc178 = loc(fused[#loc63, #loc64])
#loc179 = loc(fused[#loc65, #loc66])
#loc180 = loc(fused[#loc67, #loc68, #loc69, #loc64])
#loc181 = loc(fused[#loc74, #loc75])
#loc182 = loc(fused[#loc76, #loc77])
#loc183 = loc(fused[#loc79, #loc78])
#loc184 = loc(fused[#loc81, #loc80])
#loc185 = loc(fused[#loc83, #loc82])
#loc186 = loc(fused[#loc86, #loc87])
#loc187 = loc(fused[#loc88, #loc89])
#loc189 = loc(fused[#loc92, #loc93])
#loc190 = loc(fused[#loc95, #loc96])
#loc191 = loc(fused[#loc98, #loc96])
#loc192 = loc(fused[#loc99, #loc100])
#loc193 = loc(fused[#loc101, #loc102])
#loc194 = loc(fused[#loc103, #loc104, #loc105, #loc100])
#loc195 = loc(fused[#loc111, #loc112])
#loc196 = loc(fused[#loc113, #loc114])
#loc197 = loc(fused[#loc116, #loc115])
#loc198 = loc(fused[#loc118, #loc117])
#loc199 = loc(fused[#loc120, #loc119])
#loc200 = loc(fused[#loc123, #loc124])
#loc201 = loc(fused[#loc125, #loc126])
#loc203 = loc(fused[#loc129, #loc130])
#loc204 = loc(fused[#loc132, #loc133])
#loc205 = loc(fused[#loc135, #loc133])
#loc206 = loc(fused[#loc136, #loc137])
#loc207 = loc(fused[#loc141, #loc142])
#loc208 = loc(fused[#loc143, #loc144])
#loc209 = loc(fused[#loc146, #loc145])
#loc210 = loc(fused[#loc148, #loc147])
#loc211 = loc(fused[#loc150, #loc149])
