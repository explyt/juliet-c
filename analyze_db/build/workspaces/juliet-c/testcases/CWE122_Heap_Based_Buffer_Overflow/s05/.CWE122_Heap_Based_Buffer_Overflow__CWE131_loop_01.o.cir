!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc107)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc108)
  cir.func private @printIntLine(!s32i) loc(#loc109)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc110)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc112)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc113)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc114)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc17)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc115)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc19)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc20)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc20)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc19)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc116)
    cir.store %8, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc117)
    cir.br ^bb1 loc(#loc118)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc26)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc26)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc119)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc120)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc28)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc30)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
    cir.br ^bb3 loc(#loc24)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc24)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc121)
  ^bb5:  // pred: ^bb4
    %16 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc112)
    cir.store %16, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc112)
    cir.br ^bb6 loc(#loc122)
  ^bb6:  // pred: ^bb5
    %17 = cir.const #cir.int<0> : !s32i loc(#loc35)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc35)
    cir.store %18, %1 : !u64i, !cir.ptr<!u64i> loc(#loc123)
    cir.br ^bb7 loc(#loc122)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %19 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc37)
    %20 = cir.const #cir.int<10> : !s32i loc(#loc38)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc38)
    %22 = cir.cmp(lt, %19, %21) : !u64i, !cir.bool loc(#loc124)
    cir.brcond %22 ^bb8, ^bb12 loc(#loc39)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc125)
  ^bb9:  // pred: ^bb8
    %23 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc41)
    %24 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc42)
    %25 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc42)
    %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    %27 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
    %28 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc44)
    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !u64i), !cir.ptr<!s32i> loc(#loc45)
    cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    cir.br ^bb10 loc(#loc34)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc34)
  ^bb11:  // pred: ^bb10
    %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc47)
    %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc48)
    cir.store %31, %1 : !u64i, !cir.ptr<!u64i> loc(#loc127)
    cir.br ^bb7 loc(#loc122)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc34)
  ^bb13:  // pred: ^bb12
    %32 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
    %33 = cir.const #cir.int<0> : !s32i loc(#loc50)
    %34 = cir.ptr_stride(%32 : !cir.ptr<!s32i>, %33 : !s32i), !cir.ptr<!s32i> loc(#loc51)
    %35 = cir.load %34 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    cir.call @printIntLine(%35) : (!s32i) -> () loc(#loc52)
    %36 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc53)
    cir.call @free(%37) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc54)
    cir.br ^bb14 loc(#loc32)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc10)
  } loc(#loc111)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc129)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc57)
    cir.return loc(#loc56)
  } loc(#loc128)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc131)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc132)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc133)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc67)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc134)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc69)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc70)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc70)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc135)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc136)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc69)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc137)
    cir.store %10, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc138)
    cir.br ^bb1 loc(#loc139)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc77)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc78)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc78)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc140)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc141)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc80)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc82)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc80)
    cir.br ^bb3 loc(#loc76)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc76)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc142)
  ^bb5:  // pred: ^bb4
    %18 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc131)
    cir.store %18, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc131)
    cir.br ^bb6 loc(#loc143)
  ^bb6:  // pred: ^bb5
    %19 = cir.const #cir.int<0> : !s32i loc(#loc87)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc87)
    cir.store %20, %1 : !u64i, !cir.ptr<!u64i> loc(#loc144)
    cir.br ^bb7 loc(#loc143)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %21 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc89)
    %22 = cir.const #cir.int<10> : !s32i loc(#loc90)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc90)
    %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc145)
    cir.brcond %24 ^bb8, ^bb12 loc(#loc91)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc146)
  ^bb9:  // pred: ^bb8
    %25 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc93)
    %26 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc94)
    %27 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %25 : !u64i), !cir.ptr<!s32i> loc(#loc94)
    %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %29 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
    %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc96)
    %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !u64i), !cir.ptr<!s32i> loc(#loc97)
    cir.store %28, %31 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    cir.br ^bb10 loc(#loc86)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc86)
  ^bb11:  // pred: ^bb10
    %32 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc99)
    %33 = cir.unary(inc, %32) : !u64i, !u64i loc(#loc100)
    cir.store %33, %1 : !u64i, !cir.ptr<!u64i> loc(#loc148)
    cir.br ^bb7 loc(#loc143)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc86)
  ^bb13:  // pred: ^bb12
    %34 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
    %35 = cir.const #cir.int<0> : !s32i loc(#loc102)
    %36 = cir.ptr_stride(%34 : !cir.ptr<!s32i>, %35 : !s32i), !cir.ptr<!s32i> loc(#loc103)
    %37 = cir.load %36 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    cir.call @printIntLine(%37) : (!s32i) -> () loc(#loc104)
    %38 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc105)
    %39 = cir.cast(bitcast, %38 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc105)
    cir.call @free(%39) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc106)
    cir.br ^bb14 loc(#loc84)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc60)
  } loc(#loc130)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":39:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":29:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":29:28)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":30:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":30:16)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":23:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":23:11)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":24:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":24:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":26:19)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":26:26)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":26:28)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":26:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":27:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":27:33)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":27:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":27:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":27:23)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":27:24)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":27:30)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":27:29)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":28:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":38:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":32:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":35:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":32:18)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":32:14)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":32:21)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":32:25)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":32:23)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":33:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":34:30)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":34:23)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":34:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":34:18)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":34:19)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":34:31)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":32:30)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":32:29)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":36:22)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":36:27)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":36:28)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":36:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":37:14)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":37:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":66:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":69:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":68:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":68:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":46:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":64:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":54:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":54:28)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":55:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":55:16)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":48:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":48:11)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":49:12)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":49:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":51:19)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":51:26)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":51:29)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":51:39)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":51:40)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":51:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":52:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":52:33)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":52:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":52:17)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":52:23)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":52:24)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":52:30)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":52:29)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":53:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":63:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":57:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":60:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":57:18)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":57:14)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":57:21)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":57:25)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":57:23)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":58:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":59:30)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":59:23)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":59:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":59:18)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":59:19)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":59:31)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":57:30)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":57:29)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":61:22)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":61:27)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":61:28)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":61:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":62:14)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c":62:9)
#loc107 = loc(fused[#loc1, #loc2])
#loc108 = loc(fused[#loc3, #loc4])
#loc109 = loc(fused[#loc5, #loc6])
#loc110 = loc(fused[#loc7, #loc8])
#loc111 = loc(fused[#loc9, #loc10])
#loc112 = loc(fused[#loc11, #loc12])
#loc113 = loc(fused[#loc13, #loc14])
#loc114 = loc(fused[#loc15, #loc16])
#loc115 = loc(fused[#loc18, #loc17])
#loc116 = loc(fused[#loc19, #loc21])
#loc117 = loc(fused[#loc22, #loc21])
#loc118 = loc(fused[#loc23, #loc24])
#loc119 = loc(fused[#loc25, #loc26])
#loc120 = loc(fused[#loc27, #loc24])
#loc121 = loc(fused[#loc31, #loc32])
#loc122 = loc(fused[#loc33, #loc34])
#loc123 = loc(fused[#loc36, #loc35])
#loc124 = loc(fused[#loc37, #loc38])
#loc125 = loc(fused[#loc40, #loc34])
#loc126 = loc(fused[#loc43, #loc46])
#loc127 = loc(fused[#loc48, #loc47])
#loc128 = loc(fused[#loc55, #loc56])
#loc129 = loc(fused[#loc57, #loc58])
#loc130 = loc(fused[#loc59, #loc60])
#loc131 = loc(fused[#loc61, #loc62])
#loc132 = loc(fused[#loc63, #loc64])
#loc133 = loc(fused[#loc65, #loc66])
#loc134 = loc(fused[#loc68, #loc67])
#loc135 = loc(fused[#loc71, #loc72])
#loc136 = loc(fused[#loc70, #loc72])
#loc137 = loc(fused[#loc69, #loc73])
#loc138 = loc(fused[#loc74, #loc73])
#loc139 = loc(fused[#loc75, #loc76])
#loc140 = loc(fused[#loc77, #loc78])
#loc141 = loc(fused[#loc79, #loc76])
#loc142 = loc(fused[#loc83, #loc84])
#loc143 = loc(fused[#loc85, #loc86])
#loc144 = loc(fused[#loc88, #loc87])
#loc145 = loc(fused[#loc89, #loc90])
#loc146 = loc(fused[#loc92, #loc86])
#loc147 = loc(fused[#loc95, #loc98])
#loc148 = loc(fused[#loc100, #loc99])
