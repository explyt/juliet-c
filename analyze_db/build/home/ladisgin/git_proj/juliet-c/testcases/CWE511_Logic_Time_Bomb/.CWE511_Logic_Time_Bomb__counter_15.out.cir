!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc50 = loc("CWE511_Logic_Time_Bomb__counter_15.c":128:10)
#loc51 = loc("CWE511_Logic_Time_Bomb__counter_15.c":128:14)
#loc52 = loc("CWE511_Logic_Time_Bomb__counter_15.c":128:20)
#loc53 = loc("CWE511_Logic_Time_Bomb__counter_15.c":128:32)
#loc144 = loc(fused[#loc50, #loc51])
#loc145 = loc(fused[#loc52, #loc53])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc126)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc3)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc127)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc11)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc131)
            %2 = cir.const #cir.int<0> : !s32i loc(#loc16)
            cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc131)
            cir.scope {
              cir.do {
                cir.scope {
                  %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc21)
                  %6 = cir.const #cir.int<20000> : !s32i loc(#loc22)
                  %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc134)
                  cir.if %7 {
                    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc3)
                    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc3)
                    %10 = cir.call @unlink(%9) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc24)
                  } loc(#loc135)
                } loc(#loc133)
                %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc25)
                %4 = cir.unary(inc, %3) : !s32i, !s32i loc(#loc26)
                cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc136)
                cir.yield loc(#loc18)
              } while {
                %3 = cir.const #cir.int<1> : !s32i loc(#loc27)
                %4 = cir.const #cir.int<1> : !s32i loc(#loc28)
                %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc137)
                cir.condition(%5) loc(#loc29)
              } loc(#loc132)
            } loc(#loc132)
          } loc(#loc130)
          cir.break loc(#loc30)
        } loc(#loc12)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc6)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc6)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc32)
          cir.break loc(#loc33)
        } loc(#loc31)
        cir.yield loc(#loc9)
      } loc(#loc9)
    } loc(#loc129)
    cir.return loc(#loc8)
  } loc(#loc128)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc139)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc140)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc138)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc141)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc142)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc47)
  cir.func @main(%arg0: !s32i loc(fused[#loc50, #loc51]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc52, #loc53])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc144)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc145)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc49)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc54)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc55)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc56)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc56)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc57)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc44)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %8 = cir.get_global @CWE511_Logic_Time_Bomb__counter_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc146)
    cir.call @CWE511_Logic_Time_Bomb__counter_15_good() : () -> () loc(#loc59)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc45)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc46)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %13 = cir.get_global @CWE511_Logic_Time_Bomb__counter_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc147)
    cir.call @CWE511_Logic_Time_Bomb__counter_15_bad() : () -> () loc(#loc63)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc47)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc148)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc148)
    cir.return %17 : !s32i loc(#loc148)
  } loc(#loc143)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc68)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc73)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc75)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc75)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc76)
          cir.break loc(#loc77)
        } loc(#loc74)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc152)
            %2 = cir.const #cir.int<0> : !s32i loc(#loc82)
            cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc152)
            cir.scope {
              cir.do {
                cir.scope {
                  %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc87)
                  %6 = cir.const #cir.int<20000> : !s32i loc(#loc88)
                  %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc155)
                  cir.if %7 {
                    %8 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc68)
                    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc68)
                    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc90)
                  } loc(#loc156)
                } loc(#loc154)
                %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc91)
                %4 = cir.unary(inc, %3) : !s32i, !s32i loc(#loc92)
                cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc157)
                cir.yield loc(#loc84)
              } while {
                %3 = cir.const #cir.int<1> : !s32i loc(#loc93)
                %4 = cir.const #cir.int<1> : !s32i loc(#loc94)
                %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc158)
                cir.condition(%5) loc(#loc95)
              } loc(#loc153)
            } loc(#loc153)
          } loc(#loc151)
          cir.break loc(#loc96)
        } loc(#loc78)
        cir.yield loc(#loc71)
      } loc(#loc71)
    } loc(#loc150)
    cir.return loc(#loc70)
  } loc(#loc149)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc101)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc162)
            %2 = cir.const #cir.int<0> : !s32i loc(#loc106)
            cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc162)
            cir.scope {
              cir.do {
                cir.scope {
                  %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc111)
                  %6 = cir.const #cir.int<20000> : !s32i loc(#loc112)
                  %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc165)
                  cir.if %7 {
                    %8 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc114)
                    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc114)
                    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc115)
                  } loc(#loc166)
                } loc(#loc164)
                %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                %4 = cir.unary(inc, %3) : !s32i, !s32i loc(#loc117)
                cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc167)
                cir.yield loc(#loc108)
              } while {
                %3 = cir.const #cir.int<1> : !s32i loc(#loc118)
                %4 = cir.const #cir.int<1> : !s32i loc(#loc119)
                %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc168)
                cir.condition(%5) loc(#loc120)
              } loc(#loc163)
            } loc(#loc163)
          } loc(#loc161)
          cir.break loc(#loc121)
        } loc(#loc102)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc123)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc123)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc124)
          cir.break loc(#loc125)
        } loc(#loc122)
        cir.yield loc(#loc99)
      } loc(#loc99)
    } loc(#loc160)
    cir.return loc(#loc98)
  } loc(#loc159)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_15.c":0:0)
#loc1 = loc("/usr/include/unistd.h":858:1)
#loc2 = loc("/usr/include/unistd.h":858:48)
#loc3 = loc("CWE511_Logic_Time_Bomb__counter_15.c":41:24)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE511_Logic_Time_Bomb__counter_15.c":50:19)
#loc7 = loc("CWE511_Logic_Time_Bomb__counter_15.c":29:1)
#loc8 = loc("CWE511_Logic_Time_Bomb__counter_15.c":53:1)
#loc9 = loc("CWE511_Logic_Time_Bomb__counter_15.c":31:5)
#loc10 = loc("CWE511_Logic_Time_Bomb__counter_15.c":52:5)
#loc11 = loc("CWE511_Logic_Time_Bomb__counter_15.c":31:12)
#loc12 = loc("CWE511_Logic_Time_Bomb__counter_15.c":33:5)
#loc13 = loc("CWE511_Logic_Time_Bomb__counter_15.c":34:5)
#loc14 = loc("CWE511_Logic_Time_Bomb__counter_15.c":46:5)
#loc15 = loc("CWE511_Logic_Time_Bomb__counter_15.c":35:9)
#loc16 = loc("CWE511_Logic_Time_Bomb__counter_15.c":35:21)
#loc17 = loc("CWE511_Logic_Time_Bomb__counter_15.c":36:9)
#loc18 = loc("CWE511_Logic_Time_Bomb__counter_15.c":45:21)
#loc19 = loc("CWE511_Logic_Time_Bomb__counter_15.c":39:13)
#loc20 = loc("CWE511_Logic_Time_Bomb__counter_15.c":42:13)
#loc21 = loc("CWE511_Logic_Time_Bomb__counter_15.c":39:17)
#loc22 = loc("CWE511_Logic_Time_Bomb__counter_15.c":39:26)
#loc23 = loc("CWE511_Logic_Time_Bomb__counter_15.c":40:13)
#loc24 = loc("CWE511_Logic_Time_Bomb__counter_15.c":41:17)
#loc25 = loc("CWE511_Logic_Time_Bomb__counter_15.c":43:18)
#loc26 = loc("CWE511_Logic_Time_Bomb__counter_15.c":43:13)
#loc27 = loc("CWE511_Logic_Time_Bomb__counter_15.c":45:15)
#loc28 = loc("CWE511_Logic_Time_Bomb__counter_15.c":45:20)
#loc29 = loc("CWE511_Logic_Time_Bomb__counter_15.c":45:17)
#loc30 = loc("CWE511_Logic_Time_Bomb__counter_15.c":47:5)
#loc31 = loc("CWE511_Logic_Time_Bomb__counter_15.c":48:5)
#loc32 = loc("CWE511_Logic_Time_Bomb__counter_15.c":50:9)
#loc33 = loc("CWE511_Logic_Time_Bomb__counter_15.c":51:9)
#loc34 = loc("CWE511_Logic_Time_Bomb__counter_15.c":113:1)
#loc35 = loc("CWE511_Logic_Time_Bomb__counter_15.c":117:1)
#loc36 = loc("CWE511_Logic_Time_Bomb__counter_15.c":115:5)
#loc37 = loc("CWE511_Logic_Time_Bomb__counter_15.c":115:11)
#loc38 = loc("CWE511_Logic_Time_Bomb__counter_15.c":116:5)
#loc39 = loc("CWE511_Logic_Time_Bomb__counter_15.c":116:11)
#loc40 = loc("/usr/include/stdlib.h":575:1)
#loc41 = loc("/usr/include/stdlib.h":575:41)
#loc42 = loc("/usr/include/time.h":76:1)
#loc43 = loc("/usr/include/time.h":76:38)
#loc44 = loc("CWE511_Logic_Time_Bomb__counter_15.c":133:15)
#loc45 = loc("CWE511_Logic_Time_Bomb__counter_15.c":135:15)
#loc46 = loc("CWE511_Logic_Time_Bomb__counter_15.c":138:15)
#loc47 = loc("CWE511_Logic_Time_Bomb__counter_15.c":140:15)
#loc48 = loc("CWE511_Logic_Time_Bomb__counter_15.c":128:1)
#loc49 = loc("CWE511_Logic_Time_Bomb__counter_15.c":143:1)
#loc54 = loc("CWE511_Logic_Time_Bomb__counter_15.c":129:1)
#loc55 = loc("CWE511_Logic_Time_Bomb__counter_15.c":131:27)
#loc56 = loc("CWE511_Logic_Time_Bomb__counter_15.c":131:22)
#loc57 = loc("CWE511_Logic_Time_Bomb__counter_15.c":131:5)
#loc58 = loc("CWE511_Logic_Time_Bomb__counter_15.c":133:5)
#loc59 = loc("CWE511_Logic_Time_Bomb__counter_15.c":134:5)
#loc60 = loc("CWE511_Logic_Time_Bomb__counter_15.c":134:45)
#loc61 = loc("CWE511_Logic_Time_Bomb__counter_15.c":135:5)
#loc62 = loc("CWE511_Logic_Time_Bomb__counter_15.c":138:5)
#loc63 = loc("CWE511_Logic_Time_Bomb__counter_15.c":139:5)
#loc64 = loc("CWE511_Logic_Time_Bomb__counter_15.c":139:44)
#loc65 = loc("CWE511_Logic_Time_Bomb__counter_15.c":140:5)
#loc66 = loc("CWE511_Logic_Time_Bomb__counter_15.c":142:12)
#loc67 = loc("CWE511_Logic_Time_Bomb__counter_15.c":142:5)
#loc68 = loc("CWE511_Logic_Time_Bomb__counter_15.c":76:27)
#loc69 = loc("CWE511_Logic_Time_Bomb__counter_15.c":60:1)
#loc70 = loc("CWE511_Logic_Time_Bomb__counter_15.c":84:1)
#loc71 = loc("CWE511_Logic_Time_Bomb__counter_15.c":62:5)
#loc72 = loc("CWE511_Logic_Time_Bomb__counter_15.c":83:5)
#loc73 = loc("CWE511_Logic_Time_Bomb__counter_15.c":62:12)
#loc74 = loc("CWE511_Logic_Time_Bomb__counter_15.c":64:5)
#loc75 = loc("CWE511_Logic_Time_Bomb__counter_15.c":66:19)
#loc76 = loc("CWE511_Logic_Time_Bomb__counter_15.c":66:9)
#loc77 = loc("CWE511_Logic_Time_Bomb__counter_15.c":67:9)
#loc78 = loc("CWE511_Logic_Time_Bomb__counter_15.c":68:5)
#loc79 = loc("CWE511_Logic_Time_Bomb__counter_15.c":69:5)
#loc80 = loc("CWE511_Logic_Time_Bomb__counter_15.c":81:5)
#loc81 = loc("CWE511_Logic_Time_Bomb__counter_15.c":70:9)
#loc82 = loc("CWE511_Logic_Time_Bomb__counter_15.c":70:21)
#loc83 = loc("CWE511_Logic_Time_Bomb__counter_15.c":71:9)
#loc84 = loc("CWE511_Logic_Time_Bomb__counter_15.c":80:21)
#loc85 = loc("CWE511_Logic_Time_Bomb__counter_15.c":74:13)
#loc86 = loc("CWE511_Logic_Time_Bomb__counter_15.c":77:13)
#loc87 = loc("CWE511_Logic_Time_Bomb__counter_15.c":74:17)
#loc88 = loc("CWE511_Logic_Time_Bomb__counter_15.c":74:26)
#loc89 = loc("CWE511_Logic_Time_Bomb__counter_15.c":75:13)
#loc90 = loc("CWE511_Logic_Time_Bomb__counter_15.c":76:17)
#loc91 = loc("CWE511_Logic_Time_Bomb__counter_15.c":78:18)
#loc92 = loc("CWE511_Logic_Time_Bomb__counter_15.c":78:13)
#loc93 = loc("CWE511_Logic_Time_Bomb__counter_15.c":80:15)
#loc94 = loc("CWE511_Logic_Time_Bomb__counter_15.c":80:20)
#loc95 = loc("CWE511_Logic_Time_Bomb__counter_15.c":80:17)
#loc96 = loc("CWE511_Logic_Time_Bomb__counter_15.c":82:5)
#loc97 = loc("CWE511_Logic_Time_Bomb__counter_15.c":87:1)
#loc98 = loc("CWE511_Logic_Time_Bomb__counter_15.c":111:1)
#loc99 = loc("CWE511_Logic_Time_Bomb__counter_15.c":89:5)
#loc100 = loc("CWE511_Logic_Time_Bomb__counter_15.c":110:5)
#loc101 = loc("CWE511_Logic_Time_Bomb__counter_15.c":89:12)
#loc102 = loc("CWE511_Logic_Time_Bomb__counter_15.c":91:5)
#loc103 = loc("CWE511_Logic_Time_Bomb__counter_15.c":92:5)
#loc104 = loc("CWE511_Logic_Time_Bomb__counter_15.c":104:5)
#loc105 = loc("CWE511_Logic_Time_Bomb__counter_15.c":93:9)
#loc106 = loc("CWE511_Logic_Time_Bomb__counter_15.c":93:21)
#loc107 = loc("CWE511_Logic_Time_Bomb__counter_15.c":94:9)
#loc108 = loc("CWE511_Logic_Time_Bomb__counter_15.c":103:21)
#loc109 = loc("CWE511_Logic_Time_Bomb__counter_15.c":97:13)
#loc110 = loc("CWE511_Logic_Time_Bomb__counter_15.c":100:13)
#loc111 = loc("CWE511_Logic_Time_Bomb__counter_15.c":97:17)
#loc112 = loc("CWE511_Logic_Time_Bomb__counter_15.c":97:26)
#loc113 = loc("CWE511_Logic_Time_Bomb__counter_15.c":98:13)
#loc114 = loc("CWE511_Logic_Time_Bomb__counter_15.c":99:27)
#loc115 = loc("CWE511_Logic_Time_Bomb__counter_15.c":99:17)
#loc116 = loc("CWE511_Logic_Time_Bomb__counter_15.c":101:18)
#loc117 = loc("CWE511_Logic_Time_Bomb__counter_15.c":101:13)
#loc118 = loc("CWE511_Logic_Time_Bomb__counter_15.c":103:15)
#loc119 = loc("CWE511_Logic_Time_Bomb__counter_15.c":103:20)
#loc120 = loc("CWE511_Logic_Time_Bomb__counter_15.c":103:17)
#loc121 = loc("CWE511_Logic_Time_Bomb__counter_15.c":105:5)
#loc122 = loc("CWE511_Logic_Time_Bomb__counter_15.c":106:5)
#loc123 = loc("CWE511_Logic_Time_Bomb__counter_15.c":108:19)
#loc124 = loc("CWE511_Logic_Time_Bomb__counter_15.c":108:9)
#loc125 = loc("CWE511_Logic_Time_Bomb__counter_15.c":109:9)
#loc126 = loc(fused[#loc1, #loc2])
#loc127 = loc(fused[#loc4, #loc5])
#loc128 = loc(fused[#loc7, #loc8])
#loc129 = loc(fused[#loc9, #loc10])
#loc130 = loc(fused[#loc13, #loc14])
#loc131 = loc(fused[#loc15, #loc16])
#loc132 = loc(fused[#loc17, #loc18])
#loc133 = loc(fused[#loc19, #loc20])
#loc134 = loc(fused[#loc21, #loc22])
#loc135 = loc(fused[#loc23, #loc20])
#loc136 = loc(fused[#loc26, #loc25])
#loc137 = loc(fused[#loc27, #loc28])
#loc138 = loc(fused[#loc34, #loc35])
#loc139 = loc(fused[#loc36, #loc37])
#loc140 = loc(fused[#loc38, #loc39])
#loc141 = loc(fused[#loc40, #loc41])
#loc142 = loc(fused[#loc42, #loc43])
#loc143 = loc(fused[#loc48, #loc49])
#loc146 = loc(fused[#loc59, #loc60])
#loc147 = loc(fused[#loc63, #loc64])
#loc148 = loc(fused[#loc67, #loc66])
#loc149 = loc(fused[#loc69, #loc70])
#loc150 = loc(fused[#loc71, #loc72])
#loc151 = loc(fused[#loc79, #loc80])
#loc152 = loc(fused[#loc81, #loc82])
#loc153 = loc(fused[#loc83, #loc84])
#loc154 = loc(fused[#loc85, #loc86])
#loc155 = loc(fused[#loc87, #loc88])
#loc156 = loc(fused[#loc89, #loc86])
#loc157 = loc(fused[#loc92, #loc91])
#loc158 = loc(fused[#loc93, #loc94])
#loc159 = loc(fused[#loc97, #loc98])
#loc160 = loc(fused[#loc99, #loc100])
#loc161 = loc(fused[#loc103, #loc104])
#loc162 = loc(fused[#loc105, #loc106])
#loc163 = loc(fused[#loc107, #loc108])
#loc164 = loc(fused[#loc109, #loc110])
#loc165 = loc(fused[#loc111, #loc112])
#loc166 = loc(fused[#loc113, #loc110])
#loc167 = loc(fused[#loc117, #loc116])
#loc168 = loc(fused[#loc118, #loc119])
