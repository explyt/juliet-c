!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_sub_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc88)
  cir.func no_proto @CWE191_Integer_Underflow__int_min_sub_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc90)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc91)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    cir.br ^bb1 loc(#loc93)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc93)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc13)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc14)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc14)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc14)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    cir.br ^bb4 loc(#loc16)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc12)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc95)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc95)
  ^bb7:  // pred: ^bb6
    %9 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %10 ^bb8, ^bb11 loc(#loc19)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc96)
  ^bb9:  // pred: ^bb8
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc6)
    %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc22)
    cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc24)
    cir.br ^bb10 loc(#loc21)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc25)
  ^bb11:  // 2 preds: ^bb7, ^bb10
    cir.br ^bb12 loc(#loc18)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc4)
  } loc(#loc89)
  cir.func no_proto @CWE191_Integer_Underflow__int_min_sub_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc98)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc99)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc97)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc34)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc102)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc103)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc41)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    cir.br ^bb1 loc(#loc105)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc105)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc45)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc45)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc46)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc46)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc46)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.br ^bb4 loc(#loc48)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc44)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc107)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc107)
  ^bb7:  // pred: ^bb6
    %9 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc51)
    cir.brcond %10 ^bb8, ^bb14 loc(#loc51)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc108)
  ^bb9:  // pred: ^bb8
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc55)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc55)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc55)
    %16 = cir.cmp(gt, %11, %15) : !s32i, !cir.bool loc(#loc109)
    cir.brcond %16 ^bb10, ^bb11 loc(#loc110)
  ^bb10:  // pred: ^bb9
    %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc59)
    cir.store %19, %0 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc61)
    cir.br ^bb12 loc(#loc57)
  ^bb11:  // pred: ^bb9
    %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc34)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    cir.br ^bb12 loc(#loc53)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc53)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc63)
  ^bb14:  // 2 preds: ^bb7, ^bb13
    cir.br ^bb15 loc(#loc50)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc36)
  } loc(#loc101)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc112)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc113)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc70)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    cir.br ^bb1 loc(#loc115)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc115)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc74)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc74)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<2> : !s32i loc(#loc75)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc76)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    cir.br ^bb4 loc(#loc78)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc73)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc117)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc117)
  ^bb7:  // pred: ^bb6
    %7 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc81)
    cir.brcond %8 ^bb8, ^bb11 loc(#loc81)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc118)
  ^bb9:  // pred: ^bb8
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc67)
    %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc84)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc86)
    cir.br ^bb10 loc(#loc83)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc87)
  ^bb11:  // 2 preds: ^bb7, ^bb10
    cir.br ^bb12 loc(#loc80)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc65)
  } loc(#loc111)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_sub_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":42:1)
#loc5 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":37:13)
#loc6 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":37:33)
#loc7 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":24:9)
#loc9 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":26:12)
#loc10 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":26:5)
#loc11 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":27:5)
#loc12 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":32:5)
#loc13 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":27:11)
#loc14 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":30:16)
#loc15 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":30:9)
#loc16 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":31:9)
#loc17 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":33:5)
#loc18 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":41:5)
#loc19 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":33:11)
#loc20 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":35:9)
#loc21 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":39:9)
#loc22 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":37:26)
#loc23 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":38:26)
#loc24 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":38:13)
#loc25 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":40:9)
#loc26 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":99:1)
#loc27 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":103:1)
#loc28 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":101:5)
#loc29 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":101:13)
#loc30 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":102:5)
#loc31 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":102:13)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc34 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":70:23)
#loc35 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":49:1)
#loc36 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":74:1)
#loc37 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":65:13)
#loc38 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":65:33)
#loc39 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":51:5)
#loc40 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":51:9)
#loc41 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":53:12)
#loc42 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":53:5)
#loc43 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":54:5)
#loc44 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":59:5)
#loc45 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":54:11)
#loc46 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":57:16)
#loc47 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":57:9)
#loc48 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":58:9)
#loc49 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":60:5)
#loc50 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":73:5)
#loc51 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":60:11)
#loc52 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":63:9)
#loc53 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":71:9)
#loc54 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":63:13)
#loc55 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":63:20)
#loc56 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":64:9)
#loc57 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":67:9)
#loc58 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":69:9)
#loc59 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":65:26)
#loc60 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":66:26)
#loc61 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":66:13)
#loc62 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":70:13)
#loc63 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":72:9)
#loc64 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":77:1)
#loc65 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":97:1)
#loc66 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":92:13)
#loc67 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":92:33)
#loc68 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":79:5)
#loc69 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":79:9)
#loc70 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":81:12)
#loc71 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":81:5)
#loc72 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":82:5)
#loc73 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":87:5)
#loc74 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":82:11)
#loc75 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":85:17)
#loc76 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":85:16)
#loc77 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":85:9)
#loc78 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":86:9)
#loc79 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":88:5)
#loc80 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":96:5)
#loc81 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":88:11)
#loc82 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":90:9)
#loc83 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":94:9)
#loc84 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":92:26)
#loc85 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":93:26)
#loc86 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":93:13)
#loc87 = loc("CWE191_Integer_Underflow__int_min_sub_16.c":95:9)
#loc88 = loc(fused[#loc1, #loc2])
#loc89 = loc(fused[#loc3, #loc4])
#loc90 = loc(fused[#loc5, #loc6])
#loc91 = loc(fused[#loc7, #loc8])
#loc92 = loc(fused[#loc10, #loc9])
#loc93 = loc(fused[#loc11, #loc12])
#loc94 = loc(fused[#loc15, #loc14])
#loc95 = loc(fused[#loc17, #loc18])
#loc96 = loc(fused[#loc20, #loc21])
#loc97 = loc(fused[#loc26, #loc27])
#loc98 = loc(fused[#loc28, #loc29])
#loc99 = loc(fused[#loc30, #loc31])
#loc100 = loc(fused[#loc32, #loc33])
#loc101 = loc(fused[#loc35, #loc36])
#loc102 = loc(fused[#loc37, #loc38])
#loc103 = loc(fused[#loc39, #loc40])
#loc104 = loc(fused[#loc42, #loc41])
#loc105 = loc(fused[#loc43, #loc44])
#loc106 = loc(fused[#loc47, #loc46])
#loc107 = loc(fused[#loc49, #loc50])
#loc108 = loc(fused[#loc52, #loc53])
#loc109 = loc(fused[#loc54, #loc55])
#loc110 = loc(fused[#loc56, #loc57, #loc58, #loc53])
#loc111 = loc(fused[#loc64, #loc65])
#loc112 = loc(fused[#loc66, #loc67])
#loc113 = loc(fused[#loc68, #loc69])
#loc114 = loc(fused[#loc71, #loc70])
#loc115 = loc(fused[#loc72, #loc73])
#loc116 = loc(fused[#loc77, #loc75])
#loc117 = loc(fused[#loc79, #loc80])
#loc118 = loc(fused[#loc82, #loc83])
