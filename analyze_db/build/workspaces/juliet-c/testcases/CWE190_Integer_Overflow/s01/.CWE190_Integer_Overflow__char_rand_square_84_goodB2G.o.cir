!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":26:55)
#loc6 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":26:108)
#loc7 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":26:113)
#loc12 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":30:18)
#loc16 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:7)
#loc17 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:12)
#loc31 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":33:55)
!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G = !cir.record<class "CWE190_Integer_Overflow__char_rand_square_84::CWE190_Integer_Overflow__char_rand_square_84_goodB2G" {!s8i} #cir.record.decl.ast>
#loc51 = loc(fused[#loc6, #loc7])
#loc55 = loc(fused[#loc16, #loc17])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc49)
  cir.func @_ZN44CWE190_Integer_Overflow__char_rand_square_8452CWE190_Integer_Overflow__char_rand_square_84_goodB2GC2Ec(%arg0: !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G> loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":26:55), %arg1: !s8i loc(fused[#loc6, #loc7])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G>>, ["this", init] {alignment = 8 : i64} loc(#loc5)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["dataCopy", init] {alignment = 1 : i64} loc(#loc51)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G>> loc(#loc8)
    cir.store %arg1, %1 : !s8i, !cir.ptr<!s8i> loc(#loc8)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G>>, !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G> loc(#loc5)
    %3 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc9)
    %4 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G> -> !cir.ptr<!s8i> loc(#loc10)
    cir.store %3, %4 : !s8i, !cir.ptr<!s8i> loc(#loc52)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc12)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc12)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc12)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc12)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc12)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc12)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc12)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc12)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc12)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc12)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc12)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc12)
    cir.br ^bb3(%20 : !u32i) loc(#loc12)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc12)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc12)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc12)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc12)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc12)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc12)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc12)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc12)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc12)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc12)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc12)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc12)
    cir.br ^bb3(%36 : !u32i) loc(#loc12)
  ^bb3(%37: !u32i loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":30:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc12)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc12)
    %39 = cir.cast(integral, %38 : !s32i), !s8i loc(#loc12)
    %40 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G> -> !cir.ptr<!s8i> loc(#loc10)
    cir.store %39, %40 : !s8i, !cir.ptr<!s8i> loc(#loc53)
    cir.return loc(#loc4)
  } loc(#loc50)
  cir.func private @_ZN44CWE190_Integer_Overflow__char_rand_square_8452CWE190_Integer_Overflow__char_rand_square_84_goodB2GC1Ec(!cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G>, !s8i) alias(@_ZN44CWE190_Integer_Overflow__char_rand_square_8452CWE190_Integer_Overflow__char_rand_square_84_goodB2GC2Ec) loc(#loc50)
  cir.func linkonce_odr @_ZSt3absl(%arg0: !s64i loc(fused[#loc16, #loc17])) -> !s64i extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__i", init] {alignment = 8 : i64} loc(#loc55)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc15)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc18)
    %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc19)
    %3 = cir.abs %2 poison : !s64i loc(#loc20)
    cir.store %3, %1 : !s64i, !cir.ptr<!s64i> loc(#loc56)
    %4 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc56)
    cir.return %4 : !s64i loc(#loc56)
  } loc(#loc54)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc23)
  cir.func private @printHexCharLine(!s8i) loc(#loc57)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc28)
  cir.func @_ZN44CWE190_Integer_Overflow__char_rand_square_8452CWE190_Integer_Overflow__char_rand_square_84_goodB2GD2Ev(%arg0: !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G> loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":33:55)) extra(#fn_attr2) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc60)
    %1 = cir.alloca !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G>>, ["this", init] {alignment = 8 : i64} loc(#loc31)
    cir.store %arg0, %1 : !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G>> loc(#loc34)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G>>, !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G> loc(#loc31)
    cir.br ^bb1 loc(#loc61)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G> -> !cir.ptr<!s8i> loc(#loc10)
    %4 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc37)
    %5 = cir.cast(integral, %4 : !s8i), !s64i loc(#loc37)
    %6 = cir.call @_ZSt3absl(%5) : (!s64i) -> !s64i loc(#loc38)
    %7 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc39)
    %8 = cir.const #cir.int<127> : !s32i loc(#loc40)
    %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc40)
    %10 = cir.call @sqrt(%9) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc39)
    %11 = cir.cast(float_to_int, %10 : !cir.double), !s64i loc(#loc39)
    %12 = cir.cmp(le, %6, %11) : !s64i, !cir.bool loc(#loc62)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc63)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G> -> !cir.ptr<!s8i> loc(#loc10)
    %14 = cir.load %13 : !cir.ptr<!s8i>, !s8i loc(#loc45)
    %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc45)
    %16 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G> -> !cir.ptr<!s8i> loc(#loc10)
    %17 = cir.load %16 : !cir.ptr<!s8i>, !s8i loc(#loc33)
    %18 = cir.cast(integral, %17 : !s8i), !s32i loc(#loc33)
    %19 = cir.binop(mul, %15, %18) nsw : !s32i loc(#loc45)
    %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc45)
    cir.store %20, %0 : !s8i, !cir.ptr<!s8i> loc(#loc60)
    %21 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc46)
    cir.call @printHexCharLine(%21) : (!s8i) -> () loc(#loc47)
    cir.br ^bb4 loc(#loc43)
  ^bb3:  // pred: ^bb1
    %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc28)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc28)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    cir.br ^bb4 loc(#loc36)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc36)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc30)
  } loc(#loc59)
  cir.func private @_ZN44CWE190_Integer_Overflow__char_rand_square_8452CWE190_Integer_Overflow__char_rand_square_84_goodB2GD1Ev(!cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_843A3ACWE190_Integer_Overflow__char_rand_square_84_goodB2G>) alias(@_ZN44CWE190_Integer_Overflow__char_rand_square_8452CWE190_Integer_Overflow__char_rand_square_84_goodB2GD2Ev) loc(#loc59)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":26:1)
#loc4 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":31:1)
#loc8 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":27:1)
#loc9 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":28:12)
#loc10 = loc("./CWE190_Integer_Overflow__char_rand_square_84.h":56:10)
#loc11 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":28:5)
#loc13 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":30:5)
#loc14 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":55:3)
#loc15 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:47)
#loc18 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:17)
#loc19 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:41)
#loc20 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:26)
#loc21 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:19)
#loc22 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:44)
#loc23 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc28 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":43:19)
#loc29 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":33:1)
#loc30 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":45:1)
#loc32 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":38:9)
#loc33 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":38:30)
#loc34 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":34:1)
#loc35 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":36:5)
#loc36 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":44:5)
#loc37 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":36:19)
#loc38 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":36:9)
#loc39 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":36:34)
#loc40 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":36:47)
#loc41 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":36:55)
#loc42 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":37:5)
#loc43 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":40:5)
#loc44 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":42:5)
#loc45 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":38:23)
#loc46 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":39:26)
#loc47 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":39:9)
#loc48 = loc("CWE190_Integer_Overflow__char_rand_square_84_goodB2G.cpp":43:9)
#loc49 = loc(fused[#loc1, #loc2])
#loc50 = loc(fused[#loc3, #loc4])
#loc52 = loc(fused[#loc11, #loc9])
#loc53 = loc(fused[#loc13, #loc12])
#loc54 = loc(fused[#loc14, #loc15])
#loc56 = loc(fused[#loc21, #loc22])
#loc57 = loc(fused[#loc24, #loc25])
#loc58 = loc(fused[#loc26, #loc27])
#loc59 = loc(fused[#loc29, #loc30])
#loc60 = loc(fused[#loc32, #loc33])
#loc61 = loc(fused[#loc35, #loc36])
#loc62 = loc(fused[#loc38, #loc41])
#loc63 = loc(fused[#loc42, #loc43, #loc44, #loc36])
