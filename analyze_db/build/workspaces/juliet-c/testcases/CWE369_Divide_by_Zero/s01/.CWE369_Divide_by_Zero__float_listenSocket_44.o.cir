!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":46:21)
#loc6 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":46:27)
#loc167 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":140:25)
#loc168 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":140:31)
#loc195 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":161:25)
#loc196 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":161:31)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc338 = loc(fused[#loc5, #loc6])
#loc401 = loc(fused[#loc167, #loc168])
#loc412 = loc(fused[#loc195, #loc196])
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc336)
  cir.func internal private @badSink(%arg0: !cir.float loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc338)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc340)
      %2 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc12)
      %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc13)
      %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc13)
      %5 = cir.binop(div, %2, %4) : !cir.double loc(#loc341)
      %6 = cir.cast(float_to_int, %5 : !cir.double), !s32i loc(#loc341)
      cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc340)
      %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc15)
    } loc(#loc339)
    cir.return loc(#loc4)
  } loc(#loc337)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc342)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr1) loc(#loc343)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr1) loc(#loc344)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc345)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc346)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc347)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr1) loc(#loc348)
  cir.func private @close(!s32i) -> !s32i loc(#loc349)
  cir.func no_proto @CWE369_Divide_by_Zero__float_listenSocket_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc351)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc352)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!cir.float)>> loc(#loc37)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>> loc(#loc352)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc38)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc353)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc355)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc356)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc357)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc358)
      %10 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc359)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc47)
      %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc47)
      cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc357)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc49)
      %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc49)
      cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc358)
      cir.scope {
        cir.do {
          cir.scope {
            %15 = cir.const #cir.int<2> : !s32i loc(#loc56)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc57)
            %17 = cir.const #cir.int<6> : !s32i loc(#loc58)
            %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc59)
            cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc362)
            cir.scope {
              %55 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc64)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc65)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc65)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc364)
              cir.if %58 {
                cir.break loc(#loc67)
              } loc(#loc365)
            } loc(#loc363)
            %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc366)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc70)
            %21 = cir.const #cir.int<16> : !u64i loc(#loc367)
            cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc368)
            %22 = cir.const #cir.int<2> : !s32i loc(#loc75)
            %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc75)
            %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc76)
            cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc369)
            %25 = cir.const #cir.int<0> : !s32i loc(#loc78)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc78)
            %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc79)
            %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc80)
            cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc370)
            %29 = cir.const #cir.int<27015> : !s32i loc(#loc82)
            %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc82)
            %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr1) loc(#loc83)
            %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc84)
            cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc371)
            cir.scope {
              %55 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc89)
              %56 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc373)
              %57 = cir.const #cir.int<16> : !u64i loc(#loc374)
              %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc374)
              %59 = cir.call @bind(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr1) loc(#loc94)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc95)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc95)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc375)
              cir.if %62 {
                cir.break loc(#loc97)
              } loc(#loc376)
            } loc(#loc372)
            cir.scope {
              %55 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc100)
              %56 = cir.const #cir.int<5> : !s32i loc(#loc101)
              %57 = cir.call @listen(%55, %56) : (!s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc102)
              %58 = cir.const #cir.int<1> : !s32i loc(#loc103)
              %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc103)
              %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc378)
              cir.if %60 {
                cir.break loc(#loc105)
              } loc(#loc379)
            } loc(#loc377)
            %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc106)
            %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc107)
            %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc108)
            %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc109)
            cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc380)
            cir.scope {
              %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc114)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc115)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc115)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc382)
              cir.if %58 {
                cir.break loc(#loc117)
              } loc(#loc383)
            } loc(#loc381)
            %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc118)
            %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc119)
            %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc119)
            %40 = cir.const #cir.int<20> : !s32i loc(#loc120)
            %41 = cir.const #cir.int<1> : !s32i loc(#loc121)
            %42 = cir.binop(sub, %40, %41) nsw : !s32i loc(#loc120)
            %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc120)
            %44 = cir.const #cir.int<0> : !s32i loc(#loc122)
            %45 = cir.call @recv(%37, %39, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc123)
            %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc123)
            cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc384)
            cir.scope {
              %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc128)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc129)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc129)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc386)
              %59 = cir.ternary(%58, true {
                %60 = cir.const #true loc(#loc130)
                cir.yield %60 : !cir.bool loc(#loc130)
              }, false {
                %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc131)
                %61 = cir.const #cir.int<0> : !s32i loc(#loc132)
                %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc387)
                %63 = cir.ternary(%62, true {
                  %64 = cir.const #true loc(#loc130)
                  cir.yield %64 : !cir.bool loc(#loc130)
                }, false {
                  %64 = cir.const #false loc(#loc130)
                  cir.yield %64 : !cir.bool loc(#loc130)
                }) : (!cir.bool) -> !cir.bool loc(#loc130)
                cir.yield %63 : !cir.bool loc(#loc130)
              }) : (!cir.bool) -> !cir.bool loc(#loc130)
              cir.if %59 {
                cir.break loc(#loc134)
              } loc(#loc388)
            } loc(#loc385)
            %47 = cir.const #cir.int<0> : !s32i loc(#loc135)
            %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc135)
            %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc136)
            %50 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc137)
            %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc137)
            cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc389)
            %52 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc138)
            %53 = cir.call @atof(%52) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr1) loc(#loc139)
            %54 = cir.cast(floating, %53 : !cir.double), !cir.float loc(#loc139)
            cir.store %54, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc390)
          } loc(#loc361)
          cir.yield loc(#loc53)
        } while {
          %15 = cir.const #cir.int<0> : !s32i loc(#loc142)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc142)
          cir.condition(%16) loc(#loc142)
        } loc(#loc360)
      } loc(#loc360)
      cir.scope {
        %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc145)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc146)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc146)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc392)
        cir.if %18 {
          %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc148)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc149)
        } loc(#loc393)
      } loc(#loc391)
      cir.scope {
        %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc152)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc153)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc153)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc395)
        cir.if %18 {
          %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc155)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc156)
        } loc(#loc396)
      } loc(#loc394)
    } loc(#loc354)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, !cir.ptr<!cir.func<(!cir.float)>> loc(#loc157)
    %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc158)
    cir.call %4(%5) : (!cir.ptr<!cir.func<(!cir.float)>>, !cir.float) -> () loc(#loc157)
    cir.return loc(#loc33)
  } loc(#loc350)
  cir.func no_proto @CWE369_Divide_by_Zero__float_listenSocket_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc398)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc161)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc399)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc163)
    cir.return loc(#loc160)
  } loc(#loc397)
  cir.func internal private @goodG2BSink(%arg0: !cir.float loc(fused[#loc167, #loc168])) extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc401)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc169)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc403)
      %2 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc174)
      %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc175)
      %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc175)
      %5 = cir.binop(div, %2, %4) : !cir.double loc(#loc404)
      %6 = cir.cast(float_to_int, %5 : !cir.double), !s32i loc(#loc404)
      cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc403)
      %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc176)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc177)
    } loc(#loc402)
    cir.return loc(#loc166)
  } loc(#loc400)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc406)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc407)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!cir.float)>> loc(#loc183)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>> loc(#loc407)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc184)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc408)
    %4 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc186)
    cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc409)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, !cir.ptr<!cir.func<(!cir.float)>> loc(#loc188)
    %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc189)
    cir.call %5(%6) : (!cir.ptr<!cir.func<(!cir.float)>>, !cir.float) -> () loc(#loc188)
    cir.return loc(#loc179)
  } loc(#loc405)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc410)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc192)
  cir.func internal private @goodB2GSink(%arg0: !cir.float loc(fused[#loc195, #loc196])) extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc412)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc197)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc200)
      %2 = cir.cast(floating, %1 : !cir.float), !cir.double loc(#loc200)
      %3 = cir.fabs %2 : !cir.double loc(#loc200)
      %4 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc201)
      %5 = cir.cmp(gt, %3, %4) : !cir.double, !cir.bool loc(#loc414)
      cir.if %5 {
        %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc416)
        %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc208)
        %8 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc209)
        %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc209)
        %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc417)
        %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc417)
        cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc416)
        %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc210)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc211)
      } else {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc192)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc192)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc212)
      } loc(#loc415)
    } loc(#loc413)
    cir.return loc(#loc194)
  } loc(#loc411)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc419)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc420)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<(!cir.float)>> loc(#loc218)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>> loc(#loc420)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc219)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc421)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc423)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc424)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc425)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc426)
      %10 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc427)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc228)
      %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc228)
      cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc425)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc230)
      %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc230)
      cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc426)
      cir.scope {
        cir.do {
          cir.scope {
            %15 = cir.const #cir.int<2> : !s32i loc(#loc237)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc238)
            %17 = cir.const #cir.int<6> : !s32i loc(#loc239)
            %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc240)
            cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc430)
            cir.scope {
              %55 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc245)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc246)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc246)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc432)
              cir.if %58 {
                cir.break loc(#loc248)
              } loc(#loc433)
            } loc(#loc431)
            %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc434)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc251)
            %21 = cir.const #cir.int<16> : !u64i loc(#loc435)
            cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc436)
            %22 = cir.const #cir.int<2> : !s32i loc(#loc256)
            %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc256)
            %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc76)
            cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc437)
            %25 = cir.const #cir.int<0> : !s32i loc(#loc258)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc258)
            %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc79)
            %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc80)
            cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc438)
            %29 = cir.const #cir.int<27015> : !s32i loc(#loc260)
            %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc260)
            %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr1) loc(#loc261)
            %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc84)
            cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc439)
            cir.scope {
              %55 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc266)
              %56 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc441)
              %57 = cir.const #cir.int<16> : !u64i loc(#loc442)
              %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc442)
              %59 = cir.call @bind(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr1) loc(#loc271)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc272)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc272)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc443)
              cir.if %62 {
                cir.break loc(#loc274)
              } loc(#loc444)
            } loc(#loc440)
            cir.scope {
              %55 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc277)
              %56 = cir.const #cir.int<5> : !s32i loc(#loc278)
              %57 = cir.call @listen(%55, %56) : (!s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc279)
              %58 = cir.const #cir.int<1> : !s32i loc(#loc280)
              %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc280)
              %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc446)
              cir.if %60 {
                cir.break loc(#loc282)
              } loc(#loc447)
            } loc(#loc445)
            %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc283)
            %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc284)
            %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc285)
            %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc286)
            cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc448)
            cir.scope {
              %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc291)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc292)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc292)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc450)
              cir.if %58 {
                cir.break loc(#loc294)
              } loc(#loc451)
            } loc(#loc449)
            %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc295)
            %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc296)
            %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc296)
            %40 = cir.const #cir.int<20> : !s32i loc(#loc297)
            %41 = cir.const #cir.int<1> : !s32i loc(#loc298)
            %42 = cir.binop(sub, %40, %41) nsw : !s32i loc(#loc297)
            %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc297)
            %44 = cir.const #cir.int<0> : !s32i loc(#loc299)
            %45 = cir.call @recv(%37, %39, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc300)
            %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc300)
            cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc452)
            cir.scope {
              %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc305)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc306)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc306)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc454)
              %59 = cir.ternary(%58, true {
                %60 = cir.const #true loc(#loc307)
                cir.yield %60 : !cir.bool loc(#loc307)
              }, false {
                %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc308)
                %61 = cir.const #cir.int<0> : !s32i loc(#loc309)
                %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc455)
                %63 = cir.ternary(%62, true {
                  %64 = cir.const #true loc(#loc307)
                  cir.yield %64 : !cir.bool loc(#loc307)
                }, false {
                  %64 = cir.const #false loc(#loc307)
                  cir.yield %64 : !cir.bool loc(#loc307)
                }) : (!cir.bool) -> !cir.bool loc(#loc307)
                cir.yield %63 : !cir.bool loc(#loc307)
              }) : (!cir.bool) -> !cir.bool loc(#loc307)
              cir.if %59 {
                cir.break loc(#loc311)
              } loc(#loc456)
            } loc(#loc453)
            %47 = cir.const #cir.int<0> : !s32i loc(#loc312)
            %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc312)
            %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc313)
            %50 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc314)
            %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc314)
            cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc457)
            %52 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc315)
            %53 = cir.call @atof(%52) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr1) loc(#loc316)
            %54 = cir.cast(floating, %53 : !cir.double), !cir.float loc(#loc316)
            cir.store %54, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc458)
          } loc(#loc429)
          cir.yield loc(#loc234)
        } while {
          %15 = cir.const #cir.int<0> : !s32i loc(#loc319)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc319)
          cir.condition(%16) loc(#loc319)
        } loc(#loc428)
      } loc(#loc428)
      cir.scope {
        %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc322)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc323)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc323)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc460)
        cir.if %18 {
          %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc325)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc326)
        } loc(#loc461)
      } loc(#loc459)
      cir.scope {
        %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc329)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc330)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc330)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc463)
        cir.if %18 {
          %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc332)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc333)
        } loc(#loc464)
      } loc(#loc462)
    } loc(#loc422)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, !cir.ptr<!cir.func<(!cir.float)>> loc(#loc334)
    %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc335)
    cir.call %4(%5) : (!cir.ptr<!cir.func<(!cir.float)>>, !cir.float) -> () loc(#loc334)
    cir.return loc(#loc214)
  } loc(#loc418)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":46:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":53:1)
#loc7 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":47:1)
#loc8 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":48:5)
#loc9 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":52:5)
#loc10 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":50:9)
#loc11 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":50:40)
#loc12 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":50:28)
#loc13 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":50:36)
#loc14 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":51:22)
#loc15 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":51:9)
#loc16 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc17 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc18 = loc("/usr/include/netinet/in.h":402:1)
#loc19 = loc("/usr/include/netinet/in.h":403:40)
#loc20 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc21 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc22 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc23 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc24 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc25 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc26 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc27 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc28 = loc("/usr/include/stdlib.h":102:1)
#loc29 = loc("/usr/include/stdlib.h":103:33)
#loc30 = loc("/usr/include/unistd.h":358:1)
#loc31 = loc("/usr/include/unistd.h":358:27)
#loc32 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":55:1)
#loc33 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":133:1)
#loc34 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":57:5)
#loc35 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":57:11)
#loc36 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":59:5)
#loc37 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":59:31)
#loc38 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":61:12)
#loc39 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":61:5)
#loc40 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":62:5)
#loc41 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":130:5)
#loc42 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":67:9)
#loc43 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":67:13)
#loc44 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":68:9)
#loc45 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":68:28)
#loc46 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":69:9)
#loc47 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":69:31)
#loc48 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":70:9)
#loc49 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":70:31)
#loc50 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":71:9)
#loc51 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":71:41)
#loc52 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":72:9)
#loc53 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":115:17)
#loc54 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":73:9)
#loc55 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":114:9)
#loc56 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":81:35)
#loc57 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":81:44)
#loc58 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":81:57)
#loc59 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":81:28)
#loc60 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":81:13)
#loc61 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":81:68)
#loc62 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":82:13)
#loc63 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":85:13)
#loc64 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":82:17)
#loc65 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":82:33)
#loc66 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":83:13)
#loc67 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":84:17)
#loc68 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":86:20)
#loc69 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":86:21)
#loc70 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":86:30)
#loc71 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":86:33)
#loc72 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":86:47)
#loc73 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":86:13)
#loc74 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":86:48)
#loc75 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":87:34)
#loc76 = loc("/usr/include/netinet/in.h":249:5)
#loc77 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":87:13)
#loc78 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":88:39)
#loc79 = loc("/usr/include/netinet/in.h":251:20)
#loc80 = loc("/usr/include/netinet/in.h":33:15)
#loc81 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":88:13)
#loc82 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":89:38)
#loc83 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":89:32)
#loc84 = loc("/usr/include/netinet/in.h":250:15)
#loc85 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":89:13)
#loc86 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":89:46)
#loc87 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":90:13)
#loc88 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":93:13)
#loc89 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":90:22)
#loc90 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":90:54)
#loc91 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":90:55)
#loc92 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":90:64)
#loc93 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":90:78)
#loc94 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":90:17)
#loc95 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":90:84)
#loc96 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":91:13)
#loc97 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":92:17)
#loc98 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":94:13)
#loc99 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":97:13)
#loc100 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":94:24)
#loc101 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":94:38)
#loc102 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":94:17)
#loc103 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":94:57)
#loc104 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":95:13)
#loc105 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":96:17)
#loc106 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":98:35)
#loc107 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":98:49)
#loc108 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":98:55)
#loc109 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":98:28)
#loc110 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":98:13)
#loc111 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":98:59)
#loc112 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":99:13)
#loc113 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":102:13)
#loc114 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":99:17)
#loc115 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":99:33)
#loc116 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":100:13)
#loc117 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":101:17)
#loc118 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":105:31)
#loc119 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":105:45)
#loc120 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":105:58)
#loc121 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":105:76)
#loc122 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":105:79)
#loc123 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":105:26)
#loc124 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":105:13)
#loc125 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":105:80)
#loc126 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":106:13)
#loc127 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":109:13)
#loc128 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":106:17)
#loc129 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":106:31)
#loc130 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":106:44)
#loc131 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":106:47)
#loc132 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":106:61)
#loc133 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":107:13)
#loc134 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":108:17)
#loc135 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":111:39)
#loc136 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":111:25)
#loc137 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":111:13)
#loc138 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":113:32)
#loc139 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":113:27)
#loc140 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":113:13)
#loc141 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":113:43)
#loc142 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":115:16)
#loc143 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":116:9)
#loc144 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":119:9)
#loc145 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":116:13)
#loc146 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":116:29)
#loc147 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":117:9)
#loc148 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":118:26)
#loc149 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":118:13)
#loc150 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":120:9)
#loc151 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":123:9)
#loc152 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":120:13)
#loc153 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":120:29)
#loc154 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":121:9)
#loc155 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":122:26)
#loc156 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":122:13)
#loc157 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":132:5)
#loc158 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":132:13)
#loc159 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":253:1)
#loc160 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":257:1)
#loc161 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":255:5)
#loc162 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":255:13)
#loc163 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":256:5)
#loc164 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":256:13)
#loc165 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":140:1)
#loc166 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":147:1)
#loc169 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":141:1)
#loc170 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":142:5)
#loc171 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":146:5)
#loc172 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":144:9)
#loc173 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":144:40)
#loc174 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":144:28)
#loc175 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":144:36)
#loc176 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":145:22)
#loc177 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":145:9)
#loc178 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":149:1)
#loc179 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":158:1)
#loc180 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":151:5)
#loc181 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":151:11)
#loc182 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":152:5)
#loc183 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":152:31)
#loc184 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":154:12)
#loc185 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":154:5)
#loc186 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":156:12)
#loc187 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":156:5)
#loc188 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":157:5)
#loc189 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":157:13)
#loc190 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc191 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc192 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":171:19)
#loc193 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":161:1)
#loc194 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":173:1)
#loc197 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":162:1)
#loc198 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":164:5)
#loc199 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":172:5)
#loc200 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":164:13)
#loc201 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":164:21)
#loc202 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":164:8)
#loc203 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":165:5)
#loc204 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":168:5)
#loc205 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":170:5)
#loc206 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":166:9)
#loc207 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":166:40)
#loc208 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":166:28)
#loc209 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":166:36)
#loc210 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":167:22)
#loc211 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":167:9)
#loc212 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":171:9)
#loc213 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":175:1)
#loc214 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":251:1)
#loc215 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":177:5)
#loc216 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":177:11)
#loc217 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":178:5)
#loc218 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":178:31)
#loc219 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":180:12)
#loc220 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":180:5)
#loc221 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":181:5)
#loc222 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":249:5)
#loc223 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":186:9)
#loc224 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":186:13)
#loc225 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":187:9)
#loc226 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":187:28)
#loc227 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":188:9)
#loc228 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":188:31)
#loc229 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":189:9)
#loc230 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":189:31)
#loc231 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":190:9)
#loc232 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":190:41)
#loc233 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":191:9)
#loc234 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":234:17)
#loc235 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":192:9)
#loc236 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":233:9)
#loc237 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":200:35)
#loc238 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":200:44)
#loc239 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":200:57)
#loc240 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":200:28)
#loc241 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":200:13)
#loc242 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":200:68)
#loc243 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":201:13)
#loc244 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":204:13)
#loc245 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":201:17)
#loc246 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":201:33)
#loc247 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":202:13)
#loc248 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":203:17)
#loc249 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":205:20)
#loc250 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":205:21)
#loc251 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":205:30)
#loc252 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":205:33)
#loc253 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":205:47)
#loc254 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":205:13)
#loc255 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":205:48)
#loc256 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":206:34)
#loc257 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":206:13)
#loc258 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":207:39)
#loc259 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":207:13)
#loc260 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":208:38)
#loc261 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":208:32)
#loc262 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":208:13)
#loc263 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":208:46)
#loc264 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":209:13)
#loc265 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":212:13)
#loc266 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":209:22)
#loc267 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":209:54)
#loc268 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":209:55)
#loc269 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":209:64)
#loc270 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":209:78)
#loc271 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":209:17)
#loc272 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":209:84)
#loc273 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":210:13)
#loc274 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":211:17)
#loc275 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":213:13)
#loc276 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":216:13)
#loc277 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":213:24)
#loc278 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":213:38)
#loc279 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":213:17)
#loc280 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":213:57)
#loc281 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":214:13)
#loc282 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":215:17)
#loc283 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":217:35)
#loc284 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":217:49)
#loc285 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":217:55)
#loc286 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":217:28)
#loc287 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":217:13)
#loc288 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":217:59)
#loc289 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":218:13)
#loc290 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":221:13)
#loc291 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":218:17)
#loc292 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":218:33)
#loc293 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":219:13)
#loc294 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":220:17)
#loc295 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":224:31)
#loc296 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":224:45)
#loc297 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":224:58)
#loc298 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":224:76)
#loc299 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":224:79)
#loc300 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":224:26)
#loc301 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":224:13)
#loc302 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":224:80)
#loc303 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":225:13)
#loc304 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":228:13)
#loc305 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":225:17)
#loc306 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":225:31)
#loc307 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":225:44)
#loc308 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":225:47)
#loc309 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":225:61)
#loc310 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":226:13)
#loc311 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":227:17)
#loc312 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":230:39)
#loc313 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":230:25)
#loc314 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":230:13)
#loc315 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":232:32)
#loc316 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":232:27)
#loc317 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":232:13)
#loc318 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":232:43)
#loc319 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":234:16)
#loc320 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":235:9)
#loc321 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":238:9)
#loc322 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":235:13)
#loc323 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":235:29)
#loc324 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":236:9)
#loc325 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":237:26)
#loc326 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":237:13)
#loc327 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":239:9)
#loc328 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":242:9)
#loc329 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":239:13)
#loc330 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":239:29)
#loc331 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":240:9)
#loc332 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":241:26)
#loc333 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":241:13)
#loc334 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":250:5)
#loc335 = loc("CWE369_Divide_by_Zero__float_listenSocket_44.c":250:13)
#loc336 = loc(fused[#loc1, #loc2])
#loc337 = loc(fused[#loc3, #loc4])
#loc339 = loc(fused[#loc8, #loc9])
#loc340 = loc(fused[#loc10, #loc11])
#loc341 = loc(fused[#loc12, #loc13])
#loc342 = loc(fused[#loc16, #loc17])
#loc343 = loc(fused[#loc18, #loc19])
#loc344 = loc(fused[#loc20, #loc21])
#loc345 = loc(fused[#loc22, #loc23])
#loc346 = loc(fused[#loc24, #loc25])
#loc347 = loc(fused[#loc26, #loc27])
#loc348 = loc(fused[#loc28, #loc29])
#loc349 = loc(fused[#loc30, #loc31])
#loc350 = loc(fused[#loc32, #loc33])
#loc351 = loc(fused[#loc34, #loc35])
#loc352 = loc(fused[#loc36, #loc37])
#loc353 = loc(fused[#loc39, #loc38])
#loc354 = loc(fused[#loc40, #loc41])
#loc355 = loc(fused[#loc42, #loc43])
#loc356 = loc(fused[#loc44, #loc45])
#loc357 = loc(fused[#loc46, #loc47])
#loc358 = loc(fused[#loc48, #loc49])
#loc359 = loc(fused[#loc50, #loc51])
#loc360 = loc(fused[#loc52, #loc53])
#loc361 = loc(fused[#loc54, #loc55])
#loc362 = loc(fused[#loc60, #loc61])
#loc363 = loc(fused[#loc62, #loc63])
#loc364 = loc(fused[#loc64, #loc65])
#loc365 = loc(fused[#loc66, #loc63])
#loc366 = loc(fused[#loc68, #loc69])
#loc367 = loc(fused[#loc71, #loc72])
#loc368 = loc(fused[#loc73, #loc74])
#loc369 = loc(fused[#loc77, #loc75])
#loc370 = loc(fused[#loc81, #loc78])
#loc371 = loc(fused[#loc85, #loc86])
#loc372 = loc(fused[#loc87, #loc88])
#loc373 = loc(fused[#loc90, #loc91])
#loc374 = loc(fused[#loc92, #loc93])
#loc375 = loc(fused[#loc94, #loc95])
#loc376 = loc(fused[#loc96, #loc88])
#loc377 = loc(fused[#loc98, #loc99])
#loc378 = loc(fused[#loc102, #loc103])
#loc379 = loc(fused[#loc104, #loc99])
#loc380 = loc(fused[#loc110, #loc111])
#loc381 = loc(fused[#loc112, #loc113])
#loc382 = loc(fused[#loc114, #loc115])
#loc383 = loc(fused[#loc116, #loc113])
#loc384 = loc(fused[#loc124, #loc125])
#loc385 = loc(fused[#loc126, #loc127])
#loc386 = loc(fused[#loc128, #loc129])
#loc387 = loc(fused[#loc131, #loc132])
#loc388 = loc(fused[#loc133, #loc127])
#loc389 = loc(fused[#loc137, #loc135])
#loc390 = loc(fused[#loc140, #loc141])
#loc391 = loc(fused[#loc143, #loc144])
#loc392 = loc(fused[#loc145, #loc146])
#loc393 = loc(fused[#loc147, #loc144])
#loc394 = loc(fused[#loc150, #loc151])
#loc395 = loc(fused[#loc152, #loc153])
#loc396 = loc(fused[#loc154, #loc151])
#loc397 = loc(fused[#loc159, #loc160])
#loc398 = loc(fused[#loc161, #loc162])
#loc399 = loc(fused[#loc163, #loc164])
#loc400 = loc(fused[#loc165, #loc166])
#loc402 = loc(fused[#loc170, #loc171])
#loc403 = loc(fused[#loc172, #loc173])
#loc404 = loc(fused[#loc174, #loc175])
#loc405 = loc(fused[#loc178, #loc179])
#loc406 = loc(fused[#loc180, #loc181])
#loc407 = loc(fused[#loc182, #loc183])
#loc408 = loc(fused[#loc185, #loc184])
#loc409 = loc(fused[#loc187, #loc186])
#loc410 = loc(fused[#loc190, #loc191])
#loc411 = loc(fused[#loc193, #loc194])
#loc413 = loc(fused[#loc198, #loc199])
#loc414 = loc(fused[#loc202, #loc201])
#loc415 = loc(fused[#loc203, #loc204, #loc205, #loc199])
#loc416 = loc(fused[#loc206, #loc207])
#loc417 = loc(fused[#loc208, #loc209])
#loc418 = loc(fused[#loc213, #loc214])
#loc419 = loc(fused[#loc215, #loc216])
#loc420 = loc(fused[#loc217, #loc218])
#loc421 = loc(fused[#loc220, #loc219])
#loc422 = loc(fused[#loc221, #loc222])
#loc423 = loc(fused[#loc223, #loc224])
#loc424 = loc(fused[#loc225, #loc226])
#loc425 = loc(fused[#loc227, #loc228])
#loc426 = loc(fused[#loc229, #loc230])
#loc427 = loc(fused[#loc231, #loc232])
#loc428 = loc(fused[#loc233, #loc234])
#loc429 = loc(fused[#loc235, #loc236])
#loc430 = loc(fused[#loc241, #loc242])
#loc431 = loc(fused[#loc243, #loc244])
#loc432 = loc(fused[#loc245, #loc246])
#loc433 = loc(fused[#loc247, #loc244])
#loc434 = loc(fused[#loc249, #loc250])
#loc435 = loc(fused[#loc252, #loc253])
#loc436 = loc(fused[#loc254, #loc255])
#loc437 = loc(fused[#loc257, #loc256])
#loc438 = loc(fused[#loc259, #loc258])
#loc439 = loc(fused[#loc262, #loc263])
#loc440 = loc(fused[#loc264, #loc265])
#loc441 = loc(fused[#loc267, #loc268])
#loc442 = loc(fused[#loc269, #loc270])
#loc443 = loc(fused[#loc271, #loc272])
#loc444 = loc(fused[#loc273, #loc265])
#loc445 = loc(fused[#loc275, #loc276])
#loc446 = loc(fused[#loc279, #loc280])
#loc447 = loc(fused[#loc281, #loc276])
#loc448 = loc(fused[#loc287, #loc288])
#loc449 = loc(fused[#loc289, #loc290])
#loc450 = loc(fused[#loc291, #loc292])
#loc451 = loc(fused[#loc293, #loc290])
#loc452 = loc(fused[#loc301, #loc302])
#loc453 = loc(fused[#loc303, #loc304])
#loc454 = loc(fused[#loc305, #loc306])
#loc455 = loc(fused[#loc308, #loc309])
#loc456 = loc(fused[#loc310, #loc304])
#loc457 = loc(fused[#loc314, #loc312])
#loc458 = loc(fused[#loc317, #loc318])
#loc459 = loc(fused[#loc320, #loc321])
#loc460 = loc(fused[#loc322, #loc323])
#loc461 = loc(fused[#loc324, #loc321])
#loc462 = loc(fused[#loc327, #loc328])
#loc463 = loc(fused[#loc329, #loc330])
#loc464 = loc(fused[#loc331, #loc328])
