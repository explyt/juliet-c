!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc425)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc426)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc427)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc7)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc428)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc429)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc430)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc431)
  cir.func private @close(!s32i) -> !s32i loc(#loc432)
  cir.func private @printIntLine(!s32i) loc(#loc433)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_modulo_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc435)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc25)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc436)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc438)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc438)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc29)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc29)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc441)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc442)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc443)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc444)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc39)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc39)
          cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc443)
          cir.scope {
            cir.do {
              cir.scope {
                %13 = cir.const #cir.int<2> : !s32i loc(#loc46)
                %14 = cir.const #cir.int<1> : !s32i loc(#loc47)
                %15 = cir.const #cir.int<6> : !s32i loc(#loc48)
                %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc49)
                cir.store %16, %9 : !s32i, !cir.ptr<!s32i> loc(#loc447)
                cir.scope {
                  %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc54)
                  %56 = cir.const #cir.int<1> : !s32i loc(#loc55)
                  %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc55)
                  %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc449)
                  cir.if %58 {
                    cir.break loc(#loc57)
                  } loc(#loc450)
                } loc(#loc448)
                %17 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc451)
                %18 = cir.const #cir.int<0> : !s32i loc(#loc60)
                %19 = cir.const #cir.int<16> : !u64i loc(#loc452)
                cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc453)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc65)
                %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc65)
                %22 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc66)
                cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc454)
                %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc7)
                %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc7)
                %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc68)
                %26 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc69)
                %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc70)
                cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc455)
                %28 = cir.const #cir.int<27015> : !s32i loc(#loc73)
                %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc73)
                %30 = cir.call @htons(%29) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc74)
                %31 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc456)
                cir.scope {
                  %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc80)
                  %56 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc458)
                  %57 = cir.const #cir.int<16> : !u64i loc(#loc459)
                  %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc459)
                  %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc85)
                  %60 = cir.const #cir.int<1> : !s32i loc(#loc86)
                  %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc86)
                  %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc460)
                  cir.if %62 {
                    cir.break loc(#loc88)
                  } loc(#loc461)
                } loc(#loc457)
                %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc89)
                %33 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc90)
                %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc90)
                %35 = cir.const #cir.int<3> : !s32i loc(#loc91)
                %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc91)
                %37 = cir.const #cir.int<4> : !u64i loc(#loc91)
                %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc91)
                %39 = cir.const #cir.int<2> : !s32i loc(#loc91)
                %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc91)
                %41 = cir.binop(add, %38, %40) : !u64i loc(#loc91)
                %42 = cir.const #cir.int<1> : !s32i loc(#loc92)
                %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc92)
                %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc462)
                %45 = cir.const #cir.int<0> : !s32i loc(#loc93)
                %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc94)
                %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc94)
                cir.store %47, %7 : !s32i, !cir.ptr<!s32i> loc(#loc463)
                cir.scope {
                  %55 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc99)
                  %56 = cir.const #cir.int<1> : !s32i loc(#loc100)
                  %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc100)
                  %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc465)
                  %59 = cir.ternary(%58, true {
                    %60 = cir.const #true loc(#loc101)
                    cir.yield %60 : !cir.bool loc(#loc101)
                  }, false {
                    %60 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                    %61 = cir.const #cir.int<0> : !s32i loc(#loc103)
                    %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc466)
                    %63 = cir.ternary(%62, true {
                      %64 = cir.const #true loc(#loc101)
                      cir.yield %64 : !cir.bool loc(#loc101)
                    }, false {
                      %64 = cir.const #false loc(#loc101)
                      cir.yield %64 : !cir.bool loc(#loc101)
                    }) : (!cir.bool) -> !cir.bool loc(#loc101)
                    cir.yield %63 : !cir.bool loc(#loc101)
                  }) : (!cir.bool) -> !cir.bool loc(#loc101)
                  cir.if %59 {
                    cir.break loc(#loc105)
                  } loc(#loc467)
                } loc(#loc464)
                %48 = cir.const #cir.int<0> : !s32i loc(#loc106)
                %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc106)
                %50 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                %51 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc108)
                %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc108)
                cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc468)
                %53 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc109)
                %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc110)
                cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc469)
              } loc(#loc446)
              cir.yield loc(#loc43)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc113)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc113)
              cir.condition(%14) loc(#loc113)
            } loc(#loc445)
          } loc(#loc445)
          cir.scope {
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc116)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc117)
            %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc117)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc471)
            cir.if %16 {
              %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc119)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc120)
            } loc(#loc472)
          } loc(#loc470)
        } loc(#loc440)
      } loc(#loc439)
    } loc(#loc437)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc474)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc474)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc123)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc123)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc126)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc127)
        %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc476)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc128)
      } loc(#loc475)
    } loc(#loc473)
    cir.return loc(#loc21)
  } loc(#loc434)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_modulo_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc478)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc131)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc479)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc133)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc480)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc135)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc481)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc137)
    cir.return loc(#loc130)
  } loc(#loc477)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc482)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc483)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc143)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc144)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc485)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc149)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc150)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc486)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc488)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc488)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc154)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc154)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc491)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc492)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc493)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc494)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc164)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc164)
          cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc493)
          cir.scope {
            cir.do {
              cir.scope {
                %13 = cir.const #cir.int<2> : !s32i loc(#loc171)
                %14 = cir.const #cir.int<1> : !s32i loc(#loc172)
                %15 = cir.const #cir.int<6> : !s32i loc(#loc173)
                %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc174)
                cir.store %16, %9 : !s32i, !cir.ptr<!s32i> loc(#loc497)
                cir.scope {
                  %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc179)
                  %56 = cir.const #cir.int<1> : !s32i loc(#loc180)
                  %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc180)
                  %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc499)
                  cir.if %58 {
                    cir.break loc(#loc182)
                  } loc(#loc500)
                } loc(#loc498)
                %17 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc501)
                %18 = cir.const #cir.int<0> : !s32i loc(#loc185)
                %19 = cir.const #cir.int<16> : !u64i loc(#loc502)
                cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc503)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc190)
                %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc190)
                %22 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc66)
                cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc504)
                %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc192)
                %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc192)
                %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc193)
                %26 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc69)
                %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc70)
                cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc505)
                %28 = cir.const #cir.int<27015> : !s32i loc(#loc196)
                %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc196)
                %30 = cir.call @htons(%29) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc197)
                %31 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc506)
                cir.scope {
                  %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc202)
                  %56 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc508)
                  %57 = cir.const #cir.int<16> : !u64i loc(#loc509)
                  %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc509)
                  %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc207)
                  %60 = cir.const #cir.int<1> : !s32i loc(#loc208)
                  %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc208)
                  %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc510)
                  cir.if %62 {
                    cir.break loc(#loc210)
                  } loc(#loc511)
                } loc(#loc507)
                %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc211)
                %33 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc212)
                %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc212)
                %35 = cir.const #cir.int<3> : !s32i loc(#loc213)
                %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc213)
                %37 = cir.const #cir.int<4> : !u64i loc(#loc213)
                %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc213)
                %39 = cir.const #cir.int<2> : !s32i loc(#loc213)
                %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc213)
                %41 = cir.binop(add, %38, %40) : !u64i loc(#loc213)
                %42 = cir.const #cir.int<1> : !s32i loc(#loc214)
                %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc214)
                %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc512)
                %45 = cir.const #cir.int<0> : !s32i loc(#loc215)
                %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc216)
                %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc216)
                cir.store %47, %7 : !s32i, !cir.ptr<!s32i> loc(#loc513)
                cir.scope {
                  %55 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc221)
                  %56 = cir.const #cir.int<1> : !s32i loc(#loc222)
                  %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc222)
                  %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc515)
                  %59 = cir.ternary(%58, true {
                    %60 = cir.const #true loc(#loc223)
                    cir.yield %60 : !cir.bool loc(#loc223)
                  }, false {
                    %60 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc224)
                    %61 = cir.const #cir.int<0> : !s32i loc(#loc225)
                    %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc516)
                    %63 = cir.ternary(%62, true {
                      %64 = cir.const #true loc(#loc223)
                      cir.yield %64 : !cir.bool loc(#loc223)
                    }, false {
                      %64 = cir.const #false loc(#loc223)
                      cir.yield %64 : !cir.bool loc(#loc223)
                    }) : (!cir.bool) -> !cir.bool loc(#loc223)
                    cir.yield %63 : !cir.bool loc(#loc223)
                  }) : (!cir.bool) -> !cir.bool loc(#loc223)
                  cir.if %59 {
                    cir.break loc(#loc227)
                  } loc(#loc517)
                } loc(#loc514)
                %48 = cir.const #cir.int<0> : !s32i loc(#loc228)
                %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc228)
                %50 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc229)
                %51 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc230)
                %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc230)
                cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc518)
                %53 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc231)
                %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc232)
                cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc519)
              } loc(#loc496)
              cir.yield loc(#loc168)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc235)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc235)
              cir.condition(%14) loc(#loc235)
            } loc(#loc495)
          } loc(#loc495)
          cir.scope {
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc238)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc239)
            %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc239)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc521)
            cir.if %16 {
              %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc241)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc242)
            } loc(#loc522)
          } loc(#loc520)
        } loc(#loc490)
      } loc(#loc489)
    } loc(#loc487)
    cir.scope {
      %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc524)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc524)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc245)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc245)
      cir.if %6 {
        %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc143)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc143)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc250)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc253)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc254)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc527)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc258)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc259)
            %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc529)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc260)
          } else {
            %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc144)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc144)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc261)
          } loc(#loc528)
        } loc(#loc526)
      } loc(#loc525)
    } loc(#loc523)
    cir.return loc(#loc146)
  } loc(#loc484)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc531)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc266)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc267)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc532)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc534)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc534)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc271)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc271)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc537)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc538)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc539)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc540)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc281)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc281)
          cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc539)
          cir.scope {
            cir.do {
              cir.scope {
                %13 = cir.const #cir.int<2> : !s32i loc(#loc288)
                %14 = cir.const #cir.int<1> : !s32i loc(#loc289)
                %15 = cir.const #cir.int<6> : !s32i loc(#loc290)
                %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc291)
                cir.store %16, %9 : !s32i, !cir.ptr<!s32i> loc(#loc543)
                cir.scope {
                  %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc296)
                  %56 = cir.const #cir.int<1> : !s32i loc(#loc297)
                  %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc297)
                  %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc545)
                  cir.if %58 {
                    cir.break loc(#loc299)
                  } loc(#loc546)
                } loc(#loc544)
                %17 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc547)
                %18 = cir.const #cir.int<0> : !s32i loc(#loc302)
                %19 = cir.const #cir.int<16> : !u64i loc(#loc548)
                cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc549)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc307)
                %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc307)
                %22 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc66)
                cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc550)
                %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc309)
                %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc309)
                %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc310)
                %26 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc69)
                %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc70)
                cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc551)
                %28 = cir.const #cir.int<27015> : !s32i loc(#loc313)
                %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc313)
                %30 = cir.call @htons(%29) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc314)
                %31 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc552)
                cir.scope {
                  %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc319)
                  %56 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc554)
                  %57 = cir.const #cir.int<16> : !u64i loc(#loc555)
                  %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc555)
                  %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc324)
                  %60 = cir.const #cir.int<1> : !s32i loc(#loc325)
                  %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc325)
                  %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc556)
                  cir.if %62 {
                    cir.break loc(#loc327)
                  } loc(#loc557)
                } loc(#loc553)
                %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc328)
                %33 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc329)
                %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc329)
                %35 = cir.const #cir.int<3> : !s32i loc(#loc330)
                %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc330)
                %37 = cir.const #cir.int<4> : !u64i loc(#loc330)
                %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc330)
                %39 = cir.const #cir.int<2> : !s32i loc(#loc330)
                %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc330)
                %41 = cir.binop(add, %38, %40) : !u64i loc(#loc330)
                %42 = cir.const #cir.int<1> : !s32i loc(#loc331)
                %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc331)
                %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc558)
                %45 = cir.const #cir.int<0> : !s32i loc(#loc332)
                %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc333)
                %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc333)
                cir.store %47, %7 : !s32i, !cir.ptr<!s32i> loc(#loc559)
                cir.scope {
                  %55 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc338)
                  %56 = cir.const #cir.int<1> : !s32i loc(#loc339)
                  %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc339)
                  %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc561)
                  %59 = cir.ternary(%58, true {
                    %60 = cir.const #true loc(#loc340)
                    cir.yield %60 : !cir.bool loc(#loc340)
                  }, false {
                    %60 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc341)
                    %61 = cir.const #cir.int<0> : !s32i loc(#loc342)
                    %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc562)
                    %63 = cir.ternary(%62, true {
                      %64 = cir.const #true loc(#loc340)
                      cir.yield %64 : !cir.bool loc(#loc340)
                    }, false {
                      %64 = cir.const #false loc(#loc340)
                      cir.yield %64 : !cir.bool loc(#loc340)
                    }) : (!cir.bool) -> !cir.bool loc(#loc340)
                    cir.yield %63 : !cir.bool loc(#loc340)
                  }) : (!cir.bool) -> !cir.bool loc(#loc340)
                  cir.if %59 {
                    cir.break loc(#loc344)
                  } loc(#loc563)
                } loc(#loc560)
                %48 = cir.const #cir.int<0> : !s32i loc(#loc345)
                %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc345)
                %50 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc346)
                %51 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc347)
                %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc347)
                cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc564)
                %53 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc348)
                %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc349)
                cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc565)
              } loc(#loc542)
              cir.yield loc(#loc285)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc352)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc352)
              cir.condition(%14) loc(#loc352)
            } loc(#loc541)
          } loc(#loc541)
          cir.scope {
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc355)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc356)
            %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc356)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc567)
            cir.if %16 {
              %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc358)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc359)
            } loc(#loc568)
          } loc(#loc566)
        } loc(#loc536)
      } loc(#loc535)
    } loc(#loc533)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc570)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc570)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc362)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc362)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc367)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc368)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc573)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc372)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc373)
            %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc575)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc374)
          } else {
            %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc375)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc375)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc376)
          } loc(#loc574)
        } loc(#loc572)
      } loc(#loc571)
    } loc(#loc569)
    cir.return loc(#loc263)
  } loc(#loc530)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc577)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc381)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc382)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc578)
    cir.scope {
      %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc580)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc580)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc386)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc386)
      cir.if %6 {
        %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc391)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc391)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc392)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc393)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc582)
      } loc(#loc581)
    } loc(#loc579)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc584)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc584)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc397)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc397)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc400)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc401)
        %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc586)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc402)
      } loc(#loc585)
    } loc(#loc583)
    cir.return loc(#loc378)
  } loc(#loc576)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc588)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc407)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc408)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc589)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc591)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc591)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc412)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc412)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc415)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc593)
      } loc(#loc592)
    } loc(#loc590)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc595)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc595)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc419)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc419)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc422)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc423)
        %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc597)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc424)
      } loc(#loc596)
    } loc(#loc594)
    cir.return loc(#loc404)
  } loc(#loc587)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc4 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc5 = loc("/usr/include/arpa/inet.h":34:1)
#loc6 = loc("/usr/include/arpa/inet.h":34:47)
#loc7 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":77:53)
#loc8 = loc("/usr/include/netinet/in.h":402:1)
#loc9 = loc("/usr/include/netinet/in.h":403:40)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc14 = loc("/usr/include/stdlib.h":105:1)
#loc15 = loc("/usr/include/stdlib.h":106:33)
#loc16 = loc("/usr/include/unistd.h":358:1)
#loc17 = loc("/usr/include/unistd.h":358:27)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc20 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":44:1)
#loc21 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":113:1)
#loc22 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":46:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":46:9)
#loc24 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":48:13)
#loc25 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":48:12)
#loc26 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":48:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":49:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":107:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":49:8)
#loc30 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":49:26)
#loc31 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":50:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":51:9)
#loc33 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":106:9)
#loc34 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":56:13)
#loc35 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":56:17)
#loc36 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":57:13)
#loc37 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":57:32)
#loc38 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":58:13)
#loc39 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":58:36)
#loc40 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":59:13)
#loc41 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":59:45)
#loc42 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":60:13)
#loc43 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":95:21)
#loc44 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":61:13)
#loc45 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":94:13)
#loc46 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":70:40)
#loc47 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":70:49)
#loc48 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":70:62)
#loc49 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":70:33)
#loc50 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":70:17)
#loc51 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":70:73)
#loc52 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":71:17)
#loc53 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":74:17)
#loc54 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":71:21)
#loc55 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":71:38)
#loc56 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":72:17)
#loc57 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":73:21)
#loc58 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":75:24)
#loc59 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":75:25)
#loc60 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":75:34)
#loc61 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":75:37)
#loc62 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":75:51)
#loc63 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":75:17)
#loc64 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":75:52)
#loc65 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":76:38)
#loc66 = loc("/usr/include/netinet/in.h":249:5)
#loc67 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":76:17)
#loc68 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":77:43)
#loc69 = loc("/usr/include/netinet/in.h":251:20)
#loc70 = loc("/usr/include/netinet/in.h":33:15)
#loc71 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":77:17)
#loc72 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":77:63)
#loc73 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":78:42)
#loc74 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":78:36)
#loc75 = loc("/usr/include/netinet/in.h":250:15)
#loc76 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":78:17)
#loc77 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":78:50)
#loc78 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":79:17)
#loc79 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":82:17)
#loc80 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":79:29)
#loc81 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":79:62)
#loc82 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":79:63)
#loc83 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":79:72)
#loc84 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":79:86)
#loc85 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":79:21)
#loc86 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":79:92)
#loc87 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":80:17)
#loc88 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":81:21)
#loc89 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":85:35)
#loc90 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":85:50)
#loc91 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":85:63)
#loc92 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":85:81)
#loc93 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":85:84)
#loc94 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":85:30)
#loc95 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":85:17)
#loc96 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":85:85)
#loc97 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":86:17)
#loc98 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":89:17)
#loc99 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":86:21)
#loc100 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":86:35)
#loc101 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":86:48)
#loc102 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":86:51)
#loc103 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":86:65)
#loc104 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":87:17)
#loc105 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":88:21)
#loc106 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":91:43)
#loc107 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":91:29)
#loc108 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":91:17)
#loc109 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":93:29)
#loc110 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":93:24)
#loc111 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":93:17)
#loc112 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":93:40)
#loc113 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":95:20)
#loc114 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":96:13)
#loc115 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":99:13)
#loc116 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":96:17)
#loc117 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":96:34)
#loc118 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":97:13)
#loc119 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":98:30)
#loc120 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":98:17)
#loc121 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":108:5)
#loc122 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":112:5)
#loc123 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":108:8)
#loc124 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":108:26)
#loc125 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":109:5)
#loc126 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":111:22)
#loc127 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":111:28)
#loc128 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":111:9)
#loc129 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":323:1)
#loc130 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":329:1)
#loc131 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":325:5)
#loc132 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":325:14)
#loc133 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":326:5)
#loc134 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":326:14)
#loc135 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":327:5)
#loc136 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":327:14)
#loc137 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":328:5)
#loc138 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":328:14)
#loc139 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc140 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc141 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc142 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc143 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":187:19)
#loc144 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":198:23)
#loc145 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":120:1)
#loc146 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":201:1)
#loc147 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":122:5)
#loc148 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":122:9)
#loc149 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":124:13)
#loc150 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":124:12)
#loc151 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":124:5)
#loc152 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":125:5)
#loc153 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":183:5)
#loc154 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":125:8)
#loc155 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":125:26)
#loc156 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":126:5)
#loc157 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":127:9)
#loc158 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":182:9)
#loc159 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":132:13)
#loc160 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":132:17)
#loc161 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":133:13)
#loc162 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":133:32)
#loc163 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":134:13)
#loc164 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":134:36)
#loc165 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":135:13)
#loc166 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":135:45)
#loc167 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":136:13)
#loc168 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":171:21)
#loc169 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":137:13)
#loc170 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":170:13)
#loc171 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":146:40)
#loc172 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":146:49)
#loc173 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":146:62)
#loc174 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":146:33)
#loc175 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":146:17)
#loc176 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":146:73)
#loc177 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":147:17)
#loc178 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":150:17)
#loc179 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":147:21)
#loc180 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":147:38)
#loc181 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":148:17)
#loc182 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":149:21)
#loc183 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":151:24)
#loc184 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":151:25)
#loc185 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":151:34)
#loc186 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":151:37)
#loc187 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":151:51)
#loc188 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":151:17)
#loc189 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":151:52)
#loc190 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":152:38)
#loc191 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":152:17)
#loc192 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":153:53)
#loc193 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":153:43)
#loc194 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":153:17)
#loc195 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":153:63)
#loc196 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":154:42)
#loc197 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":154:36)
#loc198 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":154:17)
#loc199 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":154:50)
#loc200 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":155:17)
#loc201 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":158:17)
#loc202 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":155:29)
#loc203 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":155:62)
#loc204 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":155:63)
#loc205 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":155:72)
#loc206 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":155:86)
#loc207 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":155:21)
#loc208 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":155:92)
#loc209 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":156:17)
#loc210 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":157:21)
#loc211 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":161:35)
#loc212 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":161:50)
#loc213 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":161:63)
#loc214 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":161:81)
#loc215 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":161:84)
#loc216 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":161:30)
#loc217 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":161:17)
#loc218 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":161:85)
#loc219 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":162:17)
#loc220 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":165:17)
#loc221 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":162:21)
#loc222 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":162:35)
#loc223 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":162:48)
#loc224 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":162:51)
#loc225 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":162:65)
#loc226 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":163:17)
#loc227 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":164:21)
#loc228 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":167:43)
#loc229 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":167:29)
#loc230 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":167:17)
#loc231 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":169:29)
#loc232 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":169:24)
#loc233 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":169:17)
#loc234 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":169:40)
#loc235 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":171:20)
#loc236 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":172:13)
#loc237 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":175:13)
#loc238 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":172:17)
#loc239 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":172:34)
#loc240 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":173:13)
#loc241 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":174:30)
#loc242 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":174:17)
#loc243 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":184:5)
#loc244 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":200:5)
#loc245 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":184:8)
#loc246 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":184:27)
#loc247 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":185:5)
#loc248 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":188:5)
#loc249 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":190:5)
#loc250 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":187:9)
#loc251 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":192:9)
#loc252 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":199:9)
#loc253 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":192:13)
#loc254 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":192:21)
#loc255 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":193:9)
#loc256 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":195:9)
#loc257 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":197:9)
#loc258 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":194:26)
#loc259 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":194:32)
#loc260 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":194:13)
#loc261 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":198:13)
#loc262 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":204:1)
#loc263 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":280:1)
#loc264 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":206:5)
#loc265 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":206:9)
#loc266 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":208:13)
#loc267 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":208:12)
#loc268 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":208:5)
#loc269 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":209:5)
#loc270 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":267:5)
#loc271 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":209:8)
#loc272 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":209:26)
#loc273 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":210:5)
#loc274 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":211:9)
#loc275 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":266:9)
#loc276 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":216:13)
#loc277 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":216:17)
#loc278 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":217:13)
#loc279 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":217:32)
#loc280 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":218:13)
#loc281 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":218:36)
#loc282 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":219:13)
#loc283 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":219:45)
#loc284 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":220:13)
#loc285 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":255:21)
#loc286 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":221:13)
#loc287 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":254:13)
#loc288 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":230:40)
#loc289 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":230:49)
#loc290 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":230:62)
#loc291 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":230:33)
#loc292 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":230:17)
#loc293 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":230:73)
#loc294 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":231:17)
#loc295 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":234:17)
#loc296 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":231:21)
#loc297 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":231:38)
#loc298 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":232:17)
#loc299 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":233:21)
#loc300 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":235:24)
#loc301 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":235:25)
#loc302 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":235:34)
#loc303 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":235:37)
#loc304 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":235:51)
#loc305 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":235:17)
#loc306 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":235:52)
#loc307 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":236:38)
#loc308 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":236:17)
#loc309 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":237:53)
#loc310 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":237:43)
#loc311 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":237:17)
#loc312 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":237:63)
#loc313 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":238:42)
#loc314 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":238:36)
#loc315 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":238:17)
#loc316 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":238:50)
#loc317 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":239:17)
#loc318 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":242:17)
#loc319 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":239:29)
#loc320 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":239:62)
#loc321 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":239:63)
#loc322 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":239:72)
#loc323 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":239:86)
#loc324 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":239:21)
#loc325 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":239:92)
#loc326 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":240:17)
#loc327 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":241:21)
#loc328 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":245:35)
#loc329 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":245:50)
#loc330 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":245:63)
#loc331 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":245:81)
#loc332 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":245:84)
#loc333 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":245:30)
#loc334 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":245:17)
#loc335 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":245:85)
#loc336 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":246:17)
#loc337 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":249:17)
#loc338 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":246:21)
#loc339 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":246:35)
#loc340 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":246:48)
#loc341 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":246:51)
#loc342 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":246:65)
#loc343 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":247:17)
#loc344 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":248:21)
#loc345 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":251:43)
#loc346 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":251:29)
#loc347 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":251:17)
#loc348 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":253:29)
#loc349 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":253:24)
#loc350 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":253:17)
#loc351 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":253:40)
#loc352 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":255:20)
#loc353 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":256:13)
#loc354 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":259:13)
#loc355 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":256:17)
#loc356 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":256:34)
#loc357 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":257:13)
#loc358 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":258:30)
#loc359 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":258:17)
#loc360 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":268:5)
#loc361 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":279:5)
#loc362 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":268:8)
#loc363 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":268:26)
#loc364 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":269:5)
#loc365 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":271:9)
#loc366 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":278:9)
#loc367 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":271:13)
#loc368 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":271:21)
#loc369 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":272:9)
#loc370 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":274:9)
#loc371 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":276:9)
#loc372 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":273:26)
#loc373 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":273:32)
#loc374 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":273:13)
#loc375 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":277:23)
#loc376 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":277:13)
#loc377 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":283:1)
#loc378 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":303:1)
#loc379 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":285:5)
#loc380 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":285:9)
#loc381 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":287:13)
#loc382 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":287:12)
#loc383 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":287:5)
#loc384 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":288:5)
#loc385 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":297:5)
#loc386 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":288:8)
#loc387 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":288:27)
#loc388 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":289:5)
#loc389 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":292:5)
#loc390 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":294:5)
#loc391 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":291:19)
#loc392 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":291:9)
#loc393 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":296:16)
#loc394 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":296:9)
#loc395 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":298:5)
#loc396 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":302:5)
#loc397 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":298:8)
#loc398 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":298:26)
#loc399 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":299:5)
#loc400 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":301:22)
#loc401 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":301:28)
#loc402 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":301:9)
#loc403 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":306:1)
#loc404 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":321:1)
#loc405 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":308:5)
#loc406 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":308:9)
#loc407 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":310:13)
#loc408 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":310:12)
#loc409 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":310:5)
#loc410 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":311:5)
#loc411 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":315:5)
#loc412 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":311:8)
#loc413 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":311:26)
#loc414 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":312:5)
#loc415 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":314:16)
#loc416 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":314:9)
#loc417 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":316:5)
#loc418 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":320:5)
#loc419 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":316:8)
#loc420 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":316:26)
#loc421 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":317:5)
#loc422 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":319:22)
#loc423 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":319:28)
#loc424 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_11.c":319:9)
#loc425 = loc(fused[#loc1, #loc2])
#loc426 = loc(fused[#loc3, #loc4])
#loc427 = loc(fused[#loc5, #loc6])
#loc428 = loc(fused[#loc8, #loc9])
#loc429 = loc(fused[#loc10, #loc11])
#loc430 = loc(fused[#loc12, #loc13])
#loc431 = loc(fused[#loc14, #loc15])
#loc432 = loc(fused[#loc16, #loc17])
#loc433 = loc(fused[#loc18, #loc19])
#loc434 = loc(fused[#loc20, #loc21])
#loc435 = loc(fused[#loc22, #loc23])
#loc436 = loc(fused[#loc26, #loc24])
#loc437 = loc(fused[#loc27, #loc28])
#loc438 = loc(fused[#loc29, #loc30])
#loc439 = loc(fused[#loc31, #loc28])
#loc440 = loc(fused[#loc32, #loc33])
#loc441 = loc(fused[#loc34, #loc35])
#loc442 = loc(fused[#loc36, #loc37])
#loc443 = loc(fused[#loc38, #loc39])
#loc444 = loc(fused[#loc40, #loc41])
#loc445 = loc(fused[#loc42, #loc43])
#loc446 = loc(fused[#loc44, #loc45])
#loc447 = loc(fused[#loc50, #loc51])
#loc448 = loc(fused[#loc52, #loc53])
#loc449 = loc(fused[#loc54, #loc55])
#loc450 = loc(fused[#loc56, #loc53])
#loc451 = loc(fused[#loc58, #loc59])
#loc452 = loc(fused[#loc61, #loc62])
#loc453 = loc(fused[#loc63, #loc64])
#loc454 = loc(fused[#loc67, #loc65])
#loc455 = loc(fused[#loc71, #loc72])
#loc456 = loc(fused[#loc76, #loc77])
#loc457 = loc(fused[#loc78, #loc79])
#loc458 = loc(fused[#loc81, #loc82])
#loc459 = loc(fused[#loc83, #loc84])
#loc460 = loc(fused[#loc85, #loc86])
#loc461 = loc(fused[#loc87, #loc79])
#loc462 = loc(fused[#loc91, #loc92])
#loc463 = loc(fused[#loc95, #loc96])
#loc464 = loc(fused[#loc97, #loc98])
#loc465 = loc(fused[#loc99, #loc100])
#loc466 = loc(fused[#loc102, #loc103])
#loc467 = loc(fused[#loc104, #loc98])
#loc468 = loc(fused[#loc108, #loc106])
#loc469 = loc(fused[#loc111, #loc112])
#loc470 = loc(fused[#loc114, #loc115])
#loc471 = loc(fused[#loc116, #loc117])
#loc472 = loc(fused[#loc118, #loc115])
#loc473 = loc(fused[#loc121, #loc122])
#loc474 = loc(fused[#loc123, #loc124])
#loc475 = loc(fused[#loc125, #loc122])
#loc476 = loc(fused[#loc126, #loc127])
#loc477 = loc(fused[#loc129, #loc130])
#loc478 = loc(fused[#loc131, #loc132])
#loc479 = loc(fused[#loc133, #loc134])
#loc480 = loc(fused[#loc135, #loc136])
#loc481 = loc(fused[#loc137, #loc138])
#loc482 = loc(fused[#loc139, #loc140])
#loc483 = loc(fused[#loc141, #loc142])
#loc484 = loc(fused[#loc145, #loc146])
#loc485 = loc(fused[#loc147, #loc148])
#loc486 = loc(fused[#loc151, #loc149])
#loc487 = loc(fused[#loc152, #loc153])
#loc488 = loc(fused[#loc154, #loc155])
#loc489 = loc(fused[#loc156, #loc153])
#loc490 = loc(fused[#loc157, #loc158])
#loc491 = loc(fused[#loc159, #loc160])
#loc492 = loc(fused[#loc161, #loc162])
#loc493 = loc(fused[#loc163, #loc164])
#loc494 = loc(fused[#loc165, #loc166])
#loc495 = loc(fused[#loc167, #loc168])
#loc496 = loc(fused[#loc169, #loc170])
#loc497 = loc(fused[#loc175, #loc176])
#loc498 = loc(fused[#loc177, #loc178])
#loc499 = loc(fused[#loc179, #loc180])
#loc500 = loc(fused[#loc181, #loc178])
#loc501 = loc(fused[#loc183, #loc184])
#loc502 = loc(fused[#loc186, #loc187])
#loc503 = loc(fused[#loc188, #loc189])
#loc504 = loc(fused[#loc191, #loc190])
#loc505 = loc(fused[#loc194, #loc195])
#loc506 = loc(fused[#loc198, #loc199])
#loc507 = loc(fused[#loc200, #loc201])
#loc508 = loc(fused[#loc203, #loc204])
#loc509 = loc(fused[#loc205, #loc206])
#loc510 = loc(fused[#loc207, #loc208])
#loc511 = loc(fused[#loc209, #loc201])
#loc512 = loc(fused[#loc213, #loc214])
#loc513 = loc(fused[#loc217, #loc218])
#loc514 = loc(fused[#loc219, #loc220])
#loc515 = loc(fused[#loc221, #loc222])
#loc516 = loc(fused[#loc224, #loc225])
#loc517 = loc(fused[#loc226, #loc220])
#loc518 = loc(fused[#loc230, #loc228])
#loc519 = loc(fused[#loc233, #loc234])
#loc520 = loc(fused[#loc236, #loc237])
#loc521 = loc(fused[#loc238, #loc239])
#loc522 = loc(fused[#loc240, #loc237])
#loc523 = loc(fused[#loc243, #loc244])
#loc524 = loc(fused[#loc245, #loc246])
#loc525 = loc(fused[#loc247, #loc248, #loc249, #loc244])
#loc526 = loc(fused[#loc251, #loc252])
#loc527 = loc(fused[#loc253, #loc254])
#loc528 = loc(fused[#loc255, #loc256, #loc257, #loc252])
#loc529 = loc(fused[#loc258, #loc259])
#loc530 = loc(fused[#loc262, #loc263])
#loc531 = loc(fused[#loc264, #loc265])
#loc532 = loc(fused[#loc268, #loc266])
#loc533 = loc(fused[#loc269, #loc270])
#loc534 = loc(fused[#loc271, #loc272])
#loc535 = loc(fused[#loc273, #loc270])
#loc536 = loc(fused[#loc274, #loc275])
#loc537 = loc(fused[#loc276, #loc277])
#loc538 = loc(fused[#loc278, #loc279])
#loc539 = loc(fused[#loc280, #loc281])
#loc540 = loc(fused[#loc282, #loc283])
#loc541 = loc(fused[#loc284, #loc285])
#loc542 = loc(fused[#loc286, #loc287])
#loc543 = loc(fused[#loc292, #loc293])
#loc544 = loc(fused[#loc294, #loc295])
#loc545 = loc(fused[#loc296, #loc297])
#loc546 = loc(fused[#loc298, #loc295])
#loc547 = loc(fused[#loc300, #loc301])
#loc548 = loc(fused[#loc303, #loc304])
#loc549 = loc(fused[#loc305, #loc306])
#loc550 = loc(fused[#loc308, #loc307])
#loc551 = loc(fused[#loc311, #loc312])
#loc552 = loc(fused[#loc315, #loc316])
#loc553 = loc(fused[#loc317, #loc318])
#loc554 = loc(fused[#loc320, #loc321])
#loc555 = loc(fused[#loc322, #loc323])
#loc556 = loc(fused[#loc324, #loc325])
#loc557 = loc(fused[#loc326, #loc318])
#loc558 = loc(fused[#loc330, #loc331])
#loc559 = loc(fused[#loc334, #loc335])
#loc560 = loc(fused[#loc336, #loc337])
#loc561 = loc(fused[#loc338, #loc339])
#loc562 = loc(fused[#loc341, #loc342])
#loc563 = loc(fused[#loc343, #loc337])
#loc564 = loc(fused[#loc347, #loc345])
#loc565 = loc(fused[#loc350, #loc351])
#loc566 = loc(fused[#loc353, #loc354])
#loc567 = loc(fused[#loc355, #loc356])
#loc568 = loc(fused[#loc357, #loc354])
#loc569 = loc(fused[#loc360, #loc361])
#loc570 = loc(fused[#loc362, #loc363])
#loc571 = loc(fused[#loc364, #loc361])
#loc572 = loc(fused[#loc365, #loc366])
#loc573 = loc(fused[#loc367, #loc368])
#loc574 = loc(fused[#loc369, #loc370, #loc371, #loc366])
#loc575 = loc(fused[#loc372, #loc373])
#loc576 = loc(fused[#loc377, #loc378])
#loc577 = loc(fused[#loc379, #loc380])
#loc578 = loc(fused[#loc383, #loc381])
#loc579 = loc(fused[#loc384, #loc385])
#loc580 = loc(fused[#loc386, #loc387])
#loc581 = loc(fused[#loc388, #loc389, #loc390, #loc385])
#loc582 = loc(fused[#loc394, #loc393])
#loc583 = loc(fused[#loc395, #loc396])
#loc584 = loc(fused[#loc397, #loc398])
#loc585 = loc(fused[#loc399, #loc396])
#loc586 = loc(fused[#loc400, #loc401])
#loc587 = loc(fused[#loc403, #loc404])
#loc588 = loc(fused[#loc405, #loc406])
#loc589 = loc(fused[#loc409, #loc407])
#loc590 = loc(fused[#loc410, #loc411])
#loc591 = loc(fused[#loc412, #loc413])
#loc592 = loc(fused[#loc414, #loc411])
#loc593 = loc(fused[#loc416, #loc415])
#loc594 = loc(fused[#loc417, #loc418])
#loc595 = loc(fused[#loc419, #loc420])
#loc596 = loc(fused[#loc421, #loc418])
#loc597 = loc(fused[#loc422, #loc423])
