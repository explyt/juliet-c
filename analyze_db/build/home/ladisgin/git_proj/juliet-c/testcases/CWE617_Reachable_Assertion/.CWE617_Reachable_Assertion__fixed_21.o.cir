!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE617_Reachable_Assertion__fixed_21.c":28:22)
#loc6 = loc("CWE617_Reachable_Assertion__fixed_21.c":28:26)
#loc46 = loc("CWE617_Reachable_Assertion__fixed_21.c":58:27)
#loc47 = loc("CWE617_Reachable_Assertion__fixed_21.c":58:31)
#loc79 = loc("CWE617_Reachable_Assertion__fixed_21.c":85:27)
#loc80 = loc("CWE617_Reachable_Assertion__fixed_21.c":85:31)
#loc107 = loc(fused[#loc5, #loc6])
#loc124 = loc(fused[#loc46, #loc47])
#loc136 = loc(fused[#loc79, #loc80])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc105)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc5, #loc6])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc107)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    cir.br ^bb1 loc(#loc108)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc105)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc10)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc109)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<5> : !s32i loc(#loc12)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc12)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    cir.br ^bb3 loc(#loc9)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc9)
  ^bb4:  // pred: ^bb3
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc15)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc111)
    cir.return %9 : !s32i loc(#loc111)
  } loc(#loc106)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr1) loc(#loc112)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc19)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__fixed_21.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc19)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__fixed_21_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc19)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc114)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc25)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc105)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    %6 = cir.call @badSource(%5) : (!s32i) -> !s32i loc(#loc30)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc19)
    cir.br ^bb1 loc(#loc19)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc19)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc19)
    %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc19)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc19)
  ^bb3:  // pred: ^bb2
    cir.br ^bb5 loc(#loc19)
  ^bb4:  // pred: ^bb2
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc19)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc19)
    %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc19)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc19)
    %15 = cir.const #cir.int<46> : !s32i loc(#loc19)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc19)
    %17 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc19)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc19)
    cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr1) loc(#loc19)
    cir.br ^bb5 loc(#loc19)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc19)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc19)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc21)
  } loc(#loc113)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc119)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc120)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc118)
  cir.global "private" internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc121)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc122)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc43)
  cir.func internal private @goodG2B1Source(%arg0: !s32i loc(fused[#loc46, #loc47])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc124)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc45)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc48)
    cir.br ^bb1 loc(#loc125)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc121)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc51)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc126)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    cir.br ^bb4 loc(#loc53)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<5> : !s32i loc(#loc56)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc56)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    cir.br ^bb4 loc(#loc50)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc50)
  ^bb5:  // pred: ^bb4
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc128)
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    cir.return %11 : !s32i loc(#loc128)
  } loc(#loc123)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc61)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc130)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc66)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc67)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc69)
    %4 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc121)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    %6 = cir.call @goodG2B1Source(%5) : (!s32i) -> !s32i loc(#loc72)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc133)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc61)
    cir.br ^bb1 loc(#loc61)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc61)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc61)
    %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc61)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc61)
  ^bb3:  // pred: ^bb2
    cir.br ^bb5 loc(#loc61)
  ^bb4:  // pred: ^bb2
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc61)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc61)
    %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc61)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc61)
    %15 = cir.const #cir.int<81> : !s32i loc(#loc61)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc61)
    %17 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc61)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr1) loc(#loc61)
    cir.br ^bb5 loc(#loc61)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc61)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc61)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc63)
  } loc(#loc129)
  cir.global "private" internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc134)
  cir.func internal private @goodG2B2Source(%arg0: !s32i loc(fused[#loc79, #loc80])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc136)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc78)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    cir.br ^bb1 loc(#loc137)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc134)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc84)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc138)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<5> : !s32i loc(#loc86)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc86)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    cir.br ^bb3 loc(#loc83)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc83)
  ^bb4:  // pred: ^bb3
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc140)
    cir.return %9 : !s32i loc(#loc140)
  } loc(#loc135)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc91)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc142)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc96)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc97)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc143)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc99)
    %4 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc134)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    %6 = cir.call @goodG2B2Source(%5) : (!s32i) -> !s32i loc(#loc102)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc91)
    cir.br ^bb1 loc(#loc91)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc91)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc91)
    %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc91)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc91)
  ^bb3:  // pred: ^bb2
    cir.br ^bb5 loc(#loc91)
  ^bb4:  // pred: ^bb2
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc91)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc91)
    %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc91)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc91)
    %15 = cir.const #cir.int<103> : !s32i loc(#loc91)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc91)
    %17 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc91)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr1) loc(#loc91)
    cir.br ^bb5 loc(#loc91)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc91)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc91)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc93)
  } loc(#loc141)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_21.c":0:0)
#loc1 = loc("CWE617_Reachable_Assertion__fixed_21.c":26:1)
#loc2 = loc("CWE617_Reachable_Assertion__fixed_21.c":26:24)
#loc3 = loc("CWE617_Reachable_Assertion__fixed_21.c":28:1)
#loc4 = loc("CWE617_Reachable_Assertion__fixed_21.c":36:1)
#loc7 = loc("CWE617_Reachable_Assertion__fixed_21.c":29:1)
#loc8 = loc("CWE617_Reachable_Assertion__fixed_21.c":30:5)
#loc9 = loc("CWE617_Reachable_Assertion__fixed_21.c":34:5)
#loc10 = loc("CWE617_Reachable_Assertion__fixed_21.c":30:8)
#loc11 = loc("CWE617_Reachable_Assertion__fixed_21.c":31:5)
#loc12 = loc("CWE617_Reachable_Assertion__fixed_21.c":33:16)
#loc13 = loc("CWE617_Reachable_Assertion__fixed_21.c":33:29)
#loc14 = loc("CWE617_Reachable_Assertion__fixed_21.c":33:9)
#loc15 = loc("CWE617_Reachable_Assertion__fixed_21.c":35:12)
#loc16 = loc("CWE617_Reachable_Assertion__fixed_21.c":35:5)
#loc17 = loc("/usr/include/assert.h":67:1)
#loc18 = loc("/usr/include/assert.h":69:43)
#loc19 = loc("CWE617_Reachable_Assertion__fixed_21.c":46:5)
#loc20 = loc("CWE617_Reachable_Assertion__fixed_21.c":38:1)
#loc21 = loc("CWE617_Reachable_Assertion__fixed_21.c":47:1)
#loc22 = loc("CWE617_Reachable_Assertion__fixed_21.c":40:5)
#loc23 = loc("CWE617_Reachable_Assertion__fixed_21.c":40:9)
#loc24 = loc("CWE617_Reachable_Assertion__fixed_21.c":42:13)
#loc25 = loc("CWE617_Reachable_Assertion__fixed_21.c":42:12)
#loc26 = loc("CWE617_Reachable_Assertion__fixed_21.c":42:5)
#loc27 = loc("CWE617_Reachable_Assertion__fixed_21.c":43:17)
#loc28 = loc("CWE617_Reachable_Assertion__fixed_21.c":43:5)
#loc29 = loc("CWE617_Reachable_Assertion__fixed_21.c":44:22)
#loc30 = loc("CWE617_Reachable_Assertion__fixed_21.c":44:12)
#loc31 = loc("CWE617_Reachable_Assertion__fixed_21.c":44:5)
#loc32 = loc("CWE617_Reachable_Assertion__fixed_21.c":44:26)
#loc33 = loc("CWE617_Reachable_Assertion__fixed_21.c":106:1)
#loc34 = loc("CWE617_Reachable_Assertion__fixed_21.c":110:1)
#loc35 = loc("CWE617_Reachable_Assertion__fixed_21.c":108:5)
#loc36 = loc("CWE617_Reachable_Assertion__fixed_21.c":108:14)
#loc37 = loc("CWE617_Reachable_Assertion__fixed_21.c":109:5)
#loc38 = loc("CWE617_Reachable_Assertion__fixed_21.c":109:14)
#loc39 = loc("CWE617_Reachable_Assertion__fixed_21.c":54:1)
#loc40 = loc("CWE617_Reachable_Assertion__fixed_21.c":54:29)
#loc41 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE617_Reachable_Assertion__fixed_21.c":63:19)
#loc44 = loc("CWE617_Reachable_Assertion__fixed_21.c":58:1)
#loc45 = loc("CWE617_Reachable_Assertion__fixed_21.c":71:1)
#loc48 = loc("CWE617_Reachable_Assertion__fixed_21.c":59:1)
#loc49 = loc("CWE617_Reachable_Assertion__fixed_21.c":60:5)
#loc50 = loc("CWE617_Reachable_Assertion__fixed_21.c":69:5)
#loc51 = loc("CWE617_Reachable_Assertion__fixed_21.c":60:8)
#loc52 = loc("CWE617_Reachable_Assertion__fixed_21.c":61:5)
#loc53 = loc("CWE617_Reachable_Assertion__fixed_21.c":64:5)
#loc54 = loc("CWE617_Reachable_Assertion__fixed_21.c":66:5)
#loc55 = loc("CWE617_Reachable_Assertion__fixed_21.c":63:9)
#loc56 = loc("CWE617_Reachable_Assertion__fixed_21.c":68:16)
#loc57 = loc("CWE617_Reachable_Assertion__fixed_21.c":68:29)
#loc58 = loc("CWE617_Reachable_Assertion__fixed_21.c":68:9)
#loc59 = loc("CWE617_Reachable_Assertion__fixed_21.c":70:12)
#loc60 = loc("CWE617_Reachable_Assertion__fixed_21.c":70:5)
#loc61 = loc("CWE617_Reachable_Assertion__fixed_21.c":81:5)
#loc62 = loc("CWE617_Reachable_Assertion__fixed_21.c":73:1)
#loc63 = loc("CWE617_Reachable_Assertion__fixed_21.c":82:1)
#loc64 = loc("CWE617_Reachable_Assertion__fixed_21.c":75:5)
#loc65 = loc("CWE617_Reachable_Assertion__fixed_21.c":75:9)
#loc66 = loc("CWE617_Reachable_Assertion__fixed_21.c":77:13)
#loc67 = loc("CWE617_Reachable_Assertion__fixed_21.c":77:12)
#loc68 = loc("CWE617_Reachable_Assertion__fixed_21.c":77:5)
#loc69 = loc("CWE617_Reachable_Assertion__fixed_21.c":78:22)
#loc70 = loc("CWE617_Reachable_Assertion__fixed_21.c":78:5)
#loc71 = loc("CWE617_Reachable_Assertion__fixed_21.c":79:27)
#loc72 = loc("CWE617_Reachable_Assertion__fixed_21.c":79:12)
#loc73 = loc("CWE617_Reachable_Assertion__fixed_21.c":79:5)
#loc74 = loc("CWE617_Reachable_Assertion__fixed_21.c":79:31)
#loc75 = loc("CWE617_Reachable_Assertion__fixed_21.c":55:1)
#loc76 = loc("CWE617_Reachable_Assertion__fixed_21.c":55:29)
#loc77 = loc("CWE617_Reachable_Assertion__fixed_21.c":85:1)
#loc78 = loc("CWE617_Reachable_Assertion__fixed_21.c":93:1)
#loc81 = loc("CWE617_Reachable_Assertion__fixed_21.c":86:1)
#loc82 = loc("CWE617_Reachable_Assertion__fixed_21.c":87:5)
#loc83 = loc("CWE617_Reachable_Assertion__fixed_21.c":91:5)
#loc84 = loc("CWE617_Reachable_Assertion__fixed_21.c":87:8)
#loc85 = loc("CWE617_Reachable_Assertion__fixed_21.c":88:5)
#loc86 = loc("CWE617_Reachable_Assertion__fixed_21.c":90:16)
#loc87 = loc("CWE617_Reachable_Assertion__fixed_21.c":90:29)
#loc88 = loc("CWE617_Reachable_Assertion__fixed_21.c":90:9)
#loc89 = loc("CWE617_Reachable_Assertion__fixed_21.c":92:12)
#loc90 = loc("CWE617_Reachable_Assertion__fixed_21.c":92:5)
#loc91 = loc("CWE617_Reachable_Assertion__fixed_21.c":103:5)
#loc92 = loc("CWE617_Reachable_Assertion__fixed_21.c":95:1)
#loc93 = loc("CWE617_Reachable_Assertion__fixed_21.c":104:1)
#loc94 = loc("CWE617_Reachable_Assertion__fixed_21.c":97:5)
#loc95 = loc("CWE617_Reachable_Assertion__fixed_21.c":97:9)
#loc96 = loc("CWE617_Reachable_Assertion__fixed_21.c":99:13)
#loc97 = loc("CWE617_Reachable_Assertion__fixed_21.c":99:12)
#loc98 = loc("CWE617_Reachable_Assertion__fixed_21.c":99:5)
#loc99 = loc("CWE617_Reachable_Assertion__fixed_21.c":100:22)
#loc100 = loc("CWE617_Reachable_Assertion__fixed_21.c":100:5)
#loc101 = loc("CWE617_Reachable_Assertion__fixed_21.c":101:27)
#loc102 = loc("CWE617_Reachable_Assertion__fixed_21.c":101:12)
#loc103 = loc("CWE617_Reachable_Assertion__fixed_21.c":101:5)
#loc104 = loc("CWE617_Reachable_Assertion__fixed_21.c":101:31)
#loc105 = loc(fused[#loc1, #loc2])
#loc106 = loc(fused[#loc3, #loc4])
#loc108 = loc(fused[#loc8, #loc9])
#loc109 = loc(fused[#loc11, #loc9])
#loc110 = loc(fused[#loc14, #loc13])
#loc111 = loc(fused[#loc16, #loc15])
#loc112 = loc(fused[#loc17, #loc18])
#loc113 = loc(fused[#loc20, #loc21])
#loc114 = loc(fused[#loc22, #loc23])
#loc115 = loc(fused[#loc26, #loc24])
#loc116 = loc(fused[#loc28, #loc27])
#loc117 = loc(fused[#loc31, #loc32])
#loc118 = loc(fused[#loc33, #loc34])
#loc119 = loc(fused[#loc35, #loc36])
#loc120 = loc(fused[#loc37, #loc38])
#loc121 = loc(fused[#loc39, #loc40])
#loc122 = loc(fused[#loc41, #loc42])
#loc123 = loc(fused[#loc44, #loc45])
#loc125 = loc(fused[#loc49, #loc50])
#loc126 = loc(fused[#loc52, #loc53, #loc54, #loc50])
#loc127 = loc(fused[#loc58, #loc57])
#loc128 = loc(fused[#loc60, #loc59])
#loc129 = loc(fused[#loc62, #loc63])
#loc130 = loc(fused[#loc64, #loc65])
#loc131 = loc(fused[#loc68, #loc66])
#loc132 = loc(fused[#loc70, #loc69])
#loc133 = loc(fused[#loc73, #loc74])
#loc134 = loc(fused[#loc75, #loc76])
#loc135 = loc(fused[#loc77, #loc78])
#loc137 = loc(fused[#loc82, #loc83])
#loc138 = loc(fused[#loc85, #loc83])
#loc139 = loc(fused[#loc88, #loc87])
#loc140 = loc(fused[#loc90, #loc89])
#loc141 = loc(fused[#loc92, #loc93])
#loc142 = loc(fused[#loc94, #loc95])
#loc143 = loc(fused[#loc98, #loc96])
#loc144 = loc(fused[#loc100, #loc99])
#loc145 = loc(fused[#loc103, #loc104])
