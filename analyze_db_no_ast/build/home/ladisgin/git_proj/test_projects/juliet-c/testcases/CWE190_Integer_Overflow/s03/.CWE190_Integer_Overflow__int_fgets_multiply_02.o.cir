!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc245)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc246)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc247)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc248)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @printIntLine(!s32i) loc(#loc249)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_multiply_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc251)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc20)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc20)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc256)
          %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc256)
          cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc256)
          cir.scope {
            %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc28)
            %7 = cir.const #cir.int<3> : !s32i loc(#loc29)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc29)
            %9 = cir.const #cir.int<4> : !u64i loc(#loc29)
            %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc29)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc29)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc29)
            %13 = cir.binop(add, %10, %12) : !u64i loc(#loc29)
            %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc29)
            %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc246)
            %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc30)
            %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc31)
            %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc32)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
            %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !s32i loc(#loc258)
            %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc33)
            cir.if %21 {
              %22 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc37)
              %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc38)
              cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc260)
            } else {
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc41)
            } loc(#loc259)
          } loc(#loc257)
        } loc(#loc255)
      } loc(#loc254)
    } loc(#loc253)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc44)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc44)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc49)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc264)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc50)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc266)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc53)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc54)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc266)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc55)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc56)
          } loc(#loc265)
        } loc(#loc263)
      } loc(#loc262)
    } loc(#loc261)
    cir.return loc(#loc13)
  } loc(#loc250)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_multiply_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc268)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc269)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc270)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc271)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    cir.return loc(#loc58)
  } loc(#loc267)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc67)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc68)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc273)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc73)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc274)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc77)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc77)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc278)
          %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc278)
          cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc278)
          cir.scope {
            %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc85)
            %7 = cir.const #cir.int<3> : !s32i loc(#loc86)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc86)
            %9 = cir.const #cir.int<4> : !u64i loc(#loc86)
            %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc86)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc86)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc86)
            %13 = cir.binop(add, %10, %12) : !u64i loc(#loc86)
            %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc86)
            %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc246)
            %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc87)
            %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc88)
            %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc89)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc89)
            %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !s32i loc(#loc280)
            %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc90)
            cir.if %21 {
              %22 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc94)
              %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc95)
              cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc282)
            } else {
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc98)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc98)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc99)
            } loc(#loc281)
          } loc(#loc279)
        } loc(#loc277)
      } loc(#loc276)
    } loc(#loc275)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc102)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc102)
      cir.if %3 {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc67)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc67)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc106)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc110)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc286)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc111)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc115)
              %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc116)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc117)
              %11 = cir.binop(div, %9, %10) : !s32i loc(#loc289)
              %12 = cir.cmp(lt, %8, %11) : !s32i, !s32i loc(#loc290)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc119)
              cir.if %13 {
                %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc292)
                %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
                %16 = cir.const #cir.int<2> : !s32i loc(#loc124)
                %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc125)
                cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc292)
                %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc126)
                cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc127)
              } else {
                %14 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc68)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc68)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc128)
              } loc(#loc291)
            } loc(#loc288)
          } loc(#loc287)
        } loc(#loc285)
      } loc(#loc284)
    } loc(#loc283)
    cir.return loc(#loc70)
  } loc(#loc272)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc294)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc133)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc295)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc137)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc137)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc299)
          %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc299)
          cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc299)
          cir.scope {
            %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc145)
            %7 = cir.const #cir.int<3> : !s32i loc(#loc146)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc146)
            %9 = cir.const #cir.int<4> : !u64i loc(#loc146)
            %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc146)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc146)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc146)
            %13 = cir.binop(add, %10, %12) : !u64i loc(#loc146)
            %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc146)
            %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc246)
            %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc147)
            %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc148)
            %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc149)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc149)
            %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !s32i loc(#loc301)
            %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc150)
            cir.if %21 {
              %22 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc154)
              %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc155)
              cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc303)
            } else {
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc158)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc158)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc159)
            } loc(#loc302)
          } loc(#loc300)
        } loc(#loc298)
      } loc(#loc297)
    } loc(#loc296)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc162)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc162)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc166)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc167)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc307)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc168)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc172)
              %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc173)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc174)
              %11 = cir.binop(div, %9, %10) : !s32i loc(#loc310)
              %12 = cir.cmp(lt, %8, %11) : !s32i, !s32i loc(#loc311)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc176)
              cir.if %13 {
                %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc313)
                %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc182)
                %16 = cir.const #cir.int<2> : !s32i loc(#loc181)
                %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc182)
                cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc313)
                %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc183)
                cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc184)
              } else {
                %14 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc185)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc185)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc186)
              } loc(#loc312)
            } loc(#loc309)
          } loc(#loc308)
        } loc(#loc306)
      } loc(#loc305)
    } loc(#loc304)
    cir.return loc(#loc130)
  } loc(#loc293)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc315)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc191)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc316)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc195)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc195)
      cir.if %3 {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc199)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc199)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc200)
      } else {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc201)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc319)
      } loc(#loc318)
    } loc(#loc317)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc205)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc205)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc209)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc210)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc323)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc211)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc325)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc215)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc214)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc215)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc325)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc216)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc217)
          } loc(#loc324)
        } loc(#loc322)
      } loc(#loc321)
    } loc(#loc320)
    cir.return loc(#loc188)
  } loc(#loc314)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc327)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc222)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc328)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc226)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc226)
      cir.if %3 {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc228)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc331)
      } loc(#loc330)
    } loc(#loc329)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc232)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc232)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc236)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc237)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc335)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc238)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc337)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc242)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc241)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc242)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc337)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc243)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc244)
          } loc(#loc336)
        } loc(#loc334)
      } loc(#loc333)
    } loc(#loc332)
    cir.return loc(#loc219)
  } loc(#loc326)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_02.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":41:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":24:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":54:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":26:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":28:12)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":28:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":29:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":44:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":29:8)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":30:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":31:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":43:9)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":32:13)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":32:49)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":34:13)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":42:13)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":34:23)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":34:36)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":34:53)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":34:17)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":34:63)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":34:60)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":35:13)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":38:13)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":40:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":37:29)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":37:24)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":37:17)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":37:40)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":41:17)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":45:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":53:5)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":45:8)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":46:5)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":47:9)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":52:9)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":47:12)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":47:19)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":47:17)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":48:9)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":50:13)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":50:33)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":50:26)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":51:26)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":51:13)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":194:1)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":200:1)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":196:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":196:14)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":197:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":197:14)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":198:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":198:14)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":199:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":199:14)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":85:19)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":99:27)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":61:1)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":103:1)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":63:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":63:9)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":65:12)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":65:5)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":66:5)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":81:5)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":66:8)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":67:5)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":68:9)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":80:9)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":69:13)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":69:49)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":71:13)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":79:13)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":71:23)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":71:36)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":71:53)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":71:17)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":71:63)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":71:60)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":72:13)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":75:13)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":77:13)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":74:29)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":74:24)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":74:17)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":74:40)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":78:27)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":78:17)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":82:5)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":102:5)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":82:8)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":83:5)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":86:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":88:5)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":85:9)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":89:9)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":101:9)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":89:12)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":89:19)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":89:17)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":90:9)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":92:13)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":100:13)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":92:17)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":92:25)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":92:33)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":92:34)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":92:22)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":93:13)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":96:13)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":98:13)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":94:17)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":94:37)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":94:30)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":95:30)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":95:17)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":99:17)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":106:1)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":143:1)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":108:5)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":108:9)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":110:12)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":110:5)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":111:5)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":126:5)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":111:8)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":112:5)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":113:9)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":125:9)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":114:13)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":114:49)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":116:13)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":124:13)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":116:23)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":116:36)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":116:53)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":116:17)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":116:63)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":116:60)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":117:13)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":120:13)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":122:13)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":119:29)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":119:24)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":119:17)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":119:40)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":123:27)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":123:17)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":127:5)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":142:5)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":127:8)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":128:5)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":129:9)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":141:9)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":129:12)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":129:19)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":129:17)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":130:9)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":132:13)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":140:13)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":132:17)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":132:25)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":132:33)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":132:34)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":132:22)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":133:13)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":136:13)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":138:13)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":134:17)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":134:37)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":134:30)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":135:30)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":135:17)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":139:27)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":139:17)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":146:1)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":170:1)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":148:5)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":148:9)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":150:12)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":150:5)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":151:5)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":160:5)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":151:8)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":152:5)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":155:5)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":157:5)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":154:19)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":154:9)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":159:16)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":159:9)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":161:5)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":169:5)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":161:8)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":162:5)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":163:9)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":168:9)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":163:12)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":163:19)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":163:17)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":164:9)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":166:13)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":166:33)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":166:26)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":167:26)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":167:13)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":173:1)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":192:1)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":175:5)
#loc221 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":175:9)
#loc222 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":177:12)
#loc223 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":177:5)
#loc224 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":178:5)
#loc225 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":182:5)
#loc226 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":178:8)
#loc227 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":179:5)
#loc228 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":181:16)
#loc229 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":181:9)
#loc230 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":183:5)
#loc231 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":191:5)
#loc232 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":183:8)
#loc233 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":184:5)
#loc234 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":185:9)
#loc235 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":190:9)
#loc236 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":185:12)
#loc237 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":185:19)
#loc238 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":185:17)
#loc239 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":186:9)
#loc240 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":188:13)
#loc241 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":188:33)
#loc242 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":188:26)
#loc243 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":189:26)
#loc244 = loc("CWE190_Integer_Overflow__int_fgets_multiply_02.c":189:13)
#loc245 = loc(fused[#loc1, #loc2])
#loc246 = loc(fused[#loc3, #loc4])
#loc247 = loc(fused[#loc5, #loc6])
#loc248 = loc(fused[#loc7, #loc8])
#loc249 = loc(fused[#loc10, #loc11])
#loc250 = loc(fused[#loc12, #loc13])
#loc251 = loc(fused[#loc14, #loc15])
#loc252 = loc(fused[#loc17, #loc16])
#loc253 = loc(fused[#loc18, #loc19])
#loc254 = loc(fused[#loc21, #loc19])
#loc255 = loc(fused[#loc22, #loc23])
#loc256 = loc(fused[#loc24, #loc25])
#loc257 = loc(fused[#loc26, #loc27])
#loc258 = loc(fused[#loc31, #loc32])
#loc259 = loc(fused[#loc34, #loc35, #loc36, #loc27])
#loc260 = loc(fused[#loc39, #loc40])
#loc261 = loc(fused[#loc42, #loc43])
#loc262 = loc(fused[#loc45, #loc43])
#loc263 = loc(fused[#loc46, #loc47])
#loc264 = loc(fused[#loc48, #loc49])
#loc265 = loc(fused[#loc51, #loc47])
#loc266 = loc(fused[#loc52, #loc53])
#loc267 = loc(fused[#loc57, #loc58])
#loc268 = loc(fused[#loc59, #loc60])
#loc269 = loc(fused[#loc61, #loc62])
#loc270 = loc(fused[#loc63, #loc64])
#loc271 = loc(fused[#loc65, #loc66])
#loc272 = loc(fused[#loc69, #loc70])
#loc273 = loc(fused[#loc71, #loc72])
#loc274 = loc(fused[#loc74, #loc73])
#loc275 = loc(fused[#loc75, #loc76])
#loc276 = loc(fused[#loc78, #loc76])
#loc277 = loc(fused[#loc79, #loc80])
#loc278 = loc(fused[#loc81, #loc82])
#loc279 = loc(fused[#loc83, #loc84])
#loc280 = loc(fused[#loc88, #loc89])
#loc281 = loc(fused[#loc91, #loc92, #loc93, #loc84])
#loc282 = loc(fused[#loc96, #loc97])
#loc283 = loc(fused[#loc100, #loc101])
#loc284 = loc(fused[#loc103, #loc104, #loc105, #loc101])
#loc285 = loc(fused[#loc107, #loc108])
#loc286 = loc(fused[#loc109, #loc110])
#loc287 = loc(fused[#loc112, #loc108])
#loc288 = loc(fused[#loc113, #loc114])
#loc289 = loc(fused[#loc116, #loc117])
#loc290 = loc(fused[#loc115, #loc118])
#loc291 = loc(fused[#loc120, #loc121, #loc122, #loc114])
#loc292 = loc(fused[#loc123, #loc124])
#loc293 = loc(fused[#loc129, #loc130])
#loc294 = loc(fused[#loc131, #loc132])
#loc295 = loc(fused[#loc134, #loc133])
#loc296 = loc(fused[#loc135, #loc136])
#loc297 = loc(fused[#loc138, #loc136])
#loc298 = loc(fused[#loc139, #loc140])
#loc299 = loc(fused[#loc141, #loc142])
#loc300 = loc(fused[#loc143, #loc144])
#loc301 = loc(fused[#loc148, #loc149])
#loc302 = loc(fused[#loc151, #loc152, #loc153, #loc144])
#loc303 = loc(fused[#loc156, #loc157])
#loc304 = loc(fused[#loc160, #loc161])
#loc305 = loc(fused[#loc163, #loc161])
#loc306 = loc(fused[#loc164, #loc165])
#loc307 = loc(fused[#loc166, #loc167])
#loc308 = loc(fused[#loc169, #loc165])
#loc309 = loc(fused[#loc170, #loc171])
#loc310 = loc(fused[#loc173, #loc174])
#loc311 = loc(fused[#loc172, #loc175])
#loc312 = loc(fused[#loc177, #loc178, #loc179, #loc171])
#loc313 = loc(fused[#loc180, #loc181])
#loc314 = loc(fused[#loc187, #loc188])
#loc315 = loc(fused[#loc189, #loc190])
#loc316 = loc(fused[#loc192, #loc191])
#loc317 = loc(fused[#loc193, #loc194])
#loc318 = loc(fused[#loc196, #loc197, #loc198, #loc194])
#loc319 = loc(fused[#loc202, #loc201])
#loc320 = loc(fused[#loc203, #loc204])
#loc321 = loc(fused[#loc206, #loc204])
#loc322 = loc(fused[#loc207, #loc208])
#loc323 = loc(fused[#loc209, #loc210])
#loc324 = loc(fused[#loc212, #loc208])
#loc325 = loc(fused[#loc213, #loc214])
#loc326 = loc(fused[#loc218, #loc219])
#loc327 = loc(fused[#loc220, #loc221])
#loc328 = loc(fused[#loc223, #loc222])
#loc329 = loc(fused[#loc224, #loc225])
#loc330 = loc(fused[#loc227, #loc225])
#loc331 = loc(fused[#loc229, #loc228])
#loc332 = loc(fused[#loc230, #loc231])
#loc333 = loc(fused[#loc233, #loc231])
#loc334 = loc(fused[#loc234, #loc235])
#loc335 = loc(fused[#loc236, #loc237])
#loc336 = loc(fused[#loc239, #loc235])
#loc337 = loc(fused[#loc240, #loc241])
