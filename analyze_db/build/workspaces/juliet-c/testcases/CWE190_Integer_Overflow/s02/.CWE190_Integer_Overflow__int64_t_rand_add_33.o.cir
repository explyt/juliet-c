!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":31:21)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":71:21)
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_add_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc81)
  cir.func private @printLongLongLine(!s64i) loc(#loc82)
  cir.func @_ZN44CWE190_Integer_Overflow__int64_t_rand_add_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc84)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc85)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc86)
    %3 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc87)
    cir.store %2, %3 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc14)
    %4 = cir.const #cir.int<0> : !s64i loc(#loc15)
    cir.store %4, %2 : !s64i, !cir.ptr<!s64i> loc(#loc88)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc17)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc17)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc17)
    %11 = cir.const #cir.int<60> : !s32i loc(#loc17)
    %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc17)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc17)
    %15 = cir.const #cir.int<45> : !s32i loc(#loc17)
    %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc17)
    %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc17)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc17)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc17)
    %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc17)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc17)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc17)
    %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc17)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc17)
    %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc17)
    cir.br ^bb3(%30 : !u64i) loc(#loc17)
  ^bb2:  // pred: ^bb0
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc17)
    %33 = cir.const #cir.int<60> : !s32i loc(#loc17)
    %34 = cir.shift(left, %32 : !u64i, %33 : !s32i) -> !u64i loc(#loc17)
    %35 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc17)
    %37 = cir.const #cir.int<45> : !s32i loc(#loc17)
    %38 = cir.shift(left, %36 : !u64i, %37 : !s32i) -> !u64i loc(#loc17)
    %39 = cir.binop(xor, %34, %38) : !u64i loc(#loc17)
    %40 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc17)
    %42 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %43 = cir.shift(left, %41 : !u64i, %42 : !s32i) -> !u64i loc(#loc17)
    %44 = cir.binop(xor, %39, %43) : !u64i loc(#loc17)
    %45 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc17)
    %47 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %48 = cir.shift(left, %46 : !u64i, %47 : !s32i) -> !u64i loc(#loc17)
    %49 = cir.binop(xor, %44, %48) : !u64i loc(#loc17)
    %50 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc17)
    %52 = cir.binop(xor, %49, %51) : !u64i loc(#loc17)
    %53 = cir.unary(minus, %52) : !u64i, !u64i loc(#loc17)
    %54 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %55 = cir.cast(integral, %54 : !s32i), !u64i loc(#loc17)
    %56 = cir.binop(sub, %53, %55) : !u64i loc(#loc17)
    cir.br ^bb3(%56 : !u64i) loc(#loc17)
  ^bb3(%57: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":31:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    %58 = cir.cast(integral, %57 : !u64i), !s64i loc(#loc17)
    cir.store %58, %2 : !s64i, !cir.ptr<!s64i> loc(#loc89)
    cir.br ^bb5 loc(#loc90)
  ^bb5:  // pred: ^bb4
    %59 = cir.load %3 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc8)
    %60 = cir.load %59 : !cir.ptr<!s64i>, !s64i loc(#loc8)
    cir.store %60, %0 : !s64i, !cir.ptr<!s64i> loc(#loc84)
    cir.br ^bb6 loc(#loc91)
  ^bb6:  // pred: ^bb5
    %61 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc23)
    %62 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %63 = cir.cast(integral, %62 : !s32i), !s64i loc(#loc10)
    %64 = cir.binop(add, %61, %63) nsw : !s64i loc(#loc23)
    cir.store %64, %1 : !s64i, !cir.ptr<!s64i> loc(#loc85)
    %65 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc24)
    cir.call @printLongLongLine(%65) : (!s64i) -> () loc(#loc25)
    cir.br ^bb7 loc(#loc22)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc6)
  } loc(#loc83)
  cir.func internal private @_ZN44CWE190_Integer_Overflow__int64_t_rand_add_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc93)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc94)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc95)
    %3 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc96)
    cir.store %2, %3 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc35)
    %4 = cir.const #cir.int<0> : !s64i loc(#loc36)
    cir.store %4, %2 : !s64i, !cir.ptr<!s64i> loc(#loc97)
    %5 = cir.const #cir.int<2> : !s32i loc(#loc38)
    %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc38)
    cir.store %6, %2 : !s64i, !cir.ptr<!s64i> loc(#loc98)
    cir.br ^bb1 loc(#loc99)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %3 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc29)
    %8 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc29)
    cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc93)
    cir.br ^bb2 loc(#loc100)
  ^bb2:  // pred: ^bb1
    %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc44)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc31)
    %12 = cir.binop(add, %9, %11) nsw : !s64i loc(#loc44)
    cir.store %12, %1 : !s64i, !cir.ptr<!s64i> loc(#loc94)
    %13 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc45)
    cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc46)
    cir.br ^bb3 loc(#loc43)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc41)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc27)
  } loc(#loc92)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc49)
  cir.func internal private @_ZN44CWE190_Integer_Overflow__int64_t_rand_add_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc103)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc104)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc105)
    %3 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc106)
    cir.store %2, %3 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc59)
    %4 = cir.const #cir.int<0> : !s64i loc(#loc60)
    cir.store %4, %2 : !s64i, !cir.ptr<!s64i> loc(#loc107)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc62)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc62)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc62)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc62)
    %11 = cir.const #cir.int<60> : !s32i loc(#loc62)
    %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc62)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc62)
    %15 = cir.const #cir.int<45> : !s32i loc(#loc62)
    %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc62)
    %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc62)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc62)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc62)
    %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc62)
    %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc62)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc62)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc62)
    %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc62)
    %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc62)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc62)
    %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc62)
    cir.br ^bb3(%30 : !u64i) loc(#loc62)
  ^bb2:  // pred: ^bb0
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc62)
    %33 = cir.const #cir.int<60> : !s32i loc(#loc62)
    %34 = cir.shift(left, %32 : !u64i, %33 : !s32i) -> !u64i loc(#loc62)
    %35 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc62)
    %37 = cir.const #cir.int<45> : !s32i loc(#loc62)
    %38 = cir.shift(left, %36 : !u64i, %37 : !s32i) -> !u64i loc(#loc62)
    %39 = cir.binop(xor, %34, %38) : !u64i loc(#loc62)
    %40 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc62)
    %42 = cir.const #cir.int<30> : !s32i loc(#loc62)
    %43 = cir.shift(left, %41 : !u64i, %42 : !s32i) -> !u64i loc(#loc62)
    %44 = cir.binop(xor, %39, %43) : !u64i loc(#loc62)
    %45 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc62)
    %47 = cir.const #cir.int<15> : !s32i loc(#loc62)
    %48 = cir.shift(left, %46 : !u64i, %47 : !s32i) -> !u64i loc(#loc62)
    %49 = cir.binop(xor, %44, %48) : !u64i loc(#loc62)
    %50 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc62)
    %52 = cir.binop(xor, %49, %51) : !u64i loc(#loc62)
    %53 = cir.unary(minus, %52) : !u64i, !u64i loc(#loc62)
    %54 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %55 = cir.cast(integral, %54 : !s32i), !u64i loc(#loc62)
    %56 = cir.binop(sub, %53, %55) : !u64i loc(#loc62)
    cir.br ^bb3(%56 : !u64i) loc(#loc62)
  ^bb3(%57: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":71:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc62)
  ^bb4:  // pred: ^bb3
    %58 = cir.cast(integral, %57 : !u64i), !s64i loc(#loc62)
    cir.store %58, %2 : !s64i, !cir.ptr<!s64i> loc(#loc108)
    cir.br ^bb5 loc(#loc109)
  ^bb5:  // pred: ^bb4
    %59 = cir.load %3 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc53)
    %60 = cir.load %59 : !cir.ptr<!s64i>, !s64i loc(#loc53)
    cir.store %60, %0 : !s64i, !cir.ptr<!s64i> loc(#loc103)
    cir.br ^bb6 loc(#loc110)
  ^bb6:  // pred: ^bb5
    %61 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc68)
    %62 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc69)
    %63 = cir.cmp(lt, %61, %62) : !s64i, !cir.bool loc(#loc111)
    cir.brcond %63 ^bb7, ^bb8 loc(#loc112)
  ^bb7:  // pred: ^bb6
    %64 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc73)
    %65 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %66 = cir.cast(integral, %65 : !s32i), !s64i loc(#loc55)
    %67 = cir.binop(add, %64, %66) nsw : !s64i loc(#loc73)
    cir.store %67, %1 : !s64i, !cir.ptr<!s64i> loc(#loc104)
    %68 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc74)
    cir.call @printLongLongLine(%68) : (!s64i) -> () loc(#loc75)
    cir.br ^bb9 loc(#loc71)
  ^bb8:  // pred: ^bb6
    %69 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc49)
    %70 = cir.cast(array_to_ptrdecay, %69 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%70) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    cir.br ^bb9 loc(#loc67)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc67)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc65)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc51)
  } loc(#loc102)
  cir.func @_ZN44CWE190_Integer_Overflow__int64_t_rand_add_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN44CWE190_Integer_Overflow__int64_t_rand_add_33L7goodG2BEv() : () -> () loc(#loc79)
    cir.call @_ZN44CWE190_Integer_Overflow__int64_t_rand_add_33L7goodB2GEv() : () -> () loc(#loc80)
    cir.return loc(#loc78)
  } loc(#loc113)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":25:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":40:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":33:9)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":33:24)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":36:13)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":36:37)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":27:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":27:13)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":28:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":28:24)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":29:12)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":29:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":31:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":32:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":39:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":34:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":38:9)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":36:30)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":37:31)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":37:13)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":47:1)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":62:1)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":55:9)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":55:24)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":58:13)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":58:37)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":49:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":49:13)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":50:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":50:24)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":51:12)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":51:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":53:12)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":53:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":54:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":61:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":56:9)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":60:9)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":58:30)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":59:31)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":59:13)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":82:23)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":65:1)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":85:1)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":73:9)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":73:24)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":77:13)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":77:37)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":67:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":67:13)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":68:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":68:24)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":69:12)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":69:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":71:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":72:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":84:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":75:9)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":83:9)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":75:13)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":75:20)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":76:9)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":79:9)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":81:9)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":77:30)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":78:31)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":78:13)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":82:13)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":87:1)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":91:1)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":89:5)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_add_33.cpp":90:5)
#loc81 = loc(fused[#loc1, #loc2])
#loc82 = loc(fused[#loc3, #loc4])
#loc83 = loc(fused[#loc5, #loc6])
#loc84 = loc(fused[#loc7, #loc8])
#loc85 = loc(fused[#loc9, #loc10])
#loc86 = loc(fused[#loc11, #loc12])
#loc87 = loc(fused[#loc13, #loc14])
#loc88 = loc(fused[#loc16, #loc15])
#loc89 = loc(fused[#loc18, #loc17])
#loc90 = loc(fused[#loc19, #loc20])
#loc91 = loc(fused[#loc21, #loc22])
#loc92 = loc(fused[#loc26, #loc27])
#loc93 = loc(fused[#loc28, #loc29])
#loc94 = loc(fused[#loc30, #loc31])
#loc95 = loc(fused[#loc32, #loc33])
#loc96 = loc(fused[#loc34, #loc35])
#loc97 = loc(fused[#loc37, #loc36])
#loc98 = loc(fused[#loc39, #loc38])
#loc99 = loc(fused[#loc40, #loc41])
#loc100 = loc(fused[#loc42, #loc43])
#loc101 = loc(fused[#loc47, #loc48])
#loc102 = loc(fused[#loc50, #loc51])
#loc103 = loc(fused[#loc52, #loc53])
#loc104 = loc(fused[#loc54, #loc55])
#loc105 = loc(fused[#loc56, #loc57])
#loc106 = loc(fused[#loc58, #loc59])
#loc107 = loc(fused[#loc61, #loc60])
#loc108 = loc(fused[#loc63, #loc62])
#loc109 = loc(fused[#loc64, #loc65])
#loc110 = loc(fused[#loc66, #loc67])
#loc111 = loc(fused[#loc68, #loc69])
#loc112 = loc(fused[#loc70, #loc71, #loc72, #loc67])
#loc113 = loc(fused[#loc77, #loc78])
