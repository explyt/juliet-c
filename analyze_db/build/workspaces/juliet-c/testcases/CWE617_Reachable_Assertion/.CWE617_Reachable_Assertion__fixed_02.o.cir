!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__fixed_02.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__fixed_02_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc62)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc9)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    cir.scope {
      %4 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
      cir.if %5 {
        %6 = cir.const #cir.int<5> : !s32i loc(#loc15)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc16)
        %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc15)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc66)
      } loc(#loc65)
    } loc(#loc64)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc3)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc3)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc3)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc3)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc3)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc3)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc3)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc3)
          %11 = cir.const #cir.int<36> : !s32i loc(#loc3)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc3)
          %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc3)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc3)
        } loc(#loc3)
      } loc(#loc3)
    } loc(#loc3)
    cir.return loc(#loc5)
  } loc(#loc61)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc68)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc20)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc69)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc22)
    cir.return loc(#loc19)
  } loc(#loc67)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc26)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc27)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc72)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc33)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc73)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc37)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc37)
      cir.if %5 {
        %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc26)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc26)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc41)
      } else {
        %6 = cir.const #cir.int<5> : !s32i loc(#loc42)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc43)
        %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc42)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc76)
      } loc(#loc75)
    } loc(#loc74)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc27)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc27)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc27)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc27)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc27)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc27)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc27)
          %11 = cir.const #cir.int<60> : !s32i loc(#loc27)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc27)
          %13 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc27)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc27)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc27)
        } loc(#loc27)
      } loc(#loc27)
    } loc(#loc27)
    cir.return loc(#loc29)
  } loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc45)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc78)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc51)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    cir.scope {
      %4 = cir.const #cir.int<1> : !s32i loc(#loc55)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc55)
      cir.if %5 {
        %6 = cir.const #cir.int<5> : !s32i loc(#loc57)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc58)
        %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc57)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc82)
      } loc(#loc81)
    } loc(#loc80)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc45)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc45)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc45)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc45)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc45)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc45)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc45)
          %11 = cir.const #cir.int<75> : !s32i loc(#loc45)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc45)
          %13 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc45)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc45)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc45)
        } loc(#loc45)
      } loc(#loc45)
    } loc(#loc45)
    cir.return loc(#loc47)
  } loc(#loc77)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_02.c":0:0)
#loc1 = loc("/usr/include/assert.h":69:1)
#loc2 = loc("/usr/include/assert.h":71:43)
#loc3 = loc("CWE617_Reachable_Assertion__fixed_02.c":36:5)
#loc4 = loc("CWE617_Reachable_Assertion__fixed_02.c":25:1)
#loc5 = loc("CWE617_Reachable_Assertion__fixed_02.c":37:1)
#loc6 = loc("CWE617_Reachable_Assertion__fixed_02.c":27:5)
#loc7 = loc("CWE617_Reachable_Assertion__fixed_02.c":27:9)
#loc8 = loc("CWE617_Reachable_Assertion__fixed_02.c":29:13)
#loc9 = loc("CWE617_Reachable_Assertion__fixed_02.c":29:12)
#loc10 = loc("CWE617_Reachable_Assertion__fixed_02.c":29:5)
#loc11 = loc("CWE617_Reachable_Assertion__fixed_02.c":30:5)
#loc12 = loc("CWE617_Reachable_Assertion__fixed_02.c":34:5)
#loc13 = loc("CWE617_Reachable_Assertion__fixed_02.c":30:8)
#loc14 = loc("CWE617_Reachable_Assertion__fixed_02.c":31:5)
#loc15 = loc("CWE617_Reachable_Assertion__fixed_02.c":33:16)
#loc16 = loc("CWE617_Reachable_Assertion__fixed_02.c":33:29)
#loc17 = loc("CWE617_Reachable_Assertion__fixed_02.c":33:9)
#loc18 = loc("CWE617_Reachable_Assertion__fixed_02.c":78:1)
#loc19 = loc("CWE617_Reachable_Assertion__fixed_02.c":82:1)
#loc20 = loc("CWE617_Reachable_Assertion__fixed_02.c":80:5)
#loc21 = loc("CWE617_Reachable_Assertion__fixed_02.c":80:14)
#loc22 = loc("CWE617_Reachable_Assertion__fixed_02.c":81:5)
#loc23 = loc("CWE617_Reachable_Assertion__fixed_02.c":81:14)
#loc24 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc25 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc26 = loc("CWE617_Reachable_Assertion__fixed_02.c":52:19)
#loc27 = loc("CWE617_Reachable_Assertion__fixed_02.c":60:5)
#loc28 = loc("CWE617_Reachable_Assertion__fixed_02.c":44:1)
#loc29 = loc("CWE617_Reachable_Assertion__fixed_02.c":61:1)
#loc30 = loc("CWE617_Reachable_Assertion__fixed_02.c":46:5)
#loc31 = loc("CWE617_Reachable_Assertion__fixed_02.c":46:9)
#loc32 = loc("CWE617_Reachable_Assertion__fixed_02.c":48:13)
#loc33 = loc("CWE617_Reachable_Assertion__fixed_02.c":48:12)
#loc34 = loc("CWE617_Reachable_Assertion__fixed_02.c":48:5)
#loc35 = loc("CWE617_Reachable_Assertion__fixed_02.c":49:5)
#loc36 = loc("CWE617_Reachable_Assertion__fixed_02.c":58:5)
#loc37 = loc("CWE617_Reachable_Assertion__fixed_02.c":49:8)
#loc38 = loc("CWE617_Reachable_Assertion__fixed_02.c":50:5)
#loc39 = loc("CWE617_Reachable_Assertion__fixed_02.c":53:5)
#loc40 = loc("CWE617_Reachable_Assertion__fixed_02.c":55:5)
#loc41 = loc("CWE617_Reachable_Assertion__fixed_02.c":52:9)
#loc42 = loc("CWE617_Reachable_Assertion__fixed_02.c":57:16)
#loc43 = loc("CWE617_Reachable_Assertion__fixed_02.c":57:29)
#loc44 = loc("CWE617_Reachable_Assertion__fixed_02.c":57:9)
#loc45 = loc("CWE617_Reachable_Assertion__fixed_02.c":75:5)
#loc46 = loc("CWE617_Reachable_Assertion__fixed_02.c":64:1)
#loc47 = loc("CWE617_Reachable_Assertion__fixed_02.c":76:1)
#loc48 = loc("CWE617_Reachable_Assertion__fixed_02.c":66:5)
#loc49 = loc("CWE617_Reachable_Assertion__fixed_02.c":66:9)
#loc50 = loc("CWE617_Reachable_Assertion__fixed_02.c":68:13)
#loc51 = loc("CWE617_Reachable_Assertion__fixed_02.c":68:12)
#loc52 = loc("CWE617_Reachable_Assertion__fixed_02.c":68:5)
#loc53 = loc("CWE617_Reachable_Assertion__fixed_02.c":69:5)
#loc54 = loc("CWE617_Reachable_Assertion__fixed_02.c":73:5)
#loc55 = loc("CWE617_Reachable_Assertion__fixed_02.c":69:8)
#loc56 = loc("CWE617_Reachable_Assertion__fixed_02.c":70:5)
#loc57 = loc("CWE617_Reachable_Assertion__fixed_02.c":72:16)
#loc58 = loc("CWE617_Reachable_Assertion__fixed_02.c":72:29)
#loc59 = loc("CWE617_Reachable_Assertion__fixed_02.c":72:9)
#loc60 = loc(fused[#loc1, #loc2])
#loc61 = loc(fused[#loc4, #loc5])
#loc62 = loc(fused[#loc6, #loc7])
#loc63 = loc(fused[#loc10, #loc8])
#loc64 = loc(fused[#loc11, #loc12])
#loc65 = loc(fused[#loc14, #loc12])
#loc66 = loc(fused[#loc17, #loc16])
#loc67 = loc(fused[#loc18, #loc19])
#loc68 = loc(fused[#loc20, #loc21])
#loc69 = loc(fused[#loc22, #loc23])
#loc70 = loc(fused[#loc24, #loc25])
#loc71 = loc(fused[#loc28, #loc29])
#loc72 = loc(fused[#loc30, #loc31])
#loc73 = loc(fused[#loc34, #loc32])
#loc74 = loc(fused[#loc35, #loc36])
#loc75 = loc(fused[#loc38, #loc39, #loc40, #loc36])
#loc76 = loc(fused[#loc44, #loc43])
#loc77 = loc(fused[#loc46, #loc47])
#loc78 = loc(fused[#loc48, #loc49])
#loc79 = loc(fused[#loc52, #loc50])
#loc80 = loc(fused[#loc53, #loc54])
#loc81 = loc(fused[#loc56, #loc54])
#loc82 = loc(fused[#loc59, #loc58])
