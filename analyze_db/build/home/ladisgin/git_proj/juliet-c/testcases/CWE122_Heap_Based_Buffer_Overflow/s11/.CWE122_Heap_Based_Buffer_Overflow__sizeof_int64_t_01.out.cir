!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":70:10)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":70:14)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":70:20)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":70:32)
#loc117 = loc(fused[#loc52, #loc53])
#loc118 = loc(fused[#loc54, #loc55])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc97)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc98)
  cir.func private @printLongLongLine(!s64i) loc(#loc99)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc100)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc102)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc103)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc15)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc104)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc105)
    cir.store %5, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc106)
    cir.br ^bb1 loc(#loc107)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc22)
    %7 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc23)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc23)
    %9 = cir.cmp(eq, %6, %8) : !cir.ptr<!s64i>, !cir.bool loc(#loc108)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc109)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc25)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc27)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc25)
    cir.br ^bb3 loc(#loc21)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc21)
  ^bb4:  // pred: ^bb3
    %13 = cir.const #cir.int<2147483643> : !s64i loc(#loc28)
    %14 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc29)
    cir.store %13, %14 : !s64i, !cir.ptr<!s64i> loc(#loc110)
    %15 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc31)
    %16 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc32)
    cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc33)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc34)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc34)
    cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc35)
    cir.return loc(#loc10)
  } loc(#loc101)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc112)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc37)
  } loc(#loc111)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc113)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc114)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc115)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc49)
  cir.func @main(%arg0: !s32i loc(fused[#loc52, #loc53]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc54, #loc55])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc117)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc118)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc51)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc56)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc56)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc57)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc58)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc58)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc59)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc46)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc119)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01_good() : () -> () loc(#loc61)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc47)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc48)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc120)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01_bad() : () -> () loc(#loc65)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc49)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc68)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    cir.return %17 : !s32i loc(#loc121)
  } loc(#loc116)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc123)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc74)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc124)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc76)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc125)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc76)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc126)
    cir.store %5, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc127)
    cir.br ^bb1 loc(#loc128)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc83)
    %7 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc84)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc84)
    %9 = cir.cmp(eq, %6, %8) : !cir.ptr<!s64i>, !cir.bool loc(#loc129)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc130)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc86)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc88)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc86)
    cir.br ^bb3 loc(#loc82)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc82)
  ^bb4:  // pred: ^bb3
    %13 = cir.const #cir.int<2147483643> : !s64i loc(#loc89)
    %14 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc90)
    cir.store %13, %14 : !s64i, !cir.ptr<!s64i> loc(#loc131)
    %15 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc92)
    %16 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc93)
    cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc94)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc95)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc95)
    cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc96)
    cir.return loc(#loc71)
  } loc(#loc122)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":34:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":23:15)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":25:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":28:23)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":28:30)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":28:41)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":28:42)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":28:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":29:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":29:33)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":29:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":29:17)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":29:23)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":29:24)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":29:30)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":29:29)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":30:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":30:6)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":30:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":32:24)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":32:23)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":32:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":33:10)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":33:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":55:1)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":58:1)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":57:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":57:13)
#loc40 = loc("/usr/include/stdlib.h":575:1)
#loc41 = loc("/usr/include/stdlib.h":575:41)
#loc42 = loc("/usr/include/time.h":76:1)
#loc43 = loc("/usr/include/time.h":76:38)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":75:15)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":77:15)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":80:15)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":82:15)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":70:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":85:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":71:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":73:27)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":73:22)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":73:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":75:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":76:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":76:63)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":77:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":80:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":81:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":81:62)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":82:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":84:12)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":84:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":41:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":53:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":43:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":43:15)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":45:12)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":45:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":47:23)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":47:30)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":47:42)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":47:43)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":47:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":48:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":48:33)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":48:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":48:17)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":48:23)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":48:24)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":48:30)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":48:29)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":49:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":49:6)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":49:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":51:24)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":51:23)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":51:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":52:10)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c":52:5)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc3, #loc4])
#loc99 = loc(fused[#loc5, #loc6])
#loc100 = loc(fused[#loc7, #loc8])
#loc101 = loc(fused[#loc9, #loc10])
#loc102 = loc(fused[#loc11, #loc12])
#loc103 = loc(fused[#loc14, #loc13])
#loc104 = loc(fused[#loc16, #loc17])
#loc105 = loc(fused[#loc15, #loc18])
#loc106 = loc(fused[#loc19, #loc18])
#loc107 = loc(fused[#loc20, #loc21])
#loc108 = loc(fused[#loc22, #loc23])
#loc109 = loc(fused[#loc24, #loc21])
#loc110 = loc(fused[#loc30, #loc28])
#loc111 = loc(fused[#loc36, #loc37])
#loc112 = loc(fused[#loc38, #loc39])
#loc113 = loc(fused[#loc40, #loc41])
#loc114 = loc(fused[#loc42, #loc43])
#loc115 = loc(fused[#loc44, #loc45])
#loc116 = loc(fused[#loc50, #loc51])
#loc119 = loc(fused[#loc61, #loc62])
#loc120 = loc(fused[#loc65, #loc66])
#loc121 = loc(fused[#loc69, #loc68])
#loc122 = loc(fused[#loc70, #loc71])
#loc123 = loc(fused[#loc72, #loc73])
#loc124 = loc(fused[#loc75, #loc74])
#loc125 = loc(fused[#loc77, #loc78])
#loc126 = loc(fused[#loc76, #loc79])
#loc127 = loc(fused[#loc80, #loc79])
#loc128 = loc(fused[#loc81, #loc82])
#loc129 = loc(fused[#loc83, #loc84])
#loc130 = loc(fused[#loc85, #loc82])
#loc131 = loc(fused[#loc91, #loc89])
