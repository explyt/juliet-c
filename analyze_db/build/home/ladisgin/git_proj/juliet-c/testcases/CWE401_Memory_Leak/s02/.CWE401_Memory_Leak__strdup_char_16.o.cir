!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.goodB2G.myString = #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc86)
  cir.global "private" constant cir_private @__const.CWE401_Memory_Leak__strdup_char_16_bad.myString = #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc87)
  cir.func private @strdup(!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc88)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc89)
  cir.func no_proto @CWE401_Memory_Leak__strdup_char_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc87)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc91)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc13)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc92)
    cir.br ^bb1 loc(#loc93)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc93)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %4 ^bb3, ^bb6 loc(#loc17)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc94)
  ^bb4:  // pred: ^bb3
    %5 = cir.get_global @__const.CWE401_Memory_Leak__strdup_char_16_bad.myString : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc87)
    cir.copy %5 to %0 : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc87)
    %6 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc20)
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc21)
    %8 = cir.call @strdup(%7) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc20)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc95)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc25)
    cir.br ^bb5 loc(#loc19)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc26)
  ^bb6:  // 2 preds: ^bb2, ^bb5
    cir.br ^bb7 loc(#loc16)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc96)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc96)
  ^bb9:  // pred: ^bb8
    %10 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc29)
    cir.brcond %11 ^bb10, ^bb11 loc(#loc29)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc30)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc28)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc10)
  } loc(#loc90)
  cir.func no_proto @CWE401_Memory_Leak__strdup_char_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc98)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc99)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc97)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc100)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc86)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc102)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc43)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc103)
    cir.br ^bb1 loc(#loc104)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc104)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc47)
    cir.brcond %4 ^bb3, ^bb6 loc(#loc47)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc105)
  ^bb4:  // pred: ^bb3
    %5 = cir.get_global @__const.goodB2G.myString : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc86)
    cir.copy %5 to %0 : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc86)
    %6 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc50)
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc51)
    %8 = cir.call @strdup(%7) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc50)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc106)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    cir.br ^bb5 loc(#loc49)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc56)
  ^bb6:  // 2 preds: ^bb2, ^bb5
    cir.br ^bb7 loc(#loc46)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc107)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc107)
  ^bb9:  // pred: ^bb8
    %10 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc59)
    cir.brcond %11 ^bb10, ^bb11 loc(#loc59)
  ^bb10:  // pred: ^bb9
    %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc60)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc61)
    cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc60)
    cir.br ^bb11 loc(#loc62)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc58)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc40)
  } loc(#loc101)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc108)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"a string\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc65)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc110)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc70)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc111)
    cir.br ^bb1 loc(#loc112)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc112)
  ^bb2:  // pred: ^bb1
    %2 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc74)
    cir.brcond %3 ^bb3, ^bb4 loc(#loc74)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<100> : !s32i loc(#loc75)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc75)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc75)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc75)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc75)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc75)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc75)
    cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc113)
    %11 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc77)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc65)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc65)
    %15 = cir.call @strcpy(%12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc77)
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    cir.br ^bb4 loc(#loc81)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc73)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc114)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc114)
  ^bb7:  // pred: ^bb6
    %17 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc84)
    cir.brcond %18 ^bb8, ^bb9 loc(#loc84)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc85)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc83)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc67)
  } loc(#loc109)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_16.c":0:0)
#loc1 = loc("CWE401_Memory_Leak__strdup_char_16.c":60:13)
#loc2 = loc("CWE401_Memory_Leak__strdup_char_16.c":60:31)
#loc3 = loc("CWE401_Memory_Leak__strdup_char_16.c":31:13)
#loc4 = loc("CWE401_Memory_Leak__strdup_char_16.c":31:31)
#loc5 = loc("/usr/include/string.h":187:1)
#loc6 = loc("/usr/include/string.h":188:35)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE401_Memory_Leak__strdup_char_16.c":24:1)
#loc10 = loc("CWE401_Memory_Leak__strdup_char_16.c":46:1)
#loc11 = loc("CWE401_Memory_Leak__strdup_char_16.c":26:5)
#loc12 = loc("CWE401_Memory_Leak__strdup_char_16.c":26:12)
#loc13 = loc("CWE401_Memory_Leak__strdup_char_16.c":27:12)
#loc14 = loc("CWE401_Memory_Leak__strdup_char_16.c":27:5)
#loc15 = loc("CWE401_Memory_Leak__strdup_char_16.c":28:5)
#loc16 = loc("CWE401_Memory_Leak__strdup_char_16.c":38:5)
#loc17 = loc("CWE401_Memory_Leak__strdup_char_16.c":28:11)
#loc18 = loc("CWE401_Memory_Leak__strdup_char_16.c":30:9)
#loc19 = loc("CWE401_Memory_Leak__strdup_char_16.c":36:9)
#loc20 = loc("CWE401_Memory_Leak__strdup_char_16.c":33:20)
#loc21 = loc("CWE401_Memory_Leak__strdup_char_16.c":33:27)
#loc22 = loc("CWE401_Memory_Leak__strdup_char_16.c":33:13)
#loc23 = loc("CWE401_Memory_Leak__strdup_char_16.c":33:35)
#loc24 = loc("CWE401_Memory_Leak__strdup_char_16.c":35:23)
#loc25 = loc("CWE401_Memory_Leak__strdup_char_16.c":35:13)
#loc26 = loc("CWE401_Memory_Leak__strdup_char_16.c":37:9)
#loc27 = loc("CWE401_Memory_Leak__strdup_char_16.c":39:5)
#loc28 = loc("CWE401_Memory_Leak__strdup_char_16.c":45:5)
#loc29 = loc("CWE401_Memory_Leak__strdup_char_16.c":39:11)
#loc30 = loc("CWE401_Memory_Leak__strdup_char_16.c":44:9)
#loc31 = loc("CWE401_Memory_Leak__strdup_char_16.c":99:1)
#loc32 = loc("CWE401_Memory_Leak__strdup_char_16.c":103:1)
#loc33 = loc("CWE401_Memory_Leak__strdup_char_16.c":101:5)
#loc34 = loc("CWE401_Memory_Leak__strdup_char_16.c":101:13)
#loc35 = loc("CWE401_Memory_Leak__strdup_char_16.c":102:5)
#loc36 = loc("CWE401_Memory_Leak__strdup_char_16.c":102:13)
#loc37 = loc("/usr/include/stdlib.h":687:1)
#loc38 = loc("/usr/include/stdlib.h":687:32)
#loc39 = loc("CWE401_Memory_Leak__strdup_char_16.c":53:1)
#loc40 = loc("CWE401_Memory_Leak__strdup_char_16.c":74:1)
#loc41 = loc("CWE401_Memory_Leak__strdup_char_16.c":55:5)
#loc42 = loc("CWE401_Memory_Leak__strdup_char_16.c":55:12)
#loc43 = loc("CWE401_Memory_Leak__strdup_char_16.c":56:12)
#loc44 = loc("CWE401_Memory_Leak__strdup_char_16.c":56:5)
#loc45 = loc("CWE401_Memory_Leak__strdup_char_16.c":57:5)
#loc46 = loc("CWE401_Memory_Leak__strdup_char_16.c":67:5)
#loc47 = loc("CWE401_Memory_Leak__strdup_char_16.c":57:11)
#loc48 = loc("CWE401_Memory_Leak__strdup_char_16.c":59:9)
#loc49 = loc("CWE401_Memory_Leak__strdup_char_16.c":65:9)
#loc50 = loc("CWE401_Memory_Leak__strdup_char_16.c":62:20)
#loc51 = loc("CWE401_Memory_Leak__strdup_char_16.c":62:27)
#loc52 = loc("CWE401_Memory_Leak__strdup_char_16.c":62:13)
#loc53 = loc("CWE401_Memory_Leak__strdup_char_16.c":62:35)
#loc54 = loc("CWE401_Memory_Leak__strdup_char_16.c":64:23)
#loc55 = loc("CWE401_Memory_Leak__strdup_char_16.c":64:13)
#loc56 = loc("CWE401_Memory_Leak__strdup_char_16.c":66:9)
#loc57 = loc("CWE401_Memory_Leak__strdup_char_16.c":68:5)
#loc58 = loc("CWE401_Memory_Leak__strdup_char_16.c":73:5)
#loc59 = loc("CWE401_Memory_Leak__strdup_char_16.c":68:11)
#loc60 = loc("CWE401_Memory_Leak__strdup_char_16.c":71:9)
#loc61 = loc("CWE401_Memory_Leak__strdup_char_16.c":71:14)
#loc62 = loc("CWE401_Memory_Leak__strdup_char_16.c":72:9)
#loc63 = loc("/usr/include/string.h":141:1)
#loc64 = loc("/usr/include/string.h":142:14)
#loc65 = loc("CWE401_Memory_Leak__strdup_char_16.c":86:22)
#loc66 = loc("CWE401_Memory_Leak__strdup_char_16.c":77:1)
#loc67 = loc("CWE401_Memory_Leak__strdup_char_16.c":97:1)
#loc68 = loc("CWE401_Memory_Leak__strdup_char_16.c":79:5)
#loc69 = loc("CWE401_Memory_Leak__strdup_char_16.c":79:12)
#loc70 = loc("CWE401_Memory_Leak__strdup_char_16.c":80:12)
#loc71 = loc("CWE401_Memory_Leak__strdup_char_16.c":80:5)
#loc72 = loc("CWE401_Memory_Leak__strdup_char_16.c":81:5)
#loc73 = loc("CWE401_Memory_Leak__strdup_char_16.c":89:5)
#loc74 = loc("CWE401_Memory_Leak__strdup_char_16.c":81:11)
#loc75 = loc("CWE401_Memory_Leak__strdup_char_16.c":84:24)
#loc76 = loc("CWE401_Memory_Leak__strdup_char_16.c":84:9)
#loc77 = loc("CWE401_Memory_Leak__strdup_char_16.c":86:9)
#loc78 = loc("CWE401_Memory_Leak__strdup_char_16.c":86:16)
#loc79 = loc("CWE401_Memory_Leak__strdup_char_16.c":87:19)
#loc80 = loc("CWE401_Memory_Leak__strdup_char_16.c":87:9)
#loc81 = loc("CWE401_Memory_Leak__strdup_char_16.c":88:9)
#loc82 = loc("CWE401_Memory_Leak__strdup_char_16.c":90:5)
#loc83 = loc("CWE401_Memory_Leak__strdup_char_16.c":96:5)
#loc84 = loc("CWE401_Memory_Leak__strdup_char_16.c":90:11)
#loc85 = loc("CWE401_Memory_Leak__strdup_char_16.c":95:9)
#loc86 = loc(fused[#loc1, #loc2])
#loc87 = loc(fused[#loc3, #loc4])
#loc88 = loc(fused[#loc5, #loc6])
#loc89 = loc(fused[#loc7, #loc8])
#loc90 = loc(fused[#loc9, #loc10])
#loc91 = loc(fused[#loc11, #loc12])
#loc92 = loc(fused[#loc14, #loc13])
#loc93 = loc(fused[#loc15, #loc16])
#loc94 = loc(fused[#loc18, #loc19])
#loc95 = loc(fused[#loc22, #loc23])
#loc96 = loc(fused[#loc27, #loc28])
#loc97 = loc(fused[#loc31, #loc32])
#loc98 = loc(fused[#loc33, #loc34])
#loc99 = loc(fused[#loc35, #loc36])
#loc100 = loc(fused[#loc37, #loc38])
#loc101 = loc(fused[#loc39, #loc40])
#loc102 = loc(fused[#loc41, #loc42])
#loc103 = loc(fused[#loc44, #loc43])
#loc104 = loc(fused[#loc45, #loc46])
#loc105 = loc(fused[#loc48, #loc49])
#loc106 = loc(fused[#loc52, #loc53])
#loc107 = loc(fused[#loc57, #loc58])
#loc108 = loc(fused[#loc63, #loc64])
#loc109 = loc(fused[#loc66, #loc67])
#loc110 = loc(fused[#loc68, #loc69])
#loc111 = loc(fused[#loc71, #loc70])
#loc112 = loc(fused[#loc72, #loc73])
#loc113 = loc(fused[#loc76, #loc75])
#loc114 = loc(fused[#loc82, #loc83])
