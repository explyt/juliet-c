!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc176 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":180:10)
#loc177 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":180:14)
#loc178 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":180:20)
#loc179 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":180:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc281 = loc(fused[#loc176, #loc177])
#loc282 = loc(fused[#loc178, #loc179])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.goodG2B.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc214)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_connect_socket_execlp_18_bad.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc215)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc216)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc217)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc218)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc11)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc219)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc220)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc221)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc222)
  cir.func private @close(!s32i) -> !s32i loc(#loc223)
  cir.func private @execlp(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc224)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"sh\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc24)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc25)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execlp_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc226)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc215)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc227)
    %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc228)
    %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc229)
    %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc230)
    %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc231)
    %7 = cir.get_global @__const.CWE78_OS_Command_Injection__char_connect_socket_execlp_18_bad.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc215)
    cir.copy %7 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc215)
    %8 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc40)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc232)
    cir.goto "source" loc(#loc233)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc44)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc37)
    cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    %11 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc45)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
    %13 = cir.call @strlen(%12) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc45)
    cir.store %13, %6 : !u64i, !cir.ptr<!u64i> loc(#loc231)
    cir.scope {
      cir.do {
        %23 = cir.const #cir.int<2> : !s32i loc(#loc49)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc50)
        %25 = cir.const #cir.int<6> : !s32i loc(#loc51)
        %26 = cir.call @socket(%23, %24, %25) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc52)
        cir.store %26, %5 : !s32i, !cir.ptr<!s32i> loc(#loc235)
        cir.scope {
          %77 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc57)
          %78 = cir.const #cir.int<1> : !s32i loc(#loc58)
          %79 = cir.unary(minus, %78) : !s32i, !s32i loc(#loc58)
          %80 = cir.cmp(eq, %77, %79) : !s32i, !cir.bool loc(#loc237)
          cir.if %80 {
            cir.break loc(#loc60)
          } loc(#loc238)
        } loc(#loc236)
        %27 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc239)
        %28 = cir.const #cir.int<0> : !s32i loc(#loc63)
        %29 = cir.const #cir.int<16> : !u64i loc(#loc240)
        cir.libc.memset %29 bytes from %27 set to %28 : !cir.ptr<!void>, !s32i, !u64i loc(#loc241)
        %30 = cir.const #cir.int<2> : !s32i loc(#loc68)
        %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc68)
        %32 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
        cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc242)
        %33 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc11)
        %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc11)
        %35 = cir.call @inet_addr(%34) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc71)
        %36 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
        %37 = cir.get_member %36[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
        cir.store %35, %37 : !u32i, !cir.ptr<!u32i> loc(#loc243)
        %38 = cir.const #cir.int<27015> : !s32i loc(#loc76)
        %39 = cir.cast(integral, %38 : !s32i), !u16i loc(#loc76)
        %40 = cir.call @htons(%39) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc77)
        %41 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
        cir.store %40, %41 : !u16i, !cir.ptr<!u16i> loc(#loc244)
        cir.scope {
          %77 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc83)
          %78 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc246)
          %79 = cir.const #cir.int<16> : !u64i loc(#loc247)
          %80 = cir.cast(integral, %79 : !u64i), !u32i loc(#loc247)
          %81 = cir.call @connect(%77, %78, %80) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc88)
          %82 = cir.const #cir.int<1> : !s32i loc(#loc89)
          %83 = cir.unary(minus, %82) : !s32i, !s32i loc(#loc89)
          %84 = cir.cmp(eq, %81, %83) : !s32i, !cir.bool loc(#loc248)
          cir.if %84 {
            cir.break loc(#loc91)
          } loc(#loc249)
        } loc(#loc245)
        %42 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc92)
        %43 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
        %44 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc94)
        %45 = cir.ptr_stride(%43 : !cir.ptr<!s8i>, %44 : !u64i), !cir.ptr<!s8i> loc(#loc95)
        %46 = cir.cast(bitcast, %45 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc250)
        %47 = cir.const #cir.int<1> : !u64i loc(#loc251)
        %48 = cir.const #cir.int<100> : !s32i loc(#loc100)
        %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc100)
        %50 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc101)
        %51 = cir.binop(sub, %49, %50) : !u64i loc(#loc252)
        %52 = cir.const #cir.int<1> : !s32i loc(#loc102)
        %53 = cir.cast(integral, %52 : !s32i), !u64i loc(#loc102)
        %54 = cir.binop(sub, %51, %53) : !u64i loc(#loc253)
        %55 = cir.binop(mul, %47, %54) : !u64i loc(#loc254)
        %56 = cir.const #cir.int<0> : !s32i loc(#loc104)
        %57 = cir.call @recv(%42, %46, %55, %56) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc105)
        %58 = cir.cast(integral, %57 : !s64i), !s32i loc(#loc105)
        cir.store %58, %2 : !s32i, !cir.ptr<!s32i> loc(#loc255)
        cir.scope {
          %77 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc110)
          %78 = cir.const #cir.int<1> : !s32i loc(#loc111)
          %79 = cir.unary(minus, %78) : !s32i, !s32i loc(#loc111)
          %80 = cir.cmp(eq, %77, %79) : !s32i, !cir.bool loc(#loc257)
          %81 = cir.ternary(%80, true {
            %82 = cir.const #true loc(#loc112)
            cir.yield %82 : !cir.bool loc(#loc112)
          }, false {
            %82 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc113)
            %83 = cir.const #cir.int<0> : !s32i loc(#loc114)
            %84 = cir.cmp(eq, %82, %83) : !s32i, !cir.bool loc(#loc258)
            %85 = cir.ternary(%84, true {
              %86 = cir.const #true loc(#loc112)
              cir.yield %86 : !cir.bool loc(#loc112)
            }, false {
              %86 = cir.const #false loc(#loc112)
              cir.yield %86 : !cir.bool loc(#loc112)
            }) : (!cir.bool) -> !cir.bool loc(#loc112)
            cir.yield %85 : !cir.bool loc(#loc112)
          }) : (!cir.bool) -> !cir.bool loc(#loc112)
          cir.if %81 {
            cir.break loc(#loc116)
          } loc(#loc259)
        } loc(#loc256)
        %59 = cir.const #cir.int<0> : !s32i loc(#loc117)
        %60 = cir.cast(integral, %59 : !s32i), !s8i loc(#loc117)
        %61 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
        %62 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc119)
        %63 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc120)
        %64 = cir.cast(integral, %63 : !s32i), !u64i loc(#loc120)
        %65 = cir.const #cir.int<1> : !u64i loc(#loc260)
        %66 = cir.binop(div, %64, %65) : !u64i loc(#loc261)
        %67 = cir.binop(add, %62, %66) : !u64i loc(#loc262)
        %68 = cir.ptr_stride(%61 : !cir.ptr<!s8i>, %67 : !u64i), !cir.ptr<!s8i> loc(#loc123)
        cir.store %60, %68 : !s8i, !cir.ptr<!s8i> loc(#loc263)
        %69 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc124)
        %70 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
        %71 = cir.const #cir.int<13> : !s32i loc(#loc126)
        %72 = cir.call @strchr(%70, %71) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc124)
        cir.store %72, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc264)
        cir.scope {
          %77 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
          %78 = cir.cast(ptr_to_bool, %77 : !cir.ptr<!s8i>), !cir.bool loc(#loc131)
          cir.if %78 {
            %79 = cir.const #cir.int<0> : !s32i loc(#loc133)
            %80 = cir.cast(integral, %79 : !s32i), !s8i loc(#loc133)
            %81 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
            cir.store %80, %81 : !s8i, !cir.ptr<!s8i> loc(#loc267)
          } loc(#loc266)
        } loc(#loc265)
        %73 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc136)
        %74 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
        %75 = cir.const #cir.int<10> : !s32i loc(#loc138)
        %76 = cir.call @strchr(%74, %75) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc136)
        cir.store %76, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc268)
        cir.scope {
          %77 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
          %78 = cir.cast(ptr_to_bool, %77 : !cir.ptr<!s8i>), !cir.bool loc(#loc143)
          cir.if %78 {
            %79 = cir.const #cir.int<0> : !s32i loc(#loc145)
            %80 = cir.cast(integral, %79 : !s32i), !s8i loc(#loc145)
            %81 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
            cir.store %80, %81 : !s8i, !cir.ptr<!s8i> loc(#loc271)
          } loc(#loc270)
        } loc(#loc269)
        cir.yield loc(#loc48)
      } while {
        %23 = cir.const #cir.int<0> : !s32i loc(#loc148)
        %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc148)
        cir.condition(%24) loc(#loc148)
      } loc(#loc234)
    } loc(#loc234)
    cir.scope {
      %23 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc151)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc152)
      %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc152)
      %26 = cir.cmp(ne, %23, %25) : !s32i, !cir.bool loc(#loc273)
      cir.if %26 {
        %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc154)
        %28 = cir.call @close(%27) : (!s32i) -> !s32i loc(#loc155)
      } loc(#loc274)
    } loc(#loc272)
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc24)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc24)
    %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc156)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc156)
    %18 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc25)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc25)
    %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
    %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc158)
    %22 = cir.call @execlp(%15, %17, %19, %20, %21) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc159)
    cir.return loc(#loc27)
  } loc(#loc225)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execlp_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc276)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc162)
    cir.return loc(#loc161)
  } loc(#loc275)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc277)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc278)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc279)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc173)
  cir.func @main(%arg0: !s32i loc(fused[#loc176, #loc177]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc178, #loc179])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc281)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc282)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc175)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc180)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc181)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc182)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc182)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc183)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc170)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc170)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc184)
    %8 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execlp_18_good : !cir.ptr<!cir.func<!void ()>> loc(#loc283)
    cir.call @CWE78_OS_Command_Injection__char_connect_socket_execlp_18_good() : () -> () loc(#loc185)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc171)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc171)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc187)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc172)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc172)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc188)
    %13 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execlp_18_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc284)
    cir.call @CWE78_OS_Command_Injection__char_connect_socket_execlp_18_bad() : () -> () loc(#loc189)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc173)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc173)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc191)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc192)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc285)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc285)
    cir.return %17 : !s32i loc(#loc285)
  } loc(#loc280)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc286)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc196)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc288)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc214)
    %2 = cir.get_global @__const.goodG2B.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc214)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc214)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc201)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc289)
    cir.goto "source" loc(#loc290)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc205)
    %4 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc206)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc207)
    %6 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc196)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc196)
    %8 = cir.call @strcat(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc206)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc208)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc208)
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc209)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc209)
    %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc210)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc210)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc211)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc212)
    %17 = cir.call @execlp(%10, %12, %14, %15, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc213)
    cir.return loc(#loc198)
  } loc(#loc287)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":153:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":153:28)
#loc3 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":68:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":68:28)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/sys/socket.h":102:1)
#loc8 = loc("/usr/include/sys/socket.h":102:62)
#loc9 = loc("/usr/include/arpa/inet.h":34:1)
#loc10 = loc("/usr/include/arpa/inet.h":34:47)
#loc11 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":99:49)
#loc12 = loc("/usr/include/netinet/in.h":404:1)
#loc13 = loc("/usr/include/netinet/in.h":405:40)
#loc14 = loc("/usr/include/sys/socket.h":126:1)
#loc15 = loc("/usr/include/sys/socket.h":126:75)
#loc16 = loc("/usr/include/sys/socket.h":145:1)
#loc17 = loc("/usr/include/sys/socket.h":145:68)
#loc18 = loc("/usr/include/string.h":246:1)
#loc19 = loc("/usr/include/string.h":247:33)
#loc20 = loc("/usr/include/unistd.h":358:1)
#loc21 = loc("/usr/include/unistd.h":358:27)
#loc22 = loc("/usr/include/unistd.h":605:1)
#loc23 = loc("/usr/include/unistd.h":606:14)
#loc24 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":142:12)
#loc25 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":142:38)
#loc26 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":65:1)
#loc27 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":143:1)
#loc28 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":67:5)
#loc29 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":67:12)
#loc30 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":77:9)
#loc31 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":77:13)
#loc32 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":78:9)
#loc33 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":78:28)
#loc34 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":79:9)
#loc35 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":79:15)
#loc36 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":80:9)
#loc37 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":80:32)
#loc38 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":81:9)
#loc39 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":81:37)
#loc40 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":69:12)
#loc41 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":69:5)
#loc42 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":70:5)
#loc43 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":70:10)
#loc44 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":71:1)
#loc45 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":81:26)
#loc46 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":81:33)
#loc47 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":82:9)
#loc48 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":127:17)
#loc49 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":92:36)
#loc50 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":92:45)
#loc51 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":92:58)
#loc52 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":92:29)
#loc53 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":92:13)
#loc54 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":92:69)
#loc55 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":93:13)
#loc56 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":96:13)
#loc57 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":93:17)
#loc58 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":93:34)
#loc59 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":94:13)
#loc60 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":95:17)
#loc61 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":97:20)
#loc62 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":97:21)
#loc63 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":97:30)
#loc64 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":97:33)
#loc65 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":97:47)
#loc66 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":97:13)
#loc67 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":97:48)
#loc68 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":98:34)
#loc69 = loc("/usr/include/netinet/in.h":249:5)
#loc70 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":98:13)
#loc71 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":99:39)
#loc72 = loc("/usr/include/netinet/in.h":251:20)
#loc73 = loc("/usr/include/netinet/in.h":33:15)
#loc74 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":99:13)
#loc75 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":99:59)
#loc76 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":100:38)
#loc77 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":100:32)
#loc78 = loc("/usr/include/netinet/in.h":250:15)
#loc79 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":100:13)
#loc80 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":100:46)
#loc81 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":101:13)
#loc82 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":104:13)
#loc83 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":101:25)
#loc84 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":101:58)
#loc85 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":101:59)
#loc86 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":101:68)
#loc87 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":101:82)
#loc88 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":101:17)
#loc89 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":101:88)
#loc90 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":102:13)
#loc91 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":103:17)
#loc92 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":108:31)
#loc93 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":108:55)
#loc94 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":108:62)
#loc95 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":108:60)
#loc96 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":108:46)
#loc97 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":108:69)
#loc98 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":108:72)
#loc99 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":108:83)
#loc100 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":108:88)
#loc101 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":108:94)
#loc102 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":108:104)
#loc103 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":108:105)
#loc104 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":108:108)
#loc105 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":108:26)
#loc106 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":108:13)
#loc107 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":108:109)
#loc108 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":109:13)
#loc109 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":112:13)
#loc110 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":109:17)
#loc111 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":109:31)
#loc112 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":109:44)
#loc113 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":109:47)
#loc114 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":109:61)
#loc115 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":110:13)
#loc116 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":111:17)
#loc117 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":114:57)
#loc118 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":114:13)
#loc119 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":114:18)
#loc120 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":114:28)
#loc121 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":114:41)
#loc122 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":114:52)
#loc123 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":114:53)
#loc124 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":116:23)
#loc125 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":116:30)
#loc126 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":116:36)
#loc127 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":116:13)
#loc128 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":116:40)
#loc129 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":117:13)
#loc130 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":120:13)
#loc131 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":117:17)
#loc132 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":118:13)
#loc133 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":119:28)
#loc134 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":119:18)
#loc135 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":119:17)
#loc136 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":121:23)
#loc137 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":121:30)
#loc138 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":121:36)
#loc139 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":121:13)
#loc140 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":121:40)
#loc141 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":122:13)
#loc142 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":125:13)
#loc143 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":122:17)
#loc144 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":123:13)
#loc145 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":124:28)
#loc146 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":124:18)
#loc147 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":124:17)
#loc148 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":127:16)
#loc149 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":128:9)
#loc150 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":131:9)
#loc151 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":128:13)
#loc152 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":128:30)
#loc153 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":129:9)
#loc154 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":130:26)
#loc155 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":130:13)
#loc156 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":142:25)
#loc157 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":142:52)
#loc158 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":142:66)
#loc159 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":142:5)
#loc160 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":165:1)
#loc161 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":168:1)
#loc162 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":167:5)
#loc163 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":167:13)
#loc164 = loc("/usr/include/stdlib.h":575:1)
#loc165 = loc("/usr/include/stdlib.h":575:41)
#loc166 = loc("/usr/include/time.h":76:1)
#loc167 = loc("/usr/include/time.h":76:38)
#loc168 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc169 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc170 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":185:15)
#loc171 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":187:15)
#loc172 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":190:15)
#loc173 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":192:15)
#loc174 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":180:1)
#loc175 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":195:1)
#loc180 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":181:1)
#loc181 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":183:27)
#loc182 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":183:22)
#loc183 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":183:5)
#loc184 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":185:5)
#loc185 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":186:5)
#loc186 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":186:68)
#loc187 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":187:5)
#loc188 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":190:5)
#loc189 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":191:5)
#loc190 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":191:67)
#loc191 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":192:5)
#loc192 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":194:12)
#loc193 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":194:5)
#loc194 = loc("/usr/include/string.h":149:1)
#loc195 = loc("/usr/include/string.h":150:14)
#loc196 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":158:18)
#loc197 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":150:1)
#loc198 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":163:1)
#loc199 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":152:5)
#loc200 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":152:12)
#loc201 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":154:12)
#loc202 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":154:5)
#loc203 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":155:5)
#loc204 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":155:10)
#loc205 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":156:1)
#loc206 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":158:5)
#loc207 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":158:12)
#loc208 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":162:12)
#loc209 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":162:25)
#loc210 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":162:38)
#loc211 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":162:52)
#loc212 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":162:66)
#loc213 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_18.c":162:5)
#loc214 = loc(fused[#loc1, #loc2])
#loc215 = loc(fused[#loc3, #loc4])
#loc216 = loc(fused[#loc5, #loc6])
#loc217 = loc(fused[#loc7, #loc8])
#loc218 = loc(fused[#loc9, #loc10])
#loc219 = loc(fused[#loc12, #loc13])
#loc220 = loc(fused[#loc14, #loc15])
#loc221 = loc(fused[#loc16, #loc17])
#loc222 = loc(fused[#loc18, #loc19])
#loc223 = loc(fused[#loc20, #loc21])
#loc224 = loc(fused[#loc22, #loc23])
#loc225 = loc(fused[#loc26, #loc27])
#loc226 = loc(fused[#loc28, #loc29])
#loc227 = loc(fused[#loc30, #loc31])
#loc228 = loc(fused[#loc32, #loc33])
#loc229 = loc(fused[#loc34, #loc35])
#loc230 = loc(fused[#loc36, #loc37])
#loc231 = loc(fused[#loc38, #loc39])
#loc232 = loc(fused[#loc41, #loc40])
#loc233 = loc(fused[#loc42, #loc43])
#loc234 = loc(fused[#loc47, #loc48])
#loc235 = loc(fused[#loc53, #loc54])
#loc236 = loc(fused[#loc55, #loc56])
#loc237 = loc(fused[#loc57, #loc58])
#loc238 = loc(fused[#loc59, #loc56])
#loc239 = loc(fused[#loc61, #loc62])
#loc240 = loc(fused[#loc64, #loc65])
#loc241 = loc(fused[#loc66, #loc67])
#loc242 = loc(fused[#loc70, #loc68])
#loc243 = loc(fused[#loc74, #loc75])
#loc244 = loc(fused[#loc79, #loc80])
#loc245 = loc(fused[#loc81, #loc82])
#loc246 = loc(fused[#loc84, #loc85])
#loc247 = loc(fused[#loc86, #loc87])
#loc248 = loc(fused[#loc88, #loc89])
#loc249 = loc(fused[#loc90, #loc82])
#loc250 = loc(fused[#loc96, #loc97])
#loc251 = loc(fused[#loc98, #loc99])
#loc252 = loc(fused[#loc100, #loc101])
#loc253 = loc(fused[#loc100, #loc102])
#loc254 = loc(fused[#loc98, #loc103])
#loc255 = loc(fused[#loc106, #loc107])
#loc256 = loc(fused[#loc108, #loc109])
#loc257 = loc(fused[#loc110, #loc111])
#loc258 = loc(fused[#loc113, #loc114])
#loc259 = loc(fused[#loc115, #loc109])
#loc260 = loc(fused[#loc121, #loc122])
#loc261 = loc(fused[#loc120, #loc122])
#loc262 = loc(fused[#loc119, #loc122])
#loc263 = loc(fused[#loc118, #loc117])
#loc264 = loc(fused[#loc127, #loc128])
#loc265 = loc(fused[#loc129, #loc130])
#loc266 = loc(fused[#loc132, #loc130])
#loc267 = loc(fused[#loc135, #loc133])
#loc268 = loc(fused[#loc139, #loc140])
#loc269 = loc(fused[#loc141, #loc142])
#loc270 = loc(fused[#loc144, #loc142])
#loc271 = loc(fused[#loc147, #loc145])
#loc272 = loc(fused[#loc149, #loc150])
#loc273 = loc(fused[#loc151, #loc152])
#loc274 = loc(fused[#loc153, #loc150])
#loc275 = loc(fused[#loc160, #loc161])
#loc276 = loc(fused[#loc162, #loc163])
#loc277 = loc(fused[#loc164, #loc165])
#loc278 = loc(fused[#loc166, #loc167])
#loc279 = loc(fused[#loc168, #loc169])
#loc280 = loc(fused[#loc174, #loc175])
#loc283 = loc(fused[#loc185, #loc186])
#loc284 = loc(fused[#loc189, #loc190])
#loc285 = loc(fused[#loc193, #loc192])
#loc286 = loc(fused[#loc194, #loc195])
#loc287 = loc(fused[#loc197, #loc198])
#loc288 = loc(fused[#loc199, #loc200])
#loc289 = loc(fused[#loc202, #loc201])
#loc290 = loc(fused[#loc203, #loc204])
