!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_divide_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc163)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_zero_divide_03_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc165)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc7)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc8)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc12)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc13)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc168)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc14)
      cir.if %6 {
        %7 = cir.const #cir.int<0> : !s32i loc(#loc16)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc170)
      } loc(#loc169)
    } loc(#loc167)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc20)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc21)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc172)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc22)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc24)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc174)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc26)
      } loc(#loc173)
    } loc(#loc171)
    cir.return loc(#loc4)
  } loc(#loc164)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_zero_divide_03_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc177)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc28)
  } loc(#loc175)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc180)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc39)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc40)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc46)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc50)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc51)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc185)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc52)
      cir.if %6 {
        %7 = cir.const #cir.int<0> : !s32i loc(#loc54)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
      } loc(#loc186)
    } loc(#loc184)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc58)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc59)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc189)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc60)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc39)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc39)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc64)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc67)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc68)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !s32i loc(#loc192)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc69)
          cir.if %10 {
            %11 = cir.const #cir.int<100> : !s32i loc(#loc73)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
            %13 = cir.binop(div, %11, %12) : !s32i loc(#loc194)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc75)
          } else {
            %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc40)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc40)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc76)
          } loc(#loc193)
        } loc(#loc191)
      } loc(#loc190)
    } loc(#loc188)
    cir.return loc(#loc42)
  } loc(#loc181)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc196)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc82)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc86)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc87)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc199)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc88)
      cir.if %6 {
        %7 = cir.const #cir.int<0> : !s32i loc(#loc90)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
      } loc(#loc200)
    } loc(#loc198)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc94)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc95)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc203)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc96)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc101)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !s32i loc(#loc206)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc102)
          cir.if %10 {
            %11 = cir.const #cir.int<100> : !s32i loc(#loc106)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
            %13 = cir.binop(div, %11, %12) : !s32i loc(#loc208)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc108)
          } else {
            %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc109)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc109)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc110)
          } loc(#loc207)
        } loc(#loc205)
      } loc(#loc204)
    } loc(#loc202)
    cir.return loc(#loc78)
  } loc(#loc195)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc210)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc116)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc120)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc121)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc213)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc122)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc126)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc126)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc127)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc128)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc215)
      } loc(#loc214)
    } loc(#loc212)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc132)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc133)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc217)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc134)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc136)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc137)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc219)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc138)
      } loc(#loc218)
    } loc(#loc216)
    cir.return loc(#loc112)
  } loc(#loc209)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc221)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc143)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc144)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc148)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc149)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc224)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc150)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc152)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc226)
      } loc(#loc225)
    } loc(#loc223)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc156)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc157)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc228)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc158)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc160)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc230)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc162)
      } loc(#loc229)
    } loc(#loc227)
    cir.return loc(#loc140)
  } loc(#loc220)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_divide_03.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":22:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":37:1)
#loc5 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":24:5)
#loc6 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":24:9)
#loc7 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":26:13)
#loc8 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":26:12)
#loc9 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":26:5)
#loc10 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":27:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":31:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":27:8)
#loc13 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":27:11)
#loc14 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":27:9)
#loc15 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":28:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":30:16)
#loc17 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":30:9)
#loc18 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":32:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":36:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":32:8)
#loc21 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":32:11)
#loc22 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":32:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":33:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":35:22)
#loc25 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":35:28)
#loc26 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":35:9)
#loc27 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":139:1)
#loc28 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":145:1)
#loc29 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":141:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":141:14)
#loc31 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":142:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":142:14)
#loc33 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":143:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":143:14)
#loc35 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":144:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":144:14)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":57:19)
#loc40 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":68:23)
#loc41 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":44:1)
#loc42 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":71:1)
#loc43 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":46:5)
#loc44 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":46:9)
#loc45 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":48:13)
#loc46 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":48:12)
#loc47 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":48:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":49:5)
#loc49 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":53:5)
#loc50 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":49:8)
#loc51 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":49:11)
#loc52 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":49:9)
#loc53 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":50:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":52:16)
#loc55 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":52:9)
#loc56 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":54:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":70:5)
#loc58 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":54:8)
#loc59 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":54:11)
#loc60 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":54:9)
#loc61 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":55:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":58:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":60:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":57:9)
#loc65 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":62:9)
#loc66 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":69:9)
#loc67 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":62:13)
#loc68 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":62:21)
#loc69 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":62:18)
#loc70 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":63:9)
#loc71 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":65:9)
#loc72 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":67:9)
#loc73 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":64:26)
#loc74 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":64:32)
#loc75 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":64:13)
#loc76 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":68:13)
#loc77 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":74:1)
#loc78 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":96:1)
#loc79 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":76:5)
#loc80 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":76:9)
#loc81 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":78:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":78:12)
#loc83 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":78:5)
#loc84 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":79:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":83:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":79:8)
#loc87 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":79:11)
#loc88 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":79:9)
#loc89 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":80:5)
#loc90 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":82:16)
#loc91 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":82:9)
#loc92 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":84:5)
#loc93 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":95:5)
#loc94 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":84:8)
#loc95 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":84:11)
#loc96 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":84:9)
#loc97 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":85:5)
#loc98 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":87:9)
#loc99 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":94:9)
#loc100 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":87:13)
#loc101 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":87:21)
#loc102 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":87:18)
#loc103 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":88:9)
#loc104 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":90:9)
#loc105 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":92:9)
#loc106 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":89:26)
#loc107 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":89:32)
#loc108 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":89:13)
#loc109 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":93:23)
#loc110 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":93:13)
#loc111 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":99:1)
#loc112 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":119:1)
#loc113 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":101:5)
#loc114 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":101:9)
#loc115 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":103:13)
#loc116 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":103:12)
#loc117 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":103:5)
#loc118 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":104:5)
#loc119 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":113:5)
#loc120 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":104:8)
#loc121 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":104:11)
#loc122 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":104:9)
#loc123 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":105:5)
#loc124 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":108:5)
#loc125 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":110:5)
#loc126 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":107:19)
#loc127 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":107:9)
#loc128 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":112:16)
#loc129 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":112:9)
#loc130 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":114:5)
#loc131 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":118:5)
#loc132 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":114:8)
#loc133 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":114:11)
#loc134 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":114:9)
#loc135 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":115:5)
#loc136 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":117:22)
#loc137 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":117:28)
#loc138 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":117:9)
#loc139 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":122:1)
#loc140 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":137:1)
#loc141 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":124:5)
#loc142 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":124:9)
#loc143 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":126:13)
#loc144 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":126:12)
#loc145 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":126:5)
#loc146 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":127:5)
#loc147 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":131:5)
#loc148 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":127:8)
#loc149 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":127:11)
#loc150 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":127:9)
#loc151 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":128:5)
#loc152 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":130:16)
#loc153 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":130:9)
#loc154 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":132:5)
#loc155 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":136:5)
#loc156 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":132:8)
#loc157 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":132:11)
#loc158 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":132:9)
#loc159 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":133:5)
#loc160 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":135:22)
#loc161 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":135:28)
#loc162 = loc("CWE369_Divide_by_Zero__int_zero_divide_03.c":135:9)
#loc163 = loc(fused[#loc1, #loc2])
#loc164 = loc(fused[#loc3, #loc4])
#loc165 = loc(fused[#loc5, #loc6])
#loc166 = loc(fused[#loc9, #loc7])
#loc167 = loc(fused[#loc10, #loc11])
#loc168 = loc(fused[#loc12, #loc13])
#loc169 = loc(fused[#loc15, #loc11])
#loc170 = loc(fused[#loc17, #loc16])
#loc171 = loc(fused[#loc18, #loc19])
#loc172 = loc(fused[#loc20, #loc21])
#loc173 = loc(fused[#loc23, #loc19])
#loc174 = loc(fused[#loc24, #loc25])
#loc175 = loc(fused[#loc27, #loc28])
#loc176 = loc(fused[#loc29, #loc30])
#loc177 = loc(fused[#loc31, #loc32])
#loc178 = loc(fused[#loc33, #loc34])
#loc179 = loc(fused[#loc35, #loc36])
#loc180 = loc(fused[#loc37, #loc38])
#loc181 = loc(fused[#loc41, #loc42])
#loc182 = loc(fused[#loc43, #loc44])
#loc183 = loc(fused[#loc47, #loc45])
#loc184 = loc(fused[#loc48, #loc49])
#loc185 = loc(fused[#loc50, #loc51])
#loc186 = loc(fused[#loc53, #loc49])
#loc187 = loc(fused[#loc55, #loc54])
#loc188 = loc(fused[#loc56, #loc57])
#loc189 = loc(fused[#loc58, #loc59])
#loc190 = loc(fused[#loc61, #loc62, #loc63, #loc57])
#loc191 = loc(fused[#loc65, #loc66])
#loc192 = loc(fused[#loc67, #loc68])
#loc193 = loc(fused[#loc70, #loc71, #loc72, #loc66])
#loc194 = loc(fused[#loc73, #loc74])
#loc195 = loc(fused[#loc77, #loc78])
#loc196 = loc(fused[#loc79, #loc80])
#loc197 = loc(fused[#loc83, #loc81])
#loc198 = loc(fused[#loc84, #loc85])
#loc199 = loc(fused[#loc86, #loc87])
#loc200 = loc(fused[#loc89, #loc85])
#loc201 = loc(fused[#loc91, #loc90])
#loc202 = loc(fused[#loc92, #loc93])
#loc203 = loc(fused[#loc94, #loc95])
#loc204 = loc(fused[#loc97, #loc93])
#loc205 = loc(fused[#loc98, #loc99])
#loc206 = loc(fused[#loc100, #loc101])
#loc207 = loc(fused[#loc103, #loc104, #loc105, #loc99])
#loc208 = loc(fused[#loc106, #loc107])
#loc209 = loc(fused[#loc111, #loc112])
#loc210 = loc(fused[#loc113, #loc114])
#loc211 = loc(fused[#loc117, #loc115])
#loc212 = loc(fused[#loc118, #loc119])
#loc213 = loc(fused[#loc120, #loc121])
#loc214 = loc(fused[#loc123, #loc124, #loc125, #loc119])
#loc215 = loc(fused[#loc129, #loc128])
#loc216 = loc(fused[#loc130, #loc131])
#loc217 = loc(fused[#loc132, #loc133])
#loc218 = loc(fused[#loc135, #loc131])
#loc219 = loc(fused[#loc136, #loc137])
#loc220 = loc(fused[#loc139, #loc140])
#loc221 = loc(fused[#loc141, #loc142])
#loc222 = loc(fused[#loc145, #loc143])
#loc223 = loc(fused[#loc146, #loc147])
#loc224 = loc(fused[#loc148, #loc149])
#loc225 = loc(fused[#loc151, #loc147])
#loc226 = loc(fused[#loc153, #loc152])
#loc227 = loc(fused[#loc154, #loc155])
#loc228 = loc(fused[#loc156, #loc157])
#loc229 = loc(fused[#loc159, #loc155])
#loc230 = loc(fused[#loc160, #loc161])
