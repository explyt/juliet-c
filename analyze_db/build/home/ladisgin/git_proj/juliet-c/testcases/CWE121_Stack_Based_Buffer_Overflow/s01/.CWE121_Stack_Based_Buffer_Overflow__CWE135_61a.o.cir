!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @CWE121_Stack_Based_Buffer_Overflow__CWE135_61b_badSource(!cir.ptr<!void>) -> !cir.ptr<!void> loc(#loc94)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc95)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc96)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc97)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_61_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc99)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc100)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc101)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc17)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc102)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc19)
    %5 = cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_61b_badSource(%4) : (!cir.ptr<!void>) -> !cir.ptr<!void> loc(#loc20)
    cir.store %5, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc103)
    cir.br ^bb1 loc(#loc104)
  ^bb1:  // pred: ^bb0
    %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc25)
    %7 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc26)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc26)
    %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc25)
    cir.store %9, %0 : !u64i, !cir.ptr<!u64i> loc(#loc99)
    %10 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc14)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc14)
    %13 = cir.binop(add, %10, %12) : !u64i loc(#loc14)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc14)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc14)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    cir.store %17, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc100)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc27)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc27)
    %20 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc28)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc28)
    %22 = cir.call @wcscpy(%19, %21) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc29)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc30)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc31)
    cir.br ^bb2 loc(#loc24)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc10)
  } loc(#loc98)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_61_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc106)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc107)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc105)
  cir.func private @CWE121_Stack_Based_Buffer_Overflow__CWE135_61b_goodG2BSource(!cir.ptr<!void>) -> !cir.ptr<!void> loc(#loc108)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc109)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc111)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc112)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc113)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc50)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc114)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc52)
    %5 = cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_61b_goodG2BSource(%4) : (!cir.ptr<!void>) -> !cir.ptr<!void> loc(#loc53)
    cir.store %5, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc115)
    cir.br ^bb1 loc(#loc116)
  ^bb1:  // pred: ^bb0
    %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc58)
    %7 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc59)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc59)
    %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc58)
    cir.store %9, %0 : !u64i, !cir.ptr<!u64i> loc(#loc111)
    %10 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc47)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc47)
    %13 = cir.binop(add, %10, %12) : !u64i loc(#loc47)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc47)
    %16 = cir.binop(mul, %13, %15) : !u64i loc(#loc47)
    %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc47)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc47)
    cir.store %18, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc112)
    %19 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc60)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc61)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc61)
    %22 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc62)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc62)
    %24 = cir.call @strcpy(%21, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc60)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc63)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    cir.br ^bb2 loc(#loc57)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc43)
  } loc(#loc110)
  cir.func private @CWE121_Stack_Based_Buffer_Overflow__CWE135_61b_goodB2GSource(!cir.ptr<!void>) -> !cir.ptr<!void> loc(#loc117)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc118)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc119)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc121)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc122)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc123)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc79)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc124)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc81)
    %5 = cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_61b_goodB2GSource(%4) : (!cir.ptr<!void>) -> !cir.ptr<!void> loc(#loc82)
    cir.store %5, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc125)
    cir.br ^bb1 loc(#loc126)
  ^bb1:  // pred: ^bb0
    %6 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc87)
    %7 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc88)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc88)
    %9 = cir.call @wcslen(%8) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc87)
    cir.store %9, %0 : !u64i, !cir.ptr<!u64i> loc(#loc121)
    %10 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc76)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc76)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc76)
    %13 = cir.binop(add, %10, %12) : !u64i loc(#loc76)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc76)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc76)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc76)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc76)
    cir.store %17, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc122)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc89)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc89)
    %20 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc90)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc90)
    %22 = cir.call @wcscpy(%19, %21) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc91)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc92)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc92)
    cir.call @printWLine(%24) : (!cir.ptr<!s32i>) -> () loc(#loc93)
    cir.br ^bb2 loc(#loc86)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc72)
  } loc(#loc120)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":28:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":28:76)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("/usr/include/wchar.h":98:1)
#loc6 = loc("/usr/include/wchar.h":100:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":30:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":42:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":37:9)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":37:45)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":38:9)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":38:31)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":32:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":32:12)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":33:12)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":33:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":34:69)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":34:12)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":34:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":34:73)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":35:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":41:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":37:26)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":37:41)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":39:22)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":39:28)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":39:15)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":40:27)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":40:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":82:1)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":86:1)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":84:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":84:13)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":85:5)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":85:13)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":49:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":49:80)
#loc40 = loc("/usr/include/string.h":141:1)
#loc41 = loc("/usr/include/string.h":142:14)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":51:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":63:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":58:9)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":58:45)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":59:9)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":59:31)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":53:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":53:12)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":54:12)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":54:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":55:73)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":55:12)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":55:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":55:77)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":56:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":62:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":58:26)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":58:41)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":60:15)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":60:22)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":60:28)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":61:27)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":61:9)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":66:1)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":66:80)
#loc67 = loc("/usr/include/wchar.h":247:1)
#loc68 = loc("/usr/include/wchar.h":247:51)
#loc69 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc70 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":68:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":80:1)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":75:9)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":75:48)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":76:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":76:31)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":70:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":70:12)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":71:12)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":71:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":72:73)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":72:12)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":72:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":72:77)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":73:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":79:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":75:26)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":75:44)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":77:22)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":77:28)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":77:15)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":78:31)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c":78:9)
#loc94 = loc(fused[#loc1, #loc2])
#loc95 = loc(fused[#loc3, #loc4])
#loc96 = loc(fused[#loc5, #loc6])
#loc97 = loc(fused[#loc7, #loc8])
#loc98 = loc(fused[#loc9, #loc10])
#loc99 = loc(fused[#loc11, #loc12])
#loc100 = loc(fused[#loc13, #loc14])
#loc101 = loc(fused[#loc15, #loc16])
#loc102 = loc(fused[#loc18, #loc17])
#loc103 = loc(fused[#loc21, #loc22])
#loc104 = loc(fused[#loc23, #loc24])
#loc105 = loc(fused[#loc32, #loc33])
#loc106 = loc(fused[#loc34, #loc35])
#loc107 = loc(fused[#loc36, #loc37])
#loc108 = loc(fused[#loc38, #loc39])
#loc109 = loc(fused[#loc40, #loc41])
#loc110 = loc(fused[#loc42, #loc43])
#loc111 = loc(fused[#loc44, #loc45])
#loc112 = loc(fused[#loc46, #loc47])
#loc113 = loc(fused[#loc48, #loc49])
#loc114 = loc(fused[#loc51, #loc50])
#loc115 = loc(fused[#loc54, #loc55])
#loc116 = loc(fused[#loc56, #loc57])
#loc117 = loc(fused[#loc65, #loc66])
#loc118 = loc(fused[#loc67, #loc68])
#loc119 = loc(fused[#loc69, #loc70])
#loc120 = loc(fused[#loc71, #loc72])
#loc121 = loc(fused[#loc73, #loc74])
#loc122 = loc(fused[#loc75, #loc76])
#loc123 = loc(fused[#loc77, #loc78])
#loc124 = loc(fused[#loc80, #loc79])
#loc125 = loc(fused[#loc83, #loc84])
#loc126 = loc(fused[#loc85, #loc86])
