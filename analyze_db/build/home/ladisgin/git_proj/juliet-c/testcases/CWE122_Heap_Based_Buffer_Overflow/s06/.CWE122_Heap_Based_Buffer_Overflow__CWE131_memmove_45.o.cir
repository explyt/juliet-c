!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc105)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc106)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_badData = #cir.ptr<null> : !cir.ptr<!s32i> {alignment = 8 : i64} loc(#loc107)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc109)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc110)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc13)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc14)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc14)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc13)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc111)
    cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc112)
    cir.br ^bb1 loc(#loc113)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc19)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc20)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc20)
    %10 = cir.cmp(eq, %7, %9) : !cir.ptr<!s32i>, !cir.bool loc(#loc114)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc115)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc22)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc24)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc22)
    cir.br ^bb3 loc(#loc18)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc18)
  ^bb4:  // pred: ^bb3
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
    %15 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_badData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc107)
    cir.store %14, %15 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc116)
    %16 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc117)
    cir.call %16() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    cir.return loc(#loc8)
  } loc(#loc108)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc119)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc30)
  } loc(#loc118)
  cir.func private @printIntLine(!s32i) loc(#loc120)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc121)
  cir.func no_proto internal private @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc123)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc124)
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_badData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc107)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
    cir.store %3, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc124)
    cir.br ^bb1 loc(#loc125)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc123)
    cir.store %4, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc123)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc45)
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc46)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc46)
    %9 = cir.const #cir.int<10> : !s32i loc(#loc47)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc47)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc126)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc127)
    cir.libc.memmove %12 bytes from %8 to %6 : !cir.ptr<!void>, !u64i loc(#loc128)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc53)
    %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc54)
    %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc55)
    %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc56)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc57)
    cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc56)
    cir.br ^bb2 loc(#loc44)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc38)
  } loc(#loc122)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_goodG2BData = #cir.ptr<null> : !cir.ptr<!s32i> {alignment = 8 : i64} loc(#loc129)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc131)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc64)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc132)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc66)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc67)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc67)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc133)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc134)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc66)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc135)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc136)
    cir.br ^bb1 loc(#loc137)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc75)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc75)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc138)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc139)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc77)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc79)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc77)
    cir.br ^bb3 loc(#loc73)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc73)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc80)
    %17 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_goodG2BData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc129)
    cir.store %16, %17 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc140)
    %18 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc141)
    cir.call %18() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc82)
    cir.return loc(#loc61)
  } loc(#loc130)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc143)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc144)
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_goodG2BData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc129)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc89)
    cir.store %3, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc144)
    cir.br ^bb1 loc(#loc145)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc143)
    cir.store %4, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc143)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc92)
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc93)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc93)
    %9 = cir.const #cir.int<10> : !s32i loc(#loc94)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc94)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc146)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc147)
    cir.libc.memmove %12 bytes from %8 to %6 : !cir.ptr<!void>, !u64i loc(#loc148)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc99)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc100)
    %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc101)
    %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc102)
    %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc103)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc104)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc104)
    cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc103)
    cir.br ^bb2 loc(#loc91)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc85)
  } loc(#loc142)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":19:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":19:14)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":36:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":45:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":38:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":38:11)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":39:12)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":39:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":41:19)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":41:26)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":41:28)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":41:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":42:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":42:33)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":42:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":42:17)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":42:23)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":42:24)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":42:30)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":42:29)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":43:68)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":43:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":44:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":44:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":75:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":78:1)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":77:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":77:13)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc35 = loc("/usr/include/stdlib.h":687:1)
#loc36 = loc("/usr/include/stdlib.h":687:32)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":24:1)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":34:1)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":28:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":28:28)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":26:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":26:18)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":27:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":33:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":30:17)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":30:23)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":30:31)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":30:34)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":30:44)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":30:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":30:45)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":31:22)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":31:27)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":31:28)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":31:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":32:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":32:14)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":20:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":20:14)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":64:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":73:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":66:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":66:11)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":67:12)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":67:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":69:19)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":69:26)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":69:29)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":69:39)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":69:40)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":69:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":70:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":70:33)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":70:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":70:17)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":70:23)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":70:24)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":70:30)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":70:29)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":71:72)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":71:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":72:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":72:17)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":52:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":62:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":56:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":56:28)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":54:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":54:18)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":55:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":61:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":58:17)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":58:23)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":58:31)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":58:34)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":58:44)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":58:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":58:45)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":59:22)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":59:27)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":59:28)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":59:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":60:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c":60:14)
#loc105 = loc(fused[#loc1, #loc2])
#loc106 = loc(fused[#loc3, #loc4])
#loc107 = loc(fused[#loc5, #loc6])
#loc108 = loc(fused[#loc7, #loc8])
#loc109 = loc(fused[#loc9, #loc10])
#loc110 = loc(fused[#loc12, #loc11])
#loc111 = loc(fused[#loc13, #loc15])
#loc112 = loc(fused[#loc16, #loc15])
#loc113 = loc(fused[#loc17, #loc18])
#loc114 = loc(fused[#loc19, #loc20])
#loc115 = loc(fused[#loc21, #loc18])
#loc116 = loc(fused[#loc26, #loc25])
#loc117 = loc(fused[#loc27, #loc28])
#loc118 = loc(fused[#loc29, #loc30])
#loc119 = loc(fused[#loc31, #loc32])
#loc120 = loc(fused[#loc33, #loc34])
#loc121 = loc(fused[#loc35, #loc36])
#loc122 = loc(fused[#loc37, #loc38])
#loc123 = loc(fused[#loc39, #loc40])
#loc124 = loc(fused[#loc41, #loc42])
#loc125 = loc(fused[#loc43, #loc44])
#loc126 = loc(fused[#loc48, #loc49])
#loc127 = loc(fused[#loc47, #loc49])
#loc128 = loc(fused[#loc50, #loc51])
#loc129 = loc(fused[#loc58, #loc59])
#loc130 = loc(fused[#loc60, #loc61])
#loc131 = loc(fused[#loc62, #loc63])
#loc132 = loc(fused[#loc65, #loc64])
#loc133 = loc(fused[#loc68, #loc69])
#loc134 = loc(fused[#loc67, #loc69])
#loc135 = loc(fused[#loc66, #loc70])
#loc136 = loc(fused[#loc71, #loc70])
#loc137 = loc(fused[#loc72, #loc73])
#loc138 = loc(fused[#loc74, #loc75])
#loc139 = loc(fused[#loc76, #loc73])
#loc140 = loc(fused[#loc81, #loc80])
#loc141 = loc(fused[#loc82, #loc83])
#loc142 = loc(fused[#loc84, #loc85])
#loc143 = loc(fused[#loc86, #loc87])
#loc144 = loc(fused[#loc88, #loc89])
#loc145 = loc(fused[#loc90, #loc91])
#loc146 = loc(fused[#loc95, #loc96])
#loc147 = loc(fused[#loc94, #loc96])
#loc148 = loc(fused[#loc97, #loc98])
