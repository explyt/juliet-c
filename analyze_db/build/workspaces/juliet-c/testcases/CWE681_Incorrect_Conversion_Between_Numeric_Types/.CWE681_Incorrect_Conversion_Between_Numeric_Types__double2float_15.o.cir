!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc146)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc147)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc148)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc149)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printFloatLine(!cir.float) loc(#loc150)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc17)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc154)
            %2 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc155)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc24)
            %4 = cir.cast(int_to_float, %3 : !s32i), !cir.double loc(#loc24)
            cir.store %4, %2 : !cir.double, !cir.ptr<!cir.double> loc(#loc155)
            cir.scope {
              %7 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc27)
              %8 = cir.const #cir.int<256> : !s32i loc(#loc28)
              %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc147)
              %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc29)
              %11 = cir.call @fgets(%7, %8, %10) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc30)
              %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
              %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
              %14 = cir.cmp(ne, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc157)
              cir.if %14 {
                %15 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc35)
                %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc36)
                cir.store %16, %2 : !cir.double, !cir.ptr<!cir.double> loc(#loc159)
              } else {
                %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
                %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc39)
              } loc(#loc158)
            } loc(#loc156)
            %5 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc40)
            %6 = cir.cast(floating, %5 : !cir.double), !cir.float loc(#loc40)
            cir.call @printFloatLine(%6) : (!cir.float) -> () loc(#loc41)
          } loc(#loc153)
          cir.break loc(#loc42)
        } loc(#loc18)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc12)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc12)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc44)
          cir.break loc(#loc45)
        } loc(#loc43)
        cir.yield loc(#loc15)
      } loc(#loc15)
    } loc(#loc152)
    cir.return loc(#loc14)
  } loc(#loc151)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc161)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc162)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc50)
    cir.return loc(#loc47)
  } loc(#loc160)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Value is too small or large to be represented as a float\00" : !cir.array<!s8i x 57>> : !cir.array<!s8i x 57> {alignment = 1 : i64} loc(#loc52)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc57)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc59)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc59)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc60)
          cir.break loc(#loc61)
        } loc(#loc58)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc166)
            %2 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc167)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc68)
            %4 = cir.cast(int_to_float, %3 : !s32i), !cir.double loc(#loc68)
            cir.store %4, %2 : !cir.double, !cir.ptr<!cir.double> loc(#loc167)
            cir.scope {
              %5 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc71)
              %6 = cir.const #cir.int<256> : !s32i loc(#loc72)
              %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc147)
              %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc73)
              %9 = cir.call @fgets(%5, %6, %8) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc74)
              %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc75)
              %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc75)
              %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc169)
              cir.if %12 {
                %13 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc79)
                %14 = cir.call @atof(%13) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc80)
                cir.store %14, %2 : !cir.double, !cir.ptr<!cir.double> loc(#loc171)
              } else {
                %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc83)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc83)
                cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc84)
              } loc(#loc170)
            } loc(#loc168)
            cir.scope {
              %5 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc87)
              %6 = cir.const #cir.fp<3.40282347E+38> : !cir.float loc(#loc88)
              %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc88)
              %8 = cir.cmp(gt, %5, %7) : !cir.double, !cir.bool loc(#loc173)
              %9 = cir.ternary(%8, true {
                %10 = cir.const #true loc(#loc89)
                cir.yield %10 : !cir.bool loc(#loc89)
              }, false {
                %10 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc90)
                %11 = cir.const #cir.fp<1.17549435E-38> : !cir.float loc(#loc91)
                %12 = cir.cast(floating, %11 : !cir.float), !cir.double loc(#loc91)
                %13 = cir.cmp(lt, %10, %12) : !cir.double, !cir.bool loc(#loc174)
                %14 = cir.ternary(%13, true {
                  %15 = cir.const #true loc(#loc89)
                  cir.yield %15 : !cir.bool loc(#loc89)
                }, false {
                  %15 = cir.const #false loc(#loc89)
                  cir.yield %15 : !cir.bool loc(#loc89)
                }) : (!cir.bool) -> !cir.bool loc(#loc89)
                cir.yield %14 : !cir.bool loc(#loc89)
              }) : (!cir.bool) -> !cir.bool loc(#loc89)
              cir.if %9 {
                %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 57>> loc(#loc52)
                %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 57>>), !cir.ptr<!s8i> loc(#loc52)
                cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc95)
              } else {
                %10 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc96)
                %11 = cir.cast(floating, %10 : !cir.double), !cir.float loc(#loc96)
                cir.call @printFloatLine(%11) : (!cir.float) -> () loc(#loc97)
              } loc(#loc175)
            } loc(#loc172)
          } loc(#loc165)
          cir.break loc(#loc98)
        } loc(#loc62)
        cir.yield loc(#loc55)
      } loc(#loc55)
    } loc(#loc164)
    cir.return loc(#loc54)
  } loc(#loc163)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc103)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc179)
            %2 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc180)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc110)
            %4 = cir.cast(int_to_float, %3 : !s32i), !cir.double loc(#loc110)
            cir.store %4, %2 : !cir.double, !cir.ptr<!cir.double> loc(#loc180)
            cir.scope {
              %5 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc113)
              %6 = cir.const #cir.int<256> : !s32i loc(#loc114)
              %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc147)
              %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc115)
              %9 = cir.call @fgets(%5, %6, %8) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc116)
              %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc117)
              %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc117)
              %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc182)
              cir.if %12 {
                %13 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc121)
                %14 = cir.call @atof(%13) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc122)
                cir.store %14, %2 : !cir.double, !cir.ptr<!cir.double> loc(#loc184)
              } else {
                %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc125)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc125)
                cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc126)
              } loc(#loc183)
            } loc(#loc181)
            cir.scope {
              %5 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc129)
              %6 = cir.const #cir.fp<3.40282347E+38> : !cir.float loc(#loc130)
              %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc130)
              %8 = cir.cmp(gt, %5, %7) : !cir.double, !cir.bool loc(#loc186)
              %9 = cir.ternary(%8, true {
                %10 = cir.const #true loc(#loc131)
                cir.yield %10 : !cir.bool loc(#loc131)
              }, false {
                %10 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc132)
                %11 = cir.const #cir.fp<1.17549435E-38> : !cir.float loc(#loc133)
                %12 = cir.cast(floating, %11 : !cir.float), !cir.double loc(#loc133)
                %13 = cir.cmp(lt, %10, %12) : !cir.double, !cir.bool loc(#loc187)
                %14 = cir.ternary(%13, true {
                  %15 = cir.const #true loc(#loc131)
                  cir.yield %15 : !cir.bool loc(#loc131)
                }, false {
                  %15 = cir.const #false loc(#loc131)
                  cir.yield %15 : !cir.bool loc(#loc131)
                }) : (!cir.bool) -> !cir.bool loc(#loc131)
                cir.yield %14 : !cir.bool loc(#loc131)
              }) : (!cir.bool) -> !cir.bool loc(#loc131)
              cir.if %9 {
                %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 57>> loc(#loc137)
                %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 57>>), !cir.ptr<!s8i> loc(#loc137)
                cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc138)
              } else {
                %10 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc139)
                %11 = cir.cast(floating, %10 : !cir.double), !cir.float loc(#loc139)
                cir.call @printFloatLine(%11) : (!cir.float) -> () loc(#loc140)
              } loc(#loc188)
            } loc(#loc185)
          } loc(#loc178)
          cir.break loc(#loc141)
        } loc(#loc104)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc143)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc143)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc144)
          cir.break loc(#loc145)
        } loc(#loc142)
        cir.yield loc(#loc101)
      } loc(#loc101)
    } loc(#loc177)
    cir.return loc(#loc100)
  } loc(#loc176)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":102:1)
#loc6 = loc("/usr/include/stdlib.h":103:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":43:23)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":22:1)
#loc11 = loc("../../testcasesupport/std_testcase_io.h":22:39)
#loc12 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":51:19)
#loc13 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":23:1)
#loc14 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":54:1)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":25:5)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":53:5)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":25:12)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":27:5)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":28:5)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":47:5)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":29:9)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":29:41)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":30:9)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":30:31)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":36:9)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":44:9)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":36:19)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":36:32)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":36:49)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":36:13)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":36:59)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":37:9)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":40:9)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":42:9)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":39:33)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":39:28)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":39:13)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":39:44)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":43:13)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":46:31)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":46:9)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":48:5)
#loc43 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":49:5)
#loc44 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":51:9)
#loc45 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":52:9)
#loc46 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":142:1)
#loc47 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":146:1)
#loc48 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":144:5)
#loc49 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":144:11)
#loc50 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":145:5)
#loc51 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":145:11)
#loc52 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":90:23)
#loc53 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":61:1)
#loc54 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":99:1)
#loc55 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":63:5)
#loc56 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":98:5)
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":63:12)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":65:5)
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":67:19)
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":67:9)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":68:9)
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":69:5)
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":70:5)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":96:5)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":71:9)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":71:41)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":72:9)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":72:31)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":78:9)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":86:9)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":78:19)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":78:32)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":78:49)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":78:13)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":78:59)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":79:9)
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":82:9)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":84:9)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":81:33)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":81:28)
#loc81 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":81:13)
#loc82 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":81:44)
#loc83 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":85:23)
#loc84 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":85:13)
#loc85 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":88:9)
#loc86 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":95:9)
#loc87 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":88:13)
#loc88 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":88:28)
#loc89 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":88:36)
#loc90 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":88:39)
#loc91 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":88:54)
#loc92 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":89:9)
#loc93 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":91:9)
#loc94 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":93:9)
#loc95 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":90:13)
#loc96 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":94:35)
#loc97 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":94:13)
#loc98 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":97:5)
#loc99 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":102:1)
#loc100 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":140:1)
#loc101 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":104:5)
#loc102 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":139:5)
#loc103 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":104:12)
#loc104 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":106:5)
#loc105 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":107:5)
#loc106 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":133:5)
#loc107 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":108:9)
#loc108 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":108:41)
#loc109 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":109:9)
#loc110 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":109:31)
#loc111 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":115:9)
#loc112 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":123:9)
#loc113 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":115:19)
#loc114 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":115:32)
#loc115 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":115:49)
#loc116 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":115:13)
#loc117 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":115:59)
#loc118 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":116:9)
#loc119 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":119:9)
#loc120 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":121:9)
#loc121 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":118:33)
#loc122 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":118:28)
#loc123 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":118:13)
#loc124 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":118:44)
#loc125 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":122:23)
#loc126 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":122:13)
#loc127 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":125:9)
#loc128 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":132:9)
#loc129 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":125:13)
#loc130 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":125:28)
#loc131 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":125:36)
#loc132 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":125:39)
#loc133 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":125:54)
#loc134 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":126:9)
#loc135 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":128:9)
#loc136 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":130:9)
#loc137 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":127:23)
#loc138 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":127:13)
#loc139 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":131:35)
#loc140 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":131:13)
#loc141 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":134:5)
#loc142 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":135:5)
#loc143 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":137:19)
#loc144 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":137:9)
#loc145 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15.c":138:9)
#loc146 = loc(fused[#loc1, #loc2])
#loc147 = loc(fused[#loc3, #loc4])
#loc148 = loc(fused[#loc5, #loc6])
#loc149 = loc(fused[#loc7, #loc8])
#loc150 = loc(fused[#loc10, #loc11])
#loc151 = loc(fused[#loc13, #loc14])
#loc152 = loc(fused[#loc15, #loc16])
#loc153 = loc(fused[#loc19, #loc20])
#loc154 = loc(fused[#loc21, #loc22])
#loc155 = loc(fused[#loc23, #loc24])
#loc156 = loc(fused[#loc25, #loc26])
#loc157 = loc(fused[#loc30, #loc31])
#loc158 = loc(fused[#loc32, #loc33, #loc34, #loc26])
#loc159 = loc(fused[#loc37, #loc38])
#loc160 = loc(fused[#loc46, #loc47])
#loc161 = loc(fused[#loc48, #loc49])
#loc162 = loc(fused[#loc50, #loc51])
#loc163 = loc(fused[#loc53, #loc54])
#loc164 = loc(fused[#loc55, #loc56])
#loc165 = loc(fused[#loc63, #loc64])
#loc166 = loc(fused[#loc65, #loc66])
#loc167 = loc(fused[#loc67, #loc68])
#loc168 = loc(fused[#loc69, #loc70])
#loc169 = loc(fused[#loc74, #loc75])
#loc170 = loc(fused[#loc76, #loc77, #loc78, #loc70])
#loc171 = loc(fused[#loc81, #loc82])
#loc172 = loc(fused[#loc85, #loc86])
#loc173 = loc(fused[#loc87, #loc88])
#loc174 = loc(fused[#loc90, #loc91])
#loc175 = loc(fused[#loc92, #loc93, #loc94, #loc86])
#loc176 = loc(fused[#loc99, #loc100])
#loc177 = loc(fused[#loc101, #loc102])
#loc178 = loc(fused[#loc105, #loc106])
#loc179 = loc(fused[#loc107, #loc108])
#loc180 = loc(fused[#loc109, #loc110])
#loc181 = loc(fused[#loc111, #loc112])
#loc182 = loc(fused[#loc116, #loc117])
#loc183 = loc(fused[#loc118, #loc119, #loc120, #loc112])
#loc184 = loc(fused[#loc123, #loc124])
#loc185 = loc(fused[#loc127, #loc128])
#loc186 = loc(fused[#loc129, #loc130])
#loc187 = loc(fused[#loc132, #loc133])
#loc188 = loc(fused[#loc134, #loc135, #loc136, #loc128])
