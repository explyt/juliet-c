!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE758_Undefined_Behavior/CWE758_Undefined_Behavior__char_alloca_use_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc90)
  cir.func private @printHexCharLine(!s8i) loc(#loc91)
  cir.func no_proto @CWE758_Undefined_Behavior__char_alloca_use_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["pointer", init] {alignment = 8 : i64} loc(#loc93)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc94)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc95)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["pointer", init] {alignment = 8 : i64} loc(#loc96)
    %4 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc97)
    cir.br ^bb1 loc(#loc98)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc99)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc99)
    %7 = cir.call %6() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %8 ^bb2, ^bb5 loc(#loc100)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc101)
  ^bb3:  // pred: ^bb2
    %9 = cir.const #cir.int<1> : !u64i loc(#loc8)
    %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc8)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc8)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc8)
    cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc93)
    %13 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc10)
    %14 = cir.load %13 : !cir.ptr<!s8i>, !s8i loc(#loc26)
    cir.store %14, %1 : !s8i, !cir.ptr<!s8i> loc(#loc94)
    %15 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc27)
    cir.call @printHexCharLine(%15) : (!s8i) -> () loc(#loc28)
    cir.br ^bb4 loc(#loc25)
  ^bb4:  // pred: ^bb3
    cir.br ^bb10 loc(#loc22)
  ^bb5:  // pred: ^bb1
    cir.br ^bb6 loc(#loc102)
  ^bb6:  // pred: ^bb5
    %16 = cir.const #cir.int<1> : !u64i loc(#loc14)
    %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc14)
    cir.store %19, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc96)
    %20 = cir.const #cir.int<5> : !s32i loc(#loc31)
    %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc31)
    cir.store %21, %2 : !s8i, !cir.ptr<!s8i> loc(#loc103)
    %22 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc33)
    %23 = cir.load deref %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
    cir.store %22, %23 : !s8i, !cir.ptr<!s8i> loc(#loc104)
    cir.br ^bb7 loc(#loc105)
  ^bb7:  // pred: ^bb6
    %24 = cir.load deref %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
    %25 = cir.load %24 : !cir.ptr<!s8i>, !s8i loc(#loc38)
    cir.store %25, %4 : !s8i, !cir.ptr<!s8i> loc(#loc97)
    %26 = cir.load %4 : !cir.ptr<!s8i>, !s8i loc(#loc39)
    cir.call @printHexCharLine(%26) : (!s8i) -> () loc(#loc40)
    cir.br ^bb8 loc(#loc37)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc30)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc18)
  ^bb10:  // 2 preds: ^bb4, ^bb9
    cir.br ^bb11 loc(#loc18)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc6)
  } loc(#loc92)
  cir.func no_proto @CWE758_Undefined_Behavior__char_alloca_use_12_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc107)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    cir.return loc(#loc42)
  } loc(#loc106)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc109)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["pointer", init] {alignment = 8 : i64} loc(#loc110)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc111)
    %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc112)
    %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["pointer", init] {alignment = 8 : i64} loc(#loc113)
    %5 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc114)
    cir.br ^bb1 loc(#loc115)
  ^bb1:  // pred: ^bb0
    %6 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc116)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc116)
    %8 = cir.call %7() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc61)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc61)
    cir.brcond %9 ^bb2, ^bb7 loc(#loc117)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc118)
  ^bb3:  // pred: ^bb2
    %10 = cir.const #cir.int<1> : !u64i loc(#loc50)
    %11 = cir.alloca !u8i, !cir.ptr<!u8i>, %10 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc50)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc50)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc50)
    cir.store %13, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc110)
    %14 = cir.const #cir.int<5> : !s32i loc(#loc68)
    %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc68)
    cir.store %15, %0 : !s8i, !cir.ptr<!s8i> loc(#loc119)
    %16 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc70)
    %17 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
    cir.store %16, %17 : !s8i, !cir.ptr<!s8i> loc(#loc120)
    cir.br ^bb4 loc(#loc121)
  ^bb4:  // pred: ^bb3
    %18 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
    %19 = cir.load %18 : !cir.ptr<!s8i>, !s8i loc(#loc75)
    cir.store %19, %2 : !s8i, !cir.ptr<!s8i> loc(#loc111)
    %20 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc76)
    cir.call @printHexCharLine(%20) : (!s8i) -> () loc(#loc77)
    cir.br ^bb5 loc(#loc74)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc67)
  ^bb6:  // pred: ^bb5
    cir.br ^bb12 loc(#loc64)
  ^bb7:  // pred: ^bb1
    cir.br ^bb8 loc(#loc122)
  ^bb8:  // pred: ^bb7
    %21 = cir.const #cir.int<1> : !u64i loc(#loc56)
    %22 = cir.alloca !u8i, !cir.ptr<!u8i>, %21 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc56)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc56)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc56)
    cir.store %24, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc113)
    %25 = cir.const #cir.int<5> : !s32i loc(#loc80)
    %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc80)
    cir.store %26, %3 : !s8i, !cir.ptr<!s8i> loc(#loc123)
    %27 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc82)
    %28 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc83)
    cir.store %27, %28 : !s8i, !cir.ptr<!s8i> loc(#loc124)
    cir.br ^bb9 loc(#loc125)
  ^bb9:  // pred: ^bb8
    %29 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
    %30 = cir.load %29 : !cir.ptr<!s8i>, !s8i loc(#loc87)
    cir.store %30, %5 : !s8i, !cir.ptr<!s8i> loc(#loc114)
    %31 = cir.load %5 : !cir.ptr<!s8i>, !s8i loc(#loc88)
    cir.call @printHexCharLine(%31) : (!s8i) -> () loc(#loc89)
    cir.br ^bb10 loc(#loc86)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc79)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc60)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc60)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc46)
  } loc(#loc108)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE758_Undefined_Behavior/CWE758_Undefined_Behavior__char_alloca_use_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":20:1)
#loc6 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":43:1)
#loc7 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":25:13)
#loc8 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":25:38)
#loc9 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":26:13)
#loc10 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":26:26)
#loc11 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":33:13)
#loc12 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":33:18)
#loc13 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":34:13)
#loc14 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":34:38)
#loc15 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":38:17)
#loc16 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":38:30)
#loc17 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":22:5)
#loc18 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":42:5)
#loc19 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":22:8)
#loc20 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":22:33)
#loc21 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":23:5)
#loc22 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":29:5)
#loc23 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":31:5)
#loc24 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":24:9)
#loc25 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":28:9)
#loc26 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":26:25)
#loc27 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":27:30)
#loc28 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":27:13)
#loc29 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":32:9)
#loc30 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":41:9)
#loc31 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":35:20)
#loc32 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":35:13)
#loc33 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":36:24)
#loc34 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":36:14)
#loc35 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":36:13)
#loc36 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":37:13)
#loc37 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":40:13)
#loc38 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":38:29)
#loc39 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":39:34)
#loc40 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":39:17)
#loc41 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":80:1)
#loc42 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":83:1)
#loc43 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":82:5)
#loc44 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":82:11)
#loc45 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":50:1)
#loc46 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":78:1)
#loc47 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":55:13)
#loc48 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":55:18)
#loc49 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":56:13)
#loc50 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":56:38)
#loc51 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":60:17)
#loc52 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":60:30)
#loc53 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":68:13)
#loc54 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":68:18)
#loc55 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":69:13)
#loc56 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":69:38)
#loc57 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":73:17)
#loc58 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":73:30)
#loc59 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":52:5)
#loc60 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":77:5)
#loc61 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":52:8)
#loc62 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":52:33)
#loc63 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":53:5)
#loc64 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":64:5)
#loc65 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":66:5)
#loc66 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":54:9)
#loc67 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":63:9)
#loc68 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":57:20)
#loc69 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":57:13)
#loc70 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":58:24)
#loc71 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":58:14)
#loc72 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":58:13)
#loc73 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":59:13)
#loc74 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":62:13)
#loc75 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":60:29)
#loc76 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":61:34)
#loc77 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":61:17)
#loc78 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":67:9)
#loc79 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":76:9)
#loc80 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":70:20)
#loc81 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":70:13)
#loc82 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":71:24)
#loc83 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":71:14)
#loc84 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":71:13)
#loc85 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":72:13)
#loc86 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":75:13)
#loc87 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":73:29)
#loc88 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":74:34)
#loc89 = loc("CWE758_Undefined_Behavior__char_alloca_use_12.c":74:17)
#loc90 = loc(fused[#loc1, #loc2])
#loc91 = loc(fused[#loc3, #loc4])
#loc92 = loc(fused[#loc5, #loc6])
#loc93 = loc(fused[#loc7, #loc8])
#loc94 = loc(fused[#loc9, #loc10])
#loc95 = loc(fused[#loc11, #loc12])
#loc96 = loc(fused[#loc13, #loc14])
#loc97 = loc(fused[#loc15, #loc16])
#loc98 = loc(fused[#loc17, #loc18])
#loc99 = loc(fused[#loc19, #loc20])
#loc100 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc101 = loc(fused[#loc24, #loc25])
#loc102 = loc(fused[#loc29, #loc30])
#loc103 = loc(fused[#loc32, #loc31])
#loc104 = loc(fused[#loc35, #loc33])
#loc105 = loc(fused[#loc36, #loc37])
#loc106 = loc(fused[#loc41, #loc42])
#loc107 = loc(fused[#loc43, #loc44])
#loc108 = loc(fused[#loc45, #loc46])
#loc109 = loc(fused[#loc47, #loc48])
#loc110 = loc(fused[#loc49, #loc50])
#loc111 = loc(fused[#loc51, #loc52])
#loc112 = loc(fused[#loc53, #loc54])
#loc113 = loc(fused[#loc55, #loc56])
#loc114 = loc(fused[#loc57, #loc58])
#loc115 = loc(fused[#loc59, #loc60])
#loc116 = loc(fused[#loc61, #loc62])
#loc117 = loc(fused[#loc63, #loc64, #loc65, #loc60])
#loc118 = loc(fused[#loc66, #loc67])
#loc119 = loc(fused[#loc69, #loc68])
#loc120 = loc(fused[#loc72, #loc70])
#loc121 = loc(fused[#loc73, #loc74])
#loc122 = loc(fused[#loc78, #loc79])
#loc123 = loc(fused[#loc81, #loc80])
#loc124 = loc(fused[#loc84, #loc82])
#loc125 = loc(fused[#loc85, #loc86])
