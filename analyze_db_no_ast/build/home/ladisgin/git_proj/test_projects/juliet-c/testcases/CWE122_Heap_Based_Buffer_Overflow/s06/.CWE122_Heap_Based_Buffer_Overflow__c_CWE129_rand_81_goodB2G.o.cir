!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":25:67)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":25:74)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":25:78)
#true = #cir.bool<true> : !cir.bool
#loc84 = loc(fused[#loc15, #loc16])
!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_813A3ACWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_base = !cir.struct<class "CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81::CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_base" {!cir.ptr<!cir.ptr<!cir.func<!u32i ()>>>} #cir.record.decl.ast>
!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_813A3ACWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G = !cir.struct<class "CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81::CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G" {!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_813A3ACWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_base} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc78)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc79)
  cir.func private  @printIntLine(!s32i) loc(#loc80)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc81)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc82)
  cir.func  @_ZNK51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_8159CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G6actionEi(%arg0: !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_813A3ACWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G> loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":25:67), %arg1: !s32i loc(fused[#loc15, #loc16])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_813A3ACWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_813A3ACWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G>>, ["this", init] {alignment = 8 : i64} loc(#loc14)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc84)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_813A3ACWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_813A3ACWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G>> loc(#loc17)
    cir.store %arg1, %1 : !s32i, !cir.ptr<!s32i> loc(#loc17)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_813A3ACWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G>>, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_813A3ACWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G> loc(#loc14)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc86)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc87)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc24)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc25)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc25)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc88)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc89)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc90)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc87)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc30)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc31)
        %17 = cir.cmp(eq, %15, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc92)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc33)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc34)
          %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc35)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
        } loc(#loc93)
      } loc(#loc91)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc38)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc95)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc40)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc41)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc96)
          cir.condition(%18) loc(#loc96)
        } body {
          %16 = cir.const #cir.int<0> : !s32i loc(#loc42)
          %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
          %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc44)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc45)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc97)
          cir.yield loc(#loc37)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc46)
          %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc47)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc98)
          cir.yield loc(#loc94)
        } loc(#loc94)
      } loc(#loc94)
      cir.scope {
        %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc50)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc51)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc100)
        %18 = cir.ternary(%17, true {
          %19 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc53)
          %20 = cir.const #cir.int<10> : !s32i loc(#loc54)
          %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc101)
          %22 = cir.ternary(%21, true {
            %23 = cir.const #true loc(#loc52)
            cir.yield %23 : !cir.bool loc(#loc52)
          }, false {
            %23 = cir.const #false loc(#loc52)
            cir.yield %23 : !cir.bool loc(#loc52)
          }) : (!cir.bool) -> !cir.bool loc(#loc52)
          cir.yield %22 : !cir.bool loc(#loc52)
        }, false {
          %19 = cir.const #false loc(#loc52)
          cir.yield %19 : !cir.bool loc(#loc52)
        }) : (!cir.bool) -> !cir.bool loc(#loc52)
        cir.if %18 {
          %19 = cir.const #cir.int<1> : !s32i loc(#loc59)
          %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
          %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc61)
          %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc62)
          cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc103)
          cir.scope {
            %23 = cir.const #cir.int<0> : !s32i loc(#loc65)
            cir.store %23, %3 : !s32i, !cir.ptr<!s32i> loc(#loc105)
            cir.for : cond {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc67)
              %25 = cir.const #cir.int<10> : !s32i loc(#loc68)
              %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc106)
              cir.condition(%26) loc(#loc106)
            } body {
              %24 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc69)
              %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc70)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc71)
              %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc69)
              cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc72)
              cir.yield loc(#loc64)
            } step {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc73)
              %25 = cir.unary(inc, %24) : !s32i, !s32i loc(#loc74)
              cir.store %25, %3 : !s32i, !cir.ptr<!s32i> loc(#loc107)
              cir.yield loc(#loc104)
            } loc(#loc104)
          } loc(#loc104)
        } else {
          %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc9)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc75)
        } loc(#loc102)
      } loc(#loc99)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc76)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc77)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc77)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc76)
    } loc(#loc85)
    cir.return loc(#loc13)
  } loc(#loc83)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":48:23)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":25:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":52:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":26:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":27:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":51:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":28:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":28:13)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":29:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":29:54)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":29:31)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":29:38)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":29:43)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":29:53)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":30:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":30:39)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":30:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":30:23)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":30:29)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":30:30)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":30:36)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":30:35)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":32:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":35:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":32:18)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":32:14)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":32:21)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":32:25)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":34:25)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":34:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":34:20)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":34:21)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":32:30)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":32:29)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":37:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":49:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":37:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":37:21)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":37:23)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":37:26)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":37:34)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":37:36)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":38:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":45:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":47:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":39:28)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":39:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":39:20)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":39:24)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":41:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":44:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":41:21)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":41:17)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":41:24)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":41:28)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":43:30)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":43:37)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":43:38)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":43:17)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":41:33)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":41:32)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":48:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":50:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_goodB2G.cpp":50:14)
#loc78 = loc(fused[#loc1, #loc2])
#loc79 = loc(fused[#loc3, #loc4])
#loc80 = loc(fused[#loc5, #loc6])
#loc81 = loc(fused[#loc7, #loc8])
#loc82 = loc(fused[#loc10, #loc11])
#loc83 = loc(fused[#loc12, #loc13])
#loc85 = loc(fused[#loc18, #loc19])
#loc86 = loc(fused[#loc20, #loc21])
#loc87 = loc(fused[#loc22, #loc23])
#loc88 = loc(fused[#loc26, #loc27])
#loc89 = loc(fused[#loc25, #loc27])
#loc90 = loc(fused[#loc24, #loc23])
#loc91 = loc(fused[#loc28, #loc29])
#loc92 = loc(fused[#loc30, #loc31])
#loc93 = loc(fused[#loc32, #loc29])
#loc94 = loc(fused[#loc36, #loc37])
#loc95 = loc(fused[#loc39, #loc38])
#loc96 = loc(fused[#loc40, #loc41])
#loc97 = loc(fused[#loc43, #loc42])
#loc98 = loc(fused[#loc47, #loc46])
#loc99 = loc(fused[#loc48, #loc49])
#loc100 = loc(fused[#loc50, #loc51])
#loc101 = loc(fused[#loc53, #loc55])
#loc102 = loc(fused[#loc56, #loc57, #loc58, #loc49])
#loc103 = loc(fused[#loc60, #loc59])
#loc104 = loc(fused[#loc63, #loc64])
#loc105 = loc(fused[#loc66, #loc65])
#loc106 = loc(fused[#loc67, #loc68])
#loc107 = loc(fused[#loc74, #loc73])
