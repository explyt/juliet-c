!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":142:10)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":142:14)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":142:20)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":142:32)
#true = #cir.bool<true> : !cir.bool
#loc220 = loc(fused[#loc77, #loc78])
#loc221 = loc(fused[#loc79, #loc80])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc191)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc192)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc193)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc194)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc195)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc197)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc198)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc199)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc198)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc199)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc20)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc202)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc202)
      cir.scope {
        %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc204)
        %10 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc204)
        cir.store %10, %9 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc204)
        cir.scope {
          %11 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc33)
          %12 = cir.const #cir.int<3> : !s32i loc(#loc34)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc34)
          %14 = cir.const #cir.int<4> : !u64i loc(#loc34)
          %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc34)
          %16 = cir.const #cir.int<2> : !s32i loc(#loc34)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc34)
          %18 = cir.binop(add, %15, %17) : !u64i loc(#loc34)
          %19 = cir.cast(integral, %18 : !u64i), !s32i loc(#loc34)
          %20 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc192)
          %21 = cir.load %20 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc35)
          %22 = cir.call @fgets(%11, %19, %21) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc36)
          %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc37)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc37)
          %25 = cir.cmp(ne, %22, %24) : !cir.ptr<!s8i>, !cir.bool loc(#loc206)
          cir.if %25 {
            %26 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc41)
            %27 = cir.call @atoi(%26) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc42)
            cir.store %27, %4 : !s32i, !cir.ptr<!s32i> loc(#loc208)
          } else {
            %26 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
            %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
            cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc45)
          } loc(#loc207)
        } loc(#loc205)
      } loc(#loc203)
      %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc46)
      %8 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
      cir.store %7, %8 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    } loc(#loc201)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc211)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc53)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc211)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc213)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc58)
        %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc57)
        %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc58)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc213)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc59)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc60)
      } loc(#loc212)
    } loc(#loc210)
    cir.return loc(#loc13)
  } loc(#loc196)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc215)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc216)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    cir.return loc(#loc62)
  } loc(#loc214)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc217)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc218)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc74)
  cir.func @main(%arg0: !s32i loc(fused[#loc77, #loc78]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc79, #loc80])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc220)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc221)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc76)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc81)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc82)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc83)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc83)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc84)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc71)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_fgets_square_32_good : !cir.ptr<!cir.func<!void ()>> loc(#loc222)
    cir.call @CWE190_Integer_Overflow__int_fgets_square_32_good() : () -> () loc(#loc86)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc72)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc73)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_fgets_square_32_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call @CWE190_Integer_Overflow__int_fgets_square_32_bad() : () -> () loc(#loc90)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc74)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc93)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc224)
    cir.return %17 : !s32i loc(#loc224)
  } loc(#loc219)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc226)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc227)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc228)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc227)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc228)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc103)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc231)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc108)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc109)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc231)
      %7 = cir.const #cir.int<2> : !s32i loc(#loc110)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc232)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc112)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc113)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc233)
    } loc(#loc230)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc235)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc118)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc119)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc235)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc237)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc124)
        %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc123)
        %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc124)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc237)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc125)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc126)
      } loc(#loc236)
    } loc(#loc234)
    cir.return loc(#loc96)
  } loc(#loc225)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc127)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc128)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc239)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc240)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc241)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc240)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc241)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc137)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc242)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc244)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc142)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc143)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc244)
      cir.scope {
        %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc246)
        %10 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc246)
        cir.store %10, %9 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc246)
        cir.scope {
          %11 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc150)
          %12 = cir.const #cir.int<3> : !s32i loc(#loc151)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc151)
          %14 = cir.const #cir.int<4> : !u64i loc(#loc151)
          %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc151)
          %16 = cir.const #cir.int<2> : !s32i loc(#loc151)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc151)
          %18 = cir.binop(add, %15, %17) : !u64i loc(#loc151)
          %19 = cir.cast(integral, %18 : !u64i), !s32i loc(#loc151)
          %20 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc192)
          %21 = cir.load %20 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc152)
          %22 = cir.call @fgets(%11, %19, %21) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc153)
          %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc154)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc154)
          %25 = cir.cmp(ne, %22, %24) : !cir.ptr<!s8i>, !cir.bool loc(#loc248)
          cir.if %25 {
            %26 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc158)
            %27 = cir.call @atoi(%26) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc159)
            cir.store %27, %4 : !s32i, !cir.ptr<!s32i> loc(#loc250)
          } else {
            %26 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc162)
            %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc162)
            cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc163)
          } loc(#loc249)
        } loc(#loc247)
      } loc(#loc245)
      %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc164)
      %8 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc165)
      cir.store %7, %8 : !s32i, !cir.ptr<!s32i> loc(#loc251)
    } loc(#loc243)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc253)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc170)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc171)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc253)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc174)
        %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc175)
        %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc175)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc175)
        %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc175)
        %12 = cir.cmp(gt, %7, %11) : !s32i, !cir.bool loc(#loc255)
        %13 = cir.ternary(%12, true {
          %14 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc177)
          %15 = cir.abs %14 poison : !s32i loc(#loc178)
          %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc178)
          %17 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc179)
          %18 = cir.const #cir.int<2147483647> : !s32i loc(#loc180)
          %19 = cir.cast(int_to_float, %18 : !s32i), !cir.double loc(#loc180)
          %20 = cir.call @sqrt(%19) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc179)
          %21 = cir.cast(float_to_int, %20 : !cir.double), !s64i loc(#loc179)
          %22 = cir.cmp(lt, %16, %21) : !s64i, !cir.bool loc(#loc256)
          %23 = cir.ternary(%22, true {
            %24 = cir.const #true loc(#loc176)
            cir.yield %24 : !cir.bool loc(#loc176)
          }, false {
            %24 = cir.const #false loc(#loc176)
            cir.yield %24 : !cir.bool loc(#loc176)
          }) : (!cir.bool) -> !cir.bool loc(#loc176)
          cir.yield %23 : !cir.bool loc(#loc176)
        }, false {
          %14 = cir.const #false loc(#loc176)
          cir.yield %14 : !cir.bool loc(#loc176)
        }) : (!cir.bool) -> !cir.bool loc(#loc176)
        cir.if %13 {
          %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc258)
          %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc187)
          %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc186)
          %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc187)
          cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc258)
          %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc188)
          cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc189)
        } else {
          %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc128)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc128)
          cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc190)
        } loc(#loc257)
      } loc(#loc254)
    } loc(#loc252)
    cir.return loc(#loc130)
  } loc(#loc238)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_32.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":45:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":26:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":58:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":28:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":28:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":29:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":29:22)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":30:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":30:22)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":32:12)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":32:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":33:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":49:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":34:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":34:21)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":34:20)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":35:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":47:9)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":36:13)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":36:49)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":38:13)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":46:13)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":38:23)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":38:36)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":38:53)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":38:17)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":38:63)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":39:13)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":42:13)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":44:13)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":41:29)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":41:24)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":41:17)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":41:40)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":45:17)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":48:21)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":48:10)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":48:9)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":50:5)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":57:5)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":51:9)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":51:21)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":51:20)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":52:9)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":56:9)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":54:13)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":54:33)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":54:26)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":55:26)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":55:13)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":128:1)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":132:1)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":130:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":130:13)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":131:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":131:13)
#loc67 = loc("/usr/include/stdlib.h":575:1)
#loc68 = loc("/usr/include/stdlib.h":575:41)
#loc69 = loc("/usr/include/time.h":76:1)
#loc70 = loc("/usr/include/time.h":76:38)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":147:15)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":149:15)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":152:15)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":154:15)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":142:1)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":157:1)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":143:1)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":145:27)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":145:22)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":145:5)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":147:5)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":148:5)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":148:55)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":149:5)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":152:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":153:5)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":153:54)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":154:5)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":156:12)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":156:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":65:1)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":86:1)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":67:5)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":67:9)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":68:5)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":68:22)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":69:5)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":69:22)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":71:12)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":71:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":72:5)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":77:5)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":73:9)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":73:21)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":73:20)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":75:16)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":75:9)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":76:21)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":76:10)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":76:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":78:5)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":85:5)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":79:9)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":79:21)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":79:20)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":80:9)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":84:9)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":82:13)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":82:33)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":82:26)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":83:26)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":83:13)
#loc127 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":123:23)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":89:1)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":126:1)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":91:5)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":91:9)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":92:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":92:22)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":93:5)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":93:22)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":95:12)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":95:5)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":96:5)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":112:5)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":97:9)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":97:21)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":97:20)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":98:9)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":110:9)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":99:13)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":99:49)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":101:13)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":109:13)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":101:23)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":101:36)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":101:53)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":101:17)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":101:63)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":102:13)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":105:13)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":107:13)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":104:29)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":104:24)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":104:17)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":104:40)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":108:27)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":108:17)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":111:21)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":111:10)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":111:9)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":113:5)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":125:5)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":114:9)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":114:21)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":114:20)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":116:9)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":124:9)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":116:13)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":116:20)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":116:28)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":116:35)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":116:31)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":116:49)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":116:62)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":116:69)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":117:9)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":120:9)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":122:9)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":118:13)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":118:33)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":118:26)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":119:26)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":119:13)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_square_32.c":123:13)
#loc191 = loc(fused[#loc1, #loc2])
#loc192 = loc(fused[#loc3, #loc4])
#loc193 = loc(fused[#loc5, #loc6])
#loc194 = loc(fused[#loc7, #loc8])
#loc195 = loc(fused[#loc10, #loc11])
#loc196 = loc(fused[#loc12, #loc13])
#loc197 = loc(fused[#loc14, #loc15])
#loc198 = loc(fused[#loc16, #loc17])
#loc199 = loc(fused[#loc18, #loc19])
#loc200 = loc(fused[#loc21, #loc20])
#loc201 = loc(fused[#loc22, #loc23])
#loc202 = loc(fused[#loc24, #loc25])
#loc203 = loc(fused[#loc27, #loc28])
#loc204 = loc(fused[#loc29, #loc30])
#loc205 = loc(fused[#loc31, #loc32])
#loc206 = loc(fused[#loc36, #loc37])
#loc207 = loc(fused[#loc38, #loc39, #loc40, #loc32])
#loc208 = loc(fused[#loc43, #loc44])
#loc209 = loc(fused[#loc48, #loc46])
#loc210 = loc(fused[#loc49, #loc50])
#loc211 = loc(fused[#loc51, #loc52])
#loc212 = loc(fused[#loc54, #loc55])
#loc213 = loc(fused[#loc56, #loc57])
#loc214 = loc(fused[#loc61, #loc62])
#loc215 = loc(fused[#loc63, #loc64])
#loc216 = loc(fused[#loc65, #loc66])
#loc217 = loc(fused[#loc67, #loc68])
#loc218 = loc(fused[#loc69, #loc70])
#loc219 = loc(fused[#loc75, #loc76])
#loc222 = loc(fused[#loc86, #loc87])
#loc223 = loc(fused[#loc90, #loc91])
#loc224 = loc(fused[#loc94, #loc93])
#loc225 = loc(fused[#loc95, #loc96])
#loc226 = loc(fused[#loc97, #loc98])
#loc227 = loc(fused[#loc99, #loc100])
#loc228 = loc(fused[#loc101, #loc102])
#loc229 = loc(fused[#loc104, #loc103])
#loc230 = loc(fused[#loc105, #loc106])
#loc231 = loc(fused[#loc107, #loc108])
#loc232 = loc(fused[#loc111, #loc110])
#loc233 = loc(fused[#loc114, #loc112])
#loc234 = loc(fused[#loc115, #loc116])
#loc235 = loc(fused[#loc117, #loc118])
#loc236 = loc(fused[#loc120, #loc121])
#loc237 = loc(fused[#loc122, #loc123])
#loc238 = loc(fused[#loc129, #loc130])
#loc239 = loc(fused[#loc131, #loc132])
#loc240 = loc(fused[#loc133, #loc134])
#loc241 = loc(fused[#loc135, #loc136])
#loc242 = loc(fused[#loc138, #loc137])
#loc243 = loc(fused[#loc139, #loc140])
#loc244 = loc(fused[#loc141, #loc142])
#loc245 = loc(fused[#loc144, #loc145])
#loc246 = loc(fused[#loc146, #loc147])
#loc247 = loc(fused[#loc148, #loc149])
#loc248 = loc(fused[#loc153, #loc154])
#loc249 = loc(fused[#loc155, #loc156, #loc157, #loc149])
#loc250 = loc(fused[#loc160, #loc161])
#loc251 = loc(fused[#loc166, #loc164])
#loc252 = loc(fused[#loc167, #loc168])
#loc253 = loc(fused[#loc169, #loc170])
#loc254 = loc(fused[#loc172, #loc173])
#loc255 = loc(fused[#loc174, #loc175])
#loc256 = loc(fused[#loc178, #loc181])
#loc257 = loc(fused[#loc182, #loc183, #loc184, #loc173])
#loc258 = loc(fused[#loc185, #loc186])
