!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc183 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":173:10)
#loc184 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":173:14)
#loc185 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":173:20)
#loc186 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":173:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc270 = loc(fused[#loc183, #loc184])
#loc271 = loc(fused[#loc185, #loc186])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE23_Relative_Path_Traversal/s01/CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_63L7goodG2BEv.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc199)
  cir.global "private" constant cir_private @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_633badEv.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc200)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc201)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc202)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc203)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc11)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc204)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc205)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc206)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc207)
  cir.func private @close(!s32i) -> !s32i loc(#loc208)
  cir.func private @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_637badSinkEPPc(!cir.ptr<!cir.ptr<!s8i>>) loc(#loc209)
  cir.func @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_633badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc211)
    %1 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc200)
    %2 = cir.get_global @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_633badEv.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc200)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc200)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc28)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc212)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc214)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc215)
      %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc216)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc217)
      %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc218)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc39)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc39)
      cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc217)
      %11 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc42)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
      %13 = cir.call @strlen(%12) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc42)
      cir.store %13, %8 : !u64i, !cir.ptr<!u64i> loc(#loc218)
      cir.scope {
        cir.do {
          %14 = cir.const #cir.int<2> : !s32i loc(#loc46)
          %15 = cir.const #cir.int<1> : !u32i loc(#loc47)
          %16 = cir.cast(integral, %15 : !u32i), !s32i loc(#loc47)
          %17 = cir.const #cir.int<6> : !u32i loc(#loc48)
          %18 = cir.cast(integral, %17 : !u32i), !s32i loc(#loc48)
          %19 = cir.call @socket(%14, %16, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc49)
          cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc220)
          cir.scope {
            %69 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc54)
            %70 = cir.const #cir.int<1> : !s32i loc(#loc55)
            %71 = cir.unary(minus, %70) : !s32i, !s32i loc(#loc55)
            %72 = cir.cmp(eq, %69, %71) : !s32i, !cir.bool loc(#loc222)
            cir.if %72 {
              cir.break loc(#loc57)
            } loc(#loc223)
          } loc(#loc221)
          %20 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc224)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc60)
          %22 = cir.const #cir.int<16> : !u64i loc(#loc225)
          cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc226)
          %23 = cir.const #cir.int<2> : !s32i loc(#loc65)
          %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc65)
          %25 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc66)
          cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc227)
          %26 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc11)
          %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc11)
          %28 = cir.call @inet_addr(%27) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc68)
          %29 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc69)
          %30 = cir.get_member %29[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc70)
          cir.store %28, %30 : !u32i, !cir.ptr<!u32i> loc(#loc228)
          %31 = cir.const #cir.int<27015> : !s32i loc(#loc73)
          %32 = cir.cast(integral, %31 : !s32i), !u16i loc(#loc73)
          %33 = cir.call @htons(%32) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc74)
          %34 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
          cir.store %33, %34 : !u16i, !cir.ptr<!u16i> loc(#loc229)
          cir.scope {
            %69 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc80)
            %70 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc231)
            %71 = cir.const #cir.int<16> : !u64i loc(#loc232)
            %72 = cir.cast(integral, %71 : !u64i), !u32i loc(#loc232)
            %73 = cir.call @connect(%69, %70, %72) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc85)
            %74 = cir.const #cir.int<1> : !s32i loc(#loc86)
            %75 = cir.unary(minus, %74) : !s32i, !s32i loc(#loc86)
            %76 = cir.cmp(eq, %73, %75) : !s32i, !cir.bool loc(#loc233)
            cir.if %76 {
              cir.break loc(#loc88)
            } loc(#loc234)
          } loc(#loc230)
          %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc89)
          %36 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc90)
          %37 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc91)
          %38 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %37 : !u64i), !cir.ptr<!s8i> loc(#loc92)
          %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc235)
          %40 = cir.const #cir.int<1> : !u64i loc(#loc236)
          %41 = cir.const #cir.int<4096> : !s32i loc(#loc97)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc97)
          %43 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc98)
          %44 = cir.binop(sub, %42, %43) : !u64i loc(#loc237)
          %45 = cir.const #cir.int<1> : !s32i loc(#loc99)
          %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc99)
          %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc238)
          %48 = cir.binop(mul, %40, %47) : !u64i loc(#loc239)
          %49 = cir.const #cir.int<0> : !s32i loc(#loc101)
          %50 = cir.call @recv(%35, %39, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc102)
          %51 = cir.cast(integral, %50 : !s64i), !s32i loc(#loc102)
          cir.store %51, %4 : !s32i, !cir.ptr<!s32i> loc(#loc240)
          cir.scope {
            %69 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc107)
            %70 = cir.const #cir.int<1> : !s32i loc(#loc108)
            %71 = cir.unary(minus, %70) : !s32i, !s32i loc(#loc108)
            %72 = cir.cmp(eq, %69, %71) : !s32i, !cir.bool loc(#loc242)
            %73 = cir.ternary(%72, true {
              %74 = cir.const #true loc(#loc109)
              cir.yield %74 : !cir.bool loc(#loc109)
            }, false {
              %74 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc110)
              %75 = cir.const #cir.int<0> : !s32i loc(#loc111)
              %76 = cir.cmp(eq, %74, %75) : !s32i, !cir.bool loc(#loc243)
              %77 = cir.ternary(%76, true {
                %78 = cir.const #true loc(#loc109)
                cir.yield %78 : !cir.bool loc(#loc109)
              }, false {
                %78 = cir.const #false loc(#loc109)
                cir.yield %78 : !cir.bool loc(#loc109)
              }) : (!cir.bool) -> !cir.bool loc(#loc109)
              cir.yield %77 : !cir.bool loc(#loc109)
            }) : (!cir.bool) -> !cir.bool loc(#loc109)
            cir.if %73 {
              cir.break loc(#loc113)
            } loc(#loc244)
          } loc(#loc241)
          %52 = cir.const #cir.int<0> : !s8i loc(#loc114)
          %53 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
          %54 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc116)
          %55 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc117)
          %56 = cir.cast(integral, %55 : !s32i), !u64i loc(#loc117)
          %57 = cir.const #cir.int<1> : !u64i loc(#loc245)
          %58 = cir.binop(div, %56, %57) : !u64i loc(#loc246)
          %59 = cir.binop(add, %54, %58) : !u64i loc(#loc247)
          %60 = cir.ptr_stride(%53 : !cir.ptr<!s8i>, %59 : !u64i), !cir.ptr<!s8i> loc(#loc120)
          cir.store %52, %60 : !s8i, !cir.ptr<!s8i> loc(#loc248)
          %61 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc121)
          %62 = cir.const #cir.int<13> : !s8i loc(#loc122)
          %63 = cir.cast(integral, %62 : !s8i), !s32i loc(#loc122)
          %64 = cir.call @strchr(%61, %63) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc123)
          cir.store %64, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc249)
          cir.scope {
            %69 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
            %70 = cir.cast(ptr_to_bool, %69 : !cir.ptr<!s8i>), !cir.bool loc(#loc128)
            cir.if %70 {
              %71 = cir.const #cir.int<0> : !s8i loc(#loc130)
              %72 = cir.load deref %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
              cir.store %71, %72 : !s8i, !cir.ptr<!s8i> loc(#loc252)
            } loc(#loc251)
          } loc(#loc250)
          %65 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
          %66 = cir.const #cir.int<10> : !s8i loc(#loc134)
          %67 = cir.cast(integral, %66 : !s8i), !s32i loc(#loc134)
          %68 = cir.call @strchr(%65, %67) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc135)
          cir.store %68, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc253)
          cir.scope {
            %69 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc140)
            %70 = cir.cast(ptr_to_bool, %69 : !cir.ptr<!s8i>), !cir.bool loc(#loc140)
            cir.if %70 {
              %71 = cir.const #cir.int<0> : !s8i loc(#loc142)
              %72 = cir.load deref %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
              cir.store %71, %72 : !s8i, !cir.ptr<!s8i> loc(#loc256)
            } loc(#loc255)
          } loc(#loc254)
          cir.yield loc(#loc45)
        } while {
          %14 = cir.const #cir.int<0> : !s32i loc(#loc145)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc145)
          cir.condition(%15) loc(#loc145)
        } loc(#loc219)
      } loc(#loc219)
      cir.scope {
        %14 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc148)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc149)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc149)
        %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc258)
        cir.if %17 {
          %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc151)
          %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc152)
        } loc(#loc259)
      } loc(#loc257)
    } loc(#loc213)
    cir.call @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_637badSinkEPPc(%0) : (!cir.ptr<!cir.ptr<!s8i>>) -> () loc(#loc153)
    cir.return loc(#loc25)
  } loc(#loc210)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc260)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"file.txt\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc156)
  cir.func private @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_6311goodG2BSinkEPPc(!cir.ptr<!cir.ptr<!s8i>>) loc(#loc261)
  cir.func internal private @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_63L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc263)
    %1 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc199)
    %2 = cir.get_global @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_63L7goodG2BEv.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc199)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc199)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc163)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc264)
    %4 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc165)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc166)
    %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc156)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc156)
    %8 = cir.call @strcat(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc165)
    cir.call @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_6311goodG2BSinkEPPc(%0) : (!cir.ptr<!cir.ptr<!s8i>>) -> () loc(#loc167)
    cir.return loc(#loc160)
  } loc(#loc262)
  cir.func @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_634goodEv() extra(#fn_attr1) {
    cir.call @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_63L7goodG2BEv() : () -> () loc(#loc170)
    cir.return loc(#loc169)
  } loc(#loc265)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc266)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc267)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc268)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc177)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc178)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc179)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc180)
  cir.func @main(%arg0: !s32i loc(fused[#loc183, #loc184]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc185, #loc186])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc270)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc271)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc182)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc187)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc188)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc189)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc189)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc190)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc177)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc177)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc191)
    cir.call @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_634goodEv() : () -> () loc(#loc192)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc178)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc178)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc193)
    %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc179)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc179)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc194)
    cir.call @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_633badEv() : () -> () loc(#loc195)
    %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc180)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc180)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc196)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc197)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc272)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc272)
    cir.return %15 : !s32i loc(#loc272)
  } loc(#loc269)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE23_Relative_Path_Traversal/s01/CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":0:0)
#loc1 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":148:5)
#loc2 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":148:37)
#loc3 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":66:5)
#loc4 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":66:37)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/sys/socket.h":102:1)
#loc8 = loc("/usr/include/sys/socket.h":102:62)
#loc9 = loc("/usr/include/arpa/inet.h":34:1)
#loc10 = loc("/usr/include/arpa/inet.h":34:47)
#loc11 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":95:49)
#loc12 = loc("/usr/include/netinet/in.h":404:1)
#loc13 = loc("/usr/include/netinet/in.h":405:40)
#loc14 = loc("/usr/include/sys/socket.h":126:1)
#loc15 = loc("/usr/include/sys/socket.h":126:75)
#loc16 = loc("/usr/include/sys/socket.h":145:1)
#loc17 = loc("/usr/include/sys/socket.h":145:68)
#loc18 = loc("/usr/include/string.h":226:1)
#loc19 = loc("/usr/include/string.h":227:50)
#loc20 = loc("/usr/include/unistd.h":358:1)
#loc21 = loc("/usr/include/unistd.h":358:27)
#loc22 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":61:1)
#loc23 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":61:30)
#loc24 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":63:1)
#loc25 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":136:1)
#loc26 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":65:5)
#loc27 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":65:12)
#loc28 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":67:12)
#loc29 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":67:5)
#loc30 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":68:5)
#loc31 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":134:5)
#loc32 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":73:9)
#loc33 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":73:13)
#loc34 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":74:9)
#loc35 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":74:28)
#loc36 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":75:9)
#loc37 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":75:15)
#loc38 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":76:9)
#loc39 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":76:32)
#loc40 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":77:9)
#loc41 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":77:37)
#loc42 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":77:26)
#loc43 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":77:33)
#loc44 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":78:9)
#loc45 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":123:17)
#loc46 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":88:36)
#loc47 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":88:45)
#loc48 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":88:58)
#loc49 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":88:29)
#loc50 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":88:13)
#loc51 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":88:69)
#loc52 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":89:13)
#loc53 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":92:13)
#loc54 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":89:17)
#loc55 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":89:34)
#loc56 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":90:13)
#loc57 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":91:17)
#loc58 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":93:20)
#loc59 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":93:21)
#loc60 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":93:30)
#loc61 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":93:33)
#loc62 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":93:47)
#loc63 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":93:13)
#loc64 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":93:48)
#loc65 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":94:34)
#loc66 = loc("/usr/include/netinet/in.h":249:5)
#loc67 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":94:13)
#loc68 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":95:39)
#loc69 = loc("/usr/include/netinet/in.h":251:20)
#loc70 = loc("/usr/include/netinet/in.h":33:15)
#loc71 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":95:13)
#loc72 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":95:59)
#loc73 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":96:38)
#loc74 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":96:32)
#loc75 = loc("/usr/include/netinet/in.h":250:15)
#loc76 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":96:13)
#loc77 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":96:46)
#loc78 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":97:13)
#loc79 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":100:13)
#loc80 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":97:25)
#loc81 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":97:58)
#loc82 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":97:59)
#loc83 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":97:68)
#loc84 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":97:82)
#loc85 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":97:17)
#loc86 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":97:88)
#loc87 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":98:13)
#loc88 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":99:17)
#loc89 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":104:31)
#loc90 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":104:55)
#loc91 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":104:62)
#loc92 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":104:60)
#loc93 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":104:46)
#loc94 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":104:69)
#loc95 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":104:72)
#loc96 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":104:83)
#loc97 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":104:88)
#loc98 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":104:103)
#loc99 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":104:113)
#loc100 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":104:114)
#loc101 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":104:117)
#loc102 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":104:26)
#loc103 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":104:13)
#loc104 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":104:118)
#loc105 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":105:13)
#loc106 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":108:13)
#loc107 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":105:17)
#loc108 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":105:31)
#loc109 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":105:44)
#loc110 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":105:47)
#loc111 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":105:61)
#loc112 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":106:13)
#loc113 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":107:17)
#loc114 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":110:57)
#loc115 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":110:13)
#loc116 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":110:18)
#loc117 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":110:28)
#loc118 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":110:41)
#loc119 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":110:52)
#loc120 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":110:53)
#loc121 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":112:30)
#loc122 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":112:36)
#loc123 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":112:23)
#loc124 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":112:13)
#loc125 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":112:40)
#loc126 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":113:13)
#loc127 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":116:13)
#loc128 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":113:17)
#loc129 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":114:13)
#loc130 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":115:28)
#loc131 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":115:18)
#loc132 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":115:17)
#loc133 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":117:30)
#loc134 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":117:36)
#loc135 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":117:23)
#loc136 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":117:13)
#loc137 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":117:40)
#loc138 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":118:13)
#loc139 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":121:13)
#loc140 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":118:17)
#loc141 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":119:13)
#loc142 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":120:28)
#loc143 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":120:18)
#loc144 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":120:17)
#loc145 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":123:16)
#loc146 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":124:9)
#loc147 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":127:9)
#loc148 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":124:13)
#loc149 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":124:30)
#loc150 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":125:9)
#loc151 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":126:26)
#loc152 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":126:13)
#loc153 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":135:5)
#loc154 = loc("/usr/include/string.h":149:1)
#loc155 = loc("/usr/include/string.h":150:14)
#loc156 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":151:18)
#loc157 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":143:1)
#loc158 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":143:31)
#loc159 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":145:1)
#loc160 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":153:1)
#loc161 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":147:5)
#loc162 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":147:12)
#loc163 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":149:12)
#loc164 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":149:5)
#loc165 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":151:5)
#loc166 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":151:12)
#loc167 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":152:5)
#loc168 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":155:1)
#loc169 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":158:1)
#loc170 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":157:5)
#loc171 = loc("/usr/include/stdlib.h":575:1)
#loc172 = loc("/usr/include/stdlib.h":575:41)
#loc173 = loc("/usr/include/time.h":76:1)
#loc174 = loc("/usr/include/time.h":76:38)
#loc175 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc176 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc177 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":178:15)
#loc178 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":180:15)
#loc179 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":183:15)
#loc180 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":185:15)
#loc181 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":173:1)
#loc182 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":188:1)
#loc187 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":174:1)
#loc188 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":176:27)
#loc189 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":176:22)
#loc190 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":176:5)
#loc191 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":178:5)
#loc192 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":179:5)
#loc193 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":180:5)
#loc194 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":183:5)
#loc195 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":184:5)
#loc196 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":185:5)
#loc197 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":187:12)
#loc198 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_63a.cpp":187:5)
#loc199 = loc(fused[#loc1, #loc2])
#loc200 = loc(fused[#loc3, #loc4])
#loc201 = loc(fused[#loc5, #loc6])
#loc202 = loc(fused[#loc7, #loc8])
#loc203 = loc(fused[#loc9, #loc10])
#loc204 = loc(fused[#loc12, #loc13])
#loc205 = loc(fused[#loc14, #loc15])
#loc206 = loc(fused[#loc16, #loc17])
#loc207 = loc(fused[#loc18, #loc19])
#loc208 = loc(fused[#loc20, #loc21])
#loc209 = loc(fused[#loc22, #loc23])
#loc210 = loc(fused[#loc24, #loc25])
#loc211 = loc(fused[#loc26, #loc27])
#loc212 = loc(fused[#loc29, #loc28])
#loc213 = loc(fused[#loc30, #loc31])
#loc214 = loc(fused[#loc32, #loc33])
#loc215 = loc(fused[#loc34, #loc35])
#loc216 = loc(fused[#loc36, #loc37])
#loc217 = loc(fused[#loc38, #loc39])
#loc218 = loc(fused[#loc40, #loc41])
#loc219 = loc(fused[#loc44, #loc45])
#loc220 = loc(fused[#loc50, #loc51])
#loc221 = loc(fused[#loc52, #loc53])
#loc222 = loc(fused[#loc54, #loc55])
#loc223 = loc(fused[#loc56, #loc53])
#loc224 = loc(fused[#loc58, #loc59])
#loc225 = loc(fused[#loc61, #loc62])
#loc226 = loc(fused[#loc63, #loc64])
#loc227 = loc(fused[#loc67, #loc65])
#loc228 = loc(fused[#loc71, #loc72])
#loc229 = loc(fused[#loc76, #loc77])
#loc230 = loc(fused[#loc78, #loc79])
#loc231 = loc(fused[#loc81, #loc82])
#loc232 = loc(fused[#loc83, #loc84])
#loc233 = loc(fused[#loc85, #loc86])
#loc234 = loc(fused[#loc87, #loc79])
#loc235 = loc(fused[#loc93, #loc94])
#loc236 = loc(fused[#loc95, #loc96])
#loc237 = loc(fused[#loc97, #loc98])
#loc238 = loc(fused[#loc97, #loc99])
#loc239 = loc(fused[#loc95, #loc100])
#loc240 = loc(fused[#loc103, #loc104])
#loc241 = loc(fused[#loc105, #loc106])
#loc242 = loc(fused[#loc107, #loc108])
#loc243 = loc(fused[#loc110, #loc111])
#loc244 = loc(fused[#loc112, #loc106])
#loc245 = loc(fused[#loc118, #loc119])
#loc246 = loc(fused[#loc117, #loc119])
#loc247 = loc(fused[#loc116, #loc119])
#loc248 = loc(fused[#loc115, #loc114])
#loc249 = loc(fused[#loc124, #loc125])
#loc250 = loc(fused[#loc126, #loc127])
#loc251 = loc(fused[#loc129, #loc127])
#loc252 = loc(fused[#loc132, #loc130])
#loc253 = loc(fused[#loc136, #loc137])
#loc254 = loc(fused[#loc138, #loc139])
#loc255 = loc(fused[#loc141, #loc139])
#loc256 = loc(fused[#loc144, #loc142])
#loc257 = loc(fused[#loc146, #loc147])
#loc258 = loc(fused[#loc148, #loc149])
#loc259 = loc(fused[#loc150, #loc147])
#loc260 = loc(fused[#loc154, #loc155])
#loc261 = loc(fused[#loc157, #loc158])
#loc262 = loc(fused[#loc159, #loc160])
#loc263 = loc(fused[#loc161, #loc162])
#loc264 = loc(fused[#loc164, #loc163])
#loc265 = loc(fused[#loc168, #loc169])
#loc266 = loc(fused[#loc171, #loc172])
#loc267 = loc(fused[#loc173, #loc174])
#loc268 = loc(fused[#loc175, #loc176])
#loc269 = loc(fused[#loc181, #loc182])
#loc272 = loc(fused[#loc198, #loc197])
