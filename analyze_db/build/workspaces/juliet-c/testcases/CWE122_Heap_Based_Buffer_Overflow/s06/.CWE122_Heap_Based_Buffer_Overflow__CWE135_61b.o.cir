!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":24:64)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":24:71)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":42:68)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":42:75)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":56:68)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":56:75)
#loc117 = loc(fused[#loc9, #loc10])
#loc130 = loc(fused[#loc44, #loc45])
#loc144 = loc(fused[#loc80, #loc81])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc113)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc114)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc115)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE135_61b_badSource(%arg0: !cir.ptr<!void> loc(fused[#loc9, #loc10])) -> !cir.ptr<!void> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc117)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["__retval"] {alignment = 8 : i64} loc(#loc8)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc119)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc16)
      %6 = cir.const #cir.int<50> : !s32i loc(#loc17)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc17)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc120)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc121)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc122)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc119)
      cir.scope {
        %27 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
        %28 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc23)
        %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc23)
        %30 = cir.cmp(eq, %27, %29) : !cir.ptr<!s32i>, !cir.bool loc(#loc124)
        cir.if %30 {
          %31 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc25)
          %32 = cir.const #cir.int<1> : !s32i loc(#loc26)
          %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc27)
          cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc25)
        } loc(#loc125)
      } loc(#loc123)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
      %13 = cir.const #cir.int<65> : !s32i loc(#loc29)
      %14 = cir.const #cir.int<50> : !s32i loc(#loc30)
      %15 = cir.const #cir.int<1> : !s32i loc(#loc31)
      %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc30)
      %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc30)
      %18 = cir.call @wmemset(%12, %13, %17) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc32)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc33)
      %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc34)
      %21 = cir.const #cir.int<50> : !s32i loc(#loc35)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc36)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc35)
      %24 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc37)
      cir.store %19, %24 : !s32i, !cir.ptr<!s32i> loc(#loc126)
      %25 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
      %26 = cir.cast(bitcast, %25 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc38)
      cir.store %26, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc127)
    } loc(#loc118)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc40)
    cir.store %2, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc128)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc128)
    cir.return %3 : !cir.ptr<!void> loc(#loc128)
  } loc(#loc116)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE135_61b_goodG2BSource(%arg0: !cir.ptr<!void> loc(fused[#loc44, #loc45])) -> !cir.ptr<!void> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc130)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["__retval"] {alignment = 8 : i64} loc(#loc43)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc46)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc132)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc51)
      %6 = cir.const #cir.int<50> : !s32i loc(#loc52)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc52)
      %8 = cir.const #cir.int<1> : !u64i loc(#loc133)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc134)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc51)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc135)
      cir.store %11, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc132)
      cir.scope {
        %28 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
        %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc58)
        %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc58)
        %31 = cir.cmp(eq, %28, %30) : !cir.ptr<!s8i>, !cir.bool loc(#loc137)
        cir.if %31 {
          %32 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc60)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc61)
          %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc62)
          cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc60)
        } loc(#loc138)
      } loc(#loc136)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc63)
      %14 = cir.const #cir.int<65> : !s32i loc(#loc64)
      %15 = cir.const #cir.int<50> : !s32i loc(#loc65)
      %16 = cir.const #cir.int<1> : !s32i loc(#loc66)
      %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc65)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc65)
      cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc139)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc69)
      %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc69)
      %21 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
      %22 = cir.const #cir.int<50> : !s32i loc(#loc71)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc72)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc71)
      %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc73)
      cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc140)
      %26 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc74)
      cir.store %27, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc141)
    } loc(#loc131)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc76)
    cir.store %2, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc142)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc142)
    cir.return %3 : !cir.ptr<!void> loc(#loc142)
  } loc(#loc129)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE135_61b_goodB2GSource(%arg0: !cir.ptr<!void> loc(fused[#loc80, #loc81])) -> !cir.ptr<!void> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc144)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["__retval"] {alignment = 8 : i64} loc(#loc79)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc82)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc146)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc87)
      %6 = cir.const #cir.int<50> : !s32i loc(#loc88)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc88)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc147)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc148)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc87)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc149)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc146)
      cir.scope {
        %27 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc93)
        %28 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc94)
        %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc94)
        %30 = cir.cmp(eq, %27, %29) : !cir.ptr<!s32i>, !cir.bool loc(#loc151)
        cir.if %30 {
          %31 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc96)
          %32 = cir.const #cir.int<1> : !s32i loc(#loc97)
          %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc98)
          cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc96)
        } loc(#loc152)
      } loc(#loc150)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc99)
      %13 = cir.const #cir.int<65> : !s32i loc(#loc100)
      %14 = cir.const #cir.int<50> : !s32i loc(#loc101)
      %15 = cir.const #cir.int<1> : !s32i loc(#loc102)
      %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc101)
      %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc101)
      %18 = cir.call @wmemset(%12, %13, %17) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc103)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc104)
      %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc105)
      %21 = cir.const #cir.int<50> : !s32i loc(#loc106)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc107)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc106)
      %24 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc108)
      cir.store %19, %24 : !s32i, !cir.ptr<!s32i> loc(#loc153)
      %25 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc109)
      %26 = cir.cast(bitcast, %25 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc109)
      cir.store %26, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc154)
    } loc(#loc145)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc111)
    cir.store %2, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc155)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc155)
    cir.return %3 : !cir.ptr<!void> loc(#loc155)
  } loc(#loc143)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":24:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":35:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":25:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":26:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":33:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":27:9)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":27:71)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":27:46)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":27:53)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":27:56)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":27:70)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":28:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":28:46)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":28:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":28:30)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":28:36)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":28:37)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":28:43)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":28:42)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":29:17)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":29:32)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":29:38)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":29:41)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":29:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":30:31)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":30:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":30:23)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":30:26)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":30:27)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":32:24)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":32:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":34:12)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":34:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":42:1)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":53:1)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":43:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":44:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":51:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":45:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":45:63)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":45:41)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":45:48)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":45:51)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":45:62)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":46:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":46:47)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":46:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":46:31)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":46:37)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":46:38)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":46:44)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":46:43)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":47:16)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":47:32)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":47:37)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":47:40)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":47:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":47:41)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":48:32)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":48:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":48:24)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":48:27)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":48:28)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":50:24)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":50:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":52:12)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":52:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":56:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":67:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":57:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":58:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":65:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":59:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":59:71)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":59:46)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":59:53)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":59:56)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":59:70)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":60:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":60:46)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":60:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":60:30)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":60:36)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":60:37)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":60:43)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":60:42)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":61:17)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":61:32)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":61:38)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":61:41)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":61:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":62:31)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":62:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":62:23)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":62:26)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":62:27)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":64:24)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":64:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":66:12)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c":66:5)
#loc113 = loc(fused[#loc1, #loc2])
#loc114 = loc(fused[#loc3, #loc4])
#loc115 = loc(fused[#loc5, #loc6])
#loc116 = loc(fused[#loc7, #loc8])
#loc118 = loc(fused[#loc12, #loc13])
#loc119 = loc(fused[#loc14, #loc15])
#loc120 = loc(fused[#loc18, #loc19])
#loc121 = loc(fused[#loc17, #loc19])
#loc122 = loc(fused[#loc16, #loc15])
#loc123 = loc(fused[#loc20, #loc21])
#loc124 = loc(fused[#loc22, #loc23])
#loc125 = loc(fused[#loc24, #loc21])
#loc126 = loc(fused[#loc34, #loc33])
#loc127 = loc(fused[#loc39, #loc38])
#loc128 = loc(fused[#loc41, #loc40])
#loc129 = loc(fused[#loc42, #loc43])
#loc131 = loc(fused[#loc47, #loc48])
#loc132 = loc(fused[#loc49, #loc50])
#loc133 = loc(fused[#loc53, #loc54])
#loc134 = loc(fused[#loc52, #loc54])
#loc135 = loc(fused[#loc51, #loc50])
#loc136 = loc(fused[#loc55, #loc56])
#loc137 = loc(fused[#loc57, #loc58])
#loc138 = loc(fused[#loc59, #loc56])
#loc139 = loc(fused[#loc67, #loc68])
#loc140 = loc(fused[#loc70, #loc69])
#loc141 = loc(fused[#loc75, #loc74])
#loc142 = loc(fused[#loc77, #loc76])
#loc143 = loc(fused[#loc78, #loc79])
#loc145 = loc(fused[#loc83, #loc84])
#loc146 = loc(fused[#loc85, #loc86])
#loc147 = loc(fused[#loc89, #loc90])
#loc148 = loc(fused[#loc88, #loc90])
#loc149 = loc(fused[#loc87, #loc86])
#loc150 = loc(fused[#loc91, #loc92])
#loc151 = loc(fused[#loc93, #loc94])
#loc152 = loc(fused[#loc95, #loc92])
#loc153 = loc(fused[#loc105, #loc104])
#loc154 = loc(fused[#loc110, #loc109])
#loc155 = loc(fused[#loc112, #loc111])
