!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc314)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc315)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc316)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc317)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc318)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc319)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc320)
  cir.func private @close(!s32i) -> !s32i loc(#loc321)
  cir.func private @printIntLine(!s32i) loc(#loc322)
  cir.func @_ZN50CWE369_Divide_by_Zero__int_listen_socket_modulo_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc324)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc325)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc24)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc26)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc326)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc328)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc329)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc330)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc331)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc332)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc35)
      %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc35)
      cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc330)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc37)
      %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc37)
      cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc331)
      cir.scope {
        cir.do {
          cir.scope {
            %13 = cir.const #cir.int<2> : !s32i loc(#loc44)
            %14 = cir.const #cir.int<1> : !u32i loc(#loc45)
            %15 = cir.cast(integral, %14 : !u32i), !s32i loc(#loc45)
            %16 = cir.const #cir.int<6> : !u32i loc(#loc46)
            %17 = cir.cast(integral, %16 : !u32i), !s32i loc(#loc46)
            %18 = cir.call @socket(%13, %15, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc47)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc335)
            cir.scope {
              %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc52)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc53)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc53)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc337)
              cir.if %62 {
                cir.break loc(#loc55)
              } loc(#loc338)
            } loc(#loc336)
            %19 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc339)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc58)
            %21 = cir.const #cir.int<16> : !u64i loc(#loc340)
            cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc341)
            %22 = cir.const #cir.int<2> : !s32i loc(#loc63)
            %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc63)
            %24 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
            cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc342)
            %25 = cir.const #cir.int<0> : !s32i loc(#loc66)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc66)
            %27 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc67)
            %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc68)
            cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc343)
            %29 = cir.const #cir.int<27015> : !s32i loc(#loc70)
            %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc70)
            %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc71)
            %32 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
            cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc344)
            cir.scope {
              %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc77)
              %60 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc346)
              %61 = cir.const #cir.int<16> : !u64i loc(#loc347)
              %62 = cir.cast(integral, %61 : !u64i), !u32i loc(#loc347)
              %63 = cir.call @bind(%59, %60, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc82)
              %64 = cir.const #cir.int<1> : !s32i loc(#loc83)
              %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc83)
              %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc348)
              cir.if %66 {
                cir.break loc(#loc85)
              } loc(#loc349)
            } loc(#loc345)
            cir.scope {
              %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc88)
              %60 = cir.const #cir.int<5> : !s32i loc(#loc89)
              %61 = cir.call @listen(%59, %60) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc90)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc91)
              %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc91)
              %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc351)
              cir.if %64 {
                cir.break loc(#loc93)
              } loc(#loc352)
            } loc(#loc350)
            %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc94)
            %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc95)
            %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc96)
            %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc97)
            cir.store %36, %7 : !s32i, !cir.ptr<!s32i> loc(#loc353)
            cir.scope {
              %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc102)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc103)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc103)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc355)
              cir.if %62 {
                cir.break loc(#loc105)
              } loc(#loc356)
            } loc(#loc354)
            %37 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc106)
            %38 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc107)
            %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc107)
            %40 = cir.const #cir.int<3> : !s32i loc(#loc108)
            %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc108)
            %42 = cir.const #cir.int<4> : !u64i loc(#loc108)
            %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc108)
            %44 = cir.const #cir.int<2> : !s32i loc(#loc108)
            %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc108)
            %46 = cir.binop(add, %43, %45) : !u64i loc(#loc108)
            %47 = cir.const #cir.int<1> : !s32i loc(#loc109)
            %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc109)
            %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc357)
            %50 = cir.const #cir.int<0> : !s32i loc(#loc110)
            %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc111)
            %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc111)
            cir.store %52, %4 : !s32i, !cir.ptr<!s32i> loc(#loc358)
            cir.scope {
              %59 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc116)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc117)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc117)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc360)
              %63 = cir.ternary(%62, true {
                %64 = cir.const #true loc(#loc118)
                cir.yield %64 : !cir.bool loc(#loc118)
              }, false {
                %64 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                %65 = cir.const #cir.int<0> : !s32i loc(#loc120)
                %66 = cir.cmp(eq, %64, %65) : !s32i, !cir.bool loc(#loc361)
                %67 = cir.ternary(%66, true {
                  %68 = cir.const #true loc(#loc118)
                  cir.yield %68 : !cir.bool loc(#loc118)
                }, false {
                  %68 = cir.const #false loc(#loc118)
                  cir.yield %68 : !cir.bool loc(#loc118)
                }) : (!cir.bool) -> !cir.bool loc(#loc118)
                cir.yield %67 : !cir.bool loc(#loc118)
              }) : (!cir.bool) -> !cir.bool loc(#loc118)
              cir.if %63 {
                cir.break loc(#loc122)
              } loc(#loc362)
            } loc(#loc359)
            %53 = cir.const #cir.int<0> : !s8i loc(#loc123)
            %54 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc124)
            %55 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc125)
            %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc125)
            cir.store %53, %56 : !s8i, !cir.ptr<!s8i> loc(#loc363)
            %57 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc126)
            %58 = cir.call @atoi(%57) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc127)
            cir.store %58, %0 : !s32i, !cir.ptr<!s32i> loc(#loc364)
          } loc(#loc334)
          cir.yield loc(#loc41)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc130)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc130)
          cir.condition(%14) loc(#loc130)
        } loc(#loc333)
      } loc(#loc333)
      cir.scope {
        %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc133)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc134)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc134)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc366)
        cir.if %16 {
          %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc136)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc137)
        } loc(#loc367)
      } loc(#loc365)
      cir.scope {
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc140)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc141)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc141)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc369)
        cir.if %16 {
          %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc143)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc144)
        } loc(#loc370)
      } loc(#loc368)
    } loc(#loc327)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc372)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc148)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc148)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc372)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc149)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc150)
      %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc373)
      cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc151)
    } loc(#loc371)
    cir.return loc(#loc20)
  } loc(#loc323)
  cir.func internal private @_ZN50CWE369_Divide_by_Zero__int_listen_socket_modulo_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc375)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc376)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc157)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc158)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc159)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc377)
    %4 = cir.const #cir.int<7> : !s32i loc(#loc161)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc378)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc380)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc166)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc166)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc380)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc167)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc168)
      %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc381)
      cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc169)
    } loc(#loc379)
    cir.return loc(#loc153)
  } loc(#loc374)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc382)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc172)
  cir.func internal private @_ZN50CWE369_Divide_by_Zero__int_listen_socket_modulo_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc384)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc385)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc178)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc179)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc180)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc386)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc388)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc389)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc390)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc391)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc392)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc189)
      %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc189)
      cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc390)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc191)
      %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc191)
      cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc391)
      cir.scope {
        cir.do {
          cir.scope {
            %13 = cir.const #cir.int<2> : !s32i loc(#loc198)
            %14 = cir.const #cir.int<1> : !u32i loc(#loc199)
            %15 = cir.cast(integral, %14 : !u32i), !s32i loc(#loc199)
            %16 = cir.const #cir.int<6> : !u32i loc(#loc200)
            %17 = cir.cast(integral, %16 : !u32i), !s32i loc(#loc200)
            %18 = cir.call @socket(%13, %15, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc201)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc395)
            cir.scope {
              %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc206)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc207)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc207)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc397)
              cir.if %62 {
                cir.break loc(#loc209)
              } loc(#loc398)
            } loc(#loc396)
            %19 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc399)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc212)
            %21 = cir.const #cir.int<16> : !u64i loc(#loc400)
            cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc401)
            %22 = cir.const #cir.int<2> : !s32i loc(#loc217)
            %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc217)
            %24 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
            cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc402)
            %25 = cir.const #cir.int<0> : !s32i loc(#loc219)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc219)
            %27 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc67)
            %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc68)
            cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc403)
            %29 = cir.const #cir.int<27015> : !s32i loc(#loc221)
            %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc221)
            %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc222)
            %32 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
            cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc404)
            cir.scope {
              %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc227)
              %60 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc406)
              %61 = cir.const #cir.int<16> : !u64i loc(#loc407)
              %62 = cir.cast(integral, %61 : !u64i), !u32i loc(#loc407)
              %63 = cir.call @bind(%59, %60, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc232)
              %64 = cir.const #cir.int<1> : !s32i loc(#loc233)
              %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc233)
              %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc408)
              cir.if %66 {
                cir.break loc(#loc235)
              } loc(#loc409)
            } loc(#loc405)
            cir.scope {
              %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc238)
              %60 = cir.const #cir.int<5> : !s32i loc(#loc239)
              %61 = cir.call @listen(%59, %60) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc240)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc241)
              %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc241)
              %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc411)
              cir.if %64 {
                cir.break loc(#loc243)
              } loc(#loc412)
            } loc(#loc410)
            %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc244)
            %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc245)
            %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc246)
            %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc247)
            cir.store %36, %7 : !s32i, !cir.ptr<!s32i> loc(#loc413)
            cir.scope {
              %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc252)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc253)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc253)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc415)
              cir.if %62 {
                cir.break loc(#loc255)
              } loc(#loc416)
            } loc(#loc414)
            %37 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc256)
            %38 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc257)
            %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc257)
            %40 = cir.const #cir.int<3> : !s32i loc(#loc258)
            %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc258)
            %42 = cir.const #cir.int<4> : !u64i loc(#loc258)
            %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc258)
            %44 = cir.const #cir.int<2> : !s32i loc(#loc258)
            %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc258)
            %46 = cir.binop(add, %43, %45) : !u64i loc(#loc258)
            %47 = cir.const #cir.int<1> : !s32i loc(#loc259)
            %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc259)
            %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc417)
            %50 = cir.const #cir.int<0> : !s32i loc(#loc260)
            %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc261)
            %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc261)
            cir.store %52, %4 : !s32i, !cir.ptr<!s32i> loc(#loc418)
            cir.scope {
              %59 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc266)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc267)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc267)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc420)
              %63 = cir.ternary(%62, true {
                %64 = cir.const #true loc(#loc268)
                cir.yield %64 : !cir.bool loc(#loc268)
              }, false {
                %64 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc269)
                %65 = cir.const #cir.int<0> : !s32i loc(#loc270)
                %66 = cir.cmp(eq, %64, %65) : !s32i, !cir.bool loc(#loc421)
                %67 = cir.ternary(%66, true {
                  %68 = cir.const #true loc(#loc268)
                  cir.yield %68 : !cir.bool loc(#loc268)
                }, false {
                  %68 = cir.const #false loc(#loc268)
                  cir.yield %68 : !cir.bool loc(#loc268)
                }) : (!cir.bool) -> !cir.bool loc(#loc268)
                cir.yield %67 : !cir.bool loc(#loc268)
              }) : (!cir.bool) -> !cir.bool loc(#loc268)
              cir.if %63 {
                cir.break loc(#loc272)
              } loc(#loc422)
            } loc(#loc419)
            %53 = cir.const #cir.int<0> : !s8i loc(#loc273)
            %54 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc274)
            %55 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc275)
            %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc275)
            cir.store %53, %56 : !s8i, !cir.ptr<!s8i> loc(#loc423)
            %57 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc276)
            %58 = cir.call @atoi(%57) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc277)
            cir.store %58, %0 : !s32i, !cir.ptr<!s32i> loc(#loc424)
          } loc(#loc394)
          cir.yield loc(#loc195)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc280)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc280)
          cir.condition(%14) loc(#loc280)
        } loc(#loc393)
      } loc(#loc393)
      cir.scope {
        %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc283)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc284)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc284)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc426)
        cir.if %16 {
          %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc286)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc287)
        } loc(#loc427)
      } loc(#loc425)
      cir.scope {
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc290)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc291)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc291)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc429)
        cir.if %16 {
          %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc293)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc294)
        } loc(#loc430)
      } loc(#loc428)
    } loc(#loc387)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc432)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc298)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc298)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc432)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc301)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc302)
        %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc434)
        cir.if %9 {
          %10 = cir.const #cir.int<100> : !s32i loc(#loc306)
          %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc307)
          %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc436)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc308)
        } else {
          %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc172)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc172)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc309)
        } loc(#loc435)
      } loc(#loc433)
    } loc(#loc431)
    cir.return loc(#loc174)
  } loc(#loc383)
  cir.func @_ZN50CWE369_Divide_by_Zero__int_listen_socket_modulo_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN50CWE369_Divide_by_Zero__int_listen_socket_modulo_33L7goodG2BEv() : () -> () loc(#loc312)
    cir.call @_ZN50CWE369_Divide_by_Zero__int_listen_socket_modulo_33L7goodB2GEv() : () -> () loc(#loc313)
    cir.return loc(#loc311)
  } loc(#loc437)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":47:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":127:1)
#loc21 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":49:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":49:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":50:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":50:20)
#loc25 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":52:13)
#loc26 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":52:12)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":52:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":53:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":121:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":58:9)
#loc31 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":58:13)
#loc32 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":59:9)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":59:28)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":60:9)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":60:31)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":61:9)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":61:31)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":62:9)
#loc39 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":62:41)
#loc40 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":63:9)
#loc41 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":106:17)
#loc42 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":64:9)
#loc43 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":105:9)
#loc44 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":73:35)
#loc45 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":73:44)
#loc46 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":73:57)
#loc47 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":73:28)
#loc48 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":73:13)
#loc49 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":73:68)
#loc50 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":74:13)
#loc51 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":77:13)
#loc52 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":74:17)
#loc53 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":74:33)
#loc54 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":75:13)
#loc55 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":76:17)
#loc56 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":78:20)
#loc57 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":78:21)
#loc58 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":78:30)
#loc59 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":78:33)
#loc60 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":78:47)
#loc61 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":78:13)
#loc62 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":78:48)
#loc63 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":79:34)
#loc64 = loc("/usr/include/netinet/in.h":249:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":79:13)
#loc66 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":80:39)
#loc67 = loc("/usr/include/netinet/in.h":251:20)
#loc68 = loc("/usr/include/netinet/in.h":33:15)
#loc69 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":80:13)
#loc70 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":81:38)
#loc71 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":81:32)
#loc72 = loc("/usr/include/netinet/in.h":250:15)
#loc73 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":81:13)
#loc74 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":81:46)
#loc75 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":82:13)
#loc76 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":85:13)
#loc77 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":82:22)
#loc78 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":82:54)
#loc79 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":82:55)
#loc80 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":82:64)
#loc81 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":82:78)
#loc82 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":82:17)
#loc83 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":82:84)
#loc84 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":83:13)
#loc85 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":84:17)
#loc86 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":86:13)
#loc87 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":89:13)
#loc88 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":86:24)
#loc89 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":86:38)
#loc90 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":86:17)
#loc91 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":86:57)
#loc92 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":87:13)
#loc93 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":88:17)
#loc94 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":90:35)
#loc95 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":90:49)
#loc96 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":90:55)
#loc97 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":90:28)
#loc98 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":90:13)
#loc99 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":90:59)
#loc100 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":91:13)
#loc101 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":94:13)
#loc102 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":91:17)
#loc103 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":91:33)
#loc104 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":92:13)
#loc105 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":93:17)
#loc106 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":96:31)
#loc107 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":96:45)
#loc108 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":96:58)
#loc109 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":96:76)
#loc110 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":96:79)
#loc111 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":96:26)
#loc112 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":96:13)
#loc113 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":96:80)
#loc114 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":97:13)
#loc115 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":100:13)
#loc116 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":97:17)
#loc117 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":97:31)
#loc118 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":97:44)
#loc119 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":97:47)
#loc120 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":97:61)
#loc121 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":98:13)
#loc122 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":99:17)
#loc123 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":102:39)
#loc124 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":102:25)
#loc125 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":102:13)
#loc126 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":104:25)
#loc127 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":104:20)
#loc128 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":104:13)
#loc129 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":104:36)
#loc130 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":106:16)
#loc131 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":107:9)
#loc132 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":110:9)
#loc133 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":107:13)
#loc134 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":107:29)
#loc135 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":108:9)
#loc136 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":109:26)
#loc137 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":109:13)
#loc138 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":111:9)
#loc139 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":114:9)
#loc140 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":111:13)
#loc141 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":111:29)
#loc142 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":112:9)
#loc143 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":113:26)
#loc144 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":113:13)
#loc145 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":122:5)
#loc146 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":126:5)
#loc147 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":123:9)
#loc148 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":123:20)
#loc149 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":125:22)
#loc150 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":125:28)
#loc151 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":125:9)
#loc152 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":134:1)
#loc153 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":147:1)
#loc154 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":136:5)
#loc155 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":136:9)
#loc156 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":137:5)
#loc157 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":137:20)
#loc158 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":139:13)
#loc159 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":139:12)
#loc160 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":139:5)
#loc161 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":141:12)
#loc162 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":141:5)
#loc163 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":142:5)
#loc164 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":146:5)
#loc165 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":143:9)
#loc166 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":143:20)
#loc167 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":145:22)
#loc168 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":145:28)
#loc169 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":145:9)
#loc170 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc171 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc172 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":234:23)
#loc173 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":150:1)
#loc174 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":237:1)
#loc175 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":152:5)
#loc176 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":152:9)
#loc177 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":153:5)
#loc178 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":153:20)
#loc179 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":155:13)
#loc180 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":155:12)
#loc181 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":155:5)
#loc182 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":156:5)
#loc183 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":224:5)
#loc184 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":161:9)
#loc185 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":161:13)
#loc186 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":162:9)
#loc187 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":162:28)
#loc188 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":163:9)
#loc189 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":163:31)
#loc190 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":164:9)
#loc191 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":164:31)
#loc192 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":165:9)
#loc193 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":165:41)
#loc194 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":166:9)
#loc195 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":209:17)
#loc196 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":167:9)
#loc197 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":208:9)
#loc198 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":176:35)
#loc199 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":176:44)
#loc200 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":176:57)
#loc201 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":176:28)
#loc202 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":176:13)
#loc203 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":176:68)
#loc204 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":177:13)
#loc205 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":180:13)
#loc206 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":177:17)
#loc207 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":177:33)
#loc208 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":178:13)
#loc209 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":179:17)
#loc210 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":181:20)
#loc211 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":181:21)
#loc212 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":181:30)
#loc213 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":181:33)
#loc214 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":181:47)
#loc215 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":181:13)
#loc216 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":181:48)
#loc217 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":182:34)
#loc218 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":182:13)
#loc219 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":183:39)
#loc220 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":183:13)
#loc221 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":184:38)
#loc222 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":184:32)
#loc223 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":184:13)
#loc224 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":184:46)
#loc225 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":185:13)
#loc226 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":188:13)
#loc227 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":185:22)
#loc228 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":185:54)
#loc229 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":185:55)
#loc230 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":185:64)
#loc231 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":185:78)
#loc232 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":185:17)
#loc233 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":185:84)
#loc234 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":186:13)
#loc235 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":187:17)
#loc236 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":189:13)
#loc237 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":192:13)
#loc238 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":189:24)
#loc239 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":189:38)
#loc240 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":189:17)
#loc241 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":189:57)
#loc242 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":190:13)
#loc243 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":191:17)
#loc244 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":193:35)
#loc245 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":193:49)
#loc246 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":193:55)
#loc247 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":193:28)
#loc248 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":193:13)
#loc249 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":193:59)
#loc250 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":194:13)
#loc251 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":197:13)
#loc252 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":194:17)
#loc253 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":194:33)
#loc254 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":195:13)
#loc255 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":196:17)
#loc256 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":199:31)
#loc257 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":199:45)
#loc258 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":199:58)
#loc259 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":199:76)
#loc260 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":199:79)
#loc261 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":199:26)
#loc262 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":199:13)
#loc263 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":199:80)
#loc264 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":200:13)
#loc265 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":203:13)
#loc266 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":200:17)
#loc267 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":200:31)
#loc268 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":200:44)
#loc269 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":200:47)
#loc270 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":200:61)
#loc271 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":201:13)
#loc272 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":202:17)
#loc273 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":205:39)
#loc274 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":205:25)
#loc275 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":205:13)
#loc276 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":207:25)
#loc277 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":207:20)
#loc278 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":207:13)
#loc279 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":207:36)
#loc280 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":209:16)
#loc281 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":210:9)
#loc282 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":213:9)
#loc283 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":210:13)
#loc284 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":210:29)
#loc285 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":211:9)
#loc286 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":212:26)
#loc287 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":212:13)
#loc288 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":214:9)
#loc289 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":217:9)
#loc290 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":214:13)
#loc291 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":214:29)
#loc292 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":215:9)
#loc293 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":216:26)
#loc294 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":216:13)
#loc295 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":225:5)
#loc296 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":236:5)
#loc297 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":226:9)
#loc298 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":226:20)
#loc299 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":228:9)
#loc300 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":235:9)
#loc301 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":228:13)
#loc302 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":228:21)
#loc303 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":229:9)
#loc304 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":231:9)
#loc305 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":233:9)
#loc306 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":230:26)
#loc307 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":230:32)
#loc308 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":230:13)
#loc309 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":234:13)
#loc310 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":239:1)
#loc311 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":243:1)
#loc312 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":241:5)
#loc313 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_33.cpp":242:5)
#loc314 = loc(fused[#loc1, #loc2])
#loc315 = loc(fused[#loc3, #loc4])
#loc316 = loc(fused[#loc5, #loc6])
#loc317 = loc(fused[#loc7, #loc8])
#loc318 = loc(fused[#loc9, #loc10])
#loc319 = loc(fused[#loc11, #loc12])
#loc320 = loc(fused[#loc13, #loc14])
#loc321 = loc(fused[#loc15, #loc16])
#loc322 = loc(fused[#loc17, #loc18])
#loc323 = loc(fused[#loc19, #loc20])
#loc324 = loc(fused[#loc21, #loc22])
#loc325 = loc(fused[#loc23, #loc24])
#loc326 = loc(fused[#loc27, #loc25])
#loc327 = loc(fused[#loc28, #loc29])
#loc328 = loc(fused[#loc30, #loc31])
#loc329 = loc(fused[#loc32, #loc33])
#loc330 = loc(fused[#loc34, #loc35])
#loc331 = loc(fused[#loc36, #loc37])
#loc332 = loc(fused[#loc38, #loc39])
#loc333 = loc(fused[#loc40, #loc41])
#loc334 = loc(fused[#loc42, #loc43])
#loc335 = loc(fused[#loc48, #loc49])
#loc336 = loc(fused[#loc50, #loc51])
#loc337 = loc(fused[#loc52, #loc53])
#loc338 = loc(fused[#loc54, #loc51])
#loc339 = loc(fused[#loc56, #loc57])
#loc340 = loc(fused[#loc59, #loc60])
#loc341 = loc(fused[#loc61, #loc62])
#loc342 = loc(fused[#loc65, #loc63])
#loc343 = loc(fused[#loc69, #loc66])
#loc344 = loc(fused[#loc73, #loc74])
#loc345 = loc(fused[#loc75, #loc76])
#loc346 = loc(fused[#loc78, #loc79])
#loc347 = loc(fused[#loc80, #loc81])
#loc348 = loc(fused[#loc82, #loc83])
#loc349 = loc(fused[#loc84, #loc76])
#loc350 = loc(fused[#loc86, #loc87])
#loc351 = loc(fused[#loc90, #loc91])
#loc352 = loc(fused[#loc92, #loc87])
#loc353 = loc(fused[#loc98, #loc99])
#loc354 = loc(fused[#loc100, #loc101])
#loc355 = loc(fused[#loc102, #loc103])
#loc356 = loc(fused[#loc104, #loc101])
#loc357 = loc(fused[#loc108, #loc109])
#loc358 = loc(fused[#loc112, #loc113])
#loc359 = loc(fused[#loc114, #loc115])
#loc360 = loc(fused[#loc116, #loc117])
#loc361 = loc(fused[#loc119, #loc120])
#loc362 = loc(fused[#loc121, #loc115])
#loc363 = loc(fused[#loc125, #loc123])
#loc364 = loc(fused[#loc128, #loc129])
#loc365 = loc(fused[#loc131, #loc132])
#loc366 = loc(fused[#loc133, #loc134])
#loc367 = loc(fused[#loc135, #loc132])
#loc368 = loc(fused[#loc138, #loc139])
#loc369 = loc(fused[#loc140, #loc141])
#loc370 = loc(fused[#loc142, #loc139])
#loc371 = loc(fused[#loc145, #loc146])
#loc372 = loc(fused[#loc147, #loc148])
#loc373 = loc(fused[#loc149, #loc150])
#loc374 = loc(fused[#loc152, #loc153])
#loc375 = loc(fused[#loc154, #loc155])
#loc376 = loc(fused[#loc156, #loc157])
#loc377 = loc(fused[#loc160, #loc158])
#loc378 = loc(fused[#loc162, #loc161])
#loc379 = loc(fused[#loc163, #loc164])
#loc380 = loc(fused[#loc165, #loc166])
#loc381 = loc(fused[#loc167, #loc168])
#loc382 = loc(fused[#loc170, #loc171])
#loc383 = loc(fused[#loc173, #loc174])
#loc384 = loc(fused[#loc175, #loc176])
#loc385 = loc(fused[#loc177, #loc178])
#loc386 = loc(fused[#loc181, #loc179])
#loc387 = loc(fused[#loc182, #loc183])
#loc388 = loc(fused[#loc184, #loc185])
#loc389 = loc(fused[#loc186, #loc187])
#loc390 = loc(fused[#loc188, #loc189])
#loc391 = loc(fused[#loc190, #loc191])
#loc392 = loc(fused[#loc192, #loc193])
#loc393 = loc(fused[#loc194, #loc195])
#loc394 = loc(fused[#loc196, #loc197])
#loc395 = loc(fused[#loc202, #loc203])
#loc396 = loc(fused[#loc204, #loc205])
#loc397 = loc(fused[#loc206, #loc207])
#loc398 = loc(fused[#loc208, #loc205])
#loc399 = loc(fused[#loc210, #loc211])
#loc400 = loc(fused[#loc213, #loc214])
#loc401 = loc(fused[#loc215, #loc216])
#loc402 = loc(fused[#loc218, #loc217])
#loc403 = loc(fused[#loc220, #loc219])
#loc404 = loc(fused[#loc223, #loc224])
#loc405 = loc(fused[#loc225, #loc226])
#loc406 = loc(fused[#loc228, #loc229])
#loc407 = loc(fused[#loc230, #loc231])
#loc408 = loc(fused[#loc232, #loc233])
#loc409 = loc(fused[#loc234, #loc226])
#loc410 = loc(fused[#loc236, #loc237])
#loc411 = loc(fused[#loc240, #loc241])
#loc412 = loc(fused[#loc242, #loc237])
#loc413 = loc(fused[#loc248, #loc249])
#loc414 = loc(fused[#loc250, #loc251])
#loc415 = loc(fused[#loc252, #loc253])
#loc416 = loc(fused[#loc254, #loc251])
#loc417 = loc(fused[#loc258, #loc259])
#loc418 = loc(fused[#loc262, #loc263])
#loc419 = loc(fused[#loc264, #loc265])
#loc420 = loc(fused[#loc266, #loc267])
#loc421 = loc(fused[#loc269, #loc270])
#loc422 = loc(fused[#loc271, #loc265])
#loc423 = loc(fused[#loc275, #loc273])
#loc424 = loc(fused[#loc278, #loc279])
#loc425 = loc(fused[#loc281, #loc282])
#loc426 = loc(fused[#loc283, #loc284])
#loc427 = loc(fused[#loc285, #loc282])
#loc428 = loc(fused[#loc288, #loc289])
#loc429 = loc(fused[#loc290, #loc291])
#loc430 = loc(fused[#loc292, #loc289])
#loc431 = loc(fused[#loc295, #loc296])
#loc432 = loc(fused[#loc297, #loc298])
#loc433 = loc(fused[#loc299, #loc300])
#loc434 = loc(fused[#loc301, #loc302])
#loc435 = loc(fused[#loc303, #loc304, #loc305, #loc300])
#loc436 = loc(fused[#loc306, #loc307])
#loc437 = loc(fused[#loc310, #loc311])
