!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc53 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":95:10)
#loc54 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":95:14)
#loc55 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":95:20)
#loc56 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":95:32)
#loc125 = loc(fused[#loc53, #loc54])
#loc126 = loc(fused[#loc55, #loc56])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc107)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc108)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc109)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc111)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc12)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc113)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc114)
    cir.br ^bb1 loc(#loc115)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<0> : !s32i loc(#loc18)
    %3 = cir.cast(int_to_float, %2 : !s32i), !cir.double loc(#loc18)
    cir.store %3, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc114)
    cir.br ^bb2 loc(#loc116)
  ^bb2:  // pred: ^bb1
    %4 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc23)
    %5 = cir.const #cir.int<256> : !s32i loc(#loc24)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc108)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc25)
    %8 = cir.call @fgets(%4, %5, %7) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc26)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc27)
    %11 = cir.cmp(ne, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc117)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc118)
  ^bb3:  // pred: ^bb2
    %12 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc31)
    %13 = cir.call @atof(%12) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc32)
    cir.store %13, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc119)
    cir.br ^bb5 loc(#loc29)
  ^bb4:  // pred: ^bb2
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc35)
    cir.br ^bb5 loc(#loc22)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc22)
  ^bb6:  // pred: ^bb5
    %16 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc36)
    %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc37)
    %18 = cir.cast(float_to_int, %17 : !cir.double), !s32i loc(#loc37)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc38)
    cir.br ^bb7 loc(#loc20)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc14)
  } loc(#loc112)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc121)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc40)
  } loc(#loc120)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc122)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc123)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc50)
  cir.func @main(%arg0: !s32i loc(fused[#loc53, #loc54]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc55, #loc56])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc125)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc126)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc52)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc57)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc58)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc59)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc59)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc60)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc47)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %8 = cir.get_global @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc127)
    cir.call @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01_good() : () -> () loc(#loc62)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc48)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc49)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %13 = cir.get_global @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01_bad() : () -> () loc(#loc66)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc50)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    cir.return %17 : !s32i loc(#loc129)
  } loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Value is negative\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc71)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc131)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc132)
    cir.br ^bb1 loc(#loc133)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<0> : !s32i loc(#loc77)
    %3 = cir.cast(int_to_float, %2 : !s32i), !cir.double loc(#loc77)
    cir.store %3, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc132)
    cir.br ^bb2 loc(#loc134)
  ^bb2:  // pred: ^bb1
    %4 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc82)
    %5 = cir.const #cir.int<256> : !s32i loc(#loc83)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc108)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc84)
    %8 = cir.call @fgets(%4, %5, %7) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc85)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc86)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc86)
    %11 = cir.cmp(ne, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc135)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc136)
  ^bb3:  // pred: ^bb2
    %12 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc90)
    %13 = cir.call @atof(%12) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc91)
    cir.store %13, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc137)
    cir.br ^bb5 loc(#loc88)
  ^bb4:  // pred: ^bb2
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc94)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc94)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    cir.br ^bb5 loc(#loc81)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc81)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc138)
  ^bb7:  // pred: ^bb6
    %16 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc98)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc99)
    %18 = cir.cast(int_to_float, %17 : !s32i), !cir.double loc(#loc99)
    %19 = cir.cmp(lt, %16, %18) : !cir.double, !cir.bool loc(#loc139)
    cir.brcond %19 ^bb8, ^bb9 loc(#loc140)
  ^bb8:  // pred: ^bb7
    %20 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc71)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc103)
    cir.br ^bb10 loc(#loc101)
  ^bb9:  // pred: ^bb7
    %22 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc104)
    %23 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc105)
    %24 = cir.call @sqrt(%23) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc104)
    %25 = cir.cast(float_to_int, %24 : !cir.double), !s32i loc(#loc104)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc106)
    cir.br ^bb10 loc(#loc97)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc97)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc79)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc73)
  } loc(#loc130)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":102:1)
#loc6 = loc("/usr/include/stdlib.h":103:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":39:23)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc13 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":23:1)
#loc14 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":44:1)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":26:9)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":26:41)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":27:9)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":27:31)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":25:5)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":43:5)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":32:9)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":40:9)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":32:19)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":32:32)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":32:49)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":32:13)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":32:59)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":33:9)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":36:9)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":38:9)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":35:33)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":35:28)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":35:13)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":35:44)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":39:13)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":42:33)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":42:28)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":42:9)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":81:1)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":84:1)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":83:5)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":83:11)
#loc43 = loc("/usr/include/stdlib.h":575:1)
#loc44 = loc("/usr/include/stdlib.h":575:41)
#loc45 = loc("/usr/include/time.h":76:1)
#loc46 = loc("/usr/include/time.h":76:38)
#loc47 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":100:15)
#loc48 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":102:15)
#loc49 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":105:15)
#loc50 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":107:15)
#loc51 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":95:1)
#loc52 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":110:1)
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":96:1)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":98:27)
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":98:22)
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":98:5)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":100:5)
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":101:5)
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":101:78)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":102:5)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":105:5)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":106:5)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":106:77)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":107:5)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":109:12)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":109:5)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":72:23)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":50:1)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":79:1)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":53:9)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":53:41)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":54:9)
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":54:31)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":52:5)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":78:5)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":59:9)
#loc81 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":67:9)
#loc82 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":59:19)
#loc83 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":59:32)
#loc84 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":59:49)
#loc85 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":59:13)
#loc86 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":59:59)
#loc87 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":60:9)
#loc88 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":63:9)
#loc89 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":65:9)
#loc90 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":62:33)
#loc91 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":62:28)
#loc92 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":62:13)
#loc93 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":62:44)
#loc94 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":66:23)
#loc95 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":66:13)
#loc96 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":70:9)
#loc97 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":77:9)
#loc98 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":70:13)
#loc99 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":70:28)
#loc100 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":71:9)
#loc101 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":73:9)
#loc102 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":75:9)
#loc103 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":72:13)
#loc104 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":76:32)
#loc105 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":76:37)
#loc106 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01.c":76:13)
#loc107 = loc(fused[#loc1, #loc2])
#loc108 = loc(fused[#loc3, #loc4])
#loc109 = loc(fused[#loc5, #loc6])
#loc110 = loc(fused[#loc7, #loc8])
#loc111 = loc(fused[#loc10, #loc11])
#loc112 = loc(fused[#loc13, #loc14])
#loc113 = loc(fused[#loc15, #loc16])
#loc114 = loc(fused[#loc17, #loc18])
#loc115 = loc(fused[#loc19, #loc20])
#loc116 = loc(fused[#loc21, #loc22])
#loc117 = loc(fused[#loc26, #loc27])
#loc118 = loc(fused[#loc28, #loc29, #loc30, #loc22])
#loc119 = loc(fused[#loc33, #loc34])
#loc120 = loc(fused[#loc39, #loc40])
#loc121 = loc(fused[#loc41, #loc42])
#loc122 = loc(fused[#loc43, #loc44])
#loc123 = loc(fused[#loc45, #loc46])
#loc124 = loc(fused[#loc51, #loc52])
#loc127 = loc(fused[#loc62, #loc63])
#loc128 = loc(fused[#loc66, #loc67])
#loc129 = loc(fused[#loc70, #loc69])
#loc130 = loc(fused[#loc72, #loc73])
#loc131 = loc(fused[#loc74, #loc75])
#loc132 = loc(fused[#loc76, #loc77])
#loc133 = loc(fused[#loc78, #loc79])
#loc134 = loc(fused[#loc80, #loc81])
#loc135 = loc(fused[#loc85, #loc86])
#loc136 = loc(fused[#loc87, #loc88, #loc89, #loc81])
#loc137 = loc(fused[#loc92, #loc93])
#loc138 = loc(fused[#loc96, #loc97])
#loc139 = loc(fused[#loc98, #loc99])
#loc140 = loc(fused[#loc100, #loc101, #loc102, #loc97])
