!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":26:21)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":26:25)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":81:25)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":81:29)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":61:25)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":61:29)
#true = #cir.bool<true> : !cir.bool
#loc139 = loc(fused[#loc14, #loc15])
#loc155 = loc(fused[#loc61, #loc62])
#loc171 = loc(fused[#loc113, #loc114])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc133)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc134)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc135)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc136)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc137)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc14, #loc15])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc139)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc16)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc141)
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
      %4 = cir.binop(mul, %2, %3) nsw : !s32i loc(#loc21)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc141)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc23)
    } loc(#loc140)
    cir.return loc(#loc13)
  } loc(#loc138)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc143)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc28)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc146)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc146)
      cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc146)
      cir.scope {
        %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc36)
        %6 = cir.const #cir.int<3> : !s32i loc(#loc37)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc37)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc37)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc37)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc37)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc37)
        %12 = cir.binop(add, %9, %11) : !u64i loc(#loc37)
        %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc37)
        %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc134)
        %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc38)
        %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc39)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc40)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc40)
        %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc148)
        cir.if %19 {
          %20 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc44)
          %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc45)
          cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc150)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc48)
        } loc(#loc149)
      } loc(#loc147)
    } loc(#loc145)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    cir.call @badSink(%2) : (!s32i) -> () loc(#loc50)
    cir.return loc(#loc25)
  } loc(#loc142)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc152)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc53)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc153)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc55)
    cir.return loc(#loc52)
  } loc(#loc151)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc58)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc61, #loc62])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc155)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
      %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc67)
      %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc67)
      %4 = cir.const #cir.int<1> : !s32i loc(#loc67)
      %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc67)
      %6 = cir.cmp(gt, %1, %5) : !s32i, !cir.bool loc(#loc157)
      %7 = cir.ternary(%6, true {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
        %9 = cir.abs %8 poison : !s32i loc(#loc70)
        %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc70)
        %11 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc71)
        %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc72)
        %13 = cir.cast(int_to_float, %12 : !s32i), !cir.double loc(#loc72)
        %14 = cir.call @sqrt(%13) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc71)
        %15 = cir.cast(float_to_int, %14 : !cir.double), !s64i loc(#loc71)
        %16 = cir.cmp(lt, %10, %15) : !s64i, !cir.bool loc(#loc158)
        %17 = cir.ternary(%16, true {
          %18 = cir.const #true loc(#loc68)
          cir.yield %18 : !cir.bool loc(#loc68)
        }, false {
          %18 = cir.const #false loc(#loc68)
          cir.yield %18 : !cir.bool loc(#loc68)
        }) : (!cir.bool) -> !cir.bool loc(#loc68)
        cir.yield %17 : !cir.bool loc(#loc68)
      }, false {
        %8 = cir.const #false loc(#loc68)
        cir.yield %8 : !cir.bool loc(#loc68)
      }) : (!cir.bool) -> !cir.bool loc(#loc68)
      cir.if %7 {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc160)
        %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
        %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
        %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc79)
        cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc160)
        %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc80)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc81)
      } else {
        %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc58)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc58)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc82)
      } loc(#loc159)
    } loc(#loc156)
    cir.return loc(#loc60)
  } loc(#loc154)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc162)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc87)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc165)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc165)
      cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc165)
      cir.scope {
        %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc95)
        %6 = cir.const #cir.int<3> : !s32i loc(#loc96)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc96)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc96)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc96)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc96)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc96)
        %12 = cir.binop(add, %9, %11) : !u64i loc(#loc96)
        %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc96)
        %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc134)
        %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc97)
        %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc98)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc99)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc99)
        %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc167)
        cir.if %19 {
          %20 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc103)
          %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc104)
          cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc169)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc107)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc107)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc108)
        } loc(#loc168)
      } loc(#loc166)
    } loc(#loc164)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    cir.call @goodB2GSink(%2) : (!s32i) -> () loc(#loc110)
    cir.return loc(#loc84)
  } loc(#loc161)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc113, #loc114])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc171)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc173)
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc120)
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
      %4 = cir.binop(mul, %2, %3) nsw : !s32i loc(#loc120)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc173)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc121)
      cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc122)
    } loc(#loc172)
    cir.return loc(#loc112)
  } loc(#loc170)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc175)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc127)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc129)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc131)
    cir.call @goodG2BSink(%3) : (!s32i) -> () loc(#loc132)
    cir.return loc(#loc124)
  } loc(#loc174)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_41.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":50:23)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":26:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":33:1)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":27:1)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":28:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":32:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":30:9)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":30:29)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":30:22)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":31:22)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":31:9)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":35:1)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":54:1)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":37:5)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":37:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":39:12)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":39:5)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":40:5)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":52:5)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":41:9)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":41:45)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":43:9)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":51:9)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":43:19)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":43:32)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":43:49)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":43:13)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":43:59)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":44:9)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":47:9)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":49:9)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":46:25)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":46:20)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":46:13)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":46:36)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":50:13)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":53:13)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":53:5)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":116:1)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":120:1)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":118:5)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":118:13)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":119:5)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":119:13)
#loc57 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":91:19)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":81:1)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":93:1)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":82:1)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":84:5)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":92:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":84:9)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":84:16)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":84:24)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":84:31)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":84:27)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":84:45)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":84:58)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":84:65)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":85:5)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":88:5)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":90:5)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":86:9)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":86:29)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":86:22)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":87:22)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":87:9)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":91:9)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":95:1)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":114:1)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":97:5)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":97:9)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":99:12)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":99:5)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":100:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":112:5)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":101:9)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":101:45)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":103:9)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":111:9)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":103:19)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":103:32)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":103:49)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":103:13)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":103:59)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":104:9)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":107:9)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":109:9)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":106:25)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":106:20)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":106:13)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":106:36)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":110:23)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":110:13)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":113:17)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":113:5)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":61:1)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":68:1)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":62:1)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":63:5)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":67:5)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":65:9)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":65:29)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":65:22)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":66:22)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":66:9)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":70:1)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":78:1)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":72:5)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":72:9)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":74:12)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":74:5)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":76:12)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":76:5)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":77:17)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_square_41.c":77:5)
#loc133 = loc(fused[#loc1, #loc2])
#loc134 = loc(fused[#loc3, #loc4])
#loc135 = loc(fused[#loc5, #loc6])
#loc136 = loc(fused[#loc7, #loc8])
#loc137 = loc(fused[#loc10, #loc11])
#loc138 = loc(fused[#loc12, #loc13])
#loc140 = loc(fused[#loc17, #loc18])
#loc141 = loc(fused[#loc19, #loc20])
#loc142 = loc(fused[#loc24, #loc25])
#loc143 = loc(fused[#loc26, #loc27])
#loc144 = loc(fused[#loc29, #loc28])
#loc145 = loc(fused[#loc30, #loc31])
#loc146 = loc(fused[#loc32, #loc33])
#loc147 = loc(fused[#loc34, #loc35])
#loc148 = loc(fused[#loc39, #loc40])
#loc149 = loc(fused[#loc41, #loc42, #loc43, #loc35])
#loc150 = loc(fused[#loc46, #loc47])
#loc151 = loc(fused[#loc51, #loc52])
#loc152 = loc(fused[#loc53, #loc54])
#loc153 = loc(fused[#loc55, #loc56])
#loc154 = loc(fused[#loc59, #loc60])
#loc156 = loc(fused[#loc64, #loc65])
#loc157 = loc(fused[#loc66, #loc67])
#loc158 = loc(fused[#loc70, #loc73])
#loc159 = loc(fused[#loc74, #loc75, #loc76, #loc65])
#loc160 = loc(fused[#loc77, #loc78])
#loc161 = loc(fused[#loc83, #loc84])
#loc162 = loc(fused[#loc85, #loc86])
#loc163 = loc(fused[#loc88, #loc87])
#loc164 = loc(fused[#loc89, #loc90])
#loc165 = loc(fused[#loc91, #loc92])
#loc166 = loc(fused[#loc93, #loc94])
#loc167 = loc(fused[#loc98, #loc99])
#loc168 = loc(fused[#loc100, #loc101, #loc102, #loc94])
#loc169 = loc(fused[#loc105, #loc106])
#loc170 = loc(fused[#loc111, #loc112])
#loc172 = loc(fused[#loc116, #loc117])
#loc173 = loc(fused[#loc118, #loc119])
#loc174 = loc(fused[#loc123, #loc124])
#loc175 = loc(fused[#loc125, #loc126])
#loc176 = loc(fused[#loc128, #loc127])
#loc177 = loc(fused[#loc130, #loc129])
