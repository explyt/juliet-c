!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_fgets_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc162)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc163)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc164)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc165)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc166)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_fgets_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc168)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc18)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc22)
        cir.condition(%4) loc(#loc22)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc173)
            %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc173)
            cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc173)
            cir.scope {
              %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc30)
              %6 = cir.const #cir.int<3> : !s32i loc(#loc31)
              %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc31)
              %8 = cir.const #cir.int<4> : !u64i loc(#loc31)
              %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc31)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc31)
              %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc31)
              %12 = cir.binop(add, %9, %11) : !u64i loc(#loc31)
              %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc31)
              %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc163)
              %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc32)
              %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc33)
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
              %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
              %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc175)
              cir.if %19 {
                %20 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc38)
                %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc39)
                cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
              } else {
                %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc42)
              } loc(#loc176)
            } loc(#loc174)
          } loc(#loc172)
          cir.break loc(#loc43)
        } loc(#loc171)
        cir.yield loc(#loc21)
      } loc(#loc170)
    } loc(#loc170)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc46)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc46)
        cir.condition(%4) loc(#loc46)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc181)
            %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc181)
            cir.store %4, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc181)
            cir.scope {
              %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
              %6 = cir.const #cir.int<0> : !s32i loc(#loc55)
              %7 = cir.cmp(ge, %5, %6) : !s32i, !cir.bool loc(#loc183)
              cir.if %7 {
                %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
                %9 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc60)
                %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc60)
                %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc60)
                cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc61)
              } else {
                %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc12)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc12)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc62)
              } loc(#loc184)
            } loc(#loc182)
          } loc(#loc180)
          cir.break loc(#loc63)
        } loc(#loc179)
        cir.yield loc(#loc45)
      } loc(#loc178)
    } loc(#loc178)
    cir.return loc(#loc14)
  } loc(#loc167)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_fgets_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc186)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc66)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc187)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc68)
    cir.return loc(#loc65)
  } loc(#loc185)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc70)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc76)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc80)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc80)
        cir.condition(%4) loc(#loc80)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc194)
            %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc194)
            cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc194)
            cir.scope {
              %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc88)
              %6 = cir.const #cir.int<3> : !s32i loc(#loc89)
              %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc89)
              %8 = cir.const #cir.int<4> : !u64i loc(#loc89)
              %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc89)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc89)
              %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc89)
              %12 = cir.binop(add, %9, %11) : !u64i loc(#loc89)
              %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc89)
              %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc163)
              %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc90)
              %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc91)
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc92)
              %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc92)
              %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc196)
              cir.if %19 {
                %20 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc96)
                %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc97)
                cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc198)
              } else {
                %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc100)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc100)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc101)
              } loc(#loc197)
            } loc(#loc195)
          } loc(#loc193)
          cir.break loc(#loc102)
        } loc(#loc192)
        cir.yield loc(#loc79)
      } loc(#loc191)
    } loc(#loc191)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc105)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc105)
        cir.condition(%4) loc(#loc105)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc202)
            %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc202)
            cir.store %4, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc202)
            cir.scope {
              %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
              %6 = cir.const #cir.int<0> : !s32i loc(#loc114)
              %7 = cir.cmp(ge, %5, %6) : !s32i, !cir.bool loc(#loc204)
              %8 = cir.ternary(%7, true {
                %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                %10 = cir.const #cir.int<10> : !s32i loc(#loc117)
                %11 = cir.cmp(lt, %9, %10) : !s32i, !cir.bool loc(#loc205)
                %12 = cir.ternary(%11, true {
                  %13 = cir.const #true loc(#loc115)
                  cir.yield %13 : !cir.bool loc(#loc115)
                }, false {
                  %13 = cir.const #false loc(#loc115)
                  cir.yield %13 : !cir.bool loc(#loc115)
                }) : (!cir.bool) -> !cir.bool loc(#loc115)
                cir.yield %12 : !cir.bool loc(#loc115)
              }, false {
                %9 = cir.const #false loc(#loc115)
                cir.yield %9 : !cir.bool loc(#loc115)
              }) : (!cir.bool) -> !cir.bool loc(#loc115)
              cir.if %8 {
                %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
                %10 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc123)
                %11 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %9 : !s32i), !cir.ptr<!s32i> loc(#loc123)
                %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc123)
                cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc124)
              } else {
                %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc70)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc70)
                cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc125)
              } loc(#loc206)
            } loc(#loc203)
          } loc(#loc201)
          cir.break loc(#loc126)
        } loc(#loc200)
        cir.yield loc(#loc104)
      } loc(#loc199)
    } loc(#loc199)
    cir.return loc(#loc72)
  } loc(#loc188)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc131)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc132)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc136)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc136)
        cir.condition(%4) loc(#loc136)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<7> : !s32i loc(#loc138)
          cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
          cir.break loc(#loc140)
        } loc(#loc211)
        cir.yield loc(#loc135)
      } loc(#loc210)
    } loc(#loc210)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc143)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc143)
        cir.condition(%4) loc(#loc143)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc216)
            %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc216)
            cir.store %4, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc216)
            cir.scope {
              %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
              %6 = cir.const #cir.int<0> : !s32i loc(#loc152)
              %7 = cir.cmp(ge, %5, %6) : !s32i, !cir.bool loc(#loc218)
              cir.if %7 {
                %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc156)
                %9 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc157)
                %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc157)
                %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc157)
                cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc158)
              } else {
                %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc159)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc159)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc160)
              } loc(#loc219)
            } loc(#loc217)
          } loc(#loc215)
          cir.break loc(#loc161)
        } loc(#loc214)
        cir.yield loc(#loc142)
      } loc(#loc213)
    } loc(#loc213)
    cir.return loc(#loc128)
  } loc(#loc207)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_fgets_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":41:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":58:27)
#loc13 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":24:1)
#loc14 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":63:1)
#loc15 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":26:5)
#loc16 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":26:9)
#loc17 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":28:13)
#loc18 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":28:12)
#loc19 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":28:5)
#loc20 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":29:5)
#loc21 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":45:5)
#loc22 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":29:11)
#loc23 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":30:5)
#loc24 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":31:9)
#loc25 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":43:9)
#loc26 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":32:13)
#loc27 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":32:49)
#loc28 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":34:13)
#loc29 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":42:13)
#loc30 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":34:23)
#loc31 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":34:36)
#loc32 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":34:53)
#loc33 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":34:17)
#loc34 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":34:63)
#loc35 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":35:13)
#loc36 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":38:13)
#loc37 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":40:13)
#loc38 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":37:29)
#loc39 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":37:24)
#loc40 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":37:17)
#loc41 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":37:40)
#loc42 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":41:17)
#loc43 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":44:9)
#loc44 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":46:5)
#loc45 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":62:5)
#loc46 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":46:11)
#loc47 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":47:5)
#loc48 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":48:9)
#loc49 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":60:9)
#loc50 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":49:13)
#loc51 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":49:34)
#loc52 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":52:13)
#loc53 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":59:13)
#loc54 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":52:17)
#loc55 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":52:25)
#loc56 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":53:13)
#loc57 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":55:13)
#loc58 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":57:13)
#loc59 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":54:37)
#loc60 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":54:30)
#loc61 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":54:17)
#loc62 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":58:17)
#loc63 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":61:9)
#loc64 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":142:1)
#loc65 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":146:1)
#loc66 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":144:5)
#loc67 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":144:13)
#loc68 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":145:5)
#loc69 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":145:13)
#loc70 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":103:27)
#loc71 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":70:1)
#loc72 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":108:1)
#loc73 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":72:5)
#loc74 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":72:9)
#loc75 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":74:13)
#loc76 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":74:12)
#loc77 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":74:5)
#loc78 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":75:5)
#loc79 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":91:5)
#loc80 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":75:11)
#loc81 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":76:5)
#loc82 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":77:9)
#loc83 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":89:9)
#loc84 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":78:13)
#loc85 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":78:49)
#loc86 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":80:13)
#loc87 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":88:13)
#loc88 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":80:23)
#loc89 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":80:36)
#loc90 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":80:53)
#loc91 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":80:17)
#loc92 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":80:63)
#loc93 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":81:13)
#loc94 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":84:13)
#loc95 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":86:13)
#loc96 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":83:29)
#loc97 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":83:24)
#loc98 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":83:17)
#loc99 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":83:40)
#loc100 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":87:27)
#loc101 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":87:17)
#loc102 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":90:9)
#loc103 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":92:5)
#loc104 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":107:5)
#loc105 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":92:11)
#loc106 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":93:5)
#loc107 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":94:9)
#loc108 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":105:9)
#loc109 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":95:13)
#loc110 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":95:34)
#loc111 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":97:13)
#loc112 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":104:13)
#loc113 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":97:17)
#loc114 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":97:25)
#loc115 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":97:27)
#loc116 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":97:30)
#loc117 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":97:38)
#loc118 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":97:40)
#loc119 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":98:13)
#loc120 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":100:13)
#loc121 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":102:13)
#loc122 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":99:37)
#loc123 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":99:30)
#loc124 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":99:17)
#loc125 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":103:17)
#loc126 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":106:9)
#loc127 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":111:1)
#loc128 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":140:1)
#loc129 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":113:5)
#loc130 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":113:9)
#loc131 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":115:13)
#loc132 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":115:12)
#loc133 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":115:5)
#loc134 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":116:5)
#loc135 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":122:5)
#loc136 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":116:11)
#loc137 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":117:5)
#loc138 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":120:16)
#loc139 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":120:9)
#loc140 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":121:9)
#loc141 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":123:5)
#loc142 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":139:5)
#loc143 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":123:11)
#loc144 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":124:5)
#loc145 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":125:9)
#loc146 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":137:9)
#loc147 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":126:13)
#loc148 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":126:34)
#loc149 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":129:13)
#loc150 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":136:13)
#loc151 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":129:17)
#loc152 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":129:25)
#loc153 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":130:13)
#loc154 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":132:13)
#loc155 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":134:13)
#loc156 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":131:37)
#loc157 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":131:30)
#loc158 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":131:17)
#loc159 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":135:27)
#loc160 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":135:17)
#loc161 = loc("CWE126_Buffer_Overread__CWE129_fgets_16.c":138:9)
#loc162 = loc(fused[#loc1, #loc2])
#loc163 = loc(fused[#loc3, #loc4])
#loc164 = loc(fused[#loc5, #loc6])
#loc165 = loc(fused[#loc7, #loc8])
#loc166 = loc(fused[#loc10, #loc11])
#loc167 = loc(fused[#loc13, #loc14])
#loc168 = loc(fused[#loc15, #loc16])
#loc169 = loc(fused[#loc19, #loc17])
#loc170 = loc(fused[#loc20, #loc21])
#loc171 = loc(fused[#loc23, #loc21])
#loc172 = loc(fused[#loc24, #loc25])
#loc173 = loc(fused[#loc26, #loc27])
#loc174 = loc(fused[#loc28, #loc29])
#loc175 = loc(fused[#loc33, #loc34])
#loc176 = loc(fused[#loc35, #loc36, #loc37, #loc29])
#loc177 = loc(fused[#loc40, #loc41])
#loc178 = loc(fused[#loc44, #loc45])
#loc179 = loc(fused[#loc47, #loc45])
#loc180 = loc(fused[#loc48, #loc49])
#loc181 = loc(fused[#loc50, #loc51])
#loc182 = loc(fused[#loc52, #loc53])
#loc183 = loc(fused[#loc54, #loc55])
#loc184 = loc(fused[#loc56, #loc57, #loc58, #loc53])
#loc185 = loc(fused[#loc64, #loc65])
#loc186 = loc(fused[#loc66, #loc67])
#loc187 = loc(fused[#loc68, #loc69])
#loc188 = loc(fused[#loc71, #loc72])
#loc189 = loc(fused[#loc73, #loc74])
#loc190 = loc(fused[#loc77, #loc75])
#loc191 = loc(fused[#loc78, #loc79])
#loc192 = loc(fused[#loc81, #loc79])
#loc193 = loc(fused[#loc82, #loc83])
#loc194 = loc(fused[#loc84, #loc85])
#loc195 = loc(fused[#loc86, #loc87])
#loc196 = loc(fused[#loc91, #loc92])
#loc197 = loc(fused[#loc93, #loc94, #loc95, #loc87])
#loc198 = loc(fused[#loc98, #loc99])
#loc199 = loc(fused[#loc103, #loc104])
#loc200 = loc(fused[#loc106, #loc104])
#loc201 = loc(fused[#loc107, #loc108])
#loc202 = loc(fused[#loc109, #loc110])
#loc203 = loc(fused[#loc111, #loc112])
#loc204 = loc(fused[#loc113, #loc114])
#loc205 = loc(fused[#loc116, #loc118])
#loc206 = loc(fused[#loc119, #loc120, #loc121, #loc112])
#loc207 = loc(fused[#loc127, #loc128])
#loc208 = loc(fused[#loc129, #loc130])
#loc209 = loc(fused[#loc133, #loc131])
#loc210 = loc(fused[#loc134, #loc135])
#loc211 = loc(fused[#loc137, #loc135])
#loc212 = loc(fused[#loc139, #loc138])
#loc213 = loc(fused[#loc141, #loc142])
#loc214 = loc(fused[#loc144, #loc142])
#loc215 = loc(fused[#loc145, #loc146])
#loc216 = loc(fused[#loc147, #loc148])
#loc217 = loc(fused[#loc149, #loc150])
#loc218 = loc(fused[#loc151, #loc152])
#loc219 = loc(fused[#loc153, #loc154, #loc155, #loc150])
