!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc298)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc299)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc300)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc301)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc302)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc303)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc304)
  cir.func private @close(!s32i) -> !s32i loc(#loc305)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc306)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc19)
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc307)
  cir.func private @printIntLine(!s32i) loc(#loc308)
  cir.func @_ZN64CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_153badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc310)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc29)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc311)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc33)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc314)
            %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc315)
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc316)
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc317)
            %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc318)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc42)
            %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc42)
            cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc316)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc44)
            %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc44)
            cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc317)
            cir.scope {
              cir.do {
                cir.scope {
                  %13 = cir.const #cir.int<2> : !s32i loc(#loc51)
                  %14 = cir.const #cir.int<1> : !u32i loc(#loc52)
                  %15 = cir.cast(integral, %14 : !u32i), !s32i loc(#loc52)
                  %16 = cir.const #cir.int<6> : !u32i loc(#loc53)
                  %17 = cir.cast(integral, %16 : !u32i), !s32i loc(#loc53)
                  %18 = cir.call @socket(%13, %15, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc54)
                  cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc321)
                  cir.scope {
                    %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc59)
                    %60 = cir.const #cir.int<1> : !s32i loc(#loc60)
                    %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc60)
                    %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc323)
                    cir.if %62 {
                      cir.break loc(#loc62)
                    } loc(#loc324)
                  } loc(#loc322)
                  %19 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc325)
                  %20 = cir.const #cir.int<0> : !s32i loc(#loc65)
                  %21 = cir.const #cir.int<16> : !u64i loc(#loc326)
                  cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc327)
                  %22 = cir.const #cir.int<2> : !s32i loc(#loc70)
                  %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc70)
                  %24 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
                  cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc328)
                  %25 = cir.const #cir.int<0> : !s32i loc(#loc73)
                  %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc73)
                  %27 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
                  %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
                  cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc329)
                  %29 = cir.const #cir.int<27015> : !s32i loc(#loc77)
                  %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc77)
                  %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc78)
                  %32 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
                  cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc330)
                  cir.scope {
                    %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc84)
                    %60 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc332)
                    %61 = cir.const #cir.int<16> : !u64i loc(#loc333)
                    %62 = cir.cast(integral, %61 : !u64i), !u32i loc(#loc333)
                    %63 = cir.call @bind(%59, %60, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc89)
                    %64 = cir.const #cir.int<1> : !s32i loc(#loc90)
                    %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc90)
                    %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc334)
                    cir.if %66 {
                      cir.break loc(#loc92)
                    } loc(#loc335)
                  } loc(#loc331)
                  cir.scope {
                    %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                    %60 = cir.const #cir.int<5> : !s32i loc(#loc96)
                    %61 = cir.call @listen(%59, %60) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc97)
                    %62 = cir.const #cir.int<1> : !s32i loc(#loc98)
                    %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc98)
                    %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc337)
                    cir.if %64 {
                      cir.break loc(#loc100)
                    } loc(#loc338)
                  } loc(#loc336)
                  %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc101)
                  %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc102)
                  %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc103)
                  %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc104)
                  cir.store %36, %7 : !s32i, !cir.ptr<!s32i> loc(#loc339)
                  cir.scope {
                    %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                    %60 = cir.const #cir.int<1> : !s32i loc(#loc110)
                    %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc110)
                    %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc341)
                    cir.if %62 {
                      cir.break loc(#loc112)
                    } loc(#loc342)
                  } loc(#loc340)
                  %37 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                  %38 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc114)
                  %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc114)
                  %40 = cir.const #cir.int<3> : !s32i loc(#loc115)
                  %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc115)
                  %42 = cir.const #cir.int<4> : !u64i loc(#loc115)
                  %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc115)
                  %44 = cir.const #cir.int<2> : !s32i loc(#loc115)
                  %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc115)
                  %46 = cir.binop(add, %43, %45) : !u64i loc(#loc115)
                  %47 = cir.const #cir.int<1> : !s32i loc(#loc116)
                  %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc116)
                  %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc343)
                  %50 = cir.const #cir.int<0> : !s32i loc(#loc117)
                  %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc118)
                  %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc118)
                  cir.store %52, %4 : !s32i, !cir.ptr<!s32i> loc(#loc344)
                  cir.scope {
                    %59 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc123)
                    %60 = cir.const #cir.int<1> : !s32i loc(#loc124)
                    %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc124)
                    %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc346)
                    %63 = cir.ternary(%62, true {
                      %64 = cir.const #true loc(#loc125)
                      cir.yield %64 : !cir.bool loc(#loc125)
                    }, false {
                      %64 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc126)
                      %65 = cir.const #cir.int<0> : !s32i loc(#loc127)
                      %66 = cir.cmp(eq, %64, %65) : !s32i, !cir.bool loc(#loc347)
                      %67 = cir.ternary(%66, true {
                        %68 = cir.const #true loc(#loc125)
                        cir.yield %68 : !cir.bool loc(#loc125)
                      }, false {
                        %68 = cir.const #false loc(#loc125)
                        cir.yield %68 : !cir.bool loc(#loc125)
                      }) : (!cir.bool) -> !cir.bool loc(#loc125)
                      cir.yield %67 : !cir.bool loc(#loc125)
                    }) : (!cir.bool) -> !cir.bool loc(#loc125)
                    cir.if %63 {
                      cir.break loc(#loc129)
                    } loc(#loc348)
                  } loc(#loc345)
                  %53 = cir.const #cir.int<0> : !s8i loc(#loc130)
                  %54 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc131)
                  %55 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc132)
                  %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc132)
                  cir.store %53, %56 : !s8i, !cir.ptr<!s8i> loc(#loc349)
                  %57 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc133)
                  %58 = cir.call @atoi(%57) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc134)
                  cir.store %58, %0 : !s32i, !cir.ptr<!s32i> loc(#loc350)
                } loc(#loc320)
                cir.yield loc(#loc48)
              } while {
                %13 = cir.const #cir.int<0> : !s32i loc(#loc137)
                %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc137)
                cir.condition(%14) loc(#loc137)
              } loc(#loc319)
            } loc(#loc319)
            cir.scope {
              %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc140)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc141)
              %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc141)
              %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc352)
              cir.if %16 {
                %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc143)
                %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc144)
              } loc(#loc353)
            } loc(#loc351)
            cir.scope {
              %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc147)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc148)
              %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc148)
              %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc355)
              cir.if %16 {
                %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc150)
                %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc151)
              } loc(#loc356)
            } loc(#loc354)
          } loc(#loc313)
          cir.break loc(#loc152)
        } loc(#loc34)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc19)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc19)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc154)
          cir.break loc(#loc155)
        } loc(#loc153)
        cir.yield loc(#loc31)
      } loc(#loc31)
    } loc(#loc312)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc358)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc359)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc360)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc163)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc163)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc361)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc362)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc363)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc167)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc168)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc364)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc364)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc365)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc174)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc174)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc367)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc176)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc177)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc177)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc368)
          cir.condition(%24) loc(#loc368)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc179)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc180)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc181)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc182)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc370)
          } loc(#loc369)
          cir.yield loc(#loc173)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc183)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc184)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc371)
          cir.yield loc(#loc366)
        } loc(#loc366)
      } loc(#loc366)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc185)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc186)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc187)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc185)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc188)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc189)
      cir.delete.array %18 : <!s32i> loc(#loc189)
    } loc(#loc357)
    cir.return loc(#loc25)
  } loc(#loc309)
  cir.func internal private @_ZN64CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15L8goodG2B1Ev() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc373)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc194)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc195)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc374)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc199)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc201)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc201)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc202)
          cir.break loc(#loc203)
        } loc(#loc200)
        cir.case(default, []) {
          %4 = cir.const #cir.int<20> : !s32i loc(#loc205)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc376)
          cir.break loc(#loc207)
        } loc(#loc204)
        cir.yield loc(#loc197)
      } loc(#loc197)
    } loc(#loc375)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc378)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc379)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc380)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc215)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc215)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc381)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc382)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc383)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc219)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc220)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc384)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc384)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc385)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc226)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc226)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc387)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc228)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc229)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc229)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc388)
          cir.condition(%24) loc(#loc388)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc231)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc232)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc233)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc234)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc390)
          } loc(#loc389)
          cir.yield loc(#loc225)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc235)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc236)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc391)
          cir.yield loc(#loc386)
        } loc(#loc386)
      } loc(#loc386)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc237)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc238)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc239)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc237)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc240)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc241)
      cir.delete.array %18 : <!s32i> loc(#loc241)
    } loc(#loc377)
    cir.return loc(#loc191)
  } loc(#loc372)
  cir.func internal private @_ZN64CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15L8goodG2B2Ev() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc393)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc246)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc247)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc394)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc251)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<20> : !s32i loc(#loc253)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc396)
          cir.break loc(#loc255)
        } loc(#loc252)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc257)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc257)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc258)
          cir.break loc(#loc259)
        } loc(#loc256)
        cir.yield loc(#loc249)
      } loc(#loc249)
    } loc(#loc395)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc398)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc399)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc400)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc267)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc267)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc401)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc402)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc403)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc271)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc272)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc404)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc404)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc405)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc278)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc278)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc407)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc280)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc281)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc281)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc408)
          cir.condition(%24) loc(#loc408)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc283)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc284)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc285)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc286)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc410)
          } loc(#loc409)
          cir.yield loc(#loc277)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc287)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc288)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc411)
          cir.yield loc(#loc406)
        } loc(#loc406)
      } loc(#loc406)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc289)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc290)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc291)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc289)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc292)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc293)
      cir.delete.array %18 : <!s32i> loc(#loc293)
    } loc(#loc397)
    cir.return loc(#loc243)
  } loc(#loc392)
  cir.func @_ZN64CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_154goodEv() extra(#fn_attr1) {
    cir.call @_ZN64CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15L8goodG2B1Ev() : () -> () loc(#loc296)
    cir.call @_ZN64CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15L8goodG2B2Ev() : () -> () loc(#loc297)
    cir.return loc(#loc295)
  } loc(#loc412)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc18 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":126:19)
#loc20 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc21 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":46:1)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":142:1)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":48:5)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":48:9)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":50:13)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":50:12)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":50:5)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":51:5)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":128:5)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":51:12)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":53:5)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":54:5)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":122:5)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":59:9)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":59:13)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":60:9)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":60:28)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":61:9)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":61:31)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":62:9)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":62:31)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":63:9)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":63:41)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":64:9)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":107:17)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":65:9)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":106:9)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":74:35)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":74:44)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":74:57)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":74:28)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":74:13)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":74:68)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":75:13)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":78:13)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":75:17)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":75:33)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":76:13)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":77:17)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":79:20)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":79:21)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":79:30)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":79:33)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":79:47)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":79:13)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":79:48)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":80:34)
#loc71 = loc("/usr/include/netinet/in.h":249:5)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":80:13)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":81:39)
#loc74 = loc("/usr/include/netinet/in.h":251:20)
#loc75 = loc("/usr/include/netinet/in.h":33:15)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":81:13)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":82:38)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":82:32)
#loc79 = loc("/usr/include/netinet/in.h":250:15)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":82:13)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":82:46)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":83:13)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":86:13)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":83:22)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":83:54)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":83:55)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":83:64)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":83:78)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":83:17)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":83:84)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":84:13)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":85:17)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":87:13)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":90:13)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":87:24)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":87:38)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":87:17)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":87:57)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":88:13)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":89:17)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":91:35)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":91:49)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":91:55)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":91:28)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":91:13)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":91:59)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":92:13)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":95:13)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":92:17)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":92:33)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":93:13)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":94:17)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":97:31)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":97:45)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":97:58)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":97:76)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":97:79)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":97:26)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":97:13)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":97:80)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":98:13)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":101:13)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":98:17)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":98:31)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":98:44)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":98:47)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":98:61)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":99:13)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":100:17)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":103:39)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":103:25)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":103:13)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":105:25)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":105:20)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":105:13)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":105:36)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":107:16)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":108:9)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":111:9)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":108:13)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":108:29)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":109:9)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":110:26)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":110:13)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":112:9)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":115:9)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":112:13)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":112:29)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":113:9)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":114:26)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":114:13)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":123:5)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":124:5)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":126:9)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":127:9)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":129:5)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":141:5)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":130:9)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":130:16)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":130:26)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":131:9)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":131:14)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":133:21)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":133:28)
#loc165 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":133:38)
#loc166 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":133:9)
#loc167 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":134:37)
#loc168 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":46:6)
#loc169 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":134:28)
#loc170 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":134:46)
#loc171 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":134:9)
#loc172 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":135:9)
#loc173 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":138:9)
#loc174 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":135:18)
#loc175 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":135:14)
#loc176 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":135:21)
#loc177 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":135:33)
#loc178 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":136:9)
#loc179 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":137:29)
#loc180 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":137:13)
#loc181 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":137:24)
#loc182 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":137:25)
#loc183 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":135:40)
#loc184 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":135:39)
#loc185 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":139:22)
#loc186 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":139:33)
#loc187 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":139:34)
#loc188 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":139:9)
#loc189 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":140:19)
#loc190 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":149:1)
#loc191 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":178:1)
#loc192 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":151:5)
#loc193 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":151:9)
#loc194 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":153:13)
#loc195 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":153:12)
#loc196 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":153:5)
#loc197 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":154:5)
#loc198 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":164:5)
#loc199 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":154:12)
#loc200 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":156:5)
#loc201 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":158:19)
#loc202 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":158:9)
#loc203 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":159:9)
#loc204 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":160:5)
#loc205 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":162:16)
#loc206 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":162:9)
#loc207 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":163:9)
#loc208 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":165:5)
#loc209 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":177:5)
#loc210 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":166:9)
#loc211 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":166:16)
#loc212 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":166:26)
#loc213 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":167:9)
#loc214 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":167:14)
#loc215 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":169:21)
#loc216 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":169:28)
#loc217 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":169:38)
#loc218 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":169:9)
#loc219 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":170:37)
#loc220 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":149:13)
#loc221 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":170:28)
#loc222 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":170:46)
#loc223 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":170:9)
#loc224 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":171:9)
#loc225 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":174:9)
#loc226 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":171:18)
#loc227 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":171:14)
#loc228 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":171:21)
#loc229 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":171:33)
#loc230 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":172:9)
#loc231 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":173:29)
#loc232 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":173:13)
#loc233 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":173:24)
#loc234 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":173:25)
#loc235 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":171:40)
#loc236 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":171:39)
#loc237 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":175:22)
#loc238 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":175:33)
#loc239 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":175:34)
#loc240 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":175:9)
#loc241 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":176:19)
#loc242 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":181:1)
#loc243 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":210:1)
#loc244 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":183:5)
#loc245 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":183:9)
#loc246 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":185:13)
#loc247 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":185:12)
#loc248 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":185:5)
#loc249 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":186:5)
#loc250 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":196:5)
#loc251 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":186:12)
#loc252 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":188:5)
#loc253 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":190:16)
#loc254 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":190:9)
#loc255 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":191:9)
#loc256 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":192:5)
#loc257 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":194:19)
#loc258 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":194:9)
#loc259 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":195:9)
#loc260 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":197:5)
#loc261 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":209:5)
#loc262 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":198:9)
#loc263 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":198:16)
#loc264 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":198:26)
#loc265 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":199:9)
#loc266 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":199:14)
#loc267 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":201:21)
#loc268 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":201:28)
#loc269 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":201:38)
#loc270 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":201:9)
#loc271 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":202:37)
#loc272 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":181:13)
#loc273 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":202:28)
#loc274 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":202:46)
#loc275 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":202:9)
#loc276 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":203:9)
#loc277 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":206:9)
#loc278 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":203:18)
#loc279 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":203:14)
#loc280 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":203:21)
#loc281 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":203:33)
#loc282 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":204:9)
#loc283 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":205:29)
#loc284 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":205:13)
#loc285 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":205:24)
#loc286 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":205:25)
#loc287 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":203:40)
#loc288 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":203:39)
#loc289 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":207:22)
#loc290 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":207:33)
#loc291 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":207:34)
#loc292 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":207:9)
#loc293 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":208:19)
#loc294 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":212:1)
#loc295 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":216:1)
#loc296 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":214:5)
#loc297 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_15.cpp":215:5)
#loc298 = loc(fused[#loc1, #loc2])
#loc299 = loc(fused[#loc3, #loc4])
#loc300 = loc(fused[#loc5, #loc6])
#loc301 = loc(fused[#loc7, #loc8])
#loc302 = loc(fused[#loc9, #loc10])
#loc303 = loc(fused[#loc11, #loc12])
#loc304 = loc(fused[#loc13, #loc14])
#loc305 = loc(fused[#loc15, #loc16])
#loc306 = loc(fused[#loc17, #loc18])
#loc307 = loc(fused[#loc20, #loc21])
#loc308 = loc(fused[#loc22, #loc23])
#loc309 = loc(fused[#loc24, #loc25])
#loc310 = loc(fused[#loc26, #loc27])
#loc311 = loc(fused[#loc30, #loc28])
#loc312 = loc(fused[#loc31, #loc32])
#loc313 = loc(fused[#loc35, #loc36])
#loc314 = loc(fused[#loc37, #loc38])
#loc315 = loc(fused[#loc39, #loc40])
#loc316 = loc(fused[#loc41, #loc42])
#loc317 = loc(fused[#loc43, #loc44])
#loc318 = loc(fused[#loc45, #loc46])
#loc319 = loc(fused[#loc47, #loc48])
#loc320 = loc(fused[#loc49, #loc50])
#loc321 = loc(fused[#loc55, #loc56])
#loc322 = loc(fused[#loc57, #loc58])
#loc323 = loc(fused[#loc59, #loc60])
#loc324 = loc(fused[#loc61, #loc58])
#loc325 = loc(fused[#loc63, #loc64])
#loc326 = loc(fused[#loc66, #loc67])
#loc327 = loc(fused[#loc68, #loc69])
#loc328 = loc(fused[#loc72, #loc70])
#loc329 = loc(fused[#loc76, #loc73])
#loc330 = loc(fused[#loc80, #loc81])
#loc331 = loc(fused[#loc82, #loc83])
#loc332 = loc(fused[#loc85, #loc86])
#loc333 = loc(fused[#loc87, #loc88])
#loc334 = loc(fused[#loc89, #loc90])
#loc335 = loc(fused[#loc91, #loc83])
#loc336 = loc(fused[#loc93, #loc94])
#loc337 = loc(fused[#loc97, #loc98])
#loc338 = loc(fused[#loc99, #loc94])
#loc339 = loc(fused[#loc105, #loc106])
#loc340 = loc(fused[#loc107, #loc108])
#loc341 = loc(fused[#loc109, #loc110])
#loc342 = loc(fused[#loc111, #loc108])
#loc343 = loc(fused[#loc115, #loc116])
#loc344 = loc(fused[#loc119, #loc120])
#loc345 = loc(fused[#loc121, #loc122])
#loc346 = loc(fused[#loc123, #loc124])
#loc347 = loc(fused[#loc126, #loc127])
#loc348 = loc(fused[#loc128, #loc122])
#loc349 = loc(fused[#loc132, #loc130])
#loc350 = loc(fused[#loc135, #loc136])
#loc351 = loc(fused[#loc138, #loc139])
#loc352 = loc(fused[#loc140, #loc141])
#loc353 = loc(fused[#loc142, #loc139])
#loc354 = loc(fused[#loc145, #loc146])
#loc355 = loc(fused[#loc147, #loc148])
#loc356 = loc(fused[#loc149, #loc146])
#loc357 = loc(fused[#loc156, #loc157])
#loc358 = loc(fused[#loc158, #loc159])
#loc359 = loc(fused[#loc158, #loc160])
#loc360 = loc(fused[#loc161, #loc162])
#loc361 = loc(fused[#loc164, #loc165])
#loc362 = loc(fused[#loc163, #loc165])
#loc363 = loc(fused[#loc166, #loc165])
#loc364 = loc(fused[#loc169, #loc170])
#loc365 = loc(fused[#loc171, #loc170])
#loc366 = loc(fused[#loc172, #loc173])
#loc367 = loc(fused[#loc175, #loc174])
#loc368 = loc(fused[#loc176, #loc177])
#loc369 = loc(fused[#loc178, #loc173])
#loc370 = loc(fused[#loc180, #loc179])
#loc371 = loc(fused[#loc184, #loc183])
#loc372 = loc(fused[#loc190, #loc191])
#loc373 = loc(fused[#loc192, #loc193])
#loc374 = loc(fused[#loc196, #loc194])
#loc375 = loc(fused[#loc197, #loc198])
#loc376 = loc(fused[#loc206, #loc205])
#loc377 = loc(fused[#loc208, #loc209])
#loc378 = loc(fused[#loc210, #loc211])
#loc379 = loc(fused[#loc210, #loc212])
#loc380 = loc(fused[#loc213, #loc214])
#loc381 = loc(fused[#loc216, #loc217])
#loc382 = loc(fused[#loc215, #loc217])
#loc383 = loc(fused[#loc218, #loc217])
#loc384 = loc(fused[#loc221, #loc222])
#loc385 = loc(fused[#loc223, #loc222])
#loc386 = loc(fused[#loc224, #loc225])
#loc387 = loc(fused[#loc227, #loc226])
#loc388 = loc(fused[#loc228, #loc229])
#loc389 = loc(fused[#loc230, #loc225])
#loc390 = loc(fused[#loc232, #loc231])
#loc391 = loc(fused[#loc236, #loc235])
#loc392 = loc(fused[#loc242, #loc243])
#loc393 = loc(fused[#loc244, #loc245])
#loc394 = loc(fused[#loc248, #loc246])
#loc395 = loc(fused[#loc249, #loc250])
#loc396 = loc(fused[#loc254, #loc253])
#loc397 = loc(fused[#loc260, #loc261])
#loc398 = loc(fused[#loc262, #loc263])
#loc399 = loc(fused[#loc262, #loc264])
#loc400 = loc(fused[#loc265, #loc266])
#loc401 = loc(fused[#loc268, #loc269])
#loc402 = loc(fused[#loc267, #loc269])
#loc403 = loc(fused[#loc270, #loc269])
#loc404 = loc(fused[#loc273, #loc274])
#loc405 = loc(fused[#loc275, #loc274])
#loc406 = loc(fused[#loc276, #loc277])
#loc407 = loc(fused[#loc279, #loc278])
#loc408 = loc(fused[#loc280, #loc281])
#loc409 = loc(fused[#loc282, #loc277])
#loc410 = loc(fused[#loc284, #loc283])
#loc411 = loc(fused[#loc288, #loc287])
#loc412 = loc(fused[#loc294, #loc295])
