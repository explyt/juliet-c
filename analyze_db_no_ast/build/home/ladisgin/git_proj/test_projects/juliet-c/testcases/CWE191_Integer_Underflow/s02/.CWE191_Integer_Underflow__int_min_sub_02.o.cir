!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_sub_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc156)
  cir.func no_proto  @CWE191_Integer_Underflow__int_min_sub_02_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc11)
      cir.if %3 {
        %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc13)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc13)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc13)
        %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc13)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc162)
      } loc(#loc161)
    } loc(#loc160)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc166)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc23)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc166)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc24)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc25)
        } loc(#loc165)
      } loc(#loc164)
    } loc(#loc163)
    cir.return loc(#loc4)
  } loc(#loc157)
  cir.func no_proto  @CWE191_Integer_Underflow__int_min_sub_02_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc168)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc170)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc171)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc27)
  } loc(#loc167)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc172)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc38)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc39)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc174)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc44)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc48)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc48)
      cir.if %3 {
        %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc50)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc50)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc50)
        %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc50)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
      } loc(#loc177)
    } loc(#loc176)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc54)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc54)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc38)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc38)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc58)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc62)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc62)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc62)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc62)
          %9 = cir.cmp(gt, %4, %8) : !s32i, !s32i loc(#loc182)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc63)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc184)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc68)
            %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc69)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc184)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc70)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc71)
          } else {
            %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc39)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc39)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc72)
          } loc(#loc183)
        } loc(#loc181)
      } loc(#loc180)
    } loc(#loc179)
    cir.return loc(#loc41)
  } loc(#loc173)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc186)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc77)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc81)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc81)
      cir.if %3 {
        %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc83)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc83)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc83)
        %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc83)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
      } loc(#loc189)
    } loc(#loc188)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc87)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc87)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc92)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc92)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc92)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc92)
          %9 = cir.cmp(gt, %4, %8) : !s32i, !s32i loc(#loc194)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc93)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc196)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc98)
            %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc99)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc196)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc100)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc101)
          } else {
            %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc102)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc102)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc103)
          } loc(#loc195)
        } loc(#loc193)
      } loc(#loc192)
    } loc(#loc191)
    cir.return loc(#loc74)
  } loc(#loc185)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc198)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc108)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc112)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc112)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc116)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc116)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc117)
      } else {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc118)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc119)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
      } loc(#loc201)
    } loc(#loc200)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc123)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc123)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc206)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc128)
          %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc129)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc206)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc130)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc131)
        } loc(#loc205)
      } loc(#loc204)
    } loc(#loc203)
    cir.return loc(#loc105)
  } loc(#loc197)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc136)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc140)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc140)
      cir.if %3 {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc142)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc143)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
      } loc(#loc211)
    } loc(#loc210)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc147)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc147)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc216)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc153)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc152)
          %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc153)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc216)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc154)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc155)
        } loc(#loc215)
      } loc(#loc214)
    } loc(#loc213)
    cir.return loc(#loc133)
  } loc(#loc207)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_sub_02.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":40:1)
#loc5 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":24:5)
#loc6 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":24:9)
#loc7 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":26:12)
#loc8 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":26:5)
#loc9 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":27:5)
#loc10 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":31:5)
#loc11 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":27:8)
#loc12 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":28:5)
#loc13 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":30:16)
#loc14 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":30:9)
#loc15 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":32:5)
#loc16 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":39:5)
#loc17 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":32:8)
#loc18 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":33:5)
#loc19 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":34:9)
#loc20 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":38:9)
#loc21 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":36:13)
#loc22 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":36:33)
#loc23 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":36:26)
#loc24 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":37:26)
#loc25 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":37:13)
#loc26 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":150:1)
#loc27 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":156:1)
#loc28 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":152:5)
#loc29 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":152:14)
#loc30 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":153:5)
#loc31 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":153:14)
#loc32 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":154:5)
#loc33 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":154:14)
#loc34 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":155:5)
#loc35 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":155:14)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":60:19)
#loc39 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":72:23)
#loc40 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":47:1)
#loc41 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":75:1)
#loc42 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":49:5)
#loc43 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":49:9)
#loc44 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":51:12)
#loc45 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":51:5)
#loc46 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":52:5)
#loc47 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":56:5)
#loc48 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":52:8)
#loc49 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":53:5)
#loc50 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":55:16)
#loc51 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":55:9)
#loc52 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":57:5)
#loc53 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":74:5)
#loc54 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":57:8)
#loc55 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":58:5)
#loc56 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":61:5)
#loc57 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":63:5)
#loc58 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":60:9)
#loc59 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":65:9)
#loc60 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":73:9)
#loc61 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":65:13)
#loc62 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":65:20)
#loc63 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":65:18)
#loc64 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":66:9)
#loc65 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":69:9)
#loc66 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":71:9)
#loc67 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":67:13)
#loc68 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":67:33)
#loc69 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":67:26)
#loc70 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":68:26)
#loc71 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":68:13)
#loc72 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":72:13)
#loc73 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":78:1)
#loc74 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":101:1)
#loc75 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":80:5)
#loc76 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":80:9)
#loc77 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":82:12)
#loc78 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":82:5)
#loc79 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":83:5)
#loc80 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":87:5)
#loc81 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":83:8)
#loc82 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":84:5)
#loc83 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":86:16)
#loc84 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":86:9)
#loc85 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":88:5)
#loc86 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":100:5)
#loc87 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":88:8)
#loc88 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":89:5)
#loc89 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":91:9)
#loc90 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":99:9)
#loc91 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":91:13)
#loc92 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":91:20)
#loc93 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":91:18)
#loc94 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":92:9)
#loc95 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":95:9)
#loc96 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":97:9)
#loc97 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":93:13)
#loc98 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":93:33)
#loc99 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":93:26)
#loc100 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":94:26)
#loc101 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":94:13)
#loc102 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":98:23)
#loc103 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":98:13)
#loc104 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":104:1)
#loc105 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":127:1)
#loc106 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":106:5)
#loc107 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":106:9)
#loc108 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":108:12)
#loc109 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":108:5)
#loc110 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":109:5)
#loc111 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":118:5)
#loc112 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":109:8)
#loc113 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":110:5)
#loc114 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":113:5)
#loc115 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":115:5)
#loc116 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":112:19)
#loc117 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":112:9)
#loc118 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":117:17)
#loc119 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":117:16)
#loc120 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":117:9)
#loc121 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":119:5)
#loc122 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":126:5)
#loc123 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":119:8)
#loc124 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":120:5)
#loc125 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":121:9)
#loc126 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":125:9)
#loc127 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":123:13)
#loc128 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":123:33)
#loc129 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":123:26)
#loc130 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":124:26)
#loc131 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":124:13)
#loc132 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":130:1)
#loc133 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":148:1)
#loc134 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":132:5)
#loc135 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":132:9)
#loc136 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":134:12)
#loc137 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":134:5)
#loc138 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":135:5)
#loc139 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":139:5)
#loc140 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":135:8)
#loc141 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":136:5)
#loc142 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":138:17)
#loc143 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":138:16)
#loc144 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":138:9)
#loc145 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":140:5)
#loc146 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":147:5)
#loc147 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":140:8)
#loc148 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":141:5)
#loc149 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":142:9)
#loc150 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":146:9)
#loc151 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":144:13)
#loc152 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":144:33)
#loc153 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":144:26)
#loc154 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":145:26)
#loc155 = loc("CWE191_Integer_Underflow__int_min_sub_02.c":145:13)
#loc156 = loc(fused[#loc1, #loc2])
#loc157 = loc(fused[#loc3, #loc4])
#loc158 = loc(fused[#loc5, #loc6])
#loc159 = loc(fused[#loc8, #loc7])
#loc160 = loc(fused[#loc9, #loc10])
#loc161 = loc(fused[#loc12, #loc10])
#loc162 = loc(fused[#loc14, #loc13])
#loc163 = loc(fused[#loc15, #loc16])
#loc164 = loc(fused[#loc18, #loc16])
#loc165 = loc(fused[#loc19, #loc20])
#loc166 = loc(fused[#loc21, #loc22])
#loc167 = loc(fused[#loc26, #loc27])
#loc168 = loc(fused[#loc28, #loc29])
#loc169 = loc(fused[#loc30, #loc31])
#loc170 = loc(fused[#loc32, #loc33])
#loc171 = loc(fused[#loc34, #loc35])
#loc172 = loc(fused[#loc36, #loc37])
#loc173 = loc(fused[#loc40, #loc41])
#loc174 = loc(fused[#loc42, #loc43])
#loc175 = loc(fused[#loc45, #loc44])
#loc176 = loc(fused[#loc46, #loc47])
#loc177 = loc(fused[#loc49, #loc47])
#loc178 = loc(fused[#loc51, #loc50])
#loc179 = loc(fused[#loc52, #loc53])
#loc180 = loc(fused[#loc55, #loc56, #loc57, #loc53])
#loc181 = loc(fused[#loc59, #loc60])
#loc182 = loc(fused[#loc61, #loc62])
#loc183 = loc(fused[#loc64, #loc65, #loc66, #loc60])
#loc184 = loc(fused[#loc67, #loc68])
#loc185 = loc(fused[#loc73, #loc74])
#loc186 = loc(fused[#loc75, #loc76])
#loc187 = loc(fused[#loc78, #loc77])
#loc188 = loc(fused[#loc79, #loc80])
#loc189 = loc(fused[#loc82, #loc80])
#loc190 = loc(fused[#loc84, #loc83])
#loc191 = loc(fused[#loc85, #loc86])
#loc192 = loc(fused[#loc88, #loc86])
#loc193 = loc(fused[#loc89, #loc90])
#loc194 = loc(fused[#loc91, #loc92])
#loc195 = loc(fused[#loc94, #loc95, #loc96, #loc90])
#loc196 = loc(fused[#loc97, #loc98])
#loc197 = loc(fused[#loc104, #loc105])
#loc198 = loc(fused[#loc106, #loc107])
#loc199 = loc(fused[#loc109, #loc108])
#loc200 = loc(fused[#loc110, #loc111])
#loc201 = loc(fused[#loc113, #loc114, #loc115, #loc111])
#loc202 = loc(fused[#loc120, #loc118])
#loc203 = loc(fused[#loc121, #loc122])
#loc204 = loc(fused[#loc124, #loc122])
#loc205 = loc(fused[#loc125, #loc126])
#loc206 = loc(fused[#loc127, #loc128])
#loc207 = loc(fused[#loc132, #loc133])
#loc208 = loc(fused[#loc134, #loc135])
#loc209 = loc(fused[#loc137, #loc136])
#loc210 = loc(fused[#loc138, #loc139])
#loc211 = loc(fused[#loc141, #loc139])
#loc212 = loc(fused[#loc144, #loc142])
#loc213 = loc(fused[#loc145, #loc146])
#loc214 = loc(fused[#loc148, #loc146])
#loc215 = loc(fused[#loc149, #loc150])
#loc216 = loc(fused[#loc151, #loc152])
