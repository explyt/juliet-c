!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":92:10)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":92:14)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":92:20)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":92:32)
#loc166 = loc(fused[#loc71, #loc72])
#loc167 = loc(fused[#loc73, #loc74])
!ty__charVoid = !cir.struct<struct "_charVoid" {!cir.array<!s8i x 16>, !cir.ptr<!void>, !cir.ptr<!void>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc137)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc138)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"0123456789abcdef0123456789abcde\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc139)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16_bad() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc12)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc12)
        cir.condition(%1) loc(#loc12)
      } do {
        cir.scope {
          %0 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc143)
          %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc17)
          %2 = cir.const #cir.int<32> : !u64i loc(#loc144)
          %3 = cir.call @malloc(%2) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc17)
          %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc145)
          cir.store %4, %0 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc143)
          cir.scope {
            %41 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc22)
            %42 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc23)
            %43 = cir.cast(bitcast, %42 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc23)
            %44 = cir.cmp(eq, %41, %43) : !cir.ptr<!ty__charVoid>, !cir.bool loc(#loc147)
            cir.if %44 {
              %45 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc25)
              %46 = cir.const #cir.int<1> : !s32i loc(#loc26)
              %47 = cir.unary(minus, %46) : !s32i, !s32i loc(#loc27)
              cir.call @exit(%47) : (!s32i) -> () extra(#fn_attr) loc(#loc25)
            } loc(#loc148)
          } loc(#loc146)
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc5)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc28)
          %9 = cir.get_member %8[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc29)
          cir.store %7, %9 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc149)
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc30)
          %11 = cir.get_member %10[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc29)
          %12 = cir.load %11 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc31)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc150)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc32)
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc33)
          %15 = cir.get_member %14[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc34)
          %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc151)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc151)
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc36)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc36)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc36)
          %21 = cir.const #cir.int<32> : !u64i loc(#loc152)
          cir.libc.memmove %21 bytes from %20 to %17 : !cir.ptr<!void>, !u64i loc(#loc153)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc41)
          %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc41)
          %24 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc42)
          %25 = cir.get_member %24[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc34)
          %26 = cir.const #cir.int<16> : !u64i loc(#loc154)
          %27 = cir.const #cir.int<1> : !u64i loc(#loc155)
          %28 = cir.binop(div, %26, %27) : !u64i loc(#loc156)
          %29 = cir.const #cir.int<1> : !s32i loc(#loc47)
          %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc47)
          %31 = cir.binop(sub, %28, %30) : !u64i loc(#loc157)
          %32 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc42)
          %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc49)
          cir.store %23, %33 : !s8i, !cir.ptr<!s8i> loc(#loc158)
          %34 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc50)
          %35 = cir.get_member %34[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc34)
          %36 = cir.cast(array_to_ptrdecay, %35 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc159)
          cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc52)
          %37 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc53)
          %38 = cir.get_member %37[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc29)
          %39 = cir.load %38 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc54)
          %40 = cir.cast(bitcast, %39 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc160)
          cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc55)
        } loc(#loc142)
        cir.break loc(#loc56)
      } loc(#loc141)
    } loc(#loc141)
    cir.return loc(#loc9)
  } loc(#loc140)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc162)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    cir.return loc(#loc58)
  } loc(#loc161)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc163)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc164)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc68)
  cir.func @main(%arg0: !s32i loc(fused[#loc71, #loc72]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc73, #loc74])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc166)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc167)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc70)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc75)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc75)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc76)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc77)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc77)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc78)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc65)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc168)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16_good() : () -> () loc(#loc80)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc66)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc67)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16_bad() : () -> () loc(#loc84)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc68)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc87)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc170)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc170)
    cir.return %17 : !s32i loc(#loc170)
  } loc(#loc165)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc93)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc93)
        cir.condition(%1) loc(#loc93)
      } do {
        cir.scope {
          %0 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc174)
          %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc98)
          %2 = cir.const #cir.int<32> : !u64i loc(#loc175)
          %3 = cir.call @malloc(%2) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc98)
          %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc176)
          cir.store %4, %0 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc174)
          cir.scope {
            %41 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc103)
            %42 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc104)
            %43 = cir.cast(bitcast, %42 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc104)
            %44 = cir.cmp(eq, %41, %43) : !cir.ptr<!ty__charVoid>, !cir.bool loc(#loc178)
            cir.if %44 {
              %45 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc106)
              %46 = cir.const #cir.int<1> : !s32i loc(#loc107)
              %47 = cir.unary(minus, %46) : !s32i, !s32i loc(#loc108)
              cir.call @exit(%47) : (!s32i) -> () extra(#fn_attr) loc(#loc106)
            } loc(#loc179)
          } loc(#loc177)
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc109)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc109)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc109)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc110)
          %9 = cir.get_member %8[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc29)
          cir.store %7, %9 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc180)
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc111)
          %11 = cir.get_member %10[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc29)
          %12 = cir.load %11 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc112)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc181)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc113)
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc114)
          %15 = cir.get_member %14[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc34)
          %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc182)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc182)
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc116)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc116)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc116)
          %21 = cir.const #cir.int<16> : !u64i loc(#loc183)
          cir.libc.memmove %21 bytes from %20 to %17 : !cir.ptr<!void>, !u64i loc(#loc184)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc121)
          %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc121)
          %24 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc122)
          %25 = cir.get_member %24[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc34)
          %26 = cir.const #cir.int<16> : !u64i loc(#loc185)
          %27 = cir.const #cir.int<1> : !u64i loc(#loc186)
          %28 = cir.binop(div, %26, %27) : !u64i loc(#loc187)
          %29 = cir.const #cir.int<1> : !s32i loc(#loc127)
          %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc127)
          %31 = cir.binop(sub, %28, %30) : !u64i loc(#loc188)
          %32 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc122)
          %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc129)
          cir.store %23, %33 : !s8i, !cir.ptr<!s8i> loc(#loc189)
          %34 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc130)
          %35 = cir.get_member %34[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc34)
          %36 = cir.cast(array_to_ptrdecay, %35 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc190)
          cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc132)
          %37 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc133)
          %38 = cir.get_member %37[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc29)
          %39 = cir.load %38 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc134)
          %40 = cir.cast(bitcast, %39 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc191)
          cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc135)
        } loc(#loc173)
        cir.break loc(#loc136)
      } loc(#loc172)
    } loc(#loc172)
    cir.return loc(#loc90)
  } loc(#loc171)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":40:50)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":33:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":51:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":35:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":50:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":35:11)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":37:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":48:9)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":38:13)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":38:76)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":38:53)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":38:60)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":38:75)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":39:13)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":39:51)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":39:17)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":39:35)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":39:41)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":39:42)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":39:48)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":39:47)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":40:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":27:12)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":42:31)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":42:47)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":42:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":44:21)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":26:10)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":44:37)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":44:48)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":44:57)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":44:79)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":44:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":44:80)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":45:93)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":45:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":45:40)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":45:72)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":45:74)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":45:85)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":45:88)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":45:39)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":45:29)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":46:31)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":46:47)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":46:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":47:31)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":47:47)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":47:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":49:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":78:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":81:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":80:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":80:11)
#loc61 = loc("/usr/include/stdlib.h":575:1)
#loc62 = loc("/usr/include/stdlib.h":575:41)
#loc63 = loc("/usr/include/time.h":76:1)
#loc64 = loc("/usr/include/time.h":76:38)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":97:15)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":99:15)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":102:15)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":104:15)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":92:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":107:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":93:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":95:27)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":95:22)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":95:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":97:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":98:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":98:74)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":99:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":102:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":103:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":103:73)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":104:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":106:12)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":106:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":58:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":76:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":60:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":75:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":60:11)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":62:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":73:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":63:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":63:76)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":63:53)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":63:60)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":63:75)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":64:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":64:51)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":64:17)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":64:35)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":64:41)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":64:42)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":64:48)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":64:47)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":65:50)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":65:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":67:31)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":67:47)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":67:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":69:21)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":69:37)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":69:48)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":69:57)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":69:89)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":69:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":69:90)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":70:93)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":70:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":70:40)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":70:72)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":70:74)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":70:85)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":70:88)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":70:39)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":70:29)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":71:31)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":71:47)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":71:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":72:31)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":72:47)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":72:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c":74:9)
#loc137 = loc(fused[#loc1, #loc2])
#loc138 = loc(fused[#loc3, #loc4])
#loc139 = loc(fused[#loc6, #loc7])
#loc140 = loc(fused[#loc8, #loc9])
#loc141 = loc(fused[#loc10, #loc11])
#loc142 = loc(fused[#loc13, #loc14])
#loc143 = loc(fused[#loc15, #loc16])
#loc144 = loc(fused[#loc18, #loc19])
#loc145 = loc(fused[#loc17, #loc16])
#loc146 = loc(fused[#loc20, #loc21])
#loc147 = loc(fused[#loc22, #loc23])
#loc148 = loc(fused[#loc24, #loc21])
#loc149 = loc(fused[#loc28, #loc5])
#loc150 = loc(fused[#loc30, #loc31])
#loc151 = loc(fused[#loc33, #loc35])
#loc152 = loc(fused[#loc37, #loc38])
#loc153 = loc(fused[#loc39, #loc40])
#loc154 = loc(fused[#loc43, #loc44])
#loc155 = loc(fused[#loc45, #loc46])
#loc156 = loc(fused[#loc43, #loc46])
#loc157 = loc(fused[#loc48, #loc47])
#loc158 = loc(fused[#loc42, #loc41])
#loc159 = loc(fused[#loc50, #loc51])
#loc160 = loc(fused[#loc53, #loc54])
#loc161 = loc(fused[#loc57, #loc58])
#loc162 = loc(fused[#loc59, #loc60])
#loc163 = loc(fused[#loc61, #loc62])
#loc164 = loc(fused[#loc63, #loc64])
#loc165 = loc(fused[#loc69, #loc70])
#loc168 = loc(fused[#loc80, #loc81])
#loc169 = loc(fused[#loc84, #loc85])
#loc170 = loc(fused[#loc88, #loc87])
#loc171 = loc(fused[#loc89, #loc90])
#loc172 = loc(fused[#loc91, #loc92])
#loc173 = loc(fused[#loc94, #loc95])
#loc174 = loc(fused[#loc96, #loc97])
#loc175 = loc(fused[#loc99, #loc100])
#loc176 = loc(fused[#loc98, #loc97])
#loc177 = loc(fused[#loc101, #loc102])
#loc178 = loc(fused[#loc103, #loc104])
#loc179 = loc(fused[#loc105, #loc102])
#loc180 = loc(fused[#loc110, #loc109])
#loc181 = loc(fused[#loc111, #loc112])
#loc182 = loc(fused[#loc114, #loc115])
#loc183 = loc(fused[#loc117, #loc118])
#loc184 = loc(fused[#loc119, #loc120])
#loc185 = loc(fused[#loc123, #loc124])
#loc186 = loc(fused[#loc125, #loc126])
#loc187 = loc(fused[#loc123, #loc126])
#loc188 = loc(fused[#loc128, #loc127])
#loc189 = loc(fused[#loc122, #loc121])
#loc190 = loc(fused[#loc130, #loc131])
#loc191 = loc(fused[#loc133, #loc134])
