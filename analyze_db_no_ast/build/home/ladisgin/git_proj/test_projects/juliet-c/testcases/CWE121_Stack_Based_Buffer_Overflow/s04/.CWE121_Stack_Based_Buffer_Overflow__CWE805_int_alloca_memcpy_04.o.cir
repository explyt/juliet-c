!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc102)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc104)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc105)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc8)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc8)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc8)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc8)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc8)
    %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc106)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc8)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc8)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc105)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc10)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc10)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc10)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc10)
    cir.store %16, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc106)
    cir.scope {
      %17 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc13)
      cir.if %18 {
        %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc15)
        cir.store %19, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc109)
      } loc(#loc108)
    } loc(#loc107)
    cir.scope {
      %17 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc111)
      %18 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc111)
      cir.store %18, %17 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc111)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc21)
      %21 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc22)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc22)
      %23 = cir.const #cir.int<100> : !s32i loc(#loc23)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc23)
      %25 = cir.const #cir.int<4> : !u64i loc(#loc112)
      %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc113)
      cir.libc.memcpy %26 bytes from %22 to %20 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc114)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
      %28 = cir.const #cir.int<0> : !s32i loc(#loc29)
      %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc30)
      %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc28)
      cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc31)
    } loc(#loc110)
    cir.return loc(#loc4)
  } loc(#loc103)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc116)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc117)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc115)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc118)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc40)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc120)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc121)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc46)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc46)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc46)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc46)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc46)
    %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc122)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc46)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc46)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc121)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc48)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc48)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc48)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc48)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc48)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc48)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc48)
    cir.store %16, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc122)
    cir.scope {
      %17 = cir.const #cir.int<0> : !s32i loc(#loc51)
      %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc51)
      cir.if %18 {
        %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc40)
        %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc40)
        cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc55)
      } else {
        %19 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc56)
        cir.store %19, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc125)
      } loc(#loc124)
    } loc(#loc123)
    cir.scope {
      %17 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc127)
      %18 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc127)
      cir.store %18, %17 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc127)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc62)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc62)
      %21 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc63)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc63)
      %23 = cir.const #cir.int<100> : !s32i loc(#loc64)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc64)
      %25 = cir.const #cir.int<4> : !u64i loc(#loc128)
      %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc129)
      cir.libc.memcpy %26 bytes from %22 to %20 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc130)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc69)
      %28 = cir.const #cir.int<0> : !s32i loc(#loc70)
      %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc71)
      %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc69)
      cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc72)
    } loc(#loc126)
    cir.return loc(#loc42)
  } loc(#loc119)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc132)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc133)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc78)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc78)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc78)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc78)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc78)
    %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc134)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc78)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc78)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc133)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc80)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc80)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc80)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc80)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc80)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc80)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc80)
    cir.store %16, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc134)
    cir.scope {
      %17 = cir.const #cir.int<1> : !s32i loc(#loc83)
      %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc83)
      cir.if %18 {
        %19 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc85)
        cir.store %19, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc137)
      } loc(#loc136)
    } loc(#loc135)
    cir.scope {
      %17 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc139)
      %18 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc139)
      cir.store %18, %17 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc139)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc91)
      %21 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc92)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc92)
      %23 = cir.const #cir.int<100> : !s32i loc(#loc93)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc93)
      %25 = cir.const #cir.int<4> : !u64i loc(#loc140)
      %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc141)
      cir.libc.memcpy %26 bytes from %22 to %20 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc142)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc98)
      %28 = cir.const #cir.int<0> : !s32i loc(#loc99)
      %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc100)
      %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc98)
      cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc101)
    } loc(#loc138)
    cir.return loc(#loc74)
  } loc(#loc131)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":28:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":45:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":30:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":30:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":31:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":31:34)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":32:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":32:35)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":33:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":38:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":33:8)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":34:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":37:16)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":37:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":39:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":44:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":40:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":40:29)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":42:16)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":42:22)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":42:30)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":42:34)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":42:44)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":42:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":42:45)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":43:22)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":43:27)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":43:28)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":43:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":94:1)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":98:1)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":96:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":96:14)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":97:5)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":97:14)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":60:19)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":52:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":73:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":54:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":54:11)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":55:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":55:34)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":56:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":56:35)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":57:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":66:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":57:8)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":58:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":61:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":63:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":60:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":65:16)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":65:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":67:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":72:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":68:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":68:29)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":70:16)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":70:22)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":70:30)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":70:34)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":70:44)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":70:9)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":70:45)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":71:22)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":71:27)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":71:28)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":71:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":76:1)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":92:1)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":78:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":78:11)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":79:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":79:34)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":80:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":80:35)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":81:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":85:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":81:8)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":82:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":84:16)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":84:9)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":86:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":91:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":87:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":87:29)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":89:16)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":89:22)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":89:30)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":89:34)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":89:44)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":89:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":89:45)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":90:22)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":90:27)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":90:28)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c":90:9)
#loc102 = loc(fused[#loc1, #loc2])
#loc103 = loc(fused[#loc3, #loc4])
#loc104 = loc(fused[#loc5, #loc6])
#loc105 = loc(fused[#loc7, #loc8])
#loc106 = loc(fused[#loc9, #loc10])
#loc107 = loc(fused[#loc11, #loc12])
#loc108 = loc(fused[#loc14, #loc12])
#loc109 = loc(fused[#loc16, #loc15])
#loc110 = loc(fused[#loc17, #loc18])
#loc111 = loc(fused[#loc19, #loc20])
#loc112 = loc(fused[#loc24, #loc25])
#loc113 = loc(fused[#loc23, #loc25])
#loc114 = loc(fused[#loc26, #loc27])
#loc115 = loc(fused[#loc32, #loc33])
#loc116 = loc(fused[#loc34, #loc35])
#loc117 = loc(fused[#loc36, #loc37])
#loc118 = loc(fused[#loc38, #loc39])
#loc119 = loc(fused[#loc41, #loc42])
#loc120 = loc(fused[#loc43, #loc44])
#loc121 = loc(fused[#loc45, #loc46])
#loc122 = loc(fused[#loc47, #loc48])
#loc123 = loc(fused[#loc49, #loc50])
#loc124 = loc(fused[#loc52, #loc53, #loc54, #loc50])
#loc125 = loc(fused[#loc57, #loc56])
#loc126 = loc(fused[#loc58, #loc59])
#loc127 = loc(fused[#loc60, #loc61])
#loc128 = loc(fused[#loc65, #loc66])
#loc129 = loc(fused[#loc64, #loc66])
#loc130 = loc(fused[#loc67, #loc68])
#loc131 = loc(fused[#loc73, #loc74])
#loc132 = loc(fused[#loc75, #loc76])
#loc133 = loc(fused[#loc77, #loc78])
#loc134 = loc(fused[#loc79, #loc80])
#loc135 = loc(fused[#loc81, #loc82])
#loc136 = loc(fused[#loc84, #loc82])
#loc137 = loc(fused[#loc86, #loc85])
#loc138 = loc(fused[#loc87, #loc88])
#loc139 = loc(fused[#loc89, #loc90])
#loc140 = loc(fused[#loc94, #loc95])
#loc141 = loc(fused[#loc93, #loc95])
#loc142 = loc(fused[#loc96, #loc97])
