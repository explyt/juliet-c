!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc125)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc126)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc127)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE135_63b_badSink(!cir.ptr<!cir.ptr<!void>>) loc(#loc128)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_63_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc130)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc131)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc15)
    cir.store %2, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc132)
    cir.br ^bb1 loc(#loc133)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc19)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc20)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc20)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc134)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc135)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc19)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc136)
    cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc130)
    cir.br ^bb2 loc(#loc137)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc26)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc26)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc138)
    cir.brcond %13 ^bb3, ^bb4 loc(#loc139)
  ^bb3:  // pred: ^bb2
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc28)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc30)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
    cir.br ^bb4 loc(#loc24)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc24)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
    %18 = cir.const #cir.int<65> : !s32i loc(#loc32)
    %19 = cir.const #cir.int<50> : !s32i loc(#loc33)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc33)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc33)
    %23 = cir.call @wmemset(%17, %18, %22) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc35)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc36)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
    %26 = cir.const #cir.int<50> : !s32i loc(#loc38)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc38)
    %29 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc40)
    cir.store %24, %29 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc41)
    cir.store %31, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc141)
    cir.br ^bb6 loc(#loc18)
  ^bb6:  // pred: ^bb5
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_63b_badSink(%1) : (!cir.ptr<!cir.ptr<!void>>) -> () loc(#loc43)
    cir.return loc(#loc10)
  } loc(#loc129)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_63_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc143)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc144)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    cir.return loc(#loc45)
  } loc(#loc142)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE135_63b_goodG2BSink(!cir.ptr<!cir.ptr<!void>>) loc(#loc145)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc147)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc148)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc58)
    cir.store %2, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc149)
    cir.br ^bb1 loc(#loc150)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc62)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc63)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc63)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc151)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc152)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc62)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc153)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc147)
    cir.br ^bb2 loc(#loc154)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc69)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc69)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc155)
    cir.brcond %13 ^bb3, ^bb4 loc(#loc156)
  ^bb3:  // pred: ^bb2
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc71)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc73)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc71)
    cir.br ^bb4 loc(#loc67)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc67)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc74)
    %19 = cir.const #cir.int<65> : !s32i loc(#loc75)
    %20 = cir.const #cir.int<50> : !s32i loc(#loc76)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc76)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc76)
    cir.libc.memset %23 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc157)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc80)
    %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc80)
    %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc81)
    %27 = cir.const #cir.int<50> : !s32i loc(#loc82)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc82)
    %30 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc84)
    cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc158)
    %31 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc85)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc85)
    cir.store %32, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc159)
    cir.br ^bb6 loc(#loc61)
  ^bb6:  // pred: ^bb5
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_63b_goodG2BSink(%1) : (!cir.ptr<!cir.ptr<!void>>) -> () loc(#loc87)
    cir.return loc(#loc53)
  } loc(#loc146)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE135_63b_goodB2GSink(!cir.ptr<!cir.ptr<!void>>) loc(#loc160)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc162)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc163)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc96)
    cir.store %2, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc164)
    cir.br ^bb1 loc(#loc165)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc100)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc101)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc101)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc166)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc167)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc100)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc168)
    cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc162)
    cir.br ^bb2 loc(#loc169)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc106)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc107)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc107)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc170)
    cir.brcond %13 ^bb3, ^bb4 loc(#loc171)
  ^bb3:  // pred: ^bb2
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc109)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc110)
    %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc111)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc109)
    cir.br ^bb4 loc(#loc105)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc105)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc112)
    %18 = cir.const #cir.int<65> : !s32i loc(#loc113)
    %19 = cir.const #cir.int<50> : !s32i loc(#loc114)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc114)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc114)
    %23 = cir.call @wmemset(%17, %18, %22) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc116)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc117)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc118)
    %26 = cir.const #cir.int<50> : !s32i loc(#loc119)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc120)
    %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc119)
    %29 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc121)
    cir.store %24, %29 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc122)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc122)
    cir.store %31, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc173)
    cir.br ^bb6 loc(#loc99)
  ^bb6:  // pred: ^bb5
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_63b_goodB2GSink(%1) : (!cir.ptr<!cir.ptr<!void>>) -> () loc(#loc124)
    cir.return loc(#loc91)
  } loc(#loc161)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":25:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":25:76)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":27:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":40:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":32:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":32:71)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":29:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":29:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":30:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":30:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":31:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":38:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":32:46)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":32:53)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":32:56)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":32:70)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":33:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":33:46)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":33:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":33:30)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":33:36)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":33:37)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":33:43)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":33:42)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":34:17)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":34:32)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":34:38)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":34:41)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":34:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":35:31)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":35:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":35:23)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":35:26)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":35:27)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":37:24)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":37:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":39:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":82:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":86:1)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":84:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":84:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":85:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":85:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":47:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":47:77)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":49:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":62:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":54:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":54:63)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":51:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":51:12)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":52:12)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":52:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":53:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":60:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":54:41)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":54:48)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":54:51)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":54:62)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":55:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":55:47)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":55:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":55:31)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":55:37)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":55:38)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":55:44)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":55:43)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":56:16)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":56:32)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":56:37)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":56:40)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":56:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":56:41)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":57:32)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":57:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":57:24)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":57:27)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":57:28)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":59:24)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":59:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":61:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":65:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":65:77)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":67:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":80:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":72:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":72:71)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":69:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":69:12)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":70:12)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":70:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":71:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":78:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":72:46)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":72:53)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":72:56)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":72:70)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":73:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":73:46)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":73:13)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":73:30)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":73:36)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":73:37)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":73:43)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":73:42)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":74:17)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":74:32)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":74:38)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":74:41)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":74:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":75:31)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":75:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":75:23)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":75:26)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":75:27)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":77:24)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":77:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c":79:5)
#loc125 = loc(fused[#loc1, #loc2])
#loc126 = loc(fused[#loc3, #loc4])
#loc127 = loc(fused[#loc5, #loc6])
#loc128 = loc(fused[#loc7, #loc8])
#loc129 = loc(fused[#loc9, #loc10])
#loc130 = loc(fused[#loc11, #loc12])
#loc131 = loc(fused[#loc13, #loc14])
#loc132 = loc(fused[#loc16, #loc15])
#loc133 = loc(fused[#loc17, #loc18])
#loc134 = loc(fused[#loc21, #loc22])
#loc135 = loc(fused[#loc20, #loc22])
#loc136 = loc(fused[#loc19, #loc12])
#loc137 = loc(fused[#loc23, #loc24])
#loc138 = loc(fused[#loc25, #loc26])
#loc139 = loc(fused[#loc27, #loc24])
#loc140 = loc(fused[#loc37, #loc36])
#loc141 = loc(fused[#loc42, #loc41])
#loc142 = loc(fused[#loc44, #loc45])
#loc143 = loc(fused[#loc46, #loc47])
#loc144 = loc(fused[#loc48, #loc49])
#loc145 = loc(fused[#loc50, #loc51])
#loc146 = loc(fused[#loc52, #loc53])
#loc147 = loc(fused[#loc54, #loc55])
#loc148 = loc(fused[#loc56, #loc57])
#loc149 = loc(fused[#loc59, #loc58])
#loc150 = loc(fused[#loc60, #loc61])
#loc151 = loc(fused[#loc64, #loc65])
#loc152 = loc(fused[#loc63, #loc65])
#loc153 = loc(fused[#loc62, #loc55])
#loc154 = loc(fused[#loc66, #loc67])
#loc155 = loc(fused[#loc68, #loc69])
#loc156 = loc(fused[#loc70, #loc67])
#loc157 = loc(fused[#loc78, #loc79])
#loc158 = loc(fused[#loc81, #loc80])
#loc159 = loc(fused[#loc86, #loc85])
#loc160 = loc(fused[#loc88, #loc89])
#loc161 = loc(fused[#loc90, #loc91])
#loc162 = loc(fused[#loc92, #loc93])
#loc163 = loc(fused[#loc94, #loc95])
#loc164 = loc(fused[#loc97, #loc96])
#loc165 = loc(fused[#loc98, #loc99])
#loc166 = loc(fused[#loc102, #loc103])
#loc167 = loc(fused[#loc101, #loc103])
#loc168 = loc(fused[#loc100, #loc93])
#loc169 = loc(fused[#loc104, #loc105])
#loc170 = loc(fused[#loc106, #loc107])
#loc171 = loc(fused[#loc108, #loc105])
#loc172 = loc(fused[#loc118, #loc117])
#loc173 = loc(fused[#loc123, #loc122])
