!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc17 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":29:18)
#loc69 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":69:18)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc87)
  cir.func private @printHexCharLine(!s8i) loc(#loc88)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_square_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["dataCopy", init] {alignment = 1 : i64} loc(#loc90)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc91)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc92)
    %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc93)
    %4 = cir.const #cir.int<32> : !s32i loc(#loc15)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc15)
    cir.store %5, %3 : !s8i, !cir.ptr<!s8i> loc(#loc94)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc17)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %9 ^bb1, ^bb2 loc(#loc17)
  ^bb1:  // pred: ^bb0
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc17)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc17)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc17)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc17)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc17)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc17)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc17)
    cir.br ^bb3(%21 : !u32i) loc(#loc17)
  ^bb2:  // pred: ^bb0
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc17)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc17)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc17)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc17)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc17)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc17)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc17)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc17)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc17)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc17)
    cir.br ^bb3(%37 : !u32i) loc(#loc17)
  ^bb3(%38: !u32i loc("CWE190_Integer_Overflow__char_rand_square_31.c":29:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc17)
    %40 = cir.cast(integral, %39 : !s32i), !s8i loc(#loc17)
    cir.store %40, %3 : !s8i, !cir.ptr<!s8i> loc(#loc95)
    cir.br ^bb5 loc(#loc96)
  ^bb5:  // pred: ^bb4
    %41 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc8)
    cir.store %41, %0 : !s8i, !cir.ptr<!s8i> loc(#loc90)
    %42 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc10)
    cir.store %42, %1 : !s8i, !cir.ptr<!s8i> loc(#loc91)
    cir.br ^bb6 loc(#loc97)
  ^bb6:  // pred: ^bb5
    %43 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc23)
    %44 = cir.cast(integral, %43 : !s8i), !s32i loc(#loc23)
    %45 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc12)
    %46 = cir.cast(integral, %45 : !s8i), !s32i loc(#loc12)
    %47 = cir.binop(mul, %44, %46) nsw : !s32i loc(#loc23)
    %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc23)
    cir.store %48, %2 : !s8i, !cir.ptr<!s8i> loc(#loc92)
    %49 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc24)
    cir.call @printHexCharLine(%49) : (!s8i) -> () loc(#loc25)
    cir.br ^bb7 loc(#loc22)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc6)
  } loc(#loc89)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_square_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc99)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc100)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc98)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["dataCopy", init] {alignment = 1 : i64} loc(#loc102)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc103)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc104)
    %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc105)
    %4 = cir.const #cir.int<32> : !s32i loc(#loc42)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc42)
    cir.store %5, %3 : !s8i, !cir.ptr<!s8i> loc(#loc106)
    %6 = cir.const #cir.int<2> : !s32i loc(#loc44)
    %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc44)
    cir.store %7, %3 : !s8i, !cir.ptr<!s8i> loc(#loc107)
    cir.br ^bb1 loc(#loc108)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc35)
    cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc102)
    %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc37)
    cir.store %9, %1 : !s8i, !cir.ptr<!s8i> loc(#loc103)
    cir.br ^bb2 loc(#loc109)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc50)
    %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc50)
    %12 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc39)
    %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc39)
    %14 = cir.binop(mul, %11, %13) nsw : !s32i loc(#loc50)
    %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc50)
    cir.store %15, %2 : !s8i, !cir.ptr<!s8i> loc(#loc104)
    %16 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc51)
    cir.call @printHexCharLine(%16) : (!s8i) -> () loc(#loc52)
    cir.br ^bb3 loc(#loc49)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc47)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc33)
  } loc(#loc101)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc53)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc56)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["dataCopy", init] {alignment = 1 : i64} loc(#loc112)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc113)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc114)
    %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc115)
    %4 = cir.const #cir.int<32> : !s32i loc(#loc67)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc67)
    cir.store %5, %3 : !s8i, !cir.ptr<!s8i> loc(#loc116)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc69)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc69)
    cir.brcond %9 ^bb1, ^bb2 loc(#loc69)
  ^bb1:  // pred: ^bb0
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc69)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc69)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc69)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc69)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc69)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc69)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc69)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc69)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc69)
    cir.br ^bb3(%21 : !u32i) loc(#loc69)
  ^bb2:  // pred: ^bb0
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc69)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc69)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc69)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc69)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc69)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc69)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc69)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc69)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc69)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc69)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc69)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc69)
    cir.br ^bb3(%37 : !u32i) loc(#loc69)
  ^bb3(%38: !u32i loc("CWE190_Integer_Overflow__char_rand_square_31.c":69:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc69)
  ^bb4:  // pred: ^bb3
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc69)
    %40 = cir.cast(integral, %39 : !s32i), !s8i loc(#loc69)
    cir.store %40, %3 : !s8i, !cir.ptr<!s8i> loc(#loc117)
    cir.br ^bb5 loc(#loc118)
  ^bb5:  // pred: ^bb4
    %41 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc60)
    cir.store %41, %0 : !s8i, !cir.ptr<!s8i> loc(#loc112)
    %42 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc62)
    cir.store %42, %1 : !s8i, !cir.ptr<!s8i> loc(#loc113)
    cir.br ^bb6 loc(#loc119)
  ^bb6:  // pred: ^bb5
    %43 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc75)
    %44 = cir.cast(integral, %43 : !s8i), !s64i loc(#loc75)
    %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc75)
    %46 = cir.abs %45 poison : !s32i loc(#loc76)
    %47 = cir.cast(integral, %46 : !s32i), !s64i loc(#loc76)
    %48 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc77)
    %49 = cir.const #cir.int<127> : !s32i loc(#loc78)
    %50 = cir.cast(int_to_float, %49 : !s32i), !cir.double loc(#loc78)
    %51 = cir.call @sqrt(%50) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc77)
    %52 = cir.cast(float_to_int, %51 : !cir.double), !s64i loc(#loc77)
    %53 = cir.cmp(le, %47, %52) : !s64i, !cir.bool loc(#loc120)
    cir.brcond %53 ^bb7, ^bb8 loc(#loc121)
  ^bb7:  // pred: ^bb6
    %54 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc83)
    %55 = cir.cast(integral, %54 : !s8i), !s32i loc(#loc83)
    %56 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc64)
    %57 = cir.cast(integral, %56 : !s8i), !s32i loc(#loc64)
    %58 = cir.binop(mul, %55, %57) nsw : !s32i loc(#loc83)
    %59 = cir.cast(integral, %58 : !s32i), !s8i loc(#loc83)
    cir.store %59, %2 : !s8i, !cir.ptr<!s8i> loc(#loc114)
    %60 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc84)
    cir.call @printHexCharLine(%60) : (!s8i) -> () loc(#loc85)
    cir.br ^bb9 loc(#loc81)
  ^bb8:  // pred: ^bb6
    %61 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc56)
    %62 = cir.cast(array_to_ptrdecay, %61 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%62) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    cir.br ^bb9 loc(#loc74)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc74)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc72)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc58)
  } loc(#loc111)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":24:1)
#loc6 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":39:1)
#loc7 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":31:9)
#loc8 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":31:25)
#loc9 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":32:9)
#loc10 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":32:21)
#loc11 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":35:13)
#loc12 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":35:34)
#loc13 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":26:5)
#loc14 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":26:10)
#loc15 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":27:12)
#loc16 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":27:5)
#loc18 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":29:5)
#loc19 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":30:5)
#loc20 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":38:5)
#loc21 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":33:9)
#loc22 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":37:9)
#loc23 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":35:27)
#loc24 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":36:30)
#loc25 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":36:13)
#loc26 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":86:1)
#loc27 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":90:1)
#loc28 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":88:5)
#loc29 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":88:13)
#loc30 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":89:5)
#loc31 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":89:13)
#loc32 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":46:1)
#loc33 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":61:1)
#loc34 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":53:9)
#loc35 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":53:25)
#loc36 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":54:9)
#loc37 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":54:21)
#loc38 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":57:13)
#loc39 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":57:34)
#loc40 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":48:5)
#loc41 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":48:10)
#loc42 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":49:12)
#loc43 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":49:5)
#loc44 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":51:12)
#loc45 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":51:5)
#loc46 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":52:5)
#loc47 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":60:5)
#loc48 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":55:9)
#loc49 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":59:9)
#loc50 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":57:27)
#loc51 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":58:30)
#loc52 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":58:13)
#loc53 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc56 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":81:23)
#loc57 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":64:1)
#loc58 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":84:1)
#loc59 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":71:9)
#loc60 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":71:25)
#loc61 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":72:9)
#loc62 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":72:21)
#loc63 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":76:13)
#loc64 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":76:34)
#loc65 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":66:5)
#loc66 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":66:10)
#loc67 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":67:12)
#loc68 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":67:5)
#loc70 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":69:5)
#loc71 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":70:5)
#loc72 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":83:5)
#loc73 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":74:9)
#loc74 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":82:9)
#loc75 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":74:23)
#loc76 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":74:13)
#loc77 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":74:38)
#loc78 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":74:51)
#loc79 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":74:59)
#loc80 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":75:9)
#loc81 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":78:9)
#loc82 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":80:9)
#loc83 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":76:27)
#loc84 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":77:30)
#loc85 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":77:13)
#loc86 = loc("CWE190_Integer_Overflow__char_rand_square_31.c":81:13)
#loc87 = loc(fused[#loc1, #loc2])
#loc88 = loc(fused[#loc3, #loc4])
#loc89 = loc(fused[#loc5, #loc6])
#loc90 = loc(fused[#loc7, #loc8])
#loc91 = loc(fused[#loc9, #loc10])
#loc92 = loc(fused[#loc11, #loc12])
#loc93 = loc(fused[#loc13, #loc14])
#loc94 = loc(fused[#loc16, #loc15])
#loc95 = loc(fused[#loc18, #loc17])
#loc96 = loc(fused[#loc19, #loc20])
#loc97 = loc(fused[#loc21, #loc22])
#loc98 = loc(fused[#loc26, #loc27])
#loc99 = loc(fused[#loc28, #loc29])
#loc100 = loc(fused[#loc30, #loc31])
#loc101 = loc(fused[#loc32, #loc33])
#loc102 = loc(fused[#loc34, #loc35])
#loc103 = loc(fused[#loc36, #loc37])
#loc104 = loc(fused[#loc38, #loc39])
#loc105 = loc(fused[#loc40, #loc41])
#loc106 = loc(fused[#loc43, #loc42])
#loc107 = loc(fused[#loc45, #loc44])
#loc108 = loc(fused[#loc46, #loc47])
#loc109 = loc(fused[#loc48, #loc49])
#loc110 = loc(fused[#loc54, #loc55])
#loc111 = loc(fused[#loc57, #loc58])
#loc112 = loc(fused[#loc59, #loc60])
#loc113 = loc(fused[#loc61, #loc62])
#loc114 = loc(fused[#loc63, #loc64])
#loc115 = loc(fused[#loc65, #loc66])
#loc116 = loc(fused[#loc68, #loc67])
#loc117 = loc(fused[#loc70, #loc69])
#loc118 = loc(fused[#loc71, #loc72])
#loc119 = loc(fused[#loc73, #loc74])
#loc120 = loc(fused[#loc76, #loc79])
#loc121 = loc(fused[#loc80, #loc81, #loc82, #loc74])
