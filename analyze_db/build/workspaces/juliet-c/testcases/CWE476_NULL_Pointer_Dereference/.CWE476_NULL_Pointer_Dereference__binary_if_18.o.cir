!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__twoIntsStruct = !cir.record<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__binary_if_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"intOne == 5\00" : !cir.array<!s8i x 12>> : !cir.array<!s8i x 12> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE476_NULL_Pointer_Dereference__binary_if_18_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc48)
    cir.goto "sink" loc(#loc49)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc10)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc7)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc48)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc13)
      %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc14)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc14)
      %5 = cir.cmp(ne, %2, %4) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc51)
      %6 = cir.cast(bool_to_int, %5 : !cir.bool), !s32i loc(#loc51)
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc15)
      %8 = cir.get_member %7[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc16)
      %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      %10 = cir.const #cir.int<5> : !s32i loc(#loc18)
      %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc52)
      %12 = cir.cast(bool_to_int, %11 : !cir.bool), !s32i loc(#loc52)
      %13 = cir.binop(and, %6, %12) : !s32i loc(#loc53)
      %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc21)
      cir.if %14 {
        %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc3)
        %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc3)
        cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc23)
      } loc(#loc54)
    } loc(#loc50)
    cir.return loc(#loc5)
  } loc(#loc47)
  cir.func no_proto @CWE476_NULL_Pointer_Dereference__binary_if_18_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc56)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    cir.return loc(#loc25)
  } loc(#loc55)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc58)
    cir.goto "sink" loc(#loc59)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc34)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc31)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc58)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc37)
      %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc38)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc38)
      %5 = cir.cmp(ne, %2, %4) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc61)
      %6 = cir.ternary(%5, true {
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc40)
        %8 = cir.get_member %7[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc16)
        %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc41)
        %10 = cir.const #cir.int<5> : !s32i loc(#loc42)
        %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc62)
        %12 = cir.ternary(%11, true {
          %13 = cir.const #true loc(#loc39)
          cir.yield %13 : !cir.bool loc(#loc39)
        }, false {
          %13 = cir.const #false loc(#loc39)
          cir.yield %13 : !cir.bool loc(#loc39)
        }) : (!cir.bool) -> !cir.bool loc(#loc39)
        cir.yield %12 : !cir.bool loc(#loc39)
      }, false {
        %7 = cir.const #false loc(#loc39)
        cir.yield %7 : !cir.bool loc(#loc39)
      }) : (!cir.bool) -> !cir.bool loc(#loc39)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc44)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc44)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc45)
      } loc(#loc63)
    } loc(#loc60)
    cir.return loc(#loc29)
  } loc(#loc57)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__binary_if_18.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":30:23)
#loc4 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":20:1)
#loc5 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":33:1)
#loc6 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":25:9)
#loc7 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":25:47)
#loc8 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":22:5)
#loc9 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":22:10)
#loc10 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":23:1)
#loc11 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":28:9)
#loc12 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":31:9)
#loc13 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":28:14)
#loc14 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":28:38)
#loc15 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":28:47)
#loc16 = loc("../../testcasesupport/std_testcase.h":98:9)
#loc17 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":28:69)
#loc18 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":28:79)
#loc19 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":28:13)
#loc20 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":28:80)
#loc21 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":28:44)
#loc22 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":29:9)
#loc23 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":30:13)
#loc24 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":55:1)
#loc25 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":58:1)
#loc26 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":57:5)
#loc27 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":57:11)
#loc28 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":40:1)
#loc29 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":53:1)
#loc30 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":45:9)
#loc31 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":45:47)
#loc32 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":42:5)
#loc33 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":42:10)
#loc34 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":43:1)
#loc35 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":48:9)
#loc36 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":51:9)
#loc37 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":48:14)
#loc38 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":48:38)
#loc39 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":48:44)
#loc40 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":48:48)
#loc41 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":48:70)
#loc42 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":48:80)
#loc43 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":49:9)
#loc44 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":50:23)
#loc45 = loc("CWE476_NULL_Pointer_Dereference__binary_if_18.c":50:13)
#loc46 = loc(fused[#loc1, #loc2])
#loc47 = loc(fused[#loc4, #loc5])
#loc48 = loc(fused[#loc6, #loc7])
#loc49 = loc(fused[#loc8, #loc9])
#loc50 = loc(fused[#loc11, #loc12])
#loc51 = loc(fused[#loc13, #loc14])
#loc52 = loc(fused[#loc15, #loc18])
#loc53 = loc(fused[#loc19, #loc20])
#loc54 = loc(fused[#loc22, #loc12])
#loc55 = loc(fused[#loc24, #loc25])
#loc56 = loc(fused[#loc26, #loc27])
#loc57 = loc(fused[#loc28, #loc29])
#loc58 = loc(fused[#loc30, #loc31])
#loc59 = loc(fused[#loc32, #loc33])
#loc60 = loc(fused[#loc35, #loc36])
#loc61 = loc(fused[#loc37, #loc38])
#loc62 = loc(fused[#loc40, #loc42])
#loc63 = loc(fused[#loc43, #loc36])
