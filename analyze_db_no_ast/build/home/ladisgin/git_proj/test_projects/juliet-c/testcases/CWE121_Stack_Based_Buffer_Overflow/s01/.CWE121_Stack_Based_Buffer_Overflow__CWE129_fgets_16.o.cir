!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc207)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc208)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc209)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc210)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @printIntLine(!s32i) loc(#loc211)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc18)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc22)
        cir.condition(%4) loc(#loc22)
      } do {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc217)
          %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc217)
          cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc217)
          cir.scope {
            %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc29)
            %6 = cir.const #cir.int<3> : !s32i loc(#loc30)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc30)
            %8 = cir.const #cir.int<4> : !u64i loc(#loc30)
            %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc30)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc30)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc30)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc30)
            %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc30)
            %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc208)
            %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc31)
            %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc32)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
            %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !s32i loc(#loc219)
            %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc34)
            cir.if %20 {
              %21 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc38)
              %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc39)
              cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
            } else {
              %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc42)
            } loc(#loc220)
          } loc(#loc218)
        } loc(#loc216)
        cir.break loc(#loc43)
      } loc(#loc215)
    } loc(#loc215)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc46)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc46)
        cir.condition(%4) loc(#loc46)
      } do {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc224)
          %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc225)
          %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc225)
          cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc225)
          cir.scope {
            %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
            %7 = cir.const #cir.int<0> : !s32i loc(#loc56)
            %8 = cir.cmp(ge, %6, %7) : !s32i, !s32i loc(#loc227)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc57)
            cir.if %9 {
              %10 = cir.const #cir.int<1> : !s32i loc(#loc61)
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
              %12 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc63)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc63)
              cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc229)
              cir.scope {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc66)
                cir.store %14, %3 : !s32i, !cir.ptr<!s32i> loc(#loc231)
                cir.for : cond {
                  %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc68)
                  %16 = cir.const #cir.int<10> : !s32i loc(#loc69)
                  %17 = cir.cmp(lt, %15, %16) : !s32i, !s32i loc(#loc232)
                  %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc70)
                  cir.condition(%18) loc(#loc70)
                } body {
                  cir.scope {
                    %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc72)
                    %16 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc73)
                    %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc73)
                    %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc73)
                    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc74)
                  } loc(#loc233)
                  cir.yield loc(#loc65)
                } step {
                  %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc75)
                  %16 = cir.unary(inc, %15) : !s32i, !s32i loc(#loc76)
                  cir.store %16, %3 : !s32i, !cir.ptr<!s32i> loc(#loc234)
                  cir.yield loc(#loc230)
                } loc(#loc230)
              } loc(#loc230)
            } else {
              %10 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc12)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc12)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc77)
            } loc(#loc228)
          } loc(#loc226)
        } loc(#loc223)
        cir.break loc(#loc78)
      } loc(#loc222)
    } loc(#loc222)
    cir.return loc(#loc14)
  } loc(#loc212)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc236)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc81)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc237)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc83)
    cir.return loc(#loc80)
  } loc(#loc235)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc85)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc239)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc91)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc240)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc95)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc95)
        cir.condition(%4) loc(#loc95)
      } do {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc243)
          %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc243)
          cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc243)
          cir.scope {
            %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc102)
            %6 = cir.const #cir.int<3> : !s32i loc(#loc103)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc103)
            %8 = cir.const #cir.int<4> : !u64i loc(#loc103)
            %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc103)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc103)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc103)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc103)
            %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc103)
            %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc208)
            %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc104)
            %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc105)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc106)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc106)
            %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !s32i loc(#loc245)
            %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc107)
            cir.if %20 {
              %21 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc111)
              %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc112)
              cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc247)
            } else {
              %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc115)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc115)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc116)
            } loc(#loc246)
          } loc(#loc244)
        } loc(#loc242)
        cir.break loc(#loc117)
      } loc(#loc241)
    } loc(#loc241)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc120)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc120)
        cir.condition(%4) loc(#loc120)
      } do {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc250)
          %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc251)
          %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc251)
          cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc251)
          cir.scope {
            %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
            %7 = cir.const #cir.int<0> : !s32i loc(#loc130)
            %8 = cir.cmp(ge, %6, %7) : !s32i, !s32i loc(#loc253)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc131)
            %10 = cir.ternary(%9, true {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc133)
              %12 = cir.const #cir.int<10> : !s32i loc(#loc134)
              %13 = cir.cmp(lt, %11, %12) : !s32i, !s32i loc(#loc254)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc136)
              %15 = cir.ternary(%14, true {
                %16 = cir.const #true loc(#loc132)
                cir.yield %16 : !cir.bool loc(#loc132)
              }, false {
                %16 = cir.const #false loc(#loc132)
                cir.yield %16 : !cir.bool loc(#loc132)
              }) : (!cir.bool) -> !cir.bool loc(#loc132)
              cir.yield %15 : !cir.bool loc(#loc132)
            }, false {
              %11 = cir.const #false loc(#loc132)
              cir.yield %11 : !cir.bool loc(#loc132)
            }) : (!cir.bool) -> !cir.bool loc(#loc132)
            cir.if %10 {
              %11 = cir.const #cir.int<1> : !s32i loc(#loc140)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc141)
              %13 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc142)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc142)
              cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc256)
              cir.scope {
                %15 = cir.const #cir.int<0> : !s32i loc(#loc145)
                cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc258)
                cir.for : cond {
                  %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc147)
                  %17 = cir.const #cir.int<10> : !s32i loc(#loc148)
                  %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc259)
                  %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc149)
                  cir.condition(%19) loc(#loc149)
                } body {
                  cir.scope {
                    %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc151)
                    %17 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc152)
                    %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc152)
                    %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc152)
                    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc153)
                  } loc(#loc260)
                  cir.yield loc(#loc144)
                } step {
                  %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc154)
                  %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc155)
                  cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc261)
                  cir.yield loc(#loc257)
                } loc(#loc257)
              } loc(#loc257)
            } else {
              %11 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc85)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc85)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc156)
            } loc(#loc255)
          } loc(#loc252)
        } loc(#loc249)
        cir.break loc(#loc157)
      } loc(#loc248)
    } loc(#loc248)
    cir.return loc(#loc87)
  } loc(#loc238)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc263)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc162)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc163)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc264)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc167)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc167)
        cir.condition(%4) loc(#loc167)
      } do {
        %3 = cir.const #cir.int<7> : !s32i loc(#loc168)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc266)
        cir.break loc(#loc170)
      } loc(#loc265)
    } loc(#loc265)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc173)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc173)
        cir.condition(%4) loc(#loc173)
      } do {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc269)
          %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc270)
          %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc270)
          cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc270)
          cir.scope {
            %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc182)
            %7 = cir.const #cir.int<0> : !s32i loc(#loc183)
            %8 = cir.cmp(ge, %6, %7) : !s32i, !s32i loc(#loc272)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc184)
            cir.if %9 {
              %10 = cir.const #cir.int<1> : !s32i loc(#loc188)
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc189)
              %12 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc190)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc190)
              cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc274)
              cir.scope {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc193)
                cir.store %14, %3 : !s32i, !cir.ptr<!s32i> loc(#loc276)
                cir.for : cond {
                  %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc195)
                  %16 = cir.const #cir.int<10> : !s32i loc(#loc196)
                  %17 = cir.cmp(lt, %15, %16) : !s32i, !s32i loc(#loc277)
                  %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc197)
                  cir.condition(%18) loc(#loc197)
                } body {
                  cir.scope {
                    %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc199)
                    %16 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc200)
                    %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc200)
                    %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc200)
                    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc201)
                  } loc(#loc278)
                  cir.yield loc(#loc192)
                } step {
                  %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc202)
                  %16 = cir.unary(inc, %15) : !s32i, !s32i loc(#loc203)
                  cir.store %16, %3 : !s32i, !cir.ptr<!s32i> loc(#loc279)
                  cir.yield loc(#loc275)
                } loc(#loc275)
              } loc(#loc275)
            } else {
              %10 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc204)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc204)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc205)
            } loc(#loc273)
          } loc(#loc271)
        } loc(#loc268)
        cir.break loc(#loc206)
      } loc(#loc267)
    } loc(#loc267)
    cir.return loc(#loc159)
  } loc(#loc262)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":41:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":64:27)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":24:1)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":69:1)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":26:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":26:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":28:13)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":28:12)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":28:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":29:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":45:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":29:11)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":31:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":43:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":32:13)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":32:49)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":34:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":42:13)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":34:23)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":34:36)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":34:53)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":34:17)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":34:63)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":34:60)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":35:13)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":38:13)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":40:13)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":37:29)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":37:24)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":37:17)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":37:40)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":41:17)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":44:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":46:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":68:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":46:11)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":48:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":66:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":49:13)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":49:17)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":50:13)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":50:34)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":53:13)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":65:13)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":53:17)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":53:25)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":53:22)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":54:13)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":61:13)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":63:13)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":55:32)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":55:24)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":55:17)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":57:17)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":60:17)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":57:25)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":57:21)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":57:28)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":57:32)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":57:30)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":58:17)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":59:41)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":59:34)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":59:21)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":57:37)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":57:36)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":64:17)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":67:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":160:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":164:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":162:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":162:13)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":163:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":163:13)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":115:27)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":76:1)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":120:1)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":78:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":78:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":80:13)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":80:12)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":80:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":81:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":97:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":81:11)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":83:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":95:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":84:13)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":84:49)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":86:13)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":94:13)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":86:23)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":86:36)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":86:53)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":86:17)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":86:63)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":86:60)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":87:13)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":90:13)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":92:13)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":89:29)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":89:24)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":89:17)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":89:40)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":93:27)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":93:17)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":96:9)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":98:5)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":119:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":98:11)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":100:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":117:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":101:13)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":101:17)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":102:13)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":102:34)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":104:13)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":116:13)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":104:17)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":104:25)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":104:22)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":104:27)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":104:30)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":104:38)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":104:40)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":104:35)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":105:13)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":112:13)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":114:13)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":106:32)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":106:24)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":106:17)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":108:17)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":111:17)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":108:25)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":108:21)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":108:28)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":108:32)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":108:30)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":109:17)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":110:41)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":110:34)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":110:21)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":108:37)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":108:36)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":115:17)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":118:9)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":123:1)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":158:1)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":125:5)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":125:9)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":127:13)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":127:12)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":127:5)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":128:5)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":134:5)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":128:11)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":132:16)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":132:9)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":133:9)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":135:5)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":157:5)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":135:11)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":137:9)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":155:9)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":138:13)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":138:17)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":139:13)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":139:34)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":142:13)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":154:13)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":142:17)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":142:25)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":142:22)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":143:13)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":150:13)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":152:13)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":144:32)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":144:24)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":144:17)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":146:17)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":149:17)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":146:25)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":146:21)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":146:28)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":146:32)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":146:30)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":147:17)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":148:41)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":148:34)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":148:21)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":146:37)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":146:36)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":153:27)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":153:17)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c":156:9)
#loc207 = loc(fused[#loc1, #loc2])
#loc208 = loc(fused[#loc3, #loc4])
#loc209 = loc(fused[#loc5, #loc6])
#loc210 = loc(fused[#loc7, #loc8])
#loc211 = loc(fused[#loc10, #loc11])
#loc212 = loc(fused[#loc13, #loc14])
#loc213 = loc(fused[#loc15, #loc16])
#loc214 = loc(fused[#loc19, #loc17])
#loc215 = loc(fused[#loc20, #loc21])
#loc216 = loc(fused[#loc23, #loc24])
#loc217 = loc(fused[#loc25, #loc26])
#loc218 = loc(fused[#loc27, #loc28])
#loc219 = loc(fused[#loc32, #loc33])
#loc220 = loc(fused[#loc35, #loc36, #loc37, #loc28])
#loc221 = loc(fused[#loc40, #loc41])
#loc222 = loc(fused[#loc44, #loc45])
#loc223 = loc(fused[#loc47, #loc48])
#loc224 = loc(fused[#loc49, #loc50])
#loc225 = loc(fused[#loc51, #loc52])
#loc226 = loc(fused[#loc53, #loc54])
#loc227 = loc(fused[#loc55, #loc56])
#loc228 = loc(fused[#loc58, #loc59, #loc60, #loc54])
#loc229 = loc(fused[#loc63, #loc61])
#loc230 = loc(fused[#loc64, #loc65])
#loc231 = loc(fused[#loc67, #loc66])
#loc232 = loc(fused[#loc68, #loc69])
#loc233 = loc(fused[#loc71, #loc65])
#loc234 = loc(fused[#loc76, #loc75])
#loc235 = loc(fused[#loc79, #loc80])
#loc236 = loc(fused[#loc81, #loc82])
#loc237 = loc(fused[#loc83, #loc84])
#loc238 = loc(fused[#loc86, #loc87])
#loc239 = loc(fused[#loc88, #loc89])
#loc240 = loc(fused[#loc92, #loc90])
#loc241 = loc(fused[#loc93, #loc94])
#loc242 = loc(fused[#loc96, #loc97])
#loc243 = loc(fused[#loc98, #loc99])
#loc244 = loc(fused[#loc100, #loc101])
#loc245 = loc(fused[#loc105, #loc106])
#loc246 = loc(fused[#loc108, #loc109, #loc110, #loc101])
#loc247 = loc(fused[#loc113, #loc114])
#loc248 = loc(fused[#loc118, #loc119])
#loc249 = loc(fused[#loc121, #loc122])
#loc250 = loc(fused[#loc123, #loc124])
#loc251 = loc(fused[#loc125, #loc126])
#loc252 = loc(fused[#loc127, #loc128])
#loc253 = loc(fused[#loc129, #loc130])
#loc254 = loc(fused[#loc133, #loc135])
#loc255 = loc(fused[#loc137, #loc138, #loc139, #loc128])
#loc256 = loc(fused[#loc142, #loc140])
#loc257 = loc(fused[#loc143, #loc144])
#loc258 = loc(fused[#loc146, #loc145])
#loc259 = loc(fused[#loc147, #loc148])
#loc260 = loc(fused[#loc150, #loc144])
#loc261 = loc(fused[#loc155, #loc154])
#loc262 = loc(fused[#loc158, #loc159])
#loc263 = loc(fused[#loc160, #loc161])
#loc264 = loc(fused[#loc164, #loc162])
#loc265 = loc(fused[#loc165, #loc166])
#loc266 = loc(fused[#loc169, #loc168])
#loc267 = loc(fused[#loc171, #loc172])
#loc268 = loc(fused[#loc174, #loc175])
#loc269 = loc(fused[#loc176, #loc177])
#loc270 = loc(fused[#loc178, #loc179])
#loc271 = loc(fused[#loc180, #loc181])
#loc272 = loc(fused[#loc182, #loc183])
#loc273 = loc(fused[#loc185, #loc186, #loc187, #loc181])
#loc274 = loc(fused[#loc190, #loc188])
#loc275 = loc(fused[#loc191, #loc192])
#loc276 = loc(fused[#loc194, #loc193])
#loc277 = loc(fused[#loc195, #loc196])
#loc278 = loc(fused[#loc198, #loc192])
#loc279 = loc(fused[#loc203, #loc202])
