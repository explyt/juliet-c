!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc106)
  cir.func private  @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc107)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc108)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE135_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc110)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc12)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc111)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc16)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc16)
        cir.condition(%3) loc(#loc16)
      } do {
        %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
        %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
        cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc113)
        cir.break loc(#loc18)
      } loc(#loc112)
    } loc(#loc112)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc21)
        cir.condition(%3) loc(#loc21)
      } do {
        cir.scope {
          %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc116)
          %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc117)
          %4 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc28)
          %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc29)
          %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc29)
          %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc28)
          cir.store %7, %2 : !u64i, !cir.ptr<!u64i> loc(#loc116)
          %8 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc27)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc27)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc27)
          %11 = cir.binop(add, %8, %10) : !u64i loc(#loc27)
          %12 = cir.const #cir.int<4> : !u64i loc(#loc27)
          %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc27)
          %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc27)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc27)
          cir.store %15, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc117)
          %16 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc30)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc30)
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc31)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc31)
          %20 = cir.call @wcscpy(%17, %19) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc32)
          %21 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc33)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc34)
        } loc(#loc115)
        cir.break loc(#loc35)
      } loc(#loc114)
    } loc(#loc114)
    cir.return loc(#loc9)
  } loc(#loc109)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE135_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc119)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc120)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc37)
  } loc(#loc118)
  cir.func private  @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc121)
  cir.func private  @printWLine(!cir.ptr<!s32i>) loc(#loc122)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc124)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc50)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc125)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc54)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc54)
        cir.condition(%3) loc(#loc54)
      } do {
        %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc55)
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc55)
        %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc55)
        cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc127)
        cir.break loc(#loc57)
      } loc(#loc126)
    } loc(#loc126)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc60)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc60)
        cir.condition(%3) loc(#loc60)
      } do {
        cir.scope {
          %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc130)
          %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc131)
          %4 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc67)
          %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc68)
          %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc68)
          %7 = cir.call @wcslen(%6) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc67)
          cir.store %7, %2 : !u64i, !cir.ptr<!u64i> loc(#loc130)
          %8 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc66)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc66)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc66)
          %11 = cir.binop(add, %8, %10) : !u64i loc(#loc66)
          %12 = cir.const #cir.int<4> : !u64i loc(#loc66)
          %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc66)
          %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc66)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc66)
          cir.store %15, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc131)
          %16 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc69)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc69)
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc70)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc70)
          %20 = cir.call @wcscpy(%17, %19) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc71)
          %21 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc72)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc72)
          cir.call @printWLine(%22) : (!cir.ptr<!s32i>) -> () loc(#loc73)
        } loc(#loc129)
        cir.break loc(#loc74)
      } loc(#loc128)
    } loc(#loc128)
    cir.return loc(#loc47)
  } loc(#loc123)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc75)
  cir.func private  @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc132)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc134)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc82)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc135)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc86)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc86)
        cir.condition(%3) loc(#loc86)
      } do {
        %2 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc75)
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc75)
        %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc75)
        cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc137)
        cir.break loc(#loc88)
      } loc(#loc136)
    } loc(#loc136)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc91)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc91)
        cir.condition(%3) loc(#loc91)
      } do {
        cir.scope {
          %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc140)
          %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc141)
          %4 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc98)
          %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc99)
          %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc99)
          %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc98)
          cir.store %7, %2 : !u64i, !cir.ptr<!u64i> loc(#loc140)
          %8 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc97)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc97)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc97)
          %11 = cir.binop(add, %8, %10) : !u64i loc(#loc97)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc97)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc97)
          %14 = cir.binop(mul, %11, %13) : !u64i loc(#loc97)
          %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc97)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc97)
          cir.store %16, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc141)
          %17 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc100)
          %18 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc101)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc101)
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc102)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc102)
          %22 = cir.call @strcpy(%19, %21) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc100)
          %23 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc103)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc103)
          cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc104)
        } loc(#loc139)
        cir.break loc(#loc105)
      } loc(#loc138)
    } loc(#loc138)
    cir.return loc(#loc79)
  } loc(#loc133)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":34:24)
#loc2 = loc("/usr/include/string.h":407:1)
#loc3 = loc("/usr/include/string.h":408:33)
#loc4 = loc("/usr/include/wchar.h":98:1)
#loc5 = loc("/usr/include/wchar.h":100:14)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":27:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":48:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":29:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":29:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":30:12)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":30:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":31:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":36:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":31:11)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":34:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":35:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":37:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":47:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":37:11)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":39:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":45:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":41:13)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":41:49)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":42:13)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":42:35)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":41:30)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":41:45)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":43:26)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":43:32)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":43:19)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":44:31)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":44:13)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":46:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":102:1)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":106:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":104:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":104:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":105:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":105:13)
#loc42 = loc("/usr/include/wchar.h":247:1)
#loc43 = loc("/usr/include/wchar.h":247:51)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":55:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":76:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":57:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":57:12)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":58:12)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":58:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":59:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":64:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":59:11)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":62:24)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":62:9)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":63:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":65:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":75:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":65:11)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":67:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":73:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":69:13)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":69:52)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":70:13)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":70:35)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":69:30)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":69:48)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":71:26)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":71:32)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":71:19)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":72:35)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":72:13)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":74:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":86:24)
#loc76 = loc("/usr/include/string.h":141:1)
#loc77 = loc("/usr/include/string.h":142:14)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":79:1)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":100:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":81:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":81:12)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":82:12)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":82:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":83:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":88:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":83:11)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":86:9)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":87:9)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":89:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":99:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":89:11)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":91:9)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":97:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":93:13)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":93:49)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":94:13)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":94:35)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":93:30)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":93:45)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":95:19)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":95:26)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":95:32)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":96:31)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":96:13)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":98:9)
#loc106 = loc(fused[#loc2, #loc3])
#loc107 = loc(fused[#loc4, #loc5])
#loc108 = loc(fused[#loc6, #loc7])
#loc109 = loc(fused[#loc8, #loc9])
#loc110 = loc(fused[#loc10, #loc11])
#loc111 = loc(fused[#loc13, #loc12])
#loc112 = loc(fused[#loc14, #loc15])
#loc113 = loc(fused[#loc17, #loc1])
#loc114 = loc(fused[#loc19, #loc20])
#loc115 = loc(fused[#loc22, #loc23])
#loc116 = loc(fused[#loc24, #loc25])
#loc117 = loc(fused[#loc26, #loc27])
#loc118 = loc(fused[#loc36, #loc37])
#loc119 = loc(fused[#loc38, #loc39])
#loc120 = loc(fused[#loc40, #loc41])
#loc121 = loc(fused[#loc42, #loc43])
#loc122 = loc(fused[#loc44, #loc45])
#loc123 = loc(fused[#loc46, #loc47])
#loc124 = loc(fused[#loc48, #loc49])
#loc125 = loc(fused[#loc51, #loc50])
#loc126 = loc(fused[#loc52, #loc53])
#loc127 = loc(fused[#loc56, #loc55])
#loc128 = loc(fused[#loc58, #loc59])
#loc129 = loc(fused[#loc61, #loc62])
#loc130 = loc(fused[#loc63, #loc64])
#loc131 = loc(fused[#loc65, #loc66])
#loc132 = loc(fused[#loc76, #loc77])
#loc133 = loc(fused[#loc78, #loc79])
#loc134 = loc(fused[#loc80, #loc81])
#loc135 = loc(fused[#loc83, #loc82])
#loc136 = loc(fused[#loc84, #loc85])
#loc137 = loc(fused[#loc87, #loc75])
#loc138 = loc(fused[#loc89, #loc90])
#loc139 = loc(fused[#loc92, #loc93])
#loc140 = loc(fused[#loc94, #loc95])
#loc141 = loc(fused[#loc96, #loc97])
